
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Fri Jul  7 17:18:11 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 fc 23	jsr $23fc			jsr 	PGMSetBaseAddress
.1007	20 b5 30	jsr $30b5			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.100f	4c 00 18	jmp $1800			jmp 	Command_RUN
.1012	4c 04 17	jmp $1704			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="R"					AM_RELATIVE 	= 'R' 						; bra nnnn
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="T"					AM_ABSOLUTEI  	= 'T' 						; jmp (nnnn)   [only instance]
="U"					AM_ABSOLUTEIX	= 'U' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d4					AM_ZIND 	= ('T'|AM_ZPAGE) 				; lda (nn)
=$d5					AM_ZINDX	= ('U'|AM_ZPAGE) 				; lda (nn,x)
=$d6					AM_ZINDY	= ('V'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90
=$8d91					PR_OPT = $8d91

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.1015					Command_AssemblerStart:
.1015					_CALoop:
.1015	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.1017	c8		iny				iny 								; consume it.
.1018	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.101a	f0 19		beq $1035			beq 	_CALabel
.101c	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.101e	f0 41		beq $1061			beq 	_CAExit
.1020	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.1022	f0 f1		beq $1015			beq 	_CALoop
.1024	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.1026	f0 18		beq $1040			beq 	_CAEnd
.1028	c9 f7		cmp #$f7			cmp 	#PR_AND	 					; AND is an opcode *and* a keyword
.102a	f0 0e		beq $103a			beq 	_CAOpcode
.102c	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.102e	c9 40		cmp #$40			cmp 	#$40
.1030	f0 08		beq $103a			beq 	_CAOpcode
.1032	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.1035					_CALabel:
.1035	20 bf 12	jsr $12bf			jsr 	ASLabel 					; handle a label
.1038	80 db		bra $1015			bra 	_CALoop
.103a					_CAOpcode:
.103a	88		dey				dey 								; get it back
.103b	20 d6 11	jsr $11d6			jsr 	ASOpcode 					; assemble that opcode.
.103e	80 d5		bra $1015			bra 	_CALoop
.1040	18		clc		_CAEnd:	clc 								; next line
.1041	b2 18		lda ($18)			lda 	(codePtr)
.1043	65 18		adc $18				adc 	codePtr
.1045	85 18		sta $18				sta 	codePtr
.1047	90 02		bcc $104b			bcc 	_CANoCarry
.1049	e6 19		inc $19				inc 	codePtr+1
.104b					_CANoCarry:
.104b	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.104d	b1 18		lda ($18),y			lda 	(codePtr),y
.104f	8d 30 06	sta $0630			sta 	ERRLine
.1052	c8		iny				iny
.1053	b1 18		lda ($18),y			lda 	(codePtr),y
.1055	8d 31 06	sta $0631			sta 	ERRLine+1
.1058	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.105a	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.105c	d0 b7		bne $1015			bne 	_CALoop 					; go round again
.105e	4c 70 18	jmp $1870			jmp 	Command_END 				; do END.
.1061					_CAExit:
.1061	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.1062					ASCalculateOpcodeHash:
.1062	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for AND token.
.1064	c9 f7		cmp #$f7			cmp 	#PR_AND
.1066	f0 28		beq $1090			beq 	_ASCOAnd
.1068	20 94 10	jsr $1094			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.106b	20 a1 10	jsr $10a1			jsr 	_ASCProcess 				; go through the shift/multiply process
.106e	85 24		sta $24				sta 	zTemp0
.1070	20 94 10	jsr $1094			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.1073	18		clc				clc
.1074	65 24		adc $24				adc 	zTemp0 						; add previous result.
.1076	2a		rol a				rol 	a 							; 8 bit rotate left
.1077	69 00		adc #$00			adc 	#0
.1079	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.107b	20 a1 10	jsr $10a1			jsr 	_ASCProcess 				; and shift/multiply again.
.107e	85 24		sta $24				sta 	zTemp0
.1080	20 94 10	jsr $1094			jsr 	_ASCGetCharacter 			; get third character
.1083	18		clc				clc
.1084	65 24		adc $24				adc 	zTemp0 						; and add
.1086	48		pha				pha
.1087	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.1089	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.108b	d0 1f		bne $10ac			bne 	_ASCSyntax
.108d	c8		iny				iny
.108e	68		pla				pla 								; restore and exit
.108f	60		rts				rts
.1090					_ASCOAnd:
.1090	c8		iny				iny 								; consume the token.
.1091	a9 6a		lda #$6a			lda 	#106 						; the hash value for "AND"
.1093	60		rts				rts
.1094					_ASCGetCharacter:
.1094	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.1096	c8		iny				iny
.1097	38		sec				sec
.1098	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.109a	30 10		bmi $10ac			bmi 	_ASCSyntax 					; check range.
.109c	c9 1a		cmp #$1a			cmp 	#26
.109e	b0 0c		bcs $10ac			bcs 	_ASCSyntax
.10a0	60		rts				rts
.10a1					_ASCProcess:
.10a1	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.10a3	0a		asl a				asl 	a
.10a4	0a		asl a				asl 	a
.10a5	18		clc				clc
.10a6	65 25		adc $25				adc 	zTemp0+1
.10a8	18		clc				clc 								; add 68
.10a9	69 44		adc #$44			adc 	#68
.10ab	60		rts				rts
.10ac					_ASCSyntax:
.10ac	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.10af					ASGenerateCode:
.10af	5a		phy				phy
.10b0	a2 00		ldx #$00			ldx 	#0
.10b2					_ASGSearch:
.10b2	bd d5 1d	lda $1dd5,x			lda 	AssemblerLookup,x 			; check table
.10b5	cd 04 05	cmp $0504			cmp 	ASCurrOpcode 				; do we have a match ?
.10b8	d0 0e		bne $10c8			bne 	_ASGNoMatch
.10ba	da		phx				phx 								; save X
.10bb	8a		txa				txa 								; get the address mode for this instruction
.10bc	8d 03 05	sta $0503			sta 	ASGOpcode
.10bf	20 71 11	jsr $1171			jsr 	ASGetModeForOpcode 			; into A.
.10c2	20 d0 10	jsr $10d0			jsr 	ASGTryGenerate		 		; try to generate with mode A
.10c5	fa		plx				plx
.10c6	b0 06		bcs $10ce			bcs 	_ASGDone 					; successful :)
.10c8					_ASGNoMatch:
.10c8	e8		inx				inx 								; keep going.
.10c9	d0 e7		bne $10b2			bne 	_ASGSearch
.10cb	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.10ce					_ASGDone:
.10ce	7a		ply				ply
.10cf	60		rts				rts
.10d0					ASGTryGenerate:
.10d0	c9 52		cmp #$52			cmp 	#AM_RELATIVE 				; is it relative (will identify as absolute)
.10d2	f0 58		beq $112c			beq 	_ASGRelative
.10d4	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; do the modes match ?
.10d7	f0 26		beq $10ff			beq 	_ASGMatches 				; yes, we have a result.
.10d9	ae 05 05	ldx $0505			ldx 	ASCurrMode 					; get the instruction mode.
.10dc	e0 41		cpx #$41			cpx 	#AM_ABSOLUTE 				; is it an absolute we can try as ZP
.10de	f0 12		beq $10f2			beq 	_ASGTryZero 				; this works because in the 65C02 all the
.10e0	e0 58		cpx #$58			cpx 	#AM_ABSOLUTEX 				; ZP equivalents are before the Absolutes
.10e2	f0 0e		beq $10f2			beq 	_ASGTryZero 				; numerically.
.10e4	e0 59		cpx #$59			cpx 	#AM_ABSOLUTEY
.10e6	f0 0a		beq $10f2			beq 	_ASGTryZero
.10e8	e0 54		cpx #$54			cpx 	#AM_ABSOLUTEI
.10ea	f0 06		beq $10f2			beq 	_ASGTryZero
.10ec	e0 55		cpx #$55			cpx 	#AM_ABSOLUTEIX
.10ee	f0 02		beq $10f2			beq 	_ASGTryZero
.10f0					_ASGFail:
.10f0	18		clc				clc 								; give up.
.10f1	60		rts				rts
.10f2					_ASGTryZero:
.10f2	29 7f		and #$7f			and 	#$7F 						; this is the ZP equivalent of A,AX,AY ?
.10f4	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; does that match ?
.10f7	d0 f7		bne $10f0			bne  	_ASGFail 					; no, this won't work.
.10f9	09 80		ora #$80			ora 	#$80 						; try with a ZP
.10fb	a6 09		ldx $09				ldx 	IFR0+IM1 					; check if this is okay for zero page.
.10fd	d0 f1		bne $10f0			bne 	_ASGFail 					; cannot use as the value is too large (e.g. >256)
.10ff					_ASGMatches:
.10ff	48		pha				pha
.1100	20 7a 12	jsr $127a			jsr 	ASAddress 					; address out.
.1103	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.1106	20 55 12	jsr $1255			jsr 	ASWriteByte 				; write a byte
.1109	68		pla				pla
.110a	c9 49		cmp #$49			cmp 	#AM_IMPLIED 				; dispatch
.110c	f0 0e		beq $111c			beq 	_ASGExit
.110e	c9 00		cmp #$00			cmp 	#0
.1110	30 0f		bmi $1121			bmi 	_ASGZeroPage
.1112					_ASGAbsolute:
.1112	a5 08		lda $08				lda 	IFR0+IM0
.1114	20 55 12	jsr $1255			jsr 	ASWriteByte
.1117	a5 09		lda $09				lda 	IFR0+IM1
.1119					_ASGWExit:
.1119	20 55 12	jsr $1255			jsr 	ASWriteByte
.111c					_ASGExit:
.111c	20 97 12	jsr $1297			jsr 	ASEndLine
.111f	38		sec				sec
.1120	60		rts				rts
.1121					_ASGZeroPage:
.1121	a5 09		lda $09				lda 	IFR0+IM1 					; check operand
.1123	f0 03		beq $1128			beq 	_ASGWriteLSB
.1125	4c 62 2a	jmp $2a62		jmp	ErrorV_value
.1128					_ASGWriteLSB:
.1128	a5 08		lda $08				lda 	IFR0+IM0
.112a	80 ed		bra $1119			bra 	_ASGWExit
.112c					_ASGRelative:
.112c	48		pha				pha
.112d	20 7a 12	jsr $127a			jsr 	ASAddress 					; address out.
.1130	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.1133	20 55 12	jsr $1255			jsr 	ASWriteByte 				; write a byte
.1136	68		pla				pla
.1137	ad 05 05	lda $0505			lda 	ASCurrMode 					; check absolute.
.113a	c9 41		cmp #$41			cmp 	#AM_ABSOLUTE
.113c	f0 03		beq $1141			beq 	_ASGCalcCheck
.113e	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.1141					_ASGCalcCheck:
.1141	ad 06 05	lda $0506			lda 	ASMOption 					; if pass bit set, just write junk
.1144	29 02		and #$02			and 	#2
.1146	aa		tax				tax
.1147	f0 1c		beq $1165			beq 	_ASGRout
.1149	18		clc				clc 								; calculate offset, borrowing one.
.114a	a5 08		lda $08				lda 	IFR0+IM0
.114c	ed b4 06	sbc $06b4			sbc 	('P'-'A')*4 + FastVariables + 0
.114f	aa		tax				tax
.1150	a5 09		lda $09				lda 	IFR0+IM1
.1152	ed b5 06	sbc $06b5			sbc 	('P'-'A')*4 + FastVariables + 1
.1155	85 24		sta $24				sta 	zTemp0 						; save MSB temporarily
.1157	e0 00		cpx #$00			cpx 	#0 							; if X is -ve A needs to be $FF so inc so it needs to be $00
.1159	10 01		bpl $115c			bpl 	_ASGForward
.115b	1a		inc a				inc 	a
.115c					_ASGForward:
.115c	c9 00		cmp #$00			cmp 	#0
.115e	d0 0e		bne $116e			bne 	_ASGRange
.1160	8a		txa				txa 								; MSB and LSB need to be the same sign.
.1161	45 24		eor $24				eor 	zTemp0
.1163	30 09		bmi $116e			bmi 	_ASGRange
.1165					_ASGRout:
.1165	8a		txa				txa
.1166	20 55 12	jsr $1255			jsr 	ASWriteByte 				; write the relative branch
.1169	20 97 12	jsr $1297			jsr 	ASEndLine
.116c	38		sec				sec
.116d	60		rts				rts
.116e					_ASGRange:
.116e	4c 51 2a	jmp $2a51		jmp	ErrorV_range
.0503					ASGOpcode:
>0503							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.1171					ASGetModeForOpcode:
.1171	5a		phy				phy
.1172	a8		tay				tay 								; save in Y
.1173	a2 00		ldx #$00			ldx 	#0
.1175					_ASGSearch:
.1175	98		tya				tya 								; check if opcode matches
.1176	dd bb 11	cmp $11bb,x			cmp 	ASGSpecialCases,x
.1179	f0 1b		beq $1196			beq 	_ASGIsSpecial
.117b	e8		inx				inx
.117c	e8		inx				inx
.117d	bd bb 11	lda $11bb,x			lda 	ASGSpecialCases,x 			; check end of table ($F3 is an illegal 65C02 opcode)
.1180	c9 f3		cmp #$f3			cmp 	#$F3
.1182	d0 f1		bne $1175			bne 	_ASGSearch
.1184	98		tya				tya 								; only interested in lower 5 bits.
.1185	29 1f		and #$1f			and 	#$1F
.1187	a8		tay				tay
.1188	29 0f		and #$0f			and 	#$0F 						; lower 4 bits of the opcode
.118a	0a		asl a				asl 	a 							; index into ASG Table
.118b	aa		tax				tax
.118c	c0 10		cpy #$10			cpy 	#$10 						; was bit 5 set,  e.g. the MSB is odd
.118e	90 01		bcc $1191			bcc 	_ASGEven
.1190	e8		inx				inx 								; if so, take from second half.
.1191					_ASGEven:
.1191	bd 9b 11	lda $119b,x			lda 	ASGTable,x 					; fetch the mode from the table
.1194	7a		ply				ply
.1195	60		rts				rts
.1196					_ASGIsSpecial:
.1196	bd bc 11	lda $11bc,x			lda 	ASGSpecialCases+1,x 		; get special case for that mode.
.1199	7a		ply				ply
.119a	60		rts				rts
.119b					ASGTable:
>119b	a3 52						.byte 	AM_IMMEDIATE,AM_RELATIVE				; x0
>119d	d5 d6						.byte 	AM_ZINDX,AM_ZINDY 						; x1
>119f	a3 d4						.byte 	AM_IMMEDIATE,AM_ZIND 					; x2
>11a1	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x3 (all NOP)
>11a3	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x4
>11a5	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x5
>11a7	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x6
>11a9	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; x7
>11ab	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x8
>11ad	a3 59						.byte 	AM_IMMEDIATE,AM_ABSOLUTEY				; x9
>11af	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xA
>11b1	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xB
>11b3	41 41						.byte 	AM_ABSOLUTE,AM_ABSOLUTE 				; xC
>11b5	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xD
>11b7	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xE
>11b9	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; xF
.11bb					ASGSpecialCases:
>11bb	80 52						.byte	$80	,	AM_RELATIVE						;	BRA	rel
>11bd	14 c1						.byte	$14	,	AM_ZERO							;	TRB	nn
>11bf	96 d9						.byte	$96	,	AM_ZEROY						;	STX	nn,y
>11c1	b6 d9						.byte	$B6	,	AM_ZEROY						;	LDX	nn,y
>11c3	3c 58						.byte	$3C	,	AM_ABSOLUTEX					;	BIT	nnnn,x
>11c5	6c 54						.byte	$6C	,	AM_ABSOLUTEI					;	JMP	(nnnn)
>11c7	7c 55						.byte	$7C	,	AM_ABSOLUTEIX					;	JMP 	(nnnn,x)
>11c9	bc 58						.byte	$BC	,	AM_ABSOLUTEX					;	LDY	nnnn,x
>11cb	be 59						.byte	$BE	,	AM_ABSOLUTEY					;	LDX	nnnn,y
>11cd	00 49						.byte	$00	,	AM_IMPLIED						;	BRK
>11cf	20 41						.byte	$20	,	AM_ABSOLUTE						;	JSR	nnnn
>11d1	40 49						.byte	$40	,	AM_IMPLIED						;	RTI
>11d3	60 49						.byte	$60	,	AM_IMPLIED						;	RTS
>11d5	f3						.byte 	$F3 									; (illegal opcode)

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.11d6					ASOpcode:
.11d6	20 62 10	jsr $1062			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.11d9	8d 04 05	sta $0504			sta 	ASCurrOpcode
.11dc	20 e6 11	jsr $11e6			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.11df	8d 05 05	sta $0505			sta 	ASCurrMode
.11e2	20 af 10	jsr $10af			jsr 	ASGenerateCode 				; search and generate appropriate code.
.11e5	60		rts				rts
.0504					ASCurrOpcode:
>0504							.fill 	1
.0505					ASCurrMode:
>0505							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/parsemode.asm

.11e6					ASIdentifyAddressMode:
.11e6	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.11e8	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.11ea	f0 17		beq $1203			beq 	_ASImplied
.11ec	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11ee	f0 13		beq $1203			beq 	_ASImplied
.11f0	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.11f2	f0 12		beq $1206			beq 	_ASImmediate
.11f4	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.11f6	f0 15		beq $120d			beq 	_ASIndirect
.11f8	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.11fb	20 35 12	jsr $1235			jsr 	ASCheckIndex 				; check index follows
.11fe	b0 02		bcs $1202			bcs 	_ASIndexed 					; index found ? then it will return X Y
.1200	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.1202					_ASIndexed:
.1202	60		rts				rts
.1203					_ASImplied:
.1203	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.1205	60		rts				rts
.1206					_ASImmediate:
.1206	c8		iny				iny 								; consume #
.1207	20 69 1a	jsr $1a69			jsr 	EXPEvalInteger8 			; 8 bit operand
.120a	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.120c	60		rts				rts
.120d					_ASIndirect:
.120d	c8		iny				iny 								; consume the open bracket
.120e	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.1211	20 35 12	jsr $1235			jsr 	ASCheckIndex 				; look for ,X
.1214	b0 12		bcs $1228			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.1216	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.1219	20 35 12	jsr $1235			jsr 	ASCheckIndex
.121c	90 07		bcc $1225			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.121e	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.1220	d0 10		bne $1232			bne 	ASCISyntax 					; if not error
.1222	a9 d6		lda #$d6			lda 	#AM_ZINDY 					; return (nn),y
.1224	60		rts				rts
.1225					_ASIIndirect:
.1225	a9 54		lda #$54			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.1227	60		rts				rts
.1228					_ASInternalIndirect:
.1228	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.122a	d0 06		bne $1232			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.122c	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.122f	a9 55		lda #$55			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.1231	60		rts				rts
.1232					ASCISyntax:
.1232	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.1235					ASCheckIndex:
.1235	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.1237	c9 99		cmp #$99			cmp 	#PR_COMMA
.1239	d0 18		bne $1253			bne 	_ASCIFail
.123b	c8		iny				iny 								; consume comma
.123c	b1 18		lda ($18),y			lda 	(codePtr),y
.123e	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.1240	f0 04		beq $1246			beq 	_ASCIFound
.1242	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.1244	d0 ec		bne $1232			bne 	ASCISyntax
.1246					_ASCIFound:
.1246	aa		tax				tax 								; save X or Y in X
.1247	c8		iny				iny 								; consume
.1248	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.124a	c8		iny				iny
.124b	c9 7c		cmp #$7c			cmp 	#$7C
.124d	d0 e3		bne $1232			bne 	ASCISyntax
.124f	8a		txa				txa 								; get X/Y back
.1250	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.1251	38		sec				sec
.1252	60		rts				rts
.1253					_ASCIFail:
.1253	18		clc				clc
.1254	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/write.asm

.1255					ASWriteByte:
.1255	ae b4 06	ldx $06b4			ldx 	('P'-'A')*4 + FastVariables + 0
.1258	86 24		stx $24				stx 	zTemp0
.125a	ae b5 06	ldx $06b5			ldx 	('P'-'A')*4 + FastVariables + 1
.125d	86 25		stx $25				stx 	zTemp0+1
.125f	92 24		sta ($24)			sta 	(zTemp0)
.1261	aa		tax				tax
.1262	ad 06 05	lda $0506			lda 	ASMOption
.1265	4a		lsr a				lsr 	a
.1266	90 09		bcc $1271			bcc 	_ASWBNoEcho
.1268	a9 20		lda #$20			lda 	#32
.126a	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.126d	8a		txa				txa
.126e	20 a3 12	jsr $12a3			jsr 	ASPrintHex
.1271					_ASWBNoEcho:
.1271	ee b4 06	inc $06b4			inc 	('P'-'A')*4 + FastVariables + 0
.1274	d0 03		bne $1279			bne 	_ASWBNoCarry
.1276	ee b5 06	inc $06b5			inc 	('P'-'A')*4 + FastVariables + 1
.1279					_ASWBNoCarry:
.1279	60		rts				rts
.127a					ASAddress:
.127a	ad 06 05	lda $0506			lda 	ASMOption
.127d	4a		lsr a				lsr 	a
.127e	90 16		bcc $1296			bcc 	_ASAExit
.1280	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables + 1
.1283	20 a3 12	jsr $12a3			jsr 	ASPrintHex
.1286	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables + 0
.1289	20 a3 12	jsr $12a3			jsr 	ASPrintHex
.128c	a9 20		lda #$20			lda 	#32
.128e	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1291	a9 3a		lda #$3a			lda 	#':'
.1293	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1296					_ASAExit:
.1296	60		rts				rts
.1297					ASEndLine:
.1297	ad 06 05	lda $0506			lda 	ASMOption
.129a	4a		lsr a				lsr 	a
.129b	90 05		bcc $12a2			bcc 	_ASEExit
.129d	a9 0d		lda #$0d			lda 	#13
.129f	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.12a2					_ASEExit:
.12a2	60		rts				rts
.12a3					ASPrintHex:
.12a3	48		pha				pha
.12a4	4a		lsr a				lsr 	a
.12a5	4a		lsr a				lsr 	a
.12a6	4a		lsr a				lsr 	a
.12a7	4a		lsr a				lsr 	a
.12a8	20 ac 12	jsr $12ac			jsr 	_ASPrintNibble
.12ab	68		pla				pla
.12ac					_ASPrintNibble:
.12ac	29 0f		and #$0f			and 	#15
.12ae	c9 0a		cmp #$0a			cmp 	#10
.12b0	90 02		bcc $12b4			bcc 	_ASNotHex
.12b2	69 06		adc #$06			adc 	#6
.12b4					_ASNotHex:
.12b4	69 30		adc #$30			adc 	#48
.12b6	c9 40		cmp #$40			cmp 	#64
.12b8	90 02		bcc $12bc			bcc 	_ASNotChar
.12ba	49 20		eor #$20			eor 	#32
.12bc					_ASNotChar:
.12bc	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.12bf					ASLabel:
.12bf	20 d3 1a	jsr $1ad3			jsr 	EXPTermR0 					; get term
.12c2	90 38		bcc $12fc			bcc 	_ALError 					; must be a reference term.
.12c4	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.12c6	30 34		bmi $12fc			bmi 	_ALError
.12c8	ad 06 05	lda $0506			lda 	ASMOption 					; on pass 2 (e.g. OPT bit 1 is set)
.12cb	29 02		and #$02			and 	#2
.12cd	f0 16		beq $12e5			beq 	_ASLNoCheck
.12cf	5a		phy				phy 								; if the variable changes there's an error.
.12d0	b2 08		lda ($08)			lda 	(IFR0+IM0)
.12d2	f0 05		beq $12d9			beq 	_ASLOk1						; (providing not changed from zero)
.12d4	cd b4 06	cmp $06b4			cmp 	('P'-'A')*4 + FastVariables
.12d7	d0 26		bne $12ff			bne 	_ALChanged
.12d9					_ASLOk1:
.12d9	a0 01		ldy #$01			ldy 	#1
.12db	b1 08		lda ($08),y			lda 	(IFR0+IM0),y
.12dd	f0 05		beq $12e4			beq 	_ASLOk2
.12df	cd b5 06	cmp $06b5			cmp 	('P'-'A')*4 + FastVariables+1
.12e2	d0 1b		bne $12ff			bne 	_ALChanged
.12e4					_ASLOk2:
.12e4	7a		ply				ply
.12e5					_ASLNoCheck:
.12e5	5a		phy				phy
.12e6	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.12e9	92 08		sta ($08)			sta 	(IFR0+IM0)
.12eb	a0 01		ldy #$01			ldy 	#1
.12ed	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables+1
.12f0	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12f2	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.12f4	c8		iny				iny
.12f5	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12f7	c8		iny				iny
.12f8	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12fa	7a		ply				ply
.12fb	60		rts				rts
.12fc					_ALError:
.12fc	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.12ff					_ALChanged:
.12ff	4c 11 2c	jmp $2c11		jmp	ErrorV_align

;******  Return to file: include.files


;******  Processing file: src/assembler/opt.asm

.1302					Command_OPT:
.1302	20 69 1a	jsr $1a69			jsr 	EXPEvalInteger8
.1305	8d 06 05	sta $0506			sta 	ASMOption
.1308	60		rts				rts
.0506					ASMOption:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1309					Command_ASSERT:
.1309	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; get a number to assert
.130c	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.130e	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.1311	f0 01		beq $1314			beq 	_CAFail 					; if so, the assert fails.
.1313	60		rts				rts
.1314					_CAFail:
.1314	4c 96 2a	jmp $2a96		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1317					Command_CLEAR:
.1317	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1319	c9 9b		cmp #$9b			cmp 	#PR_COLON
.131b	f0 14		beq $1331			beq 	_CLNoParam
.131d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.131f	f0 10		beq $1331			beq 	_CLNoParam
.1321	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; address for CLEAR
.1324	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1326	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1328	b0 0b		bcs $1335			bcs 	_CLMemory
.132a	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.132c	90 07		bcc $1335			bcc 	_CLMemory
.132e	8d 1f 05	sta $051f			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1331					_CLNoParam:
.1331	20 38 13	jsr $1338			jsr 	ClearCode
.1334	60		rts				rts
.1335					_CLMemory:
.1335	4c 30 2b	jmp $2b30		jmp	ErrorV_memory
.1338					ClearCode:
.1338	20 0f 24	jsr $240f			jsr 	PGMEndProgram 				; end program => zTemp0
.133b	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.133d	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.133f	1a		inc a				inc 	a
.1340	85 2b		sta $2b				sta 	freeMemory+1
.1342	20 54 30	jsr $3054			jsr 	VARClearHashTables
.1345	ad 1f 05	lda $051f			lda 	PGMEndMemoryHigh
.1348	20 99 2c	jsr $2c99			jsr 	StackReset 					; page passed on in A
.134b	20 f8 2c	jsr $2cf8			jsr 	StringSystemInitialise
.134e	20 ab 29	jsr $29ab			jsr 	ScanProcedures
.1351	20 d2 17	jsr $17d2			jsr 	Command_RESTORE
.1354	60		rts				rts
.1355					AllocateMemory:
.1355	5a		phy				phy 								; save Y
.1356	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1358	5a		phy				phy
.1359	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.135b	5a		phy				phy
.135c	a8		tay				tay 								; count is now in XY
.135d					_AllocateLoop:
.135d	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.135f	d0 04		bne $1365			bne 	_AllocateOne
.1361	c0 00		cpy #$00			cpy 	#0
.1363	f0 15		beq $137a			beq 	_AllocateExit
.1365					_AllocateOne:
.1365	a9 00		lda #$00			lda 	#0 							; zero byte
.1367	92 2a		sta ($2a)			sta 	(freeMemory)
.1369	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.136b	d0 05		bne $1372			bne 	_AllocateSkipCarry
.136d	e6 2b		inc $2b				inc 	freeMemory+1
.136f	20 7e 13	jsr $137e			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1372					_AllocateSkipCarry:
.1372	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1374	d0 01		bne $1377			bne 	_AllocateSkipBorrow
.1376	ca		dex				dex
.1377					_AllocateSkipBorrow:
.1377	88		dey				dey
.1378	80 e3		bra $135d			bra 	_AllocateLoop
.137a					_AllocateExit:
.137a	fa		plx				plx 								; restore address
.137b	68		pla				pla
.137c	7a		ply				ply 								; restore Y
.137d	60		rts				rts
.137e					ClearCheckMemory:
.137e	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.1380	1a		inc a				inc 	a 							; spacing 2 pages
.1381	1a		inc a				inc 	a
.1382	cd 27 06	cmp $0627			cmp 	stringMemory+1 				; problems if hit string memory
.1385	b0 01		bcs $1388			bcs  	_CCMError
.1387	60		rts				rts
.1388					_CCMError:
.1388	4c 30 2b	jmp $2b30		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.138b					CommandDIM:
.138b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.138d	29 c0		and #$c0			and 	#$C0
.138f	c9 40		cmp #$40			cmp 	#$40
.1391	d0 39		bne $13cc			bne 	_CDSyntax
.1393	20 0b 30	jsr $300b			jsr 	VARGetInfo 					; get information
.1396	ad 35 06	lda $0635			lda 	VARType 					; check array.
.1399	29 02		and #$02			and 	#2
.139b	f0 2f		beq $13cc			beq 	_CDSyntax
.139d	20 bd 2f	jsr $2fbd			jsr 	VARFind 					; does it already exist
.13a0	b0 2d		bcs $13cf			bcs 	_CDExists
.13a2	20 69 2f	jsr $2f69			jsr 	VARCreate 					; create it - returns data ptr in XA
.13a5	da		phx				phx 								; save target address
.13a6	48		pha				pha
.13a7	ad 35 06	lda $0635			lda 	VARType 					; type ID.
.13aa	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.13ac	20 d2 13	jsr $13d2			jsr 	CreateArray 				; create array to XA
.13af	84 26		sty $26				sty 	zTemp1 						; save Y
.13b1	7a		ply				ply 								; restore target to zTemp0
.13b2	84 24		sty $24				sty 	zTemp0
.13b4	7a		ply				ply
.13b5	84 25		sty $25				sty 	zTemp0+1
.13b7	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.13b9	a0 01		ldy #$01			ldy 	#1
.13bb	8a		txa				txa
.13bc	91 24		sta ($24),y			sta 	(zTemp0),y
.13be	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.13c0	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 				; check )
.13c3	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.13c5	c8		iny				iny
.13c6	c9 99		cmp #$99			cmp 	#PR_COMMA
.13c8	f0 c1		beq $138b			beq 	CommandDIM
.13ca	88		dey				dey
.13cb	60		rts				rts
.13cc					_CDSyntax:
.13cc	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.13cf					_CDExists:
.13cf	4c 08 2b	jmp $2b08		jmp	ErrorV_redefine
.13d2					CreateArray:
.13d2	8d 07 05	sta $0507			sta 	CAType						; save type
.13d5	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; get array dimension to R0
.13d8	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.13da	c9 99		cmp #$99			cmp 	#PR_COMMA
.13dc	f0 04		beq $13e2			beq 	_CATwoDimensions
.13de	20 2e 14	jsr $142e			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.13e1	60		rts				rts
.13e2					_CATwoDimensions:
.13e2	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.13e4	8d 09 05	sta $0509			sta 	CADim1+1
.13e7	a5 08		lda $08				lda 	IFR0+IM0
.13e9	8d 08 05	sta $0508			sta 	CADim1+0
.13ec	20 33 2c	jsr $2c33			jsr 	ERRCheckComma 				; check comma
.13ef	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.13f2	5a		phy				phy 								; save Y position
.13f3	18		clc				clc 								; allocate the outer array of pointers.
.13f4	ae 09 05	ldx $0509			ldx 	CADim1+1
.13f7	ad 08 05	lda $0508			lda 	CADim1
.13fa	20 6d 14	jsr $146d			jsr 	CSAAllocate 				; allocate the outer array
.13fd	da		phx				phx									; save this address on the stack
.13fe	48		pha				pha
.13ff	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.1401	85 28		sta $28				sta 	zTemp2
.1403					_CACreateSubLoop:
.1403	38		sec				sec
.1404	20 2e 14	jsr $142e			jsr 	CreateSingleArray 			; create data array of required size.
.1407	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1409	91 28		sta ($28),y			sta 	(zTemp2),y
.140b	8a		txa				txa
.140c	c8		iny				iny
.140d	91 28		sta ($28),y			sta 	(zTemp2),y
.140f	18		clc				clc  								; next slot.
.1410	a5 28		lda $28				lda 	zTemp2
.1412	69 02		adc #$02			adc 	#2
.1414	85 28		sta $28				sta 	zTemp2
.1416	90 02		bcc $141a			bcc 	_CACNoCarry
.1418	e6 29		inc $29				inc 	zTemp2+1
.141a					_CACNoCarry:
.141a	ad 08 05	lda $0508			lda 	CADim1 						; use DIM1 as a counter
.141d	d0 03		bne $1422			bne 	_CACNoBorrow
.141f	ce 09 05	dec $0509			dec 	CADim1+1
.1422					_CACNoBorrow:
.1422	ce 08 05	dec $0508			dec 	CADim1
.1425	ad 09 05	lda $0509			lda 	CADim1+1 					; but do one more.
.1428	10 d9		bpl $1403			bpl 	_CACreateSubLoop
.142a	68		pla				pla
.142b	fa		plx				plx
.142c	7a		ply				ply
.142d	60		rts				rts
.142e					CreateSingleArray:
.142e	5a		phy				phy
.142f	38		sec				sec 								; allocate memory block all zeros.
.1430	a5 08		lda $08				lda 	IFR0+IM0
.1432	a6 09		ldx $09				ldx 	IFR0+IM1
.1434	20 6d 14	jsr $146d			jsr 	CSAAllocate
.1437	ac 07 05	ldy $0507			ldy 	CAType 						; if numbers, we don't need to initialise.
.143a	f0 2f		beq $146b			beq 	_CSANoInit
.143c	da		phx				phx 								; save address of new array
.143d	48		pha				pha
.143e	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.1440	86 25		stx $25				stx 	zTemp0+1
.1442	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1444	b1 24		lda ($24),y			lda 	(zTemp0),y
.1446	a8		tay				tay
.1447	b2 24		lda ($24)			lda 	(zTemp0)
.1449	aa		tax				tax
.144a					_CSAEraseString:
.144a	5a		phy				phy
.144b	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.144d	a9 80		lda #$80			lda 	#$80
.144f	91 24		sta ($24),y			sta 	(zTemp0),y
.1451	7a		ply				ply
.1452	18		clc				clc 								; add 4 to next slot.
.1453	a5 24		lda $24				lda 	zTemp0
.1455	69 04		adc #$04			adc 	#4
.1457	85 24		sta $24				sta 	zTemp0
.1459	90 02		bcc $145d			bcc 	_CSAENoCarry
.145b	e6 25		inc $25				inc 	zTemp0+1
.145d					_CSAENoCarry:
.145d	e0 00		cpx #$00			cpx 	#0
.145f	d0 01		bne $1462			bne 	_CSANoBorrow
.1461	88		dey				dey
.1462					_CSANoBorrow:
.1462	ca		dex				dex
.1463	d0 e5		bne $144a			bne 	_CSAEraseString
.1465	c0 00		cpy #$00			cpy 	#0
.1467	d0 e1		bne $144a			bne 	_CSAEraseString
.1469	68		pla				pla
.146a	fa		plx				plx
.146b					_CSANoInit:
.146b	7a		ply				ply
.146c	60		rts				rts
.146d					CSAAllocate:
.146d	08		php				php 								; save type flag.
.146e	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.146f	d0 01		bne $1472			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1471	e8		inx				inx
.1472					_CSAANoCarry:
.1472	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1474	b0 2e		bcs $14a4			bcs 	_CSARange
.1476	28		plp				plp 								; restore type flag
.1477	08		php				php 								; save it back again.
.1478	da		phx				phx 								; save size.
.1479	48		pha				pha
.147a	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.147c	90 03		bcc $1481			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.147e	0a		asl a				asl 	a
.147f	26 25		rol $25				rol 	zTemp0+1
.1481					_CSAATimes2:
.1481	0a		asl a				asl 	a
.1482	26 25		rol $25				rol 	zTemp0+1
.1484	18		clc				clc
.1485	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1487	90 02		bcc $148b			bcc 	_CSAANoCarry2
.1489	e6 25		inc $25				inc 	zTemp0+1
.148b					_CSAANoCarry2:
.148b	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.148d	20 55 13	jsr $1355			jsr 	AllocateMemory 				; allocate memory to XA
.1490	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.1492	85 24		sta $24				sta 	zTemp0
.1494	68		pla				pla  								; write element count to first 2 bytes
.1495	92 24		sta ($24)			sta 	(zTemp0)
.1497	68		pla				pla 								; msb of element count
.1498	28		plp				plp 								; CC if pointer array
.1499	b0 02		bcs $149d			bcs 	_CSAAIsData
.149b	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.149d					_CSAAIsData:
.149d	a0 01		ldy #$01			ldy 	#1
.149f	91 24		sta ($24),y			sta 	(zTemp0),y
.14a1	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.14a3	60		rts				rts
.14a4					_CSARange:
.14a4	4c 51 2a	jmp $2a51		jmp	ErrorV_range
.0507					CAType:
>0507							.fill 	1
.0508					CADim1:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.14a7					Command_Doke:
.14a7	38		sec				sec
.14a8	80 01		bra $14ab			bra 	DPCommon
.14aa					Command_Poke:
.14aa	18		clc				clc
.14ab					DPCommon:
.14ab	08		php				php 								; CS if DOKE
.14ac	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; address
.14af	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.14b1	48		pha				pha
.14b2	a5 09		lda $09				lda 	IFR0+IM1
.14b4	48		pha				pha
.14b5	20 33 2c	jsr $2c33			jsr 	ERRCheckComma 				; [dp]oke address,data
.14b8	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16
.14bb	68		pla				pla 								; get address back
.14bc	85 25		sta $25				sta 	zTemp0+1
.14be	68		pla				pla
.14bf	85 24		sta $24				sta 	zTemp0
.14c1	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.14c3	92 24		sta ($24)			sta 	(zTemp0)
.14c5	28		plp				plp 								; done if CC
.14c6	90 08		bcc $14d0			bcc 	_DPExit
.14c8	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.14c9	a5 09		lda $09				lda 	IFR0+IM1
.14cb	a0 01		ldy #$01			ldy 	#1
.14cd	91 24		sta ($24),y			sta 	(zTemp0),y
.14cf	7a		ply				ply
.14d0					_DPExit:
.14d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.14d1					Command_GOTO:
.14d1	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; get line number
.14d4					GotoR0:
.14d4	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.14d7	85 19		sta $19				sta 	codePtr+1
.14d9	64 18		stz $18				stz 	codePtr
.14db					_GOSearch:
.14db	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.14dd	f0 1f		beq $14fe			beq 	_GOError
.14df	a0 01		ldy #$01			ldy 	#1 							; found line #
.14e1	b1 18		lda ($18),y			lda 	(codePtr),y
.14e3	c5 08		cmp $08				cmp 	IFR0+IM0
.14e5	d0 0a		bne $14f1			bne 	_GONext
.14e7	c8		iny				iny
.14e8	b1 18		lda ($18),y			lda 	(codePtr),y
.14ea	c5 09		cmp $09				cmp 	IFR0+IM1
.14ec	d0 03		bne $14f1			bne 	_GONext
.14ee	4c 17 18	jmp $1817			jmp 	RUNNewLine
.14f1					_GONext:
.14f1	18		clc				clc 								; advance to next line.
.14f2	b2 18		lda ($18)			lda 	(codePtr)
.14f4	65 18		adc $18				adc 	codePtr
.14f6	85 18		sta $18				sta 	codePtr
.14f8	90 e1		bcc $14db			bcc 	_GOSearch
.14fa	e6 19		inc $19				inc 	codePtr+1
.14fc	80 dd		bra $14db			bra 	_GOSearch
.14fe					_GOError:
.14fe	4c d5 2b	jmp $2bd5		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1501					Command_Input:
.1501	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.1503	8d 0a 05	sta $050a			sta 	InputFlag
.1506	80 03		bra $150b			bra 	Command_IP_Main
.1508					Command_Print:
.1508	9c 0a 05	stz $050a			stz 	InputFlag
.150b					Command_IP_Main:
.150b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.150c					_CPLoop:
.150c	08		php				php 								; save "last action" flag
.150d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.150f	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1511	f0 48		beq $155b			beq 	_CPExit 					; without consuming
.1513	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1515	f0 44		beq $155b			beq 	_CPExit
.1517	68		pla				pla 								; throw last action flag
.1518	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.151a	c8		iny				iny
.151b	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.151d	f0 39		beq $1558			beq 	_CPContinueWithSameLine
.151f	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.1521	f0 30		beq $1553			beq 	_CPTab
.1523	88		dey				dey 								; undo the get.
.1524	2c 0a 05	bit $050a			bit 	InputFlag 					; check for Input
.1527	10 0b		bpl $1534			bpl	 	_CPNotInput
.1529	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.152b	c9 40		cmp #$40			cmp 	#$40
.152d	d0 05		bne $1534			bne 	_CPNotInput
.152f	20 64 15	jsr $1564			jsr 	_CPInputCode 				; input code
.1532	80 d7		bra $150b			bra 	Command_IP_Main 			; and go round again.
.1534					_CPNotInput:
.1534	20 0b 1a	jsr $1a0b			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1537	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1539	10 0e		bpl $1549			bpl 	_CPNumber
.153b	5a		phy				phy
.153c	18		clc				clc 								; string address to YX
.153d	a5 08		lda $08				lda 	IFR0+IM0
.153f	aa		tax				tax
.1540	a5 09		lda $09				lda 	IFR0+IM1
.1542	a8		tay				tay
.1543	20 98 15	jsr $1598			jsr 	CPPrintYX 					; print YX
.1546	7a		ply				ply
.1547	80 c2		bra $150b			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1549					_CPNumber:
.1549	5a		phy				phy
.154a	20 c5 34	jsr $34c5			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.154d	20 98 15	jsr $1598			jsr 	CPPrintYX 					; print string at YX
.1550	7a		ply				ply
.1551	80 b8		bra $150b			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1553					_CPTab:
.1553	a9 09		lda #$09			lda 	#9 							; print TAB
.1555	20 b0 15	jsr $15b0			jsr 	CPPrintA
.1558					_CPContinueWithSameLine:
.1558	38		sec				sec 								; loop round with carry set, which
.1559	80 b1		bra $150c			bra 	_CPLoop 					; will inhibit final CR
.155b					_CPExit:
.155b	28		plp				plp 								; get last action flag
.155c	b0 05		bcs $1563			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.155e	a9 0d		lda #$0d			lda 	#13 						; print new line
.1560	20 b0 15	jsr $15b0			jsr 	CPPrintA
.1563					_CPExit2:
.1563	60		rts				rts
.1564					_CPInputCode:
.1564	20 d3 1a	jsr $1ad3			jsr 	EXPTermR0 					; get the term, the thing being input to
.1567	5a		phy				phy 								; save position
.1568	20 ad 15	jsr $15ad			jsr 	CPInputA					; input a line to YX
.156b	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.156d	30 18		bmi $1587			bmi 	_CPInputString
.156f	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1571	48		pha				pha
.1572	a5 09		lda $09				lda 	IFR0+IM1
.1574	48		pha				pha
.1575	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.1577	84 25		sty $25				sty 	zTemp0+1
.1579	20 bd 1d	jsr $1dbd			jsr 	VALConversionZTemp0
.157c	68		pla				pla 								; do the assign.
.157d	85 25		sta $25				sta 	zTemp0+1
.157f	68		pla				pla
.1580	85 24		sta $24				sta 	zTemp0
.1582	20 d8 15	jsr $15d8			jsr 	AssignNumber
.1585	7a		ply				ply
.1586	60		rts				rts
.1587					_CPInputString:
.1587	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1589	85 24		sta $24				sta 	zTemp0
.158b	a5 09		lda $09				lda 	IFR0+IM1
.158d	85 25		sta $25				sta 	zTemp0+1
.158f	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1591	84 09		sty $09				sty 	IFR0+IM1
.1593	20 ef 15	jsr $15ef			jsr 	AssignString 				; assign the string
.1596	7a		ply				ply 								; exit
.1597	60		rts				rts
.1598					CPPrintYX:
.1598	86 24		stx $24				stx 	zTemp0
.159a	84 25		sty $25				sty 	zTemp0+1
.159c	b2 24		lda ($24)			lda 	(zTemp0)
.159e	aa		tax				tax
.159f	f0 0b		beq $15ac			beq 	_CPPrintExit
.15a1	a0 01		ldy #$01			ldy 	#1
.15a3					_CPPrintAYXLoop:
.15a3	b1 24		lda ($24),y			lda 	(zTemp0),y
.15a5	20 b0 15	jsr $15b0			jsr 	CPPrintA
.15a8	c8		iny				iny
.15a9	ca		dex				dex
.15aa	d0 f7		bne $15a3			bne 	_CPPrintAYXLoop
.15ac					_CPPrintExit:
.15ac	60		rts				rts
.15ad					CPInputA:
.15ad	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.15b0					CPPrintA:
.15b0	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.050a					InputFlag:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.15b3					CommandLET:
.15b3	20 d3 1a	jsr $1ad3			jsr 	EXPTermR0 					; get term
.15b6	90 6f		bcc $1627			bcc 	CLError 					; must be a reference term.
.15b8	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.15ba	48		pha				pha
.15bb	a5 09		lda $09				lda 	IFR0+IM1
.15bd	48		pha				pha
.15be	a5 0b		lda $0b				lda 	IFR0+IExp
.15c0	48		pha				pha
.15c1	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.15c3	20 3b 2c	jsr $2c3b			jsr 	ERRCheckA
.15c6	20 0b 1a	jsr $1a0b			jsr 	EXPEvaluateExpression 		; right hand side.
.15c9	68		pla				pla 								; restore type of l-expr
.15ca	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.15cc	30 5c		bmi $162a			bmi 	CLType
.15ce	fa		plx				plx 	 							; pop target address to zTemp0
.15cf	86 25		stx $25				stx 	zTemp0+1
.15d1	fa		plx				plx
.15d2	86 24		stx $24				stx 	zTemp0
.15d4					AssignData:
.15d4	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.15d6	30 17		bmi $15ef			bmi 	AssignString
.15d8					AssignNumber:
.15d8	5a		phy				phy
.15d9	a0 03		ldy #$03			ldy 	#3
.15db	a5 0b		lda $0b				lda 	IFR0+IExp
.15dd	91 24		sta ($24),y			sta 	(zTemp0),y
.15df	88		dey				dey
.15e0	a5 0a		lda $0a				lda 	IFR0+IM2
.15e2	91 24		sta ($24),y			sta 	(zTemp0),y
.15e4	88		dey				dey
.15e5	a5 09		lda $09				lda 	IFR0+IM1
.15e7	91 24		sta ($24),y			sta 	(zTemp0),y
.15e9	a5 08		lda $08				lda 	IFR0+IM0
.15eb	92 24		sta ($24)			sta 	(zTemp0)
.15ed	7a		ply				ply
.15ee	60		rts				rts
.15ef					AssignString:
.15ef	5a		phy				phy
.15f0	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.15f2	b1 24		lda ($24),y			lda 	(zTemp0),y
.15f4	12 24		ora ($24)			ora 	(zTemp0)
.15f6	f0 23		beq $161b			beq 	_CLConcreteString
.15f8	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.15fa	85 26		sta $26				sta 	zTemp1
.15fc	b1 24		lda ($24),y			lda 	(zTemp0),y
.15fe	85 27		sta $27				sta 	zTemp1+1
.1600	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.1602	38		sec				sec 								; we want 3 for slot size, status, string size.
.1603	e9 03		sbc #$03			sbc 	#3
.1605	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1607	90 12		bcc $161b			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.1609	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.160b	1a		inc a				inc 	a
.160c	aa		tax				tax
.160d	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.160f					_CLReplaceString:
.160f	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1611	c8		iny				iny
.1612	c8		iny				iny
.1613	91 26		sta ($26),y			sta 	(zTemp1),y
.1615	88		dey				dey
.1616	ca		dex				dex
.1617	d0 f6		bne $160f			bne 	_CLReplaceString
.1619	80 0a		bra $1625			bra 	_CLExit
.161b					_CLConcreteString:
.161b	20 ad 2c	jsr $2cad			jsr 	StringConcrete  			; concreted string in XA.
.161e	a0 01		ldy #$01			ldy 	#1 							; store the address
.1620	92 24		sta ($24)			sta 	(zTemp0)
.1622	8a		txa				txa
.1623	91 24		sta ($24),y			sta 	(zTemp0),y
.1625					_CLExit:
.1625	7a		ply				ply
.1626	60		rts				rts
.1627					CLError:
.1627	4c 73 2b	jmp $2b73		jmp	ErrorV_variable
.162a					CLType:
.162a	4c 70 2a	jmp $2a70		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.162d					Command_LIST:
.162d	9c 0b 05	stz $050b			stz 	CLFrom 						; default from
.1630	9c 0c 05	stz $050c			stz 	CLFrom+1
.1633	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1635	c9 99		cmp #$99			cmp 	#PR_COMMA
.1637	f0 1d		beq $1656			beq 	_CLToLine
.1639	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.163b	f0 37		beq $1674			beq 	_CLDefaultTo
.163d	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1640	a5 08		lda $08				lda 	IFR0+IM0
.1642	8d 0b 05	sta $050b			sta 	CLFrom
.1645	8d 0d 05	sta $050d			sta 	CLTo
.1648	a5 09		lda $09				lda 	IFR0+IM1
.164a	8d 0c 05	sta $050c			sta 	CLFrom+1
.164d	8d 0e 05	sta $050e			sta 	CLTo+1
.1650	b1 18		lda ($18),y			lda 	(codePtr),y
.1652	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1654	f0 26		beq $167c			beq 	_CLList
.1656					_CLToLine:
.1656	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1658	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.165a	f0 18		beq $1674			beq 	_CLDefaultTo
.165c	20 33 2c	jsr $2c33			jsr 	ERRCheckComma 				; sep comma
.165f	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1661	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1663	f0 0f		beq $1674			beq 	_CLDefaultTo
.1665	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; there's a To value.
.1668	a5 08		lda $08				lda 	IFR0+IM0
.166a	8d 0d 05	sta $050d			sta 	CLTo
.166d	a5 09		lda $09				lda 	IFR0+IM1
.166f	8d 0e 05	sta $050e			sta 	CLTo+1
.1672	80 08		bra $167c			bra 	_CLList
.1674					_CLDefaultTo:
.1674	a9 ff		lda #$ff			lda 	#$FF
.1676	8d 0d 05	sta $050d			sta 	CLTo
.1679	8d 0e 05	sta $050e			sta 	CLTo+1
.167c					_CLList:
.167c	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.167f	85 19		sta $19				sta 	codePtr+1
.1681	64 18		stz $18				stz 	codePtr
.1683	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1685	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1687	20 55 22	jsr $2255			jsr 	TOKSetDetokeniseOutput
.168a					_CLLoop:
.168a	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.168c	f0 51		beq $16df			beq 	_CLExit
.168e	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1691	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1694	d0 4c		bne $16e2			bne 	_CLBreak
.1696	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1698	20 e5 16	jsr $16e5			jsr 	_CLCompareLine
.169b	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.169d	f0 33		beq $16d2			beq 	_CLNext
.169f	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.16a1	20 e5 16	jsr $16e5			jsr 	_CLCompareLine
.16a4	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.16a6	f0 2a		beq $16d2			beq 	_CLNext
.16a8	a0 02		ldy #$02			ldy 	#2 							; print line #
.16aa	b1 18		lda ($18),y			lda 	(codePtr),y
.16ac	aa		tax				tax
.16ad	88		dey				dey
.16ae	b1 18		lda ($18),y			lda 	(codePtr),y
.16b0	20 82 2e	jsr $2e82			jsr 	WriteIntXA
.16b3					_CLSpacing:
.16b3	a9 20		lda #$20			lda 	#32
.16b5	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16b8	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.16bb	e0 06		cpx #$06			cpx 	#6
.16bd	d0 f4		bne $16b3			bne 	_CLSpacing
.16bf	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.16c1	a5 18		lda $18				lda 	codePtr
.16c3	18		clc				clc
.16c4	69 03		adc #$03			adc 	#3
.16c6	aa		tax				tax
.16c7	90 01		bcc $16ca			bcc 	_CLNoCarry2
.16c9	c8		iny				iny
.16ca					_CLNoCarry2:
.16ca	20 fa 21	jsr $21fa			jsr 	TOKDetokenise
.16cd	a9 0d		lda #$0d			lda 	#13	 						; next line
.16cf	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16d2					_CLNext:
.16d2	18		clc				clc 								; advance to next line.
.16d3	b2 18		lda ($18)			lda 	(codePtr)
.16d5	65 18		adc $18				adc 	codePtr
.16d7	85 18		sta $18				sta 	codePtr
.16d9	90 02		bcc $16dd			bcc 	_CLNoCarry
.16db	e6 19		inc $19				inc 	codePtr+1
.16dd					_CLNoCarry:
.16dd	80 ab		bra $168a			bra 	_CLLoop
.16df					_CLExit:
.16df	4c a1 2e	jmp $2ea1			jmp 	WarmStart
.16e2					_CLBreak:
.16e2	4c cb 2b	jmp $2bcb		jmp	ErrorV_break
.16e5					_CLCompareLine:
.16e5	a0 01		ldy #$01			ldy 	#1
.16e7	38		sec				sec
.16e8	b1 18		lda ($18),y			lda 	(codePtr),y
.16ea	fd 0b 05	sbc $050b,x			sbc 	CLFrom,x
.16ed	85 24		sta $24				sta 	zTemp0
.16ef	c8		iny				iny
.16f0	b1 18		lda ($18),y			lda 	(codePtr),y
.16f2	fd 0c 05	sbc $050c,x			sbc 	CLFrom+1,x
.16f5	90 0a		bcc $1701			bcc 	_CLIsNegative
.16f7	d0 05		bne $16fe			bne 	_CLIsPositive
.16f9	a5 24		lda $24				lda 	zTemp0
.16fb	d0 01		bne $16fe			bne 	_CLIsPositive
.16fd	60		rts				rts
.16fe					_CLIsPositive:
.16fe	a9 01		lda #$01			lda 	#1
.1700	60		rts				rts
.1701					_CLIsNegative:
.1701	a9 ff		lda #$ff			lda 	#255
.1703	60		rts				rts
.050b					CLFrom:
>050b							.fill 	2
.050d					CLTo:
>050d							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1704					Command_NEW:
.1704	20 03 24	jsr $2403			jsr 	PGMNewProgram 				; Reset current program
.1707	20 38 13	jsr $1338			jsr 	ClearCode 					; Run CLR
.170a	4c 70 18	jmp $1870			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.170d					Command_READ:
.170d	20 d3 1a	jsr $1ad3			jsr 	EXPTermR0 					; get term to R0
.1710	90 35		bcc $1747			bcc 	_CRSyntax 					; fail if not a reference.
.1712	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1714	48		pha				pha
.1715	a5 09		lda $09				lda 	IFR0+IM1
.1717	48		pha				pha
.1718	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.171a	48		pha				pha
.171b	20 e4 17	jsr $17e4			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.171e	ad 13 05	lda $0513			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1721	d0 27		bne $174a			bne 	_CRHaveData  				; forward for the next one.
.1723					_CRNextLine:
.1723	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1725	f0 1a		beq $1741			beq 	_CRNoData
.1727					_CRKeepSearching:
.1727	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1729	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.172b	20 50 29	jsr $2950			jsr 	ScanForward
.172e	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1730	f0 18		beq $174a			beq 	_CRHaveData 				; found it
.1732	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1734	18		clc				clc 								; try the next line, keep going.
.1735	b2 18		lda ($18)			lda 	(codePtr)
.1737	65 18		adc $18				adc 	codePtr
.1739	85 18		sta $18				sta 	codePtr
.173b	90 e6		bcc $1723			bcc 	_CRNextLine
.173d	e6 19		inc $19				inc 	codePtr+1
.173f	80 e2		bra $1723			bra 	_CRNextLine
.1741					_CRNoData:
.1741	4c f8 2a	jmp $2af8		jmp	ErrorV_data
.1744					_CLType:
.1744	4c 70 2a	jmp $2a70		jmp	ErrorV_type
.1747					_CRSyntax:
.1747	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.174a					_CRHaveData:
.174a	20 0b 1a	jsr $1a0b			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.174d	68		pla				pla 								; type of l-expr
.174e	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1750	30 f2		bmi $1744			bmi 	_CLType
.1752	68		pla				pla 								; restore address
.1753	85 25		sta $25				sta 	zTemp0+1
.1755	68		pla				pla
.1756	85 24		sta $24				sta 	zTemp0
.1758	20 d4 15	jsr $15d4			jsr 	AssignData 					; write R0 there.
.175b	9c 13 05	stz $0513			stz 	dataInStatement 			; clear in data flag
.175e	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1760	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1762	d0 04		bne $1768			bne 	_CRSwapBack
.1764	c8		iny				iny 								; consume comma
.1765	ee 13 05	inc $0513			inc 	dataInStatement 			; set in data statement flag.
.1768					_CRSwapBack:
.1768	20 e4 17	jsr $17e4			jsr 	SwapCodeDataPointers		; swap them back.
.176b	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.176d	c8		iny				iny
.176e	c9 99		cmp #$99			cmp 	#PR_COMMA
.1770	f0 9b		beq $170d			beq 	Command_READ 				; if so go round again.
.1772	88		dey				dey 								; unpick get.
.1773	60		rts				rts
.1774					Command_DATA:
.1774	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1776	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1778	20 50 29	jsr $2950			jsr 	ScanForward
.177b	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.177d	d0 01		bne $1780			bne 	_CDNotEOL
.177f	88		dey				dey
.1780					_CDNotEOL:
.1780	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1781					Command_REM:
.1781					Command_REM2:
.1781	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1783	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1785	d0 06		bne $178d			bne 	_CRExit
.1787	c8		iny				iny 								; skip over it, it's a comment.
.1788	98		tya				tya
.1789	38		sec				sec
.178a	71 18		adc ($18),y			adc 	(codePtr),y
.178c	a8		tay				tay
.178d					_CRExit:
.178d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.178e					Command_RENUMBER:
.178e	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.1790	85 08		sta $08				sta 	IM0+IFR0
.1792	a9 03		lda #$03			lda 	#1000 >> 8
.1794	85 09		sta $09				sta 	IM1+IFR0
.1796	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1798	c9 9b		cmp #$9b			cmp 	#PR_COLON
.179a	f0 07		beq $17a3			beq 	_CRIsDefault
.179c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.179e	f0 03		beq $17a3			beq 	_CRIsDefault
.17a0	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; get other start
.17a3					_CRIsDefault:
.17a3	5a		phy				phy
.17a4	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.17a6	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.17a9	85 25		sta $25				sta 	zTemp0+1
.17ab					_CRRenumberLoop:
.17ab	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.17ad	f0 21		beq $17d0			beq 	_CRExit
.17af	18		clc				clc
.17b0	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.17b2	a5 08		lda $08				lda 	IFR0+IM0
.17b4	91 24		sta ($24),y			sta 	(zTemp0),y
.17b6	69 0a		adc #$0a			adc 	#10
.17b8	85 08		sta $08				sta 	IFR0+IM0
.17ba	c8		iny				iny
.17bb	a5 09		lda $09				lda 	IFR0+IM1
.17bd	91 24		sta ($24),y			sta 	(zTemp0),y
.17bf	69 00		adc #$00			adc 	#0
.17c1	85 09		sta $09				sta 	IFR0+IM1
.17c3	18		clc				clc 								; next line.
.17c4	b2 24		lda ($24)			lda 	(zTemp0)
.17c6	65 24		adc $24				adc 	zTemp0
.17c8	85 24		sta $24				sta 	zTemp0
.17ca	90 df		bcc $17ab			bcc 	_CRRenumberLoop
.17cc	e6 25		inc $25				inc 	zTemp0+1
.17ce	80 db		bra $17ab			bra 	_CRRenumberLoop
.17d0					_CRExit:
.17d0	7a		ply				ply
.17d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.17d2					S
.17d2					Command_RESTORE:
.17d2	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.17d5	8d 10 05	sta $0510			sta 	dataPtr+1
.17d8	9c 0f 05	stz $050f			stz 	dataPtr
.17db	a9 03		lda #$03			lda 	#3 							; position start of line
.17dd	8d 11 05	sta $0511			sta 	dataPos
.17e0	9c 13 05	stz $0513			stz 	dataInStatement 			; not in statement
.17e3	60		rts				rts
.17e4					SwapCodeDataPointers:
.17e4	ad 0f 05	lda $050f			lda 	dataPtr 					; swap LSB of code/data
.17e7	a6 18		ldx $18				ldx 	codePtr
.17e9	85 18		sta $18				sta 	codePtr
.17eb	8e 0f 05	stx $050f			stx 	dataPtr
.17ee	ad 10 05	lda $0510			lda 	dataPtr+1 					; swap MSB of code/data
.17f1	a6 19		ldx $19				ldx 	codePtr+1
.17f3	85 19		sta $19				sta 	codePtr+1
.17f5	8e 10 05	stx $0510			stx 	dataPtr+1
.17f8	ad 11 05	lda $0511			lda 	dataPos 					; swap dataPos and Y
.17fb	8c 11 05	sty $0511			sty 	dataPos
.17fe	a8		tay				tay
.17ff	60		rts				rts
.050f					dataPtr:
>050f							.fill 	2
.0511					dataPos:
>0511							.fill 	2
.0513					dataInStatement:
>0513							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1800					Command_RUN:
.1800	20 38 13	jsr $1338			jsr 	ClearCode					; clear everything out.
.1803	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.1806	85 19		sta $19				sta 	codePtr+1
.1808	64 18		stz $18				stz 	codePtr
.180a	80 0b		bra $1817			bra 	RUNNewLine
.180c					RUNEndOfLine:
.180c	18		clc				clc 								; advance to next line.
.180d	b2 18		lda ($18)			lda 	(codePtr)
.180f	65 18		adc $18				adc 	codePtr
.1811	85 18		sta $18				sta 	codePtr
.1813	90 02		bcc $1817			bcc 	_RELNoCarry
.1815	e6 19		inc $19				inc 	codePtr+1
.1817					_RELNoCarry:
.1817					RUNNewLine:
.1817	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1819	9a		txs				txs
.181a	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.181c	f0 52		beq $1870			beq 	Command_END
.181e	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1820	b1 18		lda ($18),y			lda 	(codePtr),y
.1822	8d 30 06	sta $0630			sta 	ERRLine
.1825	c8		iny				iny
.1826	b1 18		lda ($18),y			lda 	(codePtr),y
.1828	8d 31 06	sta $0631			sta 	ERRLine+1
.182b	c8		iny				iny 								; offset into codePtr for start of line.
.182c					RUNNewCommand:
.182c	9c 25 06	stz $0625			stz 	stringInitialised 			; reset string system flag.
.182f	ce 14 05	dec $0514			dec 	checkCounter				; don't do these checks ever command
.1832	d0 0a		bne $183e			bne 	_RNCNoCheck
.1834	5a		phy				phy 								; keyboard check.
.1835	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1838	7a		ply				ply
.1839	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.183c	d0 1e		bne $185c			bne 	_RUNBreak
.183e					_RNCNoCheck:
.183e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1840	10 1d		bpl $185f			bpl		_RUNNotToken 				; probably an identifier
.1842	c8		iny				iny 								; consume token
.1843	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1845	f0 e5		beq $182c			beq 	RUNNewCommand
.1847	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1849	b0 0e		bcs $1859			bcs 	_RUNSyntax
.184b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.184d	90 0a		bcc $1859			bcc 	_RUNSyntax
.184f	0a		asl a				asl 	a 							; double into X.
.1850	aa		tax				tax
.1851	20 56 18	jsr $1856			jsr 	_RUNDispatchMain			; call the main dispatcher
.1854	80 d6		bra $182c			bra 	RUNNewCommand
.1856					_RUNDispatchMain:
.1856	7c d6 20	jmp ($20d6,x)			jmp 	(VectorTable,x)
.1859					_RUNSyntax:
.1859	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.185c					_RUNBreak:
.185c	4c cb 2b	jmp $2bcb		jmp	ErrorV_break
.185f					_RUNNotToken:
.185f	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.1861	90 f6		bcc $1859			bcc 	_RUNSyntax
.1863	20 b3 15	jsr $15b3			jsr 	CommandLET 					; assignment
.1866	80 c4		bra $182c			bra 	RUNNewCommand 				; loop round.
.1868					Command_Shift_Handler:
.1868	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a 							; double into X
.186c	aa		tax				tax
.186d	7c d6 21	jmp ($21d6,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1870					Command_END:
.1870	4c a1 2e	jmp $2ea1			jmp 	WarmStart
.0514					checkCounter:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1873					Command_STOP:
.1873	4c e4 2a	jmp $2ae4		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1876					Command_Sys:
.1876	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; execution address
.1879	5a		phy				phy
.187a	ad 78 06	lda $0678			lda 	('A'-'A')*4 + FastVariables ; load AXY
.187d	ae d4 06	ldx $06d4			ldx 	('X'-'A')*4 + FastVariables
.1880	ac d8 06	ldy $06d8			ldy 	('Y'-'A')*4 + FastVariables
.1883	20 88 18	jsr $1888			jsr 	_CSCallIFR0 				; call the code
.1886	7a		ply				ply
.1887	60		rts				rts
.1888					_CSCallIFR0:
.1888	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.188b					NoExec01:
.188b					NoExec02:
.188b					NoExec03:
.188b					NoExec04:
.188b					NoExec05:
.188b					NoExec06:
.188b					NoExec07:
.188b					NoExec08:
.188b	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.188e					EXPBinAdd:
.188e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1890	30 6f		bmi $1901			bmi 	EXPConcatenate
.1892	a2 0c		ldx #$0c			ldx 	#IFR1
.1894	4c c0 30	jmp $30c0			jmp 	IFloatAdd
.1897					EXPBinSub:
.1897	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1899	30 3f		bmi $18da			bmi 	EXPTypeError
.189b	a2 0c		ldx #$0c			ldx 	#IFR1
.189d	4c b9 30	jmp $30b9			jmp 	IFloatSubtract
.18a0					EXPBinMul:
.18a0	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.18a2	30 36		bmi $18da			bmi 	EXPTypeError
.18a4	a2 0c		ldx #$0c			ldx 	#IFR1
.18a6	4c 6a 31	jmp $316a			jmp 	IFloatMultiply
.18a9					EXPBinFDiv:
.18a9	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18ab	30 2d		bmi $18da			bmi 	EXPTypeError
.18ad	a2 0c		ldx #$0c			ldx 	#IFR1
.18af	20 ec 33	jsr $33ec			jsr 	IFloatDivideFloat
.18b2	b0 0f		bcs $18c3			bcs 	EXPDZero
.18b4	60		rts				rts
.18b5					EXPBinIDiv:
.18b5	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18b7	30 21		bmi $18da			bmi 	EXPTypeError
.18b9	a2 0c		ldx #$0c			ldx 	#IFR1
.18bb	20 ec 33	jsr $33ec			jsr 	IFloatDivideFloat
.18be	b0 03		bcs $18c3			bcs 	EXPDZero
.18c0	4c c9 33	jmp $33c9			jmp 	IFloatIntegerR0
.18c3					EXPDZero:
.18c3	4c b9 2a	jmp $2ab9		jmp	ErrorV_divzero
.18c6					EXPBinIMod:
.18c6	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18c8	30 10		bmi $18da			bmi 	EXPTypeError
.18ca	a2 0c		ldx #$0c			ldx 	#IFR1
.18cc	5a		phy				phy
.18cd	20 ff 32	jsr $32ff			jsr 	IFPreProcessBitwise 		; set up everything.
.18d0	d0 05		bne $18d7			bne 	EXPDRange
.18d2	20 38 32	jsr $3238			jsr 	IFloatModulusInteger
.18d5	7a		ply				ply
.18d6	60		rts				rts
.18d7					EXPDRange:
.18d7	4c 51 2a	jmp $2a51		jmp	ErrorV_range
.18da					EXPTypeError:
.18da	4c 70 2a	jmp $2a70		jmp	ErrorV_type
.18dd					EXPBinAnd:
.18dd	24 0b		bit $0b				bit 	IFR0+IExp
.18df	30 f9		bmi $18da			bmi 	EXPTypeError
.18e1	a2 0c		ldx #$0c			ldx 	#IFR1
.18e3	20 ba 32	jsr $32ba			jsr 	IFloatBitwiseAnd
.18e6	b0 ef		bcs $18d7			bcs 	EXPDRange
.18e8	60		rts				rts
.18e9					EXPBinOr:
.18e9	24 0b		bit $0b				bit 	IFR0+IExp
.18eb	30 ed		bmi $18da			bmi 	EXPTypeError
.18ed	a2 0c		ldx #$0c			ldx 	#IFR1
.18ef	20 d1 32	jsr $32d1			jsr 	IFloatBitwiseOr
.18f2	b0 e3		bcs $18d7			bcs 	EXPDRange
.18f4	60		rts				rts
.18f5					EXPBinXor:
.18f5	24 0b		bit $0b				bit 	IFR0+IExp
.18f7	30 e1		bmi $18da			bmi 	EXPTypeError
.18f9	a2 0c		ldx #$0c			ldx 	#IFR1
.18fb	20 e8 32	jsr $32e8			jsr 	IFloatBitwiseXor
.18fe	b0 d7		bcs $18d7			bcs 	EXPDRange
.1900	60		rts				rts
.1901					EXPConcatenate:
.1901	18		clc				clc
.1902	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.1904	72 0c		adc ($0c)			adc 	(IFR1)
.1906	b0 2d		bcs $1935			bcs 	_EXPCError 					; far too long.
.1908	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.190a	da		phx				phx
.190b	a6 09		ldx $09				ldx 	IFR0+1
.190d	da		phx				phx
.190e	20 20 2d	jsr $2d20			jsr 	StringTempAllocate 			; allocate string, set up return
.1911	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.1913	a5 0c		lda $0c				lda 	IFR1
.1915	20 1e 19	jsr $191e			jsr 	_EXPCCopyXA
.1918	fa		plx				plx 								; copy second string
.1919	68		pla				pla
.191a	20 1e 19	jsr $191e			jsr 	_EXPCCopyXA
.191d	60		rts				rts
.191e					_EXPCCopyXA:
.191e	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.1920	85 24		sta $24				sta 	zTemp0
.1922	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.1924	f0 0e		beq $1934			beq 	_EXPCCExit 					; nothing in string
.1926	aa		tax				tax 								; count
.1927	5a		phy				phy 								; start position
.1928	a0 01		ldy #$01			ldy 	#1
.192a					_EXPCCLoop:
.192a	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.192c	20 55 2d	jsr $2d55			jsr 	StringTempWrite
.192f	c8		iny				iny
.1930	ca		dex				dex
.1931	d0 f7		bne $192a			bne 	_EXPCCLoop
.1933	7a		ply				ply
.1934					_EXPCCExit:
.1934	60		rts				rts
.1935					_EXPCError:
.1935	4c 5d 2b	jmp $2b5d		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1938					EXPReturnTrue:
.1938	a2 08		ldx #$08			ldx 	#IFR0
.193a	a9 01		lda #$01			lda 	#1
.193c	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.193f	20 d3 36	jsr $36d3			jsr 	IFloatNegate
.1942	60		rts				rts
.1943					EXPReturnFalse:
.1943	a2 08		ldx #$08			ldx 	#IFR0
.1945	4c c8 36	jmp $36c8			jmp 	IFloatSetZero
.1948					EXPCompareEqual:
.1948	20 7e 19	jsr $197e			jsr 	EXPCompareBaseCode
.194b	c9 00		cmp #$00			cmp 	#0
.194d	f0 e9		beq $1938			beq 	EXPReturnTrue
.194f	80 f2		bra $1943			bra 	EXPReturnFalse
.1951					EXPCompareLess:
.1951	20 7e 19	jsr $197e			jsr 	EXPCompareBaseCode
.1954	c9 ff		cmp #$ff			cmp 	#$FF
.1956	f0 e0		beq $1938			beq 	EXPReturnTrue
.1958	80 e9		bra $1943			bra 	EXPReturnFalse
.195a					EXPCompareGreater:
.195a	20 7e 19	jsr $197e			jsr 	EXPCompareBaseCode
.195d	c9 01		cmp #$01			cmp 	#1
.195f	f0 d7		beq $1938			beq 	EXPReturnTrue
.1961	80 e0		bra $1943			bra 	EXPReturnFalse
.1963					EXPCompareNotEqual:
.1963	20 7e 19	jsr $197e			jsr 	EXPCompareBaseCode
.1966	c9 00		cmp #$00			cmp 	#0
.1968	d0 ce		bne $1938			bne 	EXPReturnTrue
.196a	80 d7		bra $1943			bra 	EXPReturnFalse
.196c					EXPCompareLessEqual:
.196c	20 7e 19	jsr $197e			jsr 	EXPCompareBaseCode
.196f	c9 01		cmp #$01			cmp 	#1
.1971	d0 c5		bne $1938			bne 	EXPReturnTrue
.1973	80 ce		bra $1943			bra 	EXPReturnFalse
.1975					EXPCompareGreaterEqual:
.1975	20 7e 19	jsr $197e			jsr 	EXPCompareBaseCode
.1978	c9 ff		cmp #$ff			cmp 	#$FF
.197a	d0 bc		bne $1938			bne 	EXPReturnTrue
.197c	80 c5		bra $1943			bra 	EXPReturnFalse
.197e					EXPCompareBaseCode:
.197e	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1980	30 10		bmi $1992			bmi 	_EXCBCString
.1982	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1984	20 97 33	jsr $3397			jsr 	IFloatCompare
.1987	a5 08		lda $08				lda 	IFR0+IM0
.1989	f0 06		beq $1991			beq 	_EXCBCExit 					; return 0 if zero
.198b	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.198d	50 02		bvc $1991			bvc 	_EXCBCExit
.198f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1991					_EXCBCExit:
.1991	60		rts				rts
.1992					_EXCBCString:
.1992	5a		phy				phy
.1993	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1995	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1997	90 02		bcc $199b			bcc 	_EXCBCSmaller
.1999	b2 0c		lda ($0c)			lda 	(IFR1)
.199b					_EXCBCSmaller:
.199b	aa		tax				tax
.199c	f0 0d		beq $19ab			beq 	_EXCBCMatches 				; if zero common length matches
.199e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.19a0					_EXCBCCheckSmallerMatches:
.19a0	c8		iny				iny 								; compare directly as far as common length
.19a1	38		sec				sec
.19a2	b1 0c		lda ($0c),y			lda 	(IFR1),y
.19a4	f1 08		sbc ($08),y			sbc 	(IFR0),y
.19a6	d0 08		bne $19b0			bne 	_EXCBCExit2
.19a8	ca		dex				dex
.19a9	d0 f5		bne $19a0			bne 	_EXCBCCheckSmallerMatches
.19ab					_EXCBCMatches:
.19ab	38		sec				sec
.19ac	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.19ae	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.19b0					_EXCBCExit2:
.19b0	7a		ply				ply
.19b1	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.19b3	f0 04		beq $19b9			beq 	_EXCBCReturn
.19b5	30 03		bmi $19ba			bmi 	_EXCBCFF 					; return $FF if <
.19b7	a9 01		lda #$01			lda 	#1 							; return 1 if >
.19b9					_EXCBCReturn:
.19b9	60		rts				rts
.19ba					_EXCBCFF:
.19ba	a9 ff		lda #$ff			lda 	#$FF
.19bc	60		rts				rts
.19bd					_EXCBCRange:
.19bd	4c 51 2a	jmp $2a51		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.19c0					EXPBinLeft:
.19c0	a9 ff		lda #$ff			lda 	#$FF
.19c2	8d 15 05	sta $0515			sta 	EXPShiftLeftFlag
.19c5	4c cb 19	jmp $19cb			jmp 	EXPShiftCommon
.19c8					EXPBinRight:
.19c8	9c 15 05	stz $0515			stz 	EXPShiftLeftFlag
.19cb					EXPShiftCommon:
.19cb	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.19cd	05 0f		ora $0f				ora 	IFR1+IExp
.19cf	29 7f		and #$7f			and 	#$7F
.19d1	d0 35		bne $1a08			bne 	_EXPSRange
.19d3	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.19d5	29 e0		and #$e0			and 	#$E0
.19d7	05 09		ora $09				ora 	IFR0+IM1
.19d9	05 0a		ora $0a				ora 	IFR0+IM2
.19db	d0 25		bne $1a02			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.19dd	5a		phy				phy
.19de	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.19e0	29 1f		and #$1f			and 	#$1F
.19e2	f0 17		beq $19fb			beq 	_EXPSExit 					; exit if zero
.19e4	a8		tay				tay
.19e5					_EXPSLoop:
.19e5	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.19e7	2c 15 05	bit $0515			bit 	EXPShiftLeftFlag
.19ea	30 05		bmi $19f1			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.19ec	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.19ef	80 07		bra $19f8			bra 	_EXPSContinue
.19f1					_EXPSShiftLeft:
.19f1	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.19f4	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.19f6	30 10		bmi $1a08			bmi 	_EXPSRange
.19f8					_EXPSContinue:
.19f8	88		dey				dey 								; do it Y times
.19f9	d0 ea		bne $19e5			bne 	_EXPSLoop
.19fb					_EXPSExit:
.19fb	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.19fd	20 59 36	jsr $3659			jsr 	IFloatCopyFromRegister
.1a00	7a		ply				ply
.1a01	60		rts				rts
.1a02					_EXPSShiftZero:
.1a02	a2 08		ldx #$08			ldx 	#IFR0
.1a04	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.1a07	60		rts				rts
.1a08					_EXPSRange:
.1a08	4c 51 2a	jmp $2a51		jmp	ErrorV_range
.0515					EXPShiftLeftFlag:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1a0b					EXPEvaluateExpression:
.1a0b	a9 00		lda #$00			lda 	#0 							; current precedence
.1a0d					EXPEvaluateExpressionPrecedenceA:
.1a0d	48		pha				pha
.1a0e	20 88 1a	jsr $1a88			jsr 	EXPTermValueR0				; do first term.
.1a11					_EELoop:
.1a11	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1a13	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1a15	90 31		bcc $1a48			bcc 	_EEExit
.1a17	aa		tax				tax 								; access the precedence of the operator.
.1a18	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1a19	dd e6 1d	cmp $1de6,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a1c	b0 2b		bcs $1a49			bcs 	_EEExit2
.1a1e	48		pha				pha 								; save current precedence.
.1a1f	da		phx				phx 								; save operator
.1a20	c8		iny				iny 								; consume operator
.1a21	da		phx				phx
.1a22	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1a24	20 17 36	jsr $3617			jsr 	IFloatPushRx
.1a27	fa		plx				plx
.1a28	bd e6 1d	lda $1de6,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a2b	20 0d 1a	jsr $1a0d			jsr 	EXPEvaluateExpressionPrecedenceA
.1a2e	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1a30	20 38 36	jsr $3638			jsr 	IFloatPullRx
.1a33	fa		plx				plx 								; operator
.1a34	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.1a36	45 0f		eor $0f				eor 	IFR1+IExp
.1a38	30 08		bmi $1a42			bmi 	_EEType		 				; MSBs differ, error.
.1a3a					_EETypeOkay:
.1a3a	8a		txa				txa
.1a3b	0a		asl a				asl 	a 							; double -> X
.1a3c	aa		tax				tax
.1a3d	20 45 1a	jsr $1a45			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1a40	80 cf		bra $1a11			bra 	_EELoop
.1a42					_EEType:
.1a42	4c 70 2a	jmp $2a70		jmp	ErrorV_type
.1a45					_EECallBinary:
.1a45	7c d6 20	jmp ($20d6,x)			jmp 	(VectorTable,x)
.1a48					_EEExit:
.1a48	68		pla				pla 								; throw precedence
.1a49					_EEExit2:
.1a49	18		clc				clc
.1a4a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1a4b					EXPEvalNumber:
.1a4b	20 0b 1a	jsr $1a0b			jsr 	EXPEvaluateExpression 		; get a value
.1a4e	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1a50	30 01		bmi $1a53			bmi 	EVUType
.1a52	60		rts				rts
.1a53					EVUType:
.1a53	4c 70 2a	jmp $2a70		jmp	ErrorV_type
.1a56					EXPEvalInteger:
.1a56	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1a59	20 c9 33	jsr $33c9			jsr 	IFloatIntegerR0
.1a5c	60		rts				rts
.1a5d					EXPEvalInteger16:
.1a5d	20 56 1a	jsr $1a56			jsr 	EXPEvalInteger 				; get integer
.1a60	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1a62	d0 21		bne $1a85			bne 	EVURange
.1a64	a6 09		ldx $09				ldx 	IFR0+IM1
.1a66	a5 08		lda $08				lda 	IFR0+IM0
.1a68	60		rts				rts
.1a69					EXPEvalInteger8:
.1a69	20 56 1a	jsr $1a56			jsr 	EXPEvalInteger 				; get integer
.1a6c	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1a6e	05 09		ora $09				ora 	IFR0+IM1
.1a70	d0 13		bne $1a85			bne 	EVURange
.1a72	a5 08		lda $08				lda 	IFR0+IM0
.1a74	60		rts				rts
.1a75					EXPEvalString:
.1a75	20 0b 1a	jsr $1a0b			jsr 	EXPEvaluateExpression 		; get value
.1a78	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1a7a	10 d7		bpl $1a53			bpl 	EVUType
.1a7c	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1a7e	86 25		stx $25				stx 	zTemp0+1
.1a80	a5 08		lda $08				lda 	IFR0+IM0
.1a82	85 24		sta $24				sta 	zTemp0
.1a84	60		rts				rts
.1a85					EVURange:
.1a85	4c 51 2a	jmp $2a51		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1a88					EXPTermValueR0:
.1a88	20 d3 1a	jsr $1ad3			jsr 	EXPTermR0 					; get term
.1a8b	90 45		bcc $1ad2			bcc 	_ETVNotReference 			; exit if value.
.1a8d	5a		phy				phy
.1a8e	a0 03		ldy #$03			ldy 	#3 							; get type
.1a90	b1 08		lda ($08),y			lda 	(IFR0),y
.1a92	30 14		bmi $1aa8			bmi 	_ETVDereferenceString
.1a94	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1a96	88		dey				dey 								; get byte 2
.1a97	b1 08		lda ($08),y			lda 	(IFR0),y
.1a99	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1a9b	88		dey				dey 								; get byte 1
.1a9c	b1 08		lda ($08),y			lda 	(IFR0),y
.1a9e	aa		tax				tax 								; save in X so we can overwrite it
.1a9f	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1aa1	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1aa3	85 08		sta $08				sta 	IFR0+IM0
.1aa5	7a		ply				ply
.1aa6	18		clc				clc
.1aa7	60		rts				rts
.1aa8					_ETVDereferenceString:
.1aa8	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1aaa	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1aac	12 08		ora ($08)			ora 	(IFR0)
.1aae	f0 11		beq $1ac1			beq 	_ETVNull 					; if so, return a fake NULL.
.1ab0	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1ab2	aa		tax				tax
.1ab3	b2 08		lda ($08)			lda 	(IFR0)
.1ab5	18		clc				clc 								; add two so points to actual string.
.1ab6	69 02		adc #$02			adc 	#2
.1ab8	90 01		bcc $1abb			bcc 	_EVDSNoCarry
.1aba	e8		inx				inx
.1abb					_EVDSNoCarry:
.1abb	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1abd	85 08		sta $08				sta 	IFR0
.1abf	80 08		bra $1ac9			bra 	_ETVFillExit 				; tidy up and exit.
.1ac1					_ETVNull:
.1ac1	a9 d1		lda #$d1			lda 	#_EVTNString & $FF
.1ac3	85 08		sta $08				sta 	IFR0+IM0
.1ac5	a9 1a		lda #$1a			lda 	#_EVTNString >> 8
.1ac7	85 09		sta $09				sta 	IFR0+IM1
.1ac9					_ETVFillExit:
.1ac9	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1acb	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1acd	85 0b		sta $0b				sta 	IFR0+IExp
.1acf	7a		ply				ply
.1ad0	60		rts				rts
.1ad1					_EVTNString:
>1ad1	00						.byte 	0
.1ad2					_ETVNotReference:
.1ad2	60		rts				rts
.1ad3					EXPTermR0:
.1ad3	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1ad5	30 10		bmi $1ae7			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1ad7	c8		iny				iny 								; consume element
.1ad8	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1ada	b0 08		bcs $1ae4			bcs 	_ETMIdentifier
.1adc	20 12 1b	jsr $1b12			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1adf	20 45 1b	jsr $1b45			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1ae2	18		clc				clc 								; return value ok
.1ae3	60		rts				rts
.1ae4					_ETMIdentifier:
.1ae4	4c 61 30	jmp $3061			jmp 	VARCheckSimple 				; check variables, seperate module.
.1ae7					_ETMIsUnaryOrMinus:
.1ae7	c8		iny				iny 								; consume element
.1ae8	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1aea	d0 0e		bne $1afa			bne 	_ETMCheckUnary
.1aec	20 88 1a	jsr $1a88			jsr 	EXPTermValueR0 				; get a term to negate
.1aef	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1af1	20 d3 36	jsr $36d3			jsr 	IFloatNegate
.1af4	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1af6	30 17		bmi $1b0f			bmi 	_ETMUnaryType				; if so error.
.1af8	18		clc				clc
.1af9	60		rts				rts
.1afa					_ETMCheckUnary:
.1afa	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1afc	90 0e		bcc $1b0c			bcc 	_ETMUnarySyntax
.1afe	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1b00	b0 0a		bcs $1b0c			bcs 	_ETMUnarySyntax
.1b02	0a		asl a				asl 	a 							; make it into an index => X
.1b03	aa		tax				tax
.1b04	20 09 1b	jsr $1b09			jsr 	_ETMCallUnaryFunction 		; call the function
.1b07	18		clc				clc 								; and return it.
.1b08	60		rts				rts
.1b09					_ETMCallUnaryFunction:
.1b09	7c d6 20	jmp ($20d6,x)			jmp 	(VectorTable,x)
.1b0c					_ETMUnarySyntax:
.1b0c	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.1b0f					_ETMUnaryType:
.1b0f	4c 70 2a	jmp $2a70		jmp	ErrorV_type
.1b12					EXPExtractTokenisedInteger:
.1b12	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1b14	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1b16	64 09		stz $09				stz 	IFR0+IM1
.1b18	64 0a		stz $0a				stz 	IFR0+IM2
.1b1a					_ETMConstant:
.1b1a	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1b1c	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1b1e	b0 24		bcs $1b44			bcs 	_ETMCExit 					; no, exit.
.1b20	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1b22	a5 09		lda $09				lda 	IFR0+IM1
.1b24	85 0a		sta $0a				sta 	IFR0+IM2
.1b26	a5 08		lda $08				lda 	IFR0+IM0
.1b28	85 09		sta $09				sta 	IFR0+IM1
.1b2a	64 08		stz $08				stz 	IFR0+IM0
.1b2c	8a		txa				txa
.1b2d	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1b2e	66 0a		ror $0a				ror 	IFR0+IM2
.1b30	66 09		ror $09				ror 	IFR0+IM1
.1b32	66 08		ror $08				ror 	IFR0+IM0
.1b34	4a		lsr a				lsr 	a
.1b35	66 0a		ror $0a				ror 	IFR0+IM2
.1b37	66 09		ror $09				ror 	IFR0+IM1
.1b39	66 08		ror $08				ror 	IFR0+IM0
.1b3b	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1b3d	11 18		ora ($18),y			ora 	(codePtr),y
.1b3f	85 08		sta $08				sta 	IFR0+IM0
.1b41	c8		iny				iny 								; consume, loop back
.1b42	80 d6		bra $1b1a			bra 	_ETMConstant
.1b44					_ETMCExit:
.1b44	60		rts				rts
.1b45					EXPCheckDecimalFollows:
.1b45	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1b47	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b49	d0 19		bne $1b64			bne 	_ETMCDExit
.1b4b	c8		iny				iny 								; consume token.
.1b4c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1b4e	5a		phy				phy									; save current position
.1b4f	48		pha				pha 								; save count of chars.
.1b50	38		sec				sec 								; address into YX : y + codePtr+1
.1b51	98		tya				tya
.1b52	65 18		adc $18				adc 	codePtr
.1b54	aa		tax				tax
.1b55	a5 19		lda $19				lda 	codePtr+1
.1b57	69 00		adc #$00			adc 	#0
.1b59	a8		tay				tay
.1b5a	68		pla				pla 								; get count.
.1b5b	20 6c 35	jsr $356c			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1b5e	7a		ply				ply 								; go to next token.
.1b5f	98		tya				tya
.1b60	38		sec				sec
.1b61	71 18		adc ($18),y			adc 	(codePtr),y
.1b63	a8		tay				tay
.1b64					_ETMCDExit:
.1b64	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1b65					EXPUnaryAbs:
.1b65	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 					; number to R0
.1b68	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1b6b	20 0b 33	jsr $330b			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1b6e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1b6f					EXPUnaryNull:
.1b6f	20 88 1a	jsr $1a88			jsr 	EXPTermValueR0
.1b72	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1b73					EXPUnaryAsc:
.1b73	20 75 1a	jsr $1a75			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b76	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1b79	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1b7b	f0 06		beq $1b83			beq 	_EXAZero 						; if so return 0
.1b7d	5a		phy				phy 									; otherwise get first character
.1b7e	a0 01		ldy #$01			ldy 	#1
.1b80	b1 24		lda ($24),y			lda 	(zTemp0),y
.1b82	7a		ply				ply
.1b83					_EXAZero:
.1b83	a2 08		ldx #$08			ldx 	#IFR0
.1b85	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.1b88	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1b89					EXPUnaryChr:
.1b89	20 69 1a	jsr $1a69			jsr 	EXPEvalInteger8 				; expr
.1b8c	48		pha				pha 									; push on stack
.1b8d	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1b90	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1b92	20 20 2d	jsr $2d20			jsr 	StringTempAllocate
.1b95	68		pla				pla 									; get value back
.1b96	20 55 2d	jsr $2d55			jsr 	StringTempWrite 				; write to string.
.1b99	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1b9a					EXPUnaryDec:
.1b9a	20 75 1a	jsr $1a75			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b9d	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1ba0	5a		phy				phy 									; save position.
.1ba1	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1ba3	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.1ba6	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1ba8	f0 3b		beq $1be5			beq 	_EUDError 						; empty string is not legit.
.1baa	aa		tax				tax 									; count in X.
.1bab	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1bad					_EUDLoop:
.1bad	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1baf	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1bb1	90 02		bcc $1bb5			bcc 	_EUDNoCase
.1bb3	e9 20		sbc #$20			sbc 	#$20
.1bb5					_EUDNoCase:
.1bb5	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1bb7	90 2c		bcc $1be5			bcc 	_EUDError
.1bb9	c9 3a		cmp #$3a			cmp 	#'9'+1
.1bbb	90 0a		bcc $1bc7			bcc 	_EUDOkay
.1bbd	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1bbf	90 24		bcc $1be5			bcc 	_EUDError
.1bc1	c9 47		cmp #$47			cmp 	#'F'+1
.1bc3	b0 20		bcs $1be5			bcs 	_EUDError
.1bc5	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1bc7					_EUDOkay:
.1bc7	29 0f		and #$0f			and 	#15 							; make constant
.1bc9	da		phx				phx
.1bca	48		pha				pha
.1bcb	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1bcd	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.1bd0	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.1bd3	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.1bd6	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.1bd9	68		pla				pla 									; pop constant and OR in
.1bda	fa		plx				plx
.1bdb	05 08		ora $08				ora 	IFR0+IM0
.1bdd	85 08		sta $08				sta 	IFR0+IM0
.1bdf	c8		iny				iny 									; next char
.1be0	ca		dex				dex 									; done all characters ?
.1be1	d0 ca		bne $1bad			bne 	_EUDLoop
.1be3	7a		ply				ply
.1be4	60		rts				rts
.1be5					_EUDError:
.1be5	4c 62 2a	jmp $2a62		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1be8					EXPUnaryInlineDec:
.1be8	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1beb					EXPUnaryPeek:
.1beb	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 				; number to R0
.1bee	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1bf1	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1bf3	a2 08		ldx #$08			ldx 	#IFR0
.1bf5	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.1bf8	60		rts				rts
.1bf9					EXPUnaryDeek:
.1bf9	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 				; number to R0
.1bfc	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1bff	5a		phy				phy 									; read MSB and push on stack
.1c00	a0 01		ldy #$01			ldy 	#1
.1c02	b1 08		lda ($08),y			lda 	(IFR0),y
.1c04	7a		ply				ply
.1c05	48		pha				pha
.1c06	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1c08	a2 08		ldx #$08			ldx 	#IFR0
.1c0a	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.1c0d	68		pla				pla 									; set MSB
.1c0e	85 09		sta $09				sta 	IFR0+IM1
.1c10	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1c11					EXPUnaryFrac:
.1c11	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 					; number to R0
.1c14	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1c17	20 73 33	jsr $3373			jsr 	IFloatFractionalR0 				; get fractional bit.
.1c1a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1c1b					EXPUnaryInkey:
.1c1b	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1c1e	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1c20	20 20 2d	jsr $2d20			jsr 	StringTempAllocate
.1c23	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1c26	b0 06		bcs $1c2e			bcs 	_EUIExit
.1c28	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1c2b	20 55 2d	jsr $2d55			jsr 	StringTempWrite
.1c2e					_EUIExit:
.1c2e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1c2f					EXPUnaryInt:
.1c2f	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 					; number to R0
.1c32	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; check for )
.1c35	20 c9 33	jsr $33c9			jsr 	IFloatIntegerR0 				; force to integer.
.1c38	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1c39					EXPUnaryLen:
.1c39	20 75 1a	jsr $1a75			jsr 	EXPEvalString 					; string to R0, zTemp0
.1c3c	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1c3f	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1c41	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1c43	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.1c46	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1c47					EXPUnaryParenthesis:
.1c47	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 					; number to R0
.1c4a	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1c4d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1c4e					EXPUnaryRnd:
.1c4e	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; number to R0
.1c51	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 				; )
.1c54	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1c56	20 6d 1c	jsr $1c6d			jsr 	EXPLoadInRandom
.1c59	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1c5b	85 0b		sta $0b				sta 	IFR0+IExp
.1c5d	60		rts				rts
.1c5e					ExpUnaryRand:
.1c5e	20 56 1a	jsr $1a56			jsr 	EXPEvalInteger 				; integer to R0
.1c61	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 				; )
.1c64	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1c66	20 6d 1c	jsr $1c6d			jsr 	EXPLoadInRandom
.1c69	20 38 32	jsr $3238			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1c6c	60		rts				rts
.1c6d					EXPLoadInRandom:
.1c6d	20 c8 36	jsr $36c8			jsr 	IFloatSetZero 				; zero it
.1c70	20 82 1c	jsr $1c82			jsr 	EXPRandom32 				; do a 23 bit number.
.1c73	95 00		sta $00,x			sta 	IM0,x
.1c75	20 82 1c	jsr $1c82			jsr 	EXPRandom32
.1c78	95 01		sta $01,x			sta 	IM1,x
.1c7a	20 82 1c	jsr $1c82			jsr 	EXPRandom32
.1c7d	29 7f		and #$7f			and 	#$7F
.1c7f	95 02		sta $02,x			sta 	IM2,x
.1c81	60		rts				rts
.1c82					EXPRandom32:
.1c82	5a		phy				phy
.1c83	a0 08		ldy #$08			ldy 	#8
.1c85	ad 16 05	lda $0516			lda 	EXPSeed+0
.1c88	0d 17 05	ora $0517			ora 	EXPSeed+1
.1c8b	0d 18 05	ora $0518			ora 	EXPSeed+2
.1c8e	0d 19 05	ora $0519			ora 	EXPSeed+3
.1c91	d0 08		bne $1c9b			bne 	_EXPRNoReset
.1c93	ee 16 05	inc $0516			inc 	EXPSeed+0
.1c96	a0 10		ldy #$10			ldy 	#16
.1c98	8c 19 05	sty $0519			sty 	EXPSeed+3
.1c9b					_EXPRNoReset:
.1c9b	ad 16 05	lda $0516			lda 	EXPSeed+0
.1c9e					_EXPRLoop:
.1c9e	0a		asl a				asl		a
.1c9f	2e 17 05	rol $0517			rol 	EXPSeed+1
.1ca2	2e 18 05	rol $0518			rol 	EXPSeed+2
.1ca5	2e 19 05	rol $0519			rol 	EXPSeed+3
.1ca8	90 02		bcc $1cac			bcc 	_EXPRNoEOR
.1caa	49 c5		eor #$c5			eor 	#$C5
.1cac					_EXPRNoEOR:
.1cac	88		dey				dey
.1cad	d0 ef		bne $1c9e			bne 	_EXPRLoop
.1caf	8d 16 05	sta $0516			sta 	EXPSeed+0
.1cb2	7a		ply				ply
.1cb3	60		rts				rts
.0516					EXPSeed:
>0516							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1cb4					EXPUnarySgn:
.1cb4	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 					; number to R0
.1cb7	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1cba	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1cbc	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister
.1cbf	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1cc1	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.1cc4	a2 0c		ldx #$0c			ldx 	#IFR1
.1cc6	20 97 33	jsr $3397			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1cc9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1cca					EXPUnarySqr:
.1cca	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 					; number to R0
.1ccd	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1cd0	20 13 33	jsr $3313			jsr 	IFloatSquareRootR0 				; square root.
.1cd3	b0 01		bcs $1cd6			bcs 	_EUSValue 						; error check.
.1cd5	60		rts				rts
.1cd6					_EUSValue:
.1cd6	4c 51 2a	jmp $2a51		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1cd9					EXPUnaryHex:
.1cd9	20 56 1a	jsr $1a56			jsr 	EXPEvalInteger 					; expr
.1cdc	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1cdf	5a		phy				phy
.1ce0	a9 10		lda #$10			lda 	#16
.1ce2	20 6a 34	jsr $346a			jsr 	IFloatIntegerToStringR0
.1ce5	80 0a		bra $1cf1			bra 	EUSMain
.1ce7					EXPUnaryStr:
.1ce7	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 					; expr
.1cea	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1ced	5a		phy				phy
.1cee	20 c5 34	jsr $34c5			jsr 	IFloatFloatToStringR0 			; convert to string
.1cf1					EUSMain:
.1cf1	b0 19		bcs $1d0c			bcs 	_EUSError
.1cf3	86 24		stx $24				stx 	zTemp0 							; save string address
.1cf5	84 25		sty $25				sty 	zTemp0+1
.1cf7	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1cf9	20 20 2d	jsr $2d20			jsr 	StringTempAllocate
.1cfc	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1cfe	aa		tax				tax 									; count in X
.1cff	a0 01		ldy #$01			ldy 	#1
.1d01					_EUSCopy:
.1d01	b1 24		lda ($24),y			lda 	(zTemp0),y
.1d03	c8		iny				iny
.1d04	20 55 2d	jsr $2d55			jsr 	StringTempWrite
.1d07	ca		dex				dex
.1d08	d0 f7		bne $1d01			bne	 	_EUSCopy
.1d0a	7a		ply				ply
.1d0b	60		rts				rts
.1d0c					_EUSError:
.1d0c	4c 51 2a	jmp $2a51		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1d0f					EXPUnaryInlineString:
.1d0f	18		clc				clc 								; physical address -> IM0,1
.1d10	98		tya				tya 								; put the actual address in IM0
.1d11	65 18		adc $18				adc 	codePtr
.1d13	85 08		sta $08				sta 	IFR0+IM0
.1d15	a5 19		lda $19				lda 	codePtr+1
.1d17	69 00		adc #$00			adc 	#0
.1d19	85 09		sta $09				sta 	IFR0+IM1
.1d1b	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1d1d	a9 80		lda #$80			lda 	#$80
.1d1f	85 0b		sta $0b				sta 	IFR0+IExp
.1d21	98		tya				tya	 								; skip over it.
.1d22	38		sec				sec
.1d23	71 18		adc ($18),y			adc 	(codePtr),y
.1d25	a8		tay				tay
.1d26	60		rts				rts
.1d27					_EXPUISRange:
.1d27	4c 51 2a	jmp $2a51		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1d2a					EXPUnaryLeft:
.1d2a	20 70 1d	jsr $1d70			jsr 	EXPCommonStart 					; <string>,
.1d2d	48		pha				pha 									; save string address on stack
.1d2e	da		phx				phx
.1d2f	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1d31	48		pha				pha
.1d32	20 69 1a	jsr $1a69			jsr 	EXPEvalInteger8 				; characters to do
.1d35	80 44		bra $1d7b			bra 	EXPSubstringCommon
.1d37					EXPUnaryRight:
.1d37	20 70 1d	jsr $1d70			jsr 	EXPCommonStart 					; <string>,
.1d3a	48		pha				pha 									; save string address on stack
.1d3b	da		phx				phx
.1d3c	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1d3e	48		pha				pha
.1d3f	20 69 1a	jsr $1a69			jsr 	EXPEvalInteger8 				; characters to do
.1d42	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1d44	68		pla				pla
.1d45	38		sec				sec
.1d46	e5 24		sbc $24				sbc 	zTemp0
.1d48	b0 02		bcs $1d4c			bcs 	_EUROffLeft
.1d4a	a9 00		lda #$00			lda 	#0
.1d4c					_EUROffLeft:
.1d4c	48		pha				pha 									; start pos
.1d4d	a9 ff		lda #$ff			lda 	#255
.1d4f	80 2a		bra $1d7b			bra 	EXPSubstringCommon
.1d51					EXPUnaryMid:
.1d51	20 70 1d	jsr $1d70			jsr 	EXPCommonStart 					; <string>,
.1d54	48		pha				pha 									; save string address on stack
.1d55	da		phx				phx
.1d56	20 69 1a	jsr $1a69			jsr 	EXPEvalInteger8 				; characters start
.1d59	f0 12		beq $1d6d			beq 	_EUSError 						; 1 is left
.1d5b	3a		dec a				dec 	a 								; zero based.
.1d5c	48		pha				pha
.1d5d	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1d5f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1d61	f0 04		beq $1d67			beq 	_EUMLength 						; if so m is provided
.1d63	a9 ff		lda #$ff			lda 	#255 							; default m
.1d65	80 14		bra $1d7b			bra 	EXPSubstringCommon
.1d67					_EUMLength:
.1d67	c8		iny				iny 									; consume comma
.1d68	20 69 1a	jsr $1a69			jsr 	EXPEvalInteger8 				; characters to do
.1d6b	80 0e		bra $1d7b			bra 	EXPSubstringCommon
.1d6d					_EUSError:
.1d6d	4c 62 2a	jmp $2a62		jmp	ErrorV_value
.1d70					EXPCommonStart:
.1d70	20 75 1a	jsr $1a75			jsr 	EXPEvalString
.1d73	20 33 2c	jsr $2c33			jsr 	ERRCheckComma
.1d76	a5 08		lda $08				lda 	IFR0+IM0
.1d78	a6 09		ldx $09				ldx 	IFR0+IM1
.1d7a	60		rts				rts
.1d7b					EXPSubstringCommon:
.1d7b	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1d7d	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; check right bracket.
.1d80	68		pla				pla 									; start position
.1d81	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1d83	fa		plx				plx 									; get string address to zTemp2.
.1d84	86 29		stx $29				stx 	zTemp2+1
.1d86	68		pla				pla
.1d87	85 28		sta $28				sta 	zTemp2
.1d89	38		sec				sec 									; length - start is the max count of chars
.1d8a	b2 28		lda ($28)			lda 	(zTemp2)
.1d8c	e5 27		sbc $27				sbc 	zTemp1+1
.1d8e	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1d90	b0 02		bcs $1d94			bcs 	_EXPSSNoTrim
.1d92	85 26		sta $26				sta 	zTemp1 							; update count with available
.1d94					_EXPSSNoTrim:
.1d94	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1d96	20 20 2d	jsr $2d20			jsr 	StringTempAllocate 				; allocate memory for it.
.1d99	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1d9b	f0 15		beq $1db2			beq 	_EXPSSExit
.1d9d	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1d9f	d2 28		cmp ($28)			cmp 	(zTemp2)
.1da1	b0 0f		bcs $1db2			bcs 	_EXPSSExit
.1da3	5a		phy				phy
.1da4	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1da6	c8		iny				iny 									; +1 for the length byte
.1da7					_EXPSSCopy:
.1da7	b1 28		lda ($28),y			lda 	(zTemp2),y
.1da9	20 55 2d	jsr $2d55			jsr 	StringTempWrite
.1dac	c8		iny				iny
.1dad	c6 26		dec $26				dec 	zTemp1
.1daf	d0 f6		bne $1da7			bne 	_EXPSSCopy
.1db1	7a		ply				ply
.1db2					_EXPSSExit:
.1db2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1db3					EXPUnaryVal:
.1db3	20 75 1a	jsr $1a75			jsr 	EXPEvalString 					; string to R0, zTemp0
.1db6	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 					; )
.1db9	20 bd 1d	jsr $1dbd			jsr 	VALConversionZTemp0
.1dbc	60		rts				rts
.1dbd					VALConversionZTemp0:
.1dbd	5a		phy				phy
.1dbe	18		clc				clc
.1dbf	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1dc1	69 01		adc #$01			adc 	#1
.1dc3	aa		tax				tax
.1dc4	a5 25		lda $25				lda 	zTemp0+1
.1dc6	69 00		adc #$00			adc 	#0
.1dc8	a8		tay				tay
.1dc9	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1dcb	20 2c 35	jsr $352c			jsr 	IFloatStringToFloatR0 			; do conversion
.1dce	b0 02		bcs $1dd2			bcs 	_EUVError
.1dd0	7a		ply				ply
.1dd1	60		rts				rts
.1dd2					_EUVError:
.1dd2	4c 62 2a	jmp $2a62		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1dd5					AssemblerLookup:
>1dd5	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1ddd	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1ded	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1dfd	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1e0d	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1e1d	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1e2d	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1e3d	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1e4d	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1e5d	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1e6d	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1e7d	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1e8d	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1e9d	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1ead	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1ebd	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1ecd	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1ed5					BinaryPrecedence:
>1ed5	02					.byte	 2	; $ef =
>1ed6	02					.byte	 2	; $f0 <>
>1ed7	02					.byte	 2	; $f1 <=
>1ed8	02					.byte	 2	; $f2 <
>1ed9	02					.byte	 2	; $f3 >=
>1eda	02					.byte	 2	; $f4 >
>1edb	01					.byte	 1	; $f5 XOR
>1edc	01					.byte	 1	; $f6 OR
>1edd	01					.byte	 1	; $f7 AND
>1ede	04					.byte	 4	; $f8 DIV
>1edf	04					.byte	 4	; $f9 MOD
>1ee0	04					.byte	 4	; $fa <<
>1ee1	04					.byte	 4	; $fb >>
>1ee2	04					.byte	 4	; $fc /
>1ee3	04					.byte	 4	; $fd *
>1ee4	03					.byte	 3	; $fe -
>1ee5	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1ee6					StructureOffsets:
>1ee6	01					.byte	1  	; $80 REPEAT
>1ee7	ff					.byte	255	; $81 UNTIL
>1ee8	01					.byte	1  	; $82 WHILE
>1ee9	ff					.byte	255	; $83 WEND
>1eea	01					.byte	1  	; $84 IF
>1eeb	ff					.byte	255	; $85 ENDIF
>1eec	01					.byte	1  	; $86 DO
>1eed	ff					.byte	255	; $87 LOOP
>1eee	01					.byte	1  	; $88 PROC
>1eef	ff					.byte	255	; $89 ENDPROC
>1ef0	01					.byte	1  	; $8a FOR
>1ef1	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1ef2					StandardTokens:
>1ef2	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1ef9	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1eff	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1f05	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1f0a	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1f0d	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1f13	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1f16	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1f1b	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1f20	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1f28	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1f2c	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1f31	00					.byte	$00                                     	; $8c [[end]]
>1f32	00					.byte	$00                                     	; $8d [[shift]]
>1f33	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1f38	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1f3d	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1f40	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1f45	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1f49	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1f4f	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1f55	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1f5a	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1f5e	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1f62	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1f67	01 2c					.byte	$01,$2c                                 	; $99 ,
>1f69	01 3b					.byte	$01,$3b                                 	; $9a ;
>1f6b	01 3a					.byte	$01,$3a                                 	; $9b :
>1f6d	01 27					.byte	$01,$27                                 	; $9c '
>1f6f	01 29					.byte	$01,$29                                 	; $9d )
>1f71	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1f76	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1f7b	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1f80	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1f85	01 5b					.byte	$01,$5b                                 	; $a2 [
>1f87	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1f89	01 23					.byte	$01,$23                                 	; $a4 #
>1f8b	01 2e					.byte	$01,$2e                                 	; $a5 .
>1f8d	00					.byte	0											; $a6
>1f8e	00					.byte	0											; $a7
>1f8f	00					.byte	0											; $a8
>1f90	00					.byte	0											; $a9
>1f91	00					.byte	0											; $aa
>1f92	00					.byte	0											; $ab
>1f93	00					.byte	0											; $ac
>1f94	00					.byte	0											; $ad
>1f95	00					.byte	0											; $ae
>1f96	00					.byte	0											; $af
>1f97	00					.byte	0											; $b0
>1f98	00					.byte	0											; $b1
>1f99	00					.byte	0											; $b2
>1f9a	00					.byte	0											; $b3
>1f9b	00					.byte	0											; $b4
>1f9c	00					.byte	0											; $b5
>1f9d	00					.byte	0											; $b6
>1f9e	00					.byte	0											; $b7
>1f9f	00					.byte	0											; $b8
>1fa0	00					.byte	0											; $b9
>1fa1	00					.byte	0											; $ba
>1fa2	00					.byte	0											; $bb
>1fa3	00					.byte	0											; $bc
>1fa4	00					.byte	0											; $bd
>1fa5	00					.byte	0											; $be
>1fa6	00					.byte	0											; $bf
>1fa7	00					.byte	0											; $c0
>1fa8	00					.byte	0											; $c1
>1fa9	00					.byte	0											; $c2
>1faa	00					.byte	0											; $c3
>1fab	00					.byte	0											; $c4
>1fac	00					.byte	0											; $c5
>1fad	00					.byte	0											; $c6
>1fae	00					.byte	0											; $c7
>1faf	00					.byte	0											; $c8
>1fb0	00					.byte	0											; $c9
>1fb1	00					.byte	0											; $ca
>1fb2	00					.byte	0											; $cb
>1fb3	00					.byte	0											; $cc
>1fb4	00					.byte	0											; $cd
>1fb5	00					.byte	0											; $ce
>1fb6	00					.byte	0											; $cf
>1fb7	00					.byte	0											; $d0
>1fb8	00					.byte	0											; $d1
>1fb9	00					.byte	0											; $d2
>1fba	00					.byte	0											; $d3
>1fbb	00					.byte	0											; $d4
>1fbc	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1fc2	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1fc8	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1fd0	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1fd7	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1fdd	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1fe3	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1fe8	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1fed	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1ff2	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1ff7	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1ffc	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>2002	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>2007	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>200f	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>2016	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>201b	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>2020	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>2026	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>202b	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>2031	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>2036	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>203c	01 28					.byte	$01,$28                                 	; $eb (
>203e	01 26					.byte	$01,$26                                 	; $ec &
>2040	00					.byte	$00                                     	; $ed [[decimal]]
>2041	00					.byte	$00                                     	; $ee [[string]]
>2042	01 3d					.byte	$01,$3d                                 	; $ef =
>2044	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>2047	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>204a	01 3c					.byte	$01,$3c                                 	; $f2 <
>204c	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>204f	01 3e					.byte	$01,$3e                                 	; $f4 >
>2051	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>2055	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>2058	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>205c	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>2060	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>2064	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>2067	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>206a	01 2f					.byte	$01,$2f                                 	; $fc /
>206c	01 2a					.byte	$01,$2a                                 	; $fd *
>206e	01 2d					.byte	$01,$2d                                 	; $fe -
>2070	01 2b					.byte	$01,$2b                                 	; $ff +
>2072	ff					.byte	$FF
.2073					AlternateTokens:
>2073	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>2079	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>207d	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>2081	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>2086	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>208a	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>2091	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>2096	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>209b	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>20a0	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>20a6	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>20ab	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>20b2	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>20ba	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>20be	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>20c2	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>20c8	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>20d0	52
>20d1	03 4f 50 54				.byte	$03,$4f,$50,$54                         	; $8d91 opt
>20d5	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.20d6					VectorTable:
>20d6	30 29					.word	Command_REPEAT           ; $80 REPEAT
>20d8	39 29					.word	Command_UNTIL            ; $81 UNTIL
>20da	13 2a					.word	Command_WHILE            ; $82 WHILE
>20dc	34 2a					.word	Command_WEND             ; $83 WEND
>20de	06 29					.word	IfCommand                ; $84 IF
>20e0	2f 29					.word	EndIf                    ; $85 ENDIF
>20e2	88 27					.word	Command_DO               ; $86 DO
>20e4	a0 27					.word	Command_LOOP             ; $87 LOOP
>20e6	8b 18					.word	NoExec08                 ; $88 PROC
>20e8	7c 27					.word	Command_ENDPROC          ; $89 ENDPROC
>20ea	a9 27					.word	Command_FOR              ; $8a FOR
>20ec	36 28					.word	Command_NEXT             ; $8b NEXT
>20ee	0c 18					.word	RUNEndOfLine             ; $8c [[END]]
>20f0	68 18					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>20f2	28 29					.word	ElseCode                 ; $8e ELSE
>20f4	8b 18					.word	NoExec01                 ; $8f THEN
>20f6	8b 18					.word	NoExec02                 ; $90 TO
>20f8	8b 18					.word	NoExec03                 ; $91 STEP
>20fa	b3 15					.word	CommandLET               ; $92 LET
>20fc	08 15					.word	Command_Print            ; $93 PRINT
>20fe	01 15					.word	Command_Input            ; $94 INPUT
>2100	40 27					.word	Command_CALL             ; $95 CALL
>2102	76 18					.word	Command_Sys              ; $96 SYS
>2104	81 17					.word	Command_REM              ; $97 REM
>2106	91 27					.word	Command_EXIT             ; $98 EXIT
>2108	8b 18					.word	NoExec04                 ; $99 ,
>210a	8b 18					.word	NoExec05                 ; $9a ;
>210c	8b 18					.word	NoExec06                 ; $9b :
>210e	81 17					.word	Command_REM2             ; $9c '
>2110	8b 18					.word	NoExec07                 ; $9d )
>2112	aa 14					.word	Command_Poke             ; $9e POKE
>2114	a7 14					.word	Command_Doke             ; $9f DOKE
>2116	0d 17					.word	Command_READ             ; $a0 READ
>2118	74 17					.word	Command_DATA             ; $a1 DATA
>211a	15 10					.word	Command_AssemblerStart   ; $a2 [
>211c	9e 2e					.word	NotImplemented           ; $a3 ]
>211e	9e 2e					.word	NotImplemented           ; $a4 #
>2120	9e 2e					.word	NotImplemented           ; $a5 .
>2122	9e 2e					.word	NotImplemented           ; $a6
>2124	9e 2e					.word	NotImplemented           ; $a7
>2126	9e 2e					.word	NotImplemented           ; $a8
>2128	9e 2e					.word	NotImplemented           ; $a9
>212a	9e 2e					.word	NotImplemented           ; $aa
>212c	9e 2e					.word	NotImplemented           ; $ab
>212e	9e 2e					.word	NotImplemented           ; $ac
>2130	9e 2e					.word	NotImplemented           ; $ad
>2132	9e 2e					.word	NotImplemented           ; $ae
>2134	9e 2e					.word	NotImplemented           ; $af
>2136	9e 2e					.word	NotImplemented           ; $b0
>2138	9e 2e					.word	NotImplemented           ; $b1
>213a	9e 2e					.word	NotImplemented           ; $b2
>213c	9e 2e					.word	NotImplemented           ; $b3
>213e	9e 2e					.word	NotImplemented           ; $b4
>2140	9e 2e					.word	NotImplemented           ; $b5
>2142	9e 2e					.word	NotImplemented           ; $b6
>2144	9e 2e					.word	NotImplemented           ; $b7
>2146	9e 2e					.word	NotImplemented           ; $b8
>2148	9e 2e					.word	NotImplemented           ; $b9
>214a	9e 2e					.word	NotImplemented           ; $ba
>214c	9e 2e					.word	NotImplemented           ; $bb
>214e	9e 2e					.word	NotImplemented           ; $bc
>2150	9e 2e					.word	NotImplemented           ; $bd
>2152	9e 2e					.word	NotImplemented           ; $be
>2154	9e 2e					.word	NotImplemented           ; $bf
>2156	9e 2e					.word	NotImplemented           ; $c0
>2158	9e 2e					.word	NotImplemented           ; $c1
>215a	9e 2e					.word	NotImplemented           ; $c2
>215c	9e 2e					.word	NotImplemented           ; $c3
>215e	9e 2e					.word	NotImplemented           ; $c4
>2160	9e 2e					.word	NotImplemented           ; $c5
>2162	9e 2e					.word	NotImplemented           ; $c6
>2164	9e 2e					.word	NotImplemented           ; $c7
>2166	9e 2e					.word	NotImplemented           ; $c8
>2168	9e 2e					.word	NotImplemented           ; $c9
>216a	9e 2e					.word	NotImplemented           ; $ca
>216c	9e 2e					.word	NotImplemented           ; $cb
>216e	9e 2e					.word	NotImplemented           ; $cc
>2170	9e 2e					.word	NotImplemented           ; $cd
>2172	9e 2e					.word	NotImplemented           ; $ce
>2174	9e 2e					.word	NotImplemented           ; $cf
>2176	9e 2e					.word	NotImplemented           ; $d0
>2178	9e 2e					.word	NotImplemented           ; $d1
>217a	9e 2e					.word	NotImplemented           ; $d2
>217c	9e 2e					.word	NotImplemented           ; $d3
>217e	9e 2e					.word	NotImplemented           ; $d4
>2180	f9 1b					.word	EXPUnaryDeek             ; $d5 DEEK(
>2182	eb 1b					.word	EXPUnaryPeek             ; $d6 PEEK(
>2184	37 1d					.word	EXPUnaryRight            ; $d7 RIGHT$(
>2186	2a 1d					.word	EXPUnaryLeft             ; $d8 LEFT$(
>2188	51 1d					.word	EXPUnaryMid              ; $d9 MID$(
>218a	e7 1c					.word	EXPUnaryStr              ; $da STR$(
>218c	b3 1d					.word	EXPUnaryVal              ; $db VAL(
>218e	b4 1c					.word	EXPUnarySgn              ; $dc SGN(
>2190	65 1b					.word	EXPUnaryAbs              ; $dd ABS(
>2192	39 1c					.word	EXPUnaryLen              ; $de LEN(
>2194	ca 1c					.word	EXPUnarySqr              ; $df SQR(
>2196	89 1b					.word	EXPUnaryChr              ; $e0 CHR$(
>2198	73 1b					.word	EXPUnaryAsc              ; $e1 ASC(
>219a	1b 1c					.word	EXPUnaryInkey            ; $e2 INKEY$(
>219c	9e 2e					.word	NotImplemented           ; $e3 EVENT(
>219e	9e 2e					.word	NotImplemented           ; $e4 TIME
>21a0	2f 1c					.word	EXPUnaryInt              ; $e5 INT(
>21a2	11 1c					.word	EXPUnaryFrac             ; $e6 FRAC(
>21a4	9a 1b					.word	EXPUnaryDec              ; $e7 DEC(
>21a6	d9 1c					.word	EXPUnaryHex              ; $e8 HEX$(
>21a8	4e 1c					.word	EXPUnaryRnd              ; $e9 RND(
>21aa	5e 1c					.word	ExpUnaryRand             ; $ea RAND(
>21ac	47 1c					.word	EXPUnaryParenthesis      ; $eb (
>21ae	6f 1b					.word	EXPUnaryNull             ; $ec &
>21b0	e8 1b					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>21b2	0f 1d					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>21b4	48 19					.word	EXPCompareEqual          ; $ef =
>21b6	63 19					.word	EXPCompareNotEqual       ; $f0 <>
>21b8	6c 19					.word	EXPCompareLessEqual      ; $f1 <=
>21ba	51 19					.word	EXPCompareLess           ; $f2 <
>21bc	75 19					.word	EXPCompareGreaterEqual   ; $f3 >=
>21be	5a 19					.word	EXPCompareGreater        ; $f4 >
>21c0	f5 18					.word	EXPBinXor                ; $f5 XOR
>21c2	e9 18					.word	EXPBinOr                 ; $f6 OR
>21c4	dd 18					.word	EXPBinAnd                ; $f7 AND
>21c6	b5 18					.word	EXPBinIDiv               ; $f8 DIV
>21c8	c6 18					.word	EXPBinIMod               ; $f9 MOD
>21ca	c0 19					.word	EXPBinLeft               ; $fa <<
>21cc	c8 19					.word	EXPBinRight              ; $fb >>
>21ce	a9 18					.word	EXPBinFDiv               ; $fc /
>21d0	a0 18					.word	EXPBinMul                ; $fd *
>21d2	97 18					.word	EXPBinSub                ; $fe -
>21d4	8e 18					.word	EXPBinAdd                ; $ff +
.21d6					AlternateVectorTable:
>21d6	17 13					.word	Command_CLEAR            ; $8d80 CLEAR
>21d8	04 17					.word	Command_NEW              ; $8d81 NEW
>21da	00 18					.word	Command_RUN              ; $8d82 RUN
>21dc	73 18					.word	Command_STOP             ; $8d83 STOP
>21de	70 18					.word	Command_END              ; $8d84 END
>21e0	09 13					.word	Command_ASSERT           ; $8d85 ASSERT
>21e2	2d 16					.word	Command_LIST             ; $8d86 LIST
>21e4	0c 2e					.word	Command_SAVE             ; $8d87 SAVE
>21e6	cb 2d					.word	Command_LOAD             ; $8d88 LOAD
>21e8	ec 28					.word	Command_GOSUB            ; $8d89 GOSUB
>21ea	d1 14					.word	Command_GOTO             ; $8d8a GOTO
>21ec	fa 28					.word	Command_RETURN           ; $8d8b RETURN
>21ee	d2 17					.word	Command_RESTORE          ; $8d8c RESTORE
>21f0	8b 13					.word	CommandDIM               ; $8d8d DIM
>21f2	62 2d					.word	Command_DIR              ; $8d8e DIR
>21f4	9f 2d					.word	Command_ERASE            ; $8d8f ERASE
>21f6	8e 17					.word	Command_RENUMBER         ; $8d90 RENUMBER
>21f8	02 13					.word	Command_OPT              ; $8d91 OPT

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.21fa					TOKDetokenise:
.21fa	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.21fc	84 29		sty $29				sty 	zTemp2+1
.21fe	9c 1c 05	stz $051c			stz		TOKLastCharacter 			; clear last character
.2201					_TOKDLoop:
.2201	20 46 22	jsr $2246			jsr 	TOKDGet 					; get next
.2204	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line, exit.
.2206	f0 3c		beq $2244			beq 	_TOKDExit
.2208	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string or decimal places modifier
.220a	f0 33		beq $223f			beq 	_TOKDDataItem
.220c	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.220e	f0 2f		beq $223f			beq 	_TOKDDataItem
.2210	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.2212	f0 19		beq $222d			beq 	_TOKAmpersand
.2214	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.2216	10 05		bpl $221d			bpl 	_TOKDNotToken
.2218	20 0c 23	jsr $230c			jsr 	TOKDToken 					; token to text.
.221b	80 e4		bra $2201			bra 	_TOKDLoop
.221d					_TOKDNotToken:
.221d	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.221f	90 05		bcc $2226			bcc 	_TOKDNotIdentifier
.2221	20 83 22	jsr $2283			jsr 	TOKDIdentifier
.2224	80 db		bra $2201			bra 	_TOKDLoop
.2226					_TOKDNotIdentifier:
.2226	a0 0a		ldy #$0a			ldy 	#10
.2228	20 c6 22	jsr $22c6			jsr 	TOKDInteger
.222b	80 d4		bra $2201			bra 	_TOKDLoop
.222d					_TOKAmpersand:
.222d	20 4e 23	jsr $234e			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.2230	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.2232	20 4f 22	jsr $224f			jsr 	TOKDOutput
.2235	20 46 22	jsr $2246			jsr 	TOKDGet 					; get first char of integer
.2238	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.223a	20 c6 22	jsr $22c6			jsr 	TOKDInteger
.223d	80 c2		bra $2201			bra 	_TOKDLoop
.223f					_TOKDDataItem:
.223f	20 5c 22	jsr $225c			jsr 	TOKDDataItem
.2242	80 bd		bra $2201			bra 	_TOKDLoop
.2244					_TOKDExit:
.2244	18		clc				clc
.2245	60		rts				rts
.2246	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.2248	e6 28		inc $28				inc 	zTemp2
.224a	d0 02		bne $224e			bne 	_TKDGExit
.224c	e6 29		inc $29				inc 	zTemp2+1
.224e					_TKDGExit:
.224e	60		rts				rts
.224f					TOKDOutput:
.224f	8d 1c 05	sta $051c			sta 	TOKLastCharacter 			; save last character
.2252	6c 1a 05	jmp ($051a)			jmp 	(TOKOutputMethod) 			; call output handler
.2255					TOKSetDetokeniseOutput:
.2255	8e 1a 05	stx $051a			stx 	TOKOutputMethod
.2258	8c 1b 05	sty $051b			sty 	TOKOutputMethod+1
.225b	60		rts				rts
.051a					TOKOutputMethod:
>051a							.fill 	2
.051c					TOKLastCharacter:
>051c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.225c					TOKDDataItem:
.225c	a8		tay				tay 								; type in Y
.225d	a9 22		lda #$22			lda 	#'"'						; start with " or . depending on type.
.225f	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.2261	f0 02		beq $2265			beq 	_TOKDDIsString
.2263	a9 2e		lda #$2e			lda 	#'.'
.2265					_TOKDDIsString:
.2265	20 4f 22	jsr $224f			jsr 	TOKDOutput 					; dump it
.2268	20 46 22	jsr $2246			jsr 	TOKDGet 					; get length into X
.226b	aa		tax				tax
.226c					_TOKDDOutput:
.226c	ca		dex				dex 								; output all the data.
.226d	e0 ff		cpx #$ff			cpx 	#255
.226f	f0 08		beq $2279			beq 	_TOKDDEnd
.2271	20 46 22	jsr $2246			jsr 	TOKDGet 					; get character and output it
.2274	20 4f 22	jsr $224f			jsr 	TOKDOutput
.2277	80 f3		bra $226c			bra 	_TOKDDOutput
.2279					_TOKDDEnd:
.2279	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.227b	d0 05		bne $2282			bne 	_TOKDDNotString
.227d	a9 22		lda #$22			lda 	#'"'
.227f	20 4f 22	jsr $224f			jsr 	TOKDOutput
.2282					_TOKDDNotString:
.2282	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.2283					TOKDIdentifier:
.2283	a0 ff		ldy #$ff			ldy 	#$FF 						; flag set on first character only.
.2285	8c 1d 05	sty $051d			sty 	TOKDIFirstChar
.2288					_TOKDLoop:
.2288	a8		tay				tay 								; token in Y, now coner it to ASCII
.2289	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.228b	c0 64		cpy #$64			cpy 	#$64
.228d	f0 0b		beq $229a			beq 	_TOKDIOutput
.228f	98		tya				tya 								; handle a-z
.2290	18		clc				clc
.2291	69 21		adc #$21			adc	 	#$21
.2293	c0 5a		cpy #$5a			cpy 	#$5A
.2295	90 03		bcc $229a			bcc 	_TOKDIOutput
.2297	38		sec				sec 								; handle 0-9
.2298	e9 4b		sbc #$4b			sbc 	#$4B
.229a					_TOKDIOutput:
.229a	2c 1d 05	bit $051d			bit 	TOKDIFirstChar 				; check spacing if first character
.229d	10 08		bpl $22a7			bpl 	_TOKDINoSpacing
.229f	48		pha				pha
.22a0	20 49 23	jsr $2349			jsr 	TOKDSpacing
.22a3	9c 1d 05	stz $051d			stz 	TOKDIFirstChar
.22a6	68		pla				pla
.22a7					_TOKDINoSpacing:
.22a7	20 4f 22	jsr $224f			jsr 	TOKDOutput
.22aa	20 46 22	jsr $2246			jsr 	TOKDGet 					; get next token
.22ad	c9 7c		cmp #$7c			cmp 	#$7C 						; 7C..7F are end markers
.22af	90 d7		bcc $2288			bcc 	_TOKDLoop
.22b1	f0 12		beq $22c5			beq 	_TOKDIExit 					; it's a number, no tail.
.22b3	4a		lsr a				lsr 	a 							; string ?
.22b4	90 07		bcc $22bd			bcc 	_TOKDICheckArray
.22b6	48		pha				pha
.22b7	a9 24		lda #$24			lda 	#"$"
.22b9	20 4f 22	jsr $224f			jsr 	TOKDOutput
.22bc	68		pla				pla
.22bd					_TOKDICheckArray:
.22bd	4a		lsr a				lsr 	a 							; array ?
.22be	90 05		bcc $22c5			bcc 	_TOKDIExit
.22c0	a9 28		lda #$28			lda 	#"("
.22c2	20 4f 22	jsr $224f			jsr 	TOKDOutput
.22c5					_TOKDIExit:
.22c5	60		rts				rts
.051d					TOKDIFirstChar:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.22c6					TOKDInteger:
.22c6	5a		phy				phy 								; save base on stack
.22c7	a2 08		ldx #$08			ldx 	#IFR0 						; set first byte of integer into into R0
.22c9	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.22cc					_TOKDILoop:
.22cc	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F, extract the whole integer out.
.22ce	c9 40		cmp #$40			cmp 	#$40
.22d0	b0 1d		bcs $22ef			bcs 	_TOKDIHaveInteger
.22d2	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.22d4	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.22d7	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.22da	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.22dd	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.22e0	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.22e3	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.22e6	20 46 22	jsr $2246			jsr 	TOKDGet 					; OR byte in.
.22e9	05 08		ora $08				ora 	IFR0+IM0
.22eb	85 08		sta $08				sta 	IFR0+IM0
.22ed	80 dd		bra $22cc			bra 	_TOKDILoop
.22ef					_TOKDIHaveInteger:
.22ef	7a		ply				ply 								; restore base
.22f0	98		tya				tya 								; base in A
.22f1	20 6a 34	jsr $346a			jsr 	IFloatIntegerToStringR0 	; make it a string
.22f4	86 24		stx $24				stx 	zTemp0 						; output that string.
.22f6	84 25		sty $25				sty 	zTemp0+1
.22f8	b2 24		lda ($24)			lda 	(zTemp0)
.22fa	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.22fc	b1 24		lda ($24),y			lda 	(zTemp0),y
.22fe	20 49 23	jsr $2349			jsr 	TOKDSpacing 				; check spacing okay.
.2301					_TOKDOutput:
.2301	b1 24		lda ($24),y			lda 	(zTemp0),y
.2303	20 4f 22	jsr $224f			jsr 	TOKDOutput
.2306	c8		iny				iny
.2307	b1 24		lda ($24),y			lda 	(zTemp0),y
.2309	d0 f6		bne $2301			bne 	_TOKDOutput
.230b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.230c					TOKDToken:
.230c	a2 f2		ldx #$f2			ldx 	#StandardTokens & $FF 		; standard table
.230e	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.2310	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.2312	d0 07		bne $231b			bne 	_TOKDSearch
.2314	20 46 22	jsr $2246			jsr 	TOKDGet 					; get next
.2317	a2 73		ldx #$73			ldx 	#AlternateTokens & $FF 		; alt table address
.2319	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.231b					_TOKDSearch:
.231b	86 24		stx $24				stx 	zTemp0 						; save table in zTemp0
.231d	84 25		sty $25				sty 	zTemp0+1
.231f	aa		tax				tax 								; token ID in X.
.2320					_TOKDFind:
.2320	ca		dex				dex 								; reached the token position
.2321	10 0d		bpl $2330			bpl 	_TOKDFound
.2323	38		sec				sec 								; go to next entry in token table
.2324	b2 24		lda ($24)			lda 	(zTemp0)
.2326	65 24		adc $24				adc 	zTemp0
.2328	85 24		sta $24				sta 	zTemp0
.232a	90 f4		bcc $2320			bcc 	_TOKDFind
.232c	e6 25		inc $25				inc 	zTemp0+1
.232e	80 f0		bra $2320			bra 	_TOKDFind
.2330					_TOKDFound:
.2330	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X.
.2332	f0 14		beq $2348			beq 	_TOKDExit 					; not a token with text.
.2334	aa		tax				tax
.2335	a0 01		ldy #$01			ldy 	#1 							; output the token.
.2337	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.2339	20 49 23	jsr $2349			jsr 	TOKDSpacing 				; do we need space before this.
.233c					_TOKDOutput:
.233c	b1 24		lda ($24),y			lda 	(zTemp0),y 					; output them in lower case
.233e	20 ff 26	jsr $26ff			jsr 	TOKToLower
.2341	20 4f 22	jsr $224f			jsr 	TOKDOutput
.2344	c8		iny				iny
.2345	ca		dex				dex
.2346	d0 f4		bne $233c			bne 	_TOKDOutput
.2348					_TOKDExit:
.2348	60		rts				rts
.2349					TOKDSpacing:
.2349	20 16 27	jsr $2716			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.234c	90 0d		bcc $235b			bcc 	TOKDSExit
.234e					TOKDSpaceLastAlpha:
.234e	ad 1c 05	lda $051c			lda 	TOKLastCharacter			; and last character also alphanumeric
.2351	20 16 27	jsr $2716			jsr 	TOKIsIdentifierElement
.2354	90 05		bcc $235b			bcc 	TOKDSExit
.2356	a9 20		lda #$20			lda 	#" " 						; we need a space.
.2358	20 4f 22	jsr $224f			jsr 	TOKDOutput
.235b					TOKDSExit:
.235b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.235c					PGMDeleteLine:
.235c	20 0f 24	jsr $240f			jsr 	PGMEndProgram 				; end of program into zTemp0
.235f	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2361	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.2364	85 27		sta $27				sta 	zTemp1+1
.2366					_PGMDLoop:
.2366	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.2368	38		sec				sec
.2369	f0 3a		beq $23a5			beq 	_PGMDExit
.236b	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.236d	b1 26		lda ($26),y			lda 	(zTemp1),y 					; compare LSB
.236f	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2372	d0 08		bne $237c			bne 	_PGMDNext
.2374	c8		iny				iny 								; compare MSB
.2375	b1 26		lda ($26),y			lda 	(zTemp1),y
.2377	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.237a	f0 0d		beq $2389			beq 	_PGMDDelete
.237c					_PGMDNext:
.237c	18		clc				clc
.237d	b2 26		lda ($26)			lda 	(zTemp1)
.237f	65 26		adc $26				adc 	zTemp1
.2381	85 26		sta $26				sta 	zTemp1
.2383	90 e1		bcc $2366			bcc 	_PGMDLoop
.2385	e6 27		inc $27				inc 	zTemp1+1
.2387	80 dd		bra $2366			bra 	_PGMDLoop
.2389					_PGMDDelete:
.2389	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.238b	a8		tay				tay
.238c					_PGMDCopy:
.238c	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.238e	92 26		sta ($26)			sta 	(zTemp1)
.2390	a5 26		lda $26				lda 	zTemp1 						; reached the end in zTemp0
.2392	c5 24		cmp $24				cmp 	zTemp0
.2394	d0 07		bne $239d			bne 	_PGMDNext2
.2396	a5 27		lda $27				lda 	zTemp1+1
.2398	c5 25		cmp $25				cmp 	zTemp0+1
.239a	18		clc				clc
.239b	f0 08		beq $23a5			beq 	_PGMDExit 					; then exit.
.239d					_PGMDNext2:
.239d	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.239f	d0 eb		bne $238c			bne 	_PGMDCopy
.23a1	e6 27		inc $27				inc 	zTemp1+1
.23a3	80 e7		bra $238c			bra 	_PGMDCopy
.23a5					_PGMDExit:
.23a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.23a6					PGMInsertLine:
.23a6	20 0f 24	jsr $240f			jsr 	PGMEndProgram 				; end of program into zTemp0
.23a9	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.23ab	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.23ae	85 27		sta $27				sta 	zTemp1+1
.23b0					_PGMILoop:
.23b0	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.23b2	f0 1c		beq $23d0			beq 	_PGMIInsert
.23b4	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.23b6	b1 26		lda ($26),y			lda 	(zTemp1),y
.23b8	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.23bb	c8		iny				iny
.23bc	b1 26		lda ($26),y			lda 	(zTemp1),y
.23be	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.23c1	b0 0d		bcs $23d0			bcs 	_PGMIInsert 				; insert here.
.23c3	18		clc				clc
.23c4	b2 26		lda ($26)			lda 	(zTemp1)
.23c6	65 26		adc $26				adc 	zTemp1
.23c8	85 26		sta $26				sta 	zTemp1
.23ca	90 e4		bcc $23b0			bcc 	_PGMILoop
.23cc	e6 27		inc $27				inc 	zTemp1+1
.23ce	80 e0		bra $23b0			bra 	_PGMILoop
.23d0					_PGMIInsert:
.23d0	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required is length in token buffer.
.23d3					_PGMIInsertLoop:
.23d3	b2 24		lda ($24)			lda 	(zTemp0) 					; shift byte up.
.23d5	91 24		sta ($24),y			sta 	(zTemp0),y
.23d7	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.23d9	c5 24		cmp $24				cmp 	zTemp0
.23db	d0 06		bne $23e3			bne 	_PGMINext
.23dd	a5 27		lda $27				lda 	zTemp1+1
.23df	c5 25		cmp $25				cmp 	zTemp0+1
.23e1	f0 0a		beq $23ed			beq 	_PGMIInserted
.23e3					_PGMINext:
.23e3	a5 24		lda $24				lda 	zTemp0
.23e5	d0 02		bne $23e9			bne 	_PGMINoBorrow
.23e7	c6 25		dec $25				dec 	zTemp0+1
.23e9					_PGMINoBorrow:
.23e9	c6 24		dec $24				dec 	zTemp0
.23eb	80 e6		bra $23d3			bra 	_PGMIInsertLoop 			; do previous byte.
.23ed					_PGMIInserted:
.23ed	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.23ef					_PGMICopyLoop:
.23ef	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.23f2	91 26		sta ($26),y			sta 	(zTemp1),y
.23f4	c8		iny				iny
.23f5	cc 00 04	cpy $0400			cpy 	TOKLineSize
.23f8	d0 f5		bne $23ef			bne 	_PGMICopyLoop
.23fa	18		clc				clc
.23fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.23fc					PGMSetBaseAddress:
.23fc	8e 1e 05	stx $051e			stx 	PGMBaseHigh 				; use memory from here
.23ff	8c 1f 05	sty $051f			sty 	PGMEndMemoryHigh 			; to here.
.2402	60		rts				rts
.2403					PGMNewProgram:
.2403	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.2405	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.2408	85 25		sta $25				sta 	zTemp0+1
.240a	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.240c	92 24		sta ($24)			sta 	(zTemp0)
.240e	60		rts				rts
.240f					PGMEndProgram:
.240f	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.2411	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.2414	85 25		sta $25				sta 	zTemp0+1
.2416					_PGMEPLoop:
.2416	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.2418	f0 0b		beq $2425			beq 	_PGMEPExit
.241a	18		clc				clc 								; no, advance to next
.241b	65 24		adc $24				adc 	zTemp0
.241d	85 24		sta $24				sta 	zTemp0
.241f	90 f5		bcc $2416			bcc 	_PGMEPLoop
.2421	e6 25		inc $25				inc 	zTemp0+1
.2423	80 f1		bra $2416			bra 	_PGMEPLoop
.2425					_PGMEPExit:
.2425	60		rts				rts
.051e					PGMBaseHigh:
>051e							.fill 	1
.051f					PGMEndMemoryHigh:
>051f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.2426					TOKResetElement:
.2426	9c 20 05	stz $0520			stz 	TOKElement
.2429	60		rts				rts
.242a					TOKWriteElement:
.242a	da		phx				phx
.242b	ae 20 05	ldx $0520			ldx 	TOKElement
.242e	9d 21 05	sta $0521,x			sta 	TOKElementText,x
.2431	9e 22 05	stz $0522,x			stz 	TOKElementText+1,x
.2434	fa		plx				plx
.2435	ee 20 05	inc $0520			inc 	TOKElement
.2438	60		rts				rts
.0520					TOKElement:
>0520							.fill 	1
.0521					TOKElementText:
>0521							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.2439					TOKTokeniseConstant:
.2439	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.243b	48		pha				pha 								; save LSB on stack
.243c	29 c0		and #$c0			and 	#$C0
.243e	05 09		ora $09				ora 	IFR0+IM1
.2440	05 0a		ora $0a				ora 	IFR0+IM2
.2442	f0 10		beq $2454			beq 	_TTCLess
.2444	da		phx				phx
.2445	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.2447					_TTCShiftRight:
.2447	46 0a		lsr $0a				lsr 	IFR0+IM2
.2449	66 09		ror $09				ror 	IFR0+IM1
.244b	66 08		ror $08				ror 	IFR0+IM0
.244d	ca		dex				dex
.244e	d0 f7		bne $2447			bne 	_TTCShiftRight
.2450	fa		plx				plx
.2451	20 39 24	jsr $2439			jsr 	TOKTokeniseConstant
.2454					_TTCLess:
.2454	68		pla				pla
.2455	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.2457	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.245a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.245b					TOKTokeniseDecimals:
.245b	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; consume the .
.245e	20 83 26	jsr $2683			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2461	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2463	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.2466	20 6b 24	jsr $246b			jsr 	TOKOutputElementBuffer 		; then the buffer
.2469	18		clc				clc
.246a	60		rts				rts
.246b					TOKOutputElementBuffer:
.246b	ad 20 05	lda $0520			lda 	TOKElement 					; get count and write that
.246e	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.2471	a8		tay				tay 								; put in Y
.2472	f0 0c		beq $2480			beq 	_TOEExit 					; exit if empty which is okay.
.2474	a2 01		ldx #$01			ldx 	#1
.2476					_TOELoop:
.2476	bd 20 05	lda $0520,x			lda 	TOKElement,x
.2479	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.247c	e8		inx				inx
.247d	88		dey				dey
.247e	d0 f6		bne $2476			bne 	_TOELoop
.2480					_TOEExit:
.2480	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2481					TOKTokenise:
.2481	8c 21 06	sty $0621			sty 	TOKDataSource+1 			; save source routine pointer
.2484	8e 20 06	stx $0620			stx 	TOKDataSource
.2487	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2489	8d 22 06	sta $0622			sta 	TOKIsFirstElement
.248c	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.248e	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2491	9c 01 04	stz $0401			stz 	TOKLineNumber
.2494	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2497					_TOKMainLoop:
.2497	20 06 25	jsr $2506			jsr 	TOKGet 						; what follows ?
.249a	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.249c	f0 50		beq $24ee			beq 	_TOKExit
.249e	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.24a0	d0 05		bne $24a7			bne 	_TOKElement
.24a2	20 0a 25	jsr $250a			jsr 	TOKGetNext
.24a5	80 f0		bra $2497			bra 	_TOKMainLoop
.24a7					_TOKElement:
.24a7	20 0a 27	jsr $270a			jsr 	TOKIsDigit 					; is it 0..9
.24aa	90 16		bcc $24c2			bcc 	_TOKNotDigit
.24ac	20 5a 26	jsr $265a			jsr 	TOKTokeniseInteger 			; get integer
.24af	b0 44		bcs $24f5			bcs 	_TOKFail 					; did it fail ?
.24b1	9c 22 06	stz $0622			stz 	TOKIsFirstElement 			; clear first element flag
.24b4	20 06 25	jsr $2506			jsr 	TOKGet 						; what follows ?
.24b7	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.24b9	d0 dc		bne $2497			bne 	_TOKMainLoop
.24bb	20 5b 24	jsr $245b			jsr 	TOKTokeniseDecimals
.24be	b0 35		bcs $24f5			bcs 	_TOKFail
.24c0	80 d5		bra $2497			bra 	_TOKMainLoop
.24c2					_TOKNotDigit:
.24c2	9c 22 06	stz $0622			stz 	TOKIsFirstElement 			; clear first element flag
.24c5	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.24c7	d0 07		bne $24d0			bne 	_TOKNotHex
.24c9	20 60 25	jsr $2560			jsr 	TOKTokeniseHexadecimal
.24cc	b0 27		bcs $24f5			bcs 	_TOKFail
.24ce	80 c7		bra $2497			bra 	_TOKMainLoop
.24d0					_TOKNotHex:
.24d0	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.24d2	d0 07		bne $24db			bne 	_TOKNotString
.24d4	20 d1 26	jsr $26d1			jsr 	TOKTokeniseString
.24d7	b0 1c		bcs $24f5			bcs 	_TOKFail
.24d9	80 bc		bra $2497			bra 	_TOKMainLoop
.24db					_TOKNotString:
.24db	20 23 27	jsr $2723			jsr 	TOKIsAlpha 					; identifier ?
.24de	b0 07		bcs $24e7			bcs 	_TOKIdentifier
.24e0	20 97 26	jsr $2697			jsr 	TOKTokenisePunctuation 		; punctuation
.24e3	b0 10		bcs $24f5			bcs 	_TOKFail
.24e5	80 b0		bra $2497			bra 	_TOKMainLoop
.24e7					_TOKIdentifier:
.24e7	20 9d 25	jsr $259d			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.24ea	b0 09		bcs $24f5			bcs 	_TOKFail
.24ec	80 a9		bra $2497			bra 	_TOKMainLoop
.24ee					_TOKExit:
.24ee	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.24f0	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.24f3	18		clc				clc									; return with carry set.
.24f4	60		rts				rts
.24f5					_TOKFail:
.24f5	38		sec				sec
.24f6	60		rts				rts
.24f7					TOKWriteA:
.24f7	da		phx				phx
.24f8	ae 00 04	ldx $0400			ldx 	TOKLineSize
.24fb	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.24fe	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2501	fa		plx				plx
.2502	ee 00 04	inc $0400			inc 	TOKLineSize
.2505	60		rts				rts
.2506					TOKGet:
.2506	18		clc				clc
.2507	6c 20 06	jmp ($0620)			jmp 	(TOKDataSource)
.250a					TOKGetNext:
.250a	38		sec				sec
.250b	6c 20 06	jmp ($0620)			jmp 	(TOKDataSource)
.0620					TOKDataSource:
>0620							.fill 	2
.0622					TOKIsFirstElement:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.250e					TOKFindToken:
.250e	a2 f2		ldx #$f2			ldx 	#StandardTokens & $FF 		; do this table
.2510	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.2512	20 2a 25	jsr $252a			jsr 	TOKFindTokenXY 				; find it, or not
.2515	b0 0d		bcs $2524			bcs 	_TOKFound1
.2517	a2 73		ldx #$73			ldx 	#AlternateTokens & $FF 		; do the alternate table
.2519	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.251b	20 2a 25	jsr $252a			jsr 	TOKFindTokenXY 				; find it, or not
.251e	90 08		bcc $2528			bcc 	_TOKFTFail 					; not ....
.2520	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shift token
.2522	38		sec				sec
.2523	60		rts				rts
.2524					_TOKFound1:
.2524	a2 00		ldx #$00			ldx 	#0 							; come here for unshifted (e.g. X = 0)
.2526	38		sec				sec
.2527	60		rts				rts
.2528					_TOKFTFail:
.2528	18		clc				clc
.2529	60		rts				rts
.252a					TOKFindTokenXY:
.252a	86 24		stx $24				stx 	zTemp0 						; save token table address
.252c	84 25		sty $25				sty 	zTemp0+1
.252e	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2530	8d 23 06	sta $0623			sta 	TOKCurrent
.2533					_TOKFindLoop:
.2533	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.2535	18		clc				clc 		 						; clear carry in case of fail
.2536	30 17		bmi $254f			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2538	cd 20 05	cmp $0520			cmp 	TOKElement 					; compare against the element length
.253b	d0 13		bne $2550			bne 	_TOKNext 					; different, try next.
.253d	aa		tax				tax 								; number of chars to compare.
.253e	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.2540					_TOKCompare:
.2540	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.2542	d9 20 05	cmp $0520,y			cmp 	TOKElementText-1,y
.2545	d0 09		bne $2550			bne 	_TOKNext 					; different ? try next
.2547	c8		iny				iny 								; compare next two
.2548	ca		dex				dex
.2549	d0 f5		bne $2540			bne 	_TOKCompare 				; until done X characters.
.254b	38		sec				sec
.254c	ad 23 06	lda $0623			lda 	TOKCurrent 					; return current ID.
.254f					_TOKExit:
.254f	60		rts				rts
.2550					_TOKNext:
.2550	ee 23 06	inc $0623			inc 	TOKCurrent 					; increment token #
.2553	38		sec				sec 								; add length+1 to ptr
.2554	b2 24		lda ($24)			lda 	(zTemp0)
.2556	65 24		adc $24				adc 	zTemp0
.2558	85 24		sta $24				sta 	zTemp0
.255a	90 d7		bcc $2533			bcc 	_TOKFindLoop
.255c	e6 25		inc $25				inc 	zTemp0+1
.255e	80 d3		bra $2533			bra 	_TOKFindLoop
.0623					TOKCurrent:
>0623							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2560					TOKTokeniseHexadecimal:
.2560	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; consume the $
.2563	a2 08		ldx #$08			ldx 	#IFR0
.2565	20 c8 36	jsr $36c8			jsr 	IFloatSetZero 				; set R0 = 0
.2568					_TTHLoop:
.2568	20 06 25	jsr $2506			jsr 	TOKGet 						; keep getting and copying while numeric.
.256b	20 30 27	jsr $2730			jsr 	TOKIsHexadecimal
.256e	90 23		bcc $2593			bcc 	_TTHDone
.2570	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2572	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.2575	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.2578	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.257b	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.257e	20 0a 25	jsr $250a			jsr 	TOKGetNext
.2581	20 f4 26	jsr $26f4			jsr 	TOKToUpper 					; make U/C
.2584	38		sec				sec 								; convert to decimal.
.2585	e9 30		sbc #$30			sbc 	#48
.2587	c9 0a		cmp #$0a			cmp 	#10
.2589	90 02		bcc $258d			bcc 	_TTHNotAlpha
.258b	e9 07		sbc #$07			sbc 	#7
.258d					_TTHNotAlpha:
.258d	05 08		ora $08				ora 	IFR0+IM0 					; OR into R0
.258f	85 08		sta $08				sta 	IFR0+IM0
.2591	80 d5		bra $2568			bra 	_TTHLoop
.2593					_TTHDone:
.2593	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.2595	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.2598	20 39 24	jsr $2439			jsr 	TOKTokeniseConstant 		; write integer out.
.259b	18		clc				clc
.259c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.259d					TOKTokeniseIdentifier:
.259d	20 26 24	jsr $2426			jsr 	TOKResetElement 			; extract an identifier
.25a0					_TOKGetIdentifier:
.25a0	20 06 25	jsr $2506			jsr 	TOKGet 						; get identifier character as capital
.25a3	20 f4 26	jsr $26f4			jsr 	TOKToUpper
.25a6	20 16 27	jsr $2716			jsr 	TOKIsIdentifierElement 		; exit if complete
.25a9	90 08		bcc $25b3			bcc 	_TOKEndIdent
.25ab	20 2a 24	jsr $242a			jsr		TOKWriteElement 			; add to element buffer
.25ae	20 0a 25	jsr $250a			jsr 	TOKGetNext
.25b1	80 ed		bra $25a0			bra 	_TOKGetIdentifier
.25b3					_TOKEndIdent:
.25b3	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.25b5	d0 06		bne $25bd			bne 	_TOKNotString
.25b7	20 2a 24	jsr $242a			jsr 	TOKWriteElement 			; add it
.25ba	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; consume it
.25bd					_TOKNotString:
.25bd	20 06 25	jsr $2506			jsr 	TOKGet 						; finally check for (
.25c0	c9 28		cmp #$28			cmp 	#"("
.25c2	d0 06		bne $25ca			bne 	_TOKNoArray
.25c4	20 2a 24	jsr $242a			jsr 	TOKWriteElement 			; add it
.25c7	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; consume it
.25ca					_TOKNoArray:
.25ca	20 0e 25	jsr $250e			jsr 	TOKFindToken 				; find it
.25cd	90 18		bcc $25e7			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.25cf	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.25d1	f0 0f		beq $25e2			beq 	_TOKComment 				; yes, do comment code.
.25d3	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.25d5	d0 06		bne $25dd			bne 	_TOKNoShift
.25d7	48		pha				pha 								; write the shift.
.25d8	8a		txa				txa
.25d9	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.25dc	68		pla				pla
.25dd					_TOKNoShift:
.25dd	20 f7 24	jsr $24f7			jsr 	TOKWriteA 					; write the main token.
.25e0	18		clc				clc
.25e1	60		rts				rts
.25e2					_TOKComment:
.25e2	20 27 26	jsr $2627			jsr 	TOKDoComment 				; comments are special case.
.25e5	18		clc				clc
.25e6	60		rts				rts
.25e7					_TOKIsVariable:
.25e7	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.25e9					_TOKOutputBuffer:
.25e9	bd 21 05	lda $0521,x			lda 	TOKElementText,x 			; output it translated.
.25ec	20 15 26	jsr $2615			jsr 	TOKTranslateIdentifier
.25ef	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.25f2	e8		inx				inx
.25f3	bd 21 05	lda $0521,x			lda 	TOKElementText,x
.25f6	20 16 27	jsr $2716			jsr 	TOKIsIdentifierElement
.25f9	b0 ee		bcs $25e9			bcs 	_TOKOutputBuffer
.25fb	a8		tay				tay 								; last char in Y
.25fc	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.25fe	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2600	f0 0e		beq $2610			beq 	_TOKIVExit
.2602	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2604	d0 04		bne $260a			bne 	_TOKIVCheckArray 			; no, check for (
.2606	1a		inc a				inc 	a 							; token is $7D
.2607	bc 22 05	ldy $0522,x			ldy 	TOKElementText+1,x 			; get next one.
.260a					_TOKIVCheckArray:
.260a	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.260c	d0 02		bne $2610			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.260e	1a		inc a				inc 	a
.260f	1a		inc a				inc 	a
.2610					_TOKIVExit:
.2610	20 f7 24	jsr $24f7			jsr 	TOKWriteA 					; ending token
.2613	18		clc				clc
.2614	60		rts				rts
.2615					TOKTranslateIdentifier:
.2615	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.2617	f0 0b		beq $2624			beq 	_TTI64
.2619	38		sec				sec
.261a	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.261c	10 03		bpl $2621			bpl 	_TTIExit
.261e	18		clc				clc 								; map 09 onto 26-35
.261f	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2621					_TTIExit:
.2621	09 40		ora #$40			ora 	#$40 						; correct range.
.2623	60		rts				rts
.2624	a9 64		lda #$64	_TTI64:	lda 	#$64
.2626	60		rts				rts
.2627					TOKDoComment:
.2627	20 f7 24	jsr $24f7			jsr 	TOKWriteA					; output the token.
.262a					_TOKSkipSpaces:
.262a	20 06 25	jsr $2506			jsr 	TOKGet 						; skip over spaces
.262d	c9 20		cmp #$20			cmp 	#' '
.262f	d0 05		bne $2636			bne 	_TOKEndSpaces
.2631	20 0a 25	jsr $250a			jsr 	TOKGetNext
.2634	80 f4		bra $262a			bra 	_TOKSkipSpaces
.2636					_TOKEndSpaces:
.2636	48		pha				pha 								; save it
.2637	68		pla				pla
.2638	f0 04		beq $263e			beq 	_TOKDCExit 					; end of line.
.263a	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark , we should be okay.
.263c	d0 01		bne $263f			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.263e					_TOKDCExit:
.263e	60		rts				rts
.263f					_TOKDCDoLine:
.263f	20 26 24	jsr $2426			jsr 	TOKResetElement 			; start getting the string
.2642					_TOKDCLoop:
.2642	20 06 25	jsr $2506			jsr 	TOKGet 						; check EOL
.2645	c9 00		cmp #$00			cmp 	#0
.2647	f0 08		beq $2651			beq 	_TOKDCEndComment
.2649	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; get and consume
.264c	20 2a 24	jsr $242a			jsr 	TOKWriteElement
.264f	80 f1		bra $2642			bra 	_TOKDCLoop
.2651					_TOKDCEndComment:
.2651	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ 		; output as string.
.2653	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.2656	20 6b 24	jsr $246b			jsr 	TOKOutputElementBuffer
.2659	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.265a					TOKTokeniseInteger:
.265a	20 83 26	jsr $2683			jsr 	TOKExtractInteger 			; pull an integer out as text.
.265d	a2 21		ldx #$21			ldx 	#TOKElementText & $FF 		; get length/address
.265f	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2661	ad 20 05	lda $0520			lda		TOKElement
.2664	20 2c 35	jsr $352c			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2667	ad 22 06	lda $0622			lda 	TOKIsFirstElement 			; first element ?
.266a	f0 12		beq $267e			beq 	_TOKNotLineNumber
.266c	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.266e	d0 0c		bne $267c			bne 	_TOKBadLineNumeber
.2670	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2672	8d 01 04	sta $0401			sta 	TOKLineNumber
.2675	a5 09		lda $09				lda 	IFR0+IM1
.2677	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.267a	18		clc				clc
.267b	60		rts				rts
.267c					_TOKBadLineNumeber:
.267c	38		sec				sec
.267d	60		rts				rts
.267e					_TOKNotLineNumber:
.267e	20 39 24	jsr $2439			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2681	18		clc				clc
.2682	60		rts				rts
.2683					TOKExtractInteger:
.2683	20 26 24	jsr $2426			jsr 	TOKResetElement 			; restart
.2686					_TTILoop:
.2686	20 06 25	jsr $2506			jsr 	TOKGet 						; keep getting and copying while numeric.
.2689	20 0a 27	jsr $270a			jsr 	TOKIsDigit
.268c	90 08		bcc $2696			bcc 	_TOKEIExit
.268e	20 2a 24	jsr $242a			jsr 	TOKWriteElement
.2691	20 0a 25	jsr $250a			jsr 	TOKGetNext
.2694	80 f0		bra $2686			bra 	_TTILoop
.2696					_TOKEIExit:
.2696	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2697					TOKTokenisePunctuation:
.2697	20 26 24	jsr $2426			jsr 	TOKResetElement 			; copy first punctuation character into element.
.269a	20 0a 25	jsr $250a			jsr 	TOKGetNext
.269d	20 2a 24	jsr $242a			jsr 	TOKWriteElement
.26a0	20 06 25	jsr $2506			jsr 	TOKGet 						; what follows ?
.26a3	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character.
.26a5	f0 10		beq $26b7			beq 	_TTPOne
.26a7	20 1a 27	jsr $271a			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.26aa	b0 0b		bcs $26b7			bcs 	_TTPOne 					; these speed things up a bit.
.26ac	20 2a 24	jsr $242a			jsr 	TOKWriteElement 			; this is what we will search for.
.26af	20 0e 25	jsr $250e			jsr 	TOKFindToken
.26b2	b0 0a		bcs $26be			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.26b4	ce 20 05	dec $0520			dec 	TOKElement 					; make it a single character
.26b7					_TTPOne:
.26b7	20 0e 25	jsr $250e			jsr 	TOKFindToken 				; look for one character punctuation
.26ba	b0 07		bcs $26c3			bcs 	_TTPOutputExit 				; we found it
.26bc	38		sec				sec 								; not recognised.
.26bd	60		rts				rts
.26be					_TTPConsumeExit:
.26be	48		pha				pha
.26bf	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; get the 2nd char out.
.26c2	68		pla				pla
.26c3					_TTPOutputExit:
.26c3	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.26c5	f0 05		beq $26cc			beq 	_TTPComment
.26c7	20 f7 24	jsr $24f7			jsr  	TOKWriteA 					; write token out
.26ca	18		clc				clc
.26cb	60		rts				rts
.26cc					_TTPComment:
.26cc	20 27 26	jsr $2627			jsr 	TOKDoComment
.26cf	18		clc				clc
.26d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.26d1					TOKTokeniseString:
.26d1	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; consume the "
.26d4	20 26 24	jsr $2426			jsr 	TOKResetElement 			; start getting the string
.26d7					_TOKTSLoop:
.26d7	20 06 25	jsr $2506			jsr 	TOKGet 						; check EOL
.26da	c9 00		cmp #$00			cmp 	#0
.26dc	f0 0c		beq $26ea			beq 	_TOKTSExit
.26de	20 0a 25	jsr $250a			jsr 	TOKGetNext 					; get and consume
.26e1	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.26e3	f0 05		beq $26ea			beq 	_TOKTSExit
.26e5	20 2a 24	jsr $242a			jsr 	TOKWriteElement
.26e8	80 ed		bra $26d7			bra 	_TOKTSLoop
.26ea					_TOKTSExit:
.26ea	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ		; token for [[string]]
.26ec	20 f7 24	jsr $24f7			jsr 	TOKWriteA
.26ef	20 6b 24	jsr $246b			jsr 	TOKOutputElementBuffer 		; output collected data.
.26f2	18		clc				clc
.26f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.26f4					TOKToUpper:
.26f4	c9 61		cmp #$61			cmp 	#"a"
.26f6	90 06		bcc $26fe			bcc 	_TTUNotLower
.26f8	c9 7b		cmp #$7b			cmp 	#"z"+1
.26fa	b0 02		bcs $26fe			bcs 	_TTUNotLower
.26fc	49 20		eor #$20			eor 	#$20
.26fe					_TTUNotLower:
.26fe	60		rts				rts
.26ff					TOKToLower:
.26ff	c9 41		cmp #$41			cmp 	#"A"
.2701	90 06		bcc $2709			bcc 	_TTUNotUpper
.2703	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2705	b0 02		bcs $2709			bcs 	_TTUNotUpper
.2707	49 20		eor #$20			eor 	#$20
.2709					_TTUNotUpper:
.2709	60		rts				rts
.270a					TOKIsDigit:
.270a	c9 30		cmp #$30			cmp 	#"0"
.270c	90 06		bcc $2714			bcc 	TOKFail
.270e	c9 3a		cmp #$3a			cmp 	#"9"+1
.2710	b0 02		bcs $2714			bcs 	TOKFail
.2712					TOKSucceed:
.2712	38		sec				sec
.2713	60		rts				rts
.2714					TOKFail:
.2714	18		clc				clc
.2715	60		rts				rts
.2716					TOKIsIdentifierElement:
.2716	c9 5f		cmp #$5f			cmp 	#"_"
.2718	f0 f8		beq $2712			beq 	TOKSucceed 					; else fall through to alphanumeric
.271a					TOKIsAlphaNumeric:
.271a	20 23 27	jsr $2723			jsr 	TOKIsAlpha
.271d	b0 f3		bcs $2712			bcs 	TOKSucceed
.271f	20 0a 27	jsr $270a			jsr 	TOKIsDigit
.2722	60		rts				rts
.2723					TOKIsAlpha:
.2723	20 f4 26	jsr $26f4			jsr 	TOKToUpper
.2726	c9 41		cmp #$41			cmp 	#"A"
.2728	90 ea		bcc $2714			bcc 	TOKFail
.272a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.272c	b0 e6		bcs $2714			bcs 	TOKFail
.272e	80 e2		bra $2712			bra 	TOKSucceed
.2730					TOKIsHexadecimal:
.2730	20 0a 27	jsr $270a			jsr		TOKIsDigit
.2733	b0 dd		bcs $2712			bcs 	TOKSucceed
.2735	20 23 27	jsr $2723			jsr 	TOKIsAlpha
.2738	90 da		bcc $2714			bcc 	TOKFail
.273a	c9 47		cmp #$47			cmp 	#"F"+1
.273c	b0 d6		bcs $2714			bcs 	TOKFail
.273e	80 d2		bra $2712			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2740					Command_CALL:
.2740	a9 42		lda #$42			lda 	#STK_CALL
.2742	20 44 2c	jsr $2c44			jsr 	StackOpen
.2745	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2747	29 c0		and #$c0			and 	#$C0
.2749	c9 40		cmp #$40			cmp 	#$40
.274b	d0 29		bne $2776			bne 	_CCSyntax
.274d	20 0b 30	jsr $300b			jsr 	VARGetInfo 					; get the information
.2750	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 				; check right bracket follows.
.2753	20 bd 2f	jsr $2fbd			jsr 	VARFind 					; exists ?
.2756	90 21		bcc $2779			bcc 	_CCUnknown
.2758	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.275a	85 24		sta $24				sta 	zTemp0
.275c	20 77 2c	jsr $2c77			jsr 	STKSaveCodePosition 		; save return address on stack.
.275f	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2761	b1 24		lda ($24),y			lda 	(zTemp0),y
.2763	c9 ff		cmp #$ff			cmp 	#$FF
.2765	d0 12		bne $2779			bne 	_CCUnknown
.2767	88		dey				dey 								; get Y offset to stack
.2768	b1 24		lda ($24),y			lda 	(zTemp0),y
.276a	48		pha				pha
.276b	88		dey				dey 								; get address
.276c	b1 24		lda ($24),y			lda 	(zTemp0),y
.276e	85 19		sta $19				sta 	codePtr+1
.2770	b2 24		lda ($24)			lda 	(zTemp0)
.2772	85 18		sta $18				sta 	codePtr
.2774	7a		ply				ply 								; restore Y
.2775	60		rts				rts
.2776					_CCSyntax:
.2776	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.2779					_CCUnknown:
.2779	4c b5 2b	jmp $2bb5		jmp	ErrorV_unknown
.277c					Command_ENDPROC:
.277c	a9 42		lda #$42			lda 	#STK_CALL
.277e	20 6f 2c	jsr $2c6f			jsr 	StackCheckFrame
.2781	20 89 2c	jsr $2c89			jsr 	STKLoadCodePosition 		; return
.2784	20 61 2c	jsr $2c61			jsr 	StackClose
.2787	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2788					Command_DO:
.2788	a9 22		lda #$22			lda 	#STK_DO
.278a	20 44 2c	jsr $2c44			jsr 	StackOpen
.278d	20 77 2c	jsr $2c77			jsr 	STKSaveCodePosition 		; save loop position
.2790	60		rts				rts
.2791					Command_EXIT:
.2791	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2793	20 6f 2c	jsr $2c6f			jsr 	StackCheckFrame
.2796	20 61 2c	jsr $2c61			jsr 	StackClose 					; close it
.2799	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.279b	aa		tax				tax
.279c	20 50 29	jsr $2950			jsr 	ScanForward
.279f	60		rts				rts
.27a0					Command_LOOP:
.27a0	a9 22		lda #$22			lda 	#STK_DO
.27a2	20 6f 2c	jsr $2c6f			jsr 	StackCheckFrame
.27a5	20 89 2c	jsr $2c89			jsr 	STKLoadCodePosition 		; loop back
.27a8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.27a9					Command_FOR:
.27a9	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.27ab	20 44 2c	jsr $2c44			jsr 	StackOpen
.27ae	20 b3 15	jsr $15b3			jsr 	CommandLET 					; do "I = 1" bit
.27b1	5a		phy				phy 								; save variable address to +4,+5
.27b2	a0 04		ldy #$04			ldy 	#4
.27b4	a5 24		lda $24				lda 	zTemp0
.27b6	91 2c		sta ($2c),y			sta 	(basicStack),y
.27b8	c8		iny				iny
.27b9	a5 25		lda $25				lda 	zTemp0+1
.27bb	91 2c		sta ($2c),y			sta 	(basicStack),y
.27bd	7a		ply				ply
.27be	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.27c0	20 3b 2c	jsr $2c3b			jsr 	ERRCheckA
.27c3	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.27c6	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.27c8	a2 08		ldx #$08			ldx 	#IFR0
.27ca	20 1f 28	jsr $281f			jsr 	CFSaveR0X
.27cd	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.27cf	c9 91		cmp #$91			cmp 	#PR_STEP
.27d1	d0 06		bne $27d9			bne 	_CFStep1
.27d3	c8		iny				iny 								; consume step
.27d4	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; evaluate STEP
.27d7	80 24		bra $27fd			bra 	_CFWriteStep
.27d9					_CFStep1:
.27d9	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.27db	a9 01		lda #$01			lda 	#1
.27dd	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.27e0	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.27e1	a0 04		ldy #$04			ldy 	#4 							; get variable address
.27e3	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27e5	85 24		sta $24				sta 	zTemp0
.27e7	c8		iny				iny
.27e8	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27ea	85 25		sta $25				sta 	zTemp0+1
.27ec	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.27ee	b1 24		lda ($24),y			lda 	(zTemp0),y
.27f0	d0 0a		bne $27fc			bne 	_CFNotOptimised
.27f2	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.27f4	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27f6	d0 04		bne $27fc			bne 	_CFNotOptimised
.27f8	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.27fa	85 0b		sta $0b				sta 	IFR0+IExp
.27fc					_CFNotOptimised:
.27fc	7a		ply				ply
.27fd					_CFWriteStep:
.27fd	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.27ff	a9 06		lda #$06			lda 	#6
.2801	20 1f 28	jsr $281f			jsr 	CFSaveR0X
.2804	20 77 2c	jsr $2c77			jsr 	STKSaveCodePosition 		; save loop position
.2807	60		rts				rts
.2808					CFLoadR0X:
.2808	5a		phy				phy
.2809	a8		tay				tay
.280a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.280c	95 00		sta $00,x			sta 	IM0,x
.280e	c8		iny				iny
.280f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2811	95 01		sta $01,x			sta 	IM1,x
.2813	c8		iny				iny
.2814	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2816	95 02		sta $02,x			sta 	IM2,x
.2818	c8		iny				iny
.2819	b1 2c		lda ($2c),y			lda 	(basicStack),y
.281b	95 03		sta $03,x			sta 	IExp,x
.281d	7a		ply				ply
.281e	60		rts				rts
.281f					CFSaveR0X:
.281f	5a		phy				phy
.2820	a8		tay				tay
.2821	b5 00		lda $00,x			lda 	IM0,x
.2823	91 2c		sta ($2c),y			sta 	(basicStack),y
.2825	c8		iny				iny
.2826	b5 01		lda $01,x			lda 	IM1,x
.2828	91 2c		sta ($2c),y			sta 	(basicStack),y
.282a	c8		iny				iny
.282b	b5 02		lda $02,x			lda 	IM2,x
.282d	91 2c		sta ($2c),y			sta 	(basicStack),y
.282f	c8		iny				iny
.2830	b5 03		lda $03,x			lda 	IExp,x
.2832	91 2c		sta ($2c),y			sta 	(basicStack),y
.2834	7a		ply				ply
.2835	60		rts				rts
.2836					Command_NEXT:
.2836	a9 37		lda #$37			lda 	#STK_FOR
.2838	20 6f 2c	jsr $2c6f			jsr 	StackCheckFrame
.283b	5a		phy				phy 								; check optimised loop
.283c	a0 09		ldy #$09			ldy 	#9
.283e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2840	7a		ply				ply
.2841	0a		asl a				asl 	a
.2842	b0 35		bcs $2879			bcs 	_CNOptimised
.2844	20 b1 28	jsr $28b1			jsr 	_CNLoadValue 				; load index value to R0.
.2847	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2849	a9 06		lda #$06			lda 	#6
.284b	20 08 28	jsr $2808			jsr 	CFLoadR0X
.284e	20 c0 30	jsr $30c0			jsr 	IFloatAdd 					; add them together and write back.
.2851	20 d4 28	jsr $28d4			jsr 	_CNSaveValue
.2854	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2856	a2 0c		ldx #$0c			ldx 	#IFR1
.2858	20 08 28	jsr $2808			jsr 	CFLoadR0X
.285b	20 97 33	jsr $3397			jsr 	IFloatCompare 				; compare terminal vs current
.285e	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2860	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.2863	f0 10		beq $2875			beq 	_CNLoopBack
.2865	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2867	5a		phy				phy
.2868	a0 09		ldy #$09			ldy 	#6+IExp
.286a	51 2c		eor ($2c),y			eor 	(basicStack),y
.286c	7a		ply				ply
.286d	29 40		and #$40			and 	#IFSign
.286f	f0 04		beq $2875			beq 	_CNLoopBack
.2871					_CNExitLoop:
.2871	20 61 2c	jsr $2c61			jsr 	StackClose		 			; return
.2874	60		rts				rts
.2875					_CNLoopBack:
.2875	20 89 2c	jsr $2c89			jsr 	STKLoadCodePosition 		; loop back
.2878	60		rts				rts
.2879					_CNOptimised:
.2879	5a		phy				phy
.287a	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.287c	b1 2c		lda ($2c),y			lda 	(basicStack),y
.287e	85 28		sta $28				sta 	zTemp2
.2880	c8		iny				iny
.2881	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2883	85 29		sta $29				sta 	zTemp2+1
.2885	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2887					_CNIncrement:
.2887	c8		iny				iny
.2888	b1 28		lda ($28),y			lda 	(zTemp2),y
.288a	1a		inc a				inc 	a
.288b	91 28		sta ($28),y			sta 	(zTemp2),y
.288d	f0 f8		beq $2887			beq 	_CNIncrement
.288f	18		clc				clc 								; point zTemp0 to terminal value
.2890	a5 2c		lda $2c				lda 	basicStack
.2892	69 0a		adc #$0a			adc 	#10
.2894	85 24		sta $24				sta 	zTemp0
.2896	a5 2d		lda $2d				lda 	basicStack+1
.2898	69 00		adc #$00			adc 	#0
.289a	85 25		sta $25				sta 	zTemp0+1
.289c	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.289e	18		clc				clc 								; borrow 1, we want > not >=
.289f	b2 28		lda ($28)			lda 	(zTemp2)
.28a1	f2 24		sbc ($24)			sbc 	(zTemp0)
.28a3	b1 28		lda ($28),y			lda 	(zTemp2),y
.28a5	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.28a7	c8		iny				iny
.28a8	b1 28		lda ($28),y			lda 	(zTemp2),y
.28aa	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.28ac	7a		ply				ply
.28ad	b0 c2		bcs $2871			bcs 	_CNExitLoop
.28af	80 c4		bra $2875			bra 	_CNLoopBack
.28b1					_CNLoadValue:
.28b1	5a		phy				phy
.28b2	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.28b4	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28b6	85 28		sta $28				sta 	zTemp2
.28b8	c8		iny				iny
.28b9	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28bb	85 29		sta $29				sta 	zTemp2+1
.28bd	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.28bf	b1 28		lda ($28),y			lda 	(zTemp2),y
.28c1	85 08		sta $08				sta 	IFR0+IM0
.28c3	c8		iny				iny
.28c4	b1 28		lda ($28),y			lda 	(zTemp2),y
.28c6	85 09		sta $09				sta 	IFR0+IM1
.28c8	c8		iny				iny
.28c9	b1 28		lda ($28),y			lda 	(zTemp2),y
.28cb	85 0a		sta $0a				sta 	IFR0+IM2
.28cd	c8		iny				iny
.28ce	b1 28		lda ($28),y			lda 	(zTemp2),y
.28d0	85 0b		sta $0b				sta 	IFR0+IExp
.28d2	7a		ply				ply
.28d3	60		rts				rts
.28d4					_CNSaveValue:
.28d4	5a		phy				phy
.28d5	a0 00		ldy #$00			ldy 	#0
.28d7	a5 08		lda $08				lda 	IFR0+IM0
.28d9	91 28		sta ($28),y			sta 	(zTemp2),y
.28db	c8		iny				iny
.28dc	a5 09		lda $09				lda 	IFR0+IM1
.28de	91 28		sta ($28),y			sta 	(zTemp2),y
.28e0	c8		iny				iny
.28e1	a5 0a		lda $0a				lda 	IFR0+IM2
.28e3	91 28		sta ($28),y			sta 	(zTemp2),y
.28e5	c8		iny				iny
.28e6	a5 0b		lda $0b				lda 	IFR0+IExp
.28e8	91 28		sta ($28),y			sta 	(zTemp2),y
.28ea	7a		ply				ply
.28eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.28ec					Command_GOSUB:
.28ec	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; get line number
.28ef	a9 52		lda #$52			lda 	#STK_GOSUB
.28f1	20 44 2c	jsr $2c44			jsr 	StackOpen
.28f4	20 77 2c	jsr $2c77			jsr 	STKSaveCodePosition 		; save return address on stack.
.28f7	4c d4 14	jmp $14d4			jmp 	GotoR0
.28fa					Command_RETURN:
.28fa	a9 52		lda #$52			lda 	#STK_GOSUB
.28fc	20 6f 2c	jsr $2c6f			jsr 	StackCheckFrame
.28ff	20 89 2c	jsr $2c89			jsr 	STKLoadCodePosition 		; return
.2902	20 61 2c	jsr $2c61			jsr 	StackClose
.2905	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2906					IfCommand:
.2906	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; Get the if test.
.2909	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.290b	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.290d	d0 0c		bne $291b			bne 	_IfStructured 				; we still support it.
.290f	c8		iny				iny 								; consume THEN
.2910	a2 08		ldx #$08			ldx 	#IFR0
.2912	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; is it zero
.2915	f0 01		beq $2918			beq 	_IfFail 					; if fail, go to next line
.2917	60		rts				rts 								; if THEN just continue
.2918					_IfFail:
.2918	4c 0c 18	jmp $180c			jmp 	RUNEndOfLine
.291b					_IfStructured:
.291b	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; is it zero
.291e	d0 07		bne $2927			bne 	_IfExit 					; if not, then continue normally.
.2920	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2922	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2924	20 50 29	jsr $2950			jsr 	ScanForward 				; and run from there
.2927					_IfExit:
.2927	60		rts				rts
.2928					ElseCode:
.2928	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.292a	aa		tax				tax 								; so just go to the structure exit
.292b	20 50 29	jsr $2950			jsr 	ScanForward
.292e	60		rts				rts
.292f					EndIf:
.292f	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2930					Command_REPEAT:
.2930	a9 02		lda #$02			lda 	#STK_REPEAT
.2932	20 44 2c	jsr $2c44			jsr 	StackOpen
.2935	20 77 2c	jsr $2c77			jsr 	STKSaveCodePosition 		; save loop position
.2938	60		rts				rts
.2939					Command_UNTIL:
.2939	a9 02		lda #$02			lda 	#STK_REPEAT
.293b	20 6f 2c	jsr $2c6f			jsr 	StackCheckFrame
.293e	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; work out the test
.2941	a2 08		ldx #$08			ldx 	#IFR0
.2943	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; check if zero
.2946	f0 04		beq $294c			beq 	_CULoopBack 				; if so keep looping
.2948	20 61 2c	jsr $2c61			jsr 	StackClose		 			; return
.294b	60		rts				rts
.294c					_CULoopBack:
.294c	20 89 2c	jsr $2c89			jsr 	STKLoadCodePosition 		; loop back
.294f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2950					ScanForward:
.2950	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.2952	86 25		stx $25				stx 	zTemp0+1
.2954	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.2956					_ScanForwardLoop:
.2956	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2958	d0 0a		bne $2964			bne 	_ScanNoCheck
.295a	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.295c	c5 24		cmp $24				cmp 	zTemp0
.295e	f0 49		beq $29a9			beq 	_ScanExit
.2960	c5 25		cmp $25				cmp 	zTemp0+1
.2962	f0 45		beq $29a9			beq 	_ScanExit
.2964					_ScanNoCheck:
.2964	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2966	c8		iny				iny
.2967	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2969	f0 37		beq $29a2			beq		_ScanDataItem
.296b	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.296d	f0 33		beq $29a2			beq 	_ScanDataItem
.296f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2971	f0 1b		beq $298e			beq 	_ScanNextLine
.2973	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2975	d0 01		bne $2978			bne 	_ScanNoShift
.2977	c8		iny				iny
.2978					_ScanNoShift:
.2978	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.297a	b0 da		bcs $2956			bcs 	_ScanForwardLoop
.297c	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.297e	90 d6		bcc $2956			bcc 	_ScanForwardLoop
.2980	aa		tax				tax 								; access the table to get the adjustment.
.2981	18		clc				clc
.2982	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.2984	7d 66 1e	adc $1e66,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2987	85 26		sta $26				sta 	zTemp1
.2989	10 cb		bpl $2956			bpl		_ScanForwardLoop 			; error if -ve ?
.298b	4c cc 2a	jmp $2acc		jmp	ErrorV_structure
.298e					_ScanNextLine:
.298e	18		clc				clc	 								; forward to next line.
.298f	b2 18		lda ($18)			lda 	(codePtr)
.2991	65 18		adc $18				adc 	codePtr
.2993	85 18		sta $18				sta 	codePtr
.2995	90 02		bcc $2999			bcc 	_ScanNoCarry
.2997	e6 19		inc $19				inc 	codePtr+1
.2999					_ScanNoCarry:
.2999	a0 03		ldy #$03			ldy 	#3
.299b	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.299d	d0 b7		bne $2956			bne 	_ScanForwardLoop
.299f	4c cc 2a	jmp $2acc		jmp	ErrorV_structure
.29a2					_ScanDataItem:
.29a2	98		tya				tya
.29a3	38		sec				sec
.29a4	71 18		adc ($18),y			adc 	(codePtr),y
.29a6	a8		tay				tay
.29a7	80 ad		bra $2956			bra 	_ScanForwardLoop
.29a9					_ScanExit:
.29a9	c8		iny				iny 								; consume final token.
.29aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.29ab					ScanProcedures:
.29ab	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.29ad	48		pha				pha
.29ae	a5 19		lda $19				lda 	codePtr+1
.29b0	48		pha				pha
.29b1	5a		phy				phy
.29b2	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.29b5	85 19		sta $19				sta 	codePtr+1
.29b7	64 18		stz $18				stz 	codePtr
.29b9					_SPLoop:
.29b9	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.29bb	f0 18		beq $29d5			beq 	_SPExit
.29bd	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.29bf	b1 18		lda ($18),y			lda 	(codePtr),y
.29c1	c9 88		cmp #$88			cmp 	#PR_PROC
.29c3	d0 03		bne $29c8			bne 	_SPNext
.29c5	20 dd 29	jsr $29dd			jsr 	_SPSetupRecord
.29c8					_SPNext:
.29c8	18		clc				clc 								; forward to next
.29c9	b2 18		lda ($18)			lda 	(codePtr)
.29cb	65 18		adc $18				adc 	codePtr
.29cd	85 18		sta $18				sta 	codePtr
.29cf	90 e8		bcc $29b9			bcc 	_SPLoop
.29d1	e6 19		inc $19				inc 	codePtr+1
.29d3	80 e4		bra $29b9			bra 	_SPLoop
.29d5					_SPExit:
.29d5	7a		ply				ply
.29d6	68		pla				pla
.29d7	85 19		sta $19				sta 	codePtr+1
.29d9	68		pla				pla
.29da	85 18		sta $18				sta 	codePtr
.29dc	60		rts				rts
.29dd					_SPSetupRecord:
.29dd	c8		iny				iny 								; check identifier follows
.29de	b1 18		lda ($18),y			lda 	(codePtr),y
.29e0	29 c0		and #$c0			and 	#$C0
.29e2	c9 40		cmp #$40			cmp 	#$40
.29e4	d0 27		bne $2a0d			bne 	_SPSyntax
.29e6	20 0b 30	jsr $300b			jsr 	VARGetInfo 					; get the information
.29e9	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen 				; check right bracket follows.
.29ec	20 bd 2f	jsr $2fbd			jsr 	VARFind 					; already exists ?
.29ef	b0 1f		bcs $2a10			bcs 	_SPUsed 					; error !
.29f1	20 69 2f	jsr $2f69			jsr 	VARCreate 					; create, XA points to the data.
.29f4	85 24		sta $24				sta 	zTemp0
.29f6	86 25		stx $25				stx 	zTemp0+1
.29f8	5a		phy				phy 								; save Y pos on stack
.29f9	a0 01		ldy #$01			ldy 	#1
.29fb	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.29fd	92 24		sta ($24)			sta 	(zTemp0)
.29ff	a5 19		lda $19				lda 	codePtr+1
.2a01	91 24		sta ($24),y			sta 	(zTemp0),y
.2a03	c8		iny				iny
.2a04	68		pla				pla
.2a05	91 24		sta ($24),y			sta 	(zTemp0),y
.2a07	c8		iny				iny
.2a08	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2a0a	91 24		sta ($24),y			sta 	(zTemp0),y
.2a0c	60		rts				rts
.2a0d					_SPSyntax:
.2a0d	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.2a10					_SPUsed:
.2a10	4c 97 2b	jmp $2b97		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2a13					Command_WHILE:
.2a13	5a		phy				phy 								; save position of the test
.2a14	20 4b 1a	jsr $1a4b			jsr 	EXPEvalNumber 				; work out the while test.
.2a17	a2 08		ldx #$08			ldx 	#IFR0
.2a19	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; check if zero
.2a1c	f0 0e		beq $2a2c			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2a1e	98		tya				tya 								; position *after* test.
.2a1f	7a		ply				ply 								; restore position before test, at WHILE
.2a20	88		dey				dey 								; so we execute the WHILE command again.
.2a21	48		pha				pha 								; push after test on the stack
.2a22	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2a24	20 44 2c	jsr $2c44			jsr 	StackOpen
.2a27	20 77 2c	jsr $2c77			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2a2a	7a		ply				ply 								; restore the position *after* the test
.2a2b	60		rts				rts
.2a2c					_WHExitLoop:
.2a2c	68		pla				pla 								; throw post loop position
.2a2d	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2a2f	aa		tax				tax
.2a30	20 50 29	jsr $2950			jsr 	ScanForward
.2a33	60		rts				rts
.2a34					Command_WEND:
.2a34	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2a36	20 6f 2c	jsr $2c6f			jsr 	StackCheckFrame
.2a39	20 89 2c	jsr $2c89			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2a3c	20 61 2c	jsr $2c61			jsr 	StackClose		 			; erase the frame
.2a3f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2a40					ErrorV_syntax:
.2a40	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2a43	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2a4b	45 72 72 6f 72 00
.2a51					ErrorV_range:
.2a51	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2a54	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2a5c	52 61 6e 67 65 00
.2a62					ErrorV_value:
.2a62	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2a65	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2a6d	75 65 00
.2a70					ErrorV_type:
.2a70	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2a73	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2a7b	73 6d 61 74 63 68 00
.2a82					ErrorV_unimplemented:
.2a82	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2a85	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2a8d	6c 65 6d 65 6e 74 65 64 00
.2a96					ErrorV_assert:
.2a96	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2a99	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2aa1	46 61 69 6c 00
.2aa6					ErrorV_internal:
.2aa6	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2aa9	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2ab1	6c 20 45 72 72 6f 72 00
.2ab9					ErrorV_divzero:
.2ab9	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2abc	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2ac4	42 79 20 5a 65 72 6f 00
.2acc					ErrorV_structure:
.2acc	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2acf	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2ad7	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2ae4					ErrorV_stop:
.2ae4	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2ae7	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2aef	20 53 74 6f 70 70 65 64 00
.2af8					ErrorV_data:
.2af8	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2afb	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2b03	44 61 74 61 00
.2b08					ErrorV_redefine:
.2b08	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b0b	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2b13	65 64 65 66 69 6e 65 64 00
.2b1c					ErrorV_index:
.2b1c	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b1f	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2b27	61 79 20 49 6e 64 65 78 00
.2b30					ErrorV_memory:
.2b30	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b33	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2b3b	4d 65 6d 6f 72 79 00
.2b42					ErrorV_uninitialised:
.2b42	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b45	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2b4d	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2b5d					ErrorV_string:
.2b5d	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b60	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2b68	69 6e 67 20 4c 65 6e 67 74 68 00
.2b73					ErrorV_variable:
.2b73	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b76	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2b7e	65 20 4d 69 73 73 69 6e 67 00
.2b88					ErrorV_stack:
.2b88	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b8b	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2b93	75 6c 6c 00
.2b97					ErrorV_dupproc:
.2b97	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2b9a	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2ba2	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2bb2	65 64 00
.2bb5					ErrorV_unknown:
.2bb5	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2bb8	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2bc0	20 50 72 6f 63 65 64 75 72 65 00
.2bcb					ErrorV_break:
.2bcb	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2bce	05 42 72 65 61 6b 00			.text	5,"Break",0
.2bd5					ErrorV_line:
.2bd5	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2bd8	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2be0	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2bed					ErrorV_fnf:
.2bed	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2bf0	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2bf8	74 20 46 6f 75 6e 64 00
.2c00					ErrorV_full:
.2c00	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2c03	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2c0b	20 46 75 6c 6c 00
.2c11					ErrorV_align:
.2c11	20 59 2e	jsr $2e59		jsr	ErrorHandler
>2c14	0d 4c 61 62 65 6c 20 43			.text	13,"Label Changed",0
>2c1c	68 61 6e 67 65 64 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2c23					ERRCheckLParen:
.2c23	b1 18		lda ($18),y			lda 	(codePtr),y
.2c25	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2c27	d0 18		bne $2c41			bne 	ERRSyntaxError
.2c29	c8		iny				iny
.2c2a	60		rts				rts
.2c2b					ERRCheckRParen:
.2c2b	b1 18		lda ($18),y			lda 	(codePtr),y
.2c2d	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2c2f	d0 10		bne $2c41			bne 	ERRSyntaxError
.2c31	c8		iny				iny
.2c32	60		rts				rts
.2c33					ERRCheckComma:
.2c33	b1 18		lda ($18),y			lda 	(codePtr),y
.2c35	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c37	d0 08		bne $2c41			bne 	ERRSyntaxError
.2c39	c8		iny				iny
.2c3a	60		rts				rts
.2c3b					ERRCheckA:
.2c3b	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2c3d	d0 02		bne $2c41			bne 	ERRSyntaxError
.2c3f	c8		iny				iny
.2c40	60		rts				rts
.2c41					ERRSyntaxError:
.2c41	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2c44					StackOpen:
.2c44	48		pha				pha 								; save frame byte
.2c45	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2c47	0a		asl a				asl 	a 							; claim twice this for storage
.2c48	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2c4a	38		sec				sec 								; so basically subtracting from
.2c4b	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2c4d	85 2c		sta $2c				sta 	basicStack
.2c4f	b0 09		bcs $2c5a			bcs 	_SONoBorrow
.2c51	c6 2d		dec $2d				dec 	basicStack+1
.2c53	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2c55	cd 24 06	cmp $0624			cmp 	basicStackEnd
.2c58	f0 04		beq $2c5e			beq 	_SOMemory
.2c5a					_SONoBorrow:
.2c5a	68		pla				pla 								; get marker back and write at TOS
.2c5b	92 2c		sta ($2c)			sta 	(basicStack)
.2c5d	60		rts				rts
.2c5e					_SOMemory:
.2c5e	4c 88 2b	jmp $2b88		jmp	ErrorV_stack
.2c61					StackClose:
.2c61	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2c63	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2c65	0a		asl a				asl 	a 							; claim twice this.
.2c66	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2c68	85 2c		sta $2c				sta 	basicStack
.2c6a	90 02		bcc $2c6e			bcc 	_SCExit
.2c6c	e6 2d		inc $2d				inc 	basicStack+1
.2c6e					_SCExit:
.2c6e	60		rts				rts
.2c6f					StackCheckFrame:
.2c6f	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2c71	d0 01		bne $2c74			bne 	_SCFError 					; different, we have structures mixed up
.2c73	60		rts				rts
.2c74					_SCFError:
.2c74	4c cc 2a	jmp $2acc		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2c77					STKSaveCodePosition:
.2c77	5a		phy				phy
.2c78	98		tya				tya 								; save Y at offset 1.
.2c79	a0 01		ldy #$01			ldy 	#1
.2c7b	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c7d	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2c7f	c8		iny				iny
.2c80	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c82	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2c84	c8		iny				iny
.2c85	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c87	7a		ply				ply
.2c88	60		rts				rts
.2c89					STKLoadCodePosition:
.2c89	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2c8b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2c8d	85 19		sta $19				sta 	codePtr+1
.2c8f	88		dey				dey
.2c90	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2c92	85 18		sta $18				sta 	codePtr
.2c94	88		dey				dey
.2c95	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2c97	a8		tay				tay
.2c98	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2c99					StackReset:
.2c99	48		pha				pha 								; save top of memory
.2c9a	3a		dec a				dec 	a  							; end of stack = previous byte
.2c9b	85 2d		sta $2d				sta 	basicStack+1
.2c9d	a9 ff		lda #$ff			lda 	#$FF
.2c9f	85 2c		sta $2c				sta 	basicStack
.2ca1	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2ca3	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2ca5	68		pla				pla 								; allocate pages for stack.
.2ca6	38		sec				sec
.2ca7	e9 02		sbc #$02			sbc 	#STACKPAGES
.2ca9	8d 24 06	sta $0624			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2cac	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0624					basicStackEnd:
>0624							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2cad					StringConcrete:
.2cad	5a		phy				phy 								; save position on stack
.2cae	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2cb0	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2cb2	b0 41		bcs $2cf5			bcs 	_SALengthError
.2cb4	18		clc				clc 								; length of the new string
.2cb5	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2cb7	90 02		bcc $2cbb			bcc 	_SAHaveLength
.2cb9	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2cbb					_SAHaveLength:
.2cbb	48		pha				pha 								; save length to be allocated for concreting.
.2cbc	38		sec				sec
.2cbd	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2cbf	6d 26 06	adc $0626			adc 	stringMemory
.2cc2	8d 26 06	sta $0626			sta 	stringMemory
.2cc5	85 28		sta $28				sta 	zTemp2 						; update storage address
.2cc7	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2cc9	6d 27 06	adc $0627			adc 	stringMemory+1
.2ccc	8d 27 06	sta $0627			sta 	stringMemory+1
.2ccf	85 29		sta $29				sta 	zTemp2+1
.2cd1	68		pla				pla 								; save length allocated in +0
.2cd2	92 28		sta ($28)			sta 	(zTemp2)
.2cd4	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2cd6	a0 01		ldy #$01			ldy 	#1
.2cd8	91 28		sta ($28),y			sta 	(zTemp2),y
.2cda					_SACopyNewString:
.2cda	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2cdc	a0 02		ldy #$02			ldy 	#2
.2cde	91 28		sta ($28),y			sta 	(zTemp2),y
.2ce0	aa		tax				tax 								; bytes to copy
.2ce1	f0 0c		beq $2cef			beq 	_SACopyExit
.2ce3	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2ce5					_SACopyNSLoop:
.2ce5	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2ce7	c8		iny				iny 								; write two on in string storage
.2ce8	c8		iny				iny
.2ce9	91 28		sta ($28),y			sta 	(zTemp2),y
.2ceb	88		dey				dey
.2cec	ca		dex				dex									; until copied all the string lengths.
.2ced	d0 f6		bne $2ce5			bne 	_SACopyNSLoop
.2cef					_SACopyExit:
.2cef	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2cf1	a5 28		lda $28				lda 	zTemp2
.2cf3	7a		ply				ply
.2cf4	60		rts				rts
.2cf5					_SALengthError:
.2cf5	4c 5d 2b	jmp $2b5d		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2cf8					StringSystemInitialise:
.2cf8	3a		dec a				dec 	a 							; make last byte of previous page.
.2cf9	8d 27 06	sta $0627			sta 	stringMemory+1
.2cfc	85 25		sta $25				sta 	zTemp0+1
.2cfe	a9 ff		lda #$ff			lda 	#$FF
.2d00	8d 26 06	sta $0626			sta 	stringMemory
.2d03	85 24		sta $24				sta 	zTemp0
.2d05	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2d07	92 24		sta ($24)			sta 	(zTemp0)
.2d09	60		rts				rts
.2d0a					StringSpaceInitialise:
.2d0a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2d0c	8d 25 06	sta $0625			sta 	stringInitialised
.2d0f	ad 26 06	lda $0626			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2d12	8d 28 06	sta $0628			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2d15	ad 27 06	lda $0627			lda 	stringMemory+1
.2d18	3a		dec a				dec 	a
.2d19	8d 29 06	sta $0629			sta 	stringTempPointer+1
.2d1c	20 7e 13	jsr $137e			jsr 	ClearCheckMemory
.2d1f	60		rts				rts
.2d20					StringTempAllocate:
.2d20	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2d22	b0 2e		bcs $2d52			bcs 	_STALength
.2d24	2c 25 06	bit $0625			bit 	stringInitialised 			; already initialised
.2d27	30 05		bmi $2d2e			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2d29	48		pha				pha 								; save value to subtract.
.2d2a	20 0a 2d	jsr $2d0a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2d2d	68		pla				pla 								; restore it
.2d2e					_STAAllocate:
.2d2e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2d30	18		clc				clc  								; deliberate allows one more
.2d31	6d 28 06	adc $0628			adc 	stringTempPointer 			; subtract from temp pointer
.2d34	8d 28 06	sta $0628			sta 	stringTempPointer
.2d37	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2d39	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2d3b	ad 29 06	lda $0629			lda 	stringTempPointer+1
.2d3e	69 ff		adc #$ff			adc 	#$FF
.2d40	8d 29 06	sta $0629			sta 	stringTempPointer+1
.2d43	85 2f		sta $2f				sta 	zsTemp+1
.2d45	85 09		sta $09				sta 	IFR0+IM1
.2d47	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2d49	a9 80		lda #$80			lda 	#$80
.2d4b	85 0b		sta $0b				sta 	IFR0+IExp
.2d4d	a9 00		lda #$00			lda 	#0 							; clear the target string
.2d4f	92 2e		sta ($2e)			sta 	(zsTemp)
.2d51	60		rts				rts
.2d52					_STALength:
.2d52	4c 5d 2b	jmp $2b5d		jmp	ErrorV_string
.2d55					StringTempWrite:
.2d55	5a		phy				phy
.2d56	48		pha				pha
.2d57	b2 2e		lda ($2e)			lda 	(zsTemp)
.2d59	1a		inc a				inc 	a
.2d5a	92 2e		sta ($2e)			sta 	(zsTemp)
.2d5c	a8		tay				tay
.2d5d	68		pla				pla
.2d5e	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2d60	7a		ply				ply
.2d61	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0625					stringInitialised:
>0625							.fill 	1
.0626					stringMemory:
>0626							.fill 	2
.0628					stringTempPointer:
>0628							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2d62					Command_DIR:
.2d62	5a		phy				phy
.2d63	38		sec				sec 								; reset read
.2d64	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2d67	18		clc		_CDLoop:clc
.2d68	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2d6b	b0 27		bcs $2d94			bcs 	_CDExit 					; no more
.2d6d	86 24		stx $24				stx 	zTemp0
.2d6f	84 25		sty $25				sty 	zTemp0+1
.2d71	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2d74					_CDPad:
.2d74	a9 20		lda #$20			lda 	#32
.2d76	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2d79	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2d7c	e0 10		cpx #$10			cpx 	#16
.2d7e	90 f4		bcc $2d74			bcc 	_CDPad
.2d80	a0 11		ldy #$11			ldy 	#17
.2d82	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d84	aa		tax				tax
.2d85	88		dey				dey
.2d86	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d88	20 82 2e	jsr $2e82			jsr 	WriteIntXA
.2d8b	a2 96		ldx #$96			ldx 	#_CDTail & $FF
.2d8d	a0 2d		ldy #$2d			ldy 	#_CDTail >> 8
.2d8f	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2d92	80 d3		bra $2d67			bra 	_CDLoop
.2d94	7a		ply		_CDExit:ply
.2d95	60		rts				rts
.2d96					_CDTail:
>2d96	08						.byte 	_CDTail2-*-1
>2d97	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2d9f					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2d9f					Command_ERASE:
.2d9f	20 b1 2d	jsr $2db1			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2da2	5a		phy				phy
.2da3	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2da5	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2da7	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2daa	7a		ply				ply
.2dab	b0 01		bcs $2dae			bcs 	_CEFail
.2dad	60		rts				rts
.2dae					_CEFail:
.2dae	4c ed 2b	jmp $2bed		jmp	ErrorV_fnf
.2db1					FileSetupBlock:
.2db1	20 75 1a	jsr $1a75			jsr 	EXPEvalString 					; string to R0, zTemp0
.2db4	a5 24		lda $24				lda 	zTemp0 							; address to name
.2db6	8d 2a 06	sta $062a			sta 	FSBBlock
.2db9	a5 25		lda $25				lda 	zTemp0+1
.2dbb	8d 2b 06	sta $062b			sta 	FSBBlock+1 						; zero the rest.
.2dbe	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2dc1	9c 2d 06	stz $062d			stz 	FSBBlock+3
.2dc4	9c 2e 06	stz $062e			stz 	FSBBlock+4
.2dc7	9c 2f 06	stz $062f			stz 	FSBBlock+5
.2dca	60		rts				rts
.062a					FSBBlock:
>062a							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2dcb					Command_LOAD:
.2dcb	20 b1 2d	jsr $2db1			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2dce	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; set load address
.2dd1	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2dd4	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2dd7	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2dd9	48		pha				pha
.2dda	20 f7 2d	jsr $2df7			jsr	 	FileCheckSecondParam
.2ddd	5a		phy				phy
.2dde	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2de0	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2de2	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2de5	7a		ply				ply
.2de6	b0 0c		bcs $2df4			bcs 	_CLFail
.2de8	68		pla				pla 								; load program
.2de9	c9 99		cmp #$99			cmp 	#PR_COMMA
.2deb	f0 06		beq $2df3			beq 	_CLNoClear
.2ded	20 38 13	jsr $1338			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2df0	4c a1 2e	jmp $2ea1			jmp 	WarmStart 					; and warm start
.2df3					_CLNoClear:
.2df3	60		rts				rts
.2df4					_CLFail:
.2df4	4c ed 2b	jmp $2bed		jmp	ErrorV_fnf
.2df7					FileCheckSecondParam:
.2df7	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2df9	c9 99		cmp #$99			cmp 	#PR_COMMA
.2dfb	d0 0e		bne $2e0b			bne 	_FCSPExit
.2dfd	c8		iny				iny 								; consume
.2dfe	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; get address
.2e01	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2e03	8d 2c 06	sta $062c			sta 	FSBBlock+2
.2e06	a5 09		lda $09				lda 	IFR0+IM1
.2e08	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2e0b					_FCSPExit:
.2e0b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2e0c					Command_SAVE:
.2e0c	20 b1 2d	jsr $2db1			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2e0f	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2e11	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2e13	f0 22		beq $2e37			beq 	_CLSaveBlock 				; save "Name",from,size
.2e15	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; set load address
.2e18	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2e1b	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2e1e	20 0f 24	jsr $240f			jsr		PGMEndProgram 				; end of program -> zTemp0
.2e21	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2e23	d0 02		bne $2e27			bne 	_CLNoCarry
.2e25	e6 25		inc $25				inc 	zTemp0+1
.2e27					_CLNoCarry:
.2e27	a5 24		lda $24				lda 	zTemp0
.2e29	8d 2e 06	sta $062e			sta 	FSBBlock+4
.2e2c	38		sec				sec
.2e2d	a5 25		lda $25				lda 	zTemp0+1
.2e2f	ed 2d 06	sbc $062d			sbc 	FSBBlock+3
.2e32	8d 2f 06	sta $062f			sta 	FSBBlock+5
.2e35	80 13		bra $2e4a			bra 	_CSSave
.2e37					_CLSaveBlock:
.2e37	20 f7 2d	jsr $2df7			jsr 	FileCheckSecondParam 		; the address to save from.
.2e3a	20 33 2c	jsr $2c33			jsr 	ERRCheckComma
.2e3d	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; get size
.2e40	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2e42	8d 2e 06	sta $062e			sta 	FSBBlock+4
.2e45	a5 09		lda $09				lda 	IFR0+IM1
.2e47	8d 2f 06	sta $062f			sta 	FSBBlock+5
.2e4a					_CSSave:
.2e4a	5a		phy				phy
.2e4b	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2e4d	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2e4f	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2e52	7a		ply				ply
.2e53	b0 01		bcs $2e56			bcs 	_CSFail
.2e55	60		rts				rts
.2e56					_CSFail:
.2e56	4c 00 2c	jmp $2c00		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2e59					ErrorHandler:
.2e59	fa		plx				plx 								; get address of msg
.2e5a	7a		ply				ply
.2e5b	e8		inx				inx 								; bump past RTS
.2e5c	d0 01		bne $2e5f			bne 	_EHNoInc
.2e5e	c8		iny				iny
.2e5f					_EHNoInc:
.2e5f	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2e62	ad 30 06	lda $0630			lda 	ERRLine 					; direct command ?
.2e65	0d 31 06	ora $0631			ora 	ERRLine+1
.2e68	f0 10		beq $2e7a			beq 	_EHNoNumber
.2e6a	a2 7d		ldx #$7d			ldx 	#_EHAtMsg & $FF
.2e6c	a0 2e		ldy #$2e			ldy 	#_EHAtMsg >> 8
.2e6e	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2e71	ad 30 06	lda $0630			lda 	ERRLine 					; line number -> XA
.2e74	ae 31 06	ldx $0631			ldx 	ERRLine+1
.2e77	20 82 2e	jsr $2e82			jsr 	WriteIntXA
.2e7a					_EHNoNumber:
.2e7a	4c ab 2e	jmp $2eab			jmp 	WarmStartNewLine
.2e7d					_EHAtMsg:
>2e7d	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2e82					_EHAtMsg1:
.2e82					WriteIntXA:
.2e82	da		phx				phx
.2e83	48		pha				pha
.2e84	a2 08		ldx #$08			ldx 	#IFR0
.2e86	20 17 36	jsr $3617			jsr 	IFloatPushRx
.2e89	68		pla				pla
.2e8a	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.2e8d	68		pla				pla
.2e8e	85 09		sta $09				sta 	IFR0+IM1
.2e90	a9 0a		lda #$0a			lda 	#10 						; decimal
.2e92	20 6a 34	jsr $346a			jsr 	IFloatIntegerToStringR0	 	; convert
.2e95	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2e98	a2 08		ldx #$08			ldx 	#IFR0
.2e9a	20 38 36	jsr $3638			jsr 	IFloatPullRx
.2e9d	60		rts				rts
.2e9e					NotImplemented:
.2e9e	4c 82 2a	jmp $2a82		jmp	ErrorV_unimplemented
.0630					ERRLine:
>0630							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2ea1					WarmStart:
.2ea1	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2ea3	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ea6	a9 6b		lda #$6b			lda 	#"k"
.2ea8	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2eab					WarmStartNewLine:
.2eab	a9 0d		lda #$0d			lda 	#13
.2ead	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2eb0					WarmStartNoPrompt:
.2eb0	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2eb2	9a		txs				txs
.2eb3	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2eb6	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2eb7	d0 01		bne $2eba			bne 	_WSSkip
.2eb9	c8		iny				iny
.2eba					_WSSkip:
.2eba	86 28		stx $28				stx 	zTemp2 						; save address
.2ebc	84 29		sty $29				sty 	zTemp2+1
.2ebe	b2 28		lda ($28)			lda 	(zTemp2)
.2ec0	f0 ee		beq $2eb0			beq 	WarmStartNoPrompt 			; ignore empty line.
.2ec2	a2 f4		ldx #$f4			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2ec4	a0 2e		ldy #$2e			ldy 	#TOKGetCharacter >> 8
.2ec6	38		sec				sec
.2ec7	20 81 24	jsr $2481			jsr 	TOKTokenise
.2eca	b0 25		bcs $2ef1			bcs 	_WSSyntax
.2ecc	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2ecf	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2ed2	d0 0b		bne $2edf			bne 	_WSLineEdit
.2ed4	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2ed6	85 18		sta $18				sta 	codePtr
.2ed8	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2eda	85 19		sta $19				sta 	codePtr+1
.2edc	4c 17 18	jmp $1817			jmp 	RUNNewLine
.2edf					_WSLineEdit:
.2edf	20 5c 23	jsr $235c			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2ee2	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2ee5	c9 04		cmp #$04			cmp 	#4
.2ee7	f0 03		beq $2eec			beq 	_WSNoInsert
.2ee9	20 a6 23	jsr $23a6			jsr 	PGMInsertLine				; if not, maybe insert
.2eec					_WSNoInsert:
.2eec	20 38 13	jsr $1338			jsr 	ClearCode 					; clear variables etc.
.2eef	80 bf		bra $2eb0			bra 	WarmStartNoPrompt
.2ef1					_WSSyntax:
.2ef1	4c 40 2a	jmp $2a40		jmp	ErrorV_syntax
.2ef4					TOKGetCharacter:
.2ef4	b2 28		lda ($28)			lda 	(zTemp2)
.2ef6	90 06		bcc $2efe			bcc 	_GSNoIncrement
.2ef8	e6 28		inc $28				inc 	zTemp2
.2efa	d0 02		bne $2efe			bne 	_GSNoIncrement
.2efc	e6 29		inc $29				inc 	zTemp2+1
.2efe					_GSNoIncrement:
.2efe	c9 00		cmp #$00			cmp 	#0
.2f00	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2f01					VARArrayLookup:
.2f01	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2f03	86 25		stx $25				stx 	zTemp0+1
.2f05	b2 24		lda ($24)			lda 	(zTemp0)
.2f07	48		pha				pha
.2f08	5a		phy				phy
.2f09	a0 01		ldy #$01			ldy 	#1
.2f0b	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f0d	7a		ply				ply
.2f0e	48		pha				pha
.2f0f	20 5d 1a	jsr $1a5d			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2f12	68		pla				pla 								; array address to zTemp0
.2f13	85 25		sta $25				sta 	zTemp0+1
.2f15	68		pla				pla
.2f16	85 24		sta $24				sta 	zTemp0
.2f18	5a		phy				phy 								; save codePtr position.
.2f19	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2f1b	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f1d	48		pha				pha 								; save bit 15 on stack.
.2f1e	29 7f		and #$7f			and 	#$7F
.2f20	85 26		sta $26				sta 	zTemp1
.2f22	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2f24	d2 24		cmp ($24)			cmp 	(zTemp0)
.2f26	a5 09		lda $09				lda 	IFR0+IM1
.2f28	e5 26		sbc $26				sbc 	zTemp1
.2f2a	b0 3a		bcs $2f66			bcs 	_VALIndex
.2f2c	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2f2e	c9 40		cmp #$40			cmp 	#$40
.2f30	b0 34		bcs $2f66			bcs 	_VALIndex
.2f32	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2f34	26 09		rol $09				rol 	IFR0+IM1
.2f36	fa		plx				plx 								; get msb of size -> X
.2f37	30 04		bmi $2f3d			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2f39	06 08		asl $08				asl 	IFR0+IM0
.2f3b	26 09		rol $09				rol 	IFR0+IM1
.2f3d					_VARNotX4:
.2f3d	18		clc				clc 								; add the two for the size bytes
.2f3e	a5 08		lda $08				lda 	IFR0+IM0
.2f40	69 02		adc #$02			adc 	#2
.2f42	85 08		sta $08				sta 	IFR0+IM0
.2f44	90 02		bcc $2f48			bcc 	_VARNoCarry1
.2f46	e6 09		inc $09				inc 	IFR0+IM1
.2f48					_VARNoCarry1:
.2f48	18		clc				clc 								; calculate the element address and push to stack.
.2f49	a5 08		lda $08				lda 	IFR0+IM0
.2f4b	65 24		adc $24				adc 	zTemp0
.2f4d	48		pha				pha
.2f4e	a5 09		lda $09				lda 	IFR0+IM1
.2f50	65 25		adc $25				adc 	zTemp0+1
.2f52	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2f54	30 04		bmi $2f5a			bmi 	_VARHasSubLevel
.2f56	aa		tax				tax 								; address in XA
.2f57	68		pla				pla
.2f58	7a		ply				ply 								; restore Y and exit
.2f59	60		rts				rts
.2f5a					_VARHasSubLevel:
.2f5a	aa		tax				tax 								; get link address in XA
.2f5b	68		pla				pla
.2f5c	7a		ply				ply 								; restore code position.
.2f5d	48		pha				pha
.2f5e	20 33 2c	jsr $2c33			jsr 	ERRCheckComma 				; comma required.
.2f61	68		pla				pla
.2f62	20 01 2f	jsr $2f01			jsr 	VARArrayLookup 				; call it recursively
.2f65	60		rts				rts
.2f66					_VALIndex:
.2f66	4c 1c 2b	jmp $2b1c		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2f69					VARCreate:
.2f69	5a		phy				phy
.2f6a	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2f6c	a2 00		ldx #$00			ldx 	#0
.2f6e	20 55 13	jsr $1355			jsr 	AllocateMemory
.2f71	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2f73	86 27		stx $27				stx 	zTemp1+1
.2f75	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2f77	ad 34 06	lda $0634			lda 	VARHash
.2f7a	91 26		sta ($26),y			sta 	(zTemp1),y
.2f7c	c8		iny				iny 								; put address of name into +3,+4
.2f7d	ad 32 06	lda $0632			lda 	VARNameAddress
.2f80	91 26		sta ($26),y			sta 	(zTemp1),y
.2f82	c8		iny				iny
.2f83	ad 33 06	lda $0633			lda 	VARNameAddress+1
.2f86	91 26		sta ($26),y			sta 	(zTemp1),y
.2f88	ad 35 06	lda $0635			lda 	VARType
.2f8b	29 01		and #$01			and 	#1
.2f8d	f0 06		beq $2f95			beq 	_CVNotString
.2f8f	a0 08		ldy #$08			ldy 	#5+3
.2f91	a9 80		lda #$80			lda 	#$80
.2f93	91 26		sta ($26),y			sta 	(zTemp1),y
.2f95					_CVNotString:
.2f95	ad 56 06	lda $0656			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2f98	85 24		sta $24				sta 	zTemp0
.2f9a	ad 57 06	lda $0657			lda 	VARHashEntry+1
.2f9d	85 25		sta $25				sta 	zTemp0+1
.2f9f	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2fa1	b2 24		lda ($24)			lda 	(zTemp0)
.2fa3	92 26		sta ($26)			sta 	(zTemp1)
.2fa5	b1 24		lda ($24),y			lda 	(zTemp0),y
.2fa7	91 26		sta ($26),y			sta 	(zTemp1),y
.2fa9	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2fab	92 24		sta ($24)			sta 	(zTemp0)
.2fad	a5 27		lda $27				lda 	zTemp1+1
.2faf	91 24		sta ($24),y			sta 	(zTemp0),y
.2fb1	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2fb3	a6 27		ldx $27				ldx 	zTemp1+1
.2fb5	18		clc				clc 								; add 5 to point to the data.
.2fb6	69 05		adc #$05			adc 	#5
.2fb8	90 01		bcc $2fbb			bcc 	_VCNoCarry
.2fba	e8		inx				inx
.2fbb					_VCNoCarry:
.2fbb	7a		ply				ply
.2fbc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2fbd					VARFind:
.2fbd	5a		phy				phy
.2fbe	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2fc0	b1 24		lda ($24),y			lda 	(zTemp0),y
.2fc2	85 27		sta $27				sta 	zTemp1+1
.2fc4	f0 1c		beq $2fe2			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2fc6	b2 24		lda ($24)			lda 	(zTemp0)
.2fc8	85 26		sta $26				sta 	zTemp1
.2fca					_VFLoop:
.2fca	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2fcc	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fce	cd 34 06	cmp $0634			cmp 	VARHash
.2fd1	f0 12		beq $2fe5			beq 	_VFHashesMatch 				; if so, check the name.
.2fd3					_VFNext:
.2fd3	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2fd5	aa		tax				tax
.2fd6	a0 01		ldy #$01			ldy 	#1
.2fd8	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fda	85 27		sta $27				sta 	zTemp1+1
.2fdc	86 26		stx $26				stx 	zTemp1
.2fde	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2fe0	d0 e8		bne $2fca			bne 	_VFLoop
.2fe2					_VFExitFail:
.2fe2	7a		ply				ply
.2fe3	18		clc				clc
.2fe4	60		rts				rts
.2fe5					_VFHashesMatch:
.2fe5	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2fe7	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fe9	85 28		sta $28				sta 	zTemp2
.2feb	c8		iny				iny
.2fec	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fee	85 29		sta $29				sta 	zTemp2+1
.2ff0	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2ff2					_VFNameCompLoop:
.2ff2	c8		iny				iny 								; char at a time
.2ff3	b9 36 06	lda $0636,y			lda 	VARBuffer,y
.2ff6	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2ff8	d0 d9		bne $2fd3			bne 	_VFNext						; next entry if different.
.2ffa	c9 7c		cmp #$7c			cmp 	#$7C
.2ffc	90 f4		bcc $2ff2			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2ffe	18		clc				clc
.2fff	a5 26		lda $26				lda 	zTemp1
.3001	a6 27		ldx $27				ldx 	zTemp1+1
.3003	69 05		adc #$05			adc 	#5
.3005	90 01		bcc $3008			bcc 	_VFNNoCarry
.3007	e8		inx				inx
.3008					_VFNNoCarry:
.3008	7a		ply				ply
.3009	38		sec				sec
.300a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.300b					VARGetInfo:
.300b	98		tya				tya 								; calculate the address of the identifier start.
.300c	18		clc				clc
.300d	65 18		adc $18				adc 	codePtr
.300f	8d 32 06	sta $0632			sta 	VARNameAddress
.3012	a5 19		lda $19				lda 	codePtr+1
.3014	69 00		adc #$00			adc 	#0
.3016	8d 33 06	sta $0633			sta 	VARNameAddress+1
.3019	9c 34 06	stz $0634			stz 	VARHash
.301c	a2 00		ldx #$00			ldx 	#0
.301e					_VARCopyName:
.301e	18		clc				clc 								; update the sum hash.
.301f	ad 34 06	lda $0634			lda 	VARHash
.3022	71 18		adc ($18),y			adc 	(codePtr),y
.3024	8d 34 06	sta $0634			sta 	VARHash
.3027	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.3029	c8		iny				iny
.302a	9d 36 06	sta $0636,x			sta 	VARBuffer,x
.302d	e8		inx				inx
.302e	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.3030	90 ec		bcc $301e			bcc 	_VARCopyName
.3032	8d 35 06	sta $0635			sta 	VARType 					; save type byte
.3035	29 03		and #$03			and 	#3 							; type is 0-3
.3037	0a		asl a				asl 	a
.3038	0a		asl a				asl 	a
.3039	85 24		sta $24				sta 	zTemp0
.303b	ad 34 06	lda $0634			lda 	VARHash 					; force into range of hash entries per type.
.303e	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.3040	65 24		adc $24				adc 	zTemp0 						; index of hash table
.3042	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.3043	69 58		adc #$58			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.3045	85 24		sta $24				sta 	zTemp0
.3047	8d 56 06	sta $0656			sta 	VARHashEntry
.304a	a9 06		lda #$06			lda 	#VARHashTables >> 8
.304c	69 00		adc #$00			adc 	#0
.304e	85 25		sta $25				sta 	zTemp0+1
.3050	8d 57 06	sta $0657			sta 	VARHashEntry+1
.3053	60		rts				rts
.3054					VARClearHashTables:
.3054	a2 00		ldx #$00			ldx 	#0
.3056					_VCHRLoop:
.3056	a9 00		lda #$00			lda 	#0
.3058	9d 58 06	sta $0658,x			sta 	VARHashTables,x
.305b	e8		inx				inx
.305c	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.305e	d0 f6		bne $3056			bne 	_VCHRLoop
.3060	60		rts				rts
.0632					VARNameAddress:
>0632							.fill 	2
.0634					VARHash:
>0634							.fill 	1
.0635					VARType:
>0635							.fill 	1
.0636					VARBuffer:
>0636							.fill 	32
.0656					VARHashEntry:
>0656							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0658					VARHashTables:
>0658							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.3061					VARCheckSimple:
.3061	aa		tax				tax 								; save in X
.3062	b1 18		lda ($18),y			lda 	(codePtr),y
.3064	c9 7c		cmp #$7c			cmp 	#$7C
.3066	d0 15		bne $307d			bne 	_VCSComplex
.3068	c8		iny				iny 								; consume the second byte, the type.
.3069	8a		txa				txa  								; character (40-7F) x 4
.306a	0a		asl a				asl 	a
.306b	0a		asl a				asl  	a
.306c	18		clc				clc
.306d	69 78		adc #$78			adc 	#FastVariables & $FF
.306f	85 08		sta $08				sta 	IFR0+IM0
.3071	a9 06		lda #$06			lda 	#FastVariables >> 8
.3073	69 00		adc #$00			adc 	#0
.3075	85 09		sta $09				sta 	IFR0+IM1
.3077	64 0a		stz $0a				stz 	IFR0+IM2
.3079	64 0b		stz $0b				stz 	IFR0+IExp
.307b	38		sec				sec 								; it's a reference
.307c	60		rts				rts
.307d					_VCSComplex:
.307d	88		dey				dey	 								; extract information.
.307e	20 0b 30	jsr $300b			jsr 	VARGetInfo
.3081	20 bd 2f	jsr $2fbd			jsr 	VARFind 					; search for variable
.3084	b0 0a		bcs $3090			bcs 	_VCSHaveVariable
.3086	ad 35 06	lda $0635			lda 	VARType 					; error if arrays, cannot autocreate
.3089	29 02		and #$02			and 	#2
.308b	d0 25		bne $30b2			bne 	_VCNoCreate
.308d	20 69 2f	jsr $2f69			jsr 	VARCreate 					; create variable
.3090					_VCSHaveVariable:
.3090	48		pha				pha 								; save LSB on the stack
.3091	ad 35 06	lda $0635			lda 	VARType 					; get var type, and shift bit 1 into carry
.3094	6a		ror a				ror 	a
.3095	6a		ror a				ror 	a
.3096	68		pla				pla 								; restore LSB
.3097	90 08		bcc $30a1			bcc 	_VCSNotArray 				; skip if not an array
.3099	20 01 2f	jsr $2f01			jsr 	VARArrayLookup 				; look for subscripts.
.309c	48		pha				pha 								; check )
.309d	20 2b 2c	jsr $2c2b			jsr 	ERRCheckRParen
.30a0	68		pla				pla
.30a1					_VCSNotArray:
.30a1	86 09		stx $09				stx 	IFR0+IM1 					; save address
.30a3	85 08		sta $08				sta 	IFR0+IM0
.30a5	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.30a7	ad 35 06	lda $0635			lda 	VARType 					; number/string bit into carry
.30aa	6a		ror a				ror 	a
.30ab	a9 00		lda #$00			lda 	#0
.30ad	6a		ror a				ror 	a 							; now $00 or $80
.30ae	85 0b		sta $0b				sta 	IFR0+IExp
.30b0	38		sec				sec 								; it's a reference
.30b1	60		rts				rts
.30b2					_VCNoCreate:
.30b2	4c 42 2b	jmp $2b42		jmp	ErrorV_uninitialised
.0678					FastVariables:
>0678							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.30b5					IFInitialise:
.30b5	9c e8 06	stz $06e8			stz 	IFStackIndex 				; reset the internal stack.
.30b8	60		rts				rts
.30b9					IFloatSubtract:
.30b9	da		phx				phx
.30ba	a2 08		ldx #$08			ldx 	#IFR0
.30bc	20 d3 36	jsr $36d3			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.30bf	fa		plx				plx
.30c0					IFloatAdd:
.30c0	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.30c2	05 0b		ora $0b				ora 	IFR0+IExp
.30c4	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.30c6	d0 4e		bne $3116			bne 	_IFloatAddDecimals 			; floating point version.
.30c8					_IFAddSubMantissa:
.30c8	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.30ca	45 0b		eor $0b				eor 	IFR0+IExp
.30cc	29 40		and #$40			and 	#IFSign
.30ce	d0 21		bne $30f1			bne 	_IFloatSubMantissa			; if so, we do a subtract
.30d0	18		clc				clc 								; do the actual addition
.30d1	a5 08		lda $08				lda 	IFR0+IM0
.30d3	75 00		adc $00,x			adc 		IM0,x
.30d5	85 08		sta $08				sta 	IFR0+IM0
.30d7	a5 09		lda $09				lda 	IFR0+IM1
.30d9	75 01		adc $01,x			adc 		IM1,x
.30db	85 09		sta $09				sta 	IFR0+IM1
.30dd	a5 0a		lda $0a				lda 	IFR0+IM2
.30df	75 02		adc $02,x			adc 		IM2,x
.30e1	85 0a		sta $0a				sta 	IFR0+IM2
.30e3	10 29		bpl $310e			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.30e5	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.30e7	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.30ea	20 21 37	jsr $3721			jsr 	IFloatIncExponent
.30ed	d0 1f		bne $310e			bne 	_IFloatAddExit
.30ef	38		sec				sec 								; overflowed numerically.
.30f0	60		rts				rts
.30f1					_IFloatSubMantissa:
.30f1	38		sec				sec 								; do the subtraction R0-Rx
.30f2	a5 08		lda $08				lda 	IFR0+IM0
.30f4	f5 00		sbc $00,x			sbc 		IM0,x
.30f6	85 08		sta $08				sta 	IFR0+IM0
.30f8	a5 09		lda $09				lda 	IFR0+IM1
.30fa	f5 01		sbc $01,x			sbc 		IM1,x
.30fc	85 09		sta $09				sta 	IFR0+IM1
.30fe	a5 0a		lda $0a				lda 	IFR0+IM2
.3100	f5 02		sbc $02,x			sbc 		IM2,x
.3102	85 0a		sta $0a				sta 	IFR0+IM2
.3104	b0 08		bcs $310e			bcs 	_IFloatAddExit 				; no borrow so we are done.
.3106	a2 08		ldx #$08			ldx 	#IFR0
.3108	20 db 36	jsr $36db			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.310b	20 d3 36	jsr $36d3			jsr 	IFloatNegate 				; negate the result using sign bit.
.310e					_IFloatAddExit:
.310e	18		clc				clc
.310f	60		rts				rts
.3110					_IFloatZeroAdd:
.3110	fa		plx				plx 								; return this value in R0
.3111	20 59 36	jsr $3659			jsr 	IFloatCopyFromRegister
.3114	18		clc				clc
.3115	60		rts				rts
.3116					_IFloatAddDecimals:
.3116	20 c1 36	jsr $36c1			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.3119	f0 f3		beq $310e			beq 	_IFloatAddExit
.311b	20 ff 36	jsr $36ff			jsr 	IFloatNormalise 			; normalise RX
.311e	da		phx				phx 								; normalise R0
.311f	a2 08		ldx #$08			ldx 	#IFR0
.3121	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.3124	f0 ea		beq $3110			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.3126	20 ff 36	jsr $36ff			jsr 	IFloatNormalise
.3129	fa		plx				plx
.312a	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.312c	29 3f		and #$3f			and 	#IFXMask
.312e	38		sec				sec
.312f	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.3131	85 20		sta $20				sta 	iTemp0
.3133	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.3135	29 3f		and #$3f			and 	#IFXMask
.3137	38		sec				sec
.3138	e9 20		sbc #$20			sbc 	#$20
.313a	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.313c	b0 02		bcs $3140			bcs 	_IFloatHaveLarger
.313e	a5 20		lda $20				lda 	iTemp0
.3140					_IFloatHaveLarger:
.3140	18		clc				clc 								; get the actual one back.
.3141	69 20		adc #$20			adc 	#$20 						; shift both to that.
.3143	20 50 31	jsr $3150			jsr 	_IFShiftXToA
.3146	da		phx				phx
.3147	a2 08		ldx #$08			ldx 	#IFR0
.3149	20 50 31	jsr $3150			jsr 	_IFShiftXToA
.314c	fa		plx				plx
.314d	4c c8 30	jmp $30c8			jmp 	_IFAddSubMantissa 			; do the adding bit.
.3150					_IFShiftXToA:
.3150	8d e0 06	sta $06e0			sta 	IFTarget
.3153	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; check adding zero ?
.3156	f0 11		beq $3169			beq 	_IFSXExit
.3158					_IFSXLoop:
.3158	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.315a	29 3f		and #$3f			and 	#IFXMask
.315c	cd e0 06	cmp $06e0			cmp 	IFTarget
.315f	f0 08		beq $3169			beq 	_IFSXExit
.3161	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.3164	20 21 37	jsr $3721			jsr 	IFloatIncExponent
.3167	80 ef		bra $3158			bra 	_IFSXLoop
.3169					_IFSXExit:
.3169	60		rts				rts
.06e0					IFTarget:
>06e0							.fill 	1
.316a					IFloatMultiply:
.316a	8e e0 06	stx $06e0			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.316d	20 22 32	jsr $3222			jsr 	IFCalculateNewSign
.3170	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.3172	05 0b		ora $0b				ora 	IFR0+IExp
.3174	29 3f		and #$3f			and 	#IFXMask
.3176	15 01		ora $01,x			ora 	IM1,x
.3178	05 09		ora $09				ora 	IFR0+IM1
.317a	15 02		ora $02,x			ora 	IM2,x
.317c	05 0a		ora $0a				ora 	IFR0+IM2
.317e	d0 0a		bne $318a			bne 	_IFMStandard
.3180	20 a4 36	jsr $36a4			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.3183	ad e2 06	lda $06e2			lda 	IFNewSign
.3186	85 0b		sta $0b				sta 	IFR0+IExp
.3188	18		clc				clc
.3189	60		rts				rts
.318a					_IFMStandard:
.318a	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.318c	20 19 32	jsr $3219			jsr 	IFMSignExtend
.318f	8d e1 06	sta $06e1			sta 	IFNewExponent
.3192	a5 0b		lda $0b				lda 	IFR0+IExp
.3194	20 19 32	jsr $3219			jsr 	IFMSignExtend
.3197	18		clc				clc
.3198	6d e1 06	adc $06e1			adc 	IFNewExponent
.319b	8d e1 06	sta $06e1			sta 	IFNewExponent
.319e	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.31a0	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister
.31a3	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.31a5	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.31a8					_IFMLoop:
.31a8	a2 14		ldx #$14			ldx 	#IFRTemp
.31aa	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.31ad	f0 3a		beq $31e9			beq 	_IFMExit
.31af	ae e0 06	ldx $06e0			ldx 	IFTarget 					; look at adder MSB
.31b2	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.31b4	10 03		bpl $31b9			bpl	 	_IFMTargetOkay
.31b6	20 0a 32	jsr $320a			jsr 	_IFMShiftAll
.31b9					_IFMTargetOkay:
.31b9	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.31bb	29 01		and #$01			and 	#1
.31bd	f0 16		beq $31d5			beq 	_IFMNoAdd
.31bf	ae e0 06	ldx $06e0			ldx 	IFTarget 					; add adder
.31c2	18		clc				clc
.31c3	a5 08		lda $08				lda 	IFR0+IM0
.31c5	75 00		adc $00,x			adc 		IM0,x
.31c7	85 08		sta $08				sta 	IFR0+IM0
.31c9	a5 09		lda $09				lda 	IFR0+IM1
.31cb	75 01		adc $01,x			adc 		IM1,x
.31cd	85 09		sta $09				sta 	IFR0+IM1
.31cf	a5 0a		lda $0a				lda 	IFR0+IM2
.31d1	75 02		adc $02,x			adc 		IM2,x
.31d3	85 0a		sta $0a				sta 	IFR0+IM2
.31d5					_IFMNoAdd:
.31d5	a5 0a		lda $0a				lda 	IFR0+IM2
.31d7	10 03		bpl $31dc			bpl 	_IFMResultOkay
.31d9	20 0a 32	jsr $320a			jsr 	_IFMShiftAll
.31dc					_IFMResultOkay:
.31dc	a2 14		ldx #$14			ldx 	#IFRTemp
.31de	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.31e1	ae e0 06	ldx $06e0			ldx 	IFTarget
.31e4	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.31e7	80 bf		bra $31a8			bra 	_IFMLoop
.31e9					_IFMExit:
.31e9	ad e1 06	lda $06e1			lda 	IFNewExponent 				; validate new exponent.
.31ec	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.31ee	90 0f		bcc $31ff			bcc 	_IFMOkay
.31f0	c9 e0		cmp #$e0			cmp 	#$E0
.31f2	b0 0b		bcs $31ff			bcs 	_IFMOkay
.31f4	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.31f6	f0 10		beq $3208			beq 	_IFMError
.31f8	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.31fa	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.31fd	18		clc				clc
.31fe	60		rts				rts
.31ff					_IFMOkay:
.31ff	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.3201	0d e2 06	ora $06e2			ora 	IFNewSign
.3204	85 0b		sta $0b				sta 	IFR0+IExp
.3206	18		clc				clc
.3207	60		rts				rts
.3208					_IFMError:
.3208	38		sec				sec
.3209	60		rts				rts
.320a					_IFMShiftAll:
.320a	a2 08		ldx #$08			ldx 	#IFR0
.320c	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.320f	ae e0 06	ldx $06e0			ldx 	IFTarget
.3212	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.3215	ee e1 06	inc $06e1			inc 	IFNewExponent
.3218	60		rts				rts
.3219					IFMSignExtend:
.3219	29 3f		and #$3f			and 	#IFXMask
.321b	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.321d	90 02		bcc $3221			bcc 	_IFMNoSXX
.321f	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.3221					_IFMNoSXX:
.3221	60		rts				rts
.3222					IFCalculateNewSign:
.3222	b5 03		lda $03,x			lda 	IExp,x
.3224	45 0b		eor $0b				eor 	IFR0+IExp
.3226	29 40		and #$40			and 	#IFSign
.3228	8d e2 06	sta $06e2			sta 	IFNewSign
.322b	60		rts				rts
.06e1					IFNewExponent:
>06e1							.fill 	1
.06e2					IFNewSign:
>06e2							.fill 	1
.322c					IFloatDivideInteger:
.322c	20 45 32	jsr $3245			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.322f	b0 06		bcs $3237			bcs 	_IFDIExit
.3231	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.3233	20 59 36	jsr $3659			jsr 	IFloatCopyFromRegister
.3236	18		clc				clc
.3237					_IFDIExit:
.3237	60		rts				rts
.3238					IFloatModulusInteger:
.3238	20 45 32	jsr $3245			jsr 	IFloatDivideIntegerCommon
.323b	b0 07		bcs $3244			bcs 	_IFMIExit
.323d	ae e0 06	ldx $06e0			ldx 	IFTarget
.3240	20 59 36	jsr $3659			jsr 	IFloatCopyFromRegister
.3243	18		clc				clc
.3244					_IFMIExit:
.3244	60		rts				rts
.3245					IFloatDivideIntegerCommon:
.3245	8e e0 06	stx $06e0			stx 	IFTarget  					; this is s1, s0 = R0
.3248	20 22 32	jsr $3222			jsr 	IFCalculateNewSign 			; calculate sign of result
.324b	20 73 32	jsr $3273			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.324e	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.3250	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.3253	f0 1c		beq $3271			beq 	_IFDIDivZero
.3255	ae e0 06	ldx $06e0			ldx 	IFTarget 					; zero Rx (S1)
.3258	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.325b	5a		phy				phy
.325c	a0 18		ldy #$18			ldy 	#24
.325e					_IFDILoop:
.325e	20 84 32	jsr $3284			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3261	20 90 32	jsr $3290			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3264	88		dey				dey
.3265	d0 f7		bne $325e			bne 	_IFDILoop 					; do it 24 times
.3267	7a		ply				ply
.3268	ad e2 06	lda $06e2			lda 	IFNewSign 					; set sign of result.
.326b	29 40		and #$40			and 	#IFSign
.326d	85 17		sta $17				sta 	IFRTemp+IExp
.326f	18		clc				clc 								; is okay.
.3270	60		rts				rts
.3271					_IFDIDivZero:
.3271	38		sec				sec
.3272	60		rts				rts
.3273					IFDCopyRXToRTemp:
.3273	b5 00		lda $00,x			lda 	IM0,x
.3275	85 14		sta $14				sta 	IFRTemp+IM0
.3277	b5 01		lda $01,x			lda 	IM1,x
.3279	85 15		sta $15				sta 	IFRTemp+IM1
.327b	b5 02		lda $02,x			lda 	IM2,x
.327d	85 16		sta $16				sta 	IFRTemp+IM2
.327f	b5 03		lda $03,x			lda 	IExp,x
.3281	85 17		sta $17				sta 	IFRTemp+IExp
.3283	60		rts				rts
.3284					IFDShiftSTempS1Left:
.3284	a2 14		ldx #$14			ldx 	#IFRTemp
.3286	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft
.3289	ae e0 06	ldx $06e0			ldx 	IFTarget
.328c	20 f0 36	jsr $36f0			jsr 	IFloatRotateLeft
.328f	60		rts				rts
.3290					IFDTrySubtract:
.3290	ae e0 06	ldx $06e0			ldx 	IFTarget 					; s1 = Rx
.3293	38		sec				sec 								; subtract, saving the results on the stack.
.3294	b5 00		lda $00,x			lda 	IM0,x
.3296	e5 08		sbc $08				sbc 	IFR0+IM0
.3298	48		pha				pha
.3299	b5 01		lda $01,x			lda 	IM1,x
.329b	e5 09		sbc $09				sbc 	IFR0+IM1
.329d	48		pha				pha
.329e	b5 02		lda $02,x			lda 	IM2,x
.32a0	e5 0a		sbc $0a				sbc 	IFR0+IM2
.32a2	b0 03		bcs $32a7			bcs 	_IFDCanSubtract
.32a4	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.32a5	68		pla				pla
.32a6	60		rts				rts
.32a7					_IFDCanSubtract:
.32a7	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.32a9	68		pla				pla
.32aa	95 01		sta $01,x			sta 	IM1,x
.32ac	68		pla				pla
.32ad	95 00		sta $00,x			sta 	IM0,x
.32af	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.32b1	d0 06		bne $32b9			bne 	_IFDCSExit
.32b3	e6 15		inc $15				inc 	IFRTemp+IM1
.32b5	d0 02		bne $32b9			bne 	_IFDCSExit
.32b7	e6 16		inc $16				inc 	IFRTemp+IM2
.32b9					_IFDCSExit:
.32b9	60		rts				rts
.32ba					IFloatBitwiseAnd:
.32ba	5a		phy				phy
.32bb	20 ff 32	jsr $32ff			jsr 	IFPreProcessBitwise 		; set up everything.
.32be	d0 0f		bne $32cf			bne 	_IFBAExit
.32c0					_IFBALoop:
.32c0	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.32c3	35 00		and $00,x			and 	IM0,x
.32c5	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32c8	e8		inx				inx
.32c9	c8		iny				iny
.32ca	c0 03		cpy #$03			cpy 	#3
.32cc	d0 f2		bne $32c0			bne 	_IFBALoop
.32ce	18		clc				clc
.32cf					_IFBAExit:
.32cf	7a		ply				ply
.32d0	60		rts				rts
.32d1					IFloatBitwiseOr:
.32d1	5a		phy				phy
.32d2	20 ff 32	jsr $32ff			jsr 	IFPreProcessBitwise 		; set up everything.
.32d5	d0 0f		bne $32e6			bne 	_IFBAExit
.32d7					_IFBALoop:
.32d7	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.32da	15 00		ora $00,x			ora 	IM0,x
.32dc	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32df	e8		inx				inx
.32e0	c8		iny				iny
.32e1	c0 03		cpy #$03			cpy 	#3
.32e3	d0 f2		bne $32d7			bne 	_IFBALoop
.32e5	18		clc				clc
.32e6					_IFBAExit:
.32e6	7a		ply				ply
.32e7	60		rts				rts
.32e8					IFloatBitwiseXor:
.32e8	5a		phy				phy
.32e9	20 ff 32	jsr $32ff			jsr 	IFPreProcessBitwise 		; set up everything.
.32ec	d0 0f		bne $32fd			bne 	_IFBAExit
.32ee					_IFBALoop:
.32ee	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.32f1	55 00		eor $00,x			eor 	IM0,x
.32f3	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32f6	e8		inx				inx
.32f7	c8		iny				iny
.32f8	c0 03		cpy #$03			cpy 	#3
.32fa	d0 f2		bne $32ee			bne 	_IFBALoop
.32fc	18		clc				clc
.32fd					_IFBAExit:
.32fd	7a		ply				ply
.32fe	60		rts				rts
.32ff					IFPreProcessBitwise:
.32ff	a0 00		ldy #$00			ldy 	#0 							; set index.
.3301	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.3303	15 03		ora $03,x			ora 	IExp,x
.3305	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.3307	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3309	38		sec				sec 								; carry set just in cases.
.330a	60		rts				rts
.330b					IFloatAbsoluteR0:
.330b	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.330d	29 bf		and #$bf			and 	#IFSign ^ 255
.330f	85 0b		sta $0b				sta 	IFR0+IExp
.3311	18		clc				clc
.3312	60		rts				rts
.3313					IFloatSquareRootR0:
.3313	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.3315	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.3318	f0 2e		beq $3348			beq 	_IFSRZero
.331a	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.331c	29 40		and #$40			and 	#IFSign
.331e	d0 2f		bne $334f			bne 	_IFSRFail
.3320	20 ff 36	jsr $36ff			jsr 	IFloatNormalise 			; it will work better !
.3323	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.3325	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister
.3328	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.332a	20 19 32	jsr $3219			jsr 	IFMSignExtend 				; sign extended version of the exponent
.332d	18		clc				clc
.332e	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3330	85 0b		sta $0b				sta 	IFR0+IExp
.3332	4a		lsr a				lsr 	a 							; which we can halve.
.3333	38		sec				sec 								; convert back
.3334	e9 17		sbc #$17			sbc 	#23
.3336	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.3338	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.333a	20 51 33	jsr $3351			jsr 	_IFSRNewton
.333d	20 51 33	jsr $3351			jsr 	_IFSRNewton
.3340	20 51 33	jsr $3351			jsr 	_IFSRNewton
.3343	20 51 33	jsr $3351			jsr 	_IFSRNewton
.3346	18		clc				clc
.3347	60		rts				rts
.3348					_IFSRZero:
.3348	a2 08		ldx #$08			ldx 	#IFR0
.334a	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.334d	18		clc				clc
.334e	60		rts				rts
.334f					_IFSRFail:
.334f	38		sec				sec
.3350	60		rts				rts
.3351					_IFSRNewton:
.3351	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.3353	20 17 36	jsr $3617			jsr 	IFloatPushRx
.3356	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.3358	20 17 36	jsr $3617			jsr 	IFloatPushRx
.335b	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.335d	20 ec 33	jsr $33ec			jsr 	IFloatDivideFloat
.3360	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.3362	20 38 36	jsr $3638			jsr 	IFloatPullRx
.3365	20 c0 30	jsr $30c0			jsr 	IFloatAdd 					; now guess + original/guess
.3368	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.336a	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.336d	a2 0c		ldx #$0c			ldx 	#IFR1
.336f	20 38 36	jsr $3638			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.3372	60		rts				rts
.3373					IFloatFractionalR0:
.3373	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3375	29 3f		and #$3f			and 	#IFXMask
.3377	f0 17		beq $3390			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.3379	20 0b 33	jsr $330b			jsr 	IFloatAbsoluteR0 			; absolute value R0
.337c	a2 08		ldx #$08			ldx 	#IFR0
.337e	20 ff 36	jsr $36ff			jsr 	IFloatNormalise 			; normalise R0
.3381	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.3383	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister
.3386	20 c9 33	jsr $33c9			jsr 	IFloatIntegerR0 			; take integer part of R0
.3389	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.338b	20 b9 30	jsr $30b9			jsr 	IFloatSubtract
.338e	80 05		bra $3395			bra 	_FIPExit
.3390					_FIPZero:
.3390	a2 08		ldx #$08			ldx 	#IFR0
.3392	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.3395					_FIPExit:
.3395	18		clc				clc
.3396	60		rts				rts
.3397					IFloatCompare:
.3397	20 b9 30	jsr $30b9			jsr 	IFloatSubtract 				; subtract R0 from RX.
.339a	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.339c	05 0b		ora $0b				ora 	IFR0+IExp
.339e	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.33a0	29 3f		and #$3f			and 	#IFXMask
.33a2	d0 19		bne $33bd			bne 	_IFCNonInteger
.33a4	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; check if zero
.33a7	f0 0f		beq $33b8			beq 	_IFCZero
.33a9					_IFCReturnSign:
.33a9	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.33ab	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.33ad	48		pha				pha
.33ae	a9 01		lda #$01			lda 	#1
.33b0	20 ca 36	jsr $36ca			jsr 	IFloatSetByte 				; return to +1
.33b3	68		pla				pla 								; sign bit back
.33b4	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.33b6	18		clc				clc
.33b7	60		rts				rts
.33b8					_IFCZero:
.33b8	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.33bb	18		clc				clc
.33bc	60		rts				rts
.33bd					_IFCNonInteger:
.33bd	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.33bf	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.33c1	05 09		ora $09				ora 	IFR0+IM1
.33c3	05 0a		ora $0a				ora 	IFR0+IM2
.33c5	f0 f1		beq $33b8			beq 	_IFCZero 					; near enough !
.33c7	80 e0		bra $33a9			bra 	_IFCReturnSign 				; return the sign of the difference.
.33c9					IFloatIntegerR0:
.33c9	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.33cb	29 3f		and #$3f			and 	#IFXMask
.33cd	f0 1b		beq $33ea			beq 	_FIPExit 					; if so do nothing
.33cf	a2 08		ldx #$08			ldx 	#IFR0
.33d1	20 ff 36	jsr $36ff			jsr 	IFloatNormalise 			; normalise
.33d4	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; is it zero ?
.33d7	f0 0e		beq $33e7			beq 	_FIPZero 					; if so return zero.
.33d9					_FIPShift:
.33d9	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.33db	29 20		and #$20			and 	#$20 						; still -ve
.33dd	f0 0b		beq $33ea			beq 	_FIPExit
.33df	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight 			; shift mantissa right
.33e2	20 21 37	jsr $3721			jsr 	IFloatIncExponent 			; bump exponent
.33e5	80 f2		bra $33d9			bra 	_FIPShift
.33e7					_FIPZero:
.33e7	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.33ea					_FIPExit:
.33ea	18		clc				clc
.33eb	60		rts				rts
.33ec					IFloatDivideFloat:
.33ec	8e e0 06	stx $06e0			stx 	IFTarget  					; this is s1, s0 = R0
.33ef	20 22 32	jsr $3222			jsr 	IFCalculateNewSign 			; calculate sign of result
.33f2	20 ff 36	jsr $36ff			jsr 	IFloatNormalise 			; normalise RX
.33f5	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.33f7	20 ff 36	jsr $36ff			jsr 	IFloatNormalise
.33fa	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.33fd	f0 56		beq $3455			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.33ff	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.3401	20 19 32	jsr $3219			jsr 	IFMSignExtend
.3404	8d e1 06	sta $06e1			sta 	IFNewExponent
.3407	ae e0 06	ldx $06e0			ldx 	IFTarget 					; calculate s1.exponent
.340a	b5 03		lda $03,x			lda 	IExp,x
.340c	20 19 32	jsr $3219			jsr 	IFMSignExtend
.340f	38		sec				sec
.3410	ed e1 06	sbc $06e1			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.3413	38		sec				sec
.3414	e9 17		sbc #$17			sbc 	#23
.3416	8d e1 06	sta $06e1			sta 	IFNewExponent
.3419	20 57 34	jsr $3457			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.341c	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.341e	10 08		bpl $3428			bpl 	_IFDFNoShiftResult
.3420	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.3422	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.3425	ee e1 06	inc $06e1			inc 	IFNewExponent
.3428					_IFDFNoShiftResult:
.3428	ad e1 06	lda $06e1			lda 	IFNewExponent 				; underflow/overflow check.
.342b	30 06		bmi $3433			bmi 	_IFDFCheckUnderflow
.342d	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.342f	b0 24		bcs $3455			bcs 	_IFDFDivZero
.3431	80 11		bra $3444			bra		_IFDFExit
.3433					_IFDFCheckUnderflow:
.3433	ad e1 06	lda $06e1			lda 	IFNewExponent 				; shift into a legal exponent.
.3436	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.3438	b0 0a		bcs $3444			bcs 	_IFDFExit
.343a	ee e1 06	inc $06e1			inc 	IFNewExponent
.343d	a2 14		ldx #$14			ldx 	#IFRTemp
.343f	20 f7 36	jsr $36f7			jsr 	IFloatShiftRight
.3442	80 ef		bra $3433			bra 	_IFDFCheckUnderflow
.3444					_IFDFExit:
.3444	ad e1 06	lda $06e1			lda 	IFNewExponent 				; combine exponent and sign.
.3447	29 3f		and #$3f			and 	#IFXMask
.3449	0d e2 06	ora $06e2			ora 	IFNewSign
.344c	85 17		sta $17				sta 	IFRTemp+IExp
.344e	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.3450	20 59 36	jsr $3659			jsr 	IFloatCopyFromRegister
.3453	18		clc				clc
.3454	60		rts				rts
.3455					_IFDFDivZero:
.3455	38		sec				sec
.3456	60		rts				rts
.3457					IFloatDivideSupport:
.3457	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.3459	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.345c	5a		phy				phy 								; main division loop x 23
.345d	a0 17		ldy #$17			ldy 	#23
.345f					_IFDSLoop:
.345f	20 90 32	jsr $3290			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3462	20 84 32	jsr $3284			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3465	88		dey				dey
.3466	d0 f7		bne $345f			bne 	_IFDSLoop 					; do it 24 times
.3468	7a		ply				ply
.3469	60		rts				rts
.346a					IFloatIntegerToStringR0:
.346a	8d e3 06	sta $06e3			sta 	IFBase 						; save base to use.
.346d	20 49 37	jsr $3749			jsr 	IFloatBufferReset			; empty buffer
.3470	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.3472	29 3f		and #$3f			and 	#IFXMask
.3474	d0 1d		bne $3493			bne 	_IFIFail
.3476	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.3478	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.347b	f0 0e		beq $348b			beq 	_IFINotNegative
.347d	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.347f	29 40		and #$40			and 	#IFSign
.3481	f0 08		beq $348b			beq 	_IFINotNegative
.3483	a9 2d		lda #$2d			lda 	#"-"						; output -
.3485	20 58 37	jsr $3758			jsr 	IFloatBufferWrite
.3488	20 d3 36	jsr $36d3			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.348b					_IFINotNegative:
.348b	20 95 34	jsr $3495			jsr 	_IFIRecursiveConvert 		; start converting
.348e	20 50 37	jsr $3750			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.3491	18		clc				clc
.3492	60		rts				rts
.3493					_IFIFail:
.3493	38		sec				sec
.3494	60		rts				rts
.3495					_IFIRecursiveConvert:
.3495	a2 0c		ldx #$0c			ldx 	#IFR1
.3497	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister 		; R0->R1
.349a	a2 08		ldx #$08			ldx 	#IFR0
.349c	ad e3 06	lda $06e3			lda 	IFBase 						; Base -> R0
.349f	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.34a2	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.34a4	20 2c 32	jsr $322c			jsr 	IFloatDivideInteger
.34a7	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.34a9	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero
.34ac	f0 09		beq $34b7			beq 	_IFIOutDigit
.34ae	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.34b0	48		pha				pha
.34b1	20 95 34	jsr $3495			jsr 	_IFIRecursiveConvert 		; convert the divide result
.34b4	68		pla				pla
.34b5	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.34b7					_IFIOutDigit:
.34b7	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.34b9	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.34bb	90 02		bcc $34bf			bcc 	_IFINotHex
.34bd	69 06		adc #$06			adc 	#6
.34bf					_IFINotHex:
.34bf	69 30		adc #$30			adc 	#48
.34c1	20 58 37	jsr $3758			jsr 	IFloatBufferWrite 			; write character to buffer.
.34c4	60		rts				rts
.06e3					IFBase:
>06e3							.fill 	1
.34c5					IFloatFloatToStringR0:
.34c5	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.34c7	20 17 36	jsr $3617			jsr 	IFloatPushRx
.34ca	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister
.34cd	20 c9 33	jsr $33c9			jsr 	IFloatIntegerR0				; make R0 integer
.34d0	a9 0a		lda #$0a			lda 	#10 						; base 10.
.34d2	20 6a 34	jsr $346a			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.34d5	9c e4 06	stz $06e4			stz 	IFloatDecimalCount 			; zero the decimal count.
.34d8	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.34da	29 3f		and #$3f			and 	#IFXMask
.34dc	f0 44		beq $3522			beq 	_IFFSExit
.34de					_IFloatFracLoop:
.34de	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.34e0	20 59 36	jsr $3659			jsr 	IFloatCopyFromRegister
.34e3	20 73 33	jsr $3373			jsr 	IFloatFractionalR0
.34e6	20 ff 36	jsr $36ff			jsr 	IFloatNormalise
.34e9	a2 10		ldx #$10			ldx 	#IFR2
.34eb	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister 		; copy to back R2
.34ee	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.34f0	a9 0a		lda #$0a			lda 	#10
.34f2	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.34f5	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.34f7	20 6a 31	jsr $316a			jsr 	IFloatMultiply
.34fa	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.34fc	20 6a 36	jsr $366a			jsr 	IFloatCopyToRegister
.34ff	20 c9 33	jsr $33c9			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.3502	ad e4 06	lda $06e4			lda 	IFloatDecimalCount 			; done 3 dp, no more
.3505	c9 03		cmp #$03			cmp 	#3
.3507	f0 16		beq $351f			beq 	_IFFSExitStripZero
.3509	ad e4 06	lda $06e4			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.350c	d0 05		bne $3513			bne 	_IFloatNotFirst
.350e	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3510	20 58 37	jsr $3758			jsr 	IFloatBufferWrite
.3513					_IFloatNotFirst:
.3513	ee e4 06	inc $06e4			inc 	IFloatDecimalCount
.3516	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.3518	09 30		ora #$30			ora 	#"0"						; ASCII
.351a	20 58 37	jsr $3758			jsr 	IFloatBufferWrite 			; write to the buffer.
.351d	80 bf		bra $34de			bra 	_IFloatFracLoop
.351f					_IFFSExitStripZero:
.351f	20 67 37	jsr $3767			jsr 	IFloatStripTrailingZeros
.3522					_IFFSExit:
.3522	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3524	20 38 36	jsr $3638			jsr 	IFloatPullRx
.3527	20 50 37	jsr $3750			jsr 	IFloatGetBufferAddress
.352a	18		clc				clc
.352b	60		rts				rts
.06e4					IFloatDecimalCount:
>06e4							.fill 	1
.352c					IFloatStringToFloatR0:
.352c	8d e5 06	sta $06e5			sta 	IFCount 					; save length and positions out.
.352f	86 20		stx $20				stx 	iTemp0
.3531	84 21		sty $21				sty 	iTemp0+1
.3533	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.3535	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.3538	9c e6 06	stz $06e6			stz 	IFSignFlag 					; clear the sign flag
.353b	20 c8 35	jsr $35c8			jsr 	IFSTFGetNext 				; get first
.353e	f0 1b		beq $355b			beq 	_IFSTFFail 					; no character, fail.
.3540	90 10		bcc $3552			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.3542	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.3544	d0 15		bne $355b			bne 	_IFSTFFail
.3546	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.3548	8d e6 06	sta $06e6			sta 	IFSignFlag
.354b					_IFSTFLoop:
.354b	20 c8 35	jsr $35c8			jsr 	IFSTFGetNext 				; get next character
.354e	b0 0b		bcs $355b			bcs 	_IFSTFFail 					; bad character.
.3550	f0 11		beq $3563			beq 	_IFSTFExit 					; end of data
.3552					_IFSTFHaveChar:
.3552	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.3554	f0 08		beq $355e			beq 	_IFSTFDecimal
.3556	20 ec 35	jsr $35ec			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.3559	80 f0		bra $354b			bra 	_IFSTFLoop 					; keep going until . or end.
.355b					_IFSTFFail:
.355b	38		sec				sec
.355c	80 0d		bra $356b			bra 	_IFSTFReturn
.355e					_IFSTFDecimal:
.355e	20 73 35	jsr $3573			jsr 	IFSTFDecimal 				; call the decimal places code.
.3561	b0 08		bcs $356b			bcs 	_IFSTFReturn 				; error
.3563					_IFSTFExit:
.3563	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.3565	0d e6 06	ora $06e6			ora 	IFSignFlag
.3568	85 0b		sta $0b				sta 	IFR0+IExp
.356a	18		clc				clc
.356b					_IFSTFReturn:
.356b	60		rts				rts
.356c					IFloatAddDecimalToR0:
.356c	8d e5 06	sta $06e5			sta 	IFCount 					; save it out.
.356f	86 20		stx $20				stx 	iTemp0
.3571	84 21		sty $21				sty 	iTemp0+1
.3573					IFSTFDecimal:
.3573	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.3575	20 17 36	jsr $3617			jsr 	IFloatPushRx
.3578	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.357a	20 c8 36	jsr $36c8			jsr 	IFloatSetZero
.357d	9c e7 06	stz $06e7			stz 	IFDecimalPlaces 			; zero DP.
.3580					_IFSTDLoop:
.3580	20 c8 35	jsr $35c8			jsr 	IFSTFGetNext 				; get next
.3583	b0 41		bcs $35c6			bcs 	_IFSTFFail2 				; bad character.
.3585	f0 11		beq $3598			beq 	_IFSTFComplete 				; end of data, work out the result.
.3587	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.3589	f0 39		beq $35c4			beq 	_IFSTFExit2
.358b	20 ec 35	jsr $35ec			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.358e	ee e7 06	inc $06e7			inc 	IFDecimalPlaces 			; count decimals
.3591	ad e7 06	lda $06e7			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.3594	c9 03		cmp #$03			cmp 	#3
.3596	90 e8		bcc $3580			bcc 	_IFSTDLoop
.3598					_IFSTFComplete:
.3598	ad e7 06	lda $06e7			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.359b	f0 27		beq $35c4			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.359d	3a		dec a				dec 	a 							; table indexed from 1.
.359e	0a		asl a				asl 	a
.359f	0a		asl a				asl 	a
.35a0	aa		tax				tax
.35a1	bd 03 36	lda $3603,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.35a4	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.35a6	bd 04 36	lda $3604,x			lda 	TableTen+1,x
.35a9	85 0d		sta $0d				sta  	IFR1+IM1
.35ab	bd 05 36	lda $3605,x			lda 	TableTen+2,x
.35ae	85 0e		sta $0e				sta  	IFR1+IM2
.35b0	bd 06 36	lda $3606,x			lda 	TableTen+3,x
.35b3	85 0f		sta $0f				sta  	IFR1+IExp
.35b5	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.35b7	20 6a 31	jsr $316a			jsr 	IFloatMultiply
.35ba	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.35bc	20 38 36	jsr $3638			jsr 	IFloatPullRx
.35bf	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.35c1	20 c0 30	jsr $30c0			jsr 	IFloatAdd
.35c4					_IFSTFExit2:
.35c4	18		clc				clc
.35c5	60		rts				rts
.35c6					_IFSTFFail2:
.35c6	38		sec				sec
.35c7	60		rts				rts
.35c8					IFSTFGetNext:
.35c8	ad e5 06	lda $06e5			lda 	IFCount  					; if count is zero, return with Z set.
.35cb	f0 19		beq $35e6			beq 	_IFSTFReturnOk
.35cd	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.35cf	e6 20		inc $20				inc 	iTemp0 						; point at next.
.35d1	d0 02		bne $35d5			bne 	_IFSTFGNNoCarry
.35d3	e6 21		inc $21				inc 	iTemp0+1
.35d5					_IFSTFGNNoCarry:
.35d5	ce e5 06	dec $06e5			dec 	IFCount 					; dec count.
.35d8	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.35da	f0 08		beq $35e4			beq 	_IFSTFGOkay
.35dc	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.35de	90 08		bcc $35e8			bcc 	_IFSTFGFail
.35e0	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.35e2	b0 04		bcs $35e8			bcs 	_IFSTFGFail
.35e4					_IFSTFGOkay:
.35e4	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.35e6					_IFSTFReturnOk:
.35e6	18		clc				clc
.35e7	60		rts				rts
.35e8					_IFSTFGFail:
.35e8	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.35ea	38		sec				sec
.35eb	60		rts				rts
.35ec					IFSTFAddR0:
.35ec	29 0f		and #$0f			and 	#15 						; to int value
.35ee	48		pha				pha 								; save it.
.35ef	a9 0a		lda #$0a			lda 	#10
.35f1	a2 0c		ldx #$0c			ldx 	#IFR1
.35f3	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.35f6	20 6a 31	jsr $316a			jsr 	IFloatMultiply
.35f9	68		pla				pla
.35fa	a2 0c		ldx #$0c			ldx 	#IFR1
.35fc	20 ca 36	jsr $36ca			jsr 	IFloatSetByte
.35ff	20 c0 30	jsr $30c0			jsr 	IFloatAdd
.3602	60		rts				rts
.06e5					IFCount:
>06e5							.fill 	1
.06e6					IFSignFlag:
>06e6							.fill 	1
.06e7					IFDecimalPlaces:
>06e7							.fill 	1
.3603					TableTen:
>3603	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3607	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>360b	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>360f	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3613	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3617					IFloatPushRx:
.3617	5a		phy				phy
.3618	ac e8 06	ldy $06e8			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.361b	b5 00		lda $00,x			lda 	IM0,x
.361d	99 e9 06	sta $06e9,y			sta 	IFStack,y
.3620	b5 01		lda $01,x			lda 	IM1,x
.3622	99 ea 06	sta $06ea,y			sta 	IFStack+1,y
.3625	b5 02		lda $02,x			lda 	IM2,x
.3627	99 eb 06	sta $06eb,y			sta 	IFStack+2,y
.362a	b5 03		lda $03,x			lda 	IExp,x
.362c	99 ec 06	sta $06ec,y			sta 	IFStack+3,y
.362f	c8		iny				iny
.3630	c8		iny				iny
.3631	c8		iny				iny
.3632	c8		iny				iny
.3633	8c e8 06	sty $06e8			sty 	IFStackIndex 				; update SP
.3636	7a		ply				ply
.3637	60		rts				rts
.3638					IFloatPullRx:
.3638	5a		phy				phy
.3639	ac e8 06	ldy $06e8			ldy 	IFStackIndex	 			; decrement SP
.363c	88		dey				dey
.363d	88		dey				dey
.363e	88		dey				dey
.363f	88		dey				dey
.3640	b9 e9 06	lda $06e9,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3643	95 00		sta $00,x			sta 	IM0,x
.3645	b9 ea 06	lda $06ea,y			lda 	IFStack+1,y
.3648	95 01		sta $01,x			sta 	IM1,x
.364a	b9 eb 06	lda $06eb,y			lda 	IFStack+2,y
.364d	95 02		sta $02,x			sta 	IM2,x
.364f	b9 ec 06	lda $06ec,y			lda 	IFStack+3,y
.3652	95 03		sta $03,x			sta 	IExp,x
.3654	8c e8 06	sty $06e8			sty 	IFStackIndex 				; update SP
.3657	7a		ply				ply
.3658	60		rts				rts
.06e8					IFStackIndex:
>06e8							.fill 	1
.06e9					IFStack:
>06e9							.fill 	16*4
.3659					IFloatCopyFromRegister:
.3659	b5 00		lda $00,x			lda 	0,x
.365b	85 08		sta $08				sta 	IFR0
.365d	b5 01		lda $01,x			lda 	1,x
.365f	85 09		sta $09				sta 	IFR0+1
.3661	b5 02		lda $02,x			lda 	2,x
.3663	85 0a		sta $0a				sta 	IFR0+2
.3665	b5 03		lda $03,x			lda 	3,x
.3667	85 0b		sta $0b				sta 	IFR0+3
.3669	60		rts				rts
.366a					IFloatCopyToRegister:
.366a	a5 08		lda $08				lda 	IFR0
.366c	95 00		sta $00,x			sta 	0,x
.366e	a5 09		lda $09				lda 	IFR0+1
.3670	95 01		sta $01,x			sta 	1,x
.3672	a5 0a		lda $0a				lda 	IFR0+2
.3674	95 02		sta $02,x			sta 	2,x
.3676	a5 0b		lda $0b				lda 	IFR0+3
.3678	95 03		sta $03,x			sta 	3,x
.367a	60		rts				rts
.367b					IFloatLoadInline:
.367b	68		pla				pla 								; pop address off to iTemp0
.367c	85 20		sta $20				sta 	iTemp0
.367e	68		pla				pla
.367f	85 21		sta $21				sta 	iTemp0+1
.3681	a0 01		ldy #$01			ldy 	#1
.3683	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3685	95 00		sta $00,x			sta 	0,x
.3687	c8		iny				iny
.3688	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.368a	95 01		sta $01,x			sta 	1,x
.368c	c8		iny				iny
.368d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.368f	95 02		sta $02,x			sta 	2,x
.3691	c8		iny				iny
.3692	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3694	95 03		sta $03,x			sta 	3,x
.3696	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3697	a5 20		lda $20				lda 	iTemp0
.3699	69 05		adc #$05			adc 	#5
.369b	85 20		sta $20				sta 	iTemp0
.369d	90 02		bcc $36a1			bcc 	_IFLINoCarry
.369f	e6 21		inc $21				inc 	iTemp0+1
.36a1					_IFLINoCarry:
.36a1	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.36a4					IFloatMultiply8BitRx:
.36a4	5a		phy		        phy
.36a5	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.36a7	a4 08		ldy $08		        ldy     IFR0+IM0
.36a9	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.36aa	85 08		sta $08		        sta     IFR0+IM0
.36ac	84 09		sty $09		        sty     IFR0+IM1
.36ae	a9 00		lda #$00	        lda     #0
.36b0	a0 08		ldy #$08	        ldy     #8
.36b2					_IFMLoop:
.36b2	90 03		bcc $36b7	        bcc     _IFMNoAdd
.36b4	18		clc		        clc
.36b5	65 09		adc $09		        adc     IFR0+IM1
.36b7					_IFMNoAdd:
.36b7	6a		ror a		        ror     a
.36b8	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.36ba	88		dey		        dey
.36bb	d0 f5		bne $36b2	        bne     _IFMLoop
.36bd	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.36bf	7a		ply		        ply
.36c0	60		rts		        rts
.36c1					IFloatCheckZero:
.36c1	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.36c3	15 01		ora $01,x			ora 	IM1,x
.36c5	15 02		ora $02,x			ora 	IM2,x
.36c7	60		rts				rts
.36c8					IFloatSetZero:
.36c8	a9 00		lda #$00			lda 	#0
.36ca					IFloatSetByte:
.36ca	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.36cc	74 01		stz $01,x			stz 	IM1,x
.36ce	74 02		stz $02,x			stz 	IM2,x
.36d0	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.36d2	60		rts				rts
.36d3					IFloatNegate:
.36d3	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.36d5	49 40		eor #$40			eor 	#IFSign
.36d7	95 03		sta $03,x			sta 	IExp,x
.36d9	18		clc				clc
.36da	60		rts				rts
.36db					IFloatMantissaNegate:
.36db	38		sec				sec 								; when you want a real 2's complement negative value.
.36dc	a9 00		lda #$00			lda 	#0
.36de	f5 00		sbc $00,x			sbc 	IM0,x
.36e0	95 00		sta $00,x			sta 	IM0,x
.36e2	a9 00		lda #$00			lda 	#0
.36e4	f5 01		sbc $01,x			sbc 	IM1,x
.36e6	95 01		sta $01,x			sta 	IM1,x
.36e8	a9 00		lda #$00			lda 	#0
.36ea	f5 02		sbc $02,x			sbc 	IM2,x
.36ec	95 02		sta $02,x			sta 	IM2,x
.36ee	60		rts				rts
.36ef					IFloatShiftLeft:
.36ef	18		clc				clc
.36f0					IFloatRotateLeft:
.36f0	36 00		rol $00,x			rol 	IM0,x
.36f2	36 01		rol $01,x			rol 	IM1,x
.36f4	36 02		rol $02,x			rol 	IM2,x
.36f6	60		rts				rts
.36f7					IFloatShiftRight:
.36f7	18		clc				clc
.36f8					IFloatRotateRight:
.36f8	76 02		ror $02,x			ror 	IM2,x
.36fa	76 01		ror $01,x			ror 	IM1,x
.36fc	76 00		ror $00,x			ror 	IM0,x
.36fe	60		rts				rts
.36ff					IFloatNormalise:
.36ff	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; is it zero
.3702	f0 18		beq $371c			beq 	_IFNExitZero 				; if so exit
.3704					_IFNLoop:
.3704	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3706	29 c0		and #$c0			and 	#$C0
.3708	c9 40		cmp #$40			cmp 	#$40
.370a	f0 13		beq $371f			beq 	_IFNExitOkay 				; if so , then we are done.
.370c	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.370e	29 3f		and #$3f			and 	#$3F
.3710	c9 20		cmp #$20			cmp 	#$20
.3712	f0 0b		beq $371f			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3714	20 35 37	jsr $3735			jsr 	IFloatDecExponent
.3717	20 ef 36	jsr $36ef			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.371a	80 e8		bra $3704			bra 	_IFNLoop
.371c					_IFNExitZero:
.371c	20 c8 36	jsr $36c8			jsr 	IFloatSetZero 				; set the result to zero
.371f					_IFNExitOkay:
.371f	18		clc				clc  								; return with CC.
.3720	60		rts				rts
.3721					IFloatIncExponent:
.3721	b5 03		lda $03,x			lda 	IExp,x
.3723	48		pha				pha
.3724	29 c0		and #$c0			and 	#$C0
.3726	8d 29 07	sta $0729			sta 	IFXTemp
.3729	68		pla				pla
.372a	1a		inc a				inc 	a
.372b	29 3f		and #$3f			and 	#$3F
.372d	48		pha				pha
.372e	0d 29 07	ora $0729			ora 	IFXTemp
.3731	95 03		sta $03,x			sta 	IExp,x
.3733	68		pla				pla
.3734	60		rts				rts
.3735					IFloatDecExponent:
.3735	b5 03		lda $03,x			lda 	IExp,x
.3737	48		pha				pha
.3738	29 c0		and #$c0			and 	#$C0
.373a	8d 29 07	sta $0729			sta 	IFXTemp
.373d	68		pla				pla
.373e	3a		dec a				dec 	a
.373f	29 3f		and #$3f			and 	#$3F
.3741	48		pha				pha
.3742	0d 29 07	ora $0729			ora 	IFXTemp
.3745	95 03		sta $03,x			sta 	IExp,x
.3747	68		pla				pla
.3748	60		rts				rts
.0729					IFXTemp:
>0729							.fill 	1
.3749					IFloatBufferReset:
.3749	9c 2a 07	stz $072a			stz 	IFBufferCount
.374c	9c 2b 07	stz $072b			stz 	IFBuffer
.374f	60		rts				rts
.3750					IFloatGetBufferAddress:
.3750	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.3752	a2 2a		ldx #$2a			ldx 	#(IFBufferCount & $FF)
.3754	ad 2a 07	lda $072a			lda 	IFBufferCount
.3757	60		rts				rts
.3758					IFloatBufferWrite:
.3758	da		phx				phx
.3759	ae 2a 07	ldx $072a			ldx 	IFBufferCount
.375c	9d 2b 07	sta $072b,x			sta 	IFBuffer,x
.375f	9e 2c 07	stz $072c,x			stz 	IFBuffer+1,x
.3762	ee 2a 07	inc $072a			inc 	IFBufferCount
.3765	fa		plx				plx
.3766	60		rts				rts
.3767					IFloatStripTrailingZeros:
.3767	ae 2a 07	ldx $072a			ldx 	IFBufferCount
.376a	bd 2a 07	lda $072a,x			lda 	IFBuffer-1,x
.376d	c9 30		cmp #$30			cmp		#"0"
.376f	d0 0f		bne $3780			bne 	_IFSTExit
.3771	bd 29 07	lda $0729,x			lda 	IFBuffer-2,x
.3774	c9 2e		cmp #$2e			cmp 	#"."
.3776	f0 08		beq $3780			beq 	_IFSTExit
.3778	ce 2a 07	dec $072a			dec 	IFBufferCount
.377b	9e 2a 07	stz $072a,x			stz 	IFBuffer-1,x
.377e	80 e7		bra $3767			bra 	IFloatStripTrailingZeros
.3780					_IFSTExit:
.3780	60		rts				rts
.072a					IFBufferCount:
>072a							.fill 	1
.072b					IFBuffer:
>072b							.fill 	25
.3781					IFloatCheckRange:
.3781	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.3783	09 40		ora #$40			ora 	#IFSign
.3785	85 0b		sta $0b				sta 	IFR0+IExp
.3787	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.3789	20 c0 30	jsr $30c0			jsr 	IFloatAdd 					; add allowed to error.
.378c	a2 08		ldx #$08			ldx 	#IFR0
.378e	20 c1 36	jsr $36c1			jsr 	IFloatCheckZero 			; error if < 0
.3791	f0 06		beq $3799			beq 	_IFAOkay
.3793	a5 0b		lda $0b				lda 	IFR0+IExp
.3795	29 40		and #$40			and 	#IFSign
.3797	d0 01		bne $379a			bne 	_IFAFail
.3799					_IFAOkay:
.3799	60		rts				rts
.379a					_IFAFail:
.379a	38		sec				sec
.379b	68		pla				pla 								; get address - 2
.379c	e9 02		sbc #$02			sbc 	#2
.379e	aa		tax				tax
.379f	68		pla				pla
.37a0	e9 00		sbc #$00			sbc 	#0
.37a2	a8		tay				tay
.37a3	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.37a5					_IFAStop:
>37a5	db						.byte 	$DB 						; display an error AA ADR ADR
.37a6	80 fd		bra $37a5			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
