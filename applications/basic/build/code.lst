
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Thu Jul  6 16:28:24 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 82 22	jsr $2282			jsr 	PGMSetBaseAddress
.1007	20 29 2f	jsr $2f29			jsr 	IFInitialise 				; setup math library
.100a	4c 90 15	jmp $1590			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="R"					AM_RELATIVE 	= 'R' 						; bra nnnn
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="T"					AM_ABSOLUTEI  	= 'T' 						; jmp (nnnn)   [only instance]
="U"					AM_ABSOLUTEIX	= 'U' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d4					AM_ZIND 	= ('T'|AM_ZPAGE) 				; lda (nn)
=$d5					AM_ZINDX	= ('U'|AM_ZPAGE) 				; lda (nn,x)
=$d6					AM_ZINDY	= ('V'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.100d					Command_AssemblerStart:
.100d					_CALoop:
.100d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.100f	c8		iny				iny 								; consume it.
.1010	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.1012	f0 15		beq $1029			beq 	_CALabel
.1014	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.1016	f0 30		beq $1048			beq 	_CAExit
.1018	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.101a	f0 f1		beq $100d			beq 	_CALoop
.101c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.101e	f0 14		beq $1034			beq 	_CAEnd
.1020	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.1022	c9 40		cmp #$40			cmp 	#$40
.1024	f0 08		beq $102e			beq 	_CAOpcode
.1026	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.1029					_CALabel:
.1029	20 72 11	jsr $1172			jsr 	ASLabel 					; handle a label
.102c	80 df		bra $100d			bra 	_CALoop
.102e					_CAOpcode:
.102e	88		dey				dey 								; get it back
.102f	20 62 11	jsr $1162			jsr 	ASOpcode 					; assemble that opcode.
.1032	80 d9		bra $100d			bra 	_CALoop
.1034	18		clc		_CAEnd:	clc 								; next line
.1035	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.1037	b2 18		lda ($18)			lda 	(codePtr)
.1039	65 18		adc $18				adc 	codePtr
.103b	85 18		sta $18				sta 	codePtr
.103d	90 02		bcc $1041			bcc 	_CANoCarry
.103f	e6 19		inc $19				inc 	codePtr+1
.1041					_CANoCarry:
.1041	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.1043	d0 c8		bne $100d			bne 	_CALoop 					; go round again
.1045	4c fc 16	jmp $16fc			jmp 	Command_END 				; do END.
.1048					_CAExit:
.1048	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.1049					ASCalculateOpcodeHash:
.1049	20 71 10	jsr $1071			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.104c	20 7e 10	jsr $107e			jsr 	_ASCProcess 				; go through the shift/multiply process
.104f	85 24		sta $24				sta 	zTemp0
.1051	20 71 10	jsr $1071			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.1054	18		clc				clc
.1055	65 24		adc $24				adc 	zTemp0 						; add previous result.
.1057	2a		rol a				rol 	a 							; 8 bit rotate left
.1058	69 00		adc #$00			adc 	#0
.105a	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.105c	20 7e 10	jsr $107e			jsr 	_ASCProcess 				; and shift/multiply again.
.105f	85 24		sta $24				sta 	zTemp0
.1061	20 71 10	jsr $1071			jsr 	_ASCGetCharacter 			; get third character
.1064	18		clc				clc
.1065	65 24		adc $24				adc 	zTemp0 						; and add
.1067	48		pha				pha
.1068	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.106a	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.106c	d0 1b		bne $1089			bne 	_ASCSyntax
.106e	c8		iny				iny
.106f	68		pla				pla 								; restore and exit
.1070	60		rts				rts
.1071					_ASCGetCharacter:
.1071	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.1073	c8		iny				iny
.1074	38		sec				sec
.1075	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.1077	30 10		bmi $1089			bmi 	_ASCSyntax 					; check range.
.1079	c9 1a		cmp #$1a			cmp 	#26
.107b	b0 0c		bcs $1089			bcs 	_ASCSyntax
.107d	60		rts				rts
.107e					_ASCProcess:
.107e	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.1080	0a		asl a				asl 	a
.1081	0a		asl a				asl 	a
.1082	18		clc				clc
.1083	65 25		adc $25				adc 	zTemp0+1
.1085	18		clc				clc 								; add 68
.1086	69 44		adc #$44			adc 	#68
.1088	60		rts				rts
.1089					_ASCSyntax:
.1089	4c c6 28	jmp $28c6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/findmode.asm

.108c					ASIdentifyAddressMode:
>108c	db						.byte 	$DB
.108d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.108f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.1091	f0 17		beq $10aa			beq 	_ASImplied
.1093	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1095	f0 13		beq $10aa			beq 	_ASImplied
.1097	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.1099	f0 12		beq $10ad			beq 	_ASImmediate
.109b	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.109d	f0 15		beq $10b4			beq 	_ASIndirect
.109f	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.10a2	20 dc 10	jsr $10dc			jsr 	ASCheckIndex 				; check index follows
.10a5	b0 02		bcs $10a9			bcs 	_ASIndexed 					; index found ? then it will return X Y
.10a7	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.10a9					_ASIndexed:
.10a9	60		rts				rts
.10aa					_ASImplied:
.10aa	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.10ac	60		rts				rts
.10ad					_ASImmediate:
.10ad	c8		iny				iny 								; consume #
.10ae	20 f5 18	jsr $18f5			jsr 	EXPEvalInteger8 			; 8 bit operand
.10b1	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.10b3	60		rts				rts
.10b4					_ASIndirect:
.10b4	c8		iny				iny 								; consume the open bracket
.10b5	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.10b8	20 dc 10	jsr $10dc			jsr 	ASCheckIndex 				; look for ,X
.10bb	b0 12		bcs $10cf			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.10bd	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.10c0	20 dc 10	jsr $10dc			jsr 	ASCheckIndex
.10c3	90 07		bcc $10cc			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.10c5	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.10c7	d0 10		bne $10d9			bne 	ASCISyntax 					; if not error
.10c9	a9 d6		lda #$d6			lda 	#AM_ZINDY 					; return (nn),y
.10cb	60		rts				rts
.10cc					_ASIIndirect:
.10cc	a9 54		lda #$54			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.10ce	60		rts				rts
.10cf					_ASInternalIndirect:
.10cf	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.10d1	d0 06		bne $10d9			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.10d3	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.10d6	a9 55		lda #$55			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.10d8	60		rts				rts
.10d9					ASCISyntax:
.10d9	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.10dc					ASCheckIndex:
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	d0 18		bne $10fa			bne 	_ASCIFail
.10e2	c8		iny				iny 								; consume comma
.10e3	b1 18		lda ($18),y			lda 	(codePtr),y
.10e5	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.10e7	f0 04		beq $10ed			beq 	_ASCIFound
.10e9	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.10eb	d0 ec		bne $10d9			bne 	ASCISyntax
.10ed					_ASCIFound:
.10ed	aa		tax				tax 								; save X or Y in X
.10ee	c8		iny				iny 								; consume
.10ef	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.10f1	c8		iny				iny
.10f2	c9 7c		cmp #$7c			cmp 	#$7C
.10f4	d0 e3		bne $10d9			bne 	ASCISyntax
.10f6	8a		txa				txa 								; get X/Y back
.10f7	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.10f8	38		sec				sec
.10f9	60		rts				rts
.10fa					_ASCIFail:
.10fa	18		clc				clc
.10fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.10fc					ASGenerateCode:
.10fc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.10fd					ASGetModeForOpcode:
.10fd	5a		phy				phy
.10fe	a8		tay				tay 								; save in Y
.10ff	a2 00		ldx #$00			ldx 	#0
.1101					_ASGSearch:
.1101	98		tya				tya 								; check if opcode matches
.1102	dd 47 11	cmp $1147,x			cmp 	ASGSpecialCases,x
.1105	f0 1b		beq $1122			beq 	_ASGIsSpecial
.1107	e8		inx				inx
.1108	e8		inx				inx
.1109	bd 47 11	lda $1147,x			lda 	ASGSpecialCases,x 			; check end of table ($F3 is an illegal 65C02 opcode)
.110c	c9 f3		cmp #$f3			cmp 	#$F3
.110e	d0 f1		bne $1101			bne 	_ASGSearch
.1110	98		tya				tya 								; only interested in lower 5 bits.
.1111	29 1f		and #$1f			and 	#$1F
.1113	a8		tay				tay
.1114	29 0f		and #$0f			and 	#$0F 						; lower 4 bits of the opcode
.1116	0a		asl a				asl 	a 							; index into ASG Table
.1117	aa		tax				tax
.1118	c0 10		cpy #$10			cpy 	#$10 						; was bit 5 set,  e.g. the MSB is odd
.111a	90 01		bcc $111d			bcc 	_ASGEven
.111c	e8		inx				inx 								; if so, take from second half.
.111d					_ASGEven:
.111d	bd 27 11	lda $1127,x			lda 	ASGTable,x 					; fetch the mode from the table
.1120	7a		ply				ply
.1121	60		rts				rts
.1122					_ASGIsSpecial:
.1122	bd 48 11	lda $1148,x			lda 	ASGSpecialCases+1,x 		; get special case for that mode.
.1125	7a		ply				ply
.1126	60		rts				rts
.1127					ASGTable:
>1127	a3 52						.byte 	AM_IMMEDIATE,AM_RELATIVE				; x0
>1129	d5 d6						.byte 	AM_ZINDX,AM_ZINDY 						; x1
>112b	a3 d4						.byte 	AM_IMMEDIATE,AM_ZIND 					; x2
>112d	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x3 (all NOP)
>112f	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x4
>1131	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x5
>1133	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x6
>1135	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; x7
>1137	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x8
>1139	a3 59						.byte 	AM_IMMEDIATE,AM_ABSOLUTEY				; x9
>113b	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xA
>113d	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xB
>113f	41 41						.byte 	AM_ABSOLUTE,AM_ABSOLUTE 				; xC
>1141	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xD
>1143	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xE
>1145	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; xF
.1147					ASGSpecialCases:
>1147	80 52						.byte	$80	,	AM_RELATIVE						;	BRA	rel
>1149	14 a3						.byte	$14	,	AM_IMMEDIATE					;	TRB	imm
>114b	96 d9						.byte	$96	,	AM_ZEROY						;	STX	nn,y
>114d	b6 d9						.byte	$B6	,	AM_ZEROY						;	LDX	nn,y
>114f	3c 58						.byte	$3C	,	AM_ABSOLUTEX					;	BIT	nnnn,x
>1151	6c 54						.byte	$6C	,	AM_ABSOLUTEI					;	JMP	(nnnn)
>1153	7c 55						.byte	$7C	,	AM_ABSOLUTEIX					;	JMP 	(nnnn,x)
>1155	bc 58						.byte	$BC	,	AM_ABSOLUTEX					;	LDY	nnnn,x
>1157	be 59						.byte	$BE	,	AM_ABSOLUTEY					;	LDX	nnnn,y
>1159	00 49						.byte	$00	,	AM_IMPLIED						;	BRK
>115b	20 41						.byte	$20	,	AM_ABSOLUTE						;	JSR	nnnn
>115d	40 49						.byte	$40	,	AM_IMPLIED						;	RTI
>115f	60 49						.byte	$60	,	AM_IMPLIED						;	RTS
>1161	f3						.byte 	$F3 									; (illegal opcode)

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.1162					ASOpcode:
.1162	20 49 10	jsr $1049			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.1165	8d 03 05	sta $0503			sta 	ASCurrOpcode
.1168	20 8c 10	jsr $108c			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.116b	8d 04 05	sta $0504			sta 	ASCurrMode
.116e	20 fc 10	jsr $10fc			jsr 	ASGenerateCode 				; search and generate appropriate code.
.1171	60		rts				rts
.0503					ASCurrOpcode:
>0503							.fill 	1
.0504					ASCurrMode:
>0504							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.1172					ASLabel:
.1172	20 5f 19	jsr $195f			jsr 	EXPTermR0 					; get term
.1175	90 1b		bcc $1192			bcc 	_ALError 					; must be a reference term.
.1177	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.1179	30 17		bmi $1192			bmi 	_ALError
.117b	5a		phy				phy
.117c	ad b2 06	lda $06b2			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.117f	92 08		sta ($08)			sta 	(IFR0+IM0)
.1181	a0 01		ldy #$01			ldy 	#1
.1183	ad b3 06	lda $06b3			lda 	('P'-'A')*4 + FastVariables+1
.1186	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1188	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.118a	c8		iny				iny
.118b	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.118d	c8		iny				iny
.118e	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1190	7a		ply				ply
.1191	60		rts				rts
.1192					_ALError:
.1192	4c c6 28	jmp $28c6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1195					Command_ASSERT:
.1195	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; get a number to assert
.1198	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.119a	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.119d	f0 01		beq $11a0			beq 	_CAFail 					; if so, the assert fails.
.119f	60		rts				rts
.11a0					_CAFail:
.11a0	4c 1c 29	jmp $291c		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.11a3					Command_CLEAR:
.11a3	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.11a5	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11a7	f0 14		beq $11bd			beq 	_CLNoParam
.11a9	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.11ab	f0 10		beq $11bd			beq 	_CLNoParam
.11ad	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; address for CLEAR
.11b0	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.11b2	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.11b4	b0 0b		bcs $11c1			bcs 	_CLMemory
.11b6	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.11b8	90 07		bcc $11c1			bcc 	_CLMemory
.11ba	8d 1d 05	sta $051d			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.11bd					_CLNoParam:
.11bd	20 c4 11	jsr $11c4			jsr 	ClearCode
.11c0	60		rts				rts
.11c1					_CLMemory:
.11c1	4c b6 29	jmp $29b6		jmp	ErrorV_memory
.11c4					ClearCode:
.11c4	20 95 22	jsr $2295			jsr 	PGMEndProgram 				; end program => zTemp0
.11c7	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.11c9	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.11cb	1a		inc a				inc 	a
.11cc	85 2b		sta $2b				sta 	freeMemory+1
.11ce	20 c8 2e	jsr $2ec8			jsr 	VARClearHashTables
.11d1	ad 1d 05	lda $051d			lda 	PGMEndMemoryHigh
.11d4	20 0d 2b	jsr $2b0d			jsr 	StackReset 					; page passed on in A
.11d7	20 6c 2b	jsr $2b6c			jsr 	StringSystemInitialise
.11da	20 31 28	jsr $2831			jsr 	ScanProcedures
.11dd	20 5e 16	jsr $165e			jsr 	Command_RESTORE
.11e0	60		rts				rts
.11e1					AllocateMemory:
.11e1	5a		phy				phy 								; save Y
.11e2	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.11e4	5a		phy				phy
.11e5	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.11e7	5a		phy				phy
.11e8	a8		tay				tay 								; count is now in XY
.11e9					_AllocateLoop:
.11e9	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.11eb	d0 04		bne $11f1			bne 	_AllocateOne
.11ed	c0 00		cpy #$00			cpy 	#0
.11ef	f0 15		beq $1206			beq 	_AllocateExit
.11f1					_AllocateOne:
.11f1	a9 00		lda #$00			lda 	#0 							; zero byte
.11f3	92 2a		sta ($2a)			sta 	(freeMemory)
.11f5	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.11f7	d0 05		bne $11fe			bne 	_AllocateSkipCarry
.11f9	e6 2b		inc $2b				inc 	freeMemory+1
.11fb	20 0a 12	jsr $120a			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.11fe					_AllocateSkipCarry:
.11fe	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1200	d0 01		bne $1203			bne 	_AllocateSkipBorrow
.1202	ca		dex				dex
.1203					_AllocateSkipBorrow:
.1203	88		dey				dey
.1204	80 e3		bra $11e9			bra 	_AllocateLoop
.1206					_AllocateExit:
.1206	fa		plx				plx 								; restore address
.1207	68		pla				pla
.1208	7a		ply				ply 								; restore Y
.1209	60		rts				rts
.120a					ClearCheckMemory:
.120a	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.120c	1a		inc a				inc 	a 							; spacing 2 pages
.120d	1a		inc a				inc 	a
.120e	cd 25 06	cmp $0625			cmp 	stringMemory+1 				; problems if hit string memory
.1211	b0 01		bcs $1214			bcs  	_CCMError
.1213	60		rts				rts
.1214					_CCMError:
.1214	4c b6 29	jmp $29b6		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1217					CommandDIM:
.1217	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1219	29 c0		and #$c0			and 	#$C0
.121b	c9 40		cmp #$40			cmp 	#$40
.121d	d0 39		bne $1258			bne 	_CDSyntax
.121f	20 7f 2e	jsr $2e7f			jsr 	VARGetInfo 					; get information
.1222	ad 33 06	lda $0633			lda 	VARType 					; check array.
.1225	29 02		and #$02			and 	#2
.1227	f0 2f		beq $1258			beq 	_CDSyntax
.1229	20 31 2e	jsr $2e31			jsr 	VARFind 					; does it already exist
.122c	b0 2d		bcs $125b			bcs 	_CDExists
.122e	20 dd 2d	jsr $2ddd			jsr 	VARCreate 					; create it - returns data ptr in XA
.1231	da		phx				phx 								; save target address
.1232	48		pha				pha
.1233	ad 33 06	lda $0633			lda 	VARType 					; type ID.
.1236	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1238	20 5e 12	jsr $125e			jsr 	CreateArray 				; create array to XA
.123b	84 26		sty $26				sty 	zTemp1 						; save Y
.123d	7a		ply				ply 								; restore target to zTemp0
.123e	84 24		sty $24				sty 	zTemp0
.1240	7a		ply				ply
.1241	84 25		sty $25				sty 	zTemp0+1
.1243	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.1245	a0 01		ldy #$01			ldy 	#1
.1247	8a		txa				txa
.1248	91 24		sta ($24),y			sta 	(zTemp0),y
.124a	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.124c	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 				; check )
.124f	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.1251	c8		iny				iny
.1252	c9 99		cmp #$99			cmp 	#PR_COMMA
.1254	f0 c1		beq $1217			beq 	CommandDIM
.1256	88		dey				dey
.1257	60		rts				rts
.1258					_CDSyntax:
.1258	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.125b					_CDExists:
.125b	4c 8e 29	jmp $298e		jmp	ErrorV_redefine
.125e					CreateArray:
.125e	8d 05 05	sta $0505			sta 	CAType						; save type
.1261	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; get array dimension to R0
.1264	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.1266	c9 99		cmp #$99			cmp 	#PR_COMMA
.1268	f0 04		beq $126e			beq 	_CATwoDimensions
.126a	20 ba 12	jsr $12ba			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.126d	60		rts				rts
.126e					_CATwoDimensions:
.126e	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.1270	8d 07 05	sta $0507			sta 	CADim1+1
.1273	a5 08		lda $08				lda 	IFR0+IM0
.1275	8d 06 05	sta $0506			sta 	CADim1+0
.1278	20 a7 2a	jsr $2aa7			jsr 	ERRCheckComma 				; check comma
.127b	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.127e	5a		phy				phy 								; save Y position
.127f	18		clc				clc 								; allocate the outer array of pointers.
.1280	ae 07 05	ldx $0507			ldx 	CADim1+1
.1283	ad 06 05	lda $0506			lda 	CADim1
.1286	20 f9 12	jsr $12f9			jsr 	CSAAllocate 				; allocate the outer array
.1289	da		phx				phx									; save this address on the stack
.128a	48		pha				pha
.128b	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.128d	85 28		sta $28				sta 	zTemp2
.128f					_CACreateSubLoop:
.128f	38		sec				sec
.1290	20 ba 12	jsr $12ba			jsr 	CreateSingleArray 			; create data array of required size.
.1293	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1295	91 28		sta ($28),y			sta 	(zTemp2),y
.1297	8a		txa				txa
.1298	c8		iny				iny
.1299	91 28		sta ($28),y			sta 	(zTemp2),y
.129b	18		clc				clc  								; next slot.
.129c	a5 28		lda $28				lda 	zTemp2
.129e	69 02		adc #$02			adc 	#2
.12a0	85 28		sta $28				sta 	zTemp2
.12a2	90 02		bcc $12a6			bcc 	_CACNoCarry
.12a4	e6 29		inc $29				inc 	zTemp2+1
.12a6					_CACNoCarry:
.12a6	ad 06 05	lda $0506			lda 	CADim1 						; use DIM1 as a counter
.12a9	d0 03		bne $12ae			bne 	_CACNoBorrow
.12ab	ce 07 05	dec $0507			dec 	CADim1+1
.12ae					_CACNoBorrow:
.12ae	ce 06 05	dec $0506			dec 	CADim1
.12b1	ad 07 05	lda $0507			lda 	CADim1+1 					; but do one more.
.12b4	10 d9		bpl $128f			bpl 	_CACreateSubLoop
.12b6	68		pla				pla
.12b7	fa		plx				plx
.12b8	7a		ply				ply
.12b9	60		rts				rts
.12ba					CreateSingleArray:
.12ba	5a		phy				phy
.12bb	38		sec				sec 								; allocate memory block all zeros.
.12bc	a5 08		lda $08				lda 	IFR0+IM0
.12be	a6 09		ldx $09				ldx 	IFR0+IM1
.12c0	20 f9 12	jsr $12f9			jsr 	CSAAllocate
.12c3	ac 05 05	ldy $0505			ldy 	CAType 						; if numbers, we don't need to initialise.
.12c6	f0 2f		beq $12f7			beq 	_CSANoInit
.12c8	da		phx				phx 								; save address of new array
.12c9	48		pha				pha
.12ca	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.12cc	86 25		stx $25				stx 	zTemp0+1
.12ce	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.12d0	b1 24		lda ($24),y			lda 	(zTemp0),y
.12d2	a8		tay				tay
.12d3	b2 24		lda ($24)			lda 	(zTemp0)
.12d5	aa		tax				tax
.12d6					_CSAEraseString:
.12d6	5a		phy				phy
.12d7	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.12d9	a9 80		lda #$80			lda 	#$80
.12db	91 24		sta ($24),y			sta 	(zTemp0),y
.12dd	7a		ply				ply
.12de	18		clc				clc 								; add 4 to next slot.
.12df	a5 24		lda $24				lda 	zTemp0
.12e1	69 04		adc #$04			adc 	#4
.12e3	85 24		sta $24				sta 	zTemp0
.12e5	90 02		bcc $12e9			bcc 	_CSAENoCarry
.12e7	e6 25		inc $25				inc 	zTemp0+1
.12e9					_CSAENoCarry:
.12e9	e0 00		cpx #$00			cpx 	#0
.12eb	d0 01		bne $12ee			bne 	_CSANoBorrow
.12ed	88		dey				dey
.12ee					_CSANoBorrow:
.12ee	ca		dex				dex
.12ef	d0 e5		bne $12d6			bne 	_CSAEraseString
.12f1	c0 00		cpy #$00			cpy 	#0
.12f3	d0 e1		bne $12d6			bne 	_CSAEraseString
.12f5	68		pla				pla
.12f6	fa		plx				plx
.12f7					_CSANoInit:
.12f7	7a		ply				ply
.12f8	60		rts				rts
.12f9					CSAAllocate:
.12f9	08		php				php 								; save type flag.
.12fa	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.12fb	d0 01		bne $12fe			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.12fd	e8		inx				inx
.12fe					_CSAANoCarry:
.12fe	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1300	b0 2e		bcs $1330			bcs 	_CSARange
.1302	28		plp				plp 								; restore type flag
.1303	08		php				php 								; save it back again.
.1304	da		phx				phx 								; save size.
.1305	48		pha				pha
.1306	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1308	90 03		bcc $130d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.130a	0a		asl a				asl 	a
.130b	26 25		rol $25				rol 	zTemp0+1
.130d					_CSAATimes2:
.130d	0a		asl a				asl 	a
.130e	26 25		rol $25				rol 	zTemp0+1
.1310	18		clc				clc
.1311	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1313	90 02		bcc $1317			bcc 	_CSAANoCarry2
.1315	e6 25		inc $25				inc 	zTemp0+1
.1317					_CSAANoCarry2:
.1317	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1319	20 e1 11	jsr $11e1			jsr 	AllocateMemory 				; allocate memory to XA
.131c	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.131e	85 24		sta $24				sta 	zTemp0
.1320	68		pla				pla  								; write element count to first 2 bytes
.1321	92 24		sta ($24)			sta 	(zTemp0)
.1323	68		pla				pla 								; msb of element count
.1324	28		plp				plp 								; CC if pointer array
.1325	b0 02		bcs $1329			bcs 	_CSAAIsData
.1327	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1329					_CSAAIsData:
.1329	a0 01		ldy #$01			ldy 	#1
.132b	91 24		sta ($24),y			sta 	(zTemp0),y
.132d	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.132f	60		rts				rts
.1330					_CSARange:
.1330	4c d7 28	jmp $28d7		jmp	ErrorV_range
.0505					CAType:
>0505							.fill 	1
.0506					CADim1:
>0506							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1333					Command_Doke:
.1333	38		sec				sec
.1334	80 01		bra $1337			bra 	DPCommon
.1336					Command_Poke:
.1336	18		clc				clc
.1337					DPCommon:
.1337	08		php				php 								; CS if DOKE
.1338	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; address
.133b	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.133d	48		pha				pha
.133e	a5 09		lda $09				lda 	IFR0+IM1
.1340	48		pha				pha
.1341	20 a7 2a	jsr $2aa7			jsr 	ERRCheckComma 				; [dp]oke address,data
.1344	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16
.1347	68		pla				pla 								; get address back
.1348	85 25		sta $25				sta 	zTemp0+1
.134a	68		pla				pla
.134b	85 24		sta $24				sta 	zTemp0
.134d	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.134f	92 24		sta ($24)			sta 	(zTemp0)
.1351	28		plp				plp 								; done if CC
.1352	90 08		bcc $135c			bcc 	_DPExit
.1354	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.1355	a5 09		lda $09				lda 	IFR0+IM1
.1357	a0 01		ldy #$01			ldy 	#1
.1359	91 24		sta ($24),y			sta 	(zTemp0),y
.135b	7a		ply				ply
.135c					_DPExit:
.135c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.135d					Command_GOTO:
.135d	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; get line number
.1360					GotoR0:
.1360	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.1363	85 19		sta $19				sta 	codePtr+1
.1365	64 18		stz $18				stz 	codePtr
.1367					_GOSearch:
.1367	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.1369	f0 1f		beq $138a			beq 	_GOError
.136b	a0 01		ldy #$01			ldy 	#1 							; found line #
.136d	b1 18		lda ($18),y			lda 	(codePtr),y
.136f	c5 08		cmp $08				cmp 	IFR0+IM0
.1371	d0 0a		bne $137d			bne 	_GONext
.1373	c8		iny				iny
.1374	b1 18		lda ($18),y			lda 	(codePtr),y
.1376	c5 09		cmp $09				cmp 	IFR0+IM1
.1378	d0 03		bne $137d			bne 	_GONext
.137a	4c a3 16	jmp $16a3			jmp 	RUNNewLine
.137d					_GONext:
.137d	18		clc				clc 								; advance to next line.
.137e	b2 18		lda ($18)			lda 	(codePtr)
.1380	65 18		adc $18				adc 	codePtr
.1382	85 18		sta $18				sta 	codePtr
.1384	90 e1		bcc $1367			bcc 	_GOSearch
.1386	e6 19		inc $19				inc 	codePtr+1
.1388	80 dd		bra $1367			bra 	_GOSearch
.138a					_GOError:
.138a	4c 5b 2a	jmp $2a5b		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.138d					Command_Input:
.138d	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.138f	8d 08 05	sta $0508			sta 	InputFlag
.1392	80 03		bra $1397			bra 	Command_IP_Main
.1394					Command_Print:
.1394	9c 08 05	stz $0508			stz 	InputFlag
.1397					Command_IP_Main:
.1397	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1398					_CPLoop:
.1398	08		php				php 								; save "last action" flag
.1399	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.139b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.139d	f0 48		beq $13e7			beq 	_CPExit 					; without consuming
.139f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.13a1	f0 44		beq $13e7			beq 	_CPExit
.13a3	68		pla				pla 								; throw last action flag
.13a4	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.13a6	c8		iny				iny
.13a7	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.13a9	f0 39		beq $13e4			beq 	_CPContinueWithSameLine
.13ab	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.13ad	f0 30		beq $13df			beq 	_CPTab
.13af	88		dey				dey 								; undo the get.
.13b0	2c 08 05	bit $0508			bit 	InputFlag 					; check for Input
.13b3	10 0b		bpl $13c0			bpl	 	_CPNotInput
.13b5	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.13b7	c9 40		cmp #$40			cmp 	#$40
.13b9	d0 05		bne $13c0			bne 	_CPNotInput
.13bb	20 f0 13	jsr $13f0			jsr 	_CPInputCode 				; input code
.13be	80 d7		bra $1397			bra 	Command_IP_Main 			; and go round again.
.13c0					_CPNotInput:
.13c0	20 97 18	jsr $1897			jsr 	EXPEvaluateExpression 		; evaluate expression.
.13c3	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.13c5	10 0e		bpl $13d5			bpl 	_CPNumber
.13c7	5a		phy				phy
.13c8	18		clc				clc 								; string address to YX
.13c9	a5 08		lda $08				lda 	IFR0+IM0
.13cb	aa		tax				tax
.13cc	a5 09		lda $09				lda 	IFR0+IM1
.13ce	a8		tay				tay
.13cf	20 24 14	jsr $1424			jsr 	CPPrintYX 					; print YX
.13d2	7a		ply				ply
.13d3	80 c2		bra $1397			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.13d5					_CPNumber:
.13d5	5a		phy				phy
.13d6	20 39 33	jsr $3339			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.13d9	20 24 14	jsr $1424			jsr 	CPPrintYX 					; print string at YX
.13dc	7a		ply				ply
.13dd	80 b8		bra $1397			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.13df					_CPTab:
.13df	a9 09		lda #$09			lda 	#9 							; print TAB
.13e1	20 3c 14	jsr $143c			jsr 	CPPrintA
.13e4					_CPContinueWithSameLine:
.13e4	38		sec				sec 								; loop round with carry set, which
.13e5	80 b1		bra $1398			bra 	_CPLoop 					; will inhibit final CR
.13e7					_CPExit:
.13e7	28		plp				plp 								; get last action flag
.13e8	b0 05		bcs $13ef			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.13ea	a9 0d		lda #$0d			lda 	#13 						; print new line
.13ec	20 3c 14	jsr $143c			jsr 	CPPrintA
.13ef					_CPExit2:
.13ef	60		rts				rts
.13f0					_CPInputCode:
.13f0	20 5f 19	jsr $195f			jsr 	EXPTermR0 					; get the term, the thing being input to
.13f3	5a		phy				phy 								; save position
.13f4	20 39 14	jsr $1439			jsr 	CPInputA					; input a line to YX
.13f7	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.13f9	30 18		bmi $1413			bmi 	_CPInputString
.13fb	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.13fd	48		pha				pha
.13fe	a5 09		lda $09				lda 	IFR0+IM1
.1400	48		pha				pha
.1401	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.1403	84 25		sty $25				sty 	zTemp0+1
.1405	20 49 1c	jsr $1c49			jsr 	VALConversionZTemp0
.1408	68		pla				pla 								; do the assign.
.1409	85 25		sta $25				sta 	zTemp0+1
.140b	68		pla				pla
.140c	85 24		sta $24				sta 	zTemp0
.140e	20 64 14	jsr $1464			jsr 	AssignNumber
.1411	7a		ply				ply
.1412	60		rts				rts
.1413					_CPInputString:
.1413	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1415	85 24		sta $24				sta 	zTemp0
.1417	a5 09		lda $09				lda 	IFR0+IM1
.1419	85 25		sta $25				sta 	zTemp0+1
.141b	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.141d	84 09		sty $09				sty 	IFR0+IM1
.141f	20 7b 14	jsr $147b			jsr 	AssignString 				; assign the string
.1422	7a		ply				ply 								; exit
.1423	60		rts				rts
.1424					CPPrintYX:
.1424	86 24		stx $24				stx 	zTemp0
.1426	84 25		sty $25				sty 	zTemp0+1
.1428	b2 24		lda ($24)			lda 	(zTemp0)
.142a	aa		tax				tax
.142b	f0 0b		beq $1438			beq 	_CPPrintExit
.142d	a0 01		ldy #$01			ldy 	#1
.142f					_CPPrintAYXLoop:
.142f	b1 24		lda ($24),y			lda 	(zTemp0),y
.1431	20 3c 14	jsr $143c			jsr 	CPPrintA
.1434	c8		iny				iny
.1435	ca		dex				dex
.1436	d0 f7		bne $142f			bne 	_CPPrintAYXLoop
.1438					_CPPrintExit:
.1438	60		rts				rts
.1439					CPInputA:
.1439	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.143c					CPPrintA:
.143c	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0508					InputFlag:
>0508							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.143f					CommandLET:
.143f	20 5f 19	jsr $195f			jsr 	EXPTermR0 					; get term
.1442	90 6f		bcc $14b3			bcc 	CLError 					; must be a reference term.
.1444	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.1446	48		pha				pha
.1447	a5 09		lda $09				lda 	IFR0+IM1
.1449	48		pha				pha
.144a	a5 0b		lda $0b				lda 	IFR0+IExp
.144c	48		pha				pha
.144d	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.144f	20 af 2a	jsr $2aaf			jsr 	ERRCheckA
.1452	20 97 18	jsr $1897			jsr 	EXPEvaluateExpression 		; right hand side.
.1455	68		pla				pla 								; restore type of l-expr
.1456	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1458	30 5c		bmi $14b6			bmi 	CLType
.145a	fa		plx				plx 	 							; pop target address to zTemp0
.145b	86 25		stx $25				stx 	zTemp0+1
.145d	fa		plx				plx
.145e	86 24		stx $24				stx 	zTemp0
.1460					AssignData:
.1460	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.1462	30 17		bmi $147b			bmi 	AssignString
.1464					AssignNumber:
.1464	5a		phy				phy
.1465	a0 03		ldy #$03			ldy 	#3
.1467	a5 0b		lda $0b				lda 	IFR0+IExp
.1469	91 24		sta ($24),y			sta 	(zTemp0),y
.146b	88		dey				dey
.146c	a5 0a		lda $0a				lda 	IFR0+IM2
.146e	91 24		sta ($24),y			sta 	(zTemp0),y
.1470	88		dey				dey
.1471	a5 09		lda $09				lda 	IFR0+IM1
.1473	91 24		sta ($24),y			sta 	(zTemp0),y
.1475	a5 08		lda $08				lda 	IFR0+IM0
.1477	92 24		sta ($24)			sta 	(zTemp0)
.1479	7a		ply				ply
.147a	60		rts				rts
.147b					AssignString:
.147b	5a		phy				phy
.147c	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.147e	b1 24		lda ($24),y			lda 	(zTemp0),y
.1480	12 24		ora ($24)			ora 	(zTemp0)
.1482	f0 23		beq $14a7			beq 	_CLConcreteString
.1484	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1486	85 26		sta $26				sta 	zTemp1
.1488	b1 24		lda ($24),y			lda 	(zTemp0),y
.148a	85 27		sta $27				sta 	zTemp1+1
.148c	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.148e	38		sec				sec 								; we want 3 for slot size, status, string size.
.148f	e9 03		sbc #$03			sbc 	#3
.1491	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1493	90 12		bcc $14a7			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.1495	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.1497	1a		inc a				inc 	a
.1498	aa		tax				tax
.1499	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.149b					_CLReplaceString:
.149b	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.149d	c8		iny				iny
.149e	c8		iny				iny
.149f	91 26		sta ($26),y			sta 	(zTemp1),y
.14a1	88		dey				dey
.14a2	ca		dex				dex
.14a3	d0 f6		bne $149b			bne 	_CLReplaceString
.14a5	80 0a		bra $14b1			bra 	_CLExit
.14a7					_CLConcreteString:
.14a7	20 21 2b	jsr $2b21			jsr 	StringConcrete  			; concreted string in XA.
.14aa	a0 01		ldy #$01			ldy 	#1 							; store the address
.14ac	92 24		sta ($24)			sta 	(zTemp0)
.14ae	8a		txa				txa
.14af	91 24		sta ($24),y			sta 	(zTemp0),y
.14b1					_CLExit:
.14b1	7a		ply				ply
.14b2	60		rts				rts
.14b3					CLError:
.14b3	4c f9 29	jmp $29f9		jmp	ErrorV_variable
.14b6					CLType:
.14b6	4c f6 28	jmp $28f6		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.14b9					Command_LIST:
.14b9	9c 09 05	stz $0509			stz 	CLFrom 						; default from
.14bc	9c 0a 05	stz $050a			stz 	CLFrom+1
.14bf	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.14c1	c9 99		cmp #$99			cmp 	#PR_COMMA
.14c3	f0 1d		beq $14e2			beq 	_CLToLine
.14c5	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.14c7	f0 37		beq $1500			beq 	_CLDefaultTo
.14c9	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.14cc	a5 08		lda $08				lda 	IFR0+IM0
.14ce	8d 09 05	sta $0509			sta 	CLFrom
.14d1	8d 0b 05	sta $050b			sta 	CLTo
.14d4	a5 09		lda $09				lda 	IFR0+IM1
.14d6	8d 0a 05	sta $050a			sta 	CLFrom+1
.14d9	8d 0c 05	sta $050c			sta 	CLTo+1
.14dc	b1 18		lda ($18),y			lda 	(codePtr),y
.14de	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.14e0	f0 26		beq $1508			beq 	_CLList
.14e2					_CLToLine:
.14e2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.14e4	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.14e6	f0 18		beq $1500			beq 	_CLDefaultTo
.14e8	20 a7 2a	jsr $2aa7			jsr 	ERRCheckComma 				; sep comma
.14eb	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.14ed	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.14ef	f0 0f		beq $1500			beq 	_CLDefaultTo
.14f1	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; there's a To value.
.14f4	a5 08		lda $08				lda 	IFR0+IM0
.14f6	8d 0b 05	sta $050b			sta 	CLTo
.14f9	a5 09		lda $09				lda 	IFR0+IM1
.14fb	8d 0c 05	sta $050c			sta 	CLTo+1
.14fe	80 08		bra $1508			bra 	_CLList
.1500					_CLDefaultTo:
.1500	a9 ff		lda #$ff			lda 	#$FF
.1502	8d 0b 05	sta $050b			sta 	CLTo
.1505	8d 0c 05	sta $050c			sta 	CLTo+1
.1508					_CLList:
.1508	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.150b	85 19		sta $19				sta 	codePtr+1
.150d	64 18		stz $18				stz 	codePtr
.150f	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1511	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1513	20 db 20	jsr $20db			jsr 	TOKSetDetokeniseOutput
.1516					_CLLoop:
.1516	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1518	f0 51		beq $156b			beq 	_CLExit
.151a	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.151d	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1520	d0 4c		bne $156e			bne 	_CLBreak
.1522	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1524	20 71 15	jsr $1571			jsr 	_CLCompareLine
.1527	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1529	f0 33		beq $155e			beq 	_CLNext
.152b	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.152d	20 71 15	jsr $1571			jsr 	_CLCompareLine
.1530	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1532	f0 2a		beq $155e			beq 	_CLNext
.1534	a0 02		ldy #$02			ldy 	#2 							; print line #
.1536	b1 18		lda ($18),y			lda 	(codePtr),y
.1538	aa		tax				tax
.1539	88		dey				dey
.153a	b1 18		lda ($18),y			lda 	(codePtr),y
.153c	20 f6 2c	jsr $2cf6			jsr 	WriteIntXA
.153f					_CLSpacing:
.153f	a9 20		lda #$20			lda 	#32
.1541	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1544	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.1547	e0 06		cpx #$06			cpx 	#6
.1549	d0 f4		bne $153f			bne 	_CLSpacing
.154b	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.154d	a5 18		lda $18				lda 	codePtr
.154f	18		clc				clc
.1550	69 03		adc #$03			adc 	#3
.1552	aa		tax				tax
.1553	90 01		bcc $1556			bcc 	_CLNoCarry2
.1555	c8		iny				iny
.1556					_CLNoCarry2:
.1556	20 80 20	jsr $2080			jsr 	TOKDetokenise
.1559	a9 0d		lda #$0d			lda 	#13	 						; next line
.155b	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.155e					_CLNext:
.155e	18		clc				clc 								; advance to next line.
.155f	b2 18		lda ($18)			lda 	(codePtr)
.1561	65 18		adc $18				adc 	codePtr
.1563	85 18		sta $18				sta 	codePtr
.1565	90 02		bcc $1569			bcc 	_CLNoCarry
.1567	e6 19		inc $19				inc 	codePtr+1
.1569					_CLNoCarry:
.1569	80 ab		bra $1516			bra 	_CLLoop
.156b					_CLExit:
.156b	4c 15 2d	jmp $2d15			jmp 	WarmStart
.156e					_CLBreak:
.156e	4c 51 2a	jmp $2a51		jmp	ErrorV_break
.1571					_CLCompareLine:
.1571	a0 01		ldy #$01			ldy 	#1
.1573	38		sec				sec
.1574	b1 18		lda ($18),y			lda 	(codePtr),y
.1576	fd 09 05	sbc $0509,x			sbc 	CLFrom,x
.1579	85 24		sta $24				sta 	zTemp0
.157b	c8		iny				iny
.157c	b1 18		lda ($18),y			lda 	(codePtr),y
.157e	fd 0a 05	sbc $050a,x			sbc 	CLFrom+1,x
.1581	90 0a		bcc $158d			bcc 	_CLIsNegative
.1583	d0 05		bne $158a			bne 	_CLIsPositive
.1585	a5 24		lda $24				lda 	zTemp0
.1587	d0 01		bne $158a			bne 	_CLIsPositive
.1589	60		rts				rts
.158a					_CLIsPositive:
.158a	a9 01		lda #$01			lda 	#1
.158c	60		rts				rts
.158d					_CLIsNegative:
.158d	a9 ff		lda #$ff			lda 	#255
.158f	60		rts				rts
.0509					CLFrom:
>0509							.fill 	2
.050b					CLTo:
>050b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1590					Command_NEW:
.1590	20 89 22	jsr $2289			jsr 	PGMNewProgram 				; Reset current program
.1593	20 c4 11	jsr $11c4			jsr 	ClearCode 					; Run CLR
.1596	4c fc 16	jmp $16fc			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1599					Command_READ:
.1599	20 5f 19	jsr $195f			jsr 	EXPTermR0 					; get term to R0
.159c	90 35		bcc $15d3			bcc 	_CRSyntax 					; fail if not a reference.
.159e	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.15a0	48		pha				pha
.15a1	a5 09		lda $09				lda 	IFR0+IM1
.15a3	48		pha				pha
.15a4	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.15a6	48		pha				pha
.15a7	20 70 16	jsr $1670			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.15aa	ad 11 05	lda $0511			lda 	dataInStatement 			; if in a data statement, we don't need to search
.15ad	d0 27		bne $15d6			bne 	_CRHaveData  				; forward for the next one.
.15af					_CRNextLine:
.15af	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.15b1	f0 1a		beq $15cd			beq 	_CRNoData
.15b3					_CRKeepSearching:
.15b3	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.15b5	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.15b7	20 d6 27	jsr $27d6			jsr 	ScanForward
.15ba	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.15bc	f0 18		beq $15d6			beq 	_CRHaveData 				; found it
.15be	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.15c0	18		clc				clc 								; try the next line, keep going.
.15c1	b2 18		lda ($18)			lda 	(codePtr)
.15c3	65 18		adc $18				adc 	codePtr
.15c5	85 18		sta $18				sta 	codePtr
.15c7	90 e6		bcc $15af			bcc 	_CRNextLine
.15c9	e6 19		inc $19				inc 	codePtr+1
.15cb	80 e2		bra $15af			bra 	_CRNextLine
.15cd					_CRNoData:
.15cd	4c 7e 29	jmp $297e		jmp	ErrorV_data
.15d0					_CLType:
.15d0	4c f6 28	jmp $28f6		jmp	ErrorV_type
.15d3					_CRSyntax:
.15d3	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.15d6					_CRHaveData:
.15d6	20 97 18	jsr $1897			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.15d9	68		pla				pla 								; type of l-expr
.15da	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.15dc	30 f2		bmi $15d0			bmi 	_CLType
.15de	68		pla				pla 								; restore address
.15df	85 25		sta $25				sta 	zTemp0+1
.15e1	68		pla				pla
.15e2	85 24		sta $24				sta 	zTemp0
.15e4	20 60 14	jsr $1460			jsr 	AssignData 					; write R0 there.
.15e7	9c 11 05	stz $0511			stz 	dataInStatement 			; clear in data flag
.15ea	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.15ec	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.15ee	d0 04		bne $15f4			bne 	_CRSwapBack
.15f0	c8		iny				iny 								; consume comma
.15f1	ee 11 05	inc $0511			inc 	dataInStatement 			; set in data statement flag.
.15f4					_CRSwapBack:
.15f4	20 70 16	jsr $1670			jsr 	SwapCodeDataPointers		; swap them back.
.15f7	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.15f9	c8		iny				iny
.15fa	c9 99		cmp #$99			cmp 	#PR_COMMA
.15fc	f0 9b		beq $1599			beq 	Command_READ 				; if so go round again.
.15fe	88		dey				dey 								; unpick get.
.15ff	60		rts				rts
.1600					Command_DATA:
.1600	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1602	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1604	20 d6 27	jsr $27d6			jsr 	ScanForward
.1607	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1609	d0 01		bne $160c			bne 	_CDNotEOL
.160b	88		dey				dey
.160c					_CDNotEOL:
.160c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.160d					Command_REM:
.160d					Command_REM2:
.160d	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.160f	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1611	d0 06		bne $1619			bne 	_CRExit
.1613	c8		iny				iny 								; skip over it, it's a comment.
.1614	98		tya				tya
.1615	38		sec				sec
.1616	71 18		adc ($18),y			adc 	(codePtr),y
.1618	a8		tay				tay
.1619					_CRExit:
.1619	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.161a					Command_RENUMBER:
.161a	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.161c	85 08		sta $08				sta 	IM0+IFR0
.161e	a9 03		lda #$03			lda 	#1000 >> 8
.1620	85 09		sta $09				sta 	IM1+IFR0
.1622	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1624	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1626	f0 07		beq $162f			beq 	_CRIsDefault
.1628	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.162a	f0 03		beq $162f			beq 	_CRIsDefault
.162c	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; get other start
.162f					_CRIsDefault:
.162f	5a		phy				phy
.1630	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.1632	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.1635	85 25		sta $25				sta 	zTemp0+1
.1637					_CRRenumberLoop:
.1637	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.1639	f0 21		beq $165c			beq 	_CRExit
.163b	18		clc				clc
.163c	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.163e	a5 08		lda $08				lda 	IFR0+IM0
.1640	91 24		sta ($24),y			sta 	(zTemp0),y
.1642	69 0a		adc #$0a			adc 	#10
.1644	85 08		sta $08				sta 	IFR0+IM0
.1646	c8		iny				iny
.1647	a5 09		lda $09				lda 	IFR0+IM1
.1649	91 24		sta ($24),y			sta 	(zTemp0),y
.164b	69 00		adc #$00			adc 	#0
.164d	85 09		sta $09				sta 	IFR0+IM1
.164f	18		clc				clc 								; next line.
.1650	b2 24		lda ($24)			lda 	(zTemp0)
.1652	65 24		adc $24				adc 	zTemp0
.1654	85 24		sta $24				sta 	zTemp0
.1656	90 df		bcc $1637			bcc 	_CRRenumberLoop
.1658	e6 25		inc $25				inc 	zTemp0+1
.165a	80 db		bra $1637			bra 	_CRRenumberLoop
.165c					_CRExit:
.165c	7a		ply				ply
.165d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.165e					S
.165e					Command_RESTORE:
.165e	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.1661	8d 0e 05	sta $050e			sta 	dataPtr+1
.1664	9c 0d 05	stz $050d			stz 	dataPtr
.1667	a9 03		lda #$03			lda 	#3 							; position start of line
.1669	8d 0f 05	sta $050f			sta 	dataPos
.166c	9c 11 05	stz $0511			stz 	dataInStatement 			; not in statement
.166f	60		rts				rts
.1670					SwapCodeDataPointers:
.1670	ad 0d 05	lda $050d			lda 	dataPtr 					; swap LSB of code/data
.1673	a6 18		ldx $18				ldx 	codePtr
.1675	85 18		sta $18				sta 	codePtr
.1677	8e 0d 05	stx $050d			stx 	dataPtr
.167a	ad 0e 05	lda $050e			lda 	dataPtr+1 					; swap MSB of code/data
.167d	a6 19		ldx $19				ldx 	codePtr+1
.167f	85 19		sta $19				sta 	codePtr+1
.1681	8e 0e 05	stx $050e			stx 	dataPtr+1
.1684	ad 0f 05	lda $050f			lda 	dataPos 					; swap dataPos and Y
.1687	8c 0f 05	sty $050f			sty 	dataPos
.168a	a8		tay				tay
.168b	60		rts				rts
.050d					dataPtr:
>050d							.fill 	2
.050f					dataPos:
>050f							.fill 	2
.0511					dataInStatement:
>0511							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.168c					Command_RUN:
.168c	20 c4 11	jsr $11c4			jsr 	ClearCode					; clear everything out.
.168f	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.1692	85 19		sta $19				sta 	codePtr+1
.1694	64 18		stz $18				stz 	codePtr
.1696	80 0b		bra $16a3			bra 	RUNNewLine
.1698					RUNEndOfLine:
.1698	18		clc				clc 								; advance to next line.
.1699	b2 18		lda ($18)			lda 	(codePtr)
.169b	65 18		adc $18				adc 	codePtr
.169d	85 18		sta $18				sta 	codePtr
.169f	90 02		bcc $16a3			bcc 	_RELNoCarry
.16a1	e6 19		inc $19				inc 	codePtr+1
.16a3					_RELNoCarry:
.16a3					RUNNewLine:
.16a3	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.16a5	9a		txs				txs
.16a6	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.16a8	f0 52		beq $16fc			beq 	Command_END
.16aa	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.16ac	b1 18		lda ($18),y			lda 	(codePtr),y
.16ae	8d 2e 06	sta $062e			sta 	ERRLine
.16b1	c8		iny				iny
.16b2	b1 18		lda ($18),y			lda 	(codePtr),y
.16b4	8d 2f 06	sta $062f			sta 	ERRLine+1
.16b7	c8		iny				iny 								; offset into codePtr for start of line.
.16b8					RUNNewCommand:
.16b8	9c 23 06	stz $0623			stz 	stringInitialised 			; reset string system flag.
.16bb	ce 12 05	dec $0512			dec 	checkCounter				; don't do these checks ever command
.16be	d0 0a		bne $16ca			bne 	_RNCNoCheck
.16c0	5a		phy				phy 								; keyboard check.
.16c1	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.16c4	7a		ply				ply
.16c5	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.16c8	d0 1e		bne $16e8			bne 	_RUNBreak
.16ca					_RNCNoCheck:
.16ca	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.16cc	10 1d		bpl $16eb			bpl		_RUNNotToken 				; probably an identifier
.16ce	c8		iny				iny 								; consume token
.16cf	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.16d1	f0 e5		beq $16b8			beq 	RUNNewCommand
.16d3	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.16d5	b0 0e		bcs $16e5			bcs 	_RUNSyntax
.16d7	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.16d9	90 0a		bcc $16e5			bcc 	_RUNSyntax
.16db	0a		asl a				asl 	a 							; double into X.
.16dc	aa		tax				tax
.16dd	20 e2 16	jsr $16e2			jsr 	_RUNDispatchMain			; call the main dispatcher
.16e0	80 d6		bra $16b8			bra 	RUNNewCommand
.16e2					_RUNDispatchMain:
.16e2	7c 5e 1f	jmp ($1f5e,x)			jmp 	(VectorTable,x)
.16e5					_RUNSyntax:
.16e5	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.16e8					_RUNBreak:
.16e8	4c 51 2a	jmp $2a51		jmp	ErrorV_break
.16eb					_RUNNotToken:
.16eb	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.16ed	90 f6		bcc $16e5			bcc 	_RUNSyntax
.16ef	20 3f 14	jsr $143f			jsr 	CommandLET 					; assignment
.16f2	80 c4		bra $16b8			bra 	RUNNewCommand 				; loop round.
.16f4					Command_Shift_Handler:
.16f4	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.16f6	c8		iny				iny
.16f7	0a		asl a				asl 	a 							; double into X
.16f8	aa		tax				tax
.16f9	7c 5e 20	jmp ($205e,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.16fc					Command_END:
.16fc	4c 15 2d	jmp $2d15			jmp 	WarmStart
.0512					checkCounter:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.16ff					Command_STOP:
.16ff	4c 6a 29	jmp $296a		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1702					Command_Sys:
.1702	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; execution address
.1705	5a		phy				phy
.1706	ad 76 06	lda $0676			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1709	ae d2 06	ldx $06d2			ldx 	('X'-'A')*4 + FastVariables
.170c	ac d6 06	ldy $06d6			ldy 	('Y'-'A')*4 + FastVariables
.170f	20 14 17	jsr $1714			jsr 	_CSCallIFR0 				; call the code
.1712	7a		ply				ply
.1713	60		rts				rts
.1714					_CSCallIFR0:
.1714	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1717					NoExec01:
.1717					NoExec02:
.1717					NoExec03:
.1717					NoExec04:
.1717					NoExec05:
.1717					NoExec06:
.1717					NoExec07:
.1717					NoExec08:
.1717	4c c6 28	jmp $28c6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.171a					EXPBinAdd:
.171a	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.171c	30 6f		bmi $178d			bmi 	EXPConcatenate
.171e	a2 0c		ldx #$0c			ldx 	#IFR1
.1720	4c 34 2f	jmp $2f34			jmp 	IFloatAdd
.1723					EXPBinSub:
.1723	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1725	30 3f		bmi $1766			bmi 	EXPTypeError
.1727	a2 0c		ldx #$0c			ldx 	#IFR1
.1729	4c 2d 2f	jmp $2f2d			jmp 	IFloatSubtract
.172c					EXPBinMul:
.172c	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.172e	30 36		bmi $1766			bmi 	EXPTypeError
.1730	a2 0c		ldx #$0c			ldx 	#IFR1
.1732	4c de 2f	jmp $2fde			jmp 	IFloatMultiply
.1735					EXPBinFDiv:
.1735	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1737	30 2d		bmi $1766			bmi 	EXPTypeError
.1739	a2 0c		ldx #$0c			ldx 	#IFR1
.173b	20 60 32	jsr $3260			jsr 	IFloatDivideFloat
.173e	b0 0f		bcs $174f			bcs 	EXPDZero
.1740	60		rts				rts
.1741					EXPBinIDiv:
.1741	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1743	30 21		bmi $1766			bmi 	EXPTypeError
.1745	a2 0c		ldx #$0c			ldx 	#IFR1
.1747	20 60 32	jsr $3260			jsr 	IFloatDivideFloat
.174a	b0 03		bcs $174f			bcs 	EXPDZero
.174c	4c 3d 32	jmp $323d			jmp 	IFloatIntegerR0
.174f					EXPDZero:
.174f	4c 3f 29	jmp $293f		jmp	ErrorV_divzero
.1752					EXPBinIMod:
.1752	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1754	30 10		bmi $1766			bmi 	EXPTypeError
.1756	a2 0c		ldx #$0c			ldx 	#IFR1
.1758	5a		phy				phy
.1759	20 73 31	jsr $3173			jsr 	IFPreProcessBitwise 		; set up everything.
.175c	d0 05		bne $1763			bne 	EXPDRange
.175e	20 ac 30	jsr $30ac			jsr 	IFloatModulusInteger
.1761	7a		ply				ply
.1762	60		rts				rts
.1763					EXPDRange:
.1763	4c d7 28	jmp $28d7		jmp	ErrorV_range
.1766					EXPTypeError:
.1766	4c f6 28	jmp $28f6		jmp	ErrorV_type
.1769					EXPBinAnd:
.1769	24 0b		bit $0b				bit 	IFR0+IExp
.176b	30 f9		bmi $1766			bmi 	EXPTypeError
.176d	a2 0c		ldx #$0c			ldx 	#IFR1
.176f	20 2e 31	jsr $312e			jsr 	IFloatBitwiseAnd
.1772	b0 ef		bcs $1763			bcs 	EXPDRange
.1774	60		rts				rts
.1775					EXPBinOr:
.1775	24 0b		bit $0b				bit 	IFR0+IExp
.1777	30 ed		bmi $1766			bmi 	EXPTypeError
.1779	a2 0c		ldx #$0c			ldx 	#IFR1
.177b	20 45 31	jsr $3145			jsr 	IFloatBitwiseOr
.177e	b0 e3		bcs $1763			bcs 	EXPDRange
.1780	60		rts				rts
.1781					EXPBinXor:
.1781	24 0b		bit $0b				bit 	IFR0+IExp
.1783	30 e1		bmi $1766			bmi 	EXPTypeError
.1785	a2 0c		ldx #$0c			ldx 	#IFR1
.1787	20 5c 31	jsr $315c			jsr 	IFloatBitwiseXor
.178a	b0 d7		bcs $1763			bcs 	EXPDRange
.178c	60		rts				rts
.178d					EXPConcatenate:
.178d	18		clc				clc
.178e	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.1790	72 0c		adc ($0c)			adc 	(IFR1)
.1792	b0 2d		bcs $17c1			bcs 	_EXPCError 					; far too long.
.1794	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1796	da		phx				phx
.1797	a6 09		ldx $09				ldx 	IFR0+1
.1799	da		phx				phx
.179a	20 94 2b	jsr $2b94			jsr 	StringTempAllocate 			; allocate string, set up return
.179d	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.179f	a5 0c		lda $0c				lda 	IFR1
.17a1	20 aa 17	jsr $17aa			jsr 	_EXPCCopyXA
.17a4	fa		plx				plx 								; copy second string
.17a5	68		pla				pla
.17a6	20 aa 17	jsr $17aa			jsr 	_EXPCCopyXA
.17a9	60		rts				rts
.17aa					_EXPCCopyXA:
.17aa	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.17ac	85 24		sta $24				sta 	zTemp0
.17ae	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.17b0	f0 0e		beq $17c0			beq 	_EXPCCExit 					; nothing in string
.17b2	aa		tax				tax 								; count
.17b3	5a		phy				phy 								; start position
.17b4	a0 01		ldy #$01			ldy 	#1
.17b6					_EXPCCLoop:
.17b6	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.17b8	20 c9 2b	jsr $2bc9			jsr 	StringTempWrite
.17bb	c8		iny				iny
.17bc	ca		dex				dex
.17bd	d0 f7		bne $17b6			bne 	_EXPCCLoop
.17bf	7a		ply				ply
.17c0					_EXPCCExit:
.17c0	60		rts				rts
.17c1					_EXPCError:
.17c1	4c e3 29	jmp $29e3		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.17c4					EXPReturnTrue:
.17c4	a2 08		ldx #$08			ldx 	#IFR0
.17c6	a9 01		lda #$01			lda 	#1
.17c8	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.17cb	20 47 35	jsr $3547			jsr 	IFloatNegate
.17ce	60		rts				rts
.17cf					EXPReturnFalse:
.17cf	a2 08		ldx #$08			ldx 	#IFR0
.17d1	4c 3c 35	jmp $353c			jmp 	IFloatSetZero
.17d4					EXPCompareEqual:
.17d4	20 0a 18	jsr $180a			jsr 	EXPCompareBaseCode
.17d7	c9 00		cmp #$00			cmp 	#0
.17d9	f0 e9		beq $17c4			beq 	EXPReturnTrue
.17db	80 f2		bra $17cf			bra 	EXPReturnFalse
.17dd					EXPCompareLess:
.17dd	20 0a 18	jsr $180a			jsr 	EXPCompareBaseCode
.17e0	c9 ff		cmp #$ff			cmp 	#$FF
.17e2	f0 e0		beq $17c4			beq 	EXPReturnTrue
.17e4	80 e9		bra $17cf			bra 	EXPReturnFalse
.17e6					EXPCompareGreater:
.17e6	20 0a 18	jsr $180a			jsr 	EXPCompareBaseCode
.17e9	c9 01		cmp #$01			cmp 	#1
.17eb	f0 d7		beq $17c4			beq 	EXPReturnTrue
.17ed	80 e0		bra $17cf			bra 	EXPReturnFalse
.17ef					EXPCompareNotEqual:
.17ef	20 0a 18	jsr $180a			jsr 	EXPCompareBaseCode
.17f2	c9 00		cmp #$00			cmp 	#0
.17f4	d0 ce		bne $17c4			bne 	EXPReturnTrue
.17f6	80 d7		bra $17cf			bra 	EXPReturnFalse
.17f8					EXPCompareLessEqual:
.17f8	20 0a 18	jsr $180a			jsr 	EXPCompareBaseCode
.17fb	c9 01		cmp #$01			cmp 	#1
.17fd	d0 c5		bne $17c4			bne 	EXPReturnTrue
.17ff	80 ce		bra $17cf			bra 	EXPReturnFalse
.1801					EXPCompareGreaterEqual:
.1801	20 0a 18	jsr $180a			jsr 	EXPCompareBaseCode
.1804	c9 ff		cmp #$ff			cmp 	#$FF
.1806	d0 bc		bne $17c4			bne 	EXPReturnTrue
.1808	80 c5		bra $17cf			bra 	EXPReturnFalse
.180a					EXPCompareBaseCode:
.180a	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.180c	30 10		bmi $181e			bmi 	_EXCBCString
.180e	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1810	20 0b 32	jsr $320b			jsr 	IFloatCompare
.1813	a5 08		lda $08				lda 	IFR0+IM0
.1815	f0 06		beq $181d			beq 	_EXCBCExit 					; return 0 if zero
.1817	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1819	50 02		bvc $181d			bvc 	_EXCBCExit
.181b	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.181d					_EXCBCExit:
.181d	60		rts				rts
.181e					_EXCBCString:
.181e	5a		phy				phy
.181f	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1821	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1823	90 02		bcc $1827			bcc 	_EXCBCSmaller
.1825	b2 0c		lda ($0c)			lda 	(IFR1)
.1827					_EXCBCSmaller:
.1827	aa		tax				tax
.1828	f0 0d		beq $1837			beq 	_EXCBCMatches 				; if zero common length matches
.182a	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.182c					_EXCBCCheckSmallerMatches:
.182c	c8		iny				iny 								; compare directly as far as common length
.182d	38		sec				sec
.182e	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1830	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1832	d0 08		bne $183c			bne 	_EXCBCExit2
.1834	ca		dex				dex
.1835	d0 f5		bne $182c			bne 	_EXCBCCheckSmallerMatches
.1837					_EXCBCMatches:
.1837	38		sec				sec
.1838	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.183a	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.183c					_EXCBCExit2:
.183c	7a		ply				ply
.183d	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.183f	f0 04		beq $1845			beq 	_EXCBCReturn
.1841	30 03		bmi $1846			bmi 	_EXCBCFF 					; return $FF if <
.1843	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1845					_EXCBCReturn:
.1845	60		rts				rts
.1846					_EXCBCFF:
.1846	a9 ff		lda #$ff			lda 	#$FF
.1848	60		rts				rts
.1849					_EXCBCRange:
.1849	4c d7 28	jmp $28d7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.184c					EXPBinLeft:
.184c	a9 ff		lda #$ff			lda 	#$FF
.184e	8d 13 05	sta $0513			sta 	EXPShiftLeftFlag
.1851	4c 57 18	jmp $1857			jmp 	EXPShiftCommon
.1854					EXPBinRight:
.1854	9c 13 05	stz $0513			stz 	EXPShiftLeftFlag
.1857					EXPShiftCommon:
.1857	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1859	05 0f		ora $0f				ora 	IFR1+IExp
.185b	29 7f		and #$7f			and 	#$7F
.185d	d0 35		bne $1894			bne 	_EXPSRange
.185f	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1861	29 e0		and #$e0			and 	#$E0
.1863	05 09		ora $09				ora 	IFR0+IM1
.1865	05 0a		ora $0a				ora 	IFR0+IM2
.1867	d0 25		bne $188e			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1869	5a		phy				phy
.186a	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.186c	29 1f		and #$1f			and 	#$1F
.186e	f0 17		beq $1887			beq 	_EXPSExit 					; exit if zero
.1870	a8		tay				tay
.1871					_EXPSLoop:
.1871	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.1873	2c 13 05	bit $0513			bit 	EXPShiftLeftFlag
.1876	30 05		bmi $187d			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.1878	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.187b	80 07		bra $1884			bra 	_EXPSContinue
.187d					_EXPSShiftLeft:
.187d	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.1880	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.1882	30 10		bmi $1894			bmi 	_EXPSRange
.1884					_EXPSContinue:
.1884	88		dey				dey 								; do it Y times
.1885	d0 ea		bne $1871			bne 	_EXPSLoop
.1887					_EXPSExit:
.1887	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.1889	20 cd 34	jsr $34cd			jsr 	IFloatCopyFromRegister
.188c	7a		ply				ply
.188d	60		rts				rts
.188e					_EXPSShiftZero:
.188e	a2 08		ldx #$08			ldx 	#IFR0
.1890	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.1893	60		rts				rts
.1894					_EXPSRange:
.1894	4c d7 28	jmp $28d7		jmp	ErrorV_range
.0513					EXPShiftLeftFlag:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1897					EXPEvaluateExpression:
.1897	a9 00		lda #$00			lda 	#0 							; current precedence
.1899					EXPEvaluateExpressionPrecedenceA:
.1899	48		pha				pha
.189a	20 14 19	jsr $1914			jsr 	EXPTermValueR0				; do first term.
.189d					_EELoop:
.189d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.189f	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.18a1	90 31		bcc $18d4			bcc 	_EEExit
.18a3	aa		tax				tax 								; access the precedence of the operator.
.18a4	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.18a5	dd 72 1c	cmp $1c72,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.18a8	b0 2b		bcs $18d5			bcs 	_EEExit2
.18aa	48		pha				pha 								; save current precedence.
.18ab	da		phx				phx 								; save operator
.18ac	c8		iny				iny 								; consume operator
.18ad	da		phx				phx
.18ae	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.18b0	20 8b 34	jsr $348b			jsr 	IFloatPushRx
.18b3	fa		plx				plx
.18b4	bd 72 1c	lda $1c72,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.18b7	20 99 18	jsr $1899			jsr 	EXPEvaluateExpressionPrecedenceA
.18ba	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.18bc	20 ac 34	jsr $34ac			jsr 	IFloatPullRx
.18bf	fa		plx				plx 								; operator
.18c0	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.18c2	45 0f		eor $0f				eor 	IFR1+IExp
.18c4	30 08		bmi $18ce			bmi 	_EEType		 				; MSBs differ, error.
.18c6					_EETypeOkay:
.18c6	8a		txa				txa
.18c7	0a		asl a				asl 	a 							; double -> X
.18c8	aa		tax				tax
.18c9	20 d1 18	jsr $18d1			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.18cc	80 cf		bra $189d			bra 	_EELoop
.18ce					_EEType:
.18ce	4c f6 28	jmp $28f6		jmp	ErrorV_type
.18d1					_EECallBinary:
.18d1	7c 5e 1f	jmp ($1f5e,x)			jmp 	(VectorTable,x)
.18d4					_EEExit:
.18d4	68		pla				pla 								; throw precedence
.18d5					_EEExit2:
.18d5	18		clc				clc
.18d6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.18d7					EXPEvalNumber:
.18d7	20 97 18	jsr $1897			jsr 	EXPEvaluateExpression 		; get a value
.18da	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.18dc	30 01		bmi $18df			bmi 	EVUType
.18de	60		rts				rts
.18df					EVUType:
.18df	4c f6 28	jmp $28f6		jmp	ErrorV_type
.18e2					EXPEvalInteger:
.18e2	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.18e5	20 3d 32	jsr $323d			jsr 	IFloatIntegerR0
.18e8	60		rts				rts
.18e9					EXPEvalInteger16:
.18e9	20 e2 18	jsr $18e2			jsr 	EXPEvalInteger 				; get integer
.18ec	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.18ee	d0 21		bne $1911			bne 	EVURange
.18f0	a6 09		ldx $09				ldx 	IFR0+IM1
.18f2	a5 08		lda $08				lda 	IFR0+IM0
.18f4	60		rts				rts
.18f5					EXPEvalInteger8:
.18f5	20 e2 18	jsr $18e2			jsr 	EXPEvalInteger 				; get integer
.18f8	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.18fa	05 09		ora $09				ora 	IFR0+IM1
.18fc	d0 13		bne $1911			bne 	EVURange
.18fe	a5 08		lda $08				lda 	IFR0+IM0
.1900	60		rts				rts
.1901					EXPEvalString:
.1901	20 97 18	jsr $1897			jsr 	EXPEvaluateExpression 		; get value
.1904	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1906	10 d7		bpl $18df			bpl 	EVUType
.1908	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.190a	86 25		stx $25				stx 	zTemp0+1
.190c	a5 08		lda $08				lda 	IFR0+IM0
.190e	85 24		sta $24				sta 	zTemp0
.1910	60		rts				rts
.1911					EVURange:
.1911	4c d7 28	jmp $28d7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1914					EXPTermValueR0:
.1914	20 5f 19	jsr $195f			jsr 	EXPTermR0 					; get term
.1917	90 45		bcc $195e			bcc 	_ETVNotReference 			; exit if value.
.1919	5a		phy				phy
.191a	a0 03		ldy #$03			ldy 	#3 							; get type
.191c	b1 08		lda ($08),y			lda 	(IFR0),y
.191e	30 14		bmi $1934			bmi 	_ETVDereferenceString
.1920	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1922	88		dey				dey 								; get byte 2
.1923	b1 08		lda ($08),y			lda 	(IFR0),y
.1925	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1927	88		dey				dey 								; get byte 1
.1928	b1 08		lda ($08),y			lda 	(IFR0),y
.192a	aa		tax				tax 								; save in X so we can overwrite it
.192b	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.192d	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.192f	85 08		sta $08				sta 	IFR0+IM0
.1931	7a		ply				ply
.1932	18		clc				clc
.1933	60		rts				rts
.1934					_ETVDereferenceString:
.1934	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1936	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1938	12 08		ora ($08)			ora 	(IFR0)
.193a	f0 11		beq $194d			beq 	_ETVNull 					; if so, return a fake NULL.
.193c	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.193e	aa		tax				tax
.193f	b2 08		lda ($08)			lda 	(IFR0)
.1941	18		clc				clc 								; add two so points to actual string.
.1942	69 02		adc #$02			adc 	#2
.1944	90 01		bcc $1947			bcc 	_EVDSNoCarry
.1946	e8		inx				inx
.1947					_EVDSNoCarry:
.1947	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1949	85 08		sta $08				sta 	IFR0
.194b	80 08		bra $1955			bra 	_ETVFillExit 				; tidy up and exit.
.194d					_ETVNull:
.194d	a9 5d		lda #$5d			lda 	#_EVTNString & $FF
.194f	85 08		sta $08				sta 	IFR0+IM0
.1951	a9 19		lda #$19			lda 	#_EVTNString >> 8
.1953	85 09		sta $09				sta 	IFR0+IM1
.1955					_ETVFillExit:
.1955	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1957	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1959	85 0b		sta $0b				sta 	IFR0+IExp
.195b	7a		ply				ply
.195c	60		rts				rts
.195d					_EVTNString:
>195d	00						.byte 	0
.195e					_ETVNotReference:
.195e	60		rts				rts
.195f					EXPTermR0:
.195f	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1961	30 10		bmi $1973			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1963	c8		iny				iny 								; consume element
.1964	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1966	b0 08		bcs $1970			bcs 	_ETMIdentifier
.1968	20 9e 19	jsr $199e			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.196b	20 d1 19	jsr $19d1			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.196e	18		clc				clc 								; return value ok
.196f	60		rts				rts
.1970					_ETMIdentifier:
.1970	4c d5 2e	jmp $2ed5			jmp 	VARCheckSimple 				; check variables, seperate module.
.1973					_ETMIsUnaryOrMinus:
.1973	c8		iny				iny 								; consume element
.1974	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1976	d0 0e		bne $1986			bne 	_ETMCheckUnary
.1978	20 14 19	jsr $1914			jsr 	EXPTermValueR0 				; get a term to negate
.197b	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.197d	20 47 35	jsr $3547			jsr 	IFloatNegate
.1980	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1982	30 17		bmi $199b			bmi 	_ETMUnaryType				; if so error.
.1984	18		clc				clc
.1985	60		rts				rts
.1986					_ETMCheckUnary:
.1986	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1988	90 0e		bcc $1998			bcc 	_ETMUnarySyntax
.198a	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.198c	b0 0a		bcs $1998			bcs 	_ETMUnarySyntax
.198e	0a		asl a				asl 	a 							; make it into an index => X
.198f	aa		tax				tax
.1990	20 95 19	jsr $1995			jsr 	_ETMCallUnaryFunction 		; call the function
.1993	18		clc				clc 								; and return it.
.1994	60		rts				rts
.1995					_ETMCallUnaryFunction:
.1995	7c 5e 1f	jmp ($1f5e,x)			jmp 	(VectorTable,x)
.1998					_ETMUnarySyntax:
.1998	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.199b					_ETMUnaryType:
.199b	4c f6 28	jmp $28f6		jmp	ErrorV_type
.199e					EXPExtractTokenisedInteger:
.199e	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.19a0	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.19a2	64 09		stz $09				stz 	IFR0+IM1
.19a4	64 0a		stz $0a				stz 	IFR0+IM2
.19a6					_ETMConstant:
.19a6	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.19a8	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.19aa	b0 24		bcs $19d0			bcs 	_ETMCExit 					; no, exit.
.19ac	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.19ae	a5 09		lda $09				lda 	IFR0+IM1
.19b0	85 0a		sta $0a				sta 	IFR0+IM2
.19b2	a5 08		lda $08				lda 	IFR0+IM0
.19b4	85 09		sta $09				sta 	IFR0+IM1
.19b6	64 08		stz $08				stz 	IFR0+IM0
.19b8	8a		txa				txa
.19b9	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.19ba	66 0a		ror $0a				ror 	IFR0+IM2
.19bc	66 09		ror $09				ror 	IFR0+IM1
.19be	66 08		ror $08				ror 	IFR0+IM0
.19c0	4a		lsr a				lsr 	a
.19c1	66 0a		ror $0a				ror 	IFR0+IM2
.19c3	66 09		ror $09				ror 	IFR0+IM1
.19c5	66 08		ror $08				ror 	IFR0+IM0
.19c7	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.19c9	11 18		ora ($18),y			ora 	(codePtr),y
.19cb	85 08		sta $08				sta 	IFR0+IM0
.19cd	c8		iny				iny 								; consume, loop back
.19ce	80 d6		bra $19a6			bra 	_ETMConstant
.19d0					_ETMCExit:
.19d0	60		rts				rts
.19d1					EXPCheckDecimalFollows:
.19d1	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.19d3	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.19d5	d0 19		bne $19f0			bne 	_ETMCDExit
.19d7	c8		iny				iny 								; consume token.
.19d8	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.19da	5a		phy				phy									; save current position
.19db	48		pha				pha 								; save count of chars.
.19dc	38		sec				sec 								; address into YX : y + codePtr+1
.19dd	98		tya				tya
.19de	65 18		adc $18				adc 	codePtr
.19e0	aa		tax				tax
.19e1	a5 19		lda $19				lda 	codePtr+1
.19e3	69 00		adc #$00			adc 	#0
.19e5	a8		tay				tay
.19e6	68		pla				pla 								; get count.
.19e7	20 e0 33	jsr $33e0			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.19ea	7a		ply				ply 								; go to next token.
.19eb	98		tya				tya
.19ec	38		sec				sec
.19ed	71 18		adc ($18),y			adc 	(codePtr),y
.19ef	a8		tay				tay
.19f0					_ETMCDExit:
.19f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.19f1					EXPUnaryAbs:
.19f1	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 					; number to R0
.19f4	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.19f7	20 7f 31	jsr $317f			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.19fa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.19fb					EXPUnaryNull:
.19fb	20 14 19	jsr $1914			jsr 	EXPTermValueR0
.19fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.19ff					EXPUnaryAsc:
.19ff	20 01 19	jsr $1901			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a02	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1a05	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1a07	f0 06		beq $1a0f			beq 	_EXAZero 						; if so return 0
.1a09	5a		phy				phy 									; otherwise get first character
.1a0a	a0 01		ldy #$01			ldy 	#1
.1a0c	b1 24		lda ($24),y			lda 	(zTemp0),y
.1a0e	7a		ply				ply
.1a0f					_EXAZero:
.1a0f	a2 08		ldx #$08			ldx 	#IFR0
.1a11	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.1a14	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1a15					EXPUnaryChr:
.1a15	20 f5 18	jsr $18f5			jsr 	EXPEvalInteger8 				; expr
.1a18	48		pha				pha 									; push on stack
.1a19	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1a1c	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1a1e	20 94 2b	jsr $2b94			jsr 	StringTempAllocate
.1a21	68		pla				pla 									; get value back
.1a22	20 c9 2b	jsr $2bc9			jsr 	StringTempWrite 				; write to string.
.1a25	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1a26					EXPUnaryDec:
.1a26	20 01 19	jsr $1901			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a29	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1a2c	5a		phy				phy 									; save position.
.1a2d	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1a2f	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.1a32	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1a34	f0 3b		beq $1a71			beq 	_EUDError 						; empty string is not legit.
.1a36	aa		tax				tax 									; count in X.
.1a37	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1a39					_EUDLoop:
.1a39	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1a3b	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1a3d	90 02		bcc $1a41			bcc 	_EUDNoCase
.1a3f	e9 20		sbc #$20			sbc 	#$20
.1a41					_EUDNoCase:
.1a41	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1a43	90 2c		bcc $1a71			bcc 	_EUDError
.1a45	c9 3a		cmp #$3a			cmp 	#'9'+1
.1a47	90 0a		bcc $1a53			bcc 	_EUDOkay
.1a49	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1a4b	90 24		bcc $1a71			bcc 	_EUDError
.1a4d	c9 47		cmp #$47			cmp 	#'F'+1
.1a4f	b0 20		bcs $1a71			bcs 	_EUDError
.1a51	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1a53					_EUDOkay:
.1a53	29 0f		and #$0f			and 	#15 							; make constant
.1a55	da		phx				phx
.1a56	48		pha				pha
.1a57	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1a59	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.1a5c	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.1a5f	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.1a62	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.1a65	68		pla				pla 									; pop constant and OR in
.1a66	fa		plx				plx
.1a67	05 08		ora $08				ora 	IFR0+IM0
.1a69	85 08		sta $08				sta 	IFR0+IM0
.1a6b	c8		iny				iny 									; next char
.1a6c	ca		dex				dex 									; done all characters ?
.1a6d	d0 ca		bne $1a39			bne 	_EUDLoop
.1a6f	7a		ply				ply
.1a70	60		rts				rts
.1a71					_EUDError:
.1a71	4c e8 28	jmp $28e8		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1a74					EXPUnaryInlineDec:
.1a74	4c c6 28	jmp $28c6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1a77					EXPUnaryPeek:
.1a77	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 				; number to R0
.1a7a	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1a7d	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1a7f	a2 08		ldx #$08			ldx 	#IFR0
.1a81	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.1a84	60		rts				rts
.1a85					EXPUnaryDeek:
.1a85	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 				; number to R0
.1a88	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1a8b	5a		phy				phy 									; read MSB and push on stack
.1a8c	a0 01		ldy #$01			ldy 	#1
.1a8e	b1 08		lda ($08),y			lda 	(IFR0),y
.1a90	7a		ply				ply
.1a91	48		pha				pha
.1a92	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1a94	a2 08		ldx #$08			ldx 	#IFR0
.1a96	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.1a99	68		pla				pla 									; set MSB
.1a9a	85 09		sta $09				sta 	IFR0+IM1
.1a9c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1a9d					EXPUnaryFrac:
.1a9d	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 					; number to R0
.1aa0	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1aa3	20 e7 31	jsr $31e7			jsr 	IFloatFractionalR0 				; get fractional bit.
.1aa6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1aa7					EXPUnaryInkey:
.1aa7	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1aaa	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1aac	20 94 2b	jsr $2b94			jsr 	StringTempAllocate
.1aaf	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1ab2	b0 06		bcs $1aba			bcs 	_EUIExit
.1ab4	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1ab7	20 c9 2b	jsr $2bc9			jsr 	StringTempWrite
.1aba					_EUIExit:
.1aba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1abb					EXPUnaryInt:
.1abb	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 					; number to R0
.1abe	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; check for )
.1ac1	20 3d 32	jsr $323d			jsr 	IFloatIntegerR0 				; force to integer.
.1ac4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1ac5					EXPUnaryLen:
.1ac5	20 01 19	jsr $1901			jsr 	EXPEvalString 					; string to R0, zTemp0
.1ac8	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1acb	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1acd	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1acf	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.1ad2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1ad3					EXPUnaryParenthesis:
.1ad3	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 					; number to R0
.1ad6	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1ad9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1ada					EXPUnaryRnd:
.1ada	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; number to R0
.1add	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 				; )
.1ae0	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1ae2	20 f9 1a	jsr $1af9			jsr 	EXPLoadInRandom
.1ae5	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1ae7	85 0b		sta $0b				sta 	IFR0+IExp
.1ae9	60		rts				rts
.1aea					ExpUnaryRand:
.1aea	20 e2 18	jsr $18e2			jsr 	EXPEvalInteger 				; integer to R0
.1aed	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 				; )
.1af0	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1af2	20 f9 1a	jsr $1af9			jsr 	EXPLoadInRandom
.1af5	20 ac 30	jsr $30ac			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1af8	60		rts				rts
.1af9					EXPLoadInRandom:
.1af9	20 3c 35	jsr $353c			jsr 	IFloatSetZero 				; zero it
.1afc	20 0e 1b	jsr $1b0e			jsr 	EXPRandom32 				; do a 23 bit number.
.1aff	95 00		sta $00,x			sta 	IM0,x
.1b01	20 0e 1b	jsr $1b0e			jsr 	EXPRandom32
.1b04	95 01		sta $01,x			sta 	IM1,x
.1b06	20 0e 1b	jsr $1b0e			jsr 	EXPRandom32
.1b09	29 7f		and #$7f			and 	#$7F
.1b0b	95 02		sta $02,x			sta 	IM2,x
.1b0d	60		rts				rts
.1b0e					EXPRandom32:
.1b0e	5a		phy				phy
.1b0f	a0 08		ldy #$08			ldy 	#8
.1b11	ad 14 05	lda $0514			lda 	EXPSeed+0
.1b14	0d 15 05	ora $0515			ora 	EXPSeed+1
.1b17	0d 16 05	ora $0516			ora 	EXPSeed+2
.1b1a	0d 17 05	ora $0517			ora 	EXPSeed+3
.1b1d	d0 08		bne $1b27			bne 	_EXPRNoReset
.1b1f	ee 14 05	inc $0514			inc 	EXPSeed+0
.1b22	a0 10		ldy #$10			ldy 	#16
.1b24	8c 17 05	sty $0517			sty 	EXPSeed+3
.1b27					_EXPRNoReset:
.1b27	ad 14 05	lda $0514			lda 	EXPSeed+0
.1b2a					_EXPRLoop:
.1b2a	0a		asl a				asl		a
.1b2b	2e 15 05	rol $0515			rol 	EXPSeed+1
.1b2e	2e 16 05	rol $0516			rol 	EXPSeed+2
.1b31	2e 17 05	rol $0517			rol 	EXPSeed+3
.1b34	90 02		bcc $1b38			bcc 	_EXPRNoEOR
.1b36	49 c5		eor #$c5			eor 	#$C5
.1b38					_EXPRNoEOR:
.1b38	88		dey				dey
.1b39	d0 ef		bne $1b2a			bne 	_EXPRLoop
.1b3b	8d 14 05	sta $0514			sta 	EXPSeed+0
.1b3e	7a		ply				ply
.1b3f	60		rts				rts
.0514					EXPSeed:
>0514							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1b40					EXPUnarySgn:
.1b40	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 					; number to R0
.1b43	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1b46	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1b48	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister
.1b4b	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1b4d	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.1b50	a2 0c		ldx #$0c			ldx 	#IFR1
.1b52	20 0b 32	jsr $320b			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1b55	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1b56					EXPUnarySqr:
.1b56	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 					; number to R0
.1b59	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1b5c	20 87 31	jsr $3187			jsr 	IFloatSquareRootR0 				; square root.
.1b5f	b0 01		bcs $1b62			bcs 	_EUSValue 						; error check.
.1b61	60		rts				rts
.1b62					_EUSValue:
.1b62	4c d7 28	jmp $28d7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1b65					EXPUnaryHex:
.1b65	20 e2 18	jsr $18e2			jsr 	EXPEvalInteger 					; expr
.1b68	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1b6b	5a		phy				phy
.1b6c	a9 10		lda #$10			lda 	#16
.1b6e	20 de 32	jsr $32de			jsr 	IFloatIntegerToStringR0
.1b71	80 0a		bra $1b7d			bra 	EUSMain
.1b73					EXPUnaryStr:
.1b73	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 					; expr
.1b76	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1b79	5a		phy				phy
.1b7a	20 39 33	jsr $3339			jsr 	IFloatFloatToStringR0 			; convert to string
.1b7d					EUSMain:
.1b7d	b0 19		bcs $1b98			bcs 	_EUSError
.1b7f	86 24		stx $24				stx 	zTemp0 							; save string address
.1b81	84 25		sty $25				sty 	zTemp0+1
.1b83	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1b85	20 94 2b	jsr $2b94			jsr 	StringTempAllocate
.1b88	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1b8a	aa		tax				tax 									; count in X
.1b8b	a0 01		ldy #$01			ldy 	#1
.1b8d					_EUSCopy:
.1b8d	b1 24		lda ($24),y			lda 	(zTemp0),y
.1b8f	c8		iny				iny
.1b90	20 c9 2b	jsr $2bc9			jsr 	StringTempWrite
.1b93	ca		dex				dex
.1b94	d0 f7		bne $1b8d			bne	 	_EUSCopy
.1b96	7a		ply				ply
.1b97	60		rts				rts
.1b98					_EUSError:
.1b98	4c d7 28	jmp $28d7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1b9b					EXPUnaryInlineString:
.1b9b	18		clc				clc 								; physical address -> IM0,1
.1b9c	98		tya				tya 								; put the actual address in IM0
.1b9d	65 18		adc $18				adc 	codePtr
.1b9f	85 08		sta $08				sta 	IFR0+IM0
.1ba1	a5 19		lda $19				lda 	codePtr+1
.1ba3	69 00		adc #$00			adc 	#0
.1ba5	85 09		sta $09				sta 	IFR0+IM1
.1ba7	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1ba9	a9 80		lda #$80			lda 	#$80
.1bab	85 0b		sta $0b				sta 	IFR0+IExp
.1bad	98		tya				tya	 								; skip over it.
.1bae	38		sec				sec
.1baf	71 18		adc ($18),y			adc 	(codePtr),y
.1bb1	a8		tay				tay
.1bb2	60		rts				rts
.1bb3					_EXPUISRange:
.1bb3	4c d7 28	jmp $28d7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1bb6					EXPUnaryLeft:
.1bb6	20 fc 1b	jsr $1bfc			jsr 	EXPCommonStart 					; <string>,
.1bb9	48		pha				pha 									; save string address on stack
.1bba	da		phx				phx
.1bbb	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1bbd	48		pha				pha
.1bbe	20 f5 18	jsr $18f5			jsr 	EXPEvalInteger8 				; characters to do
.1bc1	80 44		bra $1c07			bra 	EXPSubstringCommon
.1bc3					EXPUnaryRight:
.1bc3	20 fc 1b	jsr $1bfc			jsr 	EXPCommonStart 					; <string>,
.1bc6	48		pha				pha 									; save string address on stack
.1bc7	da		phx				phx
.1bc8	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1bca	48		pha				pha
.1bcb	20 f5 18	jsr $18f5			jsr 	EXPEvalInteger8 				; characters to do
.1bce	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1bd0	68		pla				pla
.1bd1	38		sec				sec
.1bd2	e5 24		sbc $24				sbc 	zTemp0
.1bd4	b0 02		bcs $1bd8			bcs 	_EUROffLeft
.1bd6	a9 00		lda #$00			lda 	#0
.1bd8					_EUROffLeft:
.1bd8	48		pha				pha 									; start pos
.1bd9	a9 ff		lda #$ff			lda 	#255
.1bdb	80 2a		bra $1c07			bra 	EXPSubstringCommon
.1bdd					EXPUnaryMid:
.1bdd	20 fc 1b	jsr $1bfc			jsr 	EXPCommonStart 					; <string>,
.1be0	48		pha				pha 									; save string address on stack
.1be1	da		phx				phx
.1be2	20 f5 18	jsr $18f5			jsr 	EXPEvalInteger8 				; characters start
.1be5	f0 12		beq $1bf9			beq 	_EUSError 						; 1 is left
.1be7	3a		dec a				dec 	a 								; zero based.
.1be8	48		pha				pha
.1be9	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1beb	c9 99		cmp #$99			cmp 	#PR_COMMA
.1bed	f0 04		beq $1bf3			beq 	_EUMLength 						; if so m is provided
.1bef	a9 ff		lda #$ff			lda 	#255 							; default m
.1bf1	80 14		bra $1c07			bra 	EXPSubstringCommon
.1bf3					_EUMLength:
.1bf3	c8		iny				iny 									; consume comma
.1bf4	20 f5 18	jsr $18f5			jsr 	EXPEvalInteger8 				; characters to do
.1bf7	80 0e		bra $1c07			bra 	EXPSubstringCommon
.1bf9					_EUSError:
.1bf9	4c e8 28	jmp $28e8		jmp	ErrorV_value
.1bfc					EXPCommonStart:
.1bfc	20 01 19	jsr $1901			jsr 	EXPEvalString
.1bff	20 a7 2a	jsr $2aa7			jsr 	ERRCheckComma
.1c02	a5 08		lda $08				lda 	IFR0+IM0
.1c04	a6 09		ldx $09				ldx 	IFR0+IM1
.1c06	60		rts				rts
.1c07					EXPSubstringCommon:
.1c07	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1c09	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; check right bracket.
.1c0c	68		pla				pla 									; start position
.1c0d	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1c0f	fa		plx				plx 									; get string address to zTemp2.
.1c10	86 29		stx $29				stx 	zTemp2+1
.1c12	68		pla				pla
.1c13	85 28		sta $28				sta 	zTemp2
.1c15	38		sec				sec 									; length - start is the max count of chars
.1c16	b2 28		lda ($28)			lda 	(zTemp2)
.1c18	e5 27		sbc $27				sbc 	zTemp1+1
.1c1a	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1c1c	b0 02		bcs $1c20			bcs 	_EXPSSNoTrim
.1c1e	85 26		sta $26				sta 	zTemp1 							; update count with available
.1c20					_EXPSSNoTrim:
.1c20	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1c22	20 94 2b	jsr $2b94			jsr 	StringTempAllocate 				; allocate memory for it.
.1c25	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1c27	f0 15		beq $1c3e			beq 	_EXPSSExit
.1c29	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1c2b	d2 28		cmp ($28)			cmp 	(zTemp2)
.1c2d	b0 0f		bcs $1c3e			bcs 	_EXPSSExit
.1c2f	5a		phy				phy
.1c30	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1c32	c8		iny				iny 									; +1 for the length byte
.1c33					_EXPSSCopy:
.1c33	b1 28		lda ($28),y			lda 	(zTemp2),y
.1c35	20 c9 2b	jsr $2bc9			jsr 	StringTempWrite
.1c38	c8		iny				iny
.1c39	c6 26		dec $26				dec 	zTemp1
.1c3b	d0 f6		bne $1c33			bne 	_EXPSSCopy
.1c3d	7a		ply				ply
.1c3e					_EXPSSExit:
.1c3e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1c3f					EXPUnaryVal:
.1c3f	20 01 19	jsr $1901			jsr 	EXPEvalString 					; string to R0, zTemp0
.1c42	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 					; )
.1c45	20 49 1c	jsr $1c49			jsr 	VALConversionZTemp0
.1c48	60		rts				rts
.1c49					VALConversionZTemp0:
.1c49	5a		phy				phy
.1c4a	18		clc				clc
.1c4b	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1c4d	69 01		adc #$01			adc 	#1
.1c4f	aa		tax				tax
.1c50	a5 25		lda $25				lda 	zTemp0+1
.1c52	69 00		adc #$00			adc 	#0
.1c54	a8		tay				tay
.1c55	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1c57	20 a0 33	jsr $33a0			jsr 	IFloatStringToFloatR0 			; do conversion
.1c5a	b0 02		bcs $1c5e			bcs 	_EUVError
.1c5c	7a		ply				ply
.1c5d	60		rts				rts
.1c5e					_EUVError:
.1c5e	4c e8 28	jmp $28e8		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1c61					AssemblerLookup:
>1c61	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1c69	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1c79	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1c89	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1c99	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1ca9	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1cb9	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1cc9	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1cd9	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1ce9	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1cf9	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1d09	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1d19	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1d29	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1d39	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1d49	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1d59	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1d61					BinaryPrecedence:
>1d61	02					.byte	 2	; $ef =
>1d62	02					.byte	 2	; $f0 <>
>1d63	02					.byte	 2	; $f1 <=
>1d64	02					.byte	 2	; $f2 <
>1d65	02					.byte	 2	; $f3 >=
>1d66	02					.byte	 2	; $f4 >
>1d67	01					.byte	 1	; $f5 XOR
>1d68	01					.byte	 1	; $f6 OR
>1d69	01					.byte	 1	; $f7 AND
>1d6a	04					.byte	 4	; $f8 DIV
>1d6b	04					.byte	 4	; $f9 MOD
>1d6c	04					.byte	 4	; $fa <<
>1d6d	04					.byte	 4	; $fb >>
>1d6e	04					.byte	 4	; $fc /
>1d6f	04					.byte	 4	; $fd *
>1d70	03					.byte	 3	; $fe -
>1d71	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1d72					StructureOffsets:
>1d72	01					.byte	1  	; $80 REPEAT
>1d73	ff					.byte	255	; $81 UNTIL
>1d74	01					.byte	1  	; $82 WHILE
>1d75	ff					.byte	255	; $83 WEND
>1d76	01					.byte	1  	; $84 IF
>1d77	ff					.byte	255	; $85 ENDIF
>1d78	01					.byte	1  	; $86 DO
>1d79	ff					.byte	255	; $87 LOOP
>1d7a	01					.byte	1  	; $88 PROC
>1d7b	ff					.byte	255	; $89 ENDPROC
>1d7c	01					.byte	1  	; $8a FOR
>1d7d	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1d7e					StandardTokens:
>1d7e	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1d85	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1d8b	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1d91	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1d96	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1d99	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1d9f	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1da2	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1da7	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1dac	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1db4	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1db8	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1dbd	00					.byte	$00                                     	; $8c [[end]]
>1dbe	00					.byte	$00                                     	; $8d [[shift]]
>1dbf	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1dc4	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1dc9	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1dcc	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1dd1	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1dd5	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1ddb	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1de1	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1de6	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1dea	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1dee	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1df3	01 2c					.byte	$01,$2c                                 	; $99 ,
>1df5	01 3b					.byte	$01,$3b                                 	; $9a ;
>1df7	01 3a					.byte	$01,$3a                                 	; $9b :
>1df9	01 27					.byte	$01,$27                                 	; $9c '
>1dfb	01 29					.byte	$01,$29                                 	; $9d )
>1dfd	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1e02	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1e07	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1e0c	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1e11	01 5b					.byte	$01,$5b                                 	; $a2 [
>1e13	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1e15	01 23					.byte	$01,$23                                 	; $a4 #
>1e17	01 2e					.byte	$01,$2e                                 	; $a5 .
>1e19	00					.byte	0											; $a6
>1e1a	00					.byte	0											; $a7
>1e1b	00					.byte	0											; $a8
>1e1c	00					.byte	0											; $a9
>1e1d	00					.byte	0											; $aa
>1e1e	00					.byte	0											; $ab
>1e1f	00					.byte	0											; $ac
>1e20	00					.byte	0											; $ad
>1e21	00					.byte	0											; $ae
>1e22	00					.byte	0											; $af
>1e23	00					.byte	0											; $b0
>1e24	00					.byte	0											; $b1
>1e25	00					.byte	0											; $b2
>1e26	00					.byte	0											; $b3
>1e27	00					.byte	0											; $b4
>1e28	00					.byte	0											; $b5
>1e29	00					.byte	0											; $b6
>1e2a	00					.byte	0											; $b7
>1e2b	00					.byte	0											; $b8
>1e2c	00					.byte	0											; $b9
>1e2d	00					.byte	0											; $ba
>1e2e	00					.byte	0											; $bb
>1e2f	00					.byte	0											; $bc
>1e30	00					.byte	0											; $bd
>1e31	00					.byte	0											; $be
>1e32	00					.byte	0											; $bf
>1e33	00					.byte	0											; $c0
>1e34	00					.byte	0											; $c1
>1e35	00					.byte	0											; $c2
>1e36	00					.byte	0											; $c3
>1e37	00					.byte	0											; $c4
>1e38	00					.byte	0											; $c5
>1e39	00					.byte	0											; $c6
>1e3a	00					.byte	0											; $c7
>1e3b	00					.byte	0											; $c8
>1e3c	00					.byte	0											; $c9
>1e3d	00					.byte	0											; $ca
>1e3e	00					.byte	0											; $cb
>1e3f	00					.byte	0											; $cc
>1e40	00					.byte	0											; $cd
>1e41	00					.byte	0											; $ce
>1e42	00					.byte	0											; $cf
>1e43	00					.byte	0											; $d0
>1e44	00					.byte	0											; $d1
>1e45	00					.byte	0											; $d2
>1e46	00					.byte	0											; $d3
>1e47	00					.byte	0											; $d4
>1e48	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1e4e	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1e54	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1e5c	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1e63	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1e69	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1e6f	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1e74	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1e79	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1e7e	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1e83	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1e88	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1e8e	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1e93	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1e9b	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1ea2	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1ea7	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1eac	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1eb2	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1eb7	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1ebd	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1ec2	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1ec8	01 28					.byte	$01,$28                                 	; $eb (
>1eca	01 26					.byte	$01,$26                                 	; $ec &
>1ecc	00					.byte	$00                                     	; $ed [[decimal]]
>1ecd	00					.byte	$00                                     	; $ee [[string]]
>1ece	01 3d					.byte	$01,$3d                                 	; $ef =
>1ed0	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1ed3	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1ed6	01 3c					.byte	$01,$3c                                 	; $f2 <
>1ed8	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1edb	01 3e					.byte	$01,$3e                                 	; $f4 >
>1edd	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1ee1	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1ee4	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1ee8	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1eec	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1ef0	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1ef3	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1ef6	01 2f					.byte	$01,$2f                                 	; $fc /
>1ef8	01 2a					.byte	$01,$2a                                 	; $fd *
>1efa	01 2d					.byte	$01,$2d                                 	; $fe -
>1efc	01 2b					.byte	$01,$2b                                 	; $ff +
>1efe	ff					.byte	$FF
.1eff					AlternateTokens:
>1eff	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1f05	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1f09	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1f0d	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1f12	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1f16	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1f1d	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1f22	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1f27	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1f2c	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1f32	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1f37	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1f3e	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1f46	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1f4a	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1f4e	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1f54	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>1f5c	52
>1f5d	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1f5e					VectorTable:
>1f5e	b6 27					.word	Command_REPEAT           ; $80 REPEAT
>1f60	bf 27					.word	Command_UNTIL            ; $81 UNTIL
>1f62	99 28					.word	Command_WHILE            ; $82 WHILE
>1f64	ba 28					.word	Command_WEND             ; $83 WEND
>1f66	8c 27					.word	IfCommand                ; $84 IF
>1f68	b5 27					.word	EndIf                    ; $85 ENDIF
>1f6a	0e 26					.word	Command_DO               ; $86 DO
>1f6c	26 26					.word	Command_LOOP             ; $87 LOOP
>1f6e	17 17					.word	NoExec08                 ; $88 PROC
>1f70	02 26					.word	Command_ENDPROC          ; $89 ENDPROC
>1f72	2f 26					.word	Command_FOR              ; $8a FOR
>1f74	bc 26					.word	Command_NEXT             ; $8b NEXT
>1f76	98 16					.word	RUNEndOfLine             ; $8c [[END]]
>1f78	f4 16					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1f7a	ae 27					.word	ElseCode                 ; $8e ELSE
>1f7c	17 17					.word	NoExec01                 ; $8f THEN
>1f7e	17 17					.word	NoExec02                 ; $90 TO
>1f80	17 17					.word	NoExec03                 ; $91 STEP
>1f82	3f 14					.word	CommandLET               ; $92 LET
>1f84	94 13					.word	Command_Print            ; $93 PRINT
>1f86	8d 13					.word	Command_Input            ; $94 INPUT
>1f88	c6 25					.word	Command_CALL             ; $95 CALL
>1f8a	02 17					.word	Command_Sys              ; $96 SYS
>1f8c	0d 16					.word	Command_REM              ; $97 REM
>1f8e	17 26					.word	Command_EXIT             ; $98 EXIT
>1f90	17 17					.word	NoExec04                 ; $99 ,
>1f92	17 17					.word	NoExec05                 ; $9a ;
>1f94	17 17					.word	NoExec06                 ; $9b :
>1f96	0d 16					.word	Command_REM2             ; $9c '
>1f98	17 17					.word	NoExec07                 ; $9d )
>1f9a	36 13					.word	Command_Poke             ; $9e POKE
>1f9c	33 13					.word	Command_Doke             ; $9f DOKE
>1f9e	99 15					.word	Command_READ             ; $a0 READ
>1fa0	00 16					.word	Command_DATA             ; $a1 DATA
>1fa2	0d 10					.word	Command_AssemblerStart   ; $a2 [
>1fa4	12 2d					.word	NotImplemented           ; $a3 ]
>1fa6	12 2d					.word	NotImplemented           ; $a4 #
>1fa8	12 2d					.word	NotImplemented           ; $a5 .
>1faa	12 2d					.word	NotImplemented           ; $a6
>1fac	12 2d					.word	NotImplemented           ; $a7
>1fae	12 2d					.word	NotImplemented           ; $a8
>1fb0	12 2d					.word	NotImplemented           ; $a9
>1fb2	12 2d					.word	NotImplemented           ; $aa
>1fb4	12 2d					.word	NotImplemented           ; $ab
>1fb6	12 2d					.word	NotImplemented           ; $ac
>1fb8	12 2d					.word	NotImplemented           ; $ad
>1fba	12 2d					.word	NotImplemented           ; $ae
>1fbc	12 2d					.word	NotImplemented           ; $af
>1fbe	12 2d					.word	NotImplemented           ; $b0
>1fc0	12 2d					.word	NotImplemented           ; $b1
>1fc2	12 2d					.word	NotImplemented           ; $b2
>1fc4	12 2d					.word	NotImplemented           ; $b3
>1fc6	12 2d					.word	NotImplemented           ; $b4
>1fc8	12 2d					.word	NotImplemented           ; $b5
>1fca	12 2d					.word	NotImplemented           ; $b6
>1fcc	12 2d					.word	NotImplemented           ; $b7
>1fce	12 2d					.word	NotImplemented           ; $b8
>1fd0	12 2d					.word	NotImplemented           ; $b9
>1fd2	12 2d					.word	NotImplemented           ; $ba
>1fd4	12 2d					.word	NotImplemented           ; $bb
>1fd6	12 2d					.word	NotImplemented           ; $bc
>1fd8	12 2d					.word	NotImplemented           ; $bd
>1fda	12 2d					.word	NotImplemented           ; $be
>1fdc	12 2d					.word	NotImplemented           ; $bf
>1fde	12 2d					.word	NotImplemented           ; $c0
>1fe0	12 2d					.word	NotImplemented           ; $c1
>1fe2	12 2d					.word	NotImplemented           ; $c2
>1fe4	12 2d					.word	NotImplemented           ; $c3
>1fe6	12 2d					.word	NotImplemented           ; $c4
>1fe8	12 2d					.word	NotImplemented           ; $c5
>1fea	12 2d					.word	NotImplemented           ; $c6
>1fec	12 2d					.word	NotImplemented           ; $c7
>1fee	12 2d					.word	NotImplemented           ; $c8
>1ff0	12 2d					.word	NotImplemented           ; $c9
>1ff2	12 2d					.word	NotImplemented           ; $ca
>1ff4	12 2d					.word	NotImplemented           ; $cb
>1ff6	12 2d					.word	NotImplemented           ; $cc
>1ff8	12 2d					.word	NotImplemented           ; $cd
>1ffa	12 2d					.word	NotImplemented           ; $ce
>1ffc	12 2d					.word	NotImplemented           ; $cf
>1ffe	12 2d					.word	NotImplemented           ; $d0
>2000	12 2d					.word	NotImplemented           ; $d1
>2002	12 2d					.word	NotImplemented           ; $d2
>2004	12 2d					.word	NotImplemented           ; $d3
>2006	12 2d					.word	NotImplemented           ; $d4
>2008	85 1a					.word	EXPUnaryDeek             ; $d5 DEEK(
>200a	77 1a					.word	EXPUnaryPeek             ; $d6 PEEK(
>200c	c3 1b					.word	EXPUnaryRight            ; $d7 RIGHT$(
>200e	b6 1b					.word	EXPUnaryLeft             ; $d8 LEFT$(
>2010	dd 1b					.word	EXPUnaryMid              ; $d9 MID$(
>2012	73 1b					.word	EXPUnaryStr              ; $da STR$(
>2014	3f 1c					.word	EXPUnaryVal              ; $db VAL(
>2016	40 1b					.word	EXPUnarySgn              ; $dc SGN(
>2018	f1 19					.word	EXPUnaryAbs              ; $dd ABS(
>201a	c5 1a					.word	EXPUnaryLen              ; $de LEN(
>201c	56 1b					.word	EXPUnarySqr              ; $df SQR(
>201e	15 1a					.word	EXPUnaryChr              ; $e0 CHR$(
>2020	ff 19					.word	EXPUnaryAsc              ; $e1 ASC(
>2022	a7 1a					.word	EXPUnaryInkey            ; $e2 INKEY$(
>2024	12 2d					.word	NotImplemented           ; $e3 EVENT(
>2026	12 2d					.word	NotImplemented           ; $e4 TIME
>2028	bb 1a					.word	EXPUnaryInt              ; $e5 INT(
>202a	9d 1a					.word	EXPUnaryFrac             ; $e6 FRAC(
>202c	26 1a					.word	EXPUnaryDec              ; $e7 DEC(
>202e	65 1b					.word	EXPUnaryHex              ; $e8 HEX$(
>2030	da 1a					.word	EXPUnaryRnd              ; $e9 RND(
>2032	ea 1a					.word	ExpUnaryRand             ; $ea RAND(
>2034	d3 1a					.word	EXPUnaryParenthesis      ; $eb (
>2036	fb 19					.word	EXPUnaryNull             ; $ec &
>2038	74 1a					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>203a	9b 1b					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>203c	d4 17					.word	EXPCompareEqual          ; $ef =
>203e	ef 17					.word	EXPCompareNotEqual       ; $f0 <>
>2040	f8 17					.word	EXPCompareLessEqual      ; $f1 <=
>2042	dd 17					.word	EXPCompareLess           ; $f2 <
>2044	01 18					.word	EXPCompareGreaterEqual   ; $f3 >=
>2046	e6 17					.word	EXPCompareGreater        ; $f4 >
>2048	81 17					.word	EXPBinXor                ; $f5 XOR
>204a	75 17					.word	EXPBinOr                 ; $f6 OR
>204c	69 17					.word	EXPBinAnd                ; $f7 AND
>204e	41 17					.word	EXPBinIDiv               ; $f8 DIV
>2050	52 17					.word	EXPBinIMod               ; $f9 MOD
>2052	4c 18					.word	EXPBinLeft               ; $fa <<
>2054	54 18					.word	EXPBinRight              ; $fb >>
>2056	35 17					.word	EXPBinFDiv               ; $fc /
>2058	2c 17					.word	EXPBinMul                ; $fd *
>205a	23 17					.word	EXPBinSub                ; $fe -
>205c	1a 17					.word	EXPBinAdd                ; $ff +
.205e					AlternateVectorTable:
>205e	a3 11					.word	Command_CLEAR            ; $8d80 CLEAR
>2060	90 15					.word	Command_NEW              ; $8d81 NEW
>2062	8c 16					.word	Command_RUN              ; $8d82 RUN
>2064	ff 16					.word	Command_STOP             ; $8d83 STOP
>2066	fc 16					.word	Command_END              ; $8d84 END
>2068	95 11					.word	Command_ASSERT           ; $8d85 ASSERT
>206a	b9 14					.word	Command_LIST             ; $8d86 LIST
>206c	80 2c					.word	Command_SAVE             ; $8d87 SAVE
>206e	3f 2c					.word	Command_LOAD             ; $8d88 LOAD
>2070	72 27					.word	Command_GOSUB            ; $8d89 GOSUB
>2072	5d 13					.word	Command_GOTO             ; $8d8a GOTO
>2074	80 27					.word	Command_RETURN           ; $8d8b RETURN
>2076	5e 16					.word	Command_RESTORE          ; $8d8c RESTORE
>2078	17 12					.word	CommandDIM               ; $8d8d DIM
>207a	d6 2b					.word	Command_DIR              ; $8d8e DIR
>207c	13 2c					.word	Command_ERASE            ; $8d8f ERASE
>207e	1a 16					.word	Command_RENUMBER         ; $8d90 RENUMBER

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.2080					TOKDetokenise:
.2080	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.2082	84 29		sty $29				sty 	zTemp2+1
.2084	9c 1a 05	stz $051a			stz		TOKLastCharacter 			; clear last character
.2087					_TOKDLoop:
.2087	20 cc 20	jsr $20cc			jsr 	TOKDGet 					; get next
.208a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.208c	f0 3c		beq $20ca			beq 	_TOKDExit
.208e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.2090	f0 33		beq $20c5			beq 	_TOKDDataItem
.2092	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.2094	f0 2f		beq $20c5			beq 	_TOKDDataItem
.2096	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.2098	f0 19		beq $20b3			beq 	_TOKAmpersand
.209a	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.209c	10 05		bpl $20a3			bpl 	_TOKDNotToken
.209e	20 92 21	jsr $2192			jsr 	TOKDToken 					; token to text.
.20a1	80 e4		bra $2087			bra 	_TOKDLoop
.20a3					_TOKDNotToken:
.20a3	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.20a5	90 05		bcc $20ac			bcc 	_TOKDNotIdentifier
.20a7	20 09 21	jsr $2109			jsr 	TOKDIdentifier
.20aa	80 db		bra $2087			bra 	_TOKDLoop
.20ac					_TOKDNotIdentifier:
.20ac	a0 0a		ldy #$0a			ldy 	#10
.20ae	20 4c 21	jsr $214c			jsr 	TOKDInteger
.20b1	80 d4		bra $2087			bra 	_TOKDLoop
.20b3					_TOKAmpersand:
.20b3	20 d4 21	jsr $21d4			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.20b6	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.20b8	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.20bb	20 cc 20	jsr $20cc			jsr 	TOKDGet 					; get first char of integer
.20be	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.20c0	20 4c 21	jsr $214c			jsr 	TOKDInteger
.20c3	80 c2		bra $2087			bra 	_TOKDLoop
.20c5					_TOKDDataItem:
.20c5	20 e2 20	jsr $20e2			jsr 	TOKDDataItem
.20c8	80 bd		bra $2087			bra 	_TOKDLoop
.20ca					_TOKDExit:
.20ca	18		clc				clc
.20cb	60		rts				rts
.20cc	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.20ce	e6 28		inc $28				inc 	zTemp2
.20d0	d0 02		bne $20d4			bne 	_TKDGExit
.20d2	e6 29		inc $29				inc 	zTemp2+1
.20d4					_TKDGExit:
.20d4	60		rts				rts
.20d5					TOKDOutput:
.20d5	8d 1a 05	sta $051a			sta 	TOKLastCharacter
.20d8	6c 18 05	jmp ($0518)			jmp 	(TOKOutputMethod)
.20db					TOKSetDetokeniseOutput:
.20db	8e 18 05	stx $0518			stx 	TOKOutputMethod
.20de	8c 19 05	sty $0519			sty 	TOKOutputMethod+1
.20e1	60		rts				rts
.0518					TOKOutputMethod:
>0518							.fill 	2
.051a					TOKLastCharacter:
>051a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.20e2					TOKDDataItem:
.20e2	a8		tay				tay 								; type in Y
.20e3	a9 22		lda #$22			lda 	#'"'						; start with " or .
.20e5	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.20e7	f0 02		beq $20eb			beq 	_TOKDDIsString
.20e9	a9 2e		lda #$2e			lda 	#'.'
.20eb					_TOKDDIsString:
.20eb	20 d5 20	jsr $20d5			jsr 	TOKDOutput 					; dump it
.20ee	20 cc 20	jsr $20cc			jsr 	TOKDGet 					; get length into X
.20f1	aa		tax				tax
.20f2					_TOKDDOutput:
.20f2	ca		dex				dex 								; are we complete
.20f3	e0 ff		cpx #$ff			cpx 	#255
.20f5	f0 08		beq $20ff			beq 	_TOKDDEnd
.20f7	20 cc 20	jsr $20cc			jsr 	TOKDGet 					; get character and output it
.20fa	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.20fd	80 f3		bra $20f2			bra 	_TOKDDOutput
.20ff					_TOKDDEnd:
.20ff	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.2101	d0 05		bne $2108			bne 	_TOKDDNotString
.2103	a9 22		lda #$22			lda 	#'"'
.2105	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.2108					_TOKDDNotString:
.2108	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.2109					TOKDIdentifier:
.2109	a0 ff		ldy #$ff			ldy 	#$FF
.210b	8c 1b 05	sty $051b			sty 	TOKDIFirstChar
.210e					_TOKDLoop:
.210e	a8		tay				tay 								; token in Y
.210f	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.2111	c0 64		cpy #$64			cpy 	#$64
.2113	f0 0b		beq $2120			beq 	_TOKDIOutput
.2115	98		tya				tya 								; handle a-z
.2116	18		clc				clc
.2117	69 21		adc #$21			adc	 	#$21
.2119	c0 5a		cpy #$5a			cpy 	#$5A
.211b	90 03		bcc $2120			bcc 	_TOKDIOutput
.211d	38		sec				sec 								; handle 0-9
.211e	e9 4b		sbc #$4b			sbc 	#$4B
.2120					_TOKDIOutput:
.2120	2c 1b 05	bit $051b			bit 	TOKDIFirstChar
.2123	10 08		bpl $212d			bpl 	_TOKDINoSpacing
.2125	48		pha				pha
.2126	20 cf 21	jsr $21cf			jsr 	TOKDSpacing
.2129	9c 1b 05	stz $051b			stz 	TOKDIFirstChar
.212c	68		pla				pla
.212d					_TOKDINoSpacing:
.212d	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.2130	20 cc 20	jsr $20cc			jsr 	TOKDGet 					; get next token
.2133	c9 7c		cmp #$7c			cmp 	#$7C
.2135	90 d7		bcc $210e			bcc 	_TOKDLoop
.2137	f0 12		beq $214b			beq 	_TOKDIExit 					; it's a number, no tail.
.2139	4a		lsr a				lsr 	a 							; string ?
.213a	90 07		bcc $2143			bcc 	_TOKDICheckArray
.213c	48		pha				pha
.213d	a9 24		lda #$24			lda 	#"$"
.213f	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.2142	68		pla				pla
.2143					_TOKDICheckArray:
.2143	4a		lsr a				lsr 	a 							; array ?
.2144	90 05		bcc $214b			bcc 	_TOKDIExit
.2146	a9 28		lda #$28			lda 	#"("
.2148	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.214b					_TOKDIExit:
.214b	60		rts				rts
.051b					TOKDIFirstChar:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.214c					TOKDInteger:
.214c	5a		phy				phy 								; save base
.214d	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.214f	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.2152					_TOKDILoop:
.2152	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.2154	c9 40		cmp #$40			cmp 	#$40
.2156	b0 1d		bcs $2175			bcs 	_TOKDIHaveInteger
.2158	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.215a	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.215d	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.2160	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.2163	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.2166	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.2169	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.216c	20 cc 20	jsr $20cc			jsr 	TOKDGet 					; OR byte in.
.216f	05 08		ora $08				ora 	IFR0+IM0
.2171	85 08		sta $08				sta 	IFR0+IM0
.2173	80 dd		bra $2152			bra 	_TOKDILoop
.2175					_TOKDIHaveInteger:
.2175	7a		ply				ply 								; restore base
.2176	98		tya				tya 								; base in A
.2177	20 de 32	jsr $32de			jsr 	IFloatIntegerToStringR0
.217a	86 24		stx $24				stx 	zTemp0
.217c	84 25		sty $25				sty 	zTemp0+1
.217e	b2 24		lda ($24)			lda 	(zTemp0)
.2180	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.2182	b1 24		lda ($24),y			lda 	(zTemp0),y
.2184	20 cf 21	jsr $21cf			jsr 	TOKDSpacing 				; check spacing okay.
.2187					_TOKDOutput:
.2187	b1 24		lda ($24),y			lda 	(zTemp0),y
.2189	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.218c	c8		iny				iny
.218d	b1 24		lda ($24),y			lda 	(zTemp0),y
.218f	d0 f6		bne $2187			bne 	_TOKDOutput
.2191	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2192					TOKDToken:
.2192	a2 7e		ldx #$7e			ldx 	#StandardTokens & $FF 		; standard table
.2194	a0 1d		ldy #$1d			ldy 	#StandardTokens >> 8
.2196	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.2198	d0 07		bne $21a1			bne 	_TOKDSearch
.219a	20 cc 20	jsr $20cc			jsr 	TOKDGet 					; get next
.219d	a2 ff		ldx #$ff			ldx 	#AlternateTokens & $FF 		; alt table
.219f	a0 1e		ldy #$1e			ldy 	#AlternateTokens >> 8
.21a1					_TOKDSearch:
.21a1	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.21a3	84 25		sty $25				sty 	zTemp0+1
.21a5	aa		tax				tax 								; token ID in X.
.21a6					_TOKDFind:
.21a6	ca		dex				dex 								; reached the start
.21a7	10 0d		bpl $21b6			bpl 	_TOKDFound
.21a9	38		sec				sec 								; go to next entry
.21aa	b2 24		lda ($24)			lda 	(zTemp0)
.21ac	65 24		adc $24				adc 	zTemp0
.21ae	85 24		sta $24				sta 	zTemp0
.21b0	90 f4		bcc $21a6			bcc 	_TOKDFind
.21b2	e6 25		inc $25				inc 	zTemp0+1
.21b4	80 f0		bra $21a6			bra 	_TOKDFind
.21b6					_TOKDFound:
.21b6	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.21b8	f0 14		beq $21ce			beq 	_TOKDExit
.21ba	aa		tax				tax
.21bb	a0 01		ldy #$01			ldy 	#1 							; output the token.
.21bd	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.21bf	20 cf 21	jsr $21cf			jsr 	TOKDSpacing
.21c2					_TOKDOutput:
.21c2	b1 24		lda ($24),y			lda 	(zTemp0),y
.21c4	20 85 25	jsr $2585			jsr 	TOKToLower
.21c7	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.21ca	c8		iny				iny
.21cb	ca		dex				dex
.21cc	d0 f4		bne $21c2			bne 	_TOKDOutput
.21ce					_TOKDExit:
.21ce	60		rts				rts
.21cf					TOKDSpacing:
.21cf	20 9c 25	jsr $259c			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.21d2	90 0d		bcc $21e1			bcc 	TOKDSExit
.21d4					TOKDSpaceLastAlpha:
.21d4	ad 1a 05	lda $051a			lda 	TOKLastCharacter			; and last character also alphanumeric
.21d7	20 9c 25	jsr $259c			jsr 	TOKIsIdentifierElement
.21da	90 05		bcc $21e1			bcc 	TOKDSExit
.21dc	a9 20		lda #$20			lda 	#" " 						; we need a space.
.21de	20 d5 20	jsr $20d5			jsr 	TOKDOutput
.21e1					TOKDSExit:
.21e1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.21e2					PGMDeleteLine:
.21e2	20 95 22	jsr $2295			jsr 	PGMEndProgram 				; end of program into zTemp0
.21e5	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.21e7	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.21ea	85 27		sta $27				sta 	zTemp1+1
.21ec					_PGMDLoop:
.21ec	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.21ee	38		sec				sec
.21ef	f0 3a		beq $222b			beq 	_PGMDExit
.21f1	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.21f3	b1 26		lda ($26),y			lda 	(zTemp1),y
.21f5	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.21f8	d0 08		bne $2202			bne 	_PGMDNext
.21fa	c8		iny				iny
.21fb	b1 26		lda ($26),y			lda 	(zTemp1),y
.21fd	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2200	f0 0d		beq $220f			beq 	_PGMDDelete
.2202					_PGMDNext:
.2202	18		clc				clc
.2203	b2 26		lda ($26)			lda 	(zTemp1)
.2205	65 26		adc $26				adc 	zTemp1
.2207	85 26		sta $26				sta 	zTemp1
.2209	90 e1		bcc $21ec			bcc 	_PGMDLoop
.220b	e6 27		inc $27				inc 	zTemp1+1
.220d	80 dd		bra $21ec			bra 	_PGMDLoop
.220f					_PGMDDelete:
.220f	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.2211	a8		tay				tay
.2212					_PGMDCopy:
.2212	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.2214	92 26		sta ($26)			sta 	(zTemp1)
.2216	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.2218	c5 24		cmp $24				cmp 	zTemp0
.221a	d0 07		bne $2223			bne 	_PGMDNext2
.221c	a5 27		lda $27				lda 	zTemp1+1
.221e	c5 25		cmp $25				cmp 	zTemp0+1
.2220	18		clc				clc
.2221	f0 08		beq $222b			beq 	_PGMDExit
.2223					_PGMDNext2:
.2223	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.2225	d0 eb		bne $2212			bne 	_PGMDCopy
.2227	e6 27		inc $27				inc 	zTemp1+1
.2229	80 e7		bra $2212			bra 	_PGMDCopy
.222b					_PGMDExit:
.222b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.222c					PGMInsertLine:
.222c	20 95 22	jsr $2295			jsr 	PGMEndProgram 				; end of program into zTemp0
.222f	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2231	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.2234	85 27		sta $27				sta 	zTemp1+1
.2236					_PGMILoop:
.2236	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.2238	f0 1c		beq $2256			beq 	_PGMIInsert
.223a	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.223c	b1 26		lda ($26),y			lda 	(zTemp1),y
.223e	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2241	c8		iny				iny
.2242	b1 26		lda ($26),y			lda 	(zTemp1),y
.2244	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.2247	b0 0d		bcs $2256			bcs 	_PGMIInsert 				; insert here.
.2249	18		clc				clc
.224a	b2 26		lda ($26)			lda 	(zTemp1)
.224c	65 26		adc $26				adc 	zTemp1
.224e	85 26		sta $26				sta 	zTemp1
.2250	90 e4		bcc $2236			bcc 	_PGMILoop
.2252	e6 27		inc $27				inc 	zTemp1+1
.2254	80 e0		bra $2236			bra 	_PGMILoop
.2256					_PGMIInsert:
.2256	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.2259					_PGMIInsertLoop:
.2259	b2 24		lda ($24)			lda 	(zTemp0)
.225b	91 24		sta ($24),y			sta 	(zTemp0),y
.225d	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.225f	c5 24		cmp $24				cmp 	zTemp0
.2261	d0 06		bne $2269			bne 	_PGMINext
.2263	a5 27		lda $27				lda 	zTemp1+1
.2265	c5 25		cmp $25				cmp 	zTemp0+1
.2267	f0 0a		beq $2273			beq 	_PGMIInserted
.2269					_PGMINext:
.2269	a5 24		lda $24				lda 	zTemp0
.226b	d0 02		bne $226f			bne 	_PGMINoBorrow
.226d	c6 25		dec $25				dec 	zTemp0+1
.226f					_PGMINoBorrow:
.226f	c6 24		dec $24				dec 	zTemp0
.2271	80 e6		bra $2259			bra 	_PGMIInsertLoop
.2273					_PGMIInserted:
.2273	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.2275					_PGMICopyLoop:
.2275	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.2278	91 26		sta ($26),y			sta 	(zTemp1),y
.227a	c8		iny				iny
.227b	cc 00 04	cpy $0400			cpy 	TOKLineSize
.227e	d0 f5		bne $2275			bne 	_PGMICopyLoop
.2280	18		clc				clc
.2281	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2282					PGMSetBaseAddress:
.2282	8e 1c 05	stx $051c			stx 	PGMBaseHigh 				; use memory from here
.2285	8c 1d 05	sty $051d			sty 	PGMEndMemoryHigh 			; to here.
.2288	60		rts				rts
.2289					PGMNewProgram:
.2289	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.228b	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.228e	85 25		sta $25				sta 	zTemp0+1
.2290	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2292	92 24		sta ($24)			sta 	(zTemp0)
.2294	60		rts				rts
.2295					PGMEndProgram:
.2295	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.2297	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.229a	85 25		sta $25				sta 	zTemp0+1
.229c					_PGMEPLoop:
.229c	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.229e	f0 0b		beq $22ab			beq 	_PGMEPExit
.22a0	18		clc				clc 								; no, advance to next
.22a1	65 24		adc $24				adc 	zTemp0
.22a3	85 24		sta $24				sta 	zTemp0
.22a5	90 f5		bcc $229c			bcc 	_PGMEPLoop
.22a7	e6 25		inc $25				inc 	zTemp0+1
.22a9	80 f1		bra $229c			bra 	_PGMEPLoop
.22ab					_PGMEPExit:
.22ab	60		rts				rts
.051c					PGMBaseHigh:
>051c							.fill 	1
.051d					PGMEndMemoryHigh:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.22ac					TOKResetElement:
.22ac	9c 1e 05	stz $051e			stz 	TOKElement
.22af	60		rts				rts
.22b0					TOKWriteElement:
.22b0	da		phx				phx
.22b1	ae 1e 05	ldx $051e			ldx 	TOKElement
.22b4	9d 1f 05	sta $051f,x			sta 	TOKElementText,x
.22b7	9e 20 05	stz $0520,x			stz 	TOKElementText+1,x
.22ba	fa		plx				plx
.22bb	ee 1e 05	inc $051e			inc 	TOKElement
.22be	60		rts				rts
.051e					TOKElement:
>051e							.fill 	1
.051f					TOKElementText:
>051f							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.22bf					TOKTokeniseConstant:
.22bf	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.22c1	48		pha				pha 								; save on stack
.22c2	29 c0		and #$c0			and 	#$C0
.22c4	05 09		ora $09				ora 	IFR0+IM1
.22c6	05 0a		ora $0a				ora 	IFR0+IM2
.22c8	f0 10		beq $22da			beq 	_TTCLess
.22ca	da		phx				phx
.22cb	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.22cd					_TTCShiftRight:
.22cd	46 0a		lsr $0a				lsr 	IFR0+IM2
.22cf	66 09		ror $09				ror 	IFR0+IM1
.22d1	66 08		ror $08				ror 	IFR0+IM0
.22d3	ca		dex				dex
.22d4	d0 f7		bne $22cd			bne 	_TTCShiftRight
.22d6	fa		plx				plx
.22d7	20 bf 22	jsr $22bf			jsr 	TOKTokeniseConstant
.22da					_TTCLess:
.22da	68		pla				pla
.22db	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.22dd	20 7d 23	jsr $237d			jsr 	TOKWriteA
.22e0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.22e1					TOKTokeniseDecimals:
.22e1	20 90 23	jsr $2390			jsr 	TOKGetNext 					; consume the .
.22e4	20 09 25	jsr $2509			jsr 	TOKExtractInteger 			; pull an integer out as text.
.22e7	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.22e9	20 7d 23	jsr $237d			jsr 	TOKWriteA
.22ec	20 f1 22	jsr $22f1			jsr 	TOKOutputElementBuffer 		; then the buffer
.22ef	18		clc				clc
.22f0	60		rts				rts
.22f1					TOKOutputElementBuffer:
.22f1	ad 1e 05	lda $051e			lda 	TOKElement 					; get count and write that
.22f4	20 7d 23	jsr $237d			jsr 	TOKWriteA
.22f7	a8		tay				tay 								; put in Y
.22f8	f0 0c		beq $2306			beq 	_TOEExit 					; exit if empty which is okay.
.22fa	a2 01		ldx #$01			ldx 	#1
.22fc					_TOELoop:
.22fc	bd 1e 05	lda $051e,x			lda 	TOKElement,x
.22ff	20 7d 23	jsr $237d			jsr 	TOKWriteA
.2302	e8		inx				inx
.2303	88		dey				dey
.2304	d0 f6		bne $22fc			bne 	_TOELoop
.2306					_TOEExit:
.2306	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2307					TOKTokenise:
.2307	8c 1f 06	sty $061f			sty 	TOKDataSource+1 			; save source routine pointer
.230a	8e 1e 06	stx $061e			stx 	TOKDataSource
.230d	a9 01		lda #$01			lda 	#1 							; set first element flag.
.230f	8d 20 06	sta $0620			sta 	TOKIsFirstElement
.2312	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2314	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2317	9c 01 04	stz $0401			stz 	TOKLineNumber
.231a	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.231d					_TOKMainLoop:
.231d	20 8c 23	jsr $238c			jsr 	TOKGet 						; what follows.
.2320	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2322	f0 50		beq $2374			beq 	_TOKExit
.2324	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2326	d0 05		bne $232d			bne 	_TOKElement
.2328	20 90 23	jsr $2390			jsr 	TOKGetNext
.232b	80 f0		bra $231d			bra 	_TOKMainLoop
.232d					_TOKElement:
.232d	20 90 25	jsr $2590			jsr 	TOKIsDigit 					; is it 0..9
.2330	90 16		bcc $2348			bcc 	_TOKNotDigit
.2332	20 e0 24	jsr $24e0			jsr 	TOKTokeniseInteger 			; get integer
.2335	b0 44		bcs $237b			bcs 	_TOKFail 					; did it fail ?
.2337	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.233a	20 8c 23	jsr $238c			jsr 	TOKGet 						; what follows ?
.233d	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.233f	d0 dc		bne $231d			bne 	_TOKMainLoop
.2341	20 e1 22	jsr $22e1			jsr 	TOKTokeniseDecimals
.2344	b0 35		bcs $237b			bcs 	_TOKFail
.2346	80 d5		bra $231d			bra 	_TOKMainLoop
.2348					_TOKNotDigit:
.2348	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.234b	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.234d	d0 07		bne $2356			bne 	_TOKNotHex
.234f	20 e6 23	jsr $23e6			jsr 	TOKTokeniseHexadecimal
.2352	b0 27		bcs $237b			bcs 	_TOKFail
.2354	80 c7		bra $231d			bra 	_TOKMainLoop
.2356					_TOKNotHex:
.2356	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2358	d0 07		bne $2361			bne 	_TOKNotString
.235a	20 57 25	jsr $2557			jsr 	TOKTokeniseString
.235d	b0 1c		bcs $237b			bcs 	_TOKFail
.235f	80 bc		bra $231d			bra 	_TOKMainLoop
.2361					_TOKNotString:
.2361	20 a9 25	jsr $25a9			jsr 	TOKIsAlpha 					; identifier ?
.2364	b0 07		bcs $236d			bcs 	_TOKIdentifier
.2366	20 1d 25	jsr $251d			jsr 	TOKTokenisePunctuation 		; punctuation
.2369	b0 10		bcs $237b			bcs 	_TOKFail
.236b	80 b0		bra $231d			bra 	_TOKMainLoop
.236d					_TOKIdentifier:
.236d	20 23 24	jsr $2423			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2370	b0 09		bcs $237b			bcs 	_TOKFail
.2372	80 a9		bra $231d			bra 	_TOKMainLoop
.2374					_TOKExit:
.2374	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2376	20 7d 23	jsr $237d			jsr 	TOKWriteA
.2379	18		clc				clc									; return with carry set.
.237a	60		rts				rts
.237b					_TOKFail:
.237b	38		sec				sec
.237c	60		rts				rts
.237d					TOKWriteA:
.237d	da		phx				phx
.237e	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2381	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2384	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2387	fa		plx				plx
.2388	ee 00 04	inc $0400			inc 	TOKLineSize
.238b	60		rts				rts
.238c					TOKGet:
.238c	18		clc				clc
.238d	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.2390					TOKGetNext:
.2390	38		sec				sec
.2391	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.061e					TOKDataSource:
>061e							.fill 	2
.0620					TOKIsFirstElement:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2394					TOKFindToken:
.2394	a2 7e		ldx #$7e			ldx 	#StandardTokens & $FF 		; do this table
.2396	a0 1d		ldy #$1d			ldy 	#StandardTokens >> 8
.2398	20 b0 23	jsr $23b0			jsr 	TOKFindTokenXY 				; find it, or not
.239b	b0 0d		bcs $23aa			bcs 	_TOKFound1
.239d	a2 ff		ldx #$ff			ldx 	#AlternateTokens & $FF 		; do the alternate table
.239f	a0 1e		ldy #$1e			ldy 	#AlternateTokens >> 8
.23a1	20 b0 23	jsr $23b0			jsr 	TOKFindTokenXY 				; find it, or not
.23a4	90 08		bcc $23ae			bcc 	_TOKFTFail 					; not ....
.23a6	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.23a8	38		sec				sec
.23a9	60		rts				rts
.23aa					_TOKFound1:
.23aa	a2 00		ldx #$00			ldx 	#0
.23ac	38		sec				sec
.23ad	60		rts				rts
.23ae					_TOKFTFail
.23ae	18		clc				clc
.23af	60		rts				rts
.23b0					TOKFindTokenXY:
.23b0	86 24		stx $24				stx 	zTemp0 						; save token table address
.23b2	84 25		sty $25				sty 	zTemp0+1
.23b4	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.23b6	8d 21 06	sta $0621			sta 	TOKCurrent
.23b9					_TOKFindLoop:
.23b9	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.23bb	18		clc				clc 		 						; clear carry in case of fail
.23bc	30 17		bmi $23d5			bmi 	_TOKExit 					; end of table, fail, so return CC.
.23be	cd 1e 05	cmp $051e			cmp 	TOKElement 					; compare against the element length
.23c1	d0 13		bne $23d6			bne 	_TOKNext 					; different, try next.
.23c3	aa		tax				tax 								; number of chars to compare.
.23c4	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.23c6					_TOKCompare:
.23c6	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.23c8	d9 1e 05	cmp $051e,y			cmp 	TOKElementText-1,y
.23cb	d0 09		bne $23d6			bne 	_TOKNext 					; different ? try next
.23cd	c8		iny				iny 								; compare next two
.23ce	ca		dex				dex
.23cf	d0 f5		bne $23c6			bne 	_TOKCompare 				; until done X characters.
.23d1	38		sec				sec
.23d2	ad 21 06	lda $0621			lda 	TOKCurrent 					; return current ID.
.23d5					_TOKExit:
.23d5	60		rts				rts
.23d6					_TOKNext:
.23d6	ee 21 06	inc $0621			inc 	TOKCurrent 					; increment token #
.23d9	38		sec				sec 								; add length+1 to ptr
.23da	b2 24		lda ($24)			lda 	(zTemp0)
.23dc	65 24		adc $24				adc 	zTemp0
.23de	85 24		sta $24				sta 	zTemp0
.23e0	90 d7		bcc $23b9			bcc 	_TOKFindLoop
.23e2	e6 25		inc $25				inc 	zTemp0+1
.23e4	80 d3		bra $23b9			bra 	_TOKFindLoop
.0621					TOKCurrent:
>0621							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.23e6					TOKTokeniseHexadecimal:
.23e6	20 90 23	jsr $2390			jsr 	TOKGetNext 					; consume the $
.23e9	a2 08		ldx #$08			ldx 	#IFR0
.23eb	20 3c 35	jsr $353c			jsr 	IFloatSetZero 				; set R0 = 0
.23ee					_TTHLoop:
.23ee	20 8c 23	jsr $238c			jsr 	TOKGet 						; keep getting and copying while numeric.
.23f1	20 b6 25	jsr $25b6			jsr 	TOKIsHexadecimal
.23f4	90 23		bcc $2419			bcc 	_TTHDone
.23f6	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.23f8	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.23fb	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.23fe	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.2401	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.2404	20 90 23	jsr $2390			jsr 	TOKGetNext
.2407	20 7a 25	jsr $257a			jsr 	TOKToUpper 					; make U/C
.240a	38		sec				sec 								; convert to decimal.
.240b	e9 30		sbc #$30			sbc 	#48
.240d	c9 0a		cmp #$0a			cmp 	#10
.240f	90 02		bcc $2413			bcc 	_TTHNotAlpha
.2411	e9 07		sbc #$07			sbc 	#7
.2413					_TTHNotAlpha:
.2413	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2415	85 08		sta $08				sta 	IFR0+IM0
.2417	80 d5		bra $23ee			bra 	_TTHLoop
.2419					_TTHDone:
.2419	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.241b	20 7d 23	jsr $237d			jsr 	TOKWriteA
.241e	20 bf 22	jsr $22bf			jsr 	TOKTokeniseConstant 		; write integer out.
.2421	18		clc				clc
.2422	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2423					TOKTokeniseIdentifier:
.2423	20 ac 22	jsr $22ac			jsr 	TOKResetElement 			; extract an identifier
.2426					_TOKGetIdentifier:
.2426	20 8c 23	jsr $238c			jsr 	TOKGet
.2429	20 7a 25	jsr $257a			jsr 	TOKToUpper
.242c	20 9c 25	jsr $259c			jsr 	TOKIsIdentifierElement
.242f	90 08		bcc $2439			bcc 	_TOKEndIdent
.2431	20 b0 22	jsr $22b0			jsr		TOKWriteElement
.2434	20 90 23	jsr $2390			jsr 	TOKGetNext
.2437	80 ed		bra $2426			bra 	_TOKGetIdentifier
.2439					_TOKEndIdent:
.2439	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.243b	d0 06		bne $2443			bne 	_TOKNotString
.243d	20 b0 22	jsr $22b0			jsr 	TOKWriteElement 			; add it
.2440	20 90 23	jsr $2390			jsr 	TOKGetNext 					; consume it
.2443					_TOKNotString:
.2443	20 8c 23	jsr $238c			jsr 	TOKGet 						; finally check for (
.2446	c9 28		cmp #$28			cmp 	#"("
.2448	d0 06		bne $2450			bne 	_TOKNoArray
.244a	20 b0 22	jsr $22b0			jsr 	TOKWriteElement 			; add it
.244d	20 90 23	jsr $2390			jsr 	TOKGetNext 					; consume it
.2450					_TOKNoArray:
.2450	20 94 23	jsr $2394			jsr 	TOKFindToken 				; find it
.2453	90 18		bcc $246d			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2455	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2457	f0 0f		beq $2468			beq 	_TOKComment 				; yes, do comment code.
.2459	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.245b	d0 06		bne $2463			bne 	_TOKNoShift
.245d	48		pha				pha 								; write the shift.
.245e	8a		txa				txa
.245f	20 7d 23	jsr $237d			jsr 	TOKWriteA
.2462	68		pla				pla
.2463					_TOKNoShift:
.2463	20 7d 23	jsr $237d			jsr 	TOKWriteA 					; write the main token.
.2466	18		clc				clc
.2467	60		rts				rts
.2468					_TOKComment:
.2468	20 ad 24	jsr $24ad			jsr 	TOKDoComment
.246b	18		clc				clc
.246c	60		rts				rts
.246d					_TOKIsVariable:
.246d	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.246f					_TOKOutputBuffer:
.246f	bd 1f 05	lda $051f,x			lda 	TOKElementText,x 			; output it translated.
.2472	20 9b 24	jsr $249b			jsr 	TOKTranslateIdentifier
.2475	20 7d 23	jsr $237d			jsr 	TOKWriteA
.2478	e8		inx				inx
.2479	bd 1f 05	lda $051f,x			lda 	TOKElementText,x
.247c	20 9c 25	jsr $259c			jsr 	TOKIsIdentifierElement
.247f	b0 ee		bcs $246f			bcs 	_TOKOutputBuffer
.2481	a8		tay				tay 								; last char in Y
.2482	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2484	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2486	f0 0e		beq $2496			beq 	_TOKIVExit
.2488	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.248a	d0 04		bne $2490			bne 	_TOKIVCheckArray 			; no, check for (
.248c	1a		inc a				inc 	a 							; token is $7D
.248d	bc 20 05	ldy $0520,x			ldy 	TOKElementText+1,x 			; get next one.
.2490					_TOKIVCheckArray:
.2490	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2492	d0 02		bne $2496			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2494	1a		inc a				inc 	a
.2495	1a		inc a				inc 	a
.2496					_TOKIVExit:
.2496	20 7d 23	jsr $237d			jsr 	TOKWriteA 					; ending token
.2499	18		clc				clc
.249a	60		rts				rts
.249b					TOKTranslateIdentifier:
.249b	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.249d	f0 0b		beq $24aa			beq 	_TTI64
.249f	38		sec				sec
.24a0	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.24a2	10 03		bpl $24a7			bpl 	_TTIExit
.24a4	18		clc				clc 								; map 09 onto 26-35
.24a5	69 2b		adc #$2b			adc 	#"A"-"0"+26
.24a7					_TTIExit:
.24a7	09 40		ora #$40			ora 	#$40 						; correct range.
.24a9	60		rts				rts
.24aa	a9 64		lda #$64	_TTI64:	lda 	#$64
.24ac	60		rts				rts
.24ad					TOKDoComment:
.24ad	20 7d 23	jsr $237d			jsr 	TOKWriteA					; output the token.
.24b0					_TOKSkipSpaces:
.24b0	20 8c 23	jsr $238c			jsr 	TOKGet 						; skip over spaces
.24b3	c9 20		cmp #$20			cmp 	#' '
.24b5	d0 05		bne $24bc			bne 	_TOKEndSpaces
.24b7	20 90 23	jsr $2390			jsr 	TOKGetNext
.24ba	80 f4		bra $24b0			bra 	_TOKSkipSpaces
.24bc					_TOKEndSpaces:
.24bc	48		pha				pha 								; save it
.24bd	68		pla				pla
.24be	f0 04		beq $24c4			beq 	_TOKDCExit 					; end of line.
.24c0	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.24c2	d0 01		bne $24c5			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.24c4					_TOKDCExit:
.24c4	60		rts				rts
.24c5					_TOKDCDoLine:
.24c5	20 ac 22	jsr $22ac			jsr 	TOKResetElement 			; start getting the string
.24c8					_TOKDCLoop:
.24c8	20 8c 23	jsr $238c			jsr 	TOKGet 						; check EOL
.24cb	c9 00		cmp #$00			cmp 	#0
.24cd	f0 08		beq $24d7			beq 	_TOKDCEndComment
.24cf	20 90 23	jsr $2390			jsr 	TOKGetNext 					; get and consume
.24d2	20 b0 22	jsr $22b0			jsr 	TOKWriteElement
.24d5	80 f1		bra $24c8			bra 	_TOKDCLoop
.24d7					_TOKDCEndComment:
.24d7	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.24d9	20 7d 23	jsr $237d			jsr 	TOKWriteA
.24dc	20 f1 22	jsr $22f1			jsr 	TOKOutputElementBuffer
.24df	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.24e0					TOKTokeniseInteger:
.24e0	20 09 25	jsr $2509			jsr 	TOKExtractInteger 			; pull an integer out as text.
.24e3	a2 1f		ldx #$1f			ldx 	#TOKElementText & $FF
.24e5	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.24e7	ad 1e 05	lda $051e			lda		TOKElement
.24ea	20 a0 33	jsr $33a0			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.24ed	ad 20 06	lda $0620			lda 	TOKIsFirstElement 			; first element ?
.24f0	f0 12		beq $2504			beq 	_TOKNotLineNumber
.24f2	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.24f4	d0 0c		bne $2502			bne 	_TOKBadLineNumeber
.24f6	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.24f8	8d 01 04	sta $0401			sta 	TOKLineNumber
.24fb	a5 09		lda $09				lda 	IFR0+IM1
.24fd	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2500	18		clc				clc
.2501	60		rts				rts
.2502					_TOKBadLineNumeber:
.2502	38		sec				sec
.2503	60		rts				rts
.2504					_TOKNotLineNumber:
.2504	20 bf 22	jsr $22bf			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2507	18		clc				clc
.2508	60		rts				rts
.2509					TOKExtractInteger:
.2509	20 ac 22	jsr $22ac			jsr 	TOKResetElement 			; restart
.250c					_TTILoop:
.250c	20 8c 23	jsr $238c			jsr 	TOKGet 						; keep getting and copying while numeric.
.250f	20 90 25	jsr $2590			jsr 	TOKIsDigit
.2512	90 08		bcc $251c			bcc 	_TOKEIExit
.2514	20 b0 22	jsr $22b0			jsr 	TOKWriteElement
.2517	20 90 23	jsr $2390			jsr 	TOKGetNext
.251a	80 f0		bra $250c			bra 	_TTILoop
.251c					_TOKEIExit:
.251c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.251d					TOKTokenisePunctuation:
.251d	20 ac 22	jsr $22ac			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2520	20 90 23	jsr $2390			jsr 	TOKGetNext
.2523	20 b0 22	jsr $22b0			jsr 	TOKWriteElement
.2526	20 8c 23	jsr $238c			jsr 	TOKGet 						; what follows ?
.2529	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.252b	f0 10		beq $253d			beq 	_TTPOne
.252d	20 a0 25	jsr $25a0			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2530	b0 0b		bcs $253d			bcs 	_TTPOne 					; these speed things up a bit.
.2532	20 b0 22	jsr $22b0			jsr 	TOKWriteElement 			; this is what we will search for.
.2535	20 94 23	jsr $2394			jsr 	TOKFindToken
.2538	b0 0a		bcs $2544			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.253a	ce 1e 05	dec $051e			dec 	TOKElement 					; make it a single character
.253d					_TTPOne:
.253d	20 94 23	jsr $2394			jsr 	TOKFindToken 				; look for one character punctuation
.2540	b0 07		bcs $2549			bcs 	_TTPOutputExit 				; we found it
.2542	38		sec				sec 								; not recognised.
.2543	60		rts				rts
.2544					_TTPConsumeExit:
.2544	48		pha				pha
.2545	20 90 23	jsr $2390			jsr 	TOKGetNext 					; get the 2nd char out.
.2548	68		pla				pla
.2549					_TTPOutputExit:
.2549	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.254b	f0 05		beq $2552			beq 	_TTPComment
.254d	20 7d 23	jsr $237d			jsr  	TOKWriteA 					; write token out
.2550	18		clc				clc
.2551	60		rts				rts
.2552					_TTPComment:
.2552	20 ad 24	jsr $24ad			jsr 	TOKDoComment
.2555	18		clc				clc
.2556	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2557					TOKTokeniseString:
.2557	20 90 23	jsr $2390			jsr 	TOKGetNext 					; consume the "
.255a	20 ac 22	jsr $22ac			jsr 	TOKResetElement 			; start getting the string
.255d					_TOKTSLoop:
.255d	20 8c 23	jsr $238c			jsr 	TOKGet 						; check EOL
.2560	c9 00		cmp #$00			cmp 	#0
.2562	f0 0c		beq $2570			beq 	_TOKTSExit
.2564	20 90 23	jsr $2390			jsr 	TOKGetNext 					; get and consume
.2567	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2569	f0 05		beq $2570			beq 	_TOKTSExit
.256b	20 b0 22	jsr $22b0			jsr 	TOKWriteElement
.256e	80 ed		bra $255d			bra 	_TOKTSLoop
.2570					_TOKTSExit:
.2570	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2572	20 7d 23	jsr $237d			jsr 	TOKWriteA
.2575	20 f1 22	jsr $22f1			jsr 	TOKOutputElementBuffer
.2578	18		clc				clc
.2579	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.257a					TOKToUpper:
.257a	c9 61		cmp #$61			cmp 	#"a"
.257c	90 06		bcc $2584			bcc 	_TTUNotLower
.257e	c9 7b		cmp #$7b			cmp 	#"z"+1
.2580	b0 02		bcs $2584			bcs 	_TTUNotLower
.2582	49 20		eor #$20			eor 	#$20
.2584					_TTUNotLower:
.2584	60		rts				rts
.2585					TOKToLower:
.2585	c9 41		cmp #$41			cmp 	#"A"
.2587	90 06		bcc $258f			bcc 	_TTUNotUpper
.2589	c9 5b		cmp #$5b			cmp 	#"Z"+1
.258b	b0 02		bcs $258f			bcs 	_TTUNotUpper
.258d	49 20		eor #$20			eor 	#$20
.258f					_TTUNotUpper:
.258f	60		rts				rts
.2590					TOKIsDigit:
.2590	c9 30		cmp #$30			cmp 	#"0"
.2592	90 06		bcc $259a			bcc 	TOKFail
.2594	c9 3a		cmp #$3a			cmp 	#"9"+1
.2596	b0 02		bcs $259a			bcs 	TOKFail
.2598					TOKSucceed:
.2598	38		sec				sec
.2599	60		rts				rts
.259a					TOKFail:
.259a	18		clc				clc
.259b	60		rts				rts
.259c					TOKIsIdentifierElement:
.259c	c9 5f		cmp #$5f			cmp 	#"_"
.259e	f0 f8		beq $2598			beq 	TOKSucceed 					; else fall through to alphanumeric
.25a0					TOKIsAlphaNumeric:
.25a0	20 a9 25	jsr $25a9			jsr 	TOKIsAlpha
.25a3	b0 f3		bcs $2598			bcs 	TOKSucceed
.25a5	20 90 25	jsr $2590			jsr 	TOKIsDigit
.25a8	60		rts				rts
.25a9					TOKIsAlpha:
.25a9	20 7a 25	jsr $257a			jsr 	TOKToUpper
.25ac	c9 41		cmp #$41			cmp 	#"A"
.25ae	90 ea		bcc $259a			bcc 	TOKFail
.25b0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.25b2	b0 e6		bcs $259a			bcs 	TOKFail
.25b4	80 e2		bra $2598			bra 	TOKSucceed
.25b6					TOKIsHexadecimal:
.25b6	20 90 25	jsr $2590			jsr		TOKIsDigit
.25b9	b0 dd		bcs $2598			bcs 	TOKSucceed
.25bb	20 a9 25	jsr $25a9			jsr 	TOKIsAlpha
.25be	90 da		bcc $259a			bcc 	TOKFail
.25c0	c9 47		cmp #$47			cmp 	#"F"+1
.25c2	b0 d6		bcs $259a			bcs 	TOKFail
.25c4	80 d2		bra $2598			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.25c6					Command_CALL:
.25c6	a9 42		lda #$42			lda 	#STK_CALL
.25c8	20 b8 2a	jsr $2ab8			jsr 	StackOpen
.25cb	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.25cd	29 c0		and #$c0			and 	#$C0
.25cf	c9 40		cmp #$40			cmp 	#$40
.25d1	d0 29		bne $25fc			bne 	_CCSyntax
.25d3	20 7f 2e	jsr $2e7f			jsr 	VARGetInfo 					; get the information
.25d6	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 				; check right bracket follows.
.25d9	20 31 2e	jsr $2e31			jsr 	VARFind 					; exists ?
.25dc	90 21		bcc $25ff			bcc 	_CCUnknown
.25de	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.25e0	85 24		sta $24				sta 	zTemp0
.25e2	20 eb 2a	jsr $2aeb			jsr 	STKSaveCodePosition 		; save return address on stack.
.25e5	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.25e7	b1 24		lda ($24),y			lda 	(zTemp0),y
.25e9	c9 ff		cmp #$ff			cmp 	#$FF
.25eb	d0 12		bne $25ff			bne 	_CCUnknown
.25ed	88		dey				dey 								; get Y offset to stack
.25ee	b1 24		lda ($24),y			lda 	(zTemp0),y
.25f0	48		pha				pha
.25f1	88		dey				dey 								; get address
.25f2	b1 24		lda ($24),y			lda 	(zTemp0),y
.25f4	85 19		sta $19				sta 	codePtr+1
.25f6	b2 24		lda ($24)			lda 	(zTemp0)
.25f8	85 18		sta $18				sta 	codePtr
.25fa	7a		ply				ply 								; restore Y
.25fb	60		rts				rts
.25fc					_CCSyntax:
.25fc	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.25ff					_CCUnknown:
.25ff	4c 3b 2a	jmp $2a3b		jmp	ErrorV_unknown
.2602					Command_ENDPROC:
.2602	a9 42		lda #$42			lda 	#STK_CALL
.2604	20 e3 2a	jsr $2ae3			jsr 	StackCheckFrame
.2607	20 fd 2a	jsr $2afd			jsr 	STKLoadCodePosition 		; return
.260a	20 d5 2a	jsr $2ad5			jsr 	StackClose
.260d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.260e					Command_DO:
.260e	a9 22		lda #$22			lda 	#STK_DO
.2610	20 b8 2a	jsr $2ab8			jsr 	StackOpen
.2613	20 eb 2a	jsr $2aeb			jsr 	STKSaveCodePosition 		; save loop position
.2616	60		rts				rts
.2617					Command_EXIT:
.2617	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2619	20 e3 2a	jsr $2ae3			jsr 	StackCheckFrame
.261c	20 d5 2a	jsr $2ad5			jsr 	StackClose 					; close it
.261f	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2621	aa		tax				tax
.2622	20 d6 27	jsr $27d6			jsr 	ScanForward
.2625	60		rts				rts
.2626					Command_LOOP:
.2626	a9 22		lda #$22			lda 	#STK_DO
.2628	20 e3 2a	jsr $2ae3			jsr 	StackCheckFrame
.262b	20 fd 2a	jsr $2afd			jsr 	STKLoadCodePosition 		; loop back
.262e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.262f					Command_FOR:
.262f	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2631	20 b8 2a	jsr $2ab8			jsr 	StackOpen
.2634	20 3f 14	jsr $143f			jsr 	CommandLET 					; do "I = 1" bit
.2637	5a		phy				phy 								; save variable address to +4,+5
.2638	a0 04		ldy #$04			ldy 	#4
.263a	a5 24		lda $24				lda 	zTemp0
.263c	91 2c		sta ($2c),y			sta 	(basicStack),y
.263e	c8		iny				iny
.263f	a5 25		lda $25				lda 	zTemp0+1
.2641	91 2c		sta ($2c),y			sta 	(basicStack),y
.2643	7a		ply				ply
.2644	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2646	20 af 2a	jsr $2aaf			jsr 	ERRCheckA
.2649	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.264c	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.264e	a2 08		ldx #$08			ldx 	#IFR0
.2650	20 a5 26	jsr $26a5			jsr 	CFSaveR0X
.2653	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2655	c9 91		cmp #$91			cmp 	#PR_STEP
.2657	d0 06		bne $265f			bne 	_CFStep1
.2659	c8		iny				iny 								; consume step
.265a	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; evaluate STEP
.265d	80 24		bra $2683			bra 	_CFWriteStep
.265f					_CFStep1:
.265f	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2661	a9 01		lda #$01			lda 	#1
.2663	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.2666	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2667	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2669	b1 2c		lda ($2c),y			lda 	(basicStack),y
.266b	85 24		sta $24				sta 	zTemp0
.266d	c8		iny				iny
.266e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2670	85 25		sta $25				sta 	zTemp0+1
.2672	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2674	b1 24		lda ($24),y			lda 	(zTemp0),y
.2676	d0 0a		bne $2682			bne 	_CFNotOptimised
.2678	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.267a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.267c	d0 04		bne $2682			bne 	_CFNotOptimised
.267e	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2680	85 0b		sta $0b				sta 	IFR0+IExp
.2682					_CFNotOptimised:
.2682	7a		ply				ply
.2683					_CFWriteStep:
.2683	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2685	a9 06		lda #$06			lda 	#6
.2687	20 a5 26	jsr $26a5			jsr 	CFSaveR0X
.268a	20 eb 2a	jsr $2aeb			jsr 	STKSaveCodePosition 		; save loop position
.268d	60		rts				rts
.268e					CFLoadR0X:
.268e	5a		phy				phy
.268f	a8		tay				tay
.2690	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2692	95 00		sta $00,x			sta 	IM0,x
.2694	c8		iny				iny
.2695	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2697	95 01		sta $01,x			sta 	IM1,x
.2699	c8		iny				iny
.269a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.269c	95 02		sta $02,x			sta 	IM2,x
.269e	c8		iny				iny
.269f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.26a1	95 03		sta $03,x			sta 	IExp,x
.26a3	7a		ply				ply
.26a4	60		rts				rts
.26a5					CFSaveR0X:
.26a5	5a		phy				phy
.26a6	a8		tay				tay
.26a7	b5 00		lda $00,x			lda 	IM0,x
.26a9	91 2c		sta ($2c),y			sta 	(basicStack),y
.26ab	c8		iny				iny
.26ac	b5 01		lda $01,x			lda 	IM1,x
.26ae	91 2c		sta ($2c),y			sta 	(basicStack),y
.26b0	c8		iny				iny
.26b1	b5 02		lda $02,x			lda 	IM2,x
.26b3	91 2c		sta ($2c),y			sta 	(basicStack),y
.26b5	c8		iny				iny
.26b6	b5 03		lda $03,x			lda 	IExp,x
.26b8	91 2c		sta ($2c),y			sta 	(basicStack),y
.26ba	7a		ply				ply
.26bb	60		rts				rts
.26bc					Command_NEXT:
.26bc	a9 37		lda #$37			lda 	#STK_FOR
.26be	20 e3 2a	jsr $2ae3			jsr 	StackCheckFrame
.26c1	5a		phy				phy 								; check optimised loop
.26c2	a0 09		ldy #$09			ldy 	#9
.26c4	b1 2c		lda ($2c),y			lda 	(basicStack),y
.26c6	7a		ply				ply
.26c7	0a		asl a				asl 	a
.26c8	b0 35		bcs $26ff			bcs 	_CNOptimised
.26ca	20 37 27	jsr $2737			jsr 	_CNLoadValue 				; load index value to R0.
.26cd	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.26cf	a9 06		lda #$06			lda 	#6
.26d1	20 8e 26	jsr $268e			jsr 	CFLoadR0X
.26d4	20 34 2f	jsr $2f34			jsr 	IFloatAdd 					; add them together and write back.
.26d7	20 5a 27	jsr $275a			jsr 	_CNSaveValue
.26da	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.26dc	a2 0c		ldx #$0c			ldx 	#IFR1
.26de	20 8e 26	jsr $268e			jsr 	CFLoadR0X
.26e1	20 0b 32	jsr $320b			jsr 	IFloatCompare 				; compare terminal vs current
.26e4	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.26e6	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.26e9	f0 10		beq $26fb			beq 	_CNLoopBack
.26eb	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.26ed	5a		phy				phy
.26ee	a0 09		ldy #$09			ldy 	#6+IExp
.26f0	51 2c		eor ($2c),y			eor 	(basicStack),y
.26f2	7a		ply				ply
.26f3	29 40		and #$40			and 	#IFSign
.26f5	f0 04		beq $26fb			beq 	_CNLoopBack
.26f7					_CNExitLoop:
.26f7	20 d5 2a	jsr $2ad5			jsr 	StackClose		 			; return
.26fa	60		rts				rts
.26fb					_CNLoopBack:
.26fb	20 fd 2a	jsr $2afd			jsr 	STKLoadCodePosition 		; loop back
.26fe	60		rts				rts
.26ff					_CNOptimised:
.26ff	5a		phy				phy
.2700	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2702	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2704	85 28		sta $28				sta 	zTemp2
.2706	c8		iny				iny
.2707	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2709	85 29		sta $29				sta 	zTemp2+1
.270b	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.270d					_CNIncrement:
.270d	c8		iny				iny
.270e	b1 28		lda ($28),y			lda 	(zTemp2),y
.2710	1a		inc a				inc 	a
.2711	91 28		sta ($28),y			sta 	(zTemp2),y
.2713	f0 f8		beq $270d			beq 	_CNIncrement
.2715	18		clc				clc 								; point zTemp0 to terminal value
.2716	a5 2c		lda $2c				lda 	basicStack
.2718	69 0a		adc #$0a			adc 	#10
.271a	85 24		sta $24				sta 	zTemp0
.271c	a5 2d		lda $2d				lda 	basicStack+1
.271e	69 00		adc #$00			adc 	#0
.2720	85 25		sta $25				sta 	zTemp0+1
.2722	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2724	18		clc				clc 								; borrow 1, we want > not >=
.2725	b2 28		lda ($28)			lda 	(zTemp2)
.2727	f2 24		sbc ($24)			sbc 	(zTemp0)
.2729	b1 28		lda ($28),y			lda 	(zTemp2),y
.272b	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.272d	c8		iny				iny
.272e	b1 28		lda ($28),y			lda 	(zTemp2),y
.2730	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2732	7a		ply				ply
.2733	b0 c2		bcs $26f7			bcs 	_CNExitLoop
.2735	80 c4		bra $26fb			bra 	_CNLoopBack
.2737					_CNLoadValue:
.2737	5a		phy				phy
.2738	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.273a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.273c	85 28		sta $28				sta 	zTemp2
.273e	c8		iny				iny
.273f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2741	85 29		sta $29				sta 	zTemp2+1
.2743	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2745	b1 28		lda ($28),y			lda 	(zTemp2),y
.2747	85 08		sta $08				sta 	IFR0+IM0
.2749	c8		iny				iny
.274a	b1 28		lda ($28),y			lda 	(zTemp2),y
.274c	85 09		sta $09				sta 	IFR0+IM1
.274e	c8		iny				iny
.274f	b1 28		lda ($28),y			lda 	(zTemp2),y
.2751	85 0a		sta $0a				sta 	IFR0+IM2
.2753	c8		iny				iny
.2754	b1 28		lda ($28),y			lda 	(zTemp2),y
.2756	85 0b		sta $0b				sta 	IFR0+IExp
.2758	7a		ply				ply
.2759	60		rts				rts
.275a					_CNSaveValue:
.275a	5a		phy				phy
.275b	a0 00		ldy #$00			ldy 	#0
.275d	a5 08		lda $08				lda 	IFR0+IM0
.275f	91 28		sta ($28),y			sta 	(zTemp2),y
.2761	c8		iny				iny
.2762	a5 09		lda $09				lda 	IFR0+IM1
.2764	91 28		sta ($28),y			sta 	(zTemp2),y
.2766	c8		iny				iny
.2767	a5 0a		lda $0a				lda 	IFR0+IM2
.2769	91 28		sta ($28),y			sta 	(zTemp2),y
.276b	c8		iny				iny
.276c	a5 0b		lda $0b				lda 	IFR0+IExp
.276e	91 28		sta ($28),y			sta 	(zTemp2),y
.2770	7a		ply				ply
.2771	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2772					Command_GOSUB:
.2772	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; get line number
.2775	a9 52		lda #$52			lda 	#STK_GOSUB
.2777	20 b8 2a	jsr $2ab8			jsr 	StackOpen
.277a	20 eb 2a	jsr $2aeb			jsr 	STKSaveCodePosition 		; save return address on stack.
.277d	4c 60 13	jmp $1360			jmp 	GotoR0
.2780					Command_RETURN:
.2780	a9 52		lda #$52			lda 	#STK_GOSUB
.2782	20 e3 2a	jsr $2ae3			jsr 	StackCheckFrame
.2785	20 fd 2a	jsr $2afd			jsr 	STKLoadCodePosition 		; return
.2788	20 d5 2a	jsr $2ad5			jsr 	StackClose
.278b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.278c					IfCommand:
.278c	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; Get the if test.
.278f	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2791	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2793	d0 0c		bne $27a1			bne 	_IfStructured 				; we still support it.
.2795	c8		iny				iny 								; consume THEN
.2796	a2 08		ldx #$08			ldx 	#IFR0
.2798	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; is it zero
.279b	f0 01		beq $279e			beq 	_IfFail 					; if fail, go to next line
.279d	60		rts				rts 								; if THEN just continue
.279e					_IfFail:
.279e	4c 98 16	jmp $1698			jmp 	RUNEndOfLine
.27a1					_IfStructured:
.27a1	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; is it zero
.27a4	d0 07		bne $27ad			bne 	_IfExit 					; if not, then continue normally.
.27a6	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.27a8	a2 85		ldx #$85			ldx 	#PR_ENDIF
.27aa	20 d6 27	jsr $27d6			jsr 	ScanForward 				; and run from there
.27ad					_IfExit:
.27ad	60		rts				rts
.27ae					ElseCode:
.27ae	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.27b0	aa		tax				tax 								; so just go to the structure exit
.27b1	20 d6 27	jsr $27d6			jsr 	ScanForward
.27b4	60		rts				rts
.27b5					EndIf:
.27b5	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.27b6					Command_REPEAT:
.27b6	a9 02		lda #$02			lda 	#STK_REPEAT
.27b8	20 b8 2a	jsr $2ab8			jsr 	StackOpen
.27bb	20 eb 2a	jsr $2aeb			jsr 	STKSaveCodePosition 		; save loop position
.27be	60		rts				rts
.27bf					Command_UNTIL:
.27bf	a9 02		lda #$02			lda 	#STK_REPEAT
.27c1	20 e3 2a	jsr $2ae3			jsr 	StackCheckFrame
.27c4	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; work out the test
.27c7	a2 08		ldx #$08			ldx 	#IFR0
.27c9	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; check if zero
.27cc	f0 04		beq $27d2			beq 	_CULoopBack 				; if so keep looping
.27ce	20 d5 2a	jsr $2ad5			jsr 	StackClose		 			; return
.27d1	60		rts				rts
.27d2					_CULoopBack:
.27d2	20 fd 2a	jsr $2afd			jsr 	STKLoadCodePosition 		; loop back
.27d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.27d6					ScanForward:
.27d6	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.27d8	86 25		stx $25				stx 	zTemp0+1
.27da	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.27dc					_ScanForwardLoop:
.27dc	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.27de	d0 0a		bne $27ea			bne 	_ScanNoCheck
.27e0	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.27e2	c5 24		cmp $24				cmp 	zTemp0
.27e4	f0 49		beq $282f			beq 	_ScanExit
.27e6	c5 25		cmp $25				cmp 	zTemp0+1
.27e8	f0 45		beq $282f			beq 	_ScanExit
.27ea					_ScanNoCheck:
.27ea	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.27ec	c8		iny				iny
.27ed	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.27ef	f0 37		beq $2828			beq		_ScanDataItem
.27f1	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.27f3	f0 33		beq $2828			beq 	_ScanDataItem
.27f5	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.27f7	f0 1b		beq $2814			beq 	_ScanNextLine
.27f9	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.27fb	d0 01		bne $27fe			bne 	_ScanNoShift
.27fd	c8		iny				iny
.27fe					_ScanNoShift:
.27fe	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2800	b0 da		bcs $27dc			bcs 	_ScanForwardLoop
.2802	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2804	90 d6		bcc $27dc			bcc 	_ScanForwardLoop
.2806	aa		tax				tax 								; access the table to get the adjustment.
.2807	18		clc				clc
.2808	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.280a	7d f2 1c	adc $1cf2,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.280d	85 26		sta $26				sta 	zTemp1
.280f	10 cb		bpl $27dc			bpl		_ScanForwardLoop 			; error if -ve ?
.2811	4c 52 29	jmp $2952		jmp	ErrorV_structure
.2814					_ScanNextLine:
.2814	18		clc				clc	 								; forward to next line.
.2815	b2 18		lda ($18)			lda 	(codePtr)
.2817	65 18		adc $18				adc 	codePtr
.2819	85 18		sta $18				sta 	codePtr
.281b	90 02		bcc $281f			bcc 	_ScanNoCarry
.281d	e6 19		inc $19				inc 	codePtr+1
.281f					_ScanNoCarry:
.281f	a0 03		ldy #$03			ldy 	#3
.2821	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2823	d0 b7		bne $27dc			bne 	_ScanForwardLoop
.2825	4c 52 29	jmp $2952		jmp	ErrorV_structure
.2828					_ScanDataItem:
.2828	98		tya				tya
.2829	38		sec				sec
.282a	71 18		adc ($18),y			adc 	(codePtr),y
.282c	a8		tay				tay
.282d	80 ad		bra $27dc			bra 	_ScanForwardLoop
.282f					_ScanExit:
.282f	c8		iny				iny 								; consume final token.
.2830	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2831					ScanProcedures:
.2831	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2833	48		pha				pha
.2834	a5 19		lda $19				lda 	codePtr+1
.2836	48		pha				pha
.2837	5a		phy				phy
.2838	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.283b	85 19		sta $19				sta 	codePtr+1
.283d	64 18		stz $18				stz 	codePtr
.283f					_SPLoop:
.283f	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2841	f0 18		beq $285b			beq 	_SPExit
.2843	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2845	b1 18		lda ($18),y			lda 	(codePtr),y
.2847	c9 88		cmp #$88			cmp 	#PR_PROC
.2849	d0 03		bne $284e			bne 	_SPNext
.284b	20 63 28	jsr $2863			jsr 	_SPSetupRecord
.284e					_SPNext:
.284e	18		clc				clc 								; forward to next
.284f	b2 18		lda ($18)			lda 	(codePtr)
.2851	65 18		adc $18				adc 	codePtr
.2853	85 18		sta $18				sta 	codePtr
.2855	90 e8		bcc $283f			bcc 	_SPLoop
.2857	e6 19		inc $19				inc 	codePtr+1
.2859	80 e4		bra $283f			bra 	_SPLoop
.285b					_SPExit:
.285b	7a		ply				ply
.285c	68		pla				pla
.285d	85 19		sta $19				sta 	codePtr+1
.285f	68		pla				pla
.2860	85 18		sta $18				sta 	codePtr
.2862	60		rts				rts
.2863					_SPSetupRecord:
.2863	c8		iny				iny 								; check identifier follows
.2864	b1 18		lda ($18),y			lda 	(codePtr),y
.2866	29 c0		and #$c0			and 	#$C0
.2868	c9 40		cmp #$40			cmp 	#$40
.286a	d0 27		bne $2893			bne 	_SPSyntax
.286c	20 7f 2e	jsr $2e7f			jsr 	VARGetInfo 					; get the information
.286f	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen 				; check right bracket follows.
.2872	20 31 2e	jsr $2e31			jsr 	VARFind 					; already exists ?
.2875	b0 1f		bcs $2896			bcs 	_SPUsed 					; error !
.2877	20 dd 2d	jsr $2ddd			jsr 	VARCreate 					; create, XA points to the data.
.287a	85 24		sta $24				sta 	zTemp0
.287c	86 25		stx $25				stx 	zTemp0+1
.287e	5a		phy				phy 								; save Y pos on stack
.287f	a0 01		ldy #$01			ldy 	#1
.2881	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2883	92 24		sta ($24)			sta 	(zTemp0)
.2885	a5 19		lda $19				lda 	codePtr+1
.2887	91 24		sta ($24),y			sta 	(zTemp0),y
.2889	c8		iny				iny
.288a	68		pla				pla
.288b	91 24		sta ($24),y			sta 	(zTemp0),y
.288d	c8		iny				iny
.288e	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2890	91 24		sta ($24),y			sta 	(zTemp0),y
.2892	60		rts				rts
.2893					_SPSyntax:
.2893	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.2896					_SPUsed:
.2896	4c 1d 2a	jmp $2a1d		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2899					Command_WHILE:
.2899	5a		phy				phy 								; save position of the test
.289a	20 d7 18	jsr $18d7			jsr 	EXPEvalNumber 				; work out the while test.
.289d	a2 08		ldx #$08			ldx 	#IFR0
.289f	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; check if zero
.28a2	f0 0e		beq $28b2			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.28a4	98		tya				tya 								; position *after* test.
.28a5	7a		ply				ply 								; restore position before test, at WHILE
.28a6	88		dey				dey 								; so we execute the WHILE command again.
.28a7	48		pha				pha 								; push after test on the stack
.28a8	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.28aa	20 b8 2a	jsr $2ab8			jsr 	StackOpen
.28ad	20 eb 2a	jsr $2aeb			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.28b0	7a		ply				ply 								; restore the position *after* the test
.28b1	60		rts				rts
.28b2					_WHExitLoop:
.28b2	68		pla				pla 								; throw post loop position
.28b3	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.28b5	aa		tax				tax
.28b6	20 d6 27	jsr $27d6			jsr 	ScanForward
.28b9	60		rts				rts
.28ba					Command_WEND:
.28ba	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.28bc	20 e3 2a	jsr $2ae3			jsr 	StackCheckFrame
.28bf	20 fd 2a	jsr $2afd			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.28c2	20 d5 2a	jsr $2ad5			jsr 	StackClose		 			; erase the frame
.28c5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.28c6					ErrorV_syntax:
.28c6	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>28c9	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>28d1	45 72 72 6f 72 00
.28d7					ErrorV_range:
.28d7	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>28da	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>28e2	52 61 6e 67 65 00
.28e8					ErrorV_value:
.28e8	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>28eb	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>28f3	75 65 00
.28f6					ErrorV_type:
.28f6	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>28f9	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2901	73 6d 61 74 63 68 00
.2908					ErrorV_unimplemented:
.2908	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>290b	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2913	6c 65 6d 65 6e 74 65 64 00
.291c					ErrorV_assert:
.291c	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>291f	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2927	46 61 69 6c 00
.292c					ErrorV_internal:
.292c	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>292f	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2937	6c 20 45 72 72 6f 72 00
.293f					ErrorV_divzero:
.293f	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2942	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>294a	42 79 20 5a 65 72 6f 00
.2952					ErrorV_structure:
.2952	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2955	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>295d	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.296a					ErrorV_stop:
.296a	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>296d	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2975	20 53 74 6f 70 70 65 64 00
.297e					ErrorV_data:
.297e	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2981	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2989	44 61 74 61 00
.298e					ErrorV_redefine:
.298e	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2991	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2999	65 64 65 66 69 6e 65 64 00
.29a2					ErrorV_index:
.29a2	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>29a5	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>29ad	61 79 20 49 6e 64 65 78 00
.29b6					ErrorV_memory:
.29b6	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>29b9	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>29c1	4d 65 6d 6f 72 79 00
.29c8					ErrorV_uninitialised:
.29c8	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>29cb	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>29d3	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.29e3					ErrorV_string:
.29e3	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>29e6	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>29ee	69 6e 67 20 4c 65 6e 67 74 68 00
.29f9					ErrorV_variable:
.29f9	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>29fc	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2a04	65 20 4d 69 73 73 69 6e 67 00
.2a0e					ErrorV_stack:
.2a0e	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2a11	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2a19	75 6c 6c 00
.2a1d					ErrorV_dupproc:
.2a1d	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2a20	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2a28	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2a38	65 64 00
.2a3b					ErrorV_unknown:
.2a3b	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2a3e	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2a46	20 50 72 6f 63 65 64 75 72 65 00
.2a51					ErrorV_break:
.2a51	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2a54	05 42 72 65 61 6b 00			.text	5,"Break",0
.2a5b					ErrorV_line:
.2a5b	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2a5e	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2a66	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2a73					ErrorV_fnf:
.2a73	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2a76	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2a7e	74 20 46 6f 75 6e 64 00
.2a86					ErrorV_full:
.2a86	20 cd 2c	jsr $2ccd		jsr	ErrorHandler
>2a89	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2a91	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2a97					ERRCheckLParen:
.2a97	b1 18		lda ($18),y			lda 	(codePtr),y
.2a99	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2a9b	d0 18		bne $2ab5			bne 	ERRSyntaxError
.2a9d	c8		iny				iny
.2a9e	60		rts				rts
.2a9f					ERRCheckRParen:
.2a9f	b1 18		lda ($18),y			lda 	(codePtr),y
.2aa1	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2aa3	d0 10		bne $2ab5			bne 	ERRSyntaxError
.2aa5	c8		iny				iny
.2aa6	60		rts				rts
.2aa7					ERRCheckComma:
.2aa7	b1 18		lda ($18),y			lda 	(codePtr),y
.2aa9	c9 99		cmp #$99			cmp 	#PR_COMMA
.2aab	d0 08		bne $2ab5			bne 	ERRSyntaxError
.2aad	c8		iny				iny
.2aae	60		rts				rts
.2aaf					ERRCheckA:
.2aaf	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2ab1	d0 02		bne $2ab5			bne 	ERRSyntaxError
.2ab3	c8		iny				iny
.2ab4	60		rts				rts
.2ab5					ERRSyntaxError:
.2ab5	4c c6 28	jmp $28c6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2ab8					StackOpen:
.2ab8	48		pha				pha 								; save frame byte
.2ab9	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2abb	0a		asl a				asl 	a 							; claim twice this for storage
.2abc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2abe	38		sec				sec 								; so basically subtracting from
.2abf	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2ac1	85 2c		sta $2c				sta 	basicStack
.2ac3	b0 09		bcs $2ace			bcs 	_SONoBorrow
.2ac5	c6 2d		dec $2d				dec 	basicStack+1
.2ac7	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2ac9	cd 22 06	cmp $0622			cmp 	basicStackEnd
.2acc	f0 04		beq $2ad2			beq 	_SOMemory
.2ace					_SONoBorrow:
.2ace	68		pla				pla 								; get marker back and write at TOS
.2acf	92 2c		sta ($2c)			sta 	(basicStack)
.2ad1	60		rts				rts
.2ad2					_SOMemory:
.2ad2	4c 0e 2a	jmp $2a0e		jmp	ErrorV_stack
.2ad5					StackClose:
.2ad5	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2ad7	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2ad9	0a		asl a				asl 	a 							; claim twice this.
.2ada	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2adc	85 2c		sta $2c				sta 	basicStack
.2ade	90 02		bcc $2ae2			bcc 	_SCExit
.2ae0	e6 2d		inc $2d				inc 	basicStack+1
.2ae2					_SCExit:
.2ae2	60		rts				rts
.2ae3					StackCheckFrame:
.2ae3	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2ae5	d0 01		bne $2ae8			bne 	_SCFError 					; different, we have structures mixed up
.2ae7	60		rts				rts
.2ae8					_SCFError:
.2ae8	4c 52 29	jmp $2952		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2aeb					STKSaveCodePosition:
.2aeb	5a		phy				phy
.2aec	98		tya				tya 								; save Y at offset 1.
.2aed	a0 01		ldy #$01			ldy 	#1
.2aef	91 2c		sta ($2c),y			sta 	(basicStack),y
.2af1	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2af3	c8		iny				iny
.2af4	91 2c		sta ($2c),y			sta 	(basicStack),y
.2af6	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2af8	c8		iny				iny
.2af9	91 2c		sta ($2c),y			sta 	(basicStack),y
.2afb	7a		ply				ply
.2afc	60		rts				rts
.2afd					STKLoadCodePosition:
.2afd	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2aff	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2b01	85 19		sta $19				sta 	codePtr+1
.2b03	88		dey				dey
.2b04	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2b06	85 18		sta $18				sta 	codePtr
.2b08	88		dey				dey
.2b09	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2b0b	a8		tay				tay
.2b0c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2b0d					StackReset:
.2b0d	48		pha				pha 								; save top of memory
.2b0e	3a		dec a				dec 	a  							; end of stack = previous byte
.2b0f	85 2d		sta $2d				sta 	basicStack+1
.2b11	a9 ff		lda #$ff			lda 	#$FF
.2b13	85 2c		sta $2c				sta 	basicStack
.2b15	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2b17	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2b19	68		pla				pla 								; allocate pages for stack.
.2b1a	38		sec				sec
.2b1b	e9 02		sbc #$02			sbc 	#STACKPAGES
.2b1d	8d 22 06	sta $0622			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2b20	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0622					basicStackEnd:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2b21					StringConcrete:
.2b21	5a		phy				phy 								; save position on stack
.2b22	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2b24	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2b26	b0 41		bcs $2b69			bcs 	_SALengthError
.2b28	18		clc				clc 								; length of the new string
.2b29	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2b2b	90 02		bcc $2b2f			bcc 	_SAHaveLength
.2b2d	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2b2f					_SAHaveLength:
.2b2f	48		pha				pha 								; save length to be allocated for concreting.
.2b30	38		sec				sec
.2b31	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2b33	6d 24 06	adc $0624			adc 	stringMemory
.2b36	8d 24 06	sta $0624			sta 	stringMemory
.2b39	85 28		sta $28				sta 	zTemp2 						; update storage address
.2b3b	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2b3d	6d 25 06	adc $0625			adc 	stringMemory+1
.2b40	8d 25 06	sta $0625			sta 	stringMemory+1
.2b43	85 29		sta $29				sta 	zTemp2+1
.2b45	68		pla				pla 								; save length allocated in +0
.2b46	92 28		sta ($28)			sta 	(zTemp2)
.2b48	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2b4a	a0 01		ldy #$01			ldy 	#1
.2b4c	91 28		sta ($28),y			sta 	(zTemp2),y
.2b4e					_SACopyNewString:
.2b4e	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2b50	a0 02		ldy #$02			ldy 	#2
.2b52	91 28		sta ($28),y			sta 	(zTemp2),y
.2b54	aa		tax				tax 								; bytes to copy
.2b55	f0 0c		beq $2b63			beq 	_SACopyExit
.2b57	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2b59					_SACopyNSLoop:
.2b59	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2b5b	c8		iny				iny 								; write two on in string storage
.2b5c	c8		iny				iny
.2b5d	91 28		sta ($28),y			sta 	(zTemp2),y
.2b5f	88		dey				dey
.2b60	ca		dex				dex									; until copied all the string lengths.
.2b61	d0 f6		bne $2b59			bne 	_SACopyNSLoop
.2b63					_SACopyExit:
.2b63	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2b65	a5 28		lda $28				lda 	zTemp2
.2b67	7a		ply				ply
.2b68	60		rts				rts
.2b69					_SALengthError:
.2b69	4c e3 29	jmp $29e3		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2b6c					StringSystemInitialise:
.2b6c	3a		dec a				dec 	a 							; make last byte of previous page.
.2b6d	8d 25 06	sta $0625			sta 	stringMemory+1
.2b70	85 25		sta $25				sta 	zTemp0+1
.2b72	a9 ff		lda #$ff			lda 	#$FF
.2b74	8d 24 06	sta $0624			sta 	stringMemory
.2b77	85 24		sta $24				sta 	zTemp0
.2b79	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2b7b	92 24		sta ($24)			sta 	(zTemp0)
.2b7d	60		rts				rts
.2b7e					StringSpaceInitialise:
.2b7e	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2b80	8d 23 06	sta $0623			sta 	stringInitialised
.2b83	ad 24 06	lda $0624			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2b86	8d 26 06	sta $0626			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2b89	ad 25 06	lda $0625			lda 	stringMemory+1
.2b8c	3a		dec a				dec 	a
.2b8d	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2b90	20 0a 12	jsr $120a			jsr 	ClearCheckMemory
.2b93	60		rts				rts
.2b94					StringTempAllocate:
.2b94	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2b96	b0 2e		bcs $2bc6			bcs 	_STALength
.2b98	2c 23 06	bit $0623			bit 	stringInitialised 			; already initialised
.2b9b	30 05		bmi $2ba2			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2b9d	48		pha				pha 								; save value to subtract.
.2b9e	20 7e 2b	jsr $2b7e			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2ba1	68		pla				pla 								; restore it
.2ba2					_STAAllocate:
.2ba2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2ba4	18		clc				clc  								; deliberate allows one more
.2ba5	6d 26 06	adc $0626			adc 	stringTempPointer 			; subtract from temp pointer
.2ba8	8d 26 06	sta $0626			sta 	stringTempPointer
.2bab	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2bad	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2baf	ad 27 06	lda $0627			lda 	stringTempPointer+1
.2bb2	69 ff		adc #$ff			adc 	#$FF
.2bb4	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2bb7	85 2f		sta $2f				sta 	zsTemp+1
.2bb9	85 09		sta $09				sta 	IFR0+IM1
.2bbb	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2bbd	a9 80		lda #$80			lda 	#$80
.2bbf	85 0b		sta $0b				sta 	IFR0+IExp
.2bc1	a9 00		lda #$00			lda 	#0 							; clear the target string
.2bc3	92 2e		sta ($2e)			sta 	(zsTemp)
.2bc5	60		rts				rts
.2bc6					_STALength:
.2bc6	4c e3 29	jmp $29e3		jmp	ErrorV_string
.2bc9					StringTempWrite:
.2bc9	5a		phy				phy
.2bca	48		pha				pha
.2bcb	b2 2e		lda ($2e)			lda 	(zsTemp)
.2bcd	1a		inc a				inc 	a
.2bce	92 2e		sta ($2e)			sta 	(zsTemp)
.2bd0	a8		tay				tay
.2bd1	68		pla				pla
.2bd2	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2bd4	7a		ply				ply
.2bd5	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0623					stringInitialised:
>0623							.fill 	1
.0624					stringMemory:
>0624							.fill 	2
.0626					stringTempPointer:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2bd6					Command_DIR:
.2bd6	5a		phy				phy
.2bd7	38		sec				sec 								; reset read
.2bd8	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2bdb	18		clc		_CDLoop:clc
.2bdc	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2bdf	b0 27		bcs $2c08			bcs 	_CDExit 					; no more
.2be1	86 24		stx $24				stx 	zTemp0
.2be3	84 25		sty $25				sty 	zTemp0+1
.2be5	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2be8					_CDPad:
.2be8	a9 20		lda #$20			lda 	#32
.2bea	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2bed	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2bf0	e0 10		cpx #$10			cpx 	#16
.2bf2	90 f4		bcc $2be8			bcc 	_CDPad
.2bf4	a0 11		ldy #$11			ldy 	#17
.2bf6	b1 24		lda ($24),y			lda 	(zTemp0),y
.2bf8	aa		tax				tax
.2bf9	88		dey				dey
.2bfa	b1 24		lda ($24),y			lda 	(zTemp0),y
.2bfc	20 f6 2c	jsr $2cf6			jsr 	WriteIntXA
.2bff	a2 0a		ldx #$0a			ldx 	#_CDTail & $FF
.2c01	a0 2c		ldy #$2c			ldy 	#_CDTail >> 8
.2c03	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2c06	80 d3		bra $2bdb			bra 	_CDLoop
.2c08	7a		ply		_CDExit:ply
.2c09	60		rts				rts
.2c0a					_CDTail:
>2c0a	08						.byte 	_CDTail2-*-1
>2c0b	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2c13					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2c13					Command_ERASE:
.2c13	20 25 2c	jsr $2c25			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2c16	5a		phy				phy
.2c17	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2c19	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2c1b	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2c1e	7a		ply				ply
.2c1f	b0 01		bcs $2c22			bcs 	_CEFail
.2c21	60		rts				rts
.2c22					_CEFail:
.2c22	4c 73 2a	jmp $2a73		jmp	ErrorV_fnf
.2c25					FileSetupBlock:
.2c25	20 01 19	jsr $1901			jsr 	EXPEvalString 					; string to R0, zTemp0
.2c28	a5 24		lda $24				lda 	zTemp0 							; address to name
.2c2a	8d 28 06	sta $0628			sta 	FSBBlock
.2c2d	a5 25		lda $25				lda 	zTemp0+1
.2c2f	8d 29 06	sta $0629			sta 	FSBBlock+1 						; zero the rest.
.2c32	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2c35	9c 2b 06	stz $062b			stz 	FSBBlock+3
.2c38	9c 2c 06	stz $062c			stz 	FSBBlock+4
.2c3b	9c 2d 06	stz $062d			stz 	FSBBlock+5
.2c3e	60		rts				rts
.0628					FSBBlock:
>0628							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2c3f					Command_LOAD:
.2c3f	20 25 2c	jsr $2c25			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2c42	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2c45	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2c48	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2c4b	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2c4d	48		pha				pha
.2c4e	20 6b 2c	jsr $2c6b			jsr	 	FileCheckSecondParam
.2c51	5a		phy				phy
.2c52	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2c54	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2c56	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2c59	7a		ply				ply
.2c5a	b0 0c		bcs $2c68			bcs 	_CLFail
.2c5c	68		pla				pla 								; load program
.2c5d	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c5f	f0 06		beq $2c67			beq 	_CLNoClear
.2c61	20 c4 11	jsr $11c4			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2c64	4c 15 2d	jmp $2d15			jmp 	WarmStart 					; and warm start
.2c67					_CLNoClear:
.2c67	60		rts				rts
.2c68					_CLFail:
.2c68	4c 73 2a	jmp $2a73		jmp	ErrorV_fnf
.2c6b					FileCheckSecondParam:
.2c6b	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2c6d	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c6f	d0 0e		bne $2c7f			bne 	_FCSPExit
.2c71	c8		iny				iny 								; consume
.2c72	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; get address
.2c75	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2c77	8d 2a 06	sta $062a			sta 	FSBBlock+2
.2c7a	a5 09		lda $09				lda 	IFR0+IM1
.2c7c	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2c7f					_FCSPExit:
.2c7f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2c80					Command_SAVE:
.2c80	20 25 2c	jsr $2c25			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2c83	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2c85	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2c87	f0 22		beq $2cab			beq 	_CLSaveBlock 				; save "Name",from,size
.2c89	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2c8c	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2c8f	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2c92	20 95 22	jsr $2295			jsr		PGMEndProgram 				; end of program -> zTemp0
.2c95	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2c97	d0 02		bne $2c9b			bne 	_CLNoCarry
.2c99	e6 25		inc $25				inc 	zTemp0+1
.2c9b					_CLNoCarry:
.2c9b	a5 24		lda $24				lda 	zTemp0
.2c9d	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2ca0	38		sec				sec
.2ca1	a5 25		lda $25				lda 	zTemp0+1
.2ca3	ed 2b 06	sbc $062b			sbc 	FSBBlock+3
.2ca6	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2ca9	80 13		bra $2cbe			bra 	_CSSave
.2cab					_CLSaveBlock:
.2cab	20 6b 2c	jsr $2c6b			jsr 	FileCheckSecondParam 		; the address to save from.
.2cae	20 a7 2a	jsr $2aa7			jsr 	ERRCheckComma
.2cb1	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; get size
.2cb4	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2cb6	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2cb9	a5 09		lda $09				lda 	IFR0+IM1
.2cbb	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2cbe					_CSSave:
.2cbe	5a		phy				phy
.2cbf	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2cc1	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2cc3	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2cc6	7a		ply				ply
.2cc7	b0 01		bcs $2cca			bcs 	_CSFail
.2cc9	60		rts				rts
.2cca					_CSFail:
.2cca	4c 86 2a	jmp $2a86		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2ccd					ErrorHandler:
.2ccd	fa		plx				plx 								; get address of msg
.2cce	7a		ply				ply
.2ccf	e8		inx				inx 								; bump past RTS
.2cd0	d0 01		bne $2cd3			bne 	_EHNoInc
.2cd2	c8		iny				iny
.2cd3					_EHNoInc:
.2cd3	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2cd6	ad 2e 06	lda $062e			lda 	ERRLine 					; direct command ?
.2cd9	0d 2f 06	ora $062f			ora 	ERRLine+1
.2cdc	f0 10		beq $2cee			beq 	_EHNoNumber
.2cde	a2 f1		ldx #$f1			ldx 	#_EHAtMsg & $FF
.2ce0	a0 2c		ldy #$2c			ldy 	#_EHAtMsg >> 8
.2ce2	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2ce5	ad 2e 06	lda $062e			lda 	ERRLine 					; line number -> XA
.2ce8	ae 2f 06	ldx $062f			ldx 	ERRLine+1
.2ceb	20 f6 2c	jsr $2cf6			jsr 	WriteIntXA
.2cee					_EHNoNumber:
.2cee	4c 1f 2d	jmp $2d1f			jmp 	WarmStartNewLine
.2cf1					_EHAtMsg:
>2cf1	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2cf6					_EHAtMsg1:
.2cf6					WriteIntXA:
.2cf6	da		phx				phx
.2cf7	48		pha				pha
.2cf8	a2 08		ldx #$08			ldx 	#IFR0
.2cfa	20 8b 34	jsr $348b			jsr 	IFloatPushRx
.2cfd	68		pla				pla
.2cfe	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.2d01	68		pla				pla
.2d02	85 09		sta $09				sta 	IFR0+IM1
.2d04	a9 0a		lda #$0a			lda 	#10 						; decimal
.2d06	20 de 32	jsr $32de			jsr 	IFloatIntegerToStringR0	 	; convert
.2d09	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2d0c	a2 08		ldx #$08			ldx 	#IFR0
.2d0e	20 ac 34	jsr $34ac			jsr 	IFloatPullRx
.2d11	60		rts				rts
.2d12					NotImplemented:
.2d12	4c 08 29	jmp $2908		jmp	ErrorV_unimplemented
.062e					ERRLine:
>062e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2d15					WarmStart:
.2d15	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2d17	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2d1a	a9 6b		lda #$6b			lda 	#"k"
.2d1c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2d1f					WarmStartNewLine:
.2d1f	a9 0d		lda #$0d			lda 	#13
.2d21	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2d24					WarmStartNoPrompt:
.2d24	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2d26	9a		txs				txs
.2d27	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2d2a	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2d2b	d0 01		bne $2d2e			bne 	_WSSkip
.2d2d	c8		iny				iny
.2d2e					_WSSkip:
.2d2e	86 28		stx $28				stx 	zTemp2 						; save address
.2d30	84 29		sty $29				sty 	zTemp2+1
.2d32	b2 28		lda ($28)			lda 	(zTemp2)
.2d34	f0 ee		beq $2d24			beq 	WarmStartNoPrompt 			; ignore empty line.
.2d36	a2 68		ldx #$68			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2d38	a0 2d		ldy #$2d			ldy 	#TOKGetCharacter >> 8
.2d3a	38		sec				sec
.2d3b	20 07 23	jsr $2307			jsr 	TOKTokenise
.2d3e	b0 25		bcs $2d65			bcs 	_WSSyntax
.2d40	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2d43	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2d46	d0 0b		bne $2d53			bne 	_WSLineEdit
.2d48	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2d4a	85 18		sta $18				sta 	codePtr
.2d4c	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2d4e	85 19		sta $19				sta 	codePtr+1
.2d50	4c a3 16	jmp $16a3			jmp 	RUNNewLine
.2d53					_WSLineEdit:
.2d53	20 e2 21	jsr $21e2			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2d56	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2d59	c9 04		cmp #$04			cmp 	#4
.2d5b	f0 03		beq $2d60			beq 	_WSNoInsert
.2d5d	20 2c 22	jsr $222c			jsr 	PGMInsertLine				; if not, maybe insert
.2d60					_WSNoInsert:
.2d60	20 c4 11	jsr $11c4			jsr 	ClearCode 					; clear variables etc.
.2d63	80 bf		bra $2d24			bra 	WarmStartNoPrompt
.2d65					_WSSyntax:
.2d65	4c c6 28	jmp $28c6		jmp	ErrorV_syntax
.2d68					TOKGetCharacter:
.2d68	b2 28		lda ($28)			lda 	(zTemp2)
.2d6a	90 06		bcc $2d72			bcc 	_GSNoIncrement
.2d6c	e6 28		inc $28				inc 	zTemp2
.2d6e	d0 02		bne $2d72			bne 	_GSNoIncrement
.2d70	e6 29		inc $29				inc 	zTemp2+1
.2d72					_GSNoIncrement:
.2d72	c9 00		cmp #$00			cmp 	#0
.2d74	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2d75					VARArrayLookup:
.2d75	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2d77	86 25		stx $25				stx 	zTemp0+1
.2d79	b2 24		lda ($24)			lda 	(zTemp0)
.2d7b	48		pha				pha
.2d7c	5a		phy				phy
.2d7d	a0 01		ldy #$01			ldy 	#1
.2d7f	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d81	7a		ply				ply
.2d82	48		pha				pha
.2d83	20 e9 18	jsr $18e9			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2d86	68		pla				pla 								; array address to zTemp0
.2d87	85 25		sta $25				sta 	zTemp0+1
.2d89	68		pla				pla
.2d8a	85 24		sta $24				sta 	zTemp0
.2d8c	5a		phy				phy 								; save codePtr position.
.2d8d	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2d8f	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d91	48		pha				pha 								; save bit 15 on stack.
.2d92	29 7f		and #$7f			and 	#$7F
.2d94	85 26		sta $26				sta 	zTemp1
.2d96	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2d98	d2 24		cmp ($24)			cmp 	(zTemp0)
.2d9a	a5 09		lda $09				lda 	IFR0+IM1
.2d9c	e5 26		sbc $26				sbc 	zTemp1
.2d9e	b0 3a		bcs $2dda			bcs 	_VALIndex
.2da0	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2da2	c9 40		cmp #$40			cmp 	#$40
.2da4	b0 34		bcs $2dda			bcs 	_VALIndex
.2da6	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2da8	26 09		rol $09				rol 	IFR0+IM1
.2daa	fa		plx				plx 								; get msb of size -> X
.2dab	30 04		bmi $2db1			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2dad	06 08		asl $08				asl 	IFR0+IM0
.2daf	26 09		rol $09				rol 	IFR0+IM1
.2db1					_VARNotX4:
.2db1	18		clc				clc 								; add the two for the size bytes
.2db2	a5 08		lda $08				lda 	IFR0+IM0
.2db4	69 02		adc #$02			adc 	#2
.2db6	85 08		sta $08				sta 	IFR0+IM0
.2db8	90 02		bcc $2dbc			bcc 	_VARNoCarry1
.2dba	e6 09		inc $09				inc 	IFR0+IM1
.2dbc					_VARNoCarry1:
.2dbc	18		clc				clc 								; calculate the element address and push to stack.
.2dbd	a5 08		lda $08				lda 	IFR0+IM0
.2dbf	65 24		adc $24				adc 	zTemp0
.2dc1	48		pha				pha
.2dc2	a5 09		lda $09				lda 	IFR0+IM1
.2dc4	65 25		adc $25				adc 	zTemp0+1
.2dc6	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2dc8	30 04		bmi $2dce			bmi 	_VARHasSubLevel
.2dca	aa		tax				tax 								; address in XA
.2dcb	68		pla				pla
.2dcc	7a		ply				ply 								; restore Y and exit
.2dcd	60		rts				rts
.2dce					_VARHasSubLevel:
.2dce	aa		tax				tax 								; get link address in XA
.2dcf	68		pla				pla
.2dd0	7a		ply				ply 								; restore code position.
.2dd1	48		pha				pha
.2dd2	20 a7 2a	jsr $2aa7			jsr 	ERRCheckComma 				; comma required.
.2dd5	68		pla				pla
.2dd6	20 75 2d	jsr $2d75			jsr 	VARArrayLookup 				; call it recursively
.2dd9	60		rts				rts
.2dda					_VALIndex:
.2dda	4c a2 29	jmp $29a2		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2ddd					VARCreate:
.2ddd	5a		phy				phy
.2dde	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2de0	a2 00		ldx #$00			ldx 	#0
.2de2	20 e1 11	jsr $11e1			jsr 	AllocateMemory
.2de5	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2de7	86 27		stx $27				stx 	zTemp1+1
.2de9	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2deb	ad 32 06	lda $0632			lda 	VARHash
.2dee	91 26		sta ($26),y			sta 	(zTemp1),y
.2df0	c8		iny				iny 								; put address of name into +3,+4
.2df1	ad 30 06	lda $0630			lda 	VARNameAddress
.2df4	91 26		sta ($26),y			sta 	(zTemp1),y
.2df6	c8		iny				iny
.2df7	ad 31 06	lda $0631			lda 	VARNameAddress+1
.2dfa	91 26		sta ($26),y			sta 	(zTemp1),y
.2dfc	ad 33 06	lda $0633			lda 	VARType
.2dff	29 01		and #$01			and 	#1
.2e01	f0 06		beq $2e09			beq 	_CVNotString
.2e03	a0 08		ldy #$08			ldy 	#5+3
.2e05	a9 80		lda #$80			lda 	#$80
.2e07	91 26		sta ($26),y			sta 	(zTemp1),y
.2e09					_CVNotString:
.2e09	ad 54 06	lda $0654			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2e0c	85 24		sta $24				sta 	zTemp0
.2e0e	ad 55 06	lda $0655			lda 	VARHashEntry+1
.2e11	85 25		sta $25				sta 	zTemp0+1
.2e13	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2e15	b2 24		lda ($24)			lda 	(zTemp0)
.2e17	92 26		sta ($26)			sta 	(zTemp1)
.2e19	b1 24		lda ($24),y			lda 	(zTemp0),y
.2e1b	91 26		sta ($26),y			sta 	(zTemp1),y
.2e1d	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2e1f	92 24		sta ($24)			sta 	(zTemp0)
.2e21	a5 27		lda $27				lda 	zTemp1+1
.2e23	91 24		sta ($24),y			sta 	(zTemp0),y
.2e25	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2e27	a6 27		ldx $27				ldx 	zTemp1+1
.2e29	18		clc				clc 								; add 5 to point to the data.
.2e2a	69 05		adc #$05			adc 	#5
.2e2c	90 01		bcc $2e2f			bcc 	_VCNoCarry
.2e2e	e8		inx				inx
.2e2f					_VCNoCarry:
.2e2f	7a		ply				ply
.2e30	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2e31					VARFind:
.2e31	5a		phy				phy
.2e32	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2e34	b1 24		lda ($24),y			lda 	(zTemp0),y
.2e36	85 27		sta $27				sta 	zTemp1+1
.2e38	f0 1c		beq $2e56			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2e3a	b2 24		lda ($24)			lda 	(zTemp0)
.2e3c	85 26		sta $26				sta 	zTemp1
.2e3e					_VFLoop:
.2e3e	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2e40	b1 26		lda ($26),y			lda 	(zTemp1),y
.2e42	cd 32 06	cmp $0632			cmp 	VARHash
.2e45	f0 12		beq $2e59			beq 	_VFHashesMatch 				; if so, check the name.
.2e47					_VFNext:
.2e47	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2e49	aa		tax				tax
.2e4a	a0 01		ldy #$01			ldy 	#1
.2e4c	b1 26		lda ($26),y			lda 	(zTemp1),y
.2e4e	85 27		sta $27				sta 	zTemp1+1
.2e50	86 26		stx $26				stx 	zTemp1
.2e52	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2e54	d0 e8		bne $2e3e			bne 	_VFLoop
.2e56					_VFExitFail:
.2e56	7a		ply				ply
.2e57	18		clc				clc
.2e58	60		rts				rts
.2e59					_VFHashesMatch:
.2e59	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2e5b	b1 26		lda ($26),y			lda 	(zTemp1),y
.2e5d	85 28		sta $28				sta 	zTemp2
.2e5f	c8		iny				iny
.2e60	b1 26		lda ($26),y			lda 	(zTemp1),y
.2e62	85 29		sta $29				sta 	zTemp2+1
.2e64	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2e66					_VFNameCompLoop:
.2e66	c8		iny				iny 								; char at a time
.2e67	b9 34 06	lda $0634,y			lda 	VARBuffer,y
.2e6a	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2e6c	d0 d9		bne $2e47			bne 	_VFNext						; next entry if different.
.2e6e	c9 7c		cmp #$7c			cmp 	#$7C
.2e70	90 f4		bcc $2e66			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2e72	18		clc				clc
.2e73	a5 26		lda $26				lda 	zTemp1
.2e75	a6 27		ldx $27				ldx 	zTemp1+1
.2e77	69 05		adc #$05			adc 	#5
.2e79	90 01		bcc $2e7c			bcc 	_VFNNoCarry
.2e7b	e8		inx				inx
.2e7c					_VFNNoCarry:
.2e7c	7a		ply				ply
.2e7d	38		sec				sec
.2e7e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2e7f					VARGetInfo:
.2e7f	98		tya				tya 								; calculate the address of the identifier start.
.2e80	18		clc				clc
.2e81	65 18		adc $18				adc 	codePtr
.2e83	8d 30 06	sta $0630			sta 	VARNameAddress
.2e86	a5 19		lda $19				lda 	codePtr+1
.2e88	69 00		adc #$00			adc 	#0
.2e8a	8d 31 06	sta $0631			sta 	VARNameAddress+1
.2e8d	9c 32 06	stz $0632			stz 	VARHash
.2e90	a2 00		ldx #$00			ldx 	#0
.2e92					_VARCopyName:
.2e92	18		clc				clc 								; update the sum hash.
.2e93	ad 32 06	lda $0632			lda 	VARHash
.2e96	71 18		adc ($18),y			adc 	(codePtr),y
.2e98	8d 32 06	sta $0632			sta 	VARHash
.2e9b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2e9d	c8		iny				iny
.2e9e	9d 34 06	sta $0634,x			sta 	VARBuffer,x
.2ea1	e8		inx				inx
.2ea2	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2ea4	90 ec		bcc $2e92			bcc 	_VARCopyName
.2ea6	8d 33 06	sta $0633			sta 	VARType 					; save type byte
.2ea9	29 03		and #$03			and 	#3 							; type is 0-3
.2eab	0a		asl a				asl 	a
.2eac	0a		asl a				asl 	a
.2ead	85 24		sta $24				sta 	zTemp0
.2eaf	ad 32 06	lda $0632			lda 	VARHash 					; force into range of hash entries per type.
.2eb2	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2eb4	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2eb6	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2eb7	69 56		adc #$56			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2eb9	85 24		sta $24				sta 	zTemp0
.2ebb	8d 54 06	sta $0654			sta 	VARHashEntry
.2ebe	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2ec0	69 00		adc #$00			adc 	#0
.2ec2	85 25		sta $25				sta 	zTemp0+1
.2ec4	8d 55 06	sta $0655			sta 	VARHashEntry+1
.2ec7	60		rts				rts
.2ec8					VARClearHashTables:
.2ec8	a2 00		ldx #$00			ldx 	#0
.2eca					_VCHRLoop:
.2eca	a9 00		lda #$00			lda 	#0
.2ecc	9d 56 06	sta $0656,x			sta 	VARHashTables,x
.2ecf	e8		inx				inx
.2ed0	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2ed2	d0 f6		bne $2eca			bne 	_VCHRLoop
.2ed4	60		rts				rts
.0630					VARNameAddress:
>0630							.fill 	2
.0632					VARHash:
>0632							.fill 	1
.0633					VARType:
>0633							.fill 	1
.0634					VARBuffer:
>0634							.fill 	32
.0654					VARHashEntry:
>0654							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0656					VARHashTables:
>0656							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2ed5					VARCheckSimple:
.2ed5	aa		tax				tax 								; save in X
.2ed6	b1 18		lda ($18),y			lda 	(codePtr),y
.2ed8	c9 7c		cmp #$7c			cmp 	#$7C
.2eda	d0 15		bne $2ef1			bne 	_VCSComplex
.2edc	c8		iny				iny 								; consume the second byte, the type.
.2edd	8a		txa				txa  								; character (40-7F) x 4
.2ede	0a		asl a				asl 	a
.2edf	0a		asl a				asl  	a
.2ee0	18		clc				clc
.2ee1	69 76		adc #$76			adc 	#FastVariables & $FF
.2ee3	85 08		sta $08				sta 	IFR0+IM0
.2ee5	a9 06		lda #$06			lda 	#FastVariables >> 8
.2ee7	69 00		adc #$00			adc 	#0
.2ee9	85 09		sta $09				sta 	IFR0+IM1
.2eeb	64 0a		stz $0a				stz 	IFR0+IM2
.2eed	64 0b		stz $0b				stz 	IFR0+IExp
.2eef	38		sec				sec 								; it's a reference
.2ef0	60		rts				rts
.2ef1					_VCSComplex:
.2ef1	88		dey				dey	 								; extract information.
.2ef2	20 7f 2e	jsr $2e7f			jsr 	VARGetInfo
.2ef5	20 31 2e	jsr $2e31			jsr 	VARFind 					; search for variable
.2ef8	b0 0a		bcs $2f04			bcs 	_VCSHaveVariable
.2efa	ad 33 06	lda $0633			lda 	VARType 					; error if arrays, cannot autocreate
.2efd	29 02		and #$02			and 	#2
.2eff	d0 25		bne $2f26			bne 	_VCNoCreate
.2f01	20 dd 2d	jsr $2ddd			jsr 	VARCreate 					; create variable
.2f04					_VCSHaveVariable:
.2f04	48		pha				pha 								; save LSB on the stack
.2f05	ad 33 06	lda $0633			lda 	VARType 					; get var type, and shift bit 1 into carry
.2f08	6a		ror a				ror 	a
.2f09	6a		ror a				ror 	a
.2f0a	68		pla				pla 								; restore LSB
.2f0b	90 08		bcc $2f15			bcc 	_VCSNotArray 				; skip if not an array
.2f0d	20 75 2d	jsr $2d75			jsr 	VARArrayLookup 				; look for subscripts.
.2f10	48		pha				pha 								; check )
.2f11	20 9f 2a	jsr $2a9f			jsr 	ERRCheckRParen
.2f14	68		pla				pla
.2f15					_VCSNotArray:
.2f15	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2f17	85 08		sta $08				sta 	IFR0+IM0
.2f19	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2f1b	ad 33 06	lda $0633			lda 	VARType 					; number/string bit into carry
.2f1e	6a		ror a				ror 	a
.2f1f	a9 00		lda #$00			lda 	#0
.2f21	6a		ror a				ror 	a 							; now $00 or $80
.2f22	85 0b		sta $0b				sta 	IFR0+IExp
.2f24	38		sec				sec 								; it's a reference
.2f25	60		rts				rts
.2f26					_VCNoCreate:
.2f26	4c c8 29	jmp $29c8		jmp	ErrorV_uninitialised
.0676					FastVariables:
>0676							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2f29					IFInitialise:
.2f29	9c e6 06	stz $06e6			stz 	IFStackIndex 				; reset the internal stack.
.2f2c	60		rts				rts
.2f2d					IFloatSubtract:
.2f2d	da		phx				phx
.2f2e	a2 08		ldx #$08			ldx 	#IFR0
.2f30	20 47 35	jsr $3547			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2f33	fa		plx				plx
.2f34					IFloatAdd:
.2f34	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2f36	05 0b		ora $0b				ora 	IFR0+IExp
.2f38	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2f3a	d0 4e		bne $2f8a			bne 	_IFloatAddDecimals 			; floating point version.
.2f3c					_IFAddSubMantissa:
.2f3c	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2f3e	45 0b		eor $0b				eor 	IFR0+IExp
.2f40	29 40		and #$40			and 	#IFSign
.2f42	d0 21		bne $2f65			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2f44	18		clc				clc 								; do the actual addition
.2f45	a5 08		lda $08				lda 	IFR0+IM0
.2f47	75 00		adc $00,x			adc 		IM0,x
.2f49	85 08		sta $08				sta 	IFR0+IM0
.2f4b	a5 09		lda $09				lda 	IFR0+IM1
.2f4d	75 01		adc $01,x			adc 		IM1,x
.2f4f	85 09		sta $09				sta 	IFR0+IM1
.2f51	a5 0a		lda $0a				lda 	IFR0+IM2
.2f53	75 02		adc $02,x			adc 		IM2,x
.2f55	85 0a		sta $0a				sta 	IFR0+IM2
.2f57	10 29		bpl $2f82			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2f59	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2f5b	20 6b 35	jsr $356b			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2f5e	20 95 35	jsr $3595			jsr 	IFloatIncExponent
.2f61	d0 1f		bne $2f82			bne 	_IFloatAddExit
.2f63	38		sec				sec 								; overflowed numerically.
.2f64	60		rts				rts
.2f65					_IFloatSubMantissa:
.2f65	38		sec				sec 								; do the subtraction R0-Rx
.2f66	a5 08		lda $08				lda 	IFR0+IM0
.2f68	f5 00		sbc $00,x			sbc 		IM0,x
.2f6a	85 08		sta $08				sta 	IFR0+IM0
.2f6c	a5 09		lda $09				lda 	IFR0+IM1
.2f6e	f5 01		sbc $01,x			sbc 		IM1,x
.2f70	85 09		sta $09				sta 	IFR0+IM1
.2f72	a5 0a		lda $0a				lda 	IFR0+IM2
.2f74	f5 02		sbc $02,x			sbc 		IM2,x
.2f76	85 0a		sta $0a				sta 	IFR0+IM2
.2f78	b0 08		bcs $2f82			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2f7a	a2 08		ldx #$08			ldx 	#IFR0
.2f7c	20 4f 35	jsr $354f			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2f7f	20 47 35	jsr $3547			jsr 	IFloatNegate 				; negate the result using sign bit.
.2f82					_IFloatAddExit:
.2f82	18		clc				clc
.2f83	60		rts				rts
.2f84					_IFloatZeroAdd:
.2f84	fa		plx				plx 								; return this value in R0
.2f85	20 cd 34	jsr $34cd			jsr 	IFloatCopyFromRegister
.2f88	18		clc				clc
.2f89	60		rts				rts
.2f8a					_IFloatAddDecimals:
.2f8a	20 35 35	jsr $3535			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2f8d	f0 f3		beq $2f82			beq 	_IFloatAddExit
.2f8f	20 73 35	jsr $3573			jsr 	IFloatNormalise 			; normalise RX
.2f92	da		phx				phx 								; normalise R0
.2f93	a2 08		ldx #$08			ldx 	#IFR0
.2f95	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.2f98	f0 ea		beq $2f84			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2f9a	20 73 35	jsr $3573			jsr 	IFloatNormalise
.2f9d	fa		plx				plx
.2f9e	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2fa0	29 3f		and #$3f			and 	#IFXMask
.2fa2	38		sec				sec
.2fa3	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2fa5	85 20		sta $20				sta 	iTemp0
.2fa7	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2fa9	29 3f		and #$3f			and 	#IFXMask
.2fab	38		sec				sec
.2fac	e9 20		sbc #$20			sbc 	#$20
.2fae	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2fb0	b0 02		bcs $2fb4			bcs 	_IFloatHaveLarger
.2fb2	a5 20		lda $20				lda 	iTemp0
.2fb4					_IFloatHaveLarger:
.2fb4	18		clc				clc 								; get the actual one back.
.2fb5	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2fb7	20 c4 2f	jsr $2fc4			jsr 	_IFShiftXToA
.2fba	da		phx				phx
.2fbb	a2 08		ldx #$08			ldx 	#IFR0
.2fbd	20 c4 2f	jsr $2fc4			jsr 	_IFShiftXToA
.2fc0	fa		plx				plx
.2fc1	4c 3c 2f	jmp $2f3c			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2fc4					_IFShiftXToA:
.2fc4	8d de 06	sta $06de			sta 	IFTarget
.2fc7	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; check adding zero ?
.2fca	f0 11		beq $2fdd			beq 	_IFSXExit
.2fcc					_IFSXLoop:
.2fcc	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2fce	29 3f		and #$3f			and 	#IFXMask
.2fd0	cd de 06	cmp $06de			cmp 	IFTarget
.2fd3	f0 08		beq $2fdd			beq 	_IFSXExit
.2fd5	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.2fd8	20 95 35	jsr $3595			jsr 	IFloatIncExponent
.2fdb	80 ef		bra $2fcc			bra 	_IFSXLoop
.2fdd					_IFSXExit:
.2fdd	60		rts				rts
.06de					IFTarget:
>06de							.fill 	1
.2fde					IFloatMultiply:
.2fde	8e de 06	stx $06de			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2fe1	20 96 30	jsr $3096			jsr 	IFCalculateNewSign
.2fe4	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2fe6	05 0b		ora $0b				ora 	IFR0+IExp
.2fe8	29 3f		and #$3f			and 	#IFXMask
.2fea	15 01		ora $01,x			ora 	IM1,x
.2fec	05 09		ora $09				ora 	IFR0+IM1
.2fee	15 02		ora $02,x			ora 	IM2,x
.2ff0	05 0a		ora $0a				ora 	IFR0+IM2
.2ff2	d0 0a		bne $2ffe			bne 	_IFMStandard
.2ff4	20 18 35	jsr $3518			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2ff7	ad e0 06	lda $06e0			lda 	IFNewSign
.2ffa	85 0b		sta $0b				sta 	IFR0+IExp
.2ffc	18		clc				clc
.2ffd	60		rts				rts
.2ffe					_IFMStandard:
.2ffe	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.3000	20 8d 30	jsr $308d			jsr 	IFMSignExtend
.3003	8d df 06	sta $06df			sta 	IFNewExponent
.3006	a5 0b		lda $0b				lda 	IFR0+IExp
.3008	20 8d 30	jsr $308d			jsr 	IFMSignExtend
.300b	18		clc				clc
.300c	6d df 06	adc $06df			adc 	IFNewExponent
.300f	8d df 06	sta $06df			sta 	IFNewExponent
.3012	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.3014	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister
.3017	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.3019	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.301c					_IFMLoop:
.301c	a2 14		ldx #$14			ldx 	#IFRTemp
.301e	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.3021	f0 3a		beq $305d			beq 	_IFMExit
.3023	ae de 06	ldx $06de			ldx 	IFTarget 					; look at adder MSB
.3026	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.3028	10 03		bpl $302d			bpl	 	_IFMTargetOkay
.302a	20 7e 30	jsr $307e			jsr 	_IFMShiftAll
.302d					_IFMTargetOkay:
.302d	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.302f	29 01		and #$01			and 	#1
.3031	f0 16		beq $3049			beq 	_IFMNoAdd
.3033	ae de 06	ldx $06de			ldx 	IFTarget 					; add adder
.3036	18		clc				clc
.3037	a5 08		lda $08				lda 	IFR0+IM0
.3039	75 00		adc $00,x			adc 		IM0,x
.303b	85 08		sta $08				sta 	IFR0+IM0
.303d	a5 09		lda $09				lda 	IFR0+IM1
.303f	75 01		adc $01,x			adc 		IM1,x
.3041	85 09		sta $09				sta 	IFR0+IM1
.3043	a5 0a		lda $0a				lda 	IFR0+IM2
.3045	75 02		adc $02,x			adc 		IM2,x
.3047	85 0a		sta $0a				sta 	IFR0+IM2
.3049					_IFMNoAdd:
.3049	a5 0a		lda $0a				lda 	IFR0+IM2
.304b	10 03		bpl $3050			bpl 	_IFMResultOkay
.304d	20 7e 30	jsr $307e			jsr 	_IFMShiftAll
.3050					_IFMResultOkay:
.3050	a2 14		ldx #$14			ldx 	#IFRTemp
.3052	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.3055	ae de 06	ldx $06de			ldx 	IFTarget
.3058	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.305b	80 bf		bra $301c			bra 	_IFMLoop
.305d					_IFMExit:
.305d	ad df 06	lda $06df			lda 	IFNewExponent 				; validate new exponent.
.3060	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.3062	90 0f		bcc $3073			bcc 	_IFMOkay
.3064	c9 e0		cmp #$e0			cmp 	#$E0
.3066	b0 0b		bcs $3073			bcs 	_IFMOkay
.3068	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.306a	f0 10		beq $307c			beq 	_IFMError
.306c	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.306e	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.3071	18		clc				clc
.3072	60		rts				rts
.3073					_IFMOkay:
.3073	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.3075	0d e0 06	ora $06e0			ora 	IFNewSign
.3078	85 0b		sta $0b				sta 	IFR0+IExp
.307a	18		clc				clc
.307b	60		rts				rts
.307c					_IFMError:
.307c	38		sec				sec
.307d	60		rts				rts
.307e					_IFMShiftAll:
.307e	a2 08		ldx #$08			ldx 	#IFR0
.3080	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.3083	ae de 06	ldx $06de			ldx 	IFTarget
.3086	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.3089	ee df 06	inc $06df			inc 	IFNewExponent
.308c	60		rts				rts
.308d					IFMSignExtend:
.308d	29 3f		and #$3f			and 	#IFXMask
.308f	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.3091	90 02		bcc $3095			bcc 	_IFMNoSXX
.3093	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.3095					_IFMNoSXX:
.3095	60		rts				rts
.3096					IFCalculateNewSign:
.3096	b5 03		lda $03,x			lda 	IExp,x
.3098	45 0b		eor $0b				eor 	IFR0+IExp
.309a	29 40		and #$40			and 	#IFSign
.309c	8d e0 06	sta $06e0			sta 	IFNewSign
.309f	60		rts				rts
.06df					IFNewExponent:
>06df							.fill 	1
.06e0					IFNewSign:
>06e0							.fill 	1
.30a0					IFloatDivideInteger:
.30a0	20 b9 30	jsr $30b9			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.30a3	b0 06		bcs $30ab			bcs 	_IFDIExit
.30a5	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.30a7	20 cd 34	jsr $34cd			jsr 	IFloatCopyFromRegister
.30aa	18		clc				clc
.30ab					_IFDIExit:
.30ab	60		rts				rts
.30ac					IFloatModulusInteger:
.30ac	20 b9 30	jsr $30b9			jsr 	IFloatDivideIntegerCommon
.30af	b0 07		bcs $30b8			bcs 	_IFMIExit
.30b1	ae de 06	ldx $06de			ldx 	IFTarget
.30b4	20 cd 34	jsr $34cd			jsr 	IFloatCopyFromRegister
.30b7	18		clc				clc
.30b8					_IFMIExit:
.30b8	60		rts				rts
.30b9					IFloatDivideIntegerCommon:
.30b9	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.30bc	20 96 30	jsr $3096			jsr 	IFCalculateNewSign 			; calculate sign of result
.30bf	20 e7 30	jsr $30e7			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.30c2	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.30c4	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.30c7	f0 1c		beq $30e5			beq 	_IFDIDivZero
.30c9	ae de 06	ldx $06de			ldx 	IFTarget 					; zero Rx (S1)
.30cc	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.30cf	5a		phy				phy
.30d0	a0 18		ldy #$18			ldy 	#24
.30d2					_IFDILoop:
.30d2	20 f8 30	jsr $30f8			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.30d5	20 04 31	jsr $3104			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.30d8	88		dey				dey
.30d9	d0 f7		bne $30d2			bne 	_IFDILoop 					; do it 24 times
.30db	7a		ply				ply
.30dc	ad e0 06	lda $06e0			lda 	IFNewSign 					; set sign of result.
.30df	29 40		and #$40			and 	#IFSign
.30e1	85 17		sta $17				sta 	IFRTemp+IExp
.30e3	18		clc				clc 								; is okay.
.30e4	60		rts				rts
.30e5					_IFDIDivZero:
.30e5	38		sec				sec
.30e6	60		rts				rts
.30e7					IFDCopyRXToRTemp:
.30e7	b5 00		lda $00,x			lda 	IM0,x
.30e9	85 14		sta $14				sta 	IFRTemp+IM0
.30eb	b5 01		lda $01,x			lda 	IM1,x
.30ed	85 15		sta $15				sta 	IFRTemp+IM1
.30ef	b5 02		lda $02,x			lda 	IM2,x
.30f1	85 16		sta $16				sta 	IFRTemp+IM2
.30f3	b5 03		lda $03,x			lda 	IExp,x
.30f5	85 17		sta $17				sta 	IFRTemp+IExp
.30f7	60		rts				rts
.30f8					IFDShiftSTempS1Left:
.30f8	a2 14		ldx #$14			ldx 	#IFRTemp
.30fa	20 63 35	jsr $3563			jsr 	IFloatShiftLeft
.30fd	ae de 06	ldx $06de			ldx 	IFTarget
.3100	20 64 35	jsr $3564			jsr 	IFloatRotateLeft
.3103	60		rts				rts
.3104					IFDTrySubtract:
.3104	ae de 06	ldx $06de			ldx 	IFTarget 					; s1 = Rx
.3107	38		sec				sec 								; subtract, saving the results on the stack.
.3108	b5 00		lda $00,x			lda 	IM0,x
.310a	e5 08		sbc $08				sbc 	IFR0+IM0
.310c	48		pha				pha
.310d	b5 01		lda $01,x			lda 	IM1,x
.310f	e5 09		sbc $09				sbc 	IFR0+IM1
.3111	48		pha				pha
.3112	b5 02		lda $02,x			lda 	IM2,x
.3114	e5 0a		sbc $0a				sbc 	IFR0+IM2
.3116	b0 03		bcs $311b			bcs 	_IFDCanSubtract
.3118	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.3119	68		pla				pla
.311a	60		rts				rts
.311b					_IFDCanSubtract:
.311b	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.311d	68		pla				pla
.311e	95 01		sta $01,x			sta 	IM1,x
.3120	68		pla				pla
.3121	95 00		sta $00,x			sta 	IM0,x
.3123	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.3125	d0 06		bne $312d			bne 	_IFDCSExit
.3127	e6 15		inc $15				inc 	IFRTemp+IM1
.3129	d0 02		bne $312d			bne 	_IFDCSExit
.312b	e6 16		inc $16				inc 	IFRTemp+IM2
.312d					_IFDCSExit:
.312d	60		rts				rts
.312e					IFloatBitwiseAnd:
.312e	5a		phy				phy
.312f	20 73 31	jsr $3173			jsr 	IFPreProcessBitwise 		; set up everything.
.3132	d0 0f		bne $3143			bne 	_IFBAExit
.3134					_IFBALoop:
.3134	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3137	35 00		and $00,x			and 	IM0,x
.3139	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.313c	e8		inx				inx
.313d	c8		iny				iny
.313e	c0 03		cpy #$03			cpy 	#3
.3140	d0 f2		bne $3134			bne 	_IFBALoop
.3142	18		clc				clc
.3143					_IFBAExit:
.3143	7a		ply				ply
.3144	60		rts				rts
.3145					IFloatBitwiseOr:
.3145	5a		phy				phy
.3146	20 73 31	jsr $3173			jsr 	IFPreProcessBitwise 		; set up everything.
.3149	d0 0f		bne $315a			bne 	_IFBAExit
.314b					_IFBALoop:
.314b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.314e	15 00		ora $00,x			ora 	IM0,x
.3150	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3153	e8		inx				inx
.3154	c8		iny				iny
.3155	c0 03		cpy #$03			cpy 	#3
.3157	d0 f2		bne $314b			bne 	_IFBALoop
.3159	18		clc				clc
.315a					_IFBAExit:
.315a	7a		ply				ply
.315b	60		rts				rts
.315c					IFloatBitwiseXor:
.315c	5a		phy				phy
.315d	20 73 31	jsr $3173			jsr 	IFPreProcessBitwise 		; set up everything.
.3160	d0 0f		bne $3171			bne 	_IFBAExit
.3162					_IFBALoop:
.3162	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3165	55 00		eor $00,x			eor 	IM0,x
.3167	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.316a	e8		inx				inx
.316b	c8		iny				iny
.316c	c0 03		cpy #$03			cpy 	#3
.316e	d0 f2		bne $3162			bne 	_IFBALoop
.3170	18		clc				clc
.3171					_IFBAExit:
.3171	7a		ply				ply
.3172	60		rts				rts
.3173					IFPreProcessBitwise:
.3173	a0 00		ldy #$00			ldy 	#0 							; set index.
.3175	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.3177	15 03		ora $03,x			ora 	IExp,x
.3179	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.317b	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.317d	38		sec				sec 								; carry set just in cases.
.317e	60		rts				rts
.317f					IFloatAbsoluteR0:
.317f	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3181	29 bf		and #$bf			and 	#IFSign ^ 255
.3183	85 0b		sta $0b				sta 	IFR0+IExp
.3185	18		clc				clc
.3186	60		rts				rts
.3187					IFloatSquareRootR0:
.3187	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.3189	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.318c	f0 2e		beq $31bc			beq 	_IFSRZero
.318e	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.3190	29 40		and #$40			and 	#IFSign
.3192	d0 2f		bne $31c3			bne 	_IFSRFail
.3194	20 73 35	jsr $3573			jsr 	IFloatNormalise 			; it will work better !
.3197	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.3199	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister
.319c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.319e	20 8d 30	jsr $308d			jsr 	IFMSignExtend 				; sign extended version of the exponent
.31a1	18		clc				clc
.31a2	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.31a4	85 0b		sta $0b				sta 	IFR0+IExp
.31a6	4a		lsr a				lsr 	a 							; which we can halve.
.31a7	38		sec				sec 								; convert back
.31a8	e9 17		sbc #$17			sbc 	#23
.31aa	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.31ac	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.31ae	20 c5 31	jsr $31c5			jsr 	_IFSRNewton
.31b1	20 c5 31	jsr $31c5			jsr 	_IFSRNewton
.31b4	20 c5 31	jsr $31c5			jsr 	_IFSRNewton
.31b7	20 c5 31	jsr $31c5			jsr 	_IFSRNewton
.31ba	18		clc				clc
.31bb	60		rts				rts
.31bc					_IFSRZero:
.31bc	a2 08		ldx #$08			ldx 	#IFR0
.31be	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.31c1	18		clc				clc
.31c2	60		rts				rts
.31c3					_IFSRFail:
.31c3	38		sec				sec
.31c4	60		rts				rts
.31c5					_IFSRNewton:
.31c5	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.31c7	20 8b 34	jsr $348b			jsr 	IFloatPushRx
.31ca	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.31cc	20 8b 34	jsr $348b			jsr 	IFloatPushRx
.31cf	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.31d1	20 60 32	jsr $3260			jsr 	IFloatDivideFloat
.31d4	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.31d6	20 ac 34	jsr $34ac			jsr 	IFloatPullRx
.31d9	20 34 2f	jsr $2f34			jsr 	IFloatAdd 					; now guess + original/guess
.31dc	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.31de	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.31e1	a2 0c		ldx #$0c			ldx 	#IFR1
.31e3	20 ac 34	jsr $34ac			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.31e6	60		rts				rts
.31e7					IFloatFractionalR0:
.31e7	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.31e9	29 3f		and #$3f			and 	#IFXMask
.31eb	f0 17		beq $3204			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.31ed	20 7f 31	jsr $317f			jsr 	IFloatAbsoluteR0 			; absolute value R0
.31f0	a2 08		ldx #$08			ldx 	#IFR0
.31f2	20 73 35	jsr $3573			jsr 	IFloatNormalise 			; normalise R0
.31f5	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.31f7	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister
.31fa	20 3d 32	jsr $323d			jsr 	IFloatIntegerR0 			; take integer part of R0
.31fd	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.31ff	20 2d 2f	jsr $2f2d			jsr 	IFloatSubtract
.3202	80 05		bra $3209			bra 	_FIPExit
.3204					_FIPZero:
.3204	a2 08		ldx #$08			ldx 	#IFR0
.3206	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.3209					_FIPExit:
.3209	18		clc				clc
.320a	60		rts				rts
.320b					IFloatCompare:
.320b	20 2d 2f	jsr $2f2d			jsr 	IFloatSubtract 				; subtract R0 from RX.
.320e	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.3210	05 0b		ora $0b				ora 	IFR0+IExp
.3212	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.3214	29 3f		and #$3f			and 	#IFXMask
.3216	d0 19		bne $3231			bne 	_IFCNonInteger
.3218	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; check if zero
.321b	f0 0f		beq $322c			beq 	_IFCZero
.321d					_IFCReturnSign:
.321d	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.321f	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.3221	48		pha				pha
.3222	a9 01		lda #$01			lda 	#1
.3224	20 3e 35	jsr $353e			jsr 	IFloatSetByte 				; return to +1
.3227	68		pla				pla 								; sign bit back
.3228	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.322a	18		clc				clc
.322b	60		rts				rts
.322c					_IFCZero:
.322c	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.322f	18		clc				clc
.3230	60		rts				rts
.3231					_IFCNonInteger:
.3231	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.3233	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.3235	05 09		ora $09				ora 	IFR0+IM1
.3237	05 0a		ora $0a				ora 	IFR0+IM2
.3239	f0 f1		beq $322c			beq 	_IFCZero 					; near enough !
.323b	80 e0		bra $321d			bra 	_IFCReturnSign 				; return the sign of the difference.
.323d					IFloatIntegerR0:
.323d	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.323f	29 3f		and #$3f			and 	#IFXMask
.3241	f0 1b		beq $325e			beq 	_FIPExit 					; if so do nothing
.3243	a2 08		ldx #$08			ldx 	#IFR0
.3245	20 73 35	jsr $3573			jsr 	IFloatNormalise 			; normalise
.3248	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; is it zero ?
.324b	f0 0e		beq $325b			beq 	_FIPZero 					; if so return zero.
.324d					_FIPShift:
.324d	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.324f	29 20		and #$20			and 	#$20 						; still -ve
.3251	f0 0b		beq $325e			beq 	_FIPExit
.3253	20 6b 35	jsr $356b			jsr 	IFloatShiftRight 			; shift mantissa right
.3256	20 95 35	jsr $3595			jsr 	IFloatIncExponent 			; bump exponent
.3259	80 f2		bra $324d			bra 	_FIPShift
.325b					_FIPZero:
.325b	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.325e					_FIPExit:
.325e	18		clc				clc
.325f	60		rts				rts
.3260					IFloatDivideFloat:
.3260	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.3263	20 96 30	jsr $3096			jsr 	IFCalculateNewSign 			; calculate sign of result
.3266	20 73 35	jsr $3573			jsr 	IFloatNormalise 			; normalise RX
.3269	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.326b	20 73 35	jsr $3573			jsr 	IFloatNormalise
.326e	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.3271	f0 56		beq $32c9			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.3273	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.3275	20 8d 30	jsr $308d			jsr 	IFMSignExtend
.3278	8d df 06	sta $06df			sta 	IFNewExponent
.327b	ae de 06	ldx $06de			ldx 	IFTarget 					; calculate s1.exponent
.327e	b5 03		lda $03,x			lda 	IExp,x
.3280	20 8d 30	jsr $308d			jsr 	IFMSignExtend
.3283	38		sec				sec
.3284	ed df 06	sbc $06df			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.3287	38		sec				sec
.3288	e9 17		sbc #$17			sbc 	#23
.328a	8d df 06	sta $06df			sta 	IFNewExponent
.328d	20 cb 32	jsr $32cb			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3290	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.3292	10 08		bpl $329c			bpl 	_IFDFNoShiftResult
.3294	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.3296	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.3299	ee df 06	inc $06df			inc 	IFNewExponent
.329c					_IFDFNoShiftResult:
.329c	ad df 06	lda $06df			lda 	IFNewExponent 				; underflow/overflow check.
.329f	30 06		bmi $32a7			bmi 	_IFDFCheckUnderflow
.32a1	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.32a3	b0 24		bcs $32c9			bcs 	_IFDFDivZero
.32a5	80 11		bra $32b8			bra		_IFDFExit
.32a7					_IFDFCheckUnderflow:
.32a7	ad df 06	lda $06df			lda 	IFNewExponent 				; shift into a legal exponent.
.32aa	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.32ac	b0 0a		bcs $32b8			bcs 	_IFDFExit
.32ae	ee df 06	inc $06df			inc 	IFNewExponent
.32b1	a2 14		ldx #$14			ldx 	#IFRTemp
.32b3	20 6b 35	jsr $356b			jsr 	IFloatShiftRight
.32b6	80 ef		bra $32a7			bra 	_IFDFCheckUnderflow
.32b8					_IFDFExit:
.32b8	ad df 06	lda $06df			lda 	IFNewExponent 				; combine exponent and sign.
.32bb	29 3f		and #$3f			and 	#IFXMask
.32bd	0d e0 06	ora $06e0			ora 	IFNewSign
.32c0	85 17		sta $17				sta 	IFRTemp+IExp
.32c2	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.32c4	20 cd 34	jsr $34cd			jsr 	IFloatCopyFromRegister
.32c7	18		clc				clc
.32c8	60		rts				rts
.32c9					_IFDFDivZero:
.32c9	38		sec				sec
.32ca	60		rts				rts
.32cb					IFloatDivideSupport:
.32cb	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.32cd	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.32d0	5a		phy				phy 								; main division loop x 23
.32d1	a0 17		ldy #$17			ldy 	#23
.32d3					_IFDSLoop:
.32d3	20 04 31	jsr $3104			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.32d6	20 f8 30	jsr $30f8			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.32d9	88		dey				dey
.32da	d0 f7		bne $32d3			bne 	_IFDSLoop 					; do it 24 times
.32dc	7a		ply				ply
.32dd	60		rts				rts
.32de					IFloatIntegerToStringR0:
.32de	8d e1 06	sta $06e1			sta 	IFBase 						; save base to use.
.32e1	20 bd 35	jsr $35bd			jsr 	IFloatBufferReset			; empty buffer
.32e4	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.32e6	29 3f		and #$3f			and 	#IFXMask
.32e8	d0 1d		bne $3307			bne 	_IFIFail
.32ea	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.32ec	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.32ef	f0 0e		beq $32ff			beq 	_IFINotNegative
.32f1	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.32f3	29 40		and #$40			and 	#IFSign
.32f5	f0 08		beq $32ff			beq 	_IFINotNegative
.32f7	a9 2d		lda #$2d			lda 	#"-"						; output -
.32f9	20 cc 35	jsr $35cc			jsr 	IFloatBufferWrite
.32fc	20 47 35	jsr $3547			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.32ff					_IFINotNegative:
.32ff	20 09 33	jsr $3309			jsr 	_IFIRecursiveConvert 		; start converting
.3302	20 c4 35	jsr $35c4			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.3305	18		clc				clc
.3306	60		rts				rts
.3307					_IFIFail:
.3307	38		sec				sec
.3308	60		rts				rts
.3309					_IFIRecursiveConvert:
.3309	a2 0c		ldx #$0c			ldx 	#IFR1
.330b	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister 		; R0->R1
.330e	a2 08		ldx #$08			ldx 	#IFR0
.3310	ad e1 06	lda $06e1			lda 	IFBase 						; Base -> R0
.3313	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.3316	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.3318	20 a0 30	jsr $30a0			jsr 	IFloatDivideInteger
.331b	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.331d	20 35 35	jsr $3535			jsr 	IFloatCheckZero
.3320	f0 09		beq $332b			beq 	_IFIOutDigit
.3322	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.3324	48		pha				pha
.3325	20 09 33	jsr $3309			jsr 	_IFIRecursiveConvert 		; convert the divide result
.3328	68		pla				pla
.3329	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.332b					_IFIOutDigit:
.332b	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.332d	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.332f	90 02		bcc $3333			bcc 	_IFINotHex
.3331	69 06		adc #$06			adc 	#6
.3333					_IFINotHex:
.3333	69 30		adc #$30			adc 	#48
.3335	20 cc 35	jsr $35cc			jsr 	IFloatBufferWrite 			; write character to buffer.
.3338	60		rts				rts
.06e1					IFBase:
>06e1							.fill 	1
.3339					IFloatFloatToStringR0:
.3339	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.333b	20 8b 34	jsr $348b			jsr 	IFloatPushRx
.333e	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister
.3341	20 3d 32	jsr $323d			jsr 	IFloatIntegerR0				; make R0 integer
.3344	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3346	20 de 32	jsr $32de			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.3349	9c e2 06	stz $06e2			stz 	IFloatDecimalCount 			; zero the decimal count.
.334c	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.334e	29 3f		and #$3f			and 	#IFXMask
.3350	f0 44		beq $3396			beq 	_IFFSExit
.3352					_IFloatFracLoop:
.3352	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3354	20 cd 34	jsr $34cd			jsr 	IFloatCopyFromRegister
.3357	20 e7 31	jsr $31e7			jsr 	IFloatFractionalR0
.335a	20 73 35	jsr $3573			jsr 	IFloatNormalise
.335d	a2 10		ldx #$10			ldx 	#IFR2
.335f	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister 		; copy to back R2
.3362	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3364	a9 0a		lda #$0a			lda 	#10
.3366	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.3369	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.336b	20 de 2f	jsr $2fde			jsr 	IFloatMultiply
.336e	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.3370	20 de 34	jsr $34de			jsr 	IFloatCopyToRegister
.3373	20 3d 32	jsr $323d			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.3376	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; done 3 dp, no more
.3379	c9 03		cmp #$03			cmp 	#3
.337b	f0 16		beq $3393			beq 	_IFFSExitStripZero
.337d	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3380	d0 05		bne $3387			bne 	_IFloatNotFirst
.3382	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3384	20 cc 35	jsr $35cc			jsr 	IFloatBufferWrite
.3387					_IFloatNotFirst:
.3387	ee e2 06	inc $06e2			inc 	IFloatDecimalCount
.338a	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.338c	09 30		ora #$30			ora 	#"0"						; ASCII
.338e	20 cc 35	jsr $35cc			jsr 	IFloatBufferWrite 			; write to the buffer.
.3391	80 bf		bra $3352			bra 	_IFloatFracLoop
.3393					_IFFSExitStripZero:
.3393	20 db 35	jsr $35db			jsr 	IFloatStripTrailingZeros
.3396					_IFFSExit:
.3396	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3398	20 ac 34	jsr $34ac			jsr 	IFloatPullRx
.339b	20 c4 35	jsr $35c4			jsr 	IFloatGetBufferAddress
.339e	18		clc				clc
.339f	60		rts				rts
.06e2					IFloatDecimalCount:
>06e2							.fill 	1
.33a0					IFloatStringToFloatR0:
.33a0	8d e3 06	sta $06e3			sta 	IFCount 					; save length and positions out.
.33a3	86 20		stx $20				stx 	iTemp0
.33a5	84 21		sty $21				sty 	iTemp0+1
.33a7	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.33a9	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.33ac	9c e4 06	stz $06e4			stz 	IFSignFlag 					; clear the sign flag
.33af	20 3c 34	jsr $343c			jsr 	IFSTFGetNext 				; get first
.33b2	f0 1b		beq $33cf			beq 	_IFSTFFail 					; no character, fail.
.33b4	90 10		bcc $33c6			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.33b6	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.33b8	d0 15		bne $33cf			bne 	_IFSTFFail
.33ba	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.33bc	8d e4 06	sta $06e4			sta 	IFSignFlag
.33bf					_IFSTFLoop:
.33bf	20 3c 34	jsr $343c			jsr 	IFSTFGetNext 				; get next character
.33c2	b0 0b		bcs $33cf			bcs 	_IFSTFFail 					; bad character.
.33c4	f0 11		beq $33d7			beq 	_IFSTFExit 					; end of data
.33c6					_IFSTFHaveChar:
.33c6	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.33c8	f0 08		beq $33d2			beq 	_IFSTFDecimal
.33ca	20 60 34	jsr $3460			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.33cd	80 f0		bra $33bf			bra 	_IFSTFLoop 					; keep going until . or end.
.33cf					_IFSTFFail:
.33cf	38		sec				sec
.33d0	80 0d		bra $33df			bra 	_IFSTFReturn
.33d2					_IFSTFDecimal:
.33d2	20 e7 33	jsr $33e7			jsr 	IFSTFDecimal 				; call the decimal places code.
.33d5	b0 08		bcs $33df			bcs 	_IFSTFReturn 				; error
.33d7					_IFSTFExit:
.33d7	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.33d9	0d e4 06	ora $06e4			ora 	IFSignFlag
.33dc	85 0b		sta $0b				sta 	IFR0+IExp
.33de	18		clc				clc
.33df					_IFSTFReturn:
.33df	60		rts				rts
.33e0					IFloatAddDecimalToR0:
.33e0	8d e3 06	sta $06e3			sta 	IFCount 					; save it out.
.33e3	86 20		stx $20				stx 	iTemp0
.33e5	84 21		sty $21				sty 	iTemp0+1
.33e7					IFSTFDecimal:
.33e7	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.33e9	20 8b 34	jsr $348b			jsr 	IFloatPushRx
.33ec	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.33ee	20 3c 35	jsr $353c			jsr 	IFloatSetZero
.33f1	9c e5 06	stz $06e5			stz 	IFDecimalPlaces 			; zero DP.
.33f4					_IFSTDLoop:
.33f4	20 3c 34	jsr $343c			jsr 	IFSTFGetNext 				; get next
.33f7	b0 41		bcs $343a			bcs 	_IFSTFFail2 				; bad character.
.33f9	f0 11		beq $340c			beq 	_IFSTFComplete 				; end of data, work out the result.
.33fb	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.33fd	f0 39		beq $3438			beq 	_IFSTFExit2
.33ff	20 60 34	jsr $3460			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3402	ee e5 06	inc $06e5			inc 	IFDecimalPlaces 			; count decimals
.3405	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.3408	c9 03		cmp #$03			cmp 	#3
.340a	90 e8		bcc $33f4			bcc 	_IFSTDLoop
.340c					_IFSTFComplete:
.340c	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.340f	f0 27		beq $3438			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3411	3a		dec a				dec 	a 							; table indexed from 1.
.3412	0a		asl a				asl 	a
.3413	0a		asl a				asl 	a
.3414	aa		tax				tax
.3415	bd 77 34	lda $3477,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3418	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.341a	bd 78 34	lda $3478,x			lda 	TableTen+1,x
.341d	85 0d		sta $0d				sta  	IFR1+IM1
.341f	bd 79 34	lda $3479,x			lda 	TableTen+2,x
.3422	85 0e		sta $0e				sta  	IFR1+IM2
.3424	bd 7a 34	lda $347a,x			lda 	TableTen+3,x
.3427	85 0f		sta $0f				sta  	IFR1+IExp
.3429	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.342b	20 de 2f	jsr $2fde			jsr 	IFloatMultiply
.342e	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3430	20 ac 34	jsr $34ac			jsr 	IFloatPullRx
.3433	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3435	20 34 2f	jsr $2f34			jsr 	IFloatAdd
.3438					_IFSTFExit2:
.3438	18		clc				clc
.3439	60		rts				rts
.343a					_IFSTFFail2:
.343a	38		sec				sec
.343b	60		rts				rts
.343c					IFSTFGetNext:
.343c	ad e3 06	lda $06e3			lda 	IFCount  					; if count is zero, return with Z set.
.343f	f0 19		beq $345a			beq 	_IFSTFReturnOk
.3441	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3443	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3445	d0 02		bne $3449			bne 	_IFSTFGNNoCarry
.3447	e6 21		inc $21				inc 	iTemp0+1
.3449					_IFSTFGNNoCarry:
.3449	ce e3 06	dec $06e3			dec 	IFCount 					; dec count.
.344c	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.344e	f0 08		beq $3458			beq 	_IFSTFGOkay
.3450	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3452	90 08		bcc $345c			bcc 	_IFSTFGFail
.3454	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3456	b0 04		bcs $345c			bcs 	_IFSTFGFail
.3458					_IFSTFGOkay:
.3458	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.345a					_IFSTFReturnOk:
.345a	18		clc				clc
.345b	60		rts				rts
.345c					_IFSTFGFail:
.345c	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.345e	38		sec				sec
.345f	60		rts				rts
.3460					IFSTFAddR0:
.3460	29 0f		and #$0f			and 	#15 						; to int value
.3462	48		pha				pha 								; save it.
.3463	a9 0a		lda #$0a			lda 	#10
.3465	a2 0c		ldx #$0c			ldx 	#IFR1
.3467	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.346a	20 de 2f	jsr $2fde			jsr 	IFloatMultiply
.346d	68		pla				pla
.346e	a2 0c		ldx #$0c			ldx 	#IFR1
.3470	20 3e 35	jsr $353e			jsr 	IFloatSetByte
.3473	20 34 2f	jsr $2f34			jsr 	IFloatAdd
.3476	60		rts				rts
.06e3					IFCount:
>06e3							.fill 	1
.06e4					IFSignFlag:
>06e4							.fill 	1
.06e5					IFDecimalPlaces:
>06e5							.fill 	1
.3477					TableTen:
>3477	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>347b	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>347f	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3483	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3487	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.348b					IFloatPushRx:
.348b	5a		phy				phy
.348c	ac e6 06	ldy $06e6			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.348f	b5 00		lda $00,x			lda 	IM0,x
.3491	99 e7 06	sta $06e7,y			sta 	IFStack,y
.3494	b5 01		lda $01,x			lda 	IM1,x
.3496	99 e8 06	sta $06e8,y			sta 	IFStack+1,y
.3499	b5 02		lda $02,x			lda 	IM2,x
.349b	99 e9 06	sta $06e9,y			sta 	IFStack+2,y
.349e	b5 03		lda $03,x			lda 	IExp,x
.34a0	99 ea 06	sta $06ea,y			sta 	IFStack+3,y
.34a3	c8		iny				iny
.34a4	c8		iny				iny
.34a5	c8		iny				iny
.34a6	c8		iny				iny
.34a7	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.34aa	7a		ply				ply
.34ab	60		rts				rts
.34ac					IFloatPullRx:
.34ac	5a		phy				phy
.34ad	ac e6 06	ldy $06e6			ldy 	IFStackIndex	 			; decrement SP
.34b0	88		dey				dey
.34b1	88		dey				dey
.34b2	88		dey				dey
.34b3	88		dey				dey
.34b4	b9 e7 06	lda $06e7,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.34b7	95 00		sta $00,x			sta 	IM0,x
.34b9	b9 e8 06	lda $06e8,y			lda 	IFStack+1,y
.34bc	95 01		sta $01,x			sta 	IM1,x
.34be	b9 e9 06	lda $06e9,y			lda 	IFStack+2,y
.34c1	95 02		sta $02,x			sta 	IM2,x
.34c3	b9 ea 06	lda $06ea,y			lda 	IFStack+3,y
.34c6	95 03		sta $03,x			sta 	IExp,x
.34c8	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.34cb	7a		ply				ply
.34cc	60		rts				rts
.06e6					IFStackIndex:
>06e6							.fill 	1
.06e7					IFStack:
>06e7							.fill 	16*4
.34cd					IFloatCopyFromRegister:
.34cd	b5 00		lda $00,x			lda 	0,x
.34cf	85 08		sta $08				sta 	IFR0
.34d1	b5 01		lda $01,x			lda 	1,x
.34d3	85 09		sta $09				sta 	IFR0+1
.34d5	b5 02		lda $02,x			lda 	2,x
.34d7	85 0a		sta $0a				sta 	IFR0+2
.34d9	b5 03		lda $03,x			lda 	3,x
.34db	85 0b		sta $0b				sta 	IFR0+3
.34dd	60		rts				rts
.34de					IFloatCopyToRegister:
.34de	a5 08		lda $08				lda 	IFR0
.34e0	95 00		sta $00,x			sta 	0,x
.34e2	a5 09		lda $09				lda 	IFR0+1
.34e4	95 01		sta $01,x			sta 	1,x
.34e6	a5 0a		lda $0a				lda 	IFR0+2
.34e8	95 02		sta $02,x			sta 	2,x
.34ea	a5 0b		lda $0b				lda 	IFR0+3
.34ec	95 03		sta $03,x			sta 	3,x
.34ee	60		rts				rts
.34ef					IFloatLoadInline:
.34ef	68		pla				pla 								; pop address off to iTemp0
.34f0	85 20		sta $20				sta 	iTemp0
.34f2	68		pla				pla
.34f3	85 21		sta $21				sta 	iTemp0+1
.34f5	a0 01		ldy #$01			ldy 	#1
.34f7	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.34f9	95 00		sta $00,x			sta 	0,x
.34fb	c8		iny				iny
.34fc	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.34fe	95 01		sta $01,x			sta 	1,x
.3500	c8		iny				iny
.3501	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3503	95 02		sta $02,x			sta 	2,x
.3505	c8		iny				iny
.3506	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3508	95 03		sta $03,x			sta 	3,x
.350a	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.350b	a5 20		lda $20				lda 	iTemp0
.350d	69 05		adc #$05			adc 	#5
.350f	85 20		sta $20				sta 	iTemp0
.3511	90 02		bcc $3515			bcc 	_IFLINoCarry
.3513	e6 21		inc $21				inc 	iTemp0+1
.3515					_IFLINoCarry:
.3515	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3518					IFloatMultiply8BitRx:
.3518	5a		phy		        phy
.3519	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.351b	a4 08		ldy $08		        ldy     IFR0+IM0
.351d	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.351e	85 08		sta $08		        sta     IFR0+IM0
.3520	84 09		sty $09		        sty     IFR0+IM1
.3522	a9 00		lda #$00	        lda     #0
.3524	a0 08		ldy #$08	        ldy     #8
.3526					_IFMLoop:
.3526	90 03		bcc $352b	        bcc     _IFMNoAdd
.3528	18		clc		        clc
.3529	65 09		adc $09		        adc     IFR0+IM1
.352b					_IFMNoAdd:
.352b	6a		ror a		        ror     a
.352c	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.352e	88		dey		        dey
.352f	d0 f5		bne $3526	        bne     _IFMLoop
.3531	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3533	7a		ply		        ply
.3534	60		rts		        rts
.3535					IFloatCheckZero:
.3535	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3537	15 01		ora $01,x			ora 	IM1,x
.3539	15 02		ora $02,x			ora 	IM2,x
.353b	60		rts				rts
.353c					IFloatSetZero:
.353c	a9 00		lda #$00			lda 	#0
.353e					IFloatSetByte:
.353e	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3540	74 01		stz $01,x			stz 	IM1,x
.3542	74 02		stz $02,x			stz 	IM2,x
.3544	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3546	60		rts				rts
.3547					IFloatNegate:
.3547	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3549	49 40		eor #$40			eor 	#IFSign
.354b	95 03		sta $03,x			sta 	IExp,x
.354d	18		clc				clc
.354e	60		rts				rts
.354f					IFloatMantissaNegate:
.354f	38		sec				sec 								; when you want a real 2's complement negative value.
.3550	a9 00		lda #$00			lda 	#0
.3552	f5 00		sbc $00,x			sbc 	IM0,x
.3554	95 00		sta $00,x			sta 	IM0,x
.3556	a9 00		lda #$00			lda 	#0
.3558	f5 01		sbc $01,x			sbc 	IM1,x
.355a	95 01		sta $01,x			sta 	IM1,x
.355c	a9 00		lda #$00			lda 	#0
.355e	f5 02		sbc $02,x			sbc 	IM2,x
.3560	95 02		sta $02,x			sta 	IM2,x
.3562	60		rts				rts
.3563					IFloatShiftLeft:
.3563	18		clc				clc
.3564					IFloatRotateLeft:
.3564	36 00		rol $00,x			rol 	IM0,x
.3566	36 01		rol $01,x			rol 	IM1,x
.3568	36 02		rol $02,x			rol 	IM2,x
.356a	60		rts				rts
.356b					IFloatShiftRight:
.356b	18		clc				clc
.356c					IFloatRotateRight:
.356c	76 02		ror $02,x			ror 	IM2,x
.356e	76 01		ror $01,x			ror 	IM1,x
.3570	76 00		ror $00,x			ror 	IM0,x
.3572	60		rts				rts
.3573					IFloatNormalise:
.3573	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; is it zero
.3576	f0 18		beq $3590			beq 	_IFNExitZero 				; if so exit
.3578					_IFNLoop:
.3578	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.357a	29 c0		and #$c0			and 	#$C0
.357c	c9 40		cmp #$40			cmp 	#$40
.357e	f0 13		beq $3593			beq 	_IFNExitOkay 				; if so , then we are done.
.3580	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3582	29 3f		and #$3f			and 	#$3F
.3584	c9 20		cmp #$20			cmp 	#$20
.3586	f0 0b		beq $3593			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3588	20 a9 35	jsr $35a9			jsr 	IFloatDecExponent
.358b	20 63 35	jsr $3563			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.358e	80 e8		bra $3578			bra 	_IFNLoop
.3590					_IFNExitZero:
.3590	20 3c 35	jsr $353c			jsr 	IFloatSetZero 				; set the result to zero
.3593					_IFNExitOkay:
.3593	18		clc				clc  								; return with CC.
.3594	60		rts				rts
.3595					IFloatIncExponent:
.3595	b5 03		lda $03,x			lda 	IExp,x
.3597	48		pha				pha
.3598	29 c0		and #$c0			and 	#$C0
.359a	8d 27 07	sta $0727			sta 	IFXTemp
.359d	68		pla				pla
.359e	1a		inc a				inc 	a
.359f	29 3f		and #$3f			and 	#$3F
.35a1	48		pha				pha
.35a2	0d 27 07	ora $0727			ora 	IFXTemp
.35a5	95 03		sta $03,x			sta 	IExp,x
.35a7	68		pla				pla
.35a8	60		rts				rts
.35a9					IFloatDecExponent:
.35a9	b5 03		lda $03,x			lda 	IExp,x
.35ab	48		pha				pha
.35ac	29 c0		and #$c0			and 	#$C0
.35ae	8d 27 07	sta $0727			sta 	IFXTemp
.35b1	68		pla				pla
.35b2	3a		dec a				dec 	a
.35b3	29 3f		and #$3f			and 	#$3F
.35b5	48		pha				pha
.35b6	0d 27 07	ora $0727			ora 	IFXTemp
.35b9	95 03		sta $03,x			sta 	IExp,x
.35bb	68		pla				pla
.35bc	60		rts				rts
.0727					IFXTemp:
>0727							.fill 	1
.35bd					IFloatBufferReset:
.35bd	9c 28 07	stz $0728			stz 	IFBufferCount
.35c0	9c 29 07	stz $0729			stz 	IFBuffer
.35c3	60		rts				rts
.35c4					IFloatGetBufferAddress:
.35c4	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.35c6	a2 28		ldx #$28			ldx 	#(IFBufferCount & $FF)
.35c8	ad 28 07	lda $0728			lda 	IFBufferCount
.35cb	60		rts				rts
.35cc					IFloatBufferWrite:
.35cc	da		phx				phx
.35cd	ae 28 07	ldx $0728			ldx 	IFBufferCount
.35d0	9d 29 07	sta $0729,x			sta 	IFBuffer,x
.35d3	9e 2a 07	stz $072a,x			stz 	IFBuffer+1,x
.35d6	ee 28 07	inc $0728			inc 	IFBufferCount
.35d9	fa		plx				plx
.35da	60		rts				rts
.35db					IFloatStripTrailingZeros:
.35db	ae 28 07	ldx $0728			ldx 	IFBufferCount
.35de	bd 28 07	lda $0728,x			lda 	IFBuffer-1,x
.35e1	c9 30		cmp #$30			cmp		#"0"
.35e3	d0 0f		bne $35f4			bne 	_IFSTExit
.35e5	bd 27 07	lda $0727,x			lda 	IFBuffer-2,x
.35e8	c9 2e		cmp #$2e			cmp 	#"."
.35ea	f0 08		beq $35f4			beq 	_IFSTExit
.35ec	ce 28 07	dec $0728			dec 	IFBufferCount
.35ef	9e 28 07	stz $0728,x			stz 	IFBuffer-1,x
.35f2	80 e7		bra $35db			bra 	IFloatStripTrailingZeros
.35f4					_IFSTExit:
.35f4	60		rts				rts
.0728					IFBufferCount:
>0728							.fill 	1
.0729					IFBuffer:
>0729							.fill 	25
.35f5					IFloatCheckRange:
.35f5	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.35f7	09 40		ora #$40			ora 	#IFSign
.35f9	85 0b		sta $0b				sta 	IFR0+IExp
.35fb	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.35fd	20 34 2f	jsr $2f34			jsr 	IFloatAdd 					; add allowed to error.
.3600	a2 08		ldx #$08			ldx 	#IFR0
.3602	20 35 35	jsr $3535			jsr 	IFloatCheckZero 			; error if < 0
.3605	f0 06		beq $360d			beq 	_IFAOkay
.3607	a5 0b		lda $0b				lda 	IFR0+IExp
.3609	29 40		and #$40			and 	#IFSign
.360b	d0 01		bne $360e			bne 	_IFAFail
.360d					_IFAOkay:
.360d	60		rts				rts
.360e					_IFAFail:
.360e	38		sec				sec
.360f	68		pla				pla 								; get address - 2
.3610	e9 02		sbc #$02			sbc 	#2
.3612	aa		tax				tax
.3613	68		pla				pla
.3614	e9 00		sbc #$00			sbc 	#0
.3616	a8		tay				tay
.3617	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3619					_IFAStop:
>3619	db						.byte 	$DB 						; display an error AA ADR ADR
.361a	80 fd		bra $3619			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
