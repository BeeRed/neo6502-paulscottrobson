
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Wed Jun 28 17:02:45 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSEditWidth:
>0239							.fill 	1
.023a					OSEditLength:
>023a							.fill 	1
.023b					OSEditBuffer:
>023b							.fill 	OSTextBufferSize+1
>02fc							.fill 	32
>031c							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffdf					OSEnterLine              = $ffdf ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboard           = $ffeb ; Read A from keyboard, CC = success, CS = no key
=$ffee					OSReadKeystroke          = $ffee ; Read A from keyboard, display cursor, wait for key.
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen, CC = success
=$fff4					OSWriteString            = $fff4 ; Write length prefixed string YX to screen
=$fff7					OSGetScreenSize          = $fff7 ; Get size of screen to XY

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 88 1f	jsr $1f88			jsr 	PGMSetBaseAddress
.1007	20 12 2b	jsr $2b12			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c c1 14	jmp $14c1			jmp 	Command_RUN
.1012	4c 09 14	jmp $1409			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_STANDARD_LAST = $a1
=$a1					PR_DATA = $a1
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; get a number to assert
.1018	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.101a	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail 					; if so, the assert fails.
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 28 26	jmp $2628		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c c2 26	jmp $26c2		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 9b 1f	jsr $1f9b			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1049	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.104b	1a		inc a				inc 	a
.104c	85 29		sta $29				sta 	freeMemory+1
.104e	20 b1 2a	jsr $2ab1			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 f6 27	jsr $27f6			jsr 	StackReset 					; page passed on in A
.1057	20 55 28	jsr $2855			jsr 	StringSystemInitialise
.105a	20 3d 25	jsr $253d			jsr 	ScanProcedures
.105d	20 93 14	jsr $1493			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.1064	5a		phy				phy
.1065	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 28		sta ($28)			sta 	(freeMemory)
.1075	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 29		inc $29				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.108c	1a		inc a				inc 	a 							; spacing 2 pages
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c c2 26	jmp $26c2		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 68 2a	jsr $2a68			jsr 	VARGetInfo 					; get information
.10a2	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 1a 2a	jsr $2a1a			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 c6 29	jsr $29c6			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 24		sty $24				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 22		sty $22				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 23		sty $23				sty 	zTemp0+1
.10c3	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 22		sta ($22),y			sta 	(zTemp0),y
.10ca	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10cc	20 87 27	jsr $2787			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c d2 25	jmp $25d2		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c 9a 26	jmp $269a		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 8f 27	jsr $278f			jsr 	ERRCheckComma 				; check comma
.10fb	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.110d	85 26		sta $26				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 26		sta ($26),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 26		sta ($26),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 26		lda $26				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 26		sta $26				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 27		inc $27				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.114c	86 23		stx $23				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 22		lda ($22),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 22		lda ($22)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 22		sta ($22),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 22		lda $22				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 22		sta $22				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 23		inc $23				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 23		rol $23				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 23		rol $23				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 23		inc $23				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.119e	85 22		sta $22				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 22		sta ($22)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 22		sta ($22),y			sta 	(zTemp0),y
.11ad	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c e3 25	jmp $25e3		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 8f 27	jsr $278f			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 23		sta $23				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 22		sta $22				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 22		sta ($22)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 22		sta ($22),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11dd					Command_GOTO:
.11dd	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; get line number
.11e0					GotoR0:
.11e0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11e3	85 19		sta $19				sta 	codePtr+1
.11e5	64 18		stz $18				stz 	codePtr
.11e7					_GOSearch:
.11e7	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e9	f0 1f		beq $120a			beq 	_GOError
.11eb	a0 01		ldy #$01			ldy 	#1 							; found line #
.11ed	b1 18		lda ($18),y			lda 	(codePtr),y
.11ef	c5 08		cmp $08				cmp 	IFR0+IM0
.11f1	d0 0a		bne $11fd			bne 	_GONext
.11f3	c8		iny				iny
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y
.11f6	c5 09		cmp $09				cmp 	IFR0+IM1
.11f8	d0 03		bne $11fd			bne 	_GONext
.11fa	4c d8 14	jmp $14d8			jmp 	RUNNewLine
.11fd					_GONext:
.11fd	18		clc				clc 								; advance to next line.
.11fe	b2 18		lda ($18)			lda 	(codePtr)
.1200	65 18		adc $18				adc 	codePtr
.1202	85 18		sta $18				sta 	codePtr
.1204	90 e1		bcc $11e7			bcc 	_GOSearch
.1206	e6 19		inc $19				inc 	codePtr+1
.1208	80 dd		bra $11e7			bra 	_GOSearch
.120a					_GOError:
.120a	4c 67 27	jmp $2767		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.120d					Command_Input:
.120d	a9 ff		lda #$ff			lda 	#$FF
.120f	8d 06 05	sta $0506			sta 	InputFlag
.1212	80 03		bra $1217			bra 	Command_IP_Main
.1214					Command_Print:
.1214	9c 06 05	stz $0506			stz 	InputFlag
.1217					Command_IP_Main:
.1217	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1218					_CPLoop:
.1218	08		php				php 								; save last action flag
.1219	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.121b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.121d	f0 48		beq $1267			beq 	_CPExit 					; without consuming
.121f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1221	f0 44		beq $1267			beq 	_CPExit
.1223	68		pla				pla 								; throw last action flag
.1224	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1226	c8		iny				iny
.1227	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1229	f0 39		beq $1264			beq 	_CPContinueWithSameLine
.122b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.122d	f0 30		beq $125f			beq 	_CPTab
.122f	88		dey				dey 								; undo the get.
.1230	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1233	10 0b		bpl $1240			bpl	 	_CPNotInput
.1235	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1237	c9 40		cmp #$40			cmp 	#$40
.1239	d0 05		bne $1240			bne 	_CPNotInput
.123b	20 70 12	jsr $1270			jsr 	_CPInputCode 				; input code
.123e	80 d7		bra $1217			bra 	Command_IP_Main 			; and go round again.
.1240					_CPNotInput:
.1240	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1243	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1245	10 0e		bpl $1255			bpl 	_CPNumber
.1247	5a		phy				phy
.1248	18		clc				clc 								; string address to YX
.1249	a5 08		lda $08				lda 	IFR0+IM0
.124b	aa		tax				tax
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	a8		tay				tay
.124f	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print YX
.1252	7a		ply				ply
.1253	80 c2		bra $1217			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1255					_CPNumber:
.1255	5a		phy				phy
.1256	20 22 2f	jsr $2f22			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1259	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print string at YX
.125c	7a		ply				ply
.125d	80 b8		bra $1217			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125f					_CPTab:
.125f	a9 09		lda #$09			lda 	#9 							; print TAB
.1261	20 bc 12	jsr $12bc			jsr 	CPPrintA
.1264					_CPContinueWithSameLine:
.1264	38		sec				sec 								; loop round with carry set, which
.1265	80 b1		bra $1218			bra 	_CPLoop 					; will inhibit final CR
.1267					_CPExit:
.1267	28		plp				plp 								; get last action flag
.1268	b0 05		bcs $126f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.126a	a9 0d		lda #$0d			lda 	#13 						; print new line
.126c	20 bc 12	jsr $12bc			jsr 	CPPrintA
.126f					_CPExit2:
.126f	60		rts				rts
.1270					_CPInputCode:
.1270	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get the term.
.1273	5a		phy				phy 								; save position
.1274	20 b9 12	jsr $12b9			jsr 	CPInputA					; input a line to YX
.1277	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1279	30 18		bmi $1293			bmi 	_CPInputString
.127b	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127d	48		pha				pha
.127e	a5 09		lda $09				lda 	IFR0+IM1
.1280	48		pha				pha
.1281	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1283	84 23		sty $23				sty 	zTemp0+1
.1285	20 7e 1a	jsr $1a7e			jsr 	VALConversionZTemp0
.1288	68		pla				pla 								; do the assign.
.1289	85 23		sta $23				sta 	zTemp0+1
.128b	68		pla				pla
.128c	85 22		sta $22				sta 	zTemp0
.128e	20 e4 12	jsr $12e4			jsr 	AssignNumber
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					_CPInputString:
.1293	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1295	85 22		sta $22				sta 	zTemp0
.1297	a5 09		lda $09				lda 	IFR0+IM1
.1299	85 23		sta $23				sta 	zTemp0+1
.129b	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129d	84 09		sty $09				sty 	IFR0+IM1
.129f	20 fb 12	jsr $12fb			jsr 	AssignString 				; assign the string
.12a2	7a		ply				ply 								; exit
.12a3	60		rts				rts
.12a4					CPPrintYX:
.12a4	86 22		stx $22				stx 	zTemp0
.12a6	84 23		sty $23				sty 	zTemp0+1
.12a8	b2 22		lda ($22)			lda 	(zTemp0)
.12aa	aa		tax				tax
.12ab	f0 0b		beq $12b8			beq 	_CPPrintExit
.12ad	a0 01		ldy #$01			ldy 	#1
.12af					_CPPrintAYXLoop:
.12af	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b1	20 bc 12	jsr $12bc			jsr 	CPPrintA
.12b4	c8		iny				iny
.12b5	ca		dex				dex
.12b6	d0 f7		bne $12af			bne 	_CPPrintAYXLoop
.12b8					_CPPrintExit:
.12b8	60		rts				rts
.12b9					CPInputA:
.12b9	4c df ff	jmp $ffdf			jmp 	OSEnterLine
.12bc					CPPrintA:
.12bc	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12bf					CommandLET:
.12bf	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get term
.12c2	90 6f		bcc $1333			bcc 	CLError 					; must be a reference term.
.12c4	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c6	48		pha				pha
.12c7	a5 09		lda $09				lda 	IFR0+IM1
.12c9	48		pha				pha
.12ca	a5 0b		lda $0b				lda 	IFR0+IExp
.12cc	48		pha				pha
.12cd	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12cf	20 97 27	jsr $2797			jsr 	ERRCheckA
.12d2	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; right hand side.
.12d5	68		pla				pla 								; type of l-expr
.12d6	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d8	30 5c		bmi $1336			bmi 	CLType
.12da	fa		plx				plx 	 							; pop target address to zTemp0
.12db	86 23		stx $23				stx 	zTemp0+1
.12dd	fa		plx				plx
.12de	86 22		stx $22				stx 	zTemp0
.12e0					AssignData:
.12e0	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e2	30 17		bmi $12fb			bmi 	AssignString
.12e4					AssignNumber:
.12e4	5a		phy				phy
.12e5	a0 03		ldy #$03			ldy 	#3
.12e7	a5 0b		lda $0b				lda 	IFR0+IExp
.12e9	91 22		sta ($22),y			sta 	(zTemp0),y
.12eb	88		dey				dey
.12ec	a5 0a		lda $0a				lda 	IFR0+IM2
.12ee	91 22		sta ($22),y			sta 	(zTemp0),y
.12f0	88		dey				dey
.12f1	a5 09		lda $09				lda 	IFR0+IM1
.12f3	91 22		sta ($22),y			sta 	(zTemp0),y
.12f5	a5 08		lda $08				lda 	IFR0+IM0
.12f7	92 22		sta ($22)			sta 	(zTemp0)
.12f9	7a		ply				ply
.12fa	60		rts				rts
.12fb					AssignString:
.12fb	5a		phy				phy
.12fc	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fe	b1 22		lda ($22),y			lda 	(zTemp0),y
.1300	12 22		ora ($22)			ora 	(zTemp0)
.1302	f0 23		beq $1327			beq 	_CLConcreteString
.1304	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1306	85 24		sta $24				sta 	zTemp1
.1308	b1 22		lda ($22),y			lda 	(zTemp0),y
.130a	85 25		sta $25				sta 	zTemp1+1
.130c	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.130e	38		sec				sec 								; we want 3 for slot size, status, string size.
.130f	e9 03		sbc #$03			sbc 	#3
.1311	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1313	90 12		bcc $1327			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1315	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1317	1a		inc a				inc 	a
.1318	aa		tax				tax
.1319	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131b					_CLReplaceString:
.131b	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.131d	c8		iny				iny
.131e	c8		iny				iny
.131f	91 24		sta ($24),y			sta 	(zTemp1),y
.1321	88		dey				dey
.1322	ca		dex				dex
.1323	d0 f6		bne $131b			bne 	_CLReplaceString
.1325	80 0a		bra $1331			bra 	_CLExit
.1327					_CLConcreteString:
.1327	20 0a 28	jsr $280a			jsr 	StringConcrete  			; concreted string in XA.
.132a	a0 01		ldy #$01			ldy 	#1 							; store the address
.132c	92 22		sta ($22)			sta 	(zTemp0)
.132e	8a		txa				txa
.132f	91 22		sta ($22),y			sta 	(zTemp0),y
.1331					_CLExit:
.1331	7a		ply				ply
.1332	60		rts				rts
.1333					CLError:
.1333	4c 05 27	jmp $2705		jmp	ErrorV_variable
.1336					CLType:
.1336	4c 02 26	jmp $2602		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1339					Command_LIST:
.1339	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.133c	9c 08 05	stz $0508			stz 	CLFrom+1
.133f	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1341	c9 99		cmp #$99			cmp 	#PR_COMMA
.1343	f0 1d		beq $1362			beq 	_CLToLine
.1345	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1347	f0 37		beq $1380			beq 	_CLDefaultTo
.1349	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.134c	a5 08		lda $08				lda 	IFR0+IM0
.134e	8d 07 05	sta $0507			sta 	CLFrom
.1351	8d 09 05	sta $0509			sta 	CLTo
.1354	a5 09		lda $09				lda 	IFR0+IM1
.1356	8d 08 05	sta $0508			sta 	CLFrom+1
.1359	8d 0a 05	sta $050a			sta 	CLTo+1
.135c	b1 18		lda ($18),y			lda 	(codePtr),y
.135e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1360	f0 26		beq $1388			beq 	_CLList
.1362					_CLToLine:
.1362	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1364	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1366	f0 18		beq $1380			beq 	_CLDefaultTo
.1368	20 8f 27	jsr $278f			jsr 	ERRCheckComma 				; sep comma
.136b	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.136d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136f	f0 0f		beq $1380			beq 	_CLDefaultTo
.1371	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; there's a To value.
.1374	a5 08		lda $08				lda 	IFR0+IM0
.1376	8d 09 05	sta $0509			sta 	CLTo
.1379	a5 09		lda $09				lda 	IFR0+IM1
.137b	8d 0a 05	sta $050a			sta 	CLTo+1
.137e	80 08		bra $1388			bra 	_CLList
.1380					_CLDefaultTo:
.1380	a9 ff		lda #$ff			lda 	#$FF
.1382	8d 09 05	sta $0509			sta 	CLTo
.1385	8d 0a 05	sta $050a			sta 	CLTo+1
.1388					_CLList:
.1388	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138b	85 19		sta $19				sta 	codePtr+1
.138d	64 18		stz $18				stz 	codePtr
.138f	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1391	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1393	20 dd 1d	jsr $1ddd			jsr 	TOKSetDetokeniseOutput
.1396					_CLLoop:
.1396	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1398	f0 4a		beq $13e4			beq 	_CLExit
.139a	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.139d	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.13a0	d0 45		bne $13e7			bne 	_CLBreak
.13a2	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a4	20 ea 13	jsr $13ea			jsr 	_CLCompareLine
.13a7	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a9	f0 2c		beq $13d7			beq 	_CLNext
.13ab	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13ad	20 ea 13	jsr $13ea			jsr 	_CLCompareLine
.13b0	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b2	f0 23		beq $13d7			beq 	_CLNext
.13b4	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	aa		tax				tax
.13b9	88		dey				dey
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y
.13bc	20 e8 28	jsr $28e8			jsr 	WriteIntXA
.13bf	a9 20		lda #$20			lda 	#32
.13c1	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13c4	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c6	a5 18		lda $18				lda 	codePtr
.13c8	18		clc				clc
.13c9	69 03		adc #$03			adc 	#3
.13cb	aa		tax				tax
.13cc	90 01		bcc $13cf			bcc 	_CLNoCarry2
.13ce	c8		iny				iny
.13cf					_CLNoCarry2:
.13cf	20 98 1d	jsr $1d98			jsr 	TOKDetokenise
.13d2	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d4	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13d7					_CLNext:
.13d7	18		clc				clc 								; advance to next line.
.13d8	b2 18		lda ($18)			lda 	(codePtr)
.13da	65 18		adc $18				adc 	codePtr
.13dc	85 18		sta $18				sta 	codePtr
.13de	90 02		bcc $13e2			bcc 	_CLNoCarry
.13e0	e6 19		inc $19				inc 	codePtr+1
.13e2					_CLNoCarry:
.13e2	80 b2		bra $1396			bra 	_CLLoop
.13e4					_CLExit:
.13e4	4c 07 29	jmp $2907			jmp 	WarmStart
.13e7					_CLBreak:
.13e7	4c 5d 27	jmp $275d		jmp	ErrorV_break
.13ea					_CLCompareLine:
.13ea	a0 01		ldy #$01			ldy 	#1
.13ec	38		sec				sec
.13ed	b1 18		lda ($18),y			lda 	(codePtr),y
.13ef	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f2	85 22		sta $22				sta 	zTemp0
.13f4	c8		iny				iny
.13f5	b1 18		lda ($18),y			lda 	(codePtr),y
.13f7	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13fa	90 0a		bcc $1406			bcc 	_CLIsNegative
.13fc	d0 05		bne $1403			bne 	_CLIsPositive
.13fe	a5 22		lda $22				lda 	zTemp0
.1400	d0 01		bne $1403			bne 	_CLIsPositive
.1402	60		rts				rts
.1403					_CLIsPositive:
.1403	a9 01		lda #$01			lda 	#1
.1405	60		rts				rts
.1406					_CLIsNegative:
.1406	a9 ff		lda #$ff			lda 	#255
.1408	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1409					Command_NEW:
.1409	20 8f 1f	jsr $1f8f			jsr 	PGMNewProgram 				; Reset current program
.140c	20 44 10	jsr $1044			jsr 	ClearCode 					; Run CLR
.140f	4c 31 15	jmp $1531			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1412					Command_READ:
.1412	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get term to R0
.1415	90 35		bcc $144c			bcc 	_CRSyntax 					; fail if not a reference.
.1417	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1419	48		pha				pha
.141a	a5 09		lda $09				lda 	IFR0+IM1
.141c	48		pha				pha
.141d	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141f	48		pha				pha
.1420	20 a5 14	jsr $14a5			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1423	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1426	d0 27		bne $144f			bne 	_CRHaveData  				; forward for the next one.
.1428					_CRNextLine:
.1428	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.142a	f0 1a		beq $1446			beq 	_CRNoData
.142c					_CRKeepSearching:
.142c	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142e	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1430	20 e2 24	jsr $24e2			jsr 	ScanForward
.1433	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1435	f0 18		beq $144f			beq 	_CRHaveData 				; found it
.1437	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1439	18		clc				clc 								; try the next line, keep going.
.143a	b2 18		lda ($18)			lda 	(codePtr)
.143c	65 18		adc $18				adc 	codePtr
.143e	85 18		sta $18				sta 	codePtr
.1440	90 e6		bcc $1428			bcc 	_CRNextLine
.1442	e6 19		inc $19				inc 	codePtr+1
.1444	80 e2		bra $1428			bra 	_CRNextLine
.1446					_CRNoData:
.1446	4c 8a 26	jmp $268a		jmp	ErrorV_data
.1449					_CLType:
.1449	4c 02 26	jmp $2602		jmp	ErrorV_type
.144c					_CRSyntax:
.144c	4c d2 25	jmp $25d2		jmp	ErrorV_syntax
.144f					_CRHaveData:
.144f	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1452	68		pla				pla 								; type of l-expr
.1453	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1455	30 f2		bmi $1449			bmi 	_CLType
.1457	68		pla				pla 								; restore address
.1458	85 23		sta $23				sta 	zTemp0+1
.145a	68		pla				pla
.145b	85 22		sta $22				sta 	zTemp0
.145d	20 e0 12	jsr $12e0			jsr 	AssignData 					; write R0 there.
.1460	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1463	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1465	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1467	d0 04		bne $146d			bne 	_CRSwapBack
.1469	c8		iny				iny 								; consume comma
.146a	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.146d					_CRSwapBack:
.146d	20 a5 14	jsr $14a5			jsr 	SwapCodeDataPointers		; swap them back.
.1470	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1472	c8		iny				iny
.1473	c9 99		cmp #$99			cmp 	#PR_COMMA
.1475	f0 9b		beq $1412			beq 	Command_READ 				; if so go round again.
.1477	88		dey				dey 								; unpick get.
.1478	60		rts				rts
.1479					Command_DATA:
.1479	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147b	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.147d	20 e2 24	jsr $24e2			jsr 	ScanForward
.1480	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1482	d0 01		bne $1485			bne 	_CDNotEOL
.1484	88		dey				dey
.1485					_CDNotEOL:
.1485	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1486					Command_REM:
.1486					Command_REM2:
.1486	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1488	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.148a	d0 06		bne $1492			bne 	_CRExit
.148c	c8		iny				iny 								; skip over it, it's a comment.
.148d	98		tya				tya
.148e	38		sec				sec
.148f	71 18		adc ($18),y			adc 	(codePtr),y
.1491	a8		tay				tay
.1492					_CRExit:
.1492	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1493					S
.1493					Command_RESTORE:
.1493	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1496	8d 0c 05	sta $050c			sta 	dataPtr+1
.1499	9c 0b 05	stz $050b			stz 	dataPtr
.149c	a9 03		lda #$03			lda 	#3 							; position start of line
.149e	8d 0d 05	sta $050d			sta 	dataPos
.14a1	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a4	60		rts				rts
.14a5					SwapCodeDataPointers:
.14a5	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a8	a6 18		ldx $18				ldx 	codePtr
.14aa	85 18		sta $18				sta 	codePtr
.14ac	8e 0b 05	stx $050b			stx 	dataPtr
.14af	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b2	a6 19		ldx $19				ldx 	codePtr+1
.14b4	85 19		sta $19				sta 	codePtr+1
.14b6	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b9	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14bc	8c 0d 05	sty $050d			sty 	dataPos
.14bf	a8		tay				tay
.14c0	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c1					Command_RUN:
.14c1	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.14c4	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c7	85 19		sta $19				sta 	codePtr+1
.14c9	64 18		stz $18				stz 	codePtr
.14cb	80 0b		bra $14d8			bra 	RUNNewLine
.14cd					RUNEndOfLine:
.14cd	18		clc				clc 								; advance to next line.
.14ce	b2 18		lda ($18)			lda 	(codePtr)
.14d0	65 18		adc $18				adc 	codePtr
.14d2	85 18		sta $18				sta 	codePtr
.14d4	90 02		bcc $14d8			bcc 	_RELNoCarry
.14d6	e6 19		inc $19				inc 	codePtr+1
.14d8					_RELNoCarry:
.14d8					RUNNewLine:
.14d8	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14da	9a		txs				txs
.14db	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14dd	f0 52		beq $1531			beq 	Command_END
.14df	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e1	b1 18		lda ($18),y			lda 	(codePtr),y
.14e3	8d 26 06	sta $0626			sta 	ERRLine
.14e6	c8		iny				iny
.14e7	b1 18		lda ($18),y			lda 	(codePtr),y
.14e9	8d 27 06	sta $0627			sta 	ERRLine+1
.14ec	c8		iny				iny 								; offset into codePtr for start of line.
.14ed					RUNNewCommand:
.14ed	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14f0	ce 10 05	dec $0510			dec 	checkCounter
.14f3	d0 0a		bne $14ff			bne 	_RNCNoCheck
.14f5	5a		phy				phy 								; keyboard check.
.14f6	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14f9	7a		ply				ply
.14fa	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14fd	d0 1e		bne $151d			bne 	_RUNBreak
.14ff					_RNCNoCheck:
.14ff	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1501	10 1d		bpl $1520			bpl		_RUNNotToken 				; probably an identifier
.1503	c8		iny				iny 								; consume token
.1504	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1506	f0 e5		beq $14ed			beq 	RUNNewCommand
.1508	c9 a2		cmp #$a2			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.150a	b0 0e		bcs $151a			bcs 	_RUNSyntax
.150c	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150e	90 0a		bcc $151a			bcc 	_RUNSyntax
.1510	0a		asl a				asl 	a 							; double into X.
.1511	aa		tax				tax
.1512	20 17 15	jsr $1517			jsr 	_RUNDispatchMain			; call the main dispatcher
.1515	80 d6		bra $14ed			bra 	RUNNewCommand
.1517					_RUNDispatchMain:
.1517	7c 7c 1c	jmp ($1c7c,x)			jmp 	(VectorTable,x)
.151a					_RUNSyntax:
.151a	4c d2 25	jmp $25d2		jmp	ErrorV_syntax
.151d					_RUNBreak:
.151d	4c 5d 27	jmp $275d		jmp	ErrorV_break
.1520					_RUNNotToken:
.1520	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1522	90 f6		bcc $151a			bcc 	_RUNSyntax
.1524	20 bf 12	jsr $12bf			jsr 	CommandLET 					; assignment
.1527	80 c4		bra $14ed			bra 	RUNNewCommand 				; loop round.
.1529					Command_Shift_Handler:
.1529	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.152b	c8		iny				iny
.152c	0a		asl a				asl 	a 							; double into X
.152d	aa		tax				tax
.152e	7c 7c 1d	jmp ($1d7c,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1531					Command_END:
.1531	4c 07 29	jmp $2907			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1534					Command_STOP:
.1534	4c 76 26	jmp $2676		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1537					Command_Sys:
.1537	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; execution address
.153a	5a		phy				phy
.153b	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.153e	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1541	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.1544	20 49 15	jsr $1549			jsr 	_CSCallIFR0 				; call the code
.1547	7a		ply				ply
.1548	60		rts				rts
.1549					_CSCallIFR0:
.1549	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.154c					NoExec01:
.154c					NoExec02:
.154c					NoExec03:
.154c					NoExec04:
.154c					NoExec05:
.154c					NoExec06:
.154c					NoExec07:
.154c					NoExec08:
.154c	4c d2 25	jmp $25d2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.154f					EXPBinAdd:
.154f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1551	30 6f		bmi $15c2			bmi 	EXPConcatenate
.1553	a2 0c		ldx #$0c			ldx 	#IFR1
.1555	4c 1d 2b	jmp $2b1d			jmp 	IFloatAdd
.1558					EXPBinSub:
.1558	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.155a	30 3f		bmi $159b			bmi 	EXPTypeError
.155c	a2 0c		ldx #$0c			ldx 	#IFR1
.155e	4c 16 2b	jmp $2b16			jmp 	IFloatSubtract
.1561					EXPBinMul:
.1561	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1563	30 36		bmi $159b			bmi 	EXPTypeError
.1565	a2 0c		ldx #$0c			ldx 	#IFR1
.1567	4c c7 2b	jmp $2bc7			jmp 	IFloatMultiply
.156a					EXPBinFDiv:
.156a	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.156c	30 2d		bmi $159b			bmi 	EXPTypeError
.156e	a2 0c		ldx #$0c			ldx 	#IFR1
.1570	20 49 2e	jsr $2e49			jsr 	IFloatDivideFloat
.1573	b0 0f		bcs $1584			bcs 	EXPDZero
.1575	60		rts				rts
.1576					EXPBinIDiv:
.1576	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1578	30 21		bmi $159b			bmi 	EXPTypeError
.157a	a2 0c		ldx #$0c			ldx 	#IFR1
.157c	20 49 2e	jsr $2e49			jsr 	IFloatDivideFloat
.157f	b0 03		bcs $1584			bcs 	EXPDZero
.1581	4c 26 2e	jmp $2e26			jmp 	IFloatIntegerR0
.1584					EXPDZero:
.1584	4c 4b 26	jmp $264b		jmp	ErrorV_divzero
.1587					EXPBinIMod:
.1587	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1589	30 10		bmi $159b			bmi 	EXPTypeError
.158b	a2 0c		ldx #$0c			ldx 	#IFR1
.158d	5a		phy				phy
.158e	20 5c 2d	jsr $2d5c			jsr 	IFPreProcessBitwise 		; set up everything.
.1591	d0 05		bne $1598			bne 	EXPDRange
.1593	20 95 2c	jsr $2c95			jsr 	IFloatModulusInteger
.1596	7a		ply				ply
.1597	60		rts				rts
.1598					EXPDRange:
.1598	4c e3 25	jmp $25e3		jmp	ErrorV_range
.159b					EXPTypeError:
.159b	4c 02 26	jmp $2602		jmp	ErrorV_type
.159e					EXPBinAnd:
.159e	24 0b		bit $0b				bit 	IFR0+IExp
.15a0	30 f9		bmi $159b			bmi 	EXPTypeError
.15a2	a2 0c		ldx #$0c			ldx 	#IFR1
.15a4	20 17 2d	jsr $2d17			jsr 	IFloatBitwiseAnd
.15a7	b0 ef		bcs $1598			bcs 	EXPDRange
.15a9	60		rts				rts
.15aa					EXPBinOr:
.15aa	24 0b		bit $0b				bit 	IFR0+IExp
.15ac	30 ed		bmi $159b			bmi 	EXPTypeError
.15ae	a2 0c		ldx #$0c			ldx 	#IFR1
.15b0	20 2e 2d	jsr $2d2e			jsr 	IFloatBitwiseOr
.15b3	b0 e3		bcs $1598			bcs 	EXPDRange
.15b5	60		rts				rts
.15b6					EXPBinXor:
.15b6	24 0b		bit $0b				bit 	IFR0+IExp
.15b8	30 e1		bmi $159b			bmi 	EXPTypeError
.15ba	a2 0c		ldx #$0c			ldx 	#IFR1
.15bc	20 45 2d	jsr $2d45			jsr 	IFloatBitwiseXor
.15bf	b0 d7		bcs $1598			bcs 	EXPDRange
.15c1	60		rts				rts
.15c2					EXPConcatenate:
.15c2	18		clc				clc
.15c3	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c5	72 0c		adc ($0c)			adc 	(IFR1)
.15c7	b0 2d		bcs $15f6			bcs 	_EXPCError 					; far too long.
.15c9	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15cb	da		phx				phx
.15cc	a6 09		ldx $09				ldx 	IFR0+1
.15ce	da		phx				phx
.15cf	20 7d 28	jsr $287d			jsr 	StringTempAllocate 			; allocate string, set up return
.15d2	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d4	a5 0c		lda $0c				lda 	IFR1
.15d6	20 df 15	jsr $15df			jsr 	_EXPCCopyXA
.15d9	fa		plx				plx 								; copy second string
.15da	68		pla				pla
.15db	20 df 15	jsr $15df			jsr 	_EXPCCopyXA
.15de	60		rts				rts
.15df					_EXPCCopyXA:
.15df	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e1	85 22		sta $22				sta 	zTemp0
.15e3	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15e5	f0 0e		beq $15f5			beq 	_EXPCCExit 					; nothing in string
.15e7	aa		tax				tax 								; count
.15e8	5a		phy				phy 								; start position
.15e9	a0 01		ldy #$01			ldy 	#1
.15eb					_EXPCCLoop:
.15eb	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15ed	20 b2 28	jsr $28b2			jsr 	StringTempWrite
.15f0	c8		iny				iny
.15f1	ca		dex				dex
.15f2	d0 f7		bne $15eb			bne 	_EXPCCLoop
.15f4	7a		ply				ply
.15f5					_EXPCCExit:
.15f5	60		rts				rts
.15f6					_EXPCError:
.15f6	4c ef 26	jmp $26ef		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f9					EXPReturnTrue:
.15f9	a2 08		ldx #$08			ldx 	#IFR0
.15fb	a9 01		lda #$01			lda 	#1
.15fd	20 27 31	jsr $3127			jsr 	IFloatSetByte
.1600	20 30 31	jsr $3130			jsr 	IFloatNegate
.1603	60		rts				rts
.1604					EXPReturnFalse:
.1604	a2 08		ldx #$08			ldx 	#IFR0
.1606	4c 25 31	jmp $3125			jmp 	IFloatSetZero
.1609					EXPCompareEqual:
.1609	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.160c	c9 00		cmp #$00			cmp 	#0
.160e	f0 e9		beq $15f9			beq 	EXPReturnTrue
.1610	80 f2		bra $1604			bra 	EXPReturnFalse
.1612					EXPCompareLess:
.1612	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1615	c9 ff		cmp #$ff			cmp 	#$FF
.1617	f0 e0		beq $15f9			beq 	EXPReturnTrue
.1619	80 e9		bra $1604			bra 	EXPReturnFalse
.161b					EXPCompareGreater:
.161b	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.161e	c9 01		cmp #$01			cmp 	#1
.1620	f0 d7		beq $15f9			beq 	EXPReturnTrue
.1622	80 e0		bra $1604			bra 	EXPReturnFalse
.1624					EXPCompareNotEqual:
.1624	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1627	c9 00		cmp #$00			cmp 	#0
.1629	d0 ce		bne $15f9			bne 	EXPReturnTrue
.162b	80 d7		bra $1604			bra 	EXPReturnFalse
.162d					EXPCompareLessEqual:
.162d	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1630	c9 01		cmp #$01			cmp 	#1
.1632	d0 c5		bne $15f9			bne 	EXPReturnTrue
.1634	80 ce		bra $1604			bra 	EXPReturnFalse
.1636					EXPCompareGreaterEqual:
.1636	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1639	c9 ff		cmp #$ff			cmp 	#$FF
.163b	d0 bc		bne $15f9			bne 	EXPReturnTrue
.163d	80 c5		bra $1604			bra 	EXPReturnFalse
.163f					EXPCompareBaseCode:
.163f	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1641	30 10		bmi $1653			bmi 	_EXCBCString
.1643	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1645	20 f4 2d	jsr $2df4			jsr 	IFloatCompare
.1648	a5 08		lda $08				lda 	IFR0+IM0
.164a	f0 06		beq $1652			beq 	_EXCBCExit 					; return 0 if zero
.164c	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.164e	50 02		bvc $1652			bvc 	_EXCBCExit
.1650	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1652					_EXCBCExit:
.1652	60		rts				rts
.1653					_EXCBCString:
.1653	5a		phy				phy
.1654	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1656	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1658	90 02		bcc $165c			bcc 	_EXCBCSmaller
.165a	b2 0c		lda ($0c)			lda 	(IFR1)
.165c					_EXCBCSmaller:
.165c	aa		tax				tax
.165d	f0 0d		beq $166c			beq 	_EXCBCMatches 				; if zero common length matches
.165f	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1661					_EXCBCCheckSmallerMatches:
.1661	c8		iny				iny 								; compare directly as far as common length
.1662	38		sec				sec
.1663	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1665	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1667	d0 08		bne $1671			bne 	_EXCBCExit2
.1669	ca		dex				dex
.166a	d0 f5		bne $1661			bne 	_EXCBCCheckSmallerMatches
.166c					_EXCBCMatches:
.166c	38		sec				sec
.166d	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.166f	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1671					_EXCBCExit2:
.1671	7a		ply				ply
.1672	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1674	f0 04		beq $167a			beq 	_EXCBCReturn
.1676	30 03		bmi $167b			bmi 	_EXCBCFF 					; return $FF if <
.1678	a9 01		lda #$01			lda 	#1 							; return 1 if >
.167a					_EXCBCReturn:
.167a	60		rts				rts
.167b					_EXCBCFF:
.167b	a9 ff		lda #$ff			lda 	#$FF
.167d	60		rts				rts
.167e					_EXCBCRange:
.167e	4c e3 25	jmp $25e3		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1681					EXPBinLeft:
.1681	a9 ff		lda #$ff			lda 	#$FF
.1683	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1686	4c 8c 16	jmp $168c			jmp 	EXPShiftCommon
.1689					EXPBinRight:
.1689	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.168c					EXPShiftCommon:
.168c	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.168e	05 0f		ora $0f				ora 	IFR1+IExp
.1690	29 7f		and #$7f			and 	#$7F
.1692	d0 35		bne $16c9			bne 	_EXPSRange
.1694	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1696	29 e0		and #$e0			and 	#$E0
.1698	05 09		ora $09				ora 	IFR0+IM1
.169a	05 0a		ora $0a				ora 	IFR0+IM2
.169c	d0 25		bne $16c3			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.169e	5a		phy				phy
.169f	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a1	29 1f		and #$1f			and 	#$1F
.16a3	f0 17		beq $16bc			beq 	_EXPSExit 					; exit if zero
.16a5	a8		tay				tay
.16a6					_EXPSLoop:
.16a6	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16a8	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16ab	30 05		bmi $16b2			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16ad	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.16b0	80 07		bra $16b9			bra 	_EXPSContinue
.16b2					_EXPSShiftLeft:
.16b2	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.16b5	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16b7	30 10		bmi $16c9			bmi 	_EXPSRange
.16b9					_EXPSContinue:
.16b9	88		dey				dey 								; do it Y times
.16ba	d0 ea		bne $16a6			bne 	_EXPSLoop
.16bc					_EXPSExit:
.16bc	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16be	20 b6 30	jsr $30b6			jsr 	IFloatCopyFromRegister
.16c1	7a		ply				ply
.16c2	60		rts				rts
.16c3					_EXPSShiftZero:
.16c3	a2 08		ldx #$08			ldx 	#IFR0
.16c5	20 25 31	jsr $3125			jsr 	IFloatSetZero
.16c8	60		rts				rts
.16c9					_EXPSRange:
.16c9	4c e3 25	jmp $25e3		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16cc					EXPEvaluateExpression:
.16cc	a9 00		lda #$00			lda 	#0 							; current precedence
.16ce					EXPEvaluateExpressionPrecedenceA:
.16ce	48		pha				pha
.16cf	20 49 17	jsr $1749			jsr 	EXPTermValueR0				; do first term.
.16d2					_EELoop:
.16d2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d4	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d6	90 31		bcc $1709			bcc 	_EEExit
.16d8	aa		tax				tax 								; access the precedence of the operator.
.16d9	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16da	dd a7 19	cmp $19a7,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16dd	b0 2b		bcs $170a			bcs 	_EEExit2
.16df	48		pha				pha 								; save current precedence.
.16e0	da		phx				phx 								; save operator
.16e1	c8		iny				iny 								; consume operator
.16e2	da		phx				phx
.16e3	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e5	20 74 30	jsr $3074			jsr 	IFloatPushRx
.16e8	fa		plx				plx
.16e9	bd a7 19	lda $19a7,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16ec	20 ce 16	jsr $16ce			jsr 	EXPEvaluateExpressionPrecedenceA
.16ef	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f1	20 95 30	jsr $3095			jsr 	IFloatPullRx
.16f4	fa		plx				plx 								; operator
.16f5	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f7	45 0f		eor $0f				eor 	IFR1+IExp
.16f9	30 08		bmi $1703			bmi 	_EEType
.16fb					_EETypeOkay:
.16fb	8a		txa				txa
.16fc	0a		asl a				asl 	a 							; double -> X
.16fd	aa		tax				tax
.16fe	20 06 17	jsr $1706			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1701	80 cf		bra $16d2			bra 	_EELoop
.1703					_EEType:
.1703	4c 02 26	jmp $2602		jmp	ErrorV_type
.1706					_EECallBinary:
.1706	7c 7c 1c	jmp ($1c7c,x)			jmp 	(VectorTable,x)
.1709					_EEExit:
.1709	68		pla				pla 								; throw precedence
.170a					_EEExit2:
.170a	18		clc				clc
.170b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.170c					EXPEvalNumber:
.170c	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; get a value
.170f	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1711	30 01		bmi $1714			bmi 	EVUType
.1713	60		rts				rts
.1714					EVUType:
.1714	4c 02 26	jmp $2602		jmp	ErrorV_type
.1717					EXPEvalInteger:
.1717	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.171a	20 26 2e	jsr $2e26			jsr 	IFloatIntegerR0
.171d	60		rts				rts
.171e					EXPEvalInteger16:
.171e	20 17 17	jsr $1717			jsr 	EXPEvalInteger 				; get integer
.1721	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1723	d0 21		bne $1746			bne 	EVURange
.1725	a6 09		ldx $09				ldx 	IFR0+IM1
.1727	a5 08		lda $08				lda 	IFR0+IM0
.1729	60		rts				rts
.172a					EXPEvalInteger8:
.172a	20 17 17	jsr $1717			jsr 	EXPEvalInteger 				; get integer
.172d	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.172f	05 09		ora $09				ora 	IFR0+IM1
.1731	d0 13		bne $1746			bne 	EVURange
.1733	a5 08		lda $08				lda 	IFR0+IM0
.1735	60		rts				rts
.1736					EXPEvalString:
.1736	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; get value
.1739	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.173b	10 d7		bpl $1714			bpl 	EVUType
.173d	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.173f	86 23		stx $23				stx 	zTemp0+1
.1741	a5 08		lda $08				lda 	IFR0+IM0
.1743	85 22		sta $22				sta 	zTemp0
.1745	60		rts				rts
.1746					EVURange:
.1746	4c e3 25	jmp $25e3		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1749					EXPTermValueR0:
.1749	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get term
.174c	90 45		bcc $1793			bcc 	_ETVNotReference 			; exit if value.
.174e	5a		phy				phy
.174f	a0 03		ldy #$03			ldy 	#3 							; get type
.1751	b1 08		lda ($08),y			lda 	(IFR0),y
.1753	30 14		bmi $1769			bmi 	_ETVDereferenceString
.1755	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1757	88		dey				dey 								; get byte 2
.1758	b1 08		lda ($08),y			lda 	(IFR0),y
.175a	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.175c	88		dey				dey 								; get byte 1
.175d	b1 08		lda ($08),y			lda 	(IFR0),y
.175f	aa		tax				tax 								; save in X so we can overwrite it
.1760	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1762	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1764	85 08		sta $08				sta 	IFR0+IM0
.1766	7a		ply				ply
.1767	18		clc				clc
.1768	60		rts				rts
.1769					_ETVDereferenceString:
.1769	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176b	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.176d	12 08		ora ($08)			ora 	(IFR0)
.176f	f0 11		beq $1782			beq 	_ETVNull 					; if so, return a fake NULL.
.1771	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1773	aa		tax				tax
.1774	b2 08		lda ($08)			lda 	(IFR0)
.1776	18		clc				clc 								; add two so points to actual string.
.1777	69 02		adc #$02			adc 	#2
.1779	90 01		bcc $177c			bcc 	_EVDSNoCarry
.177b	e8		inx				inx
.177c					_EVDSNoCarry:
.177c	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.177e	85 08		sta $08				sta 	IFR0
.1780	80 08		bra $178a			bra 	_ETVFillExit 				; tidy up and exit.
.1782					_ETVNull:
.1782	a9 92		lda #$92			lda 	#_EVTNString & $FF
.1784	85 08		sta $08				sta 	IFR0+IM0
.1786	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1788	85 09		sta $09				sta 	IFR0+IM1
.178a					_ETVFillExit:
.178a	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.178c	a9 80		lda #$80			lda 	#$80 						; set type to string.
.178e	85 0b		sta $0b				sta 	IFR0+IExp
.1790	7a		ply				ply
.1791	60		rts				rts
.1792					_EVTNString:
>1792	00						.byte 	0
.1793					_ETVNotReference:
.1793	60		rts				rts
.1794					EXPTermR0:
.1794	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1796	30 10		bmi $17a8			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1798	c8		iny				iny 								; consume element
.1799	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179b	b0 08		bcs $17a5			bcs 	_ETMIdentifier
.179d	20 d3 17	jsr $17d3			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.17a0	20 06 18	jsr $1806			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a3	18		clc				clc 								; return value ok
.17a4	60		rts				rts
.17a5					_ETMIdentifier:
.17a5	4c be 2a	jmp $2abe			jmp 	VARCheckSimple 				; check variables, seperate module.
.17a8					_ETMIsUnaryOrMinus:
.17a8	c8		iny				iny 								; consume element
.17a9	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17ab	d0 0e		bne $17bb			bne 	_ETMCheckUnary
.17ad	20 49 17	jsr $1749			jsr 	EXPTermValueR0 				; get a term to negate
.17b0	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b2	20 30 31	jsr $3130			jsr 	IFloatNegate
.17b5	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17b7	30 17		bmi $17d0			bmi 	_ETMUnaryType				; if so error.
.17b9	18		clc				clc
.17ba	60		rts				rts
.17bb					_ETMCheckUnary:
.17bb	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17bd	90 0e		bcc $17cd			bcc 	_ETMUnarySyntax
.17bf	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c1	b0 0a		bcs $17cd			bcs 	_ETMUnarySyntax
.17c3	0a		asl a				asl 	a 							; make it into an index => X
.17c4	aa		tax				tax
.17c5	20 ca 17	jsr $17ca			jsr 	_ETMCallUnaryFunction 		; call the function
.17c8	18		clc				clc 								; and return it.
.17c9	60		rts				rts
.17ca					_ETMCallUnaryFunction:
.17ca	7c 7c 1c	jmp ($1c7c,x)			jmp 	(VectorTable,x)
.17cd					_ETMUnarySyntax:
.17cd	4c d2 25	jmp $25d2		jmp	ErrorV_syntax
.17d0					_ETMUnaryType:
.17d0	4c 02 26	jmp $2602		jmp	ErrorV_type
.17d3					EXPExtractTokenisedInteger:
.17d3	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17d5	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17d7	64 09		stz $09				stz 	IFR0+IM1
.17d9	64 0a		stz $0a				stz 	IFR0+IM2
.17db					_ETMConstant:
.17db	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17dd	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17df	b0 24		bcs $1805			bcs 	_ETMCExit 					; no, exit.
.17e1	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17e3	a5 09		lda $09				lda 	IFR0+IM1
.17e5	85 0a		sta $0a				sta 	IFR0+IM2
.17e7	a5 08		lda $08				lda 	IFR0+IM0
.17e9	85 09		sta $09				sta 	IFR0+IM1
.17eb	64 08		stz $08				stz 	IFR0+IM0
.17ed	8a		txa				txa
.17ee	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17ef	66 0a		ror $0a				ror 	IFR0+IM2
.17f1	66 09		ror $09				ror 	IFR0+IM1
.17f3	66 08		ror $08				ror 	IFR0+IM0
.17f5	4a		lsr a				lsr 	a
.17f6	66 0a		ror $0a				ror 	IFR0+IM2
.17f8	66 09		ror $09				ror 	IFR0+IM1
.17fa	66 08		ror $08				ror 	IFR0+IM0
.17fc	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17fe	11 18		ora ($18),y			ora 	(codePtr),y
.1800	85 08		sta $08				sta 	IFR0+IM0
.1802	c8		iny				iny 								; consume, loop back
.1803	80 d6		bra $17db			bra 	_ETMConstant
.1805					_ETMCExit:
.1805	60		rts				rts
.1806					EXPCheckDecimalFollows:
.1806	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1808	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.180a	d0 19		bne $1825			bne 	_ETMCDExit
.180c	c8		iny				iny 								; consume token.
.180d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.180f	5a		phy				phy									; save current position
.1810	48		pha				pha 								; save count of chars.
.1811	38		sec				sec 								; address into YX : y + codePtr+1
.1812	98		tya				tya
.1813	65 18		adc $18				adc 	codePtr
.1815	aa		tax				tax
.1816	a5 19		lda $19				lda 	codePtr+1
.1818	69 00		adc #$00			adc 	#0
.181a	a8		tay				tay
.181b	68		pla				pla 								; get count.
.181c	20 c9 2f	jsr $2fc9			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.181f	7a		ply				ply 								; go to next token.
.1820	98		tya				tya
.1821	38		sec				sec
.1822	71 18		adc ($18),y			adc 	(codePtr),y
.1824	a8		tay				tay
.1825					_ETMCDExit:
.1825	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1826					EXPUnaryAbs:
.1826	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.1829	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.182c	20 68 2d	jsr $2d68			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.182f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1830					EXPUnaryAsc:
.1830	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.1833	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.1836	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1838	f0 06		beq $1840			beq 	_EXAZero 						; if so return 0
.183a	5a		phy				phy 									; otherwise get first character
.183b	a0 01		ldy #$01			ldy 	#1
.183d	b1 22		lda ($22),y			lda 	(zTemp0),y
.183f	7a		ply				ply
.1840					_EXAZero:
.1840	a2 08		ldx #$08			ldx 	#IFR0
.1842	20 27 31	jsr $3127			jsr 	IFloatSetByte
.1845	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1846					EXPUnaryChr:
.1846	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; expr
.1849	48		pha				pha 									; push on stack
.184a	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.184d	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.184f	20 7d 28	jsr $287d			jsr 	StringTempAllocate
.1852	68		pla				pla 									; get value back
.1853	20 b2 28	jsr $28b2			jsr 	StringTempWrite 				; write to string.
.1856	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1857					EXPUnaryDec:
.1857	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.185a	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.185d	5a		phy				phy 									; save position.
.185e	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1860	20 25 31	jsr $3125			jsr 	IFloatSetZero
.1863	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1865	f0 3b		beq $18a2			beq 	_EUDError 						; empty string is not legit.
.1867	aa		tax				tax 									; count in X.
.1868	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.186a					_EUDLoop:
.186a	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.186c	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.186e	90 02		bcc $1872			bcc 	_EUDNoCase
.1870	e9 20		sbc #$20			sbc 	#$20
.1872					_EUDNoCase:
.1872	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1874	90 2c		bcc $18a2			bcc 	_EUDError
.1876	c9 3a		cmp #$3a			cmp 	#'9'+1
.1878	90 0a		bcc $1884			bcc 	_EUDOkay
.187a	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.187c	90 24		bcc $18a2			bcc 	_EUDError
.187e	c9 47		cmp #$47			cmp 	#'F'+1
.1880	b0 20		bcs $18a2			bcs 	_EUDError
.1882	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1884					_EUDOkay:
.1884	29 0f		and #$0f			and 	#15 							; make constant
.1886	da		phx				phx
.1887	48		pha				pha
.1888	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.188a	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.188d	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1890	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1893	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1896	68		pla				pla 									; pop constant and OR in
.1897	fa		plx				plx
.1898	05 08		ora $08				ora 	IFR0+IM0
.189a	85 08		sta $08				sta 	IFR0+IM0
.189c	c8		iny				iny 									; next char
.189d	ca		dex				dex 									; done all characters ?
.189e	d0 ca		bne $186a			bne 	_EUDLoop
.18a0	7a		ply				ply
.18a1	60		rts				rts
.18a2					_EUDError:
.18a2	4c f4 25	jmp $25f4		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18a5					EXPUnaryInlineDec:
.18a5	4c d2 25	jmp $25d2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18a8					EXPUnaryPeek:
.18a8	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 				; number to R0
.18ab	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.18ae	b2 08		lda ($08)			lda 	(IFR0)
.18b0	a2 08		ldx #$08			ldx 	#IFR0
.18b2	20 27 31	jsr $3127			jsr 	IFloatSetByte
.18b5	60		rts				rts
.18b6					EXPUnaryDeek:
.18b6	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 				; number to R0
.18b9	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.18bc	5a		phy				phy
.18bd	a0 01		ldy #$01			ldy 	#1
.18bf	b1 08		lda ($08),y			lda 	(IFR0),y
.18c1	7a		ply				ply
.18c2	48		pha				pha
.18c3	b2 08		lda ($08)			lda 	(IFR0)
.18c5	a2 08		ldx #$08			ldx 	#IFR0
.18c7	20 27 31	jsr $3127			jsr 	IFloatSetByte
.18ca	68		pla				pla
.18cb	85 09		sta $09				sta 	IFR0+IM1
.18cd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18ce					EXPUnaryNull:
.18ce	20 49 17	jsr $1749			jsr 	EXPTermValueR0
.18d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d2					EXPUnaryFrac:
.18d2	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.18d5	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.18d8	20 d0 2d	jsr $2dd0			jsr 	IFloatFractionalR0 				; get fractional bit.
.18db	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18dc					EXPUnaryInkey:
.18dc	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.18df	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e1	20 7d 28	jsr $287d			jsr 	StringTempAllocate
.18e4	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18e7	b0 06		bcs $18ef			bcs 	_EUIExit
.18e9	20 eb ff	jsr $ffeb			jsr 	OSReadKeyboard 					; otherwise get it.
.18ec	20 b2 28	jsr $28b2			jsr 	StringTempWrite
.18ef					_EUIExit:
.18ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18f0					EXPUnaryInt:
.18f0	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.18f3	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; check for )
.18f6	20 26 2e	jsr $2e26			jsr 	IFloatIntegerR0 				; force to integer.
.18f9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18fa					EXPUnaryLen:
.18fa	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.18fd	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.1900	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.1902	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1904	20 27 31	jsr $3127			jsr 	IFloatSetByte
.1907	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1908					EXPUnaryParenthesis:
.1908	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.190b	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.190e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.190f					EXPUnaryRnd:
.190f	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; number to R0
.1912	20 87 27	jsr $2787			jsr 	ERRCheckRParen 				; )
.1915	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1917	20 2e 19	jsr $192e			jsr 	EXPLoadInRandom
.191a	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.191c	85 0b		sta $0b				sta 	IFR0+IExp
.191e	60		rts				rts
.191f					ExpUnaryRand:
.191f	20 17 17	jsr $1717			jsr 	EXPEvalInteger 				; integer to R0
.1922	20 87 27	jsr $2787			jsr 	ERRCheckRParen 				; )
.1925	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1927	20 2e 19	jsr $192e			jsr 	EXPLoadInRandom
.192a	20 95 2c	jsr $2c95			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.192d	60		rts				rts
.192e					EXPLoadInRandom:
.192e	20 25 31	jsr $3125			jsr 	IFloatSetZero 				; zero it
.1931	20 43 19	jsr $1943			jsr 	EXPRandom32 				; do a 23 bit number.
.1934	95 00		sta $00,x			sta 	IM0,x
.1936	20 43 19	jsr $1943			jsr 	EXPRandom32
.1939	95 01		sta $01,x			sta 	IM1,x
.193b	20 43 19	jsr $1943			jsr 	EXPRandom32
.193e	29 7f		and #$7f			and 	#$7F
.1940	95 02		sta $02,x			sta 	IM2,x
.1942	60		rts				rts
.1943					EXPRandom32:
.1943	5a		phy				phy
.1944	a0 08		ldy #$08			ldy 	#8
.1946	ad 12 05	lda $0512			lda 	EXPSeed+0
.1949	0d 13 05	ora $0513			ora 	EXPSeed+1
.194c	0d 14 05	ora $0514			ora 	EXPSeed+2
.194f	0d 15 05	ora $0515			ora 	EXPSeed+3
.1952	d0 08		bne $195c			bne 	_EXPRNoReset
.1954	ee 12 05	inc $0512			inc 	EXPSeed+0
.1957	a0 10		ldy #$10			ldy 	#16
.1959	8c 15 05	sty $0515			sty 	EXPSeed+3
.195c					_EXPRNoReset:
.195c	ad 12 05	lda $0512			lda 	EXPSeed+0
.195f					_EXPRLoop:
.195f	0a		asl a				asl		a
.1960	2e 13 05	rol $0513			rol 	EXPSeed+1
.1963	2e 14 05	rol $0514			rol 	EXPSeed+2
.1966	2e 15 05	rol $0515			rol 	EXPSeed+3
.1969	90 02		bcc $196d			bcc 	_EXPRNoEOR
.196b	49 c5		eor #$c5			eor 	#$C5
.196d					_EXPRNoEOR:
.196d	88		dey				dey
.196e	d0 ef		bne $195f			bne 	_EXPRLoop
.1970	8d 12 05	sta $0512			sta 	EXPSeed+0
.1973	7a		ply				ply
.1974	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1975					EXPUnarySgn:
.1975	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.1978	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.197b	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.197d	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister
.1980	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1982	20 25 31	jsr $3125			jsr 	IFloatSetZero
.1985	a2 0c		ldx #$0c			ldx 	#IFR1
.1987	20 f4 2d	jsr $2df4			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.198a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.198b					EXPUnarySqr:
.198b	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.198e	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.1991	20 70 2d	jsr $2d70			jsr 	IFloatSquareRootR0 				; square root.
.1994	b0 01		bcs $1997			bcs 	_EUSValue 						; error check.
.1996	60		rts				rts
.1997					_EUSValue:
.1997	4c e3 25	jmp $25e3		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.199a					EXPUnaryHex:
.199a	20 17 17	jsr $1717			jsr 	EXPEvalInteger 					; expr
.199d	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.19a0	5a		phy				phy
.19a1	a9 10		lda #$10			lda 	#16
.19a3	20 c7 2e	jsr $2ec7			jsr 	IFloatIntegerToStringR0
.19a6	80 0a		bra $19b2			bra 	EUSMain
.19a8					EXPUnaryStr:
.19a8	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; expr
.19ab	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.19ae	5a		phy				phy
.19af	20 22 2f	jsr $2f22			jsr 	IFloatFloatToStringR0 			; convert to string
.19b2					EUSMain:
.19b2	b0 19		bcs $19cd			bcs 	_EUSError
.19b4	86 22		stx $22				stx 	zTemp0 							; save string address
.19b6	84 23		sty $23				sty 	zTemp0+1
.19b8	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19ba	20 7d 28	jsr $287d			jsr 	StringTempAllocate
.19bd	b2 22		lda ($22)			lda 	(zTemp0) 						; get count
.19bf	aa		tax				tax 									; count in X
.19c0	a0 01		ldy #$01			ldy 	#1
.19c2					_EUSCopy:
.19c2	b1 22		lda ($22),y			lda 	(zTemp0),y
.19c4	c8		iny				iny
.19c5	20 b2 28	jsr $28b2			jsr 	StringTempWrite
.19c8	ca		dex				dex
.19c9	d0 f7		bne $19c2			bne	 	_EUSCopy
.19cb	7a		ply				ply
.19cc	60		rts				rts
.19cd					_EUSError:
.19cd	4c e3 25	jmp $25e3		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19d0					EXPUnaryInlineString:
.19d0	18		clc				clc 								; physical address -> IM0,1
.19d1	98		tya				tya 								; put the actual address in IM0
.19d2	65 18		adc $18				adc 	codePtr
.19d4	85 08		sta $08				sta 	IFR0+IM0
.19d6	a5 19		lda $19				lda 	codePtr+1
.19d8	69 00		adc #$00			adc 	#0
.19da	85 09		sta $09				sta 	IFR0+IM1
.19dc	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19de	a9 80		lda #$80			lda 	#$80
.19e0	85 0b		sta $0b				sta 	IFR0+IExp
.19e2	98		tya				tya	 								; skip over it.
.19e3	38		sec				sec
.19e4	71 18		adc ($18),y			adc 	(codePtr),y
.19e6	a8		tay				tay
.19e7	60		rts				rts
.19e8					_EXPUISRange:
.19e8	4c e3 25	jmp $25e3		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19eb					EXPUnaryLeft:
.19eb	20 31 1a	jsr $1a31			jsr 	EXPCommonStart 					; <string>,
.19ee	48		pha				pha 									; save string address on stack
.19ef	da		phx				phx
.19f0	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f2	48		pha				pha
.19f3	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters to do
.19f6	80 44		bra $1a3c			bra 	EXPSubstringCommon
.19f8					EXPUnaryRight:
.19f8	20 31 1a	jsr $1a31			jsr 	EXPCommonStart 					; <string>,
.19fb	48		pha				pha 									; save string address on stack
.19fc	da		phx				phx
.19fd	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19ff	48		pha				pha
.1a00	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters to do
.1a03	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1a05	68		pla				pla
.1a06	38		sec				sec
.1a07	e5 22		sbc $22				sbc 	zTemp0
.1a09	b0 02		bcs $1a0d			bcs 	_EUROffLeft
.1a0b	a9 00		lda #$00			lda 	#0
.1a0d					_EUROffLeft:
.1a0d	48		pha				pha 									; start pos
.1a0e	a9 ff		lda #$ff			lda 	#255
.1a10	80 2a		bra $1a3c			bra 	EXPSubstringCommon
.1a12					EXPUnaryMid:
.1a12	20 31 1a	jsr $1a31			jsr 	EXPCommonStart 					; <string>,
.1a15	48		pha				pha 									; save string address on stack
.1a16	da		phx				phx
.1a17	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters start
.1a1a	f0 12		beq $1a2e			beq 	_EUSError 						; 1 is left
.1a1c	3a		dec a				dec 	a 								; zero based.
.1a1d	48		pha				pha
.1a1e	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a20	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a22	f0 04		beq $1a28			beq 	_EUMLength 						; if so m is provided
.1a24	a9 ff		lda #$ff			lda 	#255 							; default m
.1a26	80 14		bra $1a3c			bra 	EXPSubstringCommon
.1a28					_EUMLength:
.1a28	c8		iny				iny 									; consume comma
.1a29	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters to do
.1a2c	80 0e		bra $1a3c			bra 	EXPSubstringCommon
.1a2e					_EUSError:
.1a2e	4c f4 25	jmp $25f4		jmp	ErrorV_value
.1a31					EXPCommonStart:
.1a31	20 36 17	jsr $1736			jsr 	EXPEvalString
.1a34	20 8f 27	jsr $278f			jsr 	ERRCheckComma
.1a37	a5 08		lda $08				lda 	IFR0+IM0
.1a39	a6 09		ldx $09				ldx 	IFR0+IM1
.1a3b	60		rts				rts
.1a3c					EXPSubstringCommon:
.1a3c	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a3e	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; check right bracket.
.1a41	68		pla				pla 									; start position
.1a42	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a44	fa		plx				plx 									; get string address to zTemp2.
.1a45	86 27		stx $27				stx 	zTemp2+1
.1a47	68		pla				pla
.1a48	85 26		sta $26				sta 	zTemp2
.1a4a	38		sec				sec 									; length - start is the max count of chars
.1a4b	b2 26		lda ($26)			lda 	(zTemp2)
.1a4d	e5 25		sbc $25				sbc 	zTemp1+1
.1a4f	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a51	b0 02		bcs $1a55			bcs 	_EXPSSNoTrim
.1a53	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a55					_EXPSSNoTrim:
.1a55	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a57	20 7d 28	jsr $287d			jsr 	StringTempAllocate 				; allocate memory for it.
.1a5a	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a5c	f0 15		beq $1a73			beq 	_EXPSSExit
.1a5e	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a60	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a62	b0 0f		bcs $1a73			bcs 	_EXPSSExit
.1a64	5a		phy				phy
.1a65	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a67	c8		iny				iny 									; +1 for the length byte
.1a68					_EXPSSCopy:
.1a68	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a6a	20 b2 28	jsr $28b2			jsr 	StringTempWrite
.1a6d	c8		iny				iny
.1a6e	c6 24		dec $24				dec 	zTemp1
.1a70	d0 f6		bne $1a68			bne 	_EXPSSCopy
.1a72	7a		ply				ply
.1a73					_EXPSSExit:
.1a73	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a74					EXPUnaryVal:
.1a74	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a77	20 87 27	jsr $2787			jsr 	ERRCheckRParen 					; )
.1a7a	20 7e 1a	jsr $1a7e			jsr 	VALConversionZTemp0
.1a7d	60		rts				rts
.1a7e					VALConversionZTemp0:
.1a7e	5a		phy				phy
.1a7f	18		clc				clc
.1a80	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a82	69 01		adc #$01			adc 	#1
.1a84	aa		tax				tax
.1a85	a5 23		lda $23				lda 	zTemp0+1
.1a87	69 00		adc #$00			adc 	#0
.1a89	a8		tay				tay
.1a8a	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a8c	20 89 2f	jsr $2f89			jsr 	IFloatStringToFloatR0 			; do conversion
.1a8f	b0 02		bcs $1a93			bcs 	_EUVError
.1a91	7a		ply				ply
.1a92	60		rts				rts
.1a93					_EUVError:
.1a93	4c f4 25	jmp $25f4		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a96					BinaryPrecedence:
>1a96	02					.byte	 2	; $ef =
>1a97	02					.byte	 2	; $f0 <>
>1a98	02					.byte	 2	; $f1 <=
>1a99	02					.byte	 2	; $f2 <
>1a9a	02					.byte	 2	; $f3 >=
>1a9b	02					.byte	 2	; $f4 >
>1a9c	01					.byte	 1	; $f5 XOR
>1a9d	01					.byte	 1	; $f6 OR
>1a9e	01					.byte	 1	; $f7 AND
>1a9f	04					.byte	 4	; $f8 DIV
>1aa0	04					.byte	 4	; $f9 MOD
>1aa1	04					.byte	 4	; $fa <<
>1aa2	04					.byte	 4	; $fb >>
>1aa3	04					.byte	 4	; $fc /
>1aa4	04					.byte	 4	; $fd *
>1aa5	03					.byte	 3	; $fe -
>1aa6	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1aa7					StructureOffsets:
>1aa7	01					.byte	1  	; $80 REPEAT
>1aa8	ff					.byte	255	; $81 UNTIL
>1aa9	01					.byte	1  	; $82 WHILE
>1aaa	ff					.byte	255	; $83 WEND
>1aab	01					.byte	1  	; $84 IF
>1aac	ff					.byte	255	; $85 ENDIF
>1aad	01					.byte	1  	; $86 DO
>1aae	ff					.byte	255	; $87 LOOP
>1aaf	01					.byte	1  	; $88 PROC
>1ab0	ff					.byte	255	; $89 ENDPROC
>1ab1	01					.byte	1  	; $8a FOR
>1ab2	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1ab3					StandardTokens:
>1ab3	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1aba	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ac0	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1ac6	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1acb	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ace	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1ad4	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ad7	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1adc	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ae1	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ae9	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1aed	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1af2	00					.byte	$00                                     	; $8c [[end]]
>1af3	00					.byte	$00                                     	; $8d [[shift]]
>1af4	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1af9	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1afe	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1b01	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1b06	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b0a	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b10	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b16	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b1b	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b1f	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b23	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b28	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b2a	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b2c	01 3a					.byte	$01,$3a                                 	; $9b :
>1b2e	01 27					.byte	$01,$27                                 	; $9c '
>1b30	01 29					.byte	$01,$29                                 	; $9d )
>1b32	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1b37	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1b3c	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1b41	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1b46	00					.byte	0											; $a2
>1b47	00					.byte	0											; $a3
>1b48	00					.byte	0											; $a4
>1b49	00					.byte	0											; $a5
>1b4a	00					.byte	0											; $a6
>1b4b	00					.byte	0											; $a7
>1b4c	00					.byte	0											; $a8
>1b4d	00					.byte	0											; $a9
>1b4e	00					.byte	0											; $aa
>1b4f	00					.byte	0											; $ab
>1b50	00					.byte	0											; $ac
>1b51	00					.byte	0											; $ad
>1b52	00					.byte	0											; $ae
>1b53	00					.byte	0											; $af
>1b54	00					.byte	0											; $b0
>1b55	00					.byte	0											; $b1
>1b56	00					.byte	0											; $b2
>1b57	00					.byte	0											; $b3
>1b58	00					.byte	0											; $b4
>1b59	00					.byte	0											; $b5
>1b5a	00					.byte	0											; $b6
>1b5b	00					.byte	0											; $b7
>1b5c	00					.byte	0											; $b8
>1b5d	00					.byte	0											; $b9
>1b5e	00					.byte	0											; $ba
>1b5f	00					.byte	0											; $bb
>1b60	00					.byte	0											; $bc
>1b61	00					.byte	0											; $bd
>1b62	00					.byte	0											; $be
>1b63	00					.byte	0											; $bf
>1b64	00					.byte	0											; $c0
>1b65	00					.byte	0											; $c1
>1b66	00					.byte	0											; $c2
>1b67	00					.byte	0											; $c3
>1b68	00					.byte	0											; $c4
>1b69	00					.byte	0											; $c5
>1b6a	00					.byte	0											; $c6
>1b6b	00					.byte	0											; $c7
>1b6c	00					.byte	0											; $c8
>1b6d	00					.byte	0											; $c9
>1b6e	00					.byte	0											; $ca
>1b6f	00					.byte	0											; $cb
>1b70	00					.byte	0											; $cc
>1b71	00					.byte	0											; $cd
>1b72	00					.byte	0											; $ce
>1b73	00					.byte	0											; $cf
>1b74	00					.byte	0											; $d0
>1b75	00					.byte	0											; $d1
>1b76	00					.byte	0											; $d2
>1b77	00					.byte	0											; $d3
>1b78	00					.byte	0											; $d4
>1b79	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b7f	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b85	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b8d	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b94	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b9a	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ba0	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ba5	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1baa	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1baf	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1bb4	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bb9	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bbf	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bc4	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bcc	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bd3	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bd8	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1bdd	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1be3	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1be8	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1bee	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1bf3	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1bf9	01 28					.byte	$01,$28                                 	; $eb (
>1bfb	01 24					.byte	$01,$24                                 	; $ec $
>1bfd	00					.byte	$00                                     	; $ed [[decimal]]
>1bfe	00					.byte	$00                                     	; $ee [[string]]
>1bff	01 3d					.byte	$01,$3d                                 	; $ef =
>1c01	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1c04	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1c07	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c09	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c0c	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c0e	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c12	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c15	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c19	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c1d	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c21	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c24	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c27	01 2f					.byte	$01,$2f                                 	; $fc /
>1c29	01 2a					.byte	$01,$2a                                 	; $fd *
>1c2b	01 2d					.byte	$01,$2d                                 	; $fe -
>1c2d	01 2b					.byte	$01,$2b                                 	; $ff +
>1c2f	ff					.byte	$FF
.1c30					AlternateTokens:
>1c30	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1c36	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1c3a	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1c3e	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1c43	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1c47	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1c4e	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1c53	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1c58	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1c5d	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1c63	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1c68	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1c6f	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1c77	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1c7b	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c7c					VectorTable:
>1c7c	c2 24					.word	Command_REPEAT           ; $80 REPEAT
>1c7e	cb 24					.word	Command_UNTIL            ; $81 UNTIL
>1c80	a5 25					.word	Command_WHILE            ; $82 WHILE
>1c82	c6 25					.word	Command_WEND             ; $83 WEND
>1c84	98 24					.word	IfCommand                ; $84 IF
>1c86	c1 24					.word	EndIf                    ; $85 ENDIF
>1c88	1b 23					.word	Command_DO               ; $86 DO
>1c8a	33 23					.word	Command_LOOP             ; $87 LOOP
>1c8c	4c 15					.word	NoExec08                 ; $88 PROC
>1c8e	0f 23					.word	Command_ENDPROC          ; $89 ENDPROC
>1c90	3c 23					.word	Command_FOR              ; $8a FOR
>1c92	c9 23					.word	Command_NEXT             ; $8b NEXT
>1c94	cd 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c96	29 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c98	ba 24					.word	ElseCode                 ; $8e ELSE
>1c9a	4c 15					.word	NoExec01                 ; $8f THEN
>1c9c	4c 15					.word	NoExec02                 ; $90 TO
>1c9e	4c 15					.word	NoExec03                 ; $91 STEP
>1ca0	bf 12					.word	CommandLET               ; $92 LET
>1ca2	14 12					.word	Command_Print            ; $93 PRINT
>1ca4	0d 12					.word	Command_Input            ; $94 INPUT
>1ca6	d3 22					.word	Command_CALL             ; $95 CALL
>1ca8	37 15					.word	Command_Sys              ; $96 SYS
>1caa	86 14					.word	Command_REM              ; $97 REM
>1cac	24 23					.word	Command_EXIT             ; $98 EXIT
>1cae	4c 15					.word	NoExec04                 ; $99 ,
>1cb0	4c 15					.word	NoExec05                 ; $9a ;
>1cb2	4c 15					.word	NoExec06                 ; $9b :
>1cb4	86 14					.word	Command_REM2             ; $9c '
>1cb6	4c 15					.word	NoExec07                 ; $9d )
>1cb8	b6 11					.word	Command_Poke             ; $9e POKE
>1cba	b3 11					.word	Command_Doke             ; $9f DOKE
>1cbc	12 14					.word	Command_READ             ; $a0 READ
>1cbe	79 14					.word	Command_DATA             ; $a1 DATA
>1cc0	04 29					.word	NotImplemented           ; $a2
>1cc2	04 29					.word	NotImplemented           ; $a3
>1cc4	04 29					.word	NotImplemented           ; $a4
>1cc6	04 29					.word	NotImplemented           ; $a5
>1cc8	04 29					.word	NotImplemented           ; $a6
>1cca	04 29					.word	NotImplemented           ; $a7
>1ccc	04 29					.word	NotImplemented           ; $a8
>1cce	04 29					.word	NotImplemented           ; $a9
>1cd0	04 29					.word	NotImplemented           ; $aa
>1cd2	04 29					.word	NotImplemented           ; $ab
>1cd4	04 29					.word	NotImplemented           ; $ac
>1cd6	04 29					.word	NotImplemented           ; $ad
>1cd8	04 29					.word	NotImplemented           ; $ae
>1cda	04 29					.word	NotImplemented           ; $af
>1cdc	04 29					.word	NotImplemented           ; $b0
>1cde	04 29					.word	NotImplemented           ; $b1
>1ce0	04 29					.word	NotImplemented           ; $b2
>1ce2	04 29					.word	NotImplemented           ; $b3
>1ce4	04 29					.word	NotImplemented           ; $b4
>1ce6	04 29					.word	NotImplemented           ; $b5
>1ce8	04 29					.word	NotImplemented           ; $b6
>1cea	04 29					.word	NotImplemented           ; $b7
>1cec	04 29					.word	NotImplemented           ; $b8
>1cee	04 29					.word	NotImplemented           ; $b9
>1cf0	04 29					.word	NotImplemented           ; $ba
>1cf2	04 29					.word	NotImplemented           ; $bb
>1cf4	04 29					.word	NotImplemented           ; $bc
>1cf6	04 29					.word	NotImplemented           ; $bd
>1cf8	04 29					.word	NotImplemented           ; $be
>1cfa	04 29					.word	NotImplemented           ; $bf
>1cfc	04 29					.word	NotImplemented           ; $c0
>1cfe	04 29					.word	NotImplemented           ; $c1
>1d00	04 29					.word	NotImplemented           ; $c2
>1d02	04 29					.word	NotImplemented           ; $c3
>1d04	04 29					.word	NotImplemented           ; $c4
>1d06	04 29					.word	NotImplemented           ; $c5
>1d08	04 29					.word	NotImplemented           ; $c6
>1d0a	04 29					.word	NotImplemented           ; $c7
>1d0c	04 29					.word	NotImplemented           ; $c8
>1d0e	04 29					.word	NotImplemented           ; $c9
>1d10	04 29					.word	NotImplemented           ; $ca
>1d12	04 29					.word	NotImplemented           ; $cb
>1d14	04 29					.word	NotImplemented           ; $cc
>1d16	04 29					.word	NotImplemented           ; $cd
>1d18	04 29					.word	NotImplemented           ; $ce
>1d1a	04 29					.word	NotImplemented           ; $cf
>1d1c	04 29					.word	NotImplemented           ; $d0
>1d1e	04 29					.word	NotImplemented           ; $d1
>1d20	04 29					.word	NotImplemented           ; $d2
>1d22	04 29					.word	NotImplemented           ; $d3
>1d24	04 29					.word	NotImplemented           ; $d4
>1d26	b6 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d28	a8 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d2a	f8 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d2c	eb 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d2e	12 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d30	a8 19					.word	EXPUnaryStr              ; $da STR$(
>1d32	74 1a					.word	EXPUnaryVal              ; $db VAL(
>1d34	75 19					.word	EXPUnarySgn              ; $dc SGN(
>1d36	26 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d38	fa 18					.word	EXPUnaryLen              ; $de LEN(
>1d3a	8b 19					.word	EXPUnarySqr              ; $df SQR(
>1d3c	46 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d3e	30 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d40	dc 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d42	04 29					.word	NotImplemented           ; $e3 EVENT(
>1d44	04 29					.word	NotImplemented           ; $e4 TIME
>1d46	f0 18					.word	EXPUnaryInt              ; $e5 INT(
>1d48	d2 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d4a	57 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d4c	9a 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d4e	0f 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d50	1f 19					.word	ExpUnaryRand             ; $ea RAND(
>1d52	08 19					.word	EXPUnaryParenthesis      ; $eb (
>1d54	ce 18					.word	EXPUnaryNull             ; $ec $
>1d56	a5 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d58	d0 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d5a	09 16					.word	EXPCompareEqual          ; $ef =
>1d5c	24 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d5e	2d 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d60	12 16					.word	EXPCompareLess           ; $f2 <
>1d62	36 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d64	1b 16					.word	EXPCompareGreater        ; $f4 >
>1d66	b6 15					.word	EXPBinXor                ; $f5 XOR
>1d68	aa 15					.word	EXPBinOr                 ; $f6 OR
>1d6a	9e 15					.word	EXPBinAnd                ; $f7 AND
>1d6c	76 15					.word	EXPBinIDiv               ; $f8 DIV
>1d6e	87 15					.word	EXPBinIMod               ; $f9 MOD
>1d70	81 16					.word	EXPBinLeft               ; $fa <<
>1d72	89 16					.word	EXPBinRight              ; $fb >>
>1d74	6a 15					.word	EXPBinFDiv               ; $fc /
>1d76	61 15					.word	EXPBinMul                ; $fd *
>1d78	58 15					.word	EXPBinSub                ; $fe -
>1d7a	4f 15					.word	EXPBinAdd                ; $ff +
.1d7c					AlternateVectorTable:
>1d7c	23 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1d7e	09 14					.word	Command_NEW              ; $8d81 NEW
>1d80	c1 14					.word	Command_RUN              ; $8d82 RUN
>1d82	34 15					.word	Command_STOP             ; $8d83 STOP
>1d84	31 15					.word	Command_END              ; $8d84 END
>1d86	15 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1d88	39 13					.word	Command_LIST             ; $8d86 LIST
>1d8a	04 29					.word	NotImplemented           ; $8d87 SAVE
>1d8c	04 29					.word	NotImplemented           ; $8d88 LOAD
>1d8e	7e 24					.word	Command_GOSUB            ; $8d89 GOSUB
>1d90	dd 11					.word	Command_GOTO             ; $8d8a GOTO
>1d92	8c 24					.word	Command_RETURN           ; $8d8b RETURN
>1d94	93 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1d96	97 10					.word	CommandDIM               ; $8d8d DIM

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d98					TOKDetokenise:
.1d98	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d9a	84 27		sty $27				sty 	zTemp2+1
.1d9c	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d9f					_TOKDLoop:
.1d9f	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get next
.1da2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1da4	f0 26		beq $1dcc			beq 	_TOKDExit
.1da6	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1da8	f0 1d		beq $1dc7			beq 	_TOKDDataItem
.1daa	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1dac	f0 19		beq $1dc7			beq 	_TOKDDataItem
.1dae	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1db0	10 05		bpl $1db7			bpl 	_TOKDNotToken
.1db2	20 98 1e	jsr $1e98			jsr 	TOKDToken 					; token to text.
.1db5	80 e8		bra $1d9f			bra 	_TOKDLoop
.1db7					_TOKDNotToken:
.1db7	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1db9	90 05		bcc $1dc0			bcc 	_TOKDNotIdentifier
.1dbb	20 09 1e	jsr $1e09			jsr 	TOKDIdentifier
.1dbe	80 df		bra $1d9f			bra 	_TOKDLoop
.1dc0					_TOKDNotIdentifier:
.1dc0	a0 0a		ldy #$0a			ldy 	#10
.1dc2	20 52 1e	jsr $1e52			jsr 	TOKDInteger
.1dc5	80 d8		bra $1d9f			bra 	_TOKDLoop
.1dc7					_TOKDDataItem:
.1dc7	20 e4 1d	jsr $1de4			jsr 	TOKDDataItem
.1dca	80 d3		bra $1d9f			bra 	_TOKDLoop
.1dcc					_TOKDExit:
.1dcc	18		clc				clc
.1dcd	60		rts				rts
.1dce	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1dd0	e6 26		inc $26				inc 	zTemp2
.1dd2	d0 02		bne $1dd6			bne 	_TKDGExit
.1dd4	e6 27		inc $27				inc 	zTemp2+1
.1dd6					_TKDGExit:
.1dd6	60		rts				rts
.1dd7					TOKDOutput:
.1dd7	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1dda	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1ddd					TOKSetDetokeniseOutput:
.1ddd	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1de0	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1de3	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1de4					TOKDDataItem:
.1de4	a8		tay				tay 								; type in Y
.1de5	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1de7	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1de9	f0 02		beq $1ded			beq 	_TOKDDIsString
.1deb	a9 2e		lda #$2e			lda 	#'.'
.1ded					_TOKDDIsString:
.1ded	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput 					; dump it
.1df0	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get length into X
.1df3	aa		tax				tax
.1df4					_TOKDDOutput:
.1df4	ca		dex				dex 								; are we complete
.1df5	30 08		bmi $1dff			bmi 	_TOKDDEnd
.1df7	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get character and output it
.1dfa	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1dfd	80 f5		bra $1df4			bra 	_TOKDDOutput
.1dff					_TOKDDEnd:
.1dff	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1e01	d0 05		bne $1e08			bne 	_TOKDDNotString
.1e03	a9 22		lda #$22			lda 	#'"'
.1e05	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e08					_TOKDDNotString:
.1e08	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1e09					TOKDIdentifier:
.1e09	a0 ff		ldy #$ff			ldy 	#$FF
.1e0b	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1e0e					_TOKDLoop:
.1e0e	a8		tay				tay 								; token in Y
.1e0f	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1e11	c0 64		cpy #$64			cpy 	#$64
.1e13	f0 11		beq $1e26			beq 	_TOKDIOutput
.1e15	a9 5f		lda #$5f			lda 	#'_'
.1e17	c0 65		cpy #$65			cpy 	#$65
.1e19	f0 0b		beq $1e26			beq 	_TOKDIOutput
.1e1b	98		tya				tya 								; handle a-z
.1e1c	18		clc				clc
.1e1d	69 21		adc #$21			adc	 	#$21
.1e1f	c0 5a		cpy #$5a			cpy 	#$5A
.1e21	90 03		bcc $1e26			bcc 	_TOKDIOutput
.1e23	38		sec				sec 								; handle 0-9
.1e24	e9 4b		sbc #$4b			sbc 	#$4B
.1e26					_TOKDIOutput:
.1e26	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1e29	10 08		bpl $1e33			bpl 	_TOKDINoSpacing
.1e2b	48		pha				pha
.1e2c	20 d5 1e	jsr $1ed5			jsr 	TOKDSpacing
.1e2f	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1e32	68		pla				pla
.1e33					_TOKDINoSpacing:
.1e33	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e36	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get next token
.1e39	c9 7c		cmp #$7c			cmp 	#$7C
.1e3b	90 d1		bcc $1e0e			bcc 	_TOKDLoop
.1e3d	f0 12		beq $1e51			beq 	_TOKDIExit 					; it's a number, no tail.
.1e3f	4a		lsr a				lsr 	a 							; string ?
.1e40	90 07		bcc $1e49			bcc 	_TOKDICheckArray
.1e42	48		pha				pha
.1e43	a9 24		lda #$24			lda 	#"$"
.1e45	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e48	68		pla				pla
.1e49					_TOKDICheckArray:
.1e49	4a		lsr a				lsr 	a 							; array ?
.1e4a	90 05		bcc $1e51			bcc 	_TOKDIExit
.1e4c	a9 28		lda #$28			lda 	#"("
.1e4e	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e51					_TOKDIExit:
.1e51	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e52					TOKDInteger:
.1e52	5a		phy				phy 								; save base
.1e53	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e55	20 27 31	jsr $3127			jsr 	IFloatSetByte
.1e58					_TOKDILoop:
.1e58	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e5a	c9 40		cmp #$40			cmp 	#$40
.1e5c	b0 1d		bcs $1e7b			bcs 	_TOKDIHaveInteger
.1e5e	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e60	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1e63	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1e66	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1e69	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1e6c	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1e6f	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.1e72	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; OR byte in.
.1e75	05 08		ora $08				ora 	IFR0+IM0
.1e77	85 08		sta $08				sta 	IFR0+IM0
.1e79	80 dd		bra $1e58			bra 	_TOKDILoop
.1e7b					_TOKDIHaveInteger:
.1e7b	7a		ply				ply 								; restore base
.1e7c	98		tya				tya 								; base in A
.1e7d	20 c7 2e	jsr $2ec7			jsr 	IFloatIntegerToStringR0
.1e80	86 22		stx $22				stx 	zTemp0
.1e82	84 23		sty $23				sty 	zTemp0+1
.1e84	b2 22		lda ($22)			lda 	(zTemp0)
.1e86	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1e88	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e8a	20 d5 1e	jsr $1ed5			jsr 	TOKDSpacing 				; check spacing okay.
.1e8d					_TOKDOutput:
.1e8d	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e8f	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e92	c8		iny				iny
.1e93	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e95	d0 f6		bne $1e8d			bne 	_TOKDOutput
.1e97	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e98					TOKDToken:
.1e98	a2 b3		ldx #$b3			ldx 	#StandardTokens & $FF 		; standard table
.1e9a	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e9c	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1e9e	d0 07		bne $1ea7			bne 	_TOKDSearch
.1ea0	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get next
.1ea3	a2 30		ldx #$30			ldx 	#AlternateTokens & $FF 		; alt table
.1ea5	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.1ea7					_TOKDSearch:
.1ea7	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1ea9	84 23		sty $23				sty 	zTemp0+1
.1eab	aa		tax				tax 								; token ID in X.
.1eac					_TOKDFind:
.1eac	ca		dex				dex 								; reached the start
.1ead	10 0d		bpl $1ebc			bpl 	_TOKDFound
.1eaf	38		sec				sec 								; go to next entry
.1eb0	b2 22		lda ($22)			lda 	(zTemp0)
.1eb2	65 22		adc $22				adc 	zTemp0
.1eb4	85 22		sta $22				sta 	zTemp0
.1eb6	90 f4		bcc $1eac			bcc 	_TOKDFind
.1eb8	e6 23		inc $23				inc 	zTemp0+1
.1eba	80 f0		bra $1eac			bra 	_TOKDFind
.1ebc					_TOKDFound:
.1ebc	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1ebe	f0 14		beq $1ed4			beq 	_TOKDExit
.1ec0	aa		tax				tax
.1ec1	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ec3	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing first character,
.1ec5	20 d5 1e	jsr $1ed5			jsr 	TOKDSpacing
.1ec8					_TOKDOutput:
.1ec8	b1 22		lda ($22),y			lda 	(zTemp0),y
.1eca	20 8e 22	jsr $228e			jsr 	TOKToLower
.1ecd	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1ed0	c8		iny				iny
.1ed1	ca		dex				dex
.1ed2	d0 f4		bne $1ec8			bne 	_TOKDOutput
.1ed4					_TOKDExit:
.1ed4	60		rts				rts
.1ed5					TOKDSpacing:
.1ed5	20 a5 22	jsr $22a5			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1ed8	90 0d		bcc $1ee7			bcc 	_TOKDSExit
.1eda	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1edd	20 a5 22	jsr $22a5			jsr 	TOKIsIdentifierElement
.1ee0	90 05		bcc $1ee7			bcc 	_TOKDSExit
.1ee2	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ee4	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1ee7					_TOKDSExit:
.1ee7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1ee8					PGMDeleteLine:
.1ee8	20 9b 1f	jsr $1f9b			jsr 	PGMEndProgram 				; end of program into zTemp0
.1eeb	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eed	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ef0	85 25		sta $25				sta 	zTemp1+1
.1ef2					_PGMDLoop:
.1ef2	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1ef4	38		sec				sec
.1ef5	f0 3a		beq $1f31			beq 	_PGMDExit
.1ef7	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1ef9	b1 24		lda ($24),y			lda 	(zTemp1),y
.1efb	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1efe	d0 08		bne $1f08			bne 	_PGMDNext
.1f00	c8		iny				iny
.1f01	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f03	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1f06	f0 0d		beq $1f15			beq 	_PGMDDelete
.1f08					_PGMDNext:
.1f08	18		clc				clc
.1f09	b2 24		lda ($24)			lda 	(zTemp1)
.1f0b	65 24		adc $24				adc 	zTemp1
.1f0d	85 24		sta $24				sta 	zTemp1
.1f0f	90 e1		bcc $1ef2			bcc 	_PGMDLoop
.1f11	e6 25		inc $25				inc 	zTemp1+1
.1f13	80 dd		bra $1ef2			bra 	_PGMDLoop
.1f15					_PGMDDelete:
.1f15	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1f17	a8		tay				tay
.1f18					_PGMDCopy:
.1f18	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1f1a	92 24		sta ($24)			sta 	(zTemp1)
.1f1c	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1f1e	c5 22		cmp $22				cmp 	zTemp0
.1f20	d0 07		bne $1f29			bne 	_PGMDNext2
.1f22	a5 25		lda $25				lda 	zTemp1+1
.1f24	c5 23		cmp $23				cmp 	zTemp0+1
.1f26	18		clc				clc
.1f27	f0 08		beq $1f31			beq 	_PGMDExit
.1f29					_PGMDNext2:
.1f29	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1f2b	d0 eb		bne $1f18			bne 	_PGMDCopy
.1f2d	e6 25		inc $25				inc 	zTemp1+1
.1f2f	80 e7		bra $1f18			bra 	_PGMDCopy
.1f31					_PGMDExit:
.1f31	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1f32					PGMInsertLine:
.1f32	20 9b 1f	jsr $1f9b			jsr 	PGMEndProgram 				; end of program into zTemp0
.1f35	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1f37	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f3a	85 25		sta $25				sta 	zTemp1+1
.1f3c					_PGMILoop:
.1f3c	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1f3e	f0 1c		beq $1f5c			beq 	_PGMIInsert
.1f40	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f42	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f44	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f47	c8		iny				iny
.1f48	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f4a	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f4d	b0 0d		bcs $1f5c			bcs 	_PGMIInsert 				; insert here.
.1f4f	18		clc				clc
.1f50	b2 24		lda ($24)			lda 	(zTemp1)
.1f52	65 24		adc $24				adc 	zTemp1
.1f54	85 24		sta $24				sta 	zTemp1
.1f56	90 e4		bcc $1f3c			bcc 	_PGMILoop
.1f58	e6 25		inc $25				inc 	zTemp1+1
.1f5a	80 e0		bra $1f3c			bra 	_PGMILoop
.1f5c					_PGMIInsert:
.1f5c	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f5f					_PGMIInsertLoop:
.1f5f	b2 22		lda ($22)			lda 	(zTemp0)
.1f61	91 22		sta ($22),y			sta 	(zTemp0),y
.1f63	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f65	c5 22		cmp $22				cmp 	zTemp0
.1f67	d0 06		bne $1f6f			bne 	_PGMINext
.1f69	a5 25		lda $25				lda 	zTemp1+1
.1f6b	c5 23		cmp $23				cmp 	zTemp0+1
.1f6d	f0 0a		beq $1f79			beq 	_PGMIInserted
.1f6f					_PGMINext:
.1f6f	a5 22		lda $22				lda 	zTemp0
.1f71	d0 02		bne $1f75			bne 	_PGMINoBorrow
.1f73	c6 23		dec $23				dec 	zTemp0+1
.1f75					_PGMINoBorrow:
.1f75	c6 22		dec $22				dec 	zTemp0
.1f77	80 e6		bra $1f5f			bra 	_PGMIInsertLoop
.1f79					_PGMIInserted:
.1f79	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f7b					_PGMICopyLoop:
.1f7b	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f7e	91 24		sta ($24),y			sta 	(zTemp1),y
.1f80	c8		iny				iny
.1f81	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f84	d0 f5		bne $1f7b			bne 	_PGMICopyLoop
.1f86	18		clc				clc
.1f87	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f88					PGMSetBaseAddress:
.1f88	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.1f8b	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.1f8e	60		rts				rts
.1f8f					PGMNewProgram:
.1f8f	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f91	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f94	85 23		sta $23				sta 	zTemp0+1
.1f96	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.1f98	92 22		sta ($22)			sta 	(zTemp0)
.1f9a	60		rts				rts
.1f9b					PGMEndProgram:
.1f9b	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f9d	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1fa0	85 23		sta $23				sta 	zTemp0+1
.1fa2					_PGMEPLoop:
.1fa2	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.1fa4	f0 0b		beq $1fb1			beq 	_PGMEPExit
.1fa6	18		clc				clc 								; no, advance to next
.1fa7	65 22		adc $22				adc 	zTemp0
.1fa9	85 22		sta $22				sta 	zTemp0
.1fab	90 f5		bcc $1fa2			bcc 	_PGMEPLoop
.1fad	e6 23		inc $23				inc 	zTemp0+1
.1faf	80 f1		bra $1fa2			bra 	_PGMEPLoop
.1fb1					_PGMEPExit:
.1fb1	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1fb2					TOKResetElement:
.1fb2	9c 1c 05	stz $051c			stz 	TOKElement
.1fb5	60		rts				rts
.1fb6					TOKWriteElement:
.1fb6	da		phx				phx
.1fb7	ae 1c 05	ldx $051c			ldx 	TOKElement
.1fba	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1fbd	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1fc0	fa		plx				plx
.1fc1	ee 1c 05	inc $051c			inc 	TOKElement
.1fc4	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1fc5					TOKTokeniseConstant:
.1fc5	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1fc7	48		pha				pha 								; save on stack
.1fc8	29 c0		and #$c0			and 	#$C0
.1fca	05 09		ora $09				ora 	IFR0+IM1
.1fcc	05 0a		ora $0a				ora 	IFR0+IM2
.1fce	f0 10		beq $1fe0			beq 	_TTCLess
.1fd0	da		phx				phx
.1fd1	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1fd3					_TTCShiftRight:
.1fd3	46 0a		lsr $0a				lsr 	IFR0+IM2
.1fd5	66 09		ror $09				ror 	IFR0+IM1
.1fd7	66 08		ror $08				ror 	IFR0+IM0
.1fd9	ca		dex				dex
.1fda	d0 f7		bne $1fd3			bne 	_TTCShiftRight
.1fdc	fa		plx				plx
.1fdd	20 c5 1f	jsr $1fc5			jsr 	TOKTokeniseConstant
.1fe0					_TTCLess:
.1fe0	68		pla				pla
.1fe1	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fe3	20 82 20	jsr $2082			jsr 	TOKWriteA
.1fe6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fe7					TOKTokeniseDecimals:
.1fe7	20 95 20	jsr $2095			jsr 	TOKGetNext 					; consume the .
.1fea	20 12 22	jsr $2212			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fed	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fef	20 82 20	jsr $2082			jsr 	TOKWriteA
.1ff2	20 f7 1f	jsr $1ff7			jsr 	TOKOutputElementBuffer 		; then the buffer
.1ff5	18		clc				clc
.1ff6	60		rts				rts
.1ff7					TOKOutputElementBuffer:
.1ff7	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1ffa	20 82 20	jsr $2082			jsr 	TOKWriteA
.1ffd	a8		tay				tay 								; put in Y
.1ffe	f0 0c		beq $200c			beq 	_TOEExit 					; exit if empty which is okay.
.2000	a2 01		ldx #$01			ldx 	#1
.2002					_TOELoop:
.2002	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2005	20 82 20	jsr $2082			jsr 	TOKWriteA
.2008	e8		inx				inx
.2009	88		dey				dey
.200a	d0 f6		bne $2002			bne 	_TOELoop
.200c					_TOEExit:
.200c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.200d					TOKTokenise:
.200d	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.2010	8e 1c 06	stx $061c			stx 	TOKDataSource
.2013	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2015	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.2018	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.201a	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.201d	9c 01 04	stz $0401			stz 	TOKLineNumber
.2020	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2023					_TOKMainLoop:
.2023	20 91 20	jsr $2091			jsr 	TOKGet 						; what follows.
.2026	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2028	f0 4f		beq $2079			beq 	_TOKExit
.202a	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.202c	d0 05		bne $2033			bne 	_TOKElement
.202e	20 95 20	jsr $2095			jsr 	TOKGetNext
.2031	80 f0		bra $2023			bra 	_TOKMainLoop
.2033					_TOKElement:
.2033	20 99 22	jsr $2299			jsr 	TOKIsDigit 					; is it 0..9
.2036	90 0a		bcc $2042			bcc 	_TOKNotDigit
.2038	20 e9 21	jsr $21e9			jsr 	TOKTokeniseInteger 			; get integer
.203b	b0 43		bcs $2080			bcs 	_TOKFail 					; did it fail ?
.203d	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2040	80 e1		bra $2023			bra 	_TOKMainLoop
.2042					_TOKNotDigit:
.2042	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2045	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2047	d0 07		bne $2050			bne 	_TOKNotHex
.2049	20 eb 20	jsr $20eb			jsr 	TOKTokeniseHexadecimal
.204c	b0 32		bcs $2080			bcs 	_TOKFail
.204e	80 d3		bra $2023			bra 	_TOKMainLoop
.2050					_TOKNotHex:
.2050	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2052	d0 07		bne $205b			bne 	_TOKNotDecimal
.2054	20 e7 1f	jsr $1fe7			jsr 	TOKTokeniseDecimals
.2057	b0 27		bcs $2080			bcs 	_TOKFail
.2059	80 c8		bra $2023			bra 	_TOKMainLoop
.205b					_TOKNotDecimal:
.205b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.205d	d0 07		bne $2066			bne 	_TOKNotString
.205f	20 60 22	jsr $2260			jsr 	TOKTokeniseString
.2062	b0 1c		bcs $2080			bcs 	_TOKFail
.2064	80 bd		bra $2023			bra 	_TOKMainLoop
.2066					_TOKNotString:
.2066	20 b6 22	jsr $22b6			jsr 	TOKIsAlpha 					; identifier ?
.2069	b0 07		bcs $2072			bcs 	_TOKIdentifier
.206b	20 26 22	jsr $2226			jsr 	TOKTokenisePunctuation 		; punctuation
.206e	b0 10		bcs $2080			bcs 	_TOKFail
.2070	80 b1		bra $2023			bra 	_TOKMainLoop
.2072					_TOKIdentifier:
.2072	20 25 21	jsr $2125			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2075	b0 09		bcs $2080			bcs 	_TOKFail
.2077	80 aa		bra $2023			bra 	_TOKMainLoop
.2079					_TOKExit:
.2079	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.207b	20 82 20	jsr $2082			jsr 	TOKWriteA
.207e	18		clc				clc									; return with carry set.
.207f	60		rts				rts
.2080					_TOKFail:
.2080	38		sec				sec
.2081	60		rts				rts
.2082					TOKWriteA:
.2082	da		phx				phx
.2083	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2086	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2089	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.208c	fa		plx				plx
.208d	ee 00 04	inc $0400			inc 	TOKLineSize
.2090	60		rts				rts
.2091					TOKGet:
.2091	18		clc				clc
.2092	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2095					TOKGetNext:
.2095	38		sec				sec
.2096	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2099					TOKFindToken:
.2099	a2 b3		ldx #$b3			ldx 	#StandardTokens & $FF 		; do this table
.209b	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.209d	20 b5 20	jsr $20b5			jsr 	TOKFindTokenXY 				; find it, or not
.20a0	b0 0d		bcs $20af			bcs 	_TOKFound1
.20a2	a2 30		ldx #$30			ldx 	#AlternateTokens & $FF 		; do the alternate table
.20a4	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.20a6	20 b5 20	jsr $20b5			jsr 	TOKFindTokenXY 				; find it, or not
.20a9	90 08		bcc $20b3			bcc 	_TOKFTFail 					; not ....
.20ab	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.20ad	38		sec				sec
.20ae	60		rts				rts
.20af					_TOKFound1:
.20af	a2 00		ldx #$00			ldx 	#0
.20b1	38		sec				sec
.20b2	60		rts				rts
.20b3					_TOKFTFail
.20b3	18		clc				clc
.20b4	60		rts				rts
.20b5					TOKFindTokenXY:
.20b5	86 22		stx $22				stx 	zTemp0 						; save token table address
.20b7	84 23		sty $23				sty 	zTemp0+1
.20b9	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.20bb	8d 1f 06	sta $061f			sta 	TOKCurrent
.20be					_TOKFindLoop:
.20be	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.20c0	18		clc				clc 		 						; clear carry in case of fail
.20c1	30 17		bmi $20da			bmi 	_TOKExit 					; end of table, fail, so return CC.
.20c3	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.20c6	d0 13		bne $20db			bne 	_TOKNext 					; different, try next.
.20c8	aa		tax				tax 								; number of chars to compare.
.20c9	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.20cb					_TOKCompare:
.20cb	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.20cd	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.20d0	d0 09		bne $20db			bne 	_TOKNext 					; different ? try next
.20d2	c8		iny				iny 								; compare next two
.20d3	ca		dex				dex
.20d4	d0 f5		bne $20cb			bne 	_TOKCompare 				; until done X characters.
.20d6	38		sec				sec
.20d7	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.20da					_TOKExit:
.20da	60		rts				rts
.20db					_TOKNext:
.20db	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.20de	38		sec				sec 								; add length+1 to ptr
.20df	b2 22		lda ($22)			lda 	(zTemp0)
.20e1	65 22		adc $22				adc 	zTemp0
.20e3	85 22		sta $22				sta 	zTemp0
.20e5	90 d7		bcc $20be			bcc 	_TOKFindLoop
.20e7	e6 23		inc $23				inc 	zTemp0+1
.20e9	80 d3		bra $20be			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.20eb					TOKTokeniseHexadecimal:
.20eb	20 95 20	jsr $2095			jsr 	TOKGetNext 					; consume the $
.20ee	a2 08		ldx #$08			ldx 	#IFR0
.20f0	20 25 31	jsr $3125			jsr 	IFloatSetZero 				; set R0 = 0
.20f3					_TTHLoop:
.20f3	20 91 20	jsr $2091			jsr 	TOKGet 						; keep getting and copying while numeric.
.20f6	20 c3 22	jsr $22c3			jsr 	TOKIsHexadecimal
.20f9	90 20		bcc $211b			bcc 	_TTHDone
.20fb	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20fd	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.2100	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.2103	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.2106	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.2109	20 95 20	jsr $2095			jsr 	TOKGetNext
.210c	38		sec				sec 								; convert to decimal.
.210d	e9 30		sbc #$30			sbc 	#48
.210f	c9 0a		cmp #$0a			cmp 	#10
.2111	90 02		bcc $2115			bcc 	_TTHNotAlpha
.2113	e9 07		sbc #$07			sbc 	#7
.2115					_TTHNotAlpha:
.2115	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2117	85 08		sta $08				sta 	IFR0+IM0
.2119	80 d8		bra $20f3			bra 	_TTHLoop
.211b					_TTHDone:
.211b	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.211d	20 82 20	jsr $2082			jsr 	TOKWriteA
.2120	20 c5 1f	jsr $1fc5			jsr 	TOKTokeniseConstant 		; write integer out.
.2123	18		clc				clc
.2124	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2125					TOKTokeniseIdentifier:
.2125	20 b2 1f	jsr $1fb2			jsr 	TOKResetElement 			; extract an identifier
.2128					_TOKGetIdentifier:
.2128	20 91 20	jsr $2091			jsr 	TOKGet
.212b	20 83 22	jsr $2283			jsr 	TOKToUpper
.212e	20 a5 22	jsr $22a5			jsr 	TOKIsIdentifierElement
.2131	90 08		bcc $213b			bcc 	_TOKEndIdent
.2133	20 b6 1f	jsr $1fb6			jsr		TOKWriteElement
.2136	20 95 20	jsr $2095			jsr 	TOKGetNext
.2139	80 ed		bra $2128			bra 	_TOKGetIdentifier
.213b					_TOKEndIdent:
.213b	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.213d	d0 06		bne $2145			bne 	_TOKNotString
.213f	20 b6 1f	jsr $1fb6			jsr 	TOKWriteElement 			; add it
.2142	20 95 20	jsr $2095			jsr 	TOKGetNext 					; consume it
.2145					_TOKNotString:
.2145	20 91 20	jsr $2091			jsr 	TOKGet 						; finally check for (
.2148	c9 28		cmp #$28			cmp 	#"("
.214a	d0 06		bne $2152			bne 	_TOKNoArray
.214c	20 b6 1f	jsr $1fb6			jsr 	TOKWriteElement 			; add it
.214f	20 95 20	jsr $2095			jsr 	TOKGetNext 					; consume it
.2152					_TOKNoArray:
.2152	20 99 20	jsr $2099			jsr 	TOKFindToken 				; find it
.2155	90 18		bcc $216f			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2157	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2159	f0 0f		beq $216a			beq 	_TOKComment 				; yes, do comment code.
.215b	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.215d	d0 06		bne $2165			bne 	_TOKNoShift
.215f	48		pha				pha 								; write the shift.
.2160	8a		txa				txa
.2161	20 82 20	jsr $2082			jsr 	TOKWriteA
.2164	68		pla				pla
.2165					_TOKNoShift:
.2165	20 82 20	jsr $2082			jsr 	TOKWriteA 					; write the main token.
.2168	18		clc				clc
.2169	60		rts				rts
.216a					_TOKComment:
.216a	20 b6 21	jsr $21b6			jsr 	TOKDoComment
.216d	18		clc				clc
.216e	60		rts				rts
.216f					_TOKIsVariable:
.216f	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2171					_TOKOutputBuffer:
.2171	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2174	20 9d 21	jsr $219d			jsr 	TOKTranslateIdentifier
.2177	20 82 20	jsr $2082			jsr 	TOKWriteA
.217a	e8		inx				inx
.217b	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.217e	20 a5 22	jsr $22a5			jsr 	TOKIsIdentifierElement
.2181	b0 ee		bcs $2171			bcs 	_TOKOutputBuffer
.2183	a8		tay				tay 								; last char in Y
.2184	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2186	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2188	f0 0e		beq $2198			beq 	_TOKIVExit
.218a	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.218c	d0 04		bne $2192			bne 	_TOKIVCheckArray 			; no, check for (
.218e	1a		inc a				inc 	a 							; token is $7D
.218f	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2192					_TOKIVCheckArray:
.2192	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2194	d0 02		bne $2198			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2196	1a		inc a				inc 	a
.2197	1a		inc a				inc 	a
.2198					_TOKIVExit:
.2198	20 82 20	jsr $2082			jsr 	TOKWriteA 					; ending token
.219b	18		clc				clc
.219c	60		rts				rts
.219d					TOKTranslateIdentifier:
.219d	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.219f	f0 0f		beq $21b0			beq 	_TTI64
.21a1	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.21a3	f0 0e		beq $21b3			beq 	_TTI65
.21a5	38		sec				sec
.21a6	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.21a8	10 03		bpl $21ad			bpl 	_TTIExit
.21aa	18		clc				clc 								; map 09 onto 26-35
.21ab	69 2b		adc #$2b			adc 	#"A"-"0"+26
.21ad					_TTIExit:
.21ad	09 40		ora #$40			ora 	#$40 						; correct range.
.21af	60		rts				rts
.21b0	a9 64		lda #$64	_TTI64:	lda 	#$64
.21b2	60		rts				rts
.21b3	a9 65		lda #$65	_TTI65:	lda 	#$65
.21b5	60		rts				rts
.21b6					TOKDoComment:
.21b6	20 82 20	jsr $2082			jsr 	TOKWriteA					; output the token.
.21b9					_TOKSkipSpaces:
.21b9	20 91 20	jsr $2091			jsr 	TOKGet 						; skip over spaces
.21bc	c9 20		cmp #$20			cmp 	#' '
.21be	d0 05		bne $21c5			bne 	_TOKEndSpaces
.21c0	20 95 20	jsr $2095			jsr 	TOKGetNext
.21c3	80 f4		bra $21b9			bra 	_TOKSkipSpaces
.21c5					_TOKEndSpaces:
.21c5	48		pha				pha 								; save it
.21c6	68		pla				pla
.21c7	f0 04		beq $21cd			beq 	_TOKDCExit 					; end of line.
.21c9	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.21cb	d0 01		bne $21ce			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.21cd					_TOKDCExit:
.21cd	60		rts				rts
.21ce					_TOKDCDoLine:
.21ce	20 b2 1f	jsr $1fb2			jsr 	TOKResetElement 			; start getting the string
.21d1					_TOKDCLoop:
.21d1	20 91 20	jsr $2091			jsr 	TOKGet 						; check EOL
.21d4	c9 00		cmp #$00			cmp 	#0
.21d6	f0 08		beq $21e0			beq 	_TOKDCEndComment
.21d8	20 95 20	jsr $2095			jsr 	TOKGetNext 					; get and consume
.21db	20 b6 1f	jsr $1fb6			jsr 	TOKWriteElement
.21de	80 f1		bra $21d1			bra 	_TOKDCLoop
.21e0					_TOKDCEndComment:
.21e0	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21e2	20 82 20	jsr $2082			jsr 	TOKWriteA
.21e5	20 f7 1f	jsr $1ff7			jsr 	TOKOutputElementBuffer
.21e8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.21e9					TOKTokeniseInteger:
.21e9	20 12 22	jsr $2212			jsr 	TOKExtractInteger 			; pull an integer out as text.
.21ec	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.21ee	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.21f0	ad 1c 05	lda $051c			lda		TOKElement
.21f3	20 89 2f	jsr $2f89			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.21f6	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21f9	f0 12		beq $220d			beq 	_TOKNotLineNumber
.21fb	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21fd	d0 0c		bne $220b			bne 	_TOKBadLineNumeber
.21ff	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2201	8d 01 04	sta $0401			sta 	TOKLineNumber
.2204	a5 09		lda $09				lda 	IFR0+IM1
.2206	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2209	18		clc				clc
.220a	60		rts				rts
.220b					_TOKBadLineNumeber:
.220b	38		sec				sec
.220c	60		rts				rts
.220d					_TOKNotLineNumber:
.220d	20 c5 1f	jsr $1fc5			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2210	18		clc				clc
.2211	60		rts				rts
.2212					TOKExtractInteger:
.2212	20 b2 1f	jsr $1fb2			jsr 	TOKResetElement 			; restart
.2215					_TTILoop:
.2215	20 91 20	jsr $2091			jsr 	TOKGet 						; keep getting and copying while numeric.
.2218	20 99 22	jsr $2299			jsr 	TOKIsDigit
.221b	90 08		bcc $2225			bcc 	_TOKEIExit
.221d	20 b6 1f	jsr $1fb6			jsr 	TOKWriteElement
.2220	20 95 20	jsr $2095			jsr 	TOKGetNext
.2223	80 f0		bra $2215			bra 	_TTILoop
.2225					_TOKEIExit:
.2225	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2226					TOKTokenisePunctuation:
.2226	20 b2 1f	jsr $1fb2			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2229	20 95 20	jsr $2095			jsr 	TOKGetNext
.222c	20 b6 1f	jsr $1fb6			jsr 	TOKWriteElement
.222f	20 91 20	jsr $2091			jsr 	TOKGet 						; what follows ?
.2232	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2234	f0 10		beq $2246			beq 	_TTPOne
.2236	20 ad 22	jsr $22ad			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2239	b0 0b		bcs $2246			bcs 	_TTPOne 					; these speed things up a bit.
.223b	20 b6 1f	jsr $1fb6			jsr 	TOKWriteElement 			; this is what we will search for.
.223e	20 99 20	jsr $2099			jsr 	TOKFindToken
.2241	b0 0a		bcs $224d			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2243	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2246					_TTPOne:
.2246	20 99 20	jsr $2099			jsr 	TOKFindToken 				; look for one character punctuation
.2249	b0 07		bcs $2252			bcs 	_TTPOutputExit 				; we found it
.224b	38		sec				sec 								; not recognised.
.224c	60		rts				rts
.224d					_TTPConsumeExit:
.224d	48		pha				pha
.224e	20 95 20	jsr $2095			jsr 	TOKGetNext 					; get the 2nd char out.
.2251	68		pla				pla
.2252					_TTPOutputExit:
.2252	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2254	f0 05		beq $225b			beq 	_TTPComment
.2256	20 82 20	jsr $2082			jsr  	TOKWriteA 					; write token out
.2259	18		clc				clc
.225a	60		rts				rts
.225b					_TTPComment:
.225b	20 b6 21	jsr $21b6			jsr 	TOKDoComment
.225e	18		clc				clc
.225f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2260					TOKTokeniseString:
.2260	20 95 20	jsr $2095			jsr 	TOKGetNext 					; consume the "
.2263	20 b2 1f	jsr $1fb2			jsr 	TOKResetElement 			; start getting the string
.2266					_TOKTSLoop:
.2266	20 91 20	jsr $2091			jsr 	TOKGet 						; check EOL
.2269	c9 00		cmp #$00			cmp 	#0
.226b	f0 0c		beq $2279			beq 	_TOKTSExit
.226d	20 95 20	jsr $2095			jsr 	TOKGetNext 					; get and consume
.2270	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2272	f0 05		beq $2279			beq 	_TOKTSExit
.2274	20 b6 1f	jsr $1fb6			jsr 	TOKWriteElement
.2277	80 ed		bra $2266			bra 	_TOKTSLoop
.2279					_TOKTSExit:
.2279	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.227b	20 82 20	jsr $2082			jsr 	TOKWriteA
.227e	20 f7 1f	jsr $1ff7			jsr 	TOKOutputElementBuffer
.2281	18		clc				clc
.2282	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2283					TOKToUpper:
.2283	c9 61		cmp #$61			cmp 	#"a"
.2285	90 06		bcc $228d			bcc 	_TTUNotLower
.2287	c9 7b		cmp #$7b			cmp 	#"z"+1
.2289	b0 02		bcs $228d			bcs 	_TTUNotLower
.228b	49 20		eor #$20			eor 	#$20
.228d					_TTUNotLower:
.228d	60		rts				rts
.228e					TOKToLower:
.228e	c9 41		cmp #$41			cmp 	#"A"
.2290	90 06		bcc $2298			bcc 	_TTUNotUpper
.2292	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2294	b0 02		bcs $2298			bcs 	_TTUNotUpper
.2296	49 20		eor #$20			eor 	#$20
.2298					_TTUNotUpper:
.2298	60		rts				rts
.2299					TOKIsDigit:
.2299	c9 30		cmp #$30			cmp 	#"0"
.229b	90 06		bcc $22a3			bcc 	TOKFail
.229d	c9 3a		cmp #$3a			cmp 	#"9"+1
.229f	b0 02		bcs $22a3			bcs 	TOKFail
.22a1					TOKSucceed:
.22a1	38		sec				sec
.22a2	60		rts				rts
.22a3					TOKFail:
.22a3	18		clc				clc
.22a4	60		rts				rts
.22a5					TOKIsIdentifierElement:
.22a5	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.22a7	f0 f8		beq $22a1			beq 	TOKSucceed
.22a9	c9 5f		cmp #$5f			cmp 	#"_"
.22ab	f0 f4		beq $22a1			beq 	TOKSucceed 					; else fall through to alphanumeric
.22ad					TOKIsAlphaNumeric:
.22ad	20 b6 22	jsr $22b6			jsr 	TOKIsAlpha
.22b0	b0 ef		bcs $22a1			bcs 	TOKSucceed
.22b2	20 99 22	jsr $2299			jsr 	TOKIsDigit
.22b5	60		rts				rts
.22b6					TOKIsAlpha:
.22b6	20 83 22	jsr $2283			jsr 	TOKToUpper
.22b9	c9 41		cmp #$41			cmp 	#"A"
.22bb	90 e6		bcc $22a3			bcc 	TOKFail
.22bd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.22bf	b0 e2		bcs $22a3			bcs 	TOKFail
.22c1	80 de		bra $22a1			bra 	TOKSucceed
.22c3					TOKIsHexadecimal:
.22c3	20 99 22	jsr $2299			jsr		TOKIsDigit
.22c6	b0 d9		bcs $22a1			bcs 	TOKSucceed
.22c8	20 b6 22	jsr $22b6			jsr 	TOKIsAlpha
.22cb	90 d6		bcc $22a3			bcc 	TOKFail
.22cd	c9 47		cmp #$47			cmp 	#"F"+1
.22cf	b0 d2		bcs $22a3			bcs 	TOKFail
.22d1	80 ce		bra $22a1			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.22d3					Command_CALL:
.22d3	a9 42		lda #$42			lda 	#STK_CALL
.22d5	20 a0 27	jsr $27a0			jsr 	StackOpen
.22d8	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.22da	29 c0		and #$c0			and 	#$C0
.22dc	c9 40		cmp #$40			cmp 	#$40
.22de	d0 29		bne $2309			bne 	_CCSyntax
.22e0	20 68 2a	jsr $2a68			jsr 	VARGetInfo 					; get the information
.22e3	20 87 27	jsr $2787			jsr 	ERRCheckRParen 				; check right bracket follows.
.22e6	20 1a 2a	jsr $2a1a			jsr 	VARFind 					; exists ?
.22e9	90 21		bcc $230c			bcc 	_CCUnknown
.22eb	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.22ed	85 22		sta $22				sta 	zTemp0
.22ef	20 d4 27	jsr $27d4			jsr 	STKSaveCodePosition 		; save return address on stack.
.22f2	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.22f4	b1 22		lda ($22),y			lda 	(zTemp0),y
.22f6	c9 ff		cmp #$ff			cmp 	#$FF
.22f8	d0 12		bne $230c			bne 	_CCUnknown
.22fa	88		dey				dey 								; get Y offset to stack
.22fb	b1 22		lda ($22),y			lda 	(zTemp0),y
.22fd	48		pha				pha
.22fe	88		dey				dey 								; get address
.22ff	b1 22		lda ($22),y			lda 	(zTemp0),y
.2301	85 19		sta $19				sta 	codePtr+1
.2303	b2 22		lda ($22)			lda 	(zTemp0)
.2305	85 18		sta $18				sta 	codePtr
.2307	7a		ply				ply 								; restore Y
.2308	60		rts				rts
.2309					_CCSyntax:
.2309	4c d2 25	jmp $25d2		jmp	ErrorV_syntax
.230c					_CCUnknown:
.230c	4c 47 27	jmp $2747		jmp	ErrorV_unknown
.230f					Command_ENDPROC:
.230f	a9 42		lda #$42			lda 	#STK_CALL
.2311	20 cc 27	jsr $27cc			jsr 	StackCheckFrame
.2314	20 e6 27	jsr $27e6			jsr 	STKLoadCodePosition 		; return
.2317	20 be 27	jsr $27be			jsr 	StackClose
.231a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.231b					Command_DO:
.231b	a9 22		lda #$22			lda 	#STK_DO
.231d	20 a0 27	jsr $27a0			jsr 	StackOpen
.2320	20 d4 27	jsr $27d4			jsr 	STKSaveCodePosition 		; save loop position
.2323	60		rts				rts
.2324					Command_EXIT:
.2324	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2326	20 cc 27	jsr $27cc			jsr 	StackCheckFrame
.2329	20 be 27	jsr $27be			jsr 	StackClose 					; close it
.232c	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.232e	aa		tax				tax
.232f	20 e2 24	jsr $24e2			jsr 	ScanForward
.2332	60		rts				rts
.2333					Command_LOOP:
.2333	a9 22		lda #$22			lda 	#STK_DO
.2335	20 cc 27	jsr $27cc			jsr 	StackCheckFrame
.2338	20 e6 27	jsr $27e6			jsr 	STKLoadCodePosition 		; loop back
.233b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.233c					Command_FOR:
.233c	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.233e	20 a0 27	jsr $27a0			jsr 	StackOpen
.2341	20 bf 12	jsr $12bf			jsr 	CommandLET 					; do "I = 1" bit
.2344	5a		phy				phy 								; save variable address to +4,+5
.2345	a0 04		ldy #$04			ldy 	#4
.2347	a5 22		lda $22				lda 	zTemp0
.2349	91 2a		sta ($2a),y			sta 	(basicStack),y
.234b	c8		iny				iny
.234c	a5 23		lda $23				lda 	zTemp0+1
.234e	91 2a		sta ($2a),y			sta 	(basicStack),y
.2350	7a		ply				ply
.2351	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2353	20 97 27	jsr $2797			jsr 	ERRCheckA
.2356	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2359	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.235b	a2 08		ldx #$08			ldx 	#IFR0
.235d	20 b2 23	jsr $23b2			jsr 	CFSaveR0X
.2360	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2362	c9 91		cmp #$91			cmp 	#PR_STEP
.2364	d0 06		bne $236c			bne 	_CFStep1
.2366	c8		iny				iny 								; consume step
.2367	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; evaluate STEP
.236a	80 24		bra $2390			bra 	_CFWriteStep
.236c					_CFStep1:
.236c	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.236e	a9 01		lda #$01			lda 	#1
.2370	20 27 31	jsr $3127			jsr 	IFloatSetByte
.2373	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2374	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2376	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2378	85 22		sta $22				sta 	zTemp0
.237a	c8		iny				iny
.237b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.237d	85 23		sta $23				sta 	zTemp0+1
.237f	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2381	b1 22		lda ($22),y			lda 	(zTemp0),y
.2383	d0 0a		bne $238f			bne 	_CFNotOptimised
.2385	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2387	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2389	d0 04		bne $238f			bne 	_CFNotOptimised
.238b	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.238d	85 0b		sta $0b				sta 	IFR0+IExp
.238f					_CFNotOptimised:
.238f	7a		ply				ply
.2390					_CFWriteStep:
.2390	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2392	a9 06		lda #$06			lda 	#6
.2394	20 b2 23	jsr $23b2			jsr 	CFSaveR0X
.2397	20 d4 27	jsr $27d4			jsr 	STKSaveCodePosition 		; save loop position
.239a	60		rts				rts
.239b					CFLoadR0X:
.239b	5a		phy				phy
.239c	a8		tay				tay
.239d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.239f	95 00		sta $00,x			sta 	IM0,x
.23a1	c8		iny				iny
.23a2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a4	95 01		sta $01,x			sta 	IM1,x
.23a6	c8		iny				iny
.23a7	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a9	95 02		sta $02,x			sta 	IM2,x
.23ab	c8		iny				iny
.23ac	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23ae	95 03		sta $03,x			sta 	IExp,x
.23b0	7a		ply				ply
.23b1	60		rts				rts
.23b2					CFSaveR0X:
.23b2	5a		phy				phy
.23b3	a8		tay				tay
.23b4	b5 00		lda $00,x			lda 	IM0,x
.23b6	91 2a		sta ($2a),y			sta 	(basicStack),y
.23b8	c8		iny				iny
.23b9	b5 01		lda $01,x			lda 	IM1,x
.23bb	91 2a		sta ($2a),y			sta 	(basicStack),y
.23bd	c8		iny				iny
.23be	b5 02		lda $02,x			lda 	IM2,x
.23c0	91 2a		sta ($2a),y			sta 	(basicStack),y
.23c2	c8		iny				iny
.23c3	b5 03		lda $03,x			lda 	IExp,x
.23c5	91 2a		sta ($2a),y			sta 	(basicStack),y
.23c7	7a		ply				ply
.23c8	60		rts				rts
.23c9					Command_NEXT:
.23c9	a9 37		lda #$37			lda 	#STK_FOR
.23cb	20 cc 27	jsr $27cc			jsr 	StackCheckFrame
.23ce	5a		phy				phy 								; check optimised loop
.23cf	a0 09		ldy #$09			ldy 	#9
.23d1	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23d3	7a		ply				ply
.23d4	0a		asl a				asl 	a
.23d5	b0 35		bcs $240c			bcs 	_CNOptimised
.23d7	20 43 24	jsr $2443			jsr 	_CNLoadValue 				; load index value to R0.
.23da	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.23dc	a9 06		lda #$06			lda 	#6
.23de	20 9b 23	jsr $239b			jsr 	CFLoadR0X
.23e1	20 1d 2b	jsr $2b1d			jsr 	IFloatAdd 					; add them together and write back.
.23e4	20 66 24	jsr $2466			jsr 	_CNSaveValue
.23e7	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.23e9	a2 0c		ldx #$0c			ldx 	#IFR1
.23eb	20 9b 23	jsr $239b			jsr 	CFLoadR0X
.23ee	20 f4 2d	jsr $2df4			jsr 	IFloatCompare 				; compare terminal vs current
.23f1	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.23f3	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.23f6	f0 10		beq $2408			beq 	_CNLoopBack
.23f8	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.23fa	5a		phy				phy
.23fb	a0 09		ldy #$09			ldy 	#6+IExp
.23fd	51 2a		eor ($2a),y			eor 	(basicStack),y
.23ff	7a		ply				ply
.2400	29 40		and #$40			and 	#IFSign
.2402	f0 04		beq $2408			beq 	_CNLoopBack
.2404					_CNExitLoop:
.2404	20 be 27	jsr $27be			jsr 	StackClose		 			; return
.2407	60		rts				rts
.2408					_CNLoopBack:
.2408	20 e6 27	jsr $27e6			jsr 	STKLoadCodePosition 		; loop back
.240b	60		rts				rts
.240c					_CNOptimised:
.240c	5a		phy				phy
.240d	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.240f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2411	85 26		sta $26				sta 	zTemp2
.2413	c8		iny				iny
.2414	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2416	85 27		sta $27				sta 	zTemp2+1
.2418	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.241a					_CNIncrement:
.241a	c8		iny				iny
.241b	b1 26		lda ($26),y			lda 	(zTemp2),y
.241d	1a		inc a				inc 	a
.241e	91 26		sta ($26),y			sta 	(zTemp2),y
.2420	f0 f8		beq $241a			beq 	_CNIncrement
.2422	18		clc				clc 								; point zTemp0 to terminal value
.2423	a5 2a		lda $2a				lda 	basicStack
.2425	69 0a		adc #$0a			adc 	#10
.2427	85 22		sta $22				sta 	zTemp0
.2429	a5 2b		lda $2b				lda 	basicStack+1
.242b	69 00		adc #$00			adc 	#0
.242d	85 23		sta $23				sta 	zTemp0+1
.242f	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2431	b2 26		lda ($26)			lda 	(zTemp2)
.2433	d2 22		cmp ($22)			cmp 	(zTemp0)
.2435	b1 26		lda ($26),y			lda 	(zTemp2),y
.2437	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2439	c8		iny				iny
.243a	b1 26		lda ($26),y			lda 	(zTemp2),y
.243c	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.243e	7a		ply				ply
.243f	b0 c3		bcs $2404			bcs 	_CNExitLoop
.2441	80 c5		bra $2408			bra 	_CNLoopBack
.2443					_CNLoadValue:
.2443	5a		phy				phy
.2444	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2446	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2448	85 26		sta $26				sta 	zTemp2
.244a	c8		iny				iny
.244b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.244d	85 27		sta $27				sta 	zTemp2+1
.244f	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2451	b1 26		lda ($26),y			lda 	(zTemp2),y
.2453	85 08		sta $08				sta 	IFR0+IM0
.2455	c8		iny				iny
.2456	b1 26		lda ($26),y			lda 	(zTemp2),y
.2458	85 09		sta $09				sta 	IFR0+IM1
.245a	c8		iny				iny
.245b	b1 26		lda ($26),y			lda 	(zTemp2),y
.245d	85 0a		sta $0a				sta 	IFR0+IM2
.245f	c8		iny				iny
.2460	b1 26		lda ($26),y			lda 	(zTemp2),y
.2462	85 0b		sta $0b				sta 	IFR0+IExp
.2464	7a		ply				ply
.2465	60		rts				rts
.2466					_CNSaveValue:
.2466	5a		phy				phy
.2467	a0 00		ldy #$00			ldy 	#0
.2469	a5 08		lda $08				lda 	IFR0+IM0
.246b	91 26		sta ($26),y			sta 	(zTemp2),y
.246d	c8		iny				iny
.246e	a5 09		lda $09				lda 	IFR0+IM1
.2470	91 26		sta ($26),y			sta 	(zTemp2),y
.2472	c8		iny				iny
.2473	a5 0a		lda $0a				lda 	IFR0+IM2
.2475	91 26		sta ($26),y			sta 	(zTemp2),y
.2477	c8		iny				iny
.2478	a5 0b		lda $0b				lda 	IFR0+IExp
.247a	91 26		sta ($26),y			sta 	(zTemp2),y
.247c	7a		ply				ply
.247d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.247e					Command_GOSUB:
.247e	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; get line number
.2481	a9 52		lda #$52			lda 	#STK_GOSUB
.2483	20 a0 27	jsr $27a0			jsr 	StackOpen
.2486	20 d4 27	jsr $27d4			jsr 	STKSaveCodePosition 		; save return address on stack.
.2489	4c e0 11	jmp $11e0			jmp 	GotoR0
.248c					Command_RETURN:
.248c	a9 52		lda #$52			lda 	#STK_GOSUB
.248e	20 cc 27	jsr $27cc			jsr 	StackCheckFrame
.2491	20 e6 27	jsr $27e6			jsr 	STKLoadCodePosition 		; return
.2494	20 be 27	jsr $27be			jsr 	StackClose
.2497	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2498					IfCommand:
.2498	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; Get the if test.
.249b	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.249d	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.249f	d0 0c		bne $24ad			bne 	_IfStructured 				; we still support it.
.24a1	c8		iny				iny 								; consume THEN
.24a2	a2 08		ldx #$08			ldx 	#IFR0
.24a4	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; is it zero
.24a7	f0 01		beq $24aa			beq 	_IfFail 					; if fail, go to next line
.24a9	60		rts				rts 								; if THEN just continue
.24aa					_IfFail:
.24aa	4c cd 14	jmp $14cd			jmp 	RUNEndOfLine
.24ad					_IfStructured:
.24ad	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; is it zero
.24b0	d0 07		bne $24b9			bne 	_IfExit 					; if not, then continue normally.
.24b2	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.24b4	a2 85		ldx #$85			ldx 	#PR_ENDIF
.24b6	20 e2 24	jsr $24e2			jsr 	ScanForward 				; and run from there
.24b9					_IfExit:
.24b9	60		rts				rts
.24ba					ElseCode:
.24ba	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.24bc	aa		tax				tax 								; so just go to the structure exit
.24bd	20 e2 24	jsr $24e2			jsr 	ScanForward
.24c0	60		rts				rts
.24c1					EndIf:
.24c1	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.24c2					Command_REPEAT:
.24c2	a9 02		lda #$02			lda 	#STK_REPEAT
.24c4	20 a0 27	jsr $27a0			jsr 	StackOpen
.24c7	20 d4 27	jsr $27d4			jsr 	STKSaveCodePosition 		; save loop position
.24ca	60		rts				rts
.24cb					Command_UNTIL:
.24cb	a9 02		lda #$02			lda 	#STK_REPEAT
.24cd	20 cc 27	jsr $27cc			jsr 	StackCheckFrame
.24d0	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; work out the test
.24d3	a2 08		ldx #$08			ldx 	#IFR0
.24d5	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; check if zero
.24d8	f0 04		beq $24de			beq 	_CULoopBack 				; if so keep looping
.24da	20 be 27	jsr $27be			jsr 	StackClose		 			; return
.24dd	60		rts				rts
.24de					_CULoopBack:
.24de	20 e6 27	jsr $27e6			jsr 	STKLoadCodePosition 		; loop back
.24e1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.24e2					ScanForward:
.24e2	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.24e4	86 23		stx $23				stx 	zTemp0+1
.24e6	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.24e8					_ScanForwardLoop:
.24e8	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.24ea	d0 0a		bne $24f6			bne 	_ScanNoCheck
.24ec	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.24ee	c5 22		cmp $22				cmp 	zTemp0
.24f0	f0 49		beq $253b			beq 	_ScanExit
.24f2	c5 23		cmp $23				cmp 	zTemp0+1
.24f4	f0 45		beq $253b			beq 	_ScanExit
.24f6					_ScanNoCheck:
.24f6	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.24f8	c8		iny				iny
.24f9	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.24fb	f0 37		beq $2534			beq		_ScanDataItem
.24fd	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.24ff	f0 33		beq $2534			beq 	_ScanDataItem
.2501	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2503	f0 1b		beq $2520			beq 	_ScanNextLine
.2505	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2507	d0 01		bne $250a			bne 	_ScanNoShift
.2509	c8		iny				iny
.250a					_ScanNoShift:
.250a	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.250c	b0 da		bcs $24e8			bcs 	_ScanForwardLoop
.250e	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2510	90 d6		bcc $24e8			bcc 	_ScanForwardLoop
.2512	aa		tax				tax 								; access the table to get the adjustment.
.2513	18		clc				clc
.2514	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2516	7d 27 1a	adc $1a27,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2519	85 24		sta $24				sta 	zTemp1
.251b	10 cb		bpl $24e8			bpl		_ScanForwardLoop 			; error if -ve ?
.251d	4c 5e 26	jmp $265e		jmp	ErrorV_structure
.2520					_ScanNextLine:
.2520	18		clc				clc	 								; forward to next line.
.2521	b2 18		lda ($18)			lda 	(codePtr)
.2523	65 18		adc $18				adc 	codePtr
.2525	85 18		sta $18				sta 	codePtr
.2527	90 02		bcc $252b			bcc 	_ScanNoCarry
.2529	e6 19		inc $19				inc 	codePtr+1
.252b					_ScanNoCarry:
.252b	a0 03		ldy #$03			ldy 	#3
.252d	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.252f	d0 b7		bne $24e8			bne 	_ScanForwardLoop
.2531	4c 5e 26	jmp $265e		jmp	ErrorV_structure
.2534					_ScanDataItem:
.2534	98		tya				tya
.2535	38		sec				sec
.2536	71 18		adc ($18),y			adc 	(codePtr),y
.2538	a8		tay				tay
.2539	80 ad		bra $24e8			bra 	_ScanForwardLoop
.253b					_ScanExit:
.253b	c8		iny				iny 								; consume final token.
.253c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.253d					ScanProcedures:
.253d	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.253f	48		pha				pha
.2540	a5 19		lda $19				lda 	codePtr+1
.2542	48		pha				pha
.2543	5a		phy				phy
.2544	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2547	85 19		sta $19				sta 	codePtr+1
.2549	64 18		stz $18				stz 	codePtr
.254b					_SPLoop:
.254b	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.254d	f0 18		beq $2567			beq 	_SPExit
.254f	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2551	b1 18		lda ($18),y			lda 	(codePtr),y
.2553	c9 88		cmp #$88			cmp 	#PR_PROC
.2555	d0 03		bne $255a			bne 	_SPNext
.2557	20 6f 25	jsr $256f			jsr 	_SPSetupRecord
.255a					_SPNext:
.255a	18		clc				clc 								; forward to next
.255b	b2 18		lda ($18)			lda 	(codePtr)
.255d	65 18		adc $18				adc 	codePtr
.255f	85 18		sta $18				sta 	codePtr
.2561	90 e8		bcc $254b			bcc 	_SPLoop
.2563	e6 19		inc $19				inc 	codePtr+1
.2565	80 e4		bra $254b			bra 	_SPLoop
.2567					_SPExit:
.2567	7a		ply				ply
.2568	68		pla				pla
.2569	85 19		sta $19				sta 	codePtr+1
.256b	68		pla				pla
.256c	85 18		sta $18				sta 	codePtr
.256e	60		rts				rts
.256f					_SPSetupRecord:
.256f	c8		iny				iny 								; check identifier follows
.2570	b1 18		lda ($18),y			lda 	(codePtr),y
.2572	29 c0		and #$c0			and 	#$C0
.2574	c9 40		cmp #$40			cmp 	#$40
.2576	d0 27		bne $259f			bne 	_SPSyntax
.2578	20 68 2a	jsr $2a68			jsr 	VARGetInfo 					; get the information
.257b	20 87 27	jsr $2787			jsr 	ERRCheckRParen 				; check right bracket follows.
.257e	20 1a 2a	jsr $2a1a			jsr 	VARFind 					; already exists ?
.2581	b0 1f		bcs $25a2			bcs 	_SPUsed 					; error !
.2583	20 c6 29	jsr $29c6			jsr 	VARCreate 					; create, XA points to the data.
.2586	85 22		sta $22				sta 	zTemp0
.2588	86 23		stx $23				stx 	zTemp0+1
.258a	5a		phy				phy 								; save Y pos on stack
.258b	a0 01		ldy #$01			ldy 	#1
.258d	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.258f	92 22		sta ($22)			sta 	(zTemp0)
.2591	a5 19		lda $19				lda 	codePtr+1
.2593	91 22		sta ($22),y			sta 	(zTemp0),y
.2595	c8		iny				iny
.2596	68		pla				pla
.2597	91 22		sta ($22),y			sta 	(zTemp0),y
.2599	c8		iny				iny
.259a	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.259c	91 22		sta ($22),y			sta 	(zTemp0),y
.259e	60		rts				rts
.259f					_SPSyntax:
.259f	4c d2 25	jmp $25d2		jmp	ErrorV_syntax
.25a2					_SPUsed:
.25a2	4c 29 27	jmp $2729		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.25a5					Command_WHILE:
.25a5	5a		phy				phy 								; save position of the test
.25a6	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; work out the while test.
.25a9	a2 08		ldx #$08			ldx 	#IFR0
.25ab	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; check if zero
.25ae	f0 0e		beq $25be			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.25b0	98		tya				tya 								; position *after* test.
.25b1	7a		ply				ply 								; restore position before test, at WHILE
.25b2	88		dey				dey 								; so we execute the WHILE command again.
.25b3	48		pha				pha 								; push after test on the stack
.25b4	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.25b6	20 a0 27	jsr $27a0			jsr 	StackOpen
.25b9	20 d4 27	jsr $27d4			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.25bc	7a		ply				ply 								; restore the position *after* the test
.25bd	60		rts				rts
.25be					_WHExitLoop:
.25be	68		pla				pla 								; throw post loop position
.25bf	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.25c1	aa		tax				tax
.25c2	20 e2 24	jsr $24e2			jsr 	ScanForward
.25c5	60		rts				rts
.25c6					Command_WEND:
.25c6	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.25c8	20 cc 27	jsr $27cc			jsr 	StackCheckFrame
.25cb	20 e6 27	jsr $27e6			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.25ce	20 be 27	jsr $27be			jsr 	StackClose		 			; erase the frame
.25d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.25d2					ErrorV_syntax:
.25d2	20 bf 28	jsr $28bf		jsr	ErrorHandler
>25d5	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>25dd	45 72 72 6f 72 00
.25e3					ErrorV_range:
.25e3	20 bf 28	jsr $28bf		jsr	ErrorHandler
>25e6	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>25ee	52 61 6e 67 65 00
.25f4					ErrorV_value:
.25f4	20 bf 28	jsr $28bf		jsr	ErrorHandler
>25f7	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>25ff	75 65 00
.2602					ErrorV_type:
.2602	20 bf 28	jsr $28bf		jsr	ErrorHandler
>2605	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>260d	73 6d 61 74 63 68 00
.2614					ErrorV_unimplemented:
.2614	20 bf 28	jsr $28bf		jsr	ErrorHandler
>2617	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>261f	6c 65 6d 65 6e 74 65 64 00
.2628					ErrorV_assert:
.2628	20 bf 28	jsr $28bf		jsr	ErrorHandler
>262b	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2633	46 61 69 6c 00
.2638					ErrorV_internal:
.2638	20 bf 28	jsr $28bf		jsr	ErrorHandler
>263b	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2643	6c 20 45 72 72 6f 72 00
.264b					ErrorV_divzero:
.264b	20 bf 28	jsr $28bf		jsr	ErrorHandler
>264e	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2656	42 79 20 5a 65 72 6f 00
.265e					ErrorV_structure:
.265e	20 bf 28	jsr $28bf		jsr	ErrorHandler
>2661	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2669	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2676					ErrorV_stop:
.2676	20 bf 28	jsr $28bf		jsr	ErrorHandler
>2679	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2681	20 53 74 6f 70 70 65 64 00
.268a					ErrorV_data:
.268a	20 bf 28	jsr $28bf		jsr	ErrorHandler
>268d	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2695	44 61 74 61 00
.269a					ErrorV_redefine:
.269a	20 bf 28	jsr $28bf		jsr	ErrorHandler
>269d	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>26a5	65 64 65 66 69 6e 65 64 00
.26ae					ErrorV_index:
.26ae	20 bf 28	jsr $28bf		jsr	ErrorHandler
>26b1	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>26b9	61 79 20 49 6e 64 65 78 00
.26c2					ErrorV_memory:
.26c2	20 bf 28	jsr $28bf		jsr	ErrorHandler
>26c5	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>26cd	4d 65 6d 6f 72 79 00
.26d4					ErrorV_uninitialised:
.26d4	20 bf 28	jsr $28bf		jsr	ErrorHandler
>26d7	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>26df	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.26ef					ErrorV_string:
.26ef	20 bf 28	jsr $28bf		jsr	ErrorHandler
>26f2	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>26fa	69 6e 67 20 4c 65 6e 67 74 68 00
.2705					ErrorV_variable:
.2705	20 bf 28	jsr $28bf		jsr	ErrorHandler
>2708	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2710	65 20 4d 69 73 73 69 6e 67 00
.271a					ErrorV_stack:
.271a	20 bf 28	jsr $28bf		jsr	ErrorHandler
>271d	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2725	75 6c 6c 00
.2729					ErrorV_dupproc:
.2729	20 bf 28	jsr $28bf		jsr	ErrorHandler
>272c	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2734	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2744	65 64 00
.2747					ErrorV_unknown:
.2747	20 bf 28	jsr $28bf		jsr	ErrorHandler
>274a	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2752	20 50 72 6f 63 65 64 75 72 65 00
.275d					ErrorV_break:
.275d	20 bf 28	jsr $28bf		jsr	ErrorHandler
>2760	05 42 72 65 61 6b 00			.text	5,"Break",0
.2767					ErrorV_line:
.2767	20 bf 28	jsr $28bf		jsr	ErrorHandler
>276a	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2772	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.277f					ERRCheckLParen:
.277f	b1 18		lda ($18),y			lda 	(codePtr),y
.2781	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2783	d0 18		bne $279d			bne 	ERRSyntaxError
.2785	c8		iny				iny
.2786	60		rts				rts
.2787					ERRCheckRParen:
.2787	b1 18		lda ($18),y			lda 	(codePtr),y
.2789	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.278b	d0 10		bne $279d			bne 	ERRSyntaxError
.278d	c8		iny				iny
.278e	60		rts				rts
.278f					ERRCheckComma:
.278f	b1 18		lda ($18),y			lda 	(codePtr),y
.2791	c9 99		cmp #$99			cmp 	#PR_COMMA
.2793	d0 08		bne $279d			bne 	ERRSyntaxError
.2795	c8		iny				iny
.2796	60		rts				rts
.2797					ERRCheckA:
.2797	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2799	d0 02		bne $279d			bne 	ERRSyntaxError
.279b	c8		iny				iny
.279c	60		rts				rts
.279d					ERRSyntaxError:
.279d	4c d2 25	jmp $25d2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.27a0					StackOpen:
.27a0	48		pha				pha 								; save frame byte
.27a1	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.27a3	0a		asl a				asl 	a 							; claim twice this for storage
.27a4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.27a6	38		sec				sec 								; so basically subtracting from
.27a7	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.27a9	85 2a		sta $2a				sta 	basicStack
.27ab	b0 0a		bcs $27b7			bcs 	_SONoBorrow
>27ad	db						.byte 	$DB
.27ae	c6 2b		dec $2b				dec 	basicStack+1
.27b0	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.27b2	cd 20 06	cmp $0620			cmp 	basicStackEnd
.27b5	f0 04		beq $27bb			beq 	_SOMemory
.27b7					_SONoBorrow:
.27b7	68		pla				pla 								; get marker back and write at TOS
.27b8	92 2a		sta ($2a)			sta 	(basicStack)
.27ba	60		rts				rts
.27bb					_SOMemory:
.27bb	4c 1a 27	jmp $271a		jmp	ErrorV_stack
.27be					StackClose:
.27be	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.27c0	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.27c2	0a		asl a				asl 	a 							; claim twice this.
.27c3	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.27c5	85 2a		sta $2a				sta 	basicStack
.27c7	90 02		bcc $27cb			bcc 	_SCExit
.27c9	e6 2b		inc $2b				inc 	basicStack+1
.27cb					_SCExit:
.27cb	60		rts				rts
.27cc					StackCheckFrame:
.27cc	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.27ce	d0 01		bne $27d1			bne 	_SCFError 					; different, we have structures mixed up
.27d0	60		rts				rts
.27d1					_SCFError:
.27d1	4c 5e 26	jmp $265e		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.27d4					STKSaveCodePosition:
.27d4	5a		phy				phy
.27d5	98		tya				tya 								; save Y at offset 1.
.27d6	a0 01		ldy #$01			ldy 	#1
.27d8	91 2a		sta ($2a),y			sta 	(basicStack),y
.27da	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.27dc	c8		iny				iny
.27dd	91 2a		sta ($2a),y			sta 	(basicStack),y
.27df	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.27e1	c8		iny				iny
.27e2	91 2a		sta ($2a),y			sta 	(basicStack),y
.27e4	7a		ply				ply
.27e5	60		rts				rts
.27e6					STKLoadCodePosition:
.27e6	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.27e8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27ea	85 19		sta $19				sta 	codePtr+1
.27ec	88		dey				dey
.27ed	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27ef	85 18		sta $18				sta 	codePtr
.27f1	88		dey				dey
.27f2	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.27f4	a8		tay				tay
.27f5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.27f6					StackReset:
.27f6	48		pha				pha 								; save top of memory
.27f7	3a		dec a				dec 	a  							; end of stack = previous byte
.27f8	85 2b		sta $2b				sta 	basicStack+1
.27fa	a9 ff		lda #$ff			lda 	#$FF
.27fc	85 2a		sta $2a				sta 	basicStack
.27fe	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2800	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2802	68		pla				pla 								; allocate pages for stack.
.2803	38		sec				sec
.2804	e9 02		sbc #$02			sbc 	#STACKPAGES
.2806	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2809	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.280a					StringConcrete:
.280a	5a		phy				phy 								; save position on stack
.280b	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.280d	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.280f	b0 41		bcs $2852			bcs 	_SALengthError
.2811	18		clc				clc 								; length of the new string
.2812	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2814	90 02		bcc $2818			bcc 	_SAHaveLength
.2816	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2818					_SAHaveLength:
.2818	48		pha				pha 								; save length to be allocated for concreting.
.2819	38		sec				sec
.281a	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.281c	6d 22 06	adc $0622			adc 	stringMemory
.281f	8d 22 06	sta $0622			sta 	stringMemory
.2822	85 26		sta $26				sta 	zTemp2 						; update storage address
.2824	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2826	6d 23 06	adc $0623			adc 	stringMemory+1
.2829	8d 23 06	sta $0623			sta 	stringMemory+1
.282c	85 27		sta $27				sta 	zTemp2+1
.282e	68		pla				pla 								; save length allocated in +0
.282f	92 26		sta ($26)			sta 	(zTemp2)
.2831	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2833	a0 01		ldy #$01			ldy 	#1
.2835	91 26		sta ($26),y			sta 	(zTemp2),y
.2837					_SACopyNewString:
.2837	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2839	a0 02		ldy #$02			ldy 	#2
.283b	91 26		sta ($26),y			sta 	(zTemp2),y
.283d	aa		tax				tax 								; bytes to copy
.283e	f0 0c		beq $284c			beq 	_SACopyExit
.2840	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2842					_SACopyNSLoop:
.2842	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2844	c8		iny				iny 								; write two on in string storage
.2845	c8		iny				iny
.2846	91 26		sta ($26),y			sta 	(zTemp2),y
.2848	88		dey				dey
.2849	ca		dex				dex									; until copied all the string lengths.
.284a	d0 f6		bne $2842			bne 	_SACopyNSLoop
.284c					_SACopyExit:
.284c	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.284e	a5 26		lda $26				lda 	zTemp2
.2850	7a		ply				ply
.2851	60		rts				rts
.2852					_SALengthError:
.2852	4c ef 26	jmp $26ef		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2855					StringSystemInitialise:
.2855	3a		dec a				dec 	a 							; make last byte of previous page.
.2856	8d 23 06	sta $0623			sta 	stringMemory+1
.2859	85 23		sta $23				sta 	zTemp0+1
.285b	a9 ff		lda #$ff			lda 	#$FF
.285d	8d 22 06	sta $0622			sta 	stringMemory
.2860	85 22		sta $22				sta 	zTemp0
.2862	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2864	92 22		sta ($22)			sta 	(zTemp0)
.2866	60		rts				rts
.2867					StringSpaceInitialise:
.2867	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2869	8d 21 06	sta $0621			sta 	stringInitialised
.286c	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.286f	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2872	ad 23 06	lda $0623			lda 	stringMemory+1
.2875	3a		dec a				dec 	a
.2876	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2879	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.287c	60		rts				rts
.287d					StringTempAllocate:
.287d	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.287f	b0 2e		bcs $28af			bcs 	_STALength
.2881	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2884	30 05		bmi $288b			bmi 	_STAAllocate
.2886	48		pha				pha 								; save value to subtract.
.2887	20 67 28	jsr $2867			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.288a	68		pla				pla 								; restore it
.288b					_STAAllocate:
.288b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.288d	18		clc				clc  								; deliberate allows one more
.288e	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.2891	8d 24 06	sta $0624			sta 	stringTempPointer
.2894	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2896	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2898	ad 25 06	lda $0625			lda 	stringTempPointer+1
.289b	69 ff		adc #$ff			adc 	#$FF
.289d	8d 25 06	sta $0625			sta 	stringTempPointer+1
.28a0	85 2d		sta $2d				sta 	zsTemp+1
.28a2	85 09		sta $09				sta 	IFR0+IM1
.28a4	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.28a6	a9 80		lda #$80			lda 	#$80
.28a8	85 0b		sta $0b				sta 	IFR0+IExp
.28aa	a9 00		lda #$00			lda 	#0 							; clear the target string
.28ac	92 2c		sta ($2c)			sta 	(zsTemp)
.28ae	60		rts				rts
.28af					_STALength:
.28af	4c ef 26	jmp $26ef		jmp	ErrorV_string
.28b2					StringTempWrite:
.28b2	5a		phy				phy
.28b3	48		pha				pha
.28b4	b2 2c		lda ($2c)			lda 	(zsTemp)
.28b6	1a		inc a				inc 	a
.28b7	92 2c		sta ($2c)			sta 	(zsTemp)
.28b9	a8		tay				tay
.28ba	68		pla				pla
.28bb	91 2c		sta ($2c),y			sta 	(zsTemp),y
.28bd	7a		ply				ply
.28be	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.28bf					ErrorHandler:
.28bf	fa		plx				plx 								; get address of msg
.28c0	7a		ply				ply
.28c1	e8		inx				inx 								; bump past RTS
.28c2	d0 01		bne $28c5			bne 	_EHNoInc
.28c4	c8		iny				iny
.28c5					_EHNoInc:
.28c5	20 f4 ff	jsr $fff4			jsr	 	OSWriteString 				; print it.
.28c8	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.28cb	0d 27 06	ora $0627			ora 	ERRLine+1
.28ce	f0 10		beq $28e0			beq 	_EHNoNumber
.28d0	a2 e3		ldx #$e3			ldx 	#_EHAtMsg & $FF
.28d2	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.28d4	20 f4 ff	jsr $fff4			jsr 	OSWriteString
.28d7	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.28da	ae 27 06	ldx $0627			ldx 	ERRLine+1
.28dd	20 e8 28	jsr $28e8			jsr 	WriteIntXA
.28e0					_EHNoNumber:
.28e0	4c 11 29	jmp $2911			jmp 	WarmStartNewLine
.28e3					_EHAtMsg:
>28e3	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.28e8					_EHAtMsg1:
.28e8					WriteIntXA:
.28e8	da		phx				phx
.28e9	48		pha				pha
.28ea	a2 08		ldx #$08			ldx 	#IFR0
.28ec	20 74 30	jsr $3074			jsr 	IFloatPushRx
.28ef	68		pla				pla
.28f0	20 27 31	jsr $3127			jsr 	IFloatSetByte
.28f3	68		pla				pla
.28f4	85 09		sta $09				sta 	IFR0+IM1
.28f6	a9 0a		lda #$0a			lda 	#10 						; decimal
.28f8	20 c7 2e	jsr $2ec7			jsr 	IFloatIntegerToStringR0	 	; convert
.28fb	20 f4 ff	jsr $fff4			jsr 	OSWriteString 				; print
.28fe	a2 08		ldx #$08			ldx 	#IFR0
.2900	20 95 30	jsr $3095			jsr 	IFloatPullRx
.2903	60		rts				rts
.2904					NotImplemented:
.2904	4c 14 26	jmp $2614		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2907					WarmStart:
.2907	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2909	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.290c	a9 6b		lda #$6b			lda 	#"k"
.290e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2911					WarmStartNewLine:
.2911	a9 0d		lda #$0d			lda 	#13
.2913	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2916					WarmStartNoPrompt:
.2916	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2918	9a		txs				txs
.2919	20 df ff	jsr $ffdf			jsr 	OSEnterLine 				; edit
.291c	e8		inx				inx 								; skip length byte to make it ASCIIZ
.291d	d0 01		bne $2920			bne 	_WSSkip
.291f	c8		iny				iny
.2920					_WSSkip:
.2920	86 26		stx $26				stx 	zTemp2 						; save address
.2922	84 27		sty $27				sty 	zTemp2+1
.2924	a2 51		ldx #$51			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2926	a0 29		ldy #$29			ldy 	#TOKGetCharacter >> 8
.2928	38		sec				sec
.2929	20 0d 20	jsr $200d			jsr 	TOKTokenise
.292c	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.292f	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2932	d0 0b		bne $293f			bne 	_WSLineEdit
.2934	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2936	85 18		sta $18				sta 	codePtr
.2938	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.293a	85 19		sta $19				sta 	codePtr+1
.293c	4c d8 14	jmp $14d8			jmp 	RUNNewLine
.293f					_WSLineEdit:
.293f	20 e8 1e	jsr $1ee8			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2942	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2945	c9 04		cmp #$04			cmp 	#4
.2947	f0 03		beq $294c			beq 	_WSNoInsert
.2949	20 32 1f	jsr $1f32			jsr 	PGMInsertLine				; if not, maybe insert
.294c					_WSNoInsert:
.294c	20 44 10	jsr $1044			jsr 	ClearCode 					; clear variables etc.
.294f	80 c5		bra $2916			bra 	WarmStartNoPrompt
.2951					TOKGetCharacter:
.2951	b2 26		lda ($26)			lda 	(zTemp2)
.2953	90 06		bcc $295b			bcc 	_GSNoIncrement
.2955	e6 26		inc $26				inc 	zTemp2
.2957	d0 02		bne $295b			bne 	_GSNoIncrement
.2959	e6 27		inc $27				inc 	zTemp2+1
.295b					_GSNoIncrement:
.295b	c9 00		cmp #$00			cmp 	#0
.295d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.295e					VARArrayLookup:
.295e	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2960	86 23		stx $23				stx 	zTemp0+1
.2962	b2 22		lda ($22)			lda 	(zTemp0)
.2964	48		pha				pha
.2965	5a		phy				phy
.2966	a0 01		ldy #$01			ldy 	#1
.2968	b1 22		lda ($22),y			lda 	(zTemp0),y
.296a	7a		ply				ply
.296b	48		pha				pha
.296c	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; R0 now contains the index
.296f	68		pla				pla 								; array address to zTemp0
.2970	85 23		sta $23				sta 	zTemp0+1
.2972	68		pla				pla
.2973	85 22		sta $22				sta 	zTemp0
.2975	5a		phy				phy 								; save codePtr position.
.2976	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2978	b1 22		lda ($22),y			lda 	(zTemp0),y
.297a	48		pha				pha 								; save bit 15 on stack.
.297b	29 7f		and #$7f			and 	#$7F
.297d	85 24		sta $24				sta 	zTemp1
.297f	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2981	d2 22		cmp ($22)			cmp 	(zTemp0)
.2983	a5 09		lda $09				lda 	IFR0+IM1
.2985	e5 24		sbc $24				sbc 	zTemp1
.2987	b0 3a		bcs $29c3			bcs 	_VALIndex
.2989	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.298b	c9 40		cmp #$40			cmp 	#$40
.298d	b0 34		bcs $29c3			bcs 	_VALIndex
.298f	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2991	26 09		rol $09				rol 	IFR0+IM1
.2993	fa		plx				plx 								; get msb of size -> X
.2994	30 04		bmi $299a			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2996	06 08		asl $08				asl 	IFR0+IM0
.2998	26 09		rol $09				rol 	IFR0+IM1
.299a					_VARNotX4:
.299a	18		clc				clc 								; add the two for the size bytes
.299b	a5 08		lda $08				lda 	IFR0+IM0
.299d	69 02		adc #$02			adc 	#2
.299f	85 08		sta $08				sta 	IFR0+IM0
.29a1	90 02		bcc $29a5			bcc 	_VARNoCarry1
.29a3	e6 09		inc $09				inc 	IFR0+IM1
.29a5					_VARNoCarry1:
.29a5	18		clc				clc 								; calculate the element address and push to stack.
.29a6	a5 08		lda $08				lda 	IFR0+IM0
.29a8	65 22		adc $22				adc 	zTemp0
.29aa	48		pha				pha
.29ab	a5 09		lda $09				lda 	IFR0+IM1
.29ad	65 23		adc $23				adc 	zTemp0+1
.29af	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.29b1	30 04		bmi $29b7			bmi 	_VARHasSubLevel
.29b3	aa		tax				tax 								; address in XA
.29b4	68		pla				pla
.29b5	7a		ply				ply 								; restore Y and exit
.29b6	60		rts				rts
.29b7					_VARHasSubLevel:
.29b7	aa		tax				tax 								; get link address in XA
.29b8	68		pla				pla
.29b9	7a		ply				ply 								; restore code position.
.29ba	48		pha				pha
.29bb	20 8f 27	jsr $278f			jsr 	ERRCheckComma 				; comma required.
.29be	68		pla				pla
.29bf	20 5e 29	jsr $295e			jsr 	VARArrayLookup 				; call it recursively
.29c2	60		rts				rts
.29c3					_VALIndex:
.29c3	4c ae 26	jmp $26ae		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.29c6					VARCreate:
.29c6	5a		phy				phy
.29c7	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.29c9	a2 00		ldx #$00			ldx 	#0
.29cb	20 61 10	jsr $1061			jsr 	AllocateMemory
.29ce	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.29d0	86 25		stx $25				stx 	zTemp1+1
.29d2	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.29d4	ad 2a 06	lda $062a			lda 	VARHash
.29d7	91 24		sta ($24),y			sta 	(zTemp1),y
.29d9	c8		iny				iny 								; put address of name into +3,+4
.29da	ad 28 06	lda $0628			lda 	VARNameAddress
.29dd	91 24		sta ($24),y			sta 	(zTemp1),y
.29df	c8		iny				iny
.29e0	ad 29 06	lda $0629			lda 	VARNameAddress+1
.29e3	91 24		sta ($24),y			sta 	(zTemp1),y
.29e5	ad 2b 06	lda $062b			lda 	VARType
.29e8	29 01		and #$01			and 	#1
.29ea	f0 06		beq $29f2			beq 	_CVNotString
.29ec	a0 08		ldy #$08			ldy 	#5+3
.29ee	a9 80		lda #$80			lda 	#$80
.29f0	91 24		sta ($24),y			sta 	(zTemp1),y
.29f2					_CVNotString:
.29f2	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.29f5	85 22		sta $22				sta 	zTemp0
.29f7	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.29fa	85 23		sta $23				sta 	zTemp0+1
.29fc	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.29fe	b2 22		lda ($22)			lda 	(zTemp0)
.2a00	92 24		sta ($24)			sta 	(zTemp1)
.2a02	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a04	91 24		sta ($24),y			sta 	(zTemp1),y
.2a06	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2a08	92 22		sta ($22)			sta 	(zTemp0)
.2a0a	a5 25		lda $25				lda 	zTemp1+1
.2a0c	91 22		sta ($22),y			sta 	(zTemp0),y
.2a0e	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2a10	a6 25		ldx $25				ldx 	zTemp1+1
.2a12	18		clc				clc 								; add 5 to point to the data.
.2a13	69 05		adc #$05			adc 	#5
.2a15	90 01		bcc $2a18			bcc 	_VCNoCarry
.2a17	e8		inx				inx
.2a18					_VCNoCarry:
.2a18	7a		ply				ply
.2a19	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2a1a					VARFind:
.2a1a	5a		phy				phy
.2a1b	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2a1d	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a1f	85 25		sta $25				sta 	zTemp1+1
.2a21	f0 1c		beq $2a3f			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2a23	b2 22		lda ($22)			lda 	(zTemp0)
.2a25	85 24		sta $24				sta 	zTemp1
.2a27					_VFLoop:
.2a27	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2a29	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a2b	cd 2a 06	cmp $062a			cmp 	VARHash
.2a2e	f0 12		beq $2a42			beq 	_VFHashesMatch 				; if so, check the name.
.2a30					_VFNext:
.2a30	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2a32	aa		tax				tax
.2a33	a0 01		ldy #$01			ldy 	#1
.2a35	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a37	85 25		sta $25				sta 	zTemp1+1
.2a39	86 24		stx $24				stx 	zTemp1
.2a3b	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2a3d	d0 e8		bne $2a27			bne 	_VFLoop
.2a3f					_VFExitFail:
.2a3f	7a		ply				ply
.2a40	18		clc				clc
.2a41	60		rts				rts
.2a42					_VFHashesMatch:
.2a42	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2a44	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a46	85 26		sta $26				sta 	zTemp2
.2a48	c8		iny				iny
.2a49	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a4b	85 27		sta $27				sta 	zTemp2+1
.2a4d	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2a4f					_VFNameCompLoop:
.2a4f	c8		iny				iny 								; char at a time
.2a50	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2a53	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2a55	d0 d9		bne $2a30			bne 	_VFNext						; next entry if different.
.2a57	c9 7c		cmp #$7c			cmp 	#$7C
.2a59	90 f4		bcc $2a4f			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2a5b	18		clc				clc
.2a5c	a5 24		lda $24				lda 	zTemp1
.2a5e	a6 25		ldx $25				ldx 	zTemp1+1
.2a60	69 05		adc #$05			adc 	#5
.2a62	90 01		bcc $2a65			bcc 	_VFNNoCarry
.2a64	e8		inx				inx
.2a65					_VFNNoCarry:
.2a65	7a		ply				ply
.2a66	38		sec				sec
.2a67	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a68					VARGetInfo:
.2a68	98		tya				tya 								; calculate the address of the identifier start.
.2a69	18		clc				clc
.2a6a	65 18		adc $18				adc 	codePtr
.2a6c	8d 28 06	sta $0628			sta 	VARNameAddress
.2a6f	a5 19		lda $19				lda 	codePtr+1
.2a71	69 00		adc #$00			adc 	#0
.2a73	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a76	9c 2a 06	stz $062a			stz 	VARHash
.2a79	a2 00		ldx #$00			ldx 	#0
.2a7b					_VARCopyName:
.2a7b	18		clc				clc 								; update the sum hash.
.2a7c	ad 2a 06	lda $062a			lda 	VARHash
.2a7f	71 18		adc ($18),y			adc 	(codePtr),y
.2a81	8d 2a 06	sta $062a			sta 	VARHash
.2a84	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a86	c8		iny				iny
.2a87	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a8a	e8		inx				inx
.2a8b	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a8d	90 ec		bcc $2a7b			bcc 	_VARCopyName
.2a8f	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a92	29 03		and #$03			and 	#3 							; type is 0-3
.2a94	0a		asl a				asl 	a
.2a95	0a		asl a				asl 	a
.2a96	85 22		sta $22				sta 	zTemp0
.2a98	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2a9b	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2a9d	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2a9f	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2aa0	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2aa2	85 22		sta $22				sta 	zTemp0
.2aa4	8d 4c 06	sta $064c			sta 	VARHashEntry
.2aa7	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2aa9	69 00		adc #$00			adc 	#0
.2aab	85 23		sta $23				sta 	zTemp0+1
.2aad	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2ab0	60		rts				rts
.2ab1					VARClearHashTables:
.2ab1	a2 00		ldx #$00			ldx 	#0
.2ab3					_VCHRLoop:
.2ab3	a9 00		lda #$00			lda 	#0
.2ab5	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2ab8	e8		inx				inx
.2ab9	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2abb	d0 f6		bne $2ab3			bne 	_VCHRLoop
.2abd	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2abe					VARCheckSimple:
.2abe	aa		tax				tax 								; save in X
.2abf	b1 18		lda ($18),y			lda 	(codePtr),y
.2ac1	c9 7c		cmp #$7c			cmp 	#$7C
.2ac3	d0 15		bne $2ada			bne 	_VCSComplex
.2ac5	c8		iny				iny 								; consume the second byte, the type.
.2ac6	8a		txa				txa  								; character (40-7F) x 4
.2ac7	0a		asl a				asl 	a
.2ac8	0a		asl a				asl  	a
.2ac9	18		clc				clc
.2aca	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2acc	85 08		sta $08				sta 	IFR0+IM0
.2ace	a9 06		lda #$06			lda 	#FastVariables >> 8
.2ad0	69 00		adc #$00			adc 	#0
.2ad2	85 09		sta $09				sta 	IFR0+IM1
.2ad4	64 0a		stz $0a				stz 	IFR0+IM2
.2ad6	64 0b		stz $0b				stz 	IFR0+IExp
.2ad8	38		sec				sec 								; it's a reference
.2ad9	60		rts				rts
.2ada					_VCSComplex:
.2ada	88		dey				dey	 								; extract information.
.2adb	20 68 2a	jsr $2a68			jsr 	VARGetInfo
.2ade	20 1a 2a	jsr $2a1a			jsr 	VARFind 					; search for variable
.2ae1	b0 0a		bcs $2aed			bcs 	_VCSHaveVariable
.2ae3	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2ae6	29 02		and #$02			and 	#2
.2ae8	d0 25		bne $2b0f			bne 	_VCNoCreate
.2aea	20 c6 29	jsr $29c6			jsr 	VARCreate 					; create variable
.2aed					_VCSHaveVariable:
.2aed	48		pha				pha 								; save LSB on the stack
.2aee	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2af1	6a		ror a				ror 	a
.2af2	6a		ror a				ror 	a
.2af3	68		pla				pla 								; restore LSB
.2af4	90 08		bcc $2afe			bcc 	_VCSNotArray 				; skip if not an array
.2af6	20 5e 29	jsr $295e			jsr 	VARArrayLookup 				; look for subscripts.
.2af9	48		pha				pha 								; check )
.2afa	20 87 27	jsr $2787			jsr 	ERRCheckRParen
.2afd	68		pla				pla
.2afe					_VCSNotArray:
.2afe	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2b00	85 08		sta $08				sta 	IFR0+IM0
.2b02	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2b04	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2b07	6a		ror a				ror 	a
.2b08	a9 00		lda #$00			lda 	#0
.2b0a	6a		ror a				ror 	a 							; now $00 or $80
.2b0b	85 0b		sta $0b				sta 	IFR0+IExp
.2b0d	38		sec				sec 								; it's a reference
.2b0e	60		rts				rts
.2b0f					_VCNoCreate:
.2b0f	4c d4 26	jmp $26d4		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2b12					IFInitialise:
.2b12	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2b15	60		rts				rts
.2b16					IFloatSubtract:
.2b16	da		phx				phx
.2b17	a2 08		ldx #$08			ldx 	#IFR0
.2b19	20 30 31	jsr $3130			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2b1c	fa		plx				plx
.2b1d					IFloatAdd:
.2b1d	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2b1f	05 0b		ora $0b				ora 	IFR0+IExp
.2b21	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2b23	d0 4e		bne $2b73			bne 	_IFloatAddDecimals 			; floating point version.
.2b25					_IFAddSubMantissa:
.2b25	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2b27	45 0b		eor $0b				eor 	IFR0+IExp
.2b29	29 40		and #$40			and 	#IFSign
.2b2b	d0 21		bne $2b4e			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2b2d	18		clc				clc 								; do the actual addition
.2b2e	a5 08		lda $08				lda 	IFR0+IM0
.2b30	75 00		adc $00,x			adc 		IM0,x
.2b32	85 08		sta $08				sta 	IFR0+IM0
.2b34	a5 09		lda $09				lda 	IFR0+IM1
.2b36	75 01		adc $01,x			adc 		IM1,x
.2b38	85 09		sta $09				sta 	IFR0+IM1
.2b3a	a5 0a		lda $0a				lda 	IFR0+IM2
.2b3c	75 02		adc $02,x			adc 		IM2,x
.2b3e	85 0a		sta $0a				sta 	IFR0+IM2
.2b40	10 29		bpl $2b6b			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2b42	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2b44	20 54 31	jsr $3154			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2b47	20 7e 31	jsr $317e			jsr 	IFloatIncExponent
.2b4a	d0 1f		bne $2b6b			bne 	_IFloatAddExit
.2b4c	38		sec				sec 								; overflowed numerically.
.2b4d	60		rts				rts
.2b4e					_IFloatSubMantissa:
.2b4e	38		sec				sec 								; do the subtraction R0-Rx
.2b4f	a5 08		lda $08				lda 	IFR0+IM0
.2b51	f5 00		sbc $00,x			sbc 		IM0,x
.2b53	85 08		sta $08				sta 	IFR0+IM0
.2b55	a5 09		lda $09				lda 	IFR0+IM1
.2b57	f5 01		sbc $01,x			sbc 		IM1,x
.2b59	85 09		sta $09				sta 	IFR0+IM1
.2b5b	a5 0a		lda $0a				lda 	IFR0+IM2
.2b5d	f5 02		sbc $02,x			sbc 		IM2,x
.2b5f	85 0a		sta $0a				sta 	IFR0+IM2
.2b61	b0 08		bcs $2b6b			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b63	a2 08		ldx #$08			ldx 	#IFR0
.2b65	20 38 31	jsr $3138			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b68	20 30 31	jsr $3130			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b6b					_IFloatAddExit:
.2b6b	18		clc				clc
.2b6c	60		rts				rts
.2b6d					_IFloatZeroAdd:
.2b6d	fa		plx				plx 								; return this value in R0
.2b6e	20 b6 30	jsr $30b6			jsr 	IFloatCopyFromRegister
.2b71	18		clc				clc
.2b72	60		rts				rts
.2b73					_IFloatAddDecimals:
.2b73	20 1e 31	jsr $311e			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b76	f0 f3		beq $2b6b			beq 	_IFloatAddExit
.2b78	20 5c 31	jsr $315c			jsr 	IFloatNormalise 			; normalise RX
.2b7b	da		phx				phx 								; normalise R0
.2b7c	a2 08		ldx #$08			ldx 	#IFR0
.2b7e	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.2b81	f0 ea		beq $2b6d			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b83	20 5c 31	jsr $315c			jsr 	IFloatNormalise
.2b86	fa		plx				plx
.2b87	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b89	29 3f		and #$3f			and 	#IFXMask
.2b8b	38		sec				sec
.2b8c	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b8e	85 20		sta $20				sta 	iTemp0
.2b90	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b92	29 3f		and #$3f			and 	#IFXMask
.2b94	38		sec				sec
.2b95	e9 20		sbc #$20			sbc 	#$20
.2b97	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b99	b0 02		bcs $2b9d			bcs 	_IFloatHaveLarger
.2b9b	a5 20		lda $20				lda 	iTemp0
.2b9d					_IFloatHaveLarger:
.2b9d	18		clc				clc 								; get the actual one back.
.2b9e	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ba0	20 ad 2b	jsr $2bad			jsr 	_IFShiftXToA
.2ba3	da		phx				phx
.2ba4	a2 08		ldx #$08			ldx 	#IFR0
.2ba6	20 ad 2b	jsr $2bad			jsr 	_IFShiftXToA
.2ba9	fa		plx				plx
.2baa	4c 25 2b	jmp $2b25			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2bad					_IFShiftXToA:
.2bad	8d d6 06	sta $06d6			sta 	IFTarget
.2bb0	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; check adding zero ?
.2bb3	f0 11		beq $2bc6			beq 	_IFSXExit
.2bb5					_IFSXLoop:
.2bb5	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2bb7	29 3f		and #$3f			and 	#IFXMask
.2bb9	cd d6 06	cmp $06d6			cmp 	IFTarget
.2bbc	f0 08		beq $2bc6			beq 	_IFSXExit
.2bbe	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.2bc1	20 7e 31	jsr $317e			jsr 	IFloatIncExponent
.2bc4	80 ef		bra $2bb5			bra 	_IFSXLoop
.2bc6					_IFSXExit:
.2bc6	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2bc7					IFloatMultiply:
.2bc7	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2bca	20 7f 2c	jsr $2c7f			jsr 	IFCalculateNewSign
.2bcd	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2bcf	05 0b		ora $0b				ora 	IFR0+IExp
.2bd1	29 3f		and #$3f			and 	#IFXMask
.2bd3	15 01		ora $01,x			ora 	IM1,x
.2bd5	05 09		ora $09				ora 	IFR0+IM1
.2bd7	15 02		ora $02,x			ora 	IM2,x
.2bd9	05 0a		ora $0a				ora 	IFR0+IM2
.2bdb	d0 0a		bne $2be7			bne 	_IFMStandard
.2bdd	20 01 31	jsr $3101			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2be0	ad d8 06	lda $06d8			lda 	IFNewSign
.2be3	85 0b		sta $0b				sta 	IFR0+IExp
.2be5	18		clc				clc
.2be6	60		rts				rts
.2be7					_IFMStandard:
.2be7	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2be9	20 76 2c	jsr $2c76			jsr 	IFMSignExtend
.2bec	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bef	a5 0b		lda $0b				lda 	IFR0+IExp
.2bf1	20 76 2c	jsr $2c76			jsr 	IFMSignExtend
.2bf4	18		clc				clc
.2bf5	6d d7 06	adc $06d7			adc 	IFNewExponent
.2bf8	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bfb	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2bfd	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister
.2c00	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2c02	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2c05					_IFMLoop:
.2c05	a2 14		ldx #$14			ldx 	#IFRTemp
.2c07	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.2c0a	f0 3a		beq $2c46			beq 	_IFMExit
.2c0c	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2c0f	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2c11	10 03		bpl $2c16			bpl	 	_IFMTargetOkay
.2c13	20 67 2c	jsr $2c67			jsr 	_IFMShiftAll
.2c16					_IFMTargetOkay:
.2c16	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2c18	29 01		and #$01			and 	#1
.2c1a	f0 16		beq $2c32			beq 	_IFMNoAdd
.2c1c	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2c1f	18		clc				clc
.2c20	a5 08		lda $08				lda 	IFR0+IM0
.2c22	75 00		adc $00,x			adc 		IM0,x
.2c24	85 08		sta $08				sta 	IFR0+IM0
.2c26	a5 09		lda $09				lda 	IFR0+IM1
.2c28	75 01		adc $01,x			adc 		IM1,x
.2c2a	85 09		sta $09				sta 	IFR0+IM1
.2c2c	a5 0a		lda $0a				lda 	IFR0+IM2
.2c2e	75 02		adc $02,x			adc 		IM2,x
.2c30	85 0a		sta $0a				sta 	IFR0+IM2
.2c32					_IFMNoAdd:
.2c32	a5 0a		lda $0a				lda 	IFR0+IM2
.2c34	10 03		bpl $2c39			bpl 	_IFMResultOkay
.2c36	20 67 2c	jsr $2c67			jsr 	_IFMShiftAll
.2c39					_IFMResultOkay:
.2c39	a2 14		ldx #$14			ldx 	#IFRTemp
.2c3b	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.2c3e	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c41	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.2c44	80 bf		bra $2c05			bra 	_IFMLoop
.2c46					_IFMExit:
.2c46	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2c49	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2c4b	90 0f		bcc $2c5c			bcc 	_IFMOkay
.2c4d	c9 e0		cmp #$e0			cmp 	#$E0
.2c4f	b0 0b		bcs $2c5c			bcs 	_IFMOkay
.2c51	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2c53	f0 10		beq $2c65			beq 	_IFMError
.2c55	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2c57	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2c5a	18		clc				clc
.2c5b	60		rts				rts
.2c5c					_IFMOkay:
.2c5c	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c5e	0d d8 06	ora $06d8			ora 	IFNewSign
.2c61	85 0b		sta $0b				sta 	IFR0+IExp
.2c63	18		clc				clc
.2c64	60		rts				rts
.2c65					_IFMError:
.2c65	38		sec				sec
.2c66	60		rts				rts
.2c67					_IFMShiftAll:
.2c67	a2 08		ldx #$08			ldx 	#IFR0
.2c69	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.2c6c	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c6f	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.2c72	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c75	60		rts				rts
.2c76					IFMSignExtend:
.2c76	29 3f		and #$3f			and 	#IFXMask
.2c78	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c7a	90 02		bcc $2c7e			bcc 	_IFMNoSXX
.2c7c	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c7e					_IFMNoSXX:
.2c7e	60		rts				rts
.2c7f					IFCalculateNewSign:
.2c7f	b5 03		lda $03,x			lda 	IExp,x
.2c81	45 0b		eor $0b				eor 	IFR0+IExp
.2c83	29 40		and #$40			and 	#IFSign
.2c85	8d d8 06	sta $06d8			sta 	IFNewSign
.2c88	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c89					IFloatDivideInteger:
.2c89	20 a2 2c	jsr $2ca2			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c8c	b0 06		bcs $2c94			bcs 	_IFDIExit
.2c8e	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c90	20 b6 30	jsr $30b6			jsr 	IFloatCopyFromRegister
.2c93	18		clc				clc
.2c94					_IFDIExit:
.2c94	60		rts				rts
.2c95					IFloatModulusInteger:
.2c95	20 a2 2c	jsr $2ca2			jsr 	IFloatDivideIntegerCommon
.2c98	b0 07		bcs $2ca1			bcs 	_IFMIExit
.2c9a	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c9d	20 b6 30	jsr $30b6			jsr 	IFloatCopyFromRegister
.2ca0	18		clc				clc
.2ca1					_IFMIExit:
.2ca1	60		rts				rts
.2ca2					IFloatDivideIntegerCommon:
.2ca2	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2ca5	20 7f 2c	jsr $2c7f			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ca8	20 d0 2c	jsr $2cd0			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2cab	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2cad	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.2cb0	f0 1c		beq $2cce			beq 	_IFDIDivZero
.2cb2	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2cb5	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2cb8	5a		phy				phy
.2cb9	a0 18		ldy #$18			ldy 	#24
.2cbb					_IFDILoop:
.2cbb	20 e1 2c	jsr $2ce1			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cbe	20 ed 2c	jsr $2ced			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cc1	88		dey				dey
.2cc2	d0 f7		bne $2cbb			bne 	_IFDILoop 					; do it 24 times
.2cc4	7a		ply				ply
.2cc5	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2cc8	29 40		and #$40			and 	#IFSign
.2cca	85 17		sta $17				sta 	IFRTemp+IExp
.2ccc	18		clc				clc 								; is okay.
.2ccd	60		rts				rts
.2cce					_IFDIDivZero:
.2cce	38		sec				sec
.2ccf	60		rts				rts
.2cd0					IFDCopyRXToRTemp:
.2cd0	b5 00		lda $00,x			lda 	IM0,x
.2cd2	85 14		sta $14				sta 	IFRTemp+IM0
.2cd4	b5 01		lda $01,x			lda 	IM1,x
.2cd6	85 15		sta $15				sta 	IFRTemp+IM1
.2cd8	b5 02		lda $02,x			lda 	IM2,x
.2cda	85 16		sta $16				sta 	IFRTemp+IM2
.2cdc	b5 03		lda $03,x			lda 	IExp,x
.2cde	85 17		sta $17				sta 	IFRTemp+IExp
.2ce0	60		rts				rts
.2ce1					IFDShiftSTempS1Left:
.2ce1	a2 14		ldx #$14			ldx 	#IFRTemp
.2ce3	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft
.2ce6	ae d6 06	ldx $06d6			ldx 	IFTarget
.2ce9	20 4d 31	jsr $314d			jsr 	IFloatRotateLeft
.2cec	60		rts				rts
.2ced					IFDTrySubtract:
.2ced	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2cf0	38		sec				sec 								; subtract, saving the results on the stack.
.2cf1	b5 00		lda $00,x			lda 	IM0,x
.2cf3	e5 08		sbc $08				sbc 	IFR0+IM0
.2cf5	48		pha				pha
.2cf6	b5 01		lda $01,x			lda 	IM1,x
.2cf8	e5 09		sbc $09				sbc 	IFR0+IM1
.2cfa	48		pha				pha
.2cfb	b5 02		lda $02,x			lda 	IM2,x
.2cfd	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2cff	b0 03		bcs $2d04			bcs 	_IFDCanSubtract
.2d01	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2d02	68		pla				pla
.2d03	60		rts				rts
.2d04					_IFDCanSubtract:
.2d04	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2d06	68		pla				pla
.2d07	95 01		sta $01,x			sta 	IM1,x
.2d09	68		pla				pla
.2d0a	95 00		sta $00,x			sta 	IM0,x
.2d0c	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2d0e	d0 06		bne $2d16			bne 	_IFDCSExit
.2d10	e6 15		inc $15				inc 	IFRTemp+IM1
.2d12	d0 02		bne $2d16			bne 	_IFDCSExit
.2d14	e6 16		inc $16				inc 	IFRTemp+IM2
.2d16					_IFDCSExit:
.2d16	60		rts				rts
.2d17					IFloatBitwiseAnd:
.2d17	5a		phy				phy
.2d18	20 5c 2d	jsr $2d5c			jsr 	IFPreProcessBitwise 		; set up everything.
.2d1b	d0 0f		bne $2d2c			bne 	_IFBAExit
.2d1d					_IFBALoop:
.2d1d	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d20	35 00		and $00,x			and 	IM0,x
.2d22	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d25	e8		inx				inx
.2d26	c8		iny				iny
.2d27	c0 03		cpy #$03			cpy 	#3
.2d29	d0 f2		bne $2d1d			bne 	_IFBALoop
.2d2b	18		clc				clc
.2d2c					_IFBAExit:
.2d2c	7a		ply				ply
.2d2d	60		rts				rts
.2d2e					IFloatBitwiseOr:
.2d2e	5a		phy				phy
.2d2f	20 5c 2d	jsr $2d5c			jsr 	IFPreProcessBitwise 		; set up everything.
.2d32	d0 0f		bne $2d43			bne 	_IFBAExit
.2d34					_IFBALoop:
.2d34	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d37	15 00		ora $00,x			ora 	IM0,x
.2d39	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d3c	e8		inx				inx
.2d3d	c8		iny				iny
.2d3e	c0 03		cpy #$03			cpy 	#3
.2d40	d0 f2		bne $2d34			bne 	_IFBALoop
.2d42	18		clc				clc
.2d43					_IFBAExit:
.2d43	7a		ply				ply
.2d44	60		rts				rts
.2d45					IFloatBitwiseXor:
.2d45	5a		phy				phy
.2d46	20 5c 2d	jsr $2d5c			jsr 	IFPreProcessBitwise 		; set up everything.
.2d49	d0 0f		bne $2d5a			bne 	_IFBAExit
.2d4b					_IFBALoop:
.2d4b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d4e	55 00		eor $00,x			eor 	IM0,x
.2d50	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d53	e8		inx				inx
.2d54	c8		iny				iny
.2d55	c0 03		cpy #$03			cpy 	#3
.2d57	d0 f2		bne $2d4b			bne 	_IFBALoop
.2d59	18		clc				clc
.2d5a					_IFBAExit:
.2d5a	7a		ply				ply
.2d5b	60		rts				rts
.2d5c					IFPreProcessBitwise:
.2d5c	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d5e	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d60	15 03		ora $03,x			ora 	IExp,x
.2d62	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d64	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d66	38		sec				sec 								; carry set just in cases.
.2d67	60		rts				rts
.2d68					IFloatAbsoluteR0:
.2d68	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d6a	29 bf		and #$bf			and 	#IFSign ^ 255
.2d6c	85 0b		sta $0b				sta 	IFR0+IExp
.2d6e	18		clc				clc
.2d6f	60		rts				rts
.2d70					IFloatSquareRootR0:
.2d70	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d72	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.2d75	f0 2e		beq $2da5			beq 	_IFSRZero
.2d77	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d79	29 40		and #$40			and 	#IFSign
.2d7b	d0 2f		bne $2dac			bne 	_IFSRFail
.2d7d	20 5c 31	jsr $315c			jsr 	IFloatNormalise 			; it will work better !
.2d80	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d82	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister
.2d85	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d87	20 76 2c	jsr $2c76			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d8a	18		clc				clc
.2d8b	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d8d	85 0b		sta $0b				sta 	IFR0+IExp
.2d8f	4a		lsr a				lsr 	a 							; which we can halve.
.2d90	38		sec				sec 								; convert back
.2d91	e9 17		sbc #$17			sbc 	#23
.2d93	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d95	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d97	20 ae 2d	jsr $2dae			jsr 	_IFSRNewton
.2d9a	20 ae 2d	jsr $2dae			jsr 	_IFSRNewton
.2d9d	20 ae 2d	jsr $2dae			jsr 	_IFSRNewton
.2da0	20 ae 2d	jsr $2dae			jsr 	_IFSRNewton
.2da3	18		clc				clc
.2da4	60		rts				rts
.2da5					_IFSRZero:
.2da5	a2 08		ldx #$08			ldx 	#IFR0
.2da7	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2daa	18		clc				clc
.2dab	60		rts				rts
.2dac					_IFSRFail:
.2dac	38		sec				sec
.2dad	60		rts				rts
.2dae					_IFSRNewton:
.2dae	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2db0	20 74 30	jsr $3074			jsr 	IFloatPushRx
.2db3	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2db5	20 74 30	jsr $3074			jsr 	IFloatPushRx
.2db8	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2dba	20 49 2e	jsr $2e49			jsr 	IFloatDivideFloat
.2dbd	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2dbf	20 95 30	jsr $3095			jsr 	IFloatPullRx
.2dc2	20 1d 2b	jsr $2b1d			jsr 	IFloatAdd 					; now guess + original/guess
.2dc5	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2dc7	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.2dca	a2 0c		ldx #$0c			ldx 	#IFR1
.2dcc	20 95 30	jsr $3095			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2dcf	60		rts				rts
.2dd0					IFloatFractionalR0:
.2dd0	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2dd2	29 3f		and #$3f			and 	#IFXMask
.2dd4	f0 17		beq $2ded			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2dd6	20 68 2d	jsr $2d68			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2dd9	a2 08		ldx #$08			ldx 	#IFR0
.2ddb	20 5c 31	jsr $315c			jsr 	IFloatNormalise 			; normalise R0
.2dde	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2de0	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister
.2de3	20 26 2e	jsr $2e26			jsr 	IFloatIntegerR0 			; take integer part of R0
.2de6	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2de8	20 16 2b	jsr $2b16			jsr 	IFloatSubtract
.2deb	80 05		bra $2df2			bra 	_FIPExit
.2ded					_FIPZero:
.2ded	a2 08		ldx #$08			ldx 	#IFR0
.2def	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2df2					_FIPExit:
.2df2	18		clc				clc
.2df3	60		rts				rts
.2df4					IFloatCompare:
.2df4	20 16 2b	jsr $2b16			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2df7	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2df9	05 0b		ora $0b				ora 	IFR0+IExp
.2dfb	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2dfd	29 3f		and #$3f			and 	#IFXMask
.2dff	d0 19		bne $2e1a			bne 	_IFCNonInteger
.2e01	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; check if zero
.2e04	f0 0f		beq $2e15			beq 	_IFCZero
.2e06					_IFCReturnSign:
.2e06	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2e08	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2e0a	48		pha				pha
.2e0b	a9 01		lda #$01			lda 	#1
.2e0d	20 27 31	jsr $3127			jsr 	IFloatSetByte 				; return to +1
.2e10	68		pla				pla 								; sign bit back
.2e11	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2e13	18		clc				clc
.2e14	60		rts				rts
.2e15					_IFCZero:
.2e15	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2e18	18		clc				clc
.2e19	60		rts				rts
.2e1a					_IFCNonInteger:
.2e1a	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2e1c	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2e1e	05 09		ora $09				ora 	IFR0+IM1
.2e20	05 0a		ora $0a				ora 	IFR0+IM2
.2e22	f0 f1		beq $2e15			beq 	_IFCZero 					; near enough !
.2e24	80 e0		bra $2e06			bra 	_IFCReturnSign 				; return the sign of the difference.
.2e26					IFloatIntegerR0:
.2e26	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2e28	29 3f		and #$3f			and 	#IFXMask
.2e2a	f0 1b		beq $2e47			beq 	_FIPExit 					; if so do nothing
.2e2c	a2 08		ldx #$08			ldx 	#IFR0
.2e2e	20 5c 31	jsr $315c			jsr 	IFloatNormalise 			; normalise
.2e31	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; is it zero ?
.2e34	f0 0e		beq $2e44			beq 	_FIPZero 					; if so return zero.
.2e36					_FIPShift:
.2e36	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2e38	29 20		and #$20			and 	#$20 						; still -ve
.2e3a	f0 0b		beq $2e47			beq 	_FIPExit
.2e3c	20 54 31	jsr $3154			jsr 	IFloatShiftRight 			; shift mantissa right
.2e3f	20 7e 31	jsr $317e			jsr 	IFloatIncExponent 			; bump exponent
.2e42	80 f2		bra $2e36			bra 	_FIPShift
.2e44					_FIPZero:
.2e44	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2e47					_FIPExit:
.2e47	18		clc				clc
.2e48	60		rts				rts
.2e49					IFloatDivideFloat:
.2e49	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2e4c	20 7f 2c	jsr $2c7f			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e4f	20 5c 31	jsr $315c			jsr 	IFloatNormalise 			; normalise RX
.2e52	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2e54	20 5c 31	jsr $315c			jsr 	IFloatNormalise
.2e57	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.2e5a	f0 56		beq $2eb2			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e5c	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e5e	20 76 2c	jsr $2c76			jsr 	IFMSignExtend
.2e61	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e64	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e67	b5 03		lda $03,x			lda 	IExp,x
.2e69	20 76 2c	jsr $2c76			jsr 	IFMSignExtend
.2e6c	38		sec				sec
.2e6d	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e70	38		sec				sec
.2e71	e9 17		sbc #$17			sbc 	#23
.2e73	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e76	20 b4 2e	jsr $2eb4			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e79	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e7b	10 08		bpl $2e85			bpl 	_IFDFNoShiftResult
.2e7d	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e7f	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.2e82	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e85					_IFDFNoShiftResult:
.2e85	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e88	30 06		bmi $2e90			bmi 	_IFDFCheckUnderflow
.2e8a	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e8c	b0 24		bcs $2eb2			bcs 	_IFDFDivZero
.2e8e	80 11		bra $2ea1			bra		_IFDFExit
.2e90					_IFDFCheckUnderflow:
.2e90	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e93	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e95	b0 0a		bcs $2ea1			bcs 	_IFDFExit
.2e97	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e9a	a2 14		ldx #$14			ldx 	#IFRTemp
.2e9c	20 54 31	jsr $3154			jsr 	IFloatShiftRight
.2e9f	80 ef		bra $2e90			bra 	_IFDFCheckUnderflow
.2ea1					_IFDFExit:
.2ea1	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2ea4	29 3f		and #$3f			and 	#IFXMask
.2ea6	0d d8 06	ora $06d8			ora 	IFNewSign
.2ea9	85 17		sta $17				sta 	IFRTemp+IExp
.2eab	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2ead	20 b6 30	jsr $30b6			jsr 	IFloatCopyFromRegister
.2eb0	18		clc				clc
.2eb1	60		rts				rts
.2eb2					_IFDFDivZero:
.2eb2	38		sec				sec
.2eb3	60		rts				rts
.2eb4					IFloatDivideSupport:
.2eb4	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2eb6	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2eb9	5a		phy				phy 								; main division loop x 23
.2eba	a0 17		ldy #$17			ldy 	#23
.2ebc					_IFDSLoop:
.2ebc	20 ed 2c	jsr $2ced			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ebf	20 e1 2c	jsr $2ce1			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2ec2	88		dey				dey
.2ec3	d0 f7		bne $2ebc			bne 	_IFDSLoop 					; do it 24 times
.2ec5	7a		ply				ply
.2ec6	60		rts				rts
.2ec7					IFloatIntegerToStringR0:
.2ec7	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2eca	20 a6 31	jsr $31a6			jsr 	IFloatBufferReset			; empty buffer
.2ecd	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2ecf	29 3f		and #$3f			and 	#IFXMask
.2ed1	d0 1d		bne $2ef0			bne 	_IFIFail
.2ed3	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2ed5	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.2ed8	f0 0e		beq $2ee8			beq 	_IFINotNegative
.2eda	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2edc	29 40		and #$40			and 	#IFSign
.2ede	f0 08		beq $2ee8			beq 	_IFINotNegative
.2ee0	a9 2d		lda #$2d			lda 	#"-"						; output -
.2ee2	20 b5 31	jsr $31b5			jsr 	IFloatBufferWrite
.2ee5	20 30 31	jsr $3130			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2ee8					_IFINotNegative:
.2ee8	20 f2 2e	jsr $2ef2			jsr 	_IFIRecursiveConvert 		; start converting
.2eeb	20 ad 31	jsr $31ad			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2eee	18		clc				clc
.2eef	60		rts				rts
.2ef0					_IFIFail:
.2ef0	38		sec				sec
.2ef1	60		rts				rts
.2ef2					_IFIRecursiveConvert:
.2ef2	a2 0c		ldx #$0c			ldx 	#IFR1
.2ef4	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister 		; R0->R1
.2ef7	a2 08		ldx #$08			ldx 	#IFR0
.2ef9	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2efc	20 27 31	jsr $3127			jsr 	IFloatSetByte
.2eff	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2f01	20 89 2c	jsr $2c89			jsr 	IFloatDivideInteger
.2f04	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2f06	20 1e 31	jsr $311e			jsr 	IFloatCheckZero
.2f09	f0 09		beq $2f14			beq 	_IFIOutDigit
.2f0b	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2f0d	48		pha				pha
.2f0e	20 f2 2e	jsr $2ef2			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2f11	68		pla				pla
.2f12	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2f14					_IFIOutDigit:
.2f14	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2f16	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2f18	90 02		bcc $2f1c			bcc 	_IFINotHex
.2f1a	69 06		adc #$06			adc 	#6
.2f1c					_IFINotHex:
.2f1c	69 30		adc #$30			adc 	#48
.2f1e	20 b5 31	jsr $31b5			jsr 	IFloatBufferWrite 			; write character to buffer.
.2f21	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2f22					IFloatFloatToStringR0:
.2f22	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2f24	20 74 30	jsr $3074			jsr 	IFloatPushRx
.2f27	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister
.2f2a	20 26 2e	jsr $2e26			jsr 	IFloatIntegerR0				; make R0 integer
.2f2d	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2f2f	20 c7 2e	jsr $2ec7			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2f32	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2f35	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2f37	29 3f		and #$3f			and 	#IFXMask
.2f39	f0 44		beq $2f7f			beq 	_IFFSExit
.2f3b					_IFloatFracLoop:
.2f3b	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2f3d	20 b6 30	jsr $30b6			jsr 	IFloatCopyFromRegister
.2f40	20 d0 2d	jsr $2dd0			jsr 	IFloatFractionalR0
.2f43	20 5c 31	jsr $315c			jsr 	IFloatNormalise
.2f46	a2 10		ldx #$10			ldx 	#IFR2
.2f48	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister 		; copy to back R2
.2f4b	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2f4d	a9 0a		lda #$0a			lda 	#10
.2f4f	20 27 31	jsr $3127			jsr 	IFloatSetByte
.2f52	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2f54	20 c7 2b	jsr $2bc7			jsr 	IFloatMultiply
.2f57	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2f59	20 c7 30	jsr $30c7			jsr 	IFloatCopyToRegister
.2f5c	20 26 2e	jsr $2e26			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f5f	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f62	c9 03		cmp #$03			cmp 	#3
.2f64	f0 16		beq $2f7c			beq 	_IFFSExitStripZero
.2f66	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f69	d0 05		bne $2f70			bne 	_IFloatNotFirst
.2f6b	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f6d	20 b5 31	jsr $31b5			jsr 	IFloatBufferWrite
.2f70					_IFloatNotFirst:
.2f70	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f73	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f75	09 30		ora #$30			ora 	#"0"						; ASCII
.2f77	20 b5 31	jsr $31b5			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f7a	80 bf		bra $2f3b			bra 	_IFloatFracLoop
.2f7c					_IFFSExitStripZero:
.2f7c	20 c4 31	jsr $31c4			jsr 	IFloatStripTrailingZeros
.2f7f					_IFFSExit:
.2f7f	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f81	20 95 30	jsr $3095			jsr 	IFloatPullRx
.2f84	20 ad 31	jsr $31ad			jsr 	IFloatGetBufferAddress
.2f87	18		clc				clc
.2f88	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f89					IFloatStringToFloatR0:
.2f89	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f8c	86 20		stx $20				stx 	iTemp0
.2f8e	84 21		sty $21				sty 	iTemp0+1
.2f90	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f92	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2f95	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f98	20 25 30	jsr $3025			jsr 	IFSTFGetNext 				; get first
.2f9b	f0 1b		beq $2fb8			beq 	_IFSTFFail 					; no character, fail.
.2f9d	90 10		bcc $2faf			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2f9f	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2fa1	d0 15		bne $2fb8			bne 	_IFSTFFail
.2fa3	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2fa5	8d dc 06	sta $06dc			sta 	IFSignFlag
.2fa8					_IFSTFLoop:
.2fa8	20 25 30	jsr $3025			jsr 	IFSTFGetNext 				; get next character
.2fab	b0 0b		bcs $2fb8			bcs 	_IFSTFFail 					; bad character.
.2fad	f0 11		beq $2fc0			beq 	_IFSTFExit 					; end of data
.2faf					_IFSTFHaveChar:
.2faf	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2fb1	f0 08		beq $2fbb			beq 	_IFSTFDecimal
.2fb3	20 49 30	jsr $3049			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2fb6	80 f0		bra $2fa8			bra 	_IFSTFLoop 					; keep going until . or end.
.2fb8					_IFSTFFail:
.2fb8	38		sec				sec
.2fb9	80 0d		bra $2fc8			bra 	_IFSTFReturn
.2fbb					_IFSTFDecimal:
.2fbb	20 d0 2f	jsr $2fd0			jsr 	IFSTFDecimal 				; call the decimal places code.
.2fbe	b0 08		bcs $2fc8			bcs 	_IFSTFReturn 				; error
.2fc0					_IFSTFExit:
.2fc0	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2fc2	0d dc 06	ora $06dc			ora 	IFSignFlag
.2fc5	85 0b		sta $0b				sta 	IFR0+IExp
.2fc7	18		clc				clc
.2fc8					_IFSTFReturn:
.2fc8	60		rts				rts
.2fc9					IFloatAddDecimalToR0:
.2fc9	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2fcc	86 20		stx $20				stx 	iTemp0
.2fce	84 21		sty $21				sty 	iTemp0+1
.2fd0					IFSTFDecimal:
.2fd0	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2fd2	20 74 30	jsr $3074			jsr 	IFloatPushRx
.2fd5	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2fd7	20 25 31	jsr $3125			jsr 	IFloatSetZero
.2fda	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2fdd					_IFSTDLoop:
.2fdd	20 25 30	jsr $3025			jsr 	IFSTFGetNext 				; get next
.2fe0	b0 41		bcs $3023			bcs 	_IFSTFFail2 				; bad character.
.2fe2	f0 11		beq $2ff5			beq 	_IFSTFComplete 				; end of data, work out the result.
.2fe4	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2fe6	f0 39		beq $3021			beq 	_IFSTFExit2
.2fe8	20 49 30	jsr $3049			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2feb	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2fee	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2ff1	c9 03		cmp #$03			cmp 	#3
.2ff3	90 e8		bcc $2fdd			bcc 	_IFSTDLoop
.2ff5					_IFSTFComplete:
.2ff5	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2ff8	f0 27		beq $3021			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2ffa	3a		dec a				dec 	a 							; table indexed from 1.
.2ffb	0a		asl a				asl 	a
.2ffc	0a		asl a				asl 	a
.2ffd	aa		tax				tax
.2ffe	bd 60 30	lda $3060,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3001	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3003	bd 61 30	lda $3061,x			lda 	TableTen+1,x
.3006	85 0d		sta $0d				sta  	IFR1+IM1
.3008	bd 62 30	lda $3062,x			lda 	TableTen+2,x
.300b	85 0e		sta $0e				sta  	IFR1+IM2
.300d	bd 63 30	lda $3063,x			lda 	TableTen+3,x
.3010	85 0f		sta $0f				sta  	IFR1+IExp
.3012	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3014	20 c7 2b	jsr $2bc7			jsr 	IFloatMultiply
.3017	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3019	20 95 30	jsr $3095			jsr 	IFloatPullRx
.301c	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.301e	20 1d 2b	jsr $2b1d			jsr 	IFloatAdd
.3021					_IFSTFExit2:
.3021	18		clc				clc
.3022	60		rts				rts
.3023					_IFSTFFail2:
.3023	38		sec				sec
.3024	60		rts				rts
.3025					IFSTFGetNext:
.3025	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.3028	f0 19		beq $3043			beq 	_IFSTFReturnOk
.302a	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.302c	e6 20		inc $20				inc 	iTemp0 						; point at next.
.302e	d0 02		bne $3032			bne 	_IFSTFGNNoCarry
.3030	e6 21		inc $21				inc 	iTemp0+1
.3032					_IFSTFGNNoCarry:
.3032	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.3035	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3037	f0 08		beq $3041			beq 	_IFSTFGOkay
.3039	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.303b	90 08		bcc $3045			bcc 	_IFSTFGFail
.303d	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.303f	b0 04		bcs $3045			bcs 	_IFSTFGFail
.3041					_IFSTFGOkay:
.3041	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3043					_IFSTFReturnOk:
.3043	18		clc				clc
.3044	60		rts				rts
.3045					_IFSTFGFail:
.3045	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3047	38		sec				sec
.3048	60		rts				rts
.3049					IFSTFAddR0:
.3049	29 0f		and #$0f			and 	#15 						; to int value
.304b	48		pha				pha 								; save it.
.304c	a9 0a		lda #$0a			lda 	#10
.304e	a2 0c		ldx #$0c			ldx 	#IFR1
.3050	20 27 31	jsr $3127			jsr 	IFloatSetByte
.3053	20 c7 2b	jsr $2bc7			jsr 	IFloatMultiply
.3056	68		pla				pla
.3057	a2 0c		ldx #$0c			ldx 	#IFR1
.3059	20 27 31	jsr $3127			jsr 	IFloatSetByte
.305c	20 1d 2b	jsr $2b1d			jsr 	IFloatAdd
.305f	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3060					TableTen:
>3060	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3064	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3068	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>306c	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3070	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3074					IFloatPushRx:
.3074	5a		phy				phy
.3075	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3078	b5 00		lda $00,x			lda 	IM0,x
.307a	99 df 06	sta $06df,y			sta 	IFStack,y
.307d	b5 01		lda $01,x			lda 	IM1,x
.307f	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3082	b5 02		lda $02,x			lda 	IM2,x
.3084	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.3087	b5 03		lda $03,x			lda 	IExp,x
.3089	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.308c	c8		iny				iny
.308d	c8		iny				iny
.308e	c8		iny				iny
.308f	c8		iny				iny
.3090	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3093	7a		ply				ply
.3094	60		rts				rts
.3095					IFloatPullRx:
.3095	5a		phy				phy
.3096	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.3099	88		dey				dey
.309a	88		dey				dey
.309b	88		dey				dey
.309c	88		dey				dey
.309d	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.30a0	95 00		sta $00,x			sta 	IM0,x
.30a2	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.30a5	95 01		sta $01,x			sta 	IM1,x
.30a7	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.30aa	95 02		sta $02,x			sta 	IM2,x
.30ac	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.30af	95 03		sta $03,x			sta 	IExp,x
.30b1	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.30b4	7a		ply				ply
.30b5	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.30b6					IFloatCopyFromRegister:
.30b6	b5 00		lda $00,x			lda 	0,x
.30b8	85 08		sta $08				sta 	IFR0
.30ba	b5 01		lda $01,x			lda 	1,x
.30bc	85 09		sta $09				sta 	IFR0+1
.30be	b5 02		lda $02,x			lda 	2,x
.30c0	85 0a		sta $0a				sta 	IFR0+2
.30c2	b5 03		lda $03,x			lda 	3,x
.30c4	85 0b		sta $0b				sta 	IFR0+3
.30c6	60		rts				rts
.30c7					IFloatCopyToRegister:
.30c7	a5 08		lda $08				lda 	IFR0
.30c9	95 00		sta $00,x			sta 	0,x
.30cb	a5 09		lda $09				lda 	IFR0+1
.30cd	95 01		sta $01,x			sta 	1,x
.30cf	a5 0a		lda $0a				lda 	IFR0+2
.30d1	95 02		sta $02,x			sta 	2,x
.30d3	a5 0b		lda $0b				lda 	IFR0+3
.30d5	95 03		sta $03,x			sta 	3,x
.30d7	60		rts				rts
.30d8					IFloatLoadInline:
.30d8	68		pla				pla 								; pop address off to iTemp0
.30d9	85 20		sta $20				sta 	iTemp0
.30db	68		pla				pla
.30dc	85 21		sta $21				sta 	iTemp0+1
.30de	a0 01		ldy #$01			ldy 	#1
.30e0	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.30e2	95 00		sta $00,x			sta 	0,x
.30e4	c8		iny				iny
.30e5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.30e7	95 01		sta $01,x			sta 	1,x
.30e9	c8		iny				iny
.30ea	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.30ec	95 02		sta $02,x			sta 	2,x
.30ee	c8		iny				iny
.30ef	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.30f1	95 03		sta $03,x			sta 	3,x
.30f3	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.30f4	a5 20		lda $20				lda 	iTemp0
.30f6	69 05		adc #$05			adc 	#5
.30f8	85 20		sta $20				sta 	iTemp0
.30fa	90 02		bcc $30fe			bcc 	_IFLINoCarry
.30fc	e6 21		inc $21				inc 	iTemp0+1
.30fe					_IFLINoCarry:
.30fe	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3101					IFloatMultiply8BitRx:
.3101	5a		phy		        phy
.3102	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3104	a4 08		ldy $08		        ldy     IFR0+IM0
.3106	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3107	85 08		sta $08		        sta     IFR0+IM0
.3109	84 09		sty $09		        sty     IFR0+IM1
.310b	a9 00		lda #$00	        lda     #0
.310d	a0 08		ldy #$08	        ldy     #8
.310f					_IFMLoop:
.310f	90 03		bcc $3114	        bcc     _IFMNoAdd
.3111	18		clc		        clc
.3112	65 09		adc $09		        adc     IFR0+IM1
.3114					_IFMNoAdd:
.3114	6a		ror a		        ror     a
.3115	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3117	88		dey		        dey
.3118	d0 f5		bne $310f	        bne     _IFMLoop
.311a	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.311c	7a		ply		        ply
.311d	60		rts		        rts
.311e					IFloatCheckZero:
.311e	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3120	15 01		ora $01,x			ora 	IM1,x
.3122	15 02		ora $02,x			ora 	IM2,x
.3124	60		rts				rts
.3125					IFloatSetZero:
.3125	a9 00		lda #$00			lda 	#0
.3127					IFloatSetByte:
.3127	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3129	74 01		stz $01,x			stz 	IM1,x
.312b	74 02		stz $02,x			stz 	IM2,x
.312d	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.312f	60		rts				rts
.3130					IFloatNegate:
.3130	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3132	49 40		eor #$40			eor 	#IFSign
.3134	95 03		sta $03,x			sta 	IExp,x
.3136	18		clc				clc
.3137	60		rts				rts
.3138					IFloatMantissaNegate:
.3138	38		sec				sec 								; when you want a real 2's complement negative value.
.3139	a9 00		lda #$00			lda 	#0
.313b	f5 00		sbc $00,x			sbc 	IM0,x
.313d	95 00		sta $00,x			sta 	IM0,x
.313f	a9 00		lda #$00			lda 	#0
.3141	f5 01		sbc $01,x			sbc 	IM1,x
.3143	95 01		sta $01,x			sta 	IM1,x
.3145	a9 00		lda #$00			lda 	#0
.3147	f5 02		sbc $02,x			sbc 	IM2,x
.3149	95 02		sta $02,x			sta 	IM2,x
.314b	60		rts				rts
.314c					IFloatShiftLeft:
.314c	18		clc				clc
.314d					IFloatRotateLeft:
.314d	36 00		rol $00,x			rol 	IM0,x
.314f	36 01		rol $01,x			rol 	IM1,x
.3151	36 02		rol $02,x			rol 	IM2,x
.3153	60		rts				rts
.3154					IFloatShiftRight:
.3154	18		clc				clc
.3155					IFloatRotateRight:
.3155	76 02		ror $02,x			ror 	IM2,x
.3157	76 01		ror $01,x			ror 	IM1,x
.3159	76 00		ror $00,x			ror 	IM0,x
.315b	60		rts				rts
.315c					IFloatNormalise:
.315c	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; is it zero
.315f	f0 18		beq $3179			beq 	_IFNExitZero 				; if so exit
.3161					_IFNLoop:
.3161	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3163	29 c0		and #$c0			and 	#$C0
.3165	c9 40		cmp #$40			cmp 	#$40
.3167	f0 13		beq $317c			beq 	_IFNExitOkay 				; if so , then we are done.
.3169	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.316b	29 3f		and #$3f			and 	#$3F
.316d	c9 20		cmp #$20			cmp 	#$20
.316f	f0 0b		beq $317c			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3171	20 92 31	jsr $3192			jsr 	IFloatDecExponent
.3174	20 4c 31	jsr $314c			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3177	80 e8		bra $3161			bra 	_IFNLoop
.3179					_IFNExitZero:
.3179	20 25 31	jsr $3125			jsr 	IFloatSetZero 				; set the result to zero
.317c					_IFNExitOkay:
.317c	18		clc				clc  								; return with CC.
.317d	60		rts				rts
.317e					IFloatIncExponent:
.317e	b5 03		lda $03,x			lda 	IExp,x
.3180	48		pha				pha
.3181	29 c0		and #$c0			and 	#$C0
.3183	8d 1f 07	sta $071f			sta 	IFXTemp
.3186	68		pla				pla
.3187	1a		inc a				inc 	a
.3188	29 3f		and #$3f			and 	#$3F
.318a	48		pha				pha
.318b	0d 1f 07	ora $071f			ora 	IFXTemp
.318e	95 03		sta $03,x			sta 	IExp,x
.3190	68		pla				pla
.3191	60		rts				rts
.3192					IFloatDecExponent:
.3192	b5 03		lda $03,x			lda 	IExp,x
.3194	48		pha				pha
.3195	29 c0		and #$c0			and 	#$C0
.3197	8d 1f 07	sta $071f			sta 	IFXTemp
.319a	68		pla				pla
.319b	3a		dec a				dec 	a
.319c	29 3f		and #$3f			and 	#$3F
.319e	48		pha				pha
.319f	0d 1f 07	ora $071f			ora 	IFXTemp
.31a2	95 03		sta $03,x			sta 	IExp,x
.31a4	68		pla				pla
.31a5	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.31a6					IFloatBufferReset:
.31a6	9c 20 07	stz $0720			stz 	IFBufferCount
.31a9	9c 21 07	stz $0721			stz 	IFBuffer
.31ac	60		rts				rts
.31ad					IFloatGetBufferAddress:
.31ad	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.31af	a2 20		ldx #$20			ldx 	#(IFBufferCount & $FF)
.31b1	ad 20 07	lda $0720			lda 	IFBufferCount
.31b4	60		rts				rts
.31b5					IFloatBufferWrite:
.31b5	da		phx				phx
.31b6	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31b9	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.31bc	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.31bf	ee 20 07	inc $0720			inc 	IFBufferCount
.31c2	fa		plx				plx
.31c3	60		rts				rts
.31c4					IFloatStripTrailingZeros:
.31c4	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31c7	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.31ca	c9 30		cmp #$30			cmp		#"0"
.31cc	d0 0f		bne $31dd			bne 	_IFSTExit
.31ce	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.31d1	c9 2e		cmp #$2e			cmp 	#"."
.31d3	f0 08		beq $31dd			beq 	_IFSTExit
.31d5	ce 20 07	dec $0720			dec 	IFBufferCount
.31d8	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.31db	80 e7		bra $31c4			bra 	IFloatStripTrailingZeros
.31dd					_IFSTExit:
.31dd	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.31de					IFloatCheckRange:
.31de	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.31e0	09 40		ora #$40			ora 	#IFSign
.31e2	85 0b		sta $0b				sta 	IFR0+IExp
.31e4	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.31e6	20 1d 2b	jsr $2b1d			jsr 	IFloatAdd 					; add allowed to error.
.31e9	a2 08		ldx #$08			ldx 	#IFR0
.31eb	20 1e 31	jsr $311e			jsr 	IFloatCheckZero 			; error if < 0
.31ee	f0 06		beq $31f6			beq 	_IFAOkay
.31f0	a5 0b		lda $0b				lda 	IFR0+IExp
.31f2	29 40		and #$40			and 	#IFSign
.31f4	d0 01		bne $31f7			bne 	_IFAFail
.31f6					_IFAOkay:
.31f6	60		rts				rts
.31f7					_IFAFail:
.31f7	38		sec				sec
.31f8	68		pla				pla 								; get address - 2
.31f9	e9 02		sbc #$02			sbc 	#2
.31fb	aa		tax				tax
.31fc	68		pla				pla
.31fd	e9 00		sbc #$00			sbc 	#0
.31ff	a8		tay				tay
.3200	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3202					_IFAStop:
>3202	db						.byte 	$DB 						; display an error AA ADR ADR
.3203	80 fd		bra $3202			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
