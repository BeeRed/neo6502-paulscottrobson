
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Wed Jun 28 09:50:11 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 83 1f	jsr $1f83			jsr 	PGMSetBaseAddress
.1007	20 18 2b	jsr $2b18			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c c5 14	jmp $14c5			jmp 	Command_RUN
.1012	4c 0d 14	jmp $140d			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_STANDARD_LAST = $a1
=$a1					PR_DATA = $a1
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; get a number to assert
.1018	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.101a	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail 					; if so, the assert fails.
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 23 26	jmp $2623		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c bd 26	jmp $26bd		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 96 1f	jsr $1f96			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1049	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.104b	1a		inc a				inc 	a
.104c	85 29		sta $29				sta 	freeMemory+1
.104e	20 b7 2a	jsr $2ab7			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 f1 27	jsr $27f1			jsr 	StackReset 					; page passed on in A
.1057	20 50 28	jsr $2850			jsr 	StringSystemInitialise
.105a	20 38 25	jsr $2538			jsr 	ScanProcedures
.105d	20 97 14	jsr $1497			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.1064	5a		phy				phy
.1065	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 28		sta ($28)			sta 	(freeMemory)
.1075	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 29		inc $29				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.108c	1a		inc a				inc 	a 							; spacing 2 pages
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c bd 26	jmp $26bd		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 6e 2a	jsr $2a6e			jsr 	VARGetInfo 					; get information
.10a2	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 20 2a	jsr $2a20			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 cc 29	jsr $29cc			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 24		sty $24				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 22		sty $22				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 23		sty $23				sty 	zTemp0+1
.10c3	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 22		sta ($22),y			sta 	(zTemp0),y
.10ca	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10cc	20 82 27	jsr $2782			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c cd 25	jmp $25cd		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c 95 26	jmp $2695		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 8a 27	jsr $278a			jsr 	ERRCheckComma 				; check comma
.10fb	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.110d	85 26		sta $26				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 26		sta ($26),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 26		sta ($26),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 26		lda $26				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 26		sta $26				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 27		inc $27				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.114c	86 23		stx $23				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 22		lda ($22),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 22		lda ($22)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 22		sta ($22),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 22		lda $22				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 22		sta $22				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 23		inc $23				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 23		rol $23				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 23		rol $23				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 23		inc $23				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.119e	85 22		sta $22				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 22		sta ($22)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 22		sta ($22),y			sta 	(zTemp0),y
.11ad	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c de 25	jmp $25de		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 8a 27	jsr $278a			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 22 17	jsr $1722			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 23		sta $23				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 22		sta $22				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 22		sta ($22)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 22		sta ($22),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11dd					Command_GOTO:
.11dd	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; get line number
.11e0					GotoR0:
.11e0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11e3	85 19		sta $19				sta 	codePtr+1
.11e5	64 18		stz $18				stz 	codePtr
.11e7					_GOSearch:
.11e7	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e9	f0 1f		beq $120a			beq 	_GOError
.11eb	a0 01		ldy #$01			ldy 	#1 							; found line #
.11ed	b1 18		lda ($18),y			lda 	(codePtr),y
.11ef	c5 08		cmp $08				cmp 	IFR0+IM0
.11f1	d0 0a		bne $11fd			bne 	_GONext
.11f3	c8		iny				iny
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y
.11f6	c5 09		cmp $09				cmp 	IFR0+IM1
.11f8	d0 03		bne $11fd			bne 	_GONext
.11fa	4c dc 14	jmp $14dc			jmp 	RUNNewLine
.11fd					_GONext:
.11fd	18		clc				clc 								; advance to next line.
.11fe	b2 18		lda ($18)			lda 	(codePtr)
.1200	65 18		adc $18				adc 	codePtr
.1202	85 18		sta $18				sta 	codePtr
.1204	90 e1		bcc $11e7			bcc 	_GOSearch
.1206	e6 19		inc $19				inc 	codePtr+1
.1208	80 dd		bra $11e7			bra 	_GOSearch
.120a					_GOError:
.120a	4c 62 27	jmp $2762		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.120d					Command_Input:
.120d	a9 ff		lda #$ff			lda 	#$FF
.120f	8d 06 05	sta $0506			sta 	InputFlag
.1212	80 03		bra $1217			bra 	Command_IP_Main
.1214					Command_Print:
.1214	9c 06 05	stz $0506			stz 	InputFlag
.1217					Command_IP_Main:
.1217	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1218					_CPLoop:
.1218	08		php				php 								; save last action flag
.1219	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.121b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.121d	f0 4e		beq $126d			beq 	_CPExit 					; without consuming
.121f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1221	f0 4a		beq $126d			beq 	_CPExit
.1223	68		pla				pla 								; throw last action flag
.1224	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1226	c8		iny				iny
.1227	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1229	f0 3f		beq $126a			beq 	_CPContinueWithSameLine
.122b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.122d	f0 36		beq $1265			beq 	_CPTab
.122f	88		dey				dey 								; undo the get.
.1230	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1233	10 0b		bpl $1240			bpl	 	_CPNotInput
.1235	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1237	c9 40		cmp #$40			cmp 	#$40
.1239	d0 05		bne $1240			bne 	_CPNotInput
.123b	20 76 12	jsr $1276			jsr 	_CPInputCode 				; input code
.123e	80 d7		bra $1217			bra 	Command_IP_Main 			; and go round again.
.1240					_CPNotInput:
.1240	20 d0 16	jsr $16d0			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1243	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1245	10 14		bpl $125b			bpl 	_CPNumber
.1247	5a		phy				phy
.1248	18		clc				clc 								; string address to YX
.1249	a5 08		lda $08				lda 	IFR0+IM0
.124b	aa		tax				tax
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	a8		tay				tay
.124f	e8		inx				inx 								; point to 1st character
.1250	d0 01		bne $1253			bne 	_CPNoCarry
.1252	c8		iny				iny
.1253					_CPNoCarry:
.1253	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.1255	20 aa 12	jsr $12aa			jsr 	CPPrintAYX 					; print AYX
.1258	7a		ply				ply
.1259	80 bc		bra $1217			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.125b					_CPNumber:
.125b	5a		phy				phy
.125c	20 28 2f	jsr $2f28			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.125f	20 aa 12	jsr $12aa			jsr 	CPPrintAYX 					; print AYX
.1262	7a		ply				ply
.1263	80 b2		bra $1217			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1265					_CPTab:
.1265	a9 09		lda #$09			lda 	#9 							; print TAB
.1267	20 c0 12	jsr $12c0			jsr 	CPPrintA
.126a					_CPContinueWithSameLine:
.126a	38		sec				sec 								; loop round with carry set, which
.126b	80 ab		bra $1218			bra 	_CPLoop 					; will inhibit final CR
.126d					_CPExit:
.126d	28		plp				plp 								; get last action flag
.126e	b0 05		bcs $1275			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1270	a9 0d		lda #$0d			lda 	#13 						; print new line
.1272	20 c0 12	jsr $12c0			jsr 	CPPrintA
.1275					_CPExit2:
.1275	60		rts				rts
.1276					_CPInputCode:
.1276	20 98 17	jsr $1798			jsr 	EXPTermR0 					; get the term.
.1279	5a		phy				phy 								; save position
.127a	20 bd 12	jsr $12bd			jsr 	CPInputA					; input a line to YX
.127d	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.127f	30 18		bmi $1299			bmi 	_CPInputString
.1281	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1283	48		pha				pha
.1284	a5 09		lda $09				lda 	IFR0+IM1
.1286	48		pha				pha
.1287	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1289	84 23		sty $23				sty 	zTemp0+1
.128b	20 81 1a	jsr $1a81			jsr 	VALConversionZTemp0
.128e	68		pla				pla 								; do the assign.
.128f	85 23		sta $23				sta 	zTemp0+1
.1291	68		pla				pla
.1292	85 22		sta $22				sta 	zTemp0
.1294	20 e8 12	jsr $12e8			jsr 	AssignNumber
.1297	7a		ply				ply
.1298	60		rts				rts
.1299					_CPInputString:
.1299	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.129b	85 22		sta $22				sta 	zTemp0
.129d	a5 09		lda $09				lda 	IFR0+IM1
.129f	85 23		sta $23				sta 	zTemp0+1
.12a1	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.12a3	84 09		sty $09				sty 	IFR0+IM1
.12a5	20 ff 12	jsr $12ff			jsr 	AssignString 				; assign the string
.12a8	7a		ply				ply 								; exit
.12a9	60		rts				rts
.12aa					CPPrintAYX:
.12aa	86 22		stx $22				stx 	zTemp0
.12ac	84 23		sty $23				sty 	zTemp0+1
.12ae	aa		tax				tax
.12af	f0 0b		beq $12bc			beq 	_CPPrintExit
.12b1	a0 00		ldy #$00			ldy 	#0
.12b3					_CPPrintAYXLoop:
.12b3	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b5	20 c0 12	jsr $12c0			jsr 	CPPrintA
.12b8	c8		iny				iny
.12b9	ca		dex				dex
.12ba	d0 f7		bne $12b3			bne 	_CPPrintAYXLoop
.12bc					_CPPrintExit:
.12bc	60		rts				rts
.12bd					CPInputA:
.12bd	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.12c0					CPPrintA:
.12c0	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12c3					CommandLET:
.12c3	20 98 17	jsr $1798			jsr 	EXPTermR0 					; get term
.12c6	90 6f		bcc $1337			bcc 	CLError 					; must be a reference term.
.12c8	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12ca	48		pha				pha
.12cb	a5 09		lda $09				lda 	IFR0+IM1
.12cd	48		pha				pha
.12ce	a5 0b		lda $0b				lda 	IFR0+IExp
.12d0	48		pha				pha
.12d1	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12d3	20 92 27	jsr $2792			jsr 	ERRCheckA
.12d6	20 d0 16	jsr $16d0			jsr 	EXPEvaluateExpression 		; right hand side.
.12d9	68		pla				pla 								; type of l-expr
.12da	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12dc	30 5c		bmi $133a			bmi 	CLType
.12de	fa		plx				plx 	 							; pop target address to zTemp0
.12df	86 23		stx $23				stx 	zTemp0+1
.12e1	fa		plx				plx
.12e2	86 22		stx $22				stx 	zTemp0
.12e4					AssignData:
.12e4	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e6	30 17		bmi $12ff			bmi 	AssignString
.12e8					AssignNumber:
.12e8	5a		phy				phy
.12e9	a0 03		ldy #$03			ldy 	#3
.12eb	a5 0b		lda $0b				lda 	IFR0+IExp
.12ed	91 22		sta ($22),y			sta 	(zTemp0),y
.12ef	88		dey				dey
.12f0	a5 0a		lda $0a				lda 	IFR0+IM2
.12f2	91 22		sta ($22),y			sta 	(zTemp0),y
.12f4	88		dey				dey
.12f5	a5 09		lda $09				lda 	IFR0+IM1
.12f7	91 22		sta ($22),y			sta 	(zTemp0),y
.12f9	a5 08		lda $08				lda 	IFR0+IM0
.12fb	92 22		sta ($22)			sta 	(zTemp0)
.12fd	7a		ply				ply
.12fe	60		rts				rts
.12ff					AssignString:
.12ff	5a		phy				phy
.1300	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1302	b1 22		lda ($22),y			lda 	(zTemp0),y
.1304	12 22		ora ($22)			ora 	(zTemp0)
.1306	f0 23		beq $132b			beq 	_CLConcreteString
.1308	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.130a	85 24		sta $24				sta 	zTemp1
.130c	b1 22		lda ($22),y			lda 	(zTemp0),y
.130e	85 25		sta $25				sta 	zTemp1+1
.1310	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.1312	38		sec				sec 								; we want 3 for slot size, status, string size.
.1313	e9 03		sbc #$03			sbc 	#3
.1315	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1317	90 12		bcc $132b			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1319	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.131b	1a		inc a				inc 	a
.131c	aa		tax				tax
.131d	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131f					_CLReplaceString:
.131f	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1321	c8		iny				iny
.1322	c8		iny				iny
.1323	91 24		sta ($24),y			sta 	(zTemp1),y
.1325	88		dey				dey
.1326	ca		dex				dex
.1327	d0 f6		bne $131f			bne 	_CLReplaceString
.1329	80 0a		bra $1335			bra 	_CLExit
.132b					_CLConcreteString:
.132b	20 05 28	jsr $2805			jsr 	StringConcrete  			; concreted string in XA.
.132e	a0 01		ldy #$01			ldy 	#1 							; store the address
.1330	92 22		sta ($22)			sta 	(zTemp0)
.1332	8a		txa				txa
.1333	91 22		sta ($22),y			sta 	(zTemp0),y
.1335					_CLExit:
.1335	7a		ply				ply
.1336	60		rts				rts
.1337					CLError:
.1337	4c 00 27	jmp $2700		jmp	ErrorV_variable
.133a					CLType:
.133a	4c fd 25	jmp $25fd		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.133d					Command_LIST:
.133d	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1340	9c 08 05	stz $0508			stz 	CLFrom+1
.1343	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1345	c9 99		cmp #$99			cmp 	#PR_COMMA
.1347	f0 1d		beq $1366			beq 	_CLToLine
.1349	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.134b	f0 37		beq $1384			beq 	_CLDefaultTo
.134d	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1350	a5 08		lda $08				lda 	IFR0+IM0
.1352	8d 07 05	sta $0507			sta 	CLFrom
.1355	8d 09 05	sta $0509			sta 	CLTo
.1358	a5 09		lda $09				lda 	IFR0+IM1
.135a	8d 08 05	sta $0508			sta 	CLFrom+1
.135d	8d 0a 05	sta $050a			sta 	CLTo+1
.1360	b1 18		lda ($18),y			lda 	(codePtr),y
.1362	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1364	f0 26		beq $138c			beq 	_CLList
.1366					_CLToLine:
.1366	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1368	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.136a	f0 18		beq $1384			beq 	_CLDefaultTo
.136c	20 8a 27	jsr $278a			jsr 	ERRCheckComma 				; sep comma
.136f	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1371	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1373	f0 0f		beq $1384			beq 	_CLDefaultTo
.1375	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; there's a To value.
.1378	a5 08		lda $08				lda 	IFR0+IM0
.137a	8d 09 05	sta $0509			sta 	CLTo
.137d	a5 09		lda $09				lda 	IFR0+IM1
.137f	8d 0a 05	sta $050a			sta 	CLTo+1
.1382	80 08		bra $138c			bra 	_CLList
.1384					_CLDefaultTo:
.1384	a9 ff		lda #$ff			lda 	#$FF
.1386	8d 09 05	sta $0509			sta 	CLTo
.1389	8d 0a 05	sta $050a			sta 	CLTo+1
.138c					_CLList:
.138c	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138f	85 19		sta $19				sta 	codePtr+1
.1391	64 18		stz $18				stz 	codePtr
.1393	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1395	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1397	20 da 1d	jsr $1dda			jsr 	TOKSetDetokeniseOutput
.139a					_CLLoop:
.139a	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.139c	f0 4a		beq $13e8			beq 	_CLExit
.139e	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.13a1	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.13a4	d0 45		bne $13eb			bne 	_CLBreak
.13a6	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a8	20 ee 13	jsr $13ee			jsr 	_CLCompareLine
.13ab	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13ad	f0 2c		beq $13db			beq 	_CLNext
.13af	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13b1	20 ee 13	jsr $13ee			jsr 	_CLCompareLine
.13b4	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b6	f0 23		beq $13db			beq 	_CLNext
.13b8	a0 02		ldy #$02			ldy 	#2 							; print line #
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y
.13bc	aa		tax				tax
.13bd	88		dey				dey
.13be	b1 18		lda ($18),y			lda 	(codePtr),y
.13c0	20 e3 28	jsr $28e3			jsr 	WriteIntXA
.13c3	a9 20		lda #$20			lda 	#32
.13c5	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13c8	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13ca	a5 18		lda $18				lda 	codePtr
.13cc	18		clc				clc
.13cd	69 03		adc #$03			adc 	#3
.13cf	aa		tax				tax
.13d0	90 01		bcc $13d3			bcc 	_CLNoCarry2
.13d2	c8		iny				iny
.13d3					_CLNoCarry2:
.13d3	20 95 1d	jsr $1d95			jsr 	TOKDetokenise
.13d6	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13db					_CLNext:
.13db	18		clc				clc 								; advance to next line.
.13dc	b2 18		lda ($18)			lda 	(codePtr)
.13de	65 18		adc $18				adc 	codePtr
.13e0	85 18		sta $18				sta 	codePtr
.13e2	90 02		bcc $13e6			bcc 	_CLNoCarry
.13e4	e6 19		inc $19				inc 	codePtr+1
.13e6					_CLNoCarry:
.13e6	80 b2		bra $139a			bra 	_CLLoop
.13e8					_CLExit:
.13e8	4c 02 29	jmp $2902			jmp 	WarmStart
.13eb					_CLBreak:
.13eb	4c 58 27	jmp $2758		jmp	ErrorV_break
.13ee					_CLCompareLine:
.13ee	a0 01		ldy #$01			ldy 	#1
.13f0	38		sec				sec
.13f1	b1 18		lda ($18),y			lda 	(codePtr),y
.13f3	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f6	85 22		sta $22				sta 	zTemp0
.13f8	c8		iny				iny
.13f9	b1 18		lda ($18),y			lda 	(codePtr),y
.13fb	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13fe	90 0a		bcc $140a			bcc 	_CLIsNegative
.1400	d0 05		bne $1407			bne 	_CLIsPositive
.1402	a5 22		lda $22				lda 	zTemp0
.1404	d0 01		bne $1407			bne 	_CLIsPositive
.1406	60		rts				rts
.1407					_CLIsPositive:
.1407	a9 01		lda #$01			lda 	#1
.1409	60		rts				rts
.140a					_CLIsNegative:
.140a	a9 ff		lda #$ff			lda 	#255
.140c	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.140d					Command_NEW:
.140d	20 8a 1f	jsr $1f8a			jsr 	PGMNewProgram 				; Reset current program
.1410	20 44 10	jsr $1044			jsr 	ClearCode 					; Run CLR
.1413	4c 35 15	jmp $1535			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1416					Command_READ:
.1416	20 98 17	jsr $1798			jsr 	EXPTermR0 					; get term to R0
.1419	90 35		bcc $1450			bcc 	_CRSyntax 					; fail if not a reference.
.141b	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.141d	48		pha				pha
.141e	a5 09		lda $09				lda 	IFR0+IM1
.1420	48		pha				pha
.1421	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1423	48		pha				pha
.1424	20 a9 14	jsr $14a9			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1427	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.142a	d0 27		bne $1453			bne 	_CRHaveData  				; forward for the next one.
.142c					_CRNextLine:
.142c	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.142e	f0 1a		beq $144a			beq 	_CRNoData
.1430					_CRKeepSearching:
.1430	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1432	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1434	20 dd 24	jsr $24dd			jsr 	ScanForward
.1437	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1439	f0 18		beq $1453			beq 	_CRHaveData 				; found it
.143b	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.143d	18		clc				clc 								; try the next line, keep going.
.143e	b2 18		lda ($18)			lda 	(codePtr)
.1440	65 18		adc $18				adc 	codePtr
.1442	85 18		sta $18				sta 	codePtr
.1444	90 e6		bcc $142c			bcc 	_CRNextLine
.1446	e6 19		inc $19				inc 	codePtr+1
.1448	80 e2		bra $142c			bra 	_CRNextLine
.144a					_CRNoData:
.144a	4c 85 26	jmp $2685		jmp	ErrorV_data
.144d					_CLType:
.144d	4c fd 25	jmp $25fd		jmp	ErrorV_type
.1450					_CRSyntax:
.1450	4c cd 25	jmp $25cd		jmp	ErrorV_syntax
.1453					_CRHaveData:
.1453	20 d0 16	jsr $16d0			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1456	68		pla				pla 								; type of l-expr
.1457	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1459	30 f2		bmi $144d			bmi 	_CLType
.145b	68		pla				pla 								; restore address
.145c	85 23		sta $23				sta 	zTemp0+1
.145e	68		pla				pla
.145f	85 22		sta $22				sta 	zTemp0
.1461	20 e4 12	jsr $12e4			jsr 	AssignData 					; write R0 there.
.1464	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1467	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1469	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.146b	d0 04		bne $1471			bne 	_CRSwapBack
.146d	c8		iny				iny 								; consume comma
.146e	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1471					_CRSwapBack:
.1471	20 a9 14	jsr $14a9			jsr 	SwapCodeDataPointers		; swap them back.
.1474	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1476	c8		iny				iny
.1477	c9 99		cmp #$99			cmp 	#PR_COMMA
.1479	f0 9b		beq $1416			beq 	Command_READ 				; if so go round again.
.147b	88		dey				dey 								; unpick get.
.147c	60		rts				rts
.147d					Command_DATA:
.147d	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147f	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1481	20 dd 24	jsr $24dd			jsr 	ScanForward
.1484	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1486	d0 01		bne $1489			bne 	_CDNotEOL
.1488	88		dey				dey
.1489					_CDNotEOL:
.1489	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.148a					Command_REM:
.148a					Command_REM2:
.148a	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.148c	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.148e	d0 06		bne $1496			bne 	_CRExit
.1490	c8		iny				iny 								; skip over it, it's a comment.
.1491	98		tya				tya
.1492	38		sec				sec
.1493	71 18		adc ($18),y			adc 	(codePtr),y
.1495	a8		tay				tay
.1496					_CRExit:
.1496	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1497					S
.1497					Command_RESTORE:
.1497	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.149a	8d 0c 05	sta $050c			sta 	dataPtr+1
.149d	9c 0b 05	stz $050b			stz 	dataPtr
.14a0	a9 03		lda #$03			lda 	#3 							; position start of line
.14a2	8d 0d 05	sta $050d			sta 	dataPos
.14a5	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a8	60		rts				rts
.14a9					SwapCodeDataPointers:
.14a9	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14ac	a6 18		ldx $18				ldx 	codePtr
.14ae	85 18		sta $18				sta 	codePtr
.14b0	8e 0b 05	stx $050b			stx 	dataPtr
.14b3	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b6	a6 19		ldx $19				ldx 	codePtr+1
.14b8	85 19		sta $19				sta 	codePtr+1
.14ba	8e 0c 05	stx $050c			stx 	dataPtr+1
.14bd	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14c0	8c 0d 05	sty $050d			sty 	dataPos
.14c3	a8		tay				tay
.14c4	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c5					Command_RUN:
.14c5	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.14c8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14cb	85 19		sta $19				sta 	codePtr+1
.14cd	64 18		stz $18				stz 	codePtr
.14cf	80 0b		bra $14dc			bra 	RUNNewLine
.14d1					RUNEndOfLine:
.14d1	18		clc				clc 								; advance to next line.
.14d2	b2 18		lda ($18)			lda 	(codePtr)
.14d4	65 18		adc $18				adc 	codePtr
.14d6	85 18		sta $18				sta 	codePtr
.14d8	90 02		bcc $14dc			bcc 	_RELNoCarry
.14da	e6 19		inc $19				inc 	codePtr+1
.14dc					_RELNoCarry:
.14dc					RUNNewLine:
.14dc	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14de	9a		txs				txs
.14df	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14e1	f0 52		beq $1535			beq 	Command_END
.14e3	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e5	b1 18		lda ($18),y			lda 	(codePtr),y
.14e7	8d 26 06	sta $0626			sta 	ERRLine
.14ea	c8		iny				iny
.14eb	b1 18		lda ($18),y			lda 	(codePtr),y
.14ed	8d 27 06	sta $0627			sta 	ERRLine+1
.14f0	c8		iny				iny 								; offset into codePtr for start of line.
.14f1					RUNNewCommand:
.14f1	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14f4	ce 10 05	dec $0510			dec 	checkCounter
.14f7	d0 0a		bne $1503			bne 	_RNCNoCheck
.14f9	5a		phy				phy 								; keyboard check.
.14fa	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14fd	7a		ply				ply
.14fe	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1501	d0 1e		bne $1521			bne 	_RUNBreak
.1503					_RNCNoCheck:
.1503	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1505	10 1d		bpl $1524			bpl		_RUNNotToken 				; probably an identifier
.1507	c8		iny				iny 								; consume token
.1508	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.150a	f0 e5		beq $14f1			beq 	RUNNewCommand
.150c	c9 a2		cmp #$a2			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.150e	b0 0e		bcs $151e			bcs 	_RUNSyntax
.1510	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1512	90 0a		bcc $151e			bcc 	_RUNSyntax
.1514	0a		asl a				asl 	a 							; double into X.
.1515	aa		tax				tax
.1516	20 1b 15	jsr $151b			jsr 	_RUNDispatchMain			; call the main dispatcher
.1519	80 d6		bra $14f1			bra 	RUNNewCommand
.151b					_RUNDispatchMain:
.151b	7c 7b 1c	jmp ($1c7b,x)			jmp 	(VectorTable,x)
.151e					_RUNSyntax:
.151e	4c cd 25	jmp $25cd		jmp	ErrorV_syntax
.1521					_RUNBreak:
.1521	4c 58 27	jmp $2758		jmp	ErrorV_break
.1524					_RUNNotToken:
.1524	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1526	90 f6		bcc $151e			bcc 	_RUNSyntax
.1528	20 c3 12	jsr $12c3			jsr 	CommandLET 					; assignment
.152b	80 c4		bra $14f1			bra 	RUNNewCommand 				; loop round.
.152d					Command_Shift_Handler:
.152d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.152f	c8		iny				iny
.1530	0a		asl a				asl 	a 							; double into X
.1531	aa		tax				tax
.1532	7c 7b 1d	jmp ($1d7b,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1535					Command_END:
.1535	4c 02 29	jmp $2902			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1538					Command_STOP:
.1538	4c 71 26	jmp $2671		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.153b					Command_Sys:
.153b	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; execution address
.153e	5a		phy				phy
.153f	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1542	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1545	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.1548	20 4d 15	jsr $154d			jsr 	_CSCallIFR0 				; call the code
.154b	7a		ply				ply
.154c	60		rts				rts
.154d					_CSCallIFR0:
.154d	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1550					NoExec01:
.1550					NoExec02:
.1550					NoExec03:
.1550					NoExec04:
.1550					NoExec05:
.1550					NoExec06:
.1550					NoExec07:
.1550					NoExec08:
.1550	4c cd 25	jmp $25cd		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1553					EXPBinAdd:
.1553	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1555	30 6f		bmi $15c6			bmi 	EXPConcatenate
.1557	a2 0c		ldx #$0c			ldx 	#IFR1
.1559	4c 23 2b	jmp $2b23			jmp 	IFloatAdd
.155c					EXPBinSub:
.155c	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.155e	30 3f		bmi $159f			bmi 	EXPTypeError
.1560	a2 0c		ldx #$0c			ldx 	#IFR1
.1562	4c 1c 2b	jmp $2b1c			jmp 	IFloatSubtract
.1565					EXPBinMul:
.1565	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1567	30 36		bmi $159f			bmi 	EXPTypeError
.1569	a2 0c		ldx #$0c			ldx 	#IFR1
.156b	4c cd 2b	jmp $2bcd			jmp 	IFloatMultiply
.156e					EXPBinFDiv:
.156e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1570	30 2d		bmi $159f			bmi 	EXPTypeError
.1572	a2 0c		ldx #$0c			ldx 	#IFR1
.1574	20 4f 2e	jsr $2e4f			jsr 	IFloatDivideFloat
.1577	b0 0f		bcs $1588			bcs 	EXPDZero
.1579	60		rts				rts
.157a					EXPBinIDiv:
.157a	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.157c	30 21		bmi $159f			bmi 	EXPTypeError
.157e	a2 0c		ldx #$0c			ldx 	#IFR1
.1580	20 4f 2e	jsr $2e4f			jsr 	IFloatDivideFloat
.1583	b0 03		bcs $1588			bcs 	EXPDZero
.1585	4c 2c 2e	jmp $2e2c			jmp 	IFloatIntegerR0
.1588					EXPDZero:
.1588	4c 46 26	jmp $2646		jmp	ErrorV_divzero
.158b					EXPBinIMod:
.158b	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.158d	30 10		bmi $159f			bmi 	EXPTypeError
.158f	a2 0c		ldx #$0c			ldx 	#IFR1
.1591	5a		phy				phy
.1592	20 62 2d	jsr $2d62			jsr 	IFPreProcessBitwise 		; set up everything.
.1595	d0 05		bne $159c			bne 	EXPDRange
.1597	20 9b 2c	jsr $2c9b			jsr 	IFloatModulusInteger
.159a	7a		ply				ply
.159b	60		rts				rts
.159c					EXPDRange:
.159c	4c de 25	jmp $25de		jmp	ErrorV_range
.159f					EXPTypeError:
.159f	4c fd 25	jmp $25fd		jmp	ErrorV_type
.15a2					EXPBinAnd:
.15a2	24 0b		bit $0b				bit 	IFR0+IExp
.15a4	30 f9		bmi $159f			bmi 	EXPTypeError
.15a6	a2 0c		ldx #$0c			ldx 	#IFR1
.15a8	20 1d 2d	jsr $2d1d			jsr 	IFloatBitwiseAnd
.15ab	b0 ef		bcs $159c			bcs 	EXPDRange
.15ad	60		rts				rts
.15ae					EXPBinOr:
.15ae	24 0b		bit $0b				bit 	IFR0+IExp
.15b0	30 ed		bmi $159f			bmi 	EXPTypeError
.15b2	a2 0c		ldx #$0c			ldx 	#IFR1
.15b4	20 34 2d	jsr $2d34			jsr 	IFloatBitwiseOr
.15b7	b0 e3		bcs $159c			bcs 	EXPDRange
.15b9	60		rts				rts
.15ba					EXPBinXor:
.15ba	24 0b		bit $0b				bit 	IFR0+IExp
.15bc	30 e1		bmi $159f			bmi 	EXPTypeError
.15be	a2 0c		ldx #$0c			ldx 	#IFR1
.15c0	20 4b 2d	jsr $2d4b			jsr 	IFloatBitwiseXor
.15c3	b0 d7		bcs $159c			bcs 	EXPDRange
.15c5	60		rts				rts
.15c6					EXPConcatenate:
.15c6	18		clc				clc
.15c7	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c9	72 0c		adc ($0c)			adc 	(IFR1)
.15cb	b0 2d		bcs $15fa			bcs 	_EXPCError 					; far too long.
.15cd	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15cf	da		phx				phx
.15d0	a6 09		ldx $09				ldx 	IFR0+1
.15d2	da		phx				phx
.15d3	20 78 28	jsr $2878			jsr 	StringTempAllocate 			; allocate string, set up return
.15d6	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d8	a5 0c		lda $0c				lda 	IFR1
.15da	20 e3 15	jsr $15e3			jsr 	_EXPCCopyXA
.15dd	fa		plx				plx 								; copy second string
.15de	68		pla				pla
.15df	20 e3 15	jsr $15e3			jsr 	_EXPCCopyXA
.15e2	60		rts				rts
.15e3					_EXPCCopyXA:
.15e3	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e5	85 22		sta $22				sta 	zTemp0
.15e7	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15e9	f0 0e		beq $15f9			beq 	_EXPCCExit 					; nothing in string
.15eb	aa		tax				tax 								; count
.15ec	5a		phy				phy 								; start position
.15ed	a0 01		ldy #$01			ldy 	#1
.15ef					_EXPCCLoop:
.15ef	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15f1	20 ad 28	jsr $28ad			jsr 	StringTempWrite
.15f4	c8		iny				iny
.15f5	ca		dex				dex
.15f6	d0 f7		bne $15ef			bne 	_EXPCCLoop
.15f8	7a		ply				ply
.15f9					_EXPCCExit:
.15f9	60		rts				rts
.15fa					_EXPCError:
.15fa	4c ea 26	jmp $26ea		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15fd					EXPReturnTrue:
.15fd	a2 08		ldx #$08			ldx 	#IFR0
.15ff	a9 01		lda #$01			lda 	#1
.1601	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.1604	20 36 31	jsr $3136			jsr 	IFloatNegate
.1607	60		rts				rts
.1608					EXPReturnFalse:
.1608	a2 08		ldx #$08			ldx 	#IFR0
.160a	4c 2b 31	jmp $312b			jmp 	IFloatSetZero
.160d					EXPCompareEqual:
.160d	20 43 16	jsr $1643			jsr 	EXPCompareBaseCode
.1610	c9 00		cmp #$00			cmp 	#0
.1612	f0 e9		beq $15fd			beq 	EXPReturnTrue
.1614	80 f2		bra $1608			bra 	EXPReturnFalse
.1616					EXPCompareLess:
.1616	20 43 16	jsr $1643			jsr 	EXPCompareBaseCode
.1619	c9 ff		cmp #$ff			cmp 	#$FF
.161b	f0 e0		beq $15fd			beq 	EXPReturnTrue
.161d	80 e9		bra $1608			bra 	EXPReturnFalse
.161f					EXPCompareGreater:
.161f	20 43 16	jsr $1643			jsr 	EXPCompareBaseCode
.1622	c9 01		cmp #$01			cmp 	#1
.1624	f0 d7		beq $15fd			beq 	EXPReturnTrue
.1626	80 e0		bra $1608			bra 	EXPReturnFalse
.1628					EXPCompareNotEqual:
.1628	20 43 16	jsr $1643			jsr 	EXPCompareBaseCode
.162b	c9 00		cmp #$00			cmp 	#0
.162d	d0 ce		bne $15fd			bne 	EXPReturnTrue
.162f	80 d7		bra $1608			bra 	EXPReturnFalse
.1631					EXPCompareLessEqual:
.1631	20 43 16	jsr $1643			jsr 	EXPCompareBaseCode
.1634	c9 01		cmp #$01			cmp 	#1
.1636	d0 c5		bne $15fd			bne 	EXPReturnTrue
.1638	80 ce		bra $1608			bra 	EXPReturnFalse
.163a					EXPCompareGreaterEqual:
.163a	20 43 16	jsr $1643			jsr 	EXPCompareBaseCode
.163d	c9 ff		cmp #$ff			cmp 	#$FF
.163f	d0 bc		bne $15fd			bne 	EXPReturnTrue
.1641	80 c5		bra $1608			bra 	EXPReturnFalse
.1643					EXPCompareBaseCode:
.1643	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1645	30 10		bmi $1657			bmi 	_EXCBCString
.1647	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1649	20 fa 2d	jsr $2dfa			jsr 	IFloatCompare
.164c	a5 08		lda $08				lda 	IFR0+IM0
.164e	f0 06		beq $1656			beq 	_EXCBCExit 					; return 0 if zero
.1650	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1652	50 02		bvc $1656			bvc 	_EXCBCExit
.1654	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1656					_EXCBCExit:
.1656	60		rts				rts
.1657					_EXCBCString:
.1657	5a		phy				phy
.1658	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.165a	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.165c	90 02		bcc $1660			bcc 	_EXCBCSmaller
.165e	b2 0c		lda ($0c)			lda 	(IFR1)
.1660					_EXCBCSmaller:
.1660	aa		tax				tax
.1661	f0 0d		beq $1670			beq 	_EXCBCMatches 				; if zero common length matches
.1663	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1665					_EXCBCCheckSmallerMatches:
.1665	c8		iny				iny 								; compare directly as far as common length
.1666	38		sec				sec
.1667	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1669	f1 08		sbc ($08),y			sbc 	(IFR0),y
.166b	d0 08		bne $1675			bne 	_EXCBCExit2
.166d	ca		dex				dex
.166e	d0 f5		bne $1665			bne 	_EXCBCCheckSmallerMatches
.1670					_EXCBCMatches:
.1670	38		sec				sec
.1671	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1673	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1675					_EXCBCExit2:
.1675	7a		ply				ply
.1676	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1678	f0 04		beq $167e			beq 	_EXCBCReturn
.167a	30 03		bmi $167f			bmi 	_EXCBCFF 					; return $FF if <
.167c	a9 01		lda #$01			lda 	#1 							; return 1 if >
.167e					_EXCBCReturn:
.167e	60		rts				rts
.167f					_EXCBCFF:
.167f	a9 ff		lda #$ff			lda 	#$FF
.1681	60		rts				rts
.1682					_EXCBCRange:
.1682	4c de 25	jmp $25de		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1685					EXPBinLeft:
.1685	a9 ff		lda #$ff			lda 	#$FF
.1687	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.168a	4c 90 16	jmp $1690			jmp 	EXPShiftCommon
.168d					EXPBinRight:
.168d	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1690					EXPShiftCommon:
.1690	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1692	05 0f		ora $0f				ora 	IFR1+IExp
.1694	29 7f		and #$7f			and 	#$7F
.1696	d0 35		bne $16cd			bne 	_EXPSRange
.1698	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.169a	29 e0		and #$e0			and 	#$E0
.169c	05 09		ora $09				ora 	IFR0+IM1
.169e	05 0a		ora $0a				ora 	IFR0+IM2
.16a0	d0 25		bne $16c7			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.16a2	5a		phy				phy
.16a3	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a5	29 1f		and #$1f			and 	#$1F
.16a7	f0 17		beq $16c0			beq 	_EXPSExit 					; exit if zero
.16a9	a8		tay				tay
.16aa					_EXPSLoop:
.16aa	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16ac	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16af	30 05		bmi $16b6			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16b1	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.16b4	80 07		bra $16bd			bra 	_EXPSContinue
.16b6					_EXPSShiftLeft:
.16b6	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.16b9	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16bb	30 10		bmi $16cd			bmi 	_EXPSRange
.16bd					_EXPSContinue:
.16bd	88		dey				dey 								; do it Y times
.16be	d0 ea		bne $16aa			bne 	_EXPSLoop
.16c0					_EXPSExit:
.16c0	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16c2	20 bc 30	jsr $30bc			jsr 	IFloatCopyFromRegister
.16c5	7a		ply				ply
.16c6	60		rts				rts
.16c7					_EXPSShiftZero:
.16c7	a2 08		ldx #$08			ldx 	#IFR0
.16c9	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.16cc	60		rts				rts
.16cd					_EXPSRange:
.16cd	4c de 25	jmp $25de		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16d0					EXPEvaluateExpression:
.16d0	a9 00		lda #$00			lda 	#0 							; current precedence
.16d2					EXPEvaluateExpressionPrecedenceA:
.16d2	48		pha				pha
.16d3	20 4d 17	jsr $174d			jsr 	EXPTermValueR0				; do first term.
.16d6					_EELoop:
.16d6	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d8	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16da	90 31		bcc $170d			bcc 	_EEExit
.16dc	aa		tax				tax 								; access the precedence of the operator.
.16dd	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16de	dd aa 19	cmp $19aa,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16e1	b0 2b		bcs $170e			bcs 	_EEExit2
.16e3	48		pha				pha 								; save current precedence.
.16e4	da		phx				phx 								; save operator
.16e5	c8		iny				iny 								; consume operator
.16e6	da		phx				phx
.16e7	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e9	20 7a 30	jsr $307a			jsr 	IFloatPushRx
.16ec	fa		plx				plx
.16ed	bd aa 19	lda $19aa,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16f0	20 d2 16	jsr $16d2			jsr 	EXPEvaluateExpressionPrecedenceA
.16f3	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f5	20 9b 30	jsr $309b			jsr 	IFloatPullRx
.16f8	fa		plx				plx 								; operator
.16f9	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16fb	45 0f		eor $0f				eor 	IFR1+IExp
.16fd	30 08		bmi $1707			bmi 	_EEType
.16ff					_EETypeOkay:
.16ff	8a		txa				txa
.1700	0a		asl a				asl 	a 							; double -> X
.1701	aa		tax				tax
.1702	20 0a 17	jsr $170a			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1705	80 cf		bra $16d6			bra 	_EELoop
.1707					_EEType:
.1707	4c fd 25	jmp $25fd		jmp	ErrorV_type
.170a					_EECallBinary:
.170a	7c 7b 1c	jmp ($1c7b,x)			jmp 	(VectorTable,x)
.170d					_EEExit:
.170d	68		pla				pla 								; throw precedence
.170e					_EEExit2:
.170e	18		clc				clc
.170f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1710					EXPEvalNumber:
.1710	20 d0 16	jsr $16d0			jsr 	EXPEvaluateExpression 		; get a value
.1713	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1715	30 01		bmi $1718			bmi 	EVUType
.1717	60		rts				rts
.1718					EVUType:
.1718	4c fd 25	jmp $25fd		jmp	ErrorV_type
.171b					EXPEvalInteger:
.171b	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.171e	20 2c 2e	jsr $2e2c			jsr 	IFloatIntegerR0
.1721	60		rts				rts
.1722					EXPEvalInteger16:
.1722	20 1b 17	jsr $171b			jsr 	EXPEvalInteger 				; get integer
.1725	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1727	d0 21		bne $174a			bne 	EVURange
.1729	a6 09		ldx $09				ldx 	IFR0+IM1
.172b	a5 08		lda $08				lda 	IFR0+IM0
.172d	60		rts				rts
.172e					EXPEvalInteger8:
.172e	20 1b 17	jsr $171b			jsr 	EXPEvalInteger 				; get integer
.1731	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1733	05 09		ora $09				ora 	IFR0+IM1
.1735	d0 13		bne $174a			bne 	EVURange
.1737	a5 08		lda $08				lda 	IFR0+IM0
.1739	60		rts				rts
.173a					EXPEvalString:
.173a	20 d0 16	jsr $16d0			jsr 	EXPEvaluateExpression 		; get value
.173d	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.173f	10 d7		bpl $1718			bpl 	EVUType
.1741	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1743	86 23		stx $23				stx 	zTemp0+1
.1745	a5 08		lda $08				lda 	IFR0+IM0
.1747	85 22		sta $22				sta 	zTemp0
.1749	60		rts				rts
.174a					EVURange:
.174a	4c de 25	jmp $25de		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.174d					EXPTermValueR0:
.174d	20 98 17	jsr $1798			jsr 	EXPTermR0 					; get term
.1750	90 45		bcc $1797			bcc 	_ETVNotReference 			; exit if value.
.1752	5a		phy				phy
.1753	a0 03		ldy #$03			ldy 	#3 							; get type
.1755	b1 08		lda ($08),y			lda 	(IFR0),y
.1757	30 14		bmi $176d			bmi 	_ETVDereferenceString
.1759	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.175b	88		dey				dey 								; get byte 2
.175c	b1 08		lda ($08),y			lda 	(IFR0),y
.175e	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1760	88		dey				dey 								; get byte 1
.1761	b1 08		lda ($08),y			lda 	(IFR0),y
.1763	aa		tax				tax 								; save in X so we can overwrite it
.1764	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1766	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1768	85 08		sta $08				sta 	IFR0+IM0
.176a	7a		ply				ply
.176b	18		clc				clc
.176c	60		rts				rts
.176d					_ETVDereferenceString:
.176d	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176f	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1771	12 08		ora ($08)			ora 	(IFR0)
.1773	f0 11		beq $1786			beq 	_ETVNull 					; if so, return a fake NULL.
.1775	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1777	aa		tax				tax
.1778	b2 08		lda ($08)			lda 	(IFR0)
.177a	18		clc				clc 								; add two so points to actual string.
.177b	69 02		adc #$02			adc 	#2
.177d	90 01		bcc $1780			bcc 	_EVDSNoCarry
.177f	e8		inx				inx
.1780					_EVDSNoCarry:
.1780	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1782	85 08		sta $08				sta 	IFR0
.1784	80 08		bra $178e			bra 	_ETVFillExit 				; tidy up and exit.
.1786					_ETVNull:
.1786	a9 96		lda #$96			lda 	#_EVTNString & $FF
.1788	85 08		sta $08				sta 	IFR0+IM0
.178a	a9 17		lda #$17			lda 	#_EVTNString >> 8
.178c	85 09		sta $09				sta 	IFR0+IM1
.178e					_ETVFillExit:
.178e	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1790	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1792	85 0b		sta $0b				sta 	IFR0+IExp
.1794	7a		ply				ply
.1795	60		rts				rts
.1796					_EVTNString:
>1796	00						.byte 	0
.1797					_ETVNotReference:
.1797	60		rts				rts
.1798					EXPTermR0:
.1798	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.179a	30 10		bmi $17ac			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.179c	c8		iny				iny 								; consume element
.179d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179f	b0 08		bcs $17a9			bcs 	_ETMIdentifier
.17a1	20 d7 17	jsr $17d7			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.17a4	20 0a 18	jsr $180a			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a7	18		clc				clc 								; return value ok
.17a8	60		rts				rts
.17a9					_ETMIdentifier:
.17a9	4c c4 2a	jmp $2ac4			jmp 	VARCheckSimple 				; check variables, seperate module.
.17ac					_ETMIsUnaryOrMinus:
.17ac	c8		iny				iny 								; consume element
.17ad	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17af	d0 0e		bne $17bf			bne 	_ETMCheckUnary
.17b1	20 4d 17	jsr $174d			jsr 	EXPTermValueR0 				; get a term to negate
.17b4	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b6	20 36 31	jsr $3136			jsr 	IFloatNegate
.17b9	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17bb	30 17		bmi $17d4			bmi 	_ETMUnaryType				; if so error.
.17bd	18		clc				clc
.17be	60		rts				rts
.17bf					_ETMCheckUnary:
.17bf	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17c1	90 0e		bcc $17d1			bcc 	_ETMUnarySyntax
.17c3	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c5	b0 0a		bcs $17d1			bcs 	_ETMUnarySyntax
.17c7	0a		asl a				asl 	a 							; make it into an index => X
.17c8	aa		tax				tax
.17c9	20 ce 17	jsr $17ce			jsr 	_ETMCallUnaryFunction 		; call the function
.17cc	18		clc				clc 								; and return it.
.17cd	60		rts				rts
.17ce					_ETMCallUnaryFunction:
.17ce	7c 7b 1c	jmp ($1c7b,x)			jmp 	(VectorTable,x)
.17d1					_ETMUnarySyntax:
.17d1	4c cd 25	jmp $25cd		jmp	ErrorV_syntax
.17d4					_ETMUnaryType:
.17d4	4c fd 25	jmp $25fd		jmp	ErrorV_type
.17d7					EXPExtractTokenisedInteger:
.17d7	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17d9	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17db	64 09		stz $09				stz 	IFR0+IM1
.17dd	64 0a		stz $0a				stz 	IFR0+IM2
.17df					_ETMConstant:
.17df	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17e1	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17e3	b0 24		bcs $1809			bcs 	_ETMCExit 					; no, exit.
.17e5	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17e7	a5 09		lda $09				lda 	IFR0+IM1
.17e9	85 0a		sta $0a				sta 	IFR0+IM2
.17eb	a5 08		lda $08				lda 	IFR0+IM0
.17ed	85 09		sta $09				sta 	IFR0+IM1
.17ef	64 08		stz $08				stz 	IFR0+IM0
.17f1	8a		txa				txa
.17f2	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17f3	66 0a		ror $0a				ror 	IFR0+IM2
.17f5	66 09		ror $09				ror 	IFR0+IM1
.17f7	66 08		ror $08				ror 	IFR0+IM0
.17f9	4a		lsr a				lsr 	a
.17fa	66 0a		ror $0a				ror 	IFR0+IM2
.17fc	66 09		ror $09				ror 	IFR0+IM1
.17fe	66 08		ror $08				ror 	IFR0+IM0
.1800	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1802	11 18		ora ($18),y			ora 	(codePtr),y
.1804	85 08		sta $08				sta 	IFR0+IM0
.1806	c8		iny				iny 								; consume, loop back
.1807	80 d6		bra $17df			bra 	_ETMConstant
.1809					_ETMCExit:
.1809	60		rts				rts
.180a					EXPCheckDecimalFollows:
.180a	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.180c	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.180e	d0 19		bne $1829			bne 	_ETMCDExit
.1810	c8		iny				iny 								; consume token.
.1811	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1813	5a		phy				phy									; save current position
.1814	48		pha				pha 								; save count of chars.
.1815	38		sec				sec 								; address into YX : y + codePtr+1
.1816	98		tya				tya
.1817	65 18		adc $18				adc 	codePtr
.1819	aa		tax				tax
.181a	a5 19		lda $19				lda 	codePtr+1
.181c	69 00		adc #$00			adc 	#0
.181e	a8		tay				tay
.181f	68		pla				pla 								; get count.
.1820	20 cf 2f	jsr $2fcf			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1823	7a		ply				ply 								; go to next token.
.1824	98		tya				tya
.1825	38		sec				sec
.1826	71 18		adc ($18),y			adc 	(codePtr),y
.1828	a8		tay				tay
.1829					_ETMCDExit:
.1829	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.182a					EXPUnaryAbs:
.182a	20 10 17	jsr $1710			jsr 	EXPEvalNumber 					; number to R0
.182d	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.1830	20 6e 2d	jsr $2d6e			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1833	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1834					EXPUnaryAsc:
.1834	20 3a 17	jsr $173a			jsr 	EXPEvalString 					; string to R0, zTemp0
.1837	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.183a	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.183c	f0 06		beq $1844			beq 	_EXAZero 						; if so return 0
.183e	5a		phy				phy 									; otherwise get first character
.183f	a0 01		ldy #$01			ldy 	#1
.1841	b1 22		lda ($22),y			lda 	(zTemp0),y
.1843	7a		ply				ply
.1844					_EXAZero:
.1844	a2 08		ldx #$08			ldx 	#IFR0
.1846	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.1849	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.184a					EXPUnaryChr:
.184a	20 2e 17	jsr $172e			jsr 	EXPEvalInteger8 				; expr
.184d	48		pha				pha 									; push on stack
.184e	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.1851	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1853	20 78 28	jsr $2878			jsr 	StringTempAllocate
.1856	68		pla				pla 									; get value back
.1857	20 ad 28	jsr $28ad			jsr 	StringTempWrite 				; write to string.
.185a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.185b					EXPUnaryDec:
.185b	20 3a 17	jsr $173a			jsr 	EXPEvalString 					; string to R0, zTemp0
.185e	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.1861	5a		phy				phy 									; save position.
.1862	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1864	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.1867	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1869	f0 3b		beq $18a6			beq 	_EUDError 						; empty string is not legit.
.186b	aa		tax				tax 									; count in X.
.186c	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.186e					_EUDLoop:
.186e	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.1870	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1872	90 02		bcc $1876			bcc 	_EUDNoCase
.1874	e9 20		sbc #$20			sbc 	#$20
.1876					_EUDNoCase:
.1876	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1878	90 2c		bcc $18a6			bcc 	_EUDError
.187a	c9 3a		cmp #$3a			cmp 	#'9'+1
.187c	90 0a		bcc $1888			bcc 	_EUDOkay
.187e	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1880	90 24		bcc $18a6			bcc 	_EUDError
.1882	c9 47		cmp #$47			cmp 	#'F'+1
.1884	b0 20		bcs $18a6			bcs 	_EUDError
.1886	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1888					_EUDOkay:
.1888	29 0f		and #$0f			and 	#15 							; make constant
.188a	da		phx				phx
.188b	48		pha				pha
.188c	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.188e	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1891	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1894	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1897	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.189a	68		pla				pla 									; pop constant and OR in
.189b	fa		plx				plx
.189c	05 08		ora $08				ora 	IFR0+IM0
.189e	85 08		sta $08				sta 	IFR0+IM0
.18a0	c8		iny				iny 									; next char
.18a1	ca		dex				dex 									; done all characters ?
.18a2	d0 ca		bne $186e			bne 	_EUDLoop
.18a4	7a		ply				ply
.18a5	60		rts				rts
.18a6					_EUDError:
.18a6	4c ef 25	jmp $25ef		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18a9					EXPUnaryInlineDec:
.18a9	4c cd 25	jmp $25cd		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18ac					EXPUnaryPeek:
.18ac	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 				; number to R0
.18af	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.18b2	b2 08		lda ($08)			lda 	(IFR0)
.18b4	a2 08		ldx #$08			ldx 	#IFR0
.18b6	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.18b9	60		rts				rts
.18ba					EXPUnaryDeek:
.18ba	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 				; number to R0
.18bd	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.18c0	5a		phy				phy
.18c1	a0 01		ldy #$01			ldy 	#1
.18c3	b1 08		lda ($08),y			lda 	(IFR0),y
.18c5	7a		ply				ply
.18c6	48		pha				pha
.18c7	b2 08		lda ($08)			lda 	(IFR0)
.18c9	a2 08		ldx #$08			ldx 	#IFR0
.18cb	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.18ce	68		pla				pla
.18cf	85 09		sta $09				sta 	IFR0+IM1
.18d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18d2					EXPUnaryNull:
.18d2	20 4d 17	jsr $174d			jsr 	EXPTermValueR0
.18d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d6					EXPUnaryFrac:
.18d6	20 10 17	jsr $1710			jsr 	EXPEvalNumber 					; number to R0
.18d9	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.18dc	20 d6 2d	jsr $2dd6			jsr 	IFloatFractionalR0 				; get fractional bit.
.18df	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18e0					EXPUnaryInkey:
.18e0	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.18e3	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e5	20 78 28	jsr $2878			jsr 	StringTempAllocate
.18e8	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18eb	b0 06		bcs $18f3			bcs 	_EUIExit
.18ed	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18f0	20 ad 28	jsr $28ad			jsr 	StringTempWrite
.18f3					_EUIExit:
.18f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18f4					EXPUnaryInt:
.18f4	20 10 17	jsr $1710			jsr 	EXPEvalNumber 					; number to R0
.18f7	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; check for )
.18fa	20 2c 2e	jsr $2e2c			jsr 	IFloatIntegerR0 				; force to integer.
.18fd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18fe					EXPUnaryLen:
.18fe	20 3a 17	jsr $173a			jsr 	EXPEvalString 					; string to R0, zTemp0
.1901	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.1904	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.1906	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1908	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.190b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.190c					EXPUnaryParenthesis:
.190c	20 10 17	jsr $1710			jsr 	EXPEvalNumber 					; number to R0
.190f	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.1912	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1913					EXPUnaryRnd:
.1913	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; number to R0
.1916	20 82 27	jsr $2782			jsr 	ERRCheckRParen 				; )
.1919	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.191b	20 32 19	jsr $1932			jsr 	EXPLoadInRandom
.191e	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1920	85 0b		sta $0b				sta 	IFR0+IExp
.1922	60		rts				rts
.1923					ExpUnaryRand:
.1923	20 1b 17	jsr $171b			jsr 	EXPEvalInteger 				; integer to R0
.1926	20 82 27	jsr $2782			jsr 	ERRCheckRParen 				; )
.1929	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.192b	20 32 19	jsr $1932			jsr 	EXPLoadInRandom
.192e	20 9b 2c	jsr $2c9b			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1931	60		rts				rts
.1932					EXPLoadInRandom:
.1932	20 2b 31	jsr $312b			jsr 	IFloatSetZero 				; zero it
.1935	20 47 19	jsr $1947			jsr 	EXPRandom32 				; do a 23 bit number.
.1938	95 00		sta $00,x			sta 	IM0,x
.193a	20 47 19	jsr $1947			jsr 	EXPRandom32
.193d	95 01		sta $01,x			sta 	IM1,x
.193f	20 47 19	jsr $1947			jsr 	EXPRandom32
.1942	29 7f		and #$7f			and 	#$7F
.1944	95 02		sta $02,x			sta 	IM2,x
.1946	60		rts				rts
.1947					EXPRandom32:
.1947	5a		phy				phy
.1948	a0 08		ldy #$08			ldy 	#8
.194a	ad 12 05	lda $0512			lda 	EXPSeed+0
.194d	0d 13 05	ora $0513			ora 	EXPSeed+1
.1950	0d 14 05	ora $0514			ora 	EXPSeed+2
.1953	0d 15 05	ora $0515			ora 	EXPSeed+3
.1956	d0 08		bne $1960			bne 	_EXPRNoReset
.1958	ee 12 05	inc $0512			inc 	EXPSeed+0
.195b	a0 10		ldy #$10			ldy 	#16
.195d	8c 15 05	sty $0515			sty 	EXPSeed+3
.1960					_EXPRNoReset:
.1960	ad 12 05	lda $0512			lda 	EXPSeed+0
.1963					_EXPRLoop:
.1963	0a		asl a				asl		a
.1964	2e 13 05	rol $0513			rol 	EXPSeed+1
.1967	2e 14 05	rol $0514			rol 	EXPSeed+2
.196a	2e 15 05	rol $0515			rol 	EXPSeed+3
.196d	90 02		bcc $1971			bcc 	_EXPRNoEOR
.196f	49 c5		eor #$c5			eor 	#$C5
.1971					_EXPRNoEOR:
.1971	88		dey				dey
.1972	d0 ef		bne $1963			bne 	_EXPRLoop
.1974	8d 12 05	sta $0512			sta 	EXPSeed+0
.1977	7a		ply				ply
.1978	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1979					EXPUnarySgn:
.1979	20 10 17	jsr $1710			jsr 	EXPEvalNumber 					; number to R0
.197c	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.197f	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1981	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister
.1984	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1986	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.1989	a2 0c		ldx #$0c			ldx 	#IFR1
.198b	20 fa 2d	jsr $2dfa			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.198e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.198f					EXPUnarySqr:
.198f	20 10 17	jsr $1710			jsr 	EXPEvalNumber 					; number to R0
.1992	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.1995	20 76 2d	jsr $2d76			jsr 	IFloatSquareRootR0 				; square root.
.1998	b0 01		bcs $199b			bcs 	_EUSValue 						; error check.
.199a	60		rts				rts
.199b					_EUSValue:
.199b	4c de 25	jmp $25de		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.199e					EXPUnaryHex:
.199e	20 1b 17	jsr $171b			jsr 	EXPEvalInteger 					; expr
.19a1	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.19a4	5a		phy				phy
.19a5	a9 10		lda #$10			lda 	#16
.19a7	20 cd 2e	jsr $2ecd			jsr 	IFloatIntegerToStringR0
.19aa	80 0a		bra $19b6			bra 	EUSMain
.19ac					EXPUnaryStr:
.19ac	20 10 17	jsr $1710			jsr 	EXPEvalNumber 					; expr
.19af	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.19b2	5a		phy				phy
.19b3	20 28 2f	jsr $2f28			jsr 	IFloatFloatToStringR0 			; convert to string
.19b6					EUSMain:
.19b6	b0 18		bcs $19d0			bcs 	_EUSError
.19b8	86 22		stx $22				stx 	zTemp0 							; save string address
.19ba	84 23		sty $23				sty 	zTemp0+1
.19bc	48		pha				pha 									; save count
.19bd	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19bf	20 78 28	jsr $2878			jsr 	StringTempAllocate
.19c2	fa		plx				plx 									; count in X
.19c3	a0 00		ldy #$00			ldy 	#0
.19c5					_EUSCopy:
.19c5	b1 22		lda ($22),y			lda 	(zTemp0),y
.19c7	c8		iny				iny
.19c8	20 ad 28	jsr $28ad			jsr 	StringTempWrite
.19cb	ca		dex				dex
.19cc	d0 f7		bne $19c5			bne	 	_EUSCopy
.19ce	7a		ply				ply
.19cf	60		rts				rts
.19d0					_EUSError:
.19d0	4c de 25	jmp $25de		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19d3					EXPUnaryInlineString:
.19d3	18		clc				clc 								; physical address -> IM0,1
.19d4	98		tya				tya 								; put the actual address in IM0
.19d5	65 18		adc $18				adc 	codePtr
.19d7	85 08		sta $08				sta 	IFR0+IM0
.19d9	a5 19		lda $19				lda 	codePtr+1
.19db	69 00		adc #$00			adc 	#0
.19dd	85 09		sta $09				sta 	IFR0+IM1
.19df	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19e1	a9 80		lda #$80			lda 	#$80
.19e3	85 0b		sta $0b				sta 	IFR0+IExp
.19e5	98		tya				tya	 								; skip over it.
.19e6	38		sec				sec
.19e7	71 18		adc ($18),y			adc 	(codePtr),y
.19e9	a8		tay				tay
.19ea	60		rts				rts
.19eb					_EXPUISRange:
.19eb	4c de 25	jmp $25de		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19ee					EXPUnaryLeft:
.19ee	20 34 1a	jsr $1a34			jsr 	EXPCommonStart 					; <string>,
.19f1	48		pha				pha 									; save string address on stack
.19f2	da		phx				phx
.19f3	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f5	48		pha				pha
.19f6	20 2e 17	jsr $172e			jsr 	EXPEvalInteger8 				; characters to do
.19f9	80 44		bra $1a3f			bra 	EXPSubstringCommon
.19fb					EXPUnaryRight:
.19fb	20 34 1a	jsr $1a34			jsr 	EXPCommonStart 					; <string>,
.19fe	48		pha				pha 									; save string address on stack
.19ff	da		phx				phx
.1a00	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1a02	48		pha				pha
.1a03	20 2e 17	jsr $172e			jsr 	EXPEvalInteger8 				; characters to do
.1a06	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1a08	68		pla				pla
.1a09	38		sec				sec
.1a0a	e5 22		sbc $22				sbc 	zTemp0
.1a0c	b0 02		bcs $1a10			bcs 	_EUROffLeft
.1a0e	a9 00		lda #$00			lda 	#0
.1a10					_EUROffLeft:
.1a10	48		pha				pha 									; start pos
.1a11	a9 ff		lda #$ff			lda 	#255
.1a13	80 2a		bra $1a3f			bra 	EXPSubstringCommon
.1a15					EXPUnaryMid:
.1a15	20 34 1a	jsr $1a34			jsr 	EXPCommonStart 					; <string>,
.1a18	48		pha				pha 									; save string address on stack
.1a19	da		phx				phx
.1a1a	20 2e 17	jsr $172e			jsr 	EXPEvalInteger8 				; characters start
.1a1d	f0 12		beq $1a31			beq 	_EUSError 						; 1 is left
.1a1f	3a		dec a				dec 	a 								; zero based.
.1a20	48		pha				pha
.1a21	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a23	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a25	f0 04		beq $1a2b			beq 	_EUMLength 						; if so m is provided
.1a27	a9 ff		lda #$ff			lda 	#255 							; default m
.1a29	80 14		bra $1a3f			bra 	EXPSubstringCommon
.1a2b					_EUMLength:
.1a2b	c8		iny				iny 									; consume comma
.1a2c	20 2e 17	jsr $172e			jsr 	EXPEvalInteger8 				; characters to do
.1a2f	80 0e		bra $1a3f			bra 	EXPSubstringCommon
.1a31					_EUSError:
.1a31	4c ef 25	jmp $25ef		jmp	ErrorV_value
.1a34					EXPCommonStart:
.1a34	20 3a 17	jsr $173a			jsr 	EXPEvalString
.1a37	20 8a 27	jsr $278a			jsr 	ERRCheckComma
.1a3a	a5 08		lda $08				lda 	IFR0+IM0
.1a3c	a6 09		ldx $09				ldx 	IFR0+IM1
.1a3e	60		rts				rts
.1a3f					EXPSubstringCommon:
.1a3f	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a41	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; check right bracket.
.1a44	68		pla				pla 									; start position
.1a45	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a47	fa		plx				plx 									; get string address to zTemp2.
.1a48	86 27		stx $27				stx 	zTemp2+1
.1a4a	68		pla				pla
.1a4b	85 26		sta $26				sta 	zTemp2
.1a4d	38		sec				sec 									; length - start is the max count of chars
.1a4e	b2 26		lda ($26)			lda 	(zTemp2)
.1a50	e5 25		sbc $25				sbc 	zTemp1+1
.1a52	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a54	b0 02		bcs $1a58			bcs 	_EXPSSNoTrim
.1a56	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a58					_EXPSSNoTrim:
.1a58	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a5a	20 78 28	jsr $2878			jsr 	StringTempAllocate 				; allocate memory for it.
.1a5d	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a5f	f0 15		beq $1a76			beq 	_EXPSSExit
.1a61	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a63	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a65	b0 0f		bcs $1a76			bcs 	_EXPSSExit
.1a67	5a		phy				phy
.1a68	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a6a	c8		iny				iny 									; +1 for the length byte
.1a6b					_EXPSSCopy:
.1a6b	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a6d	20 ad 28	jsr $28ad			jsr 	StringTempWrite
.1a70	c8		iny				iny
.1a71	c6 24		dec $24				dec 	zTemp1
.1a73	d0 f6		bne $1a6b			bne 	_EXPSSCopy
.1a75	7a		ply				ply
.1a76					_EXPSSExit:
.1a76	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a77					EXPUnaryVal:
.1a77	20 3a 17	jsr $173a			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a7a	20 82 27	jsr $2782			jsr 	ERRCheckRParen 					; )
.1a7d	20 81 1a	jsr $1a81			jsr 	VALConversionZTemp0
.1a80	60		rts				rts
.1a81					VALConversionZTemp0:
.1a81	5a		phy				phy
.1a82	18		clc				clc
.1a83	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a85	69 01		adc #$01			adc 	#1
.1a87	aa		tax				tax
.1a88	a5 23		lda $23				lda 	zTemp0+1
.1a8a	69 00		adc #$00			adc 	#0
.1a8c	a8		tay				tay
.1a8d	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a8f	20 8f 2f	jsr $2f8f			jsr 	IFloatStringToFloatR0 			; do conversion
.1a92	b0 02		bcs $1a96			bcs 	_EUVError
.1a94	7a		ply				ply
.1a95	60		rts				rts
.1a96					_EUVError:
.1a96	4c ef 25	jmp $25ef		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a99					BinaryPrecedence:
>1a99	02					.byte	 2	; $ef =
>1a9a	02					.byte	 2	; $f0 <>
>1a9b	02					.byte	 2	; $f1 <=
>1a9c	02					.byte	 2	; $f2 <
>1a9d	02					.byte	 2	; $f3 >=
>1a9e	02					.byte	 2	; $f4 >
>1a9f	01					.byte	 1	; $f5 XOR
>1aa0	01					.byte	 1	; $f6 OR
>1aa1	01					.byte	 1	; $f7 AND
>1aa2	04					.byte	 4	; $f8 DIV
>1aa3	04					.byte	 4	; $f9 MOD
>1aa4	04					.byte	 4	; $fa <<
>1aa5	04					.byte	 4	; $fb >>
>1aa6	04					.byte	 4	; $fc /
>1aa7	04					.byte	 4	; $fd *
>1aa8	03					.byte	 3	; $fe -
>1aa9	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1aaa					StructureOffsets:
>1aaa	01					.byte	1  	; $80 REPEAT
>1aab	ff					.byte	255	; $81 UNTIL
>1aac	01					.byte	1  	; $82 WHILE
>1aad	ff					.byte	255	; $83 WEND
>1aae	01					.byte	1  	; $84 IF
>1aaf	ff					.byte	255	; $85 ENDIF
>1ab0	01					.byte	1  	; $86 DO
>1ab1	ff					.byte	255	; $87 LOOP
>1ab2	01					.byte	1  	; $88 PROC
>1ab3	ff					.byte	255	; $89 ENDPROC
>1ab4	01					.byte	1  	; $8a FOR
>1ab5	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1ab6					StandardTokens:
>1ab6	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1abd	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ac3	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1ac9	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1ace	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ad1	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1ad7	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ada	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1adf	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ae4	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1aec	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1af0	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1af5	00					.byte	$00                                     	; $8c [[end]]
>1af6	00					.byte	$00                                     	; $8d [[shift]]
>1af7	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1afc	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1b01	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1b04	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1b09	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b0d	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b13	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b19	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b1e	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b22	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b26	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b2b	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b2d	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b2f	01 3a					.byte	$01,$3a                                 	; $9b :
>1b31	01 27					.byte	$01,$27                                 	; $9c '
>1b33	01 29					.byte	$01,$29                                 	; $9d )
>1b35	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1b3a	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1b3f	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1b44	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1b49	00					.byte	0											; $a2
>1b4a	00					.byte	0											; $a3
>1b4b	00					.byte	0											; $a4
>1b4c	00					.byte	0											; $a5
>1b4d	00					.byte	0											; $a6
>1b4e	00					.byte	0											; $a7
>1b4f	00					.byte	0											; $a8
>1b50	00					.byte	0											; $a9
>1b51	00					.byte	0											; $aa
>1b52	00					.byte	0											; $ab
>1b53	00					.byte	0											; $ac
>1b54	00					.byte	0											; $ad
>1b55	00					.byte	0											; $ae
>1b56	00					.byte	0											; $af
>1b57	00					.byte	0											; $b0
>1b58	00					.byte	0											; $b1
>1b59	00					.byte	0											; $b2
>1b5a	00					.byte	0											; $b3
>1b5b	00					.byte	0											; $b4
>1b5c	00					.byte	0											; $b5
>1b5d	00					.byte	0											; $b6
>1b5e	00					.byte	0											; $b7
>1b5f	00					.byte	0											; $b8
>1b60	00					.byte	0											; $b9
>1b61	00					.byte	0											; $ba
>1b62	00					.byte	0											; $bb
>1b63	00					.byte	0											; $bc
>1b64	00					.byte	0											; $bd
>1b65	00					.byte	0											; $be
>1b66	00					.byte	0											; $bf
>1b67	00					.byte	0											; $c0
>1b68	00					.byte	0											; $c1
>1b69	00					.byte	0											; $c2
>1b6a	00					.byte	0											; $c3
>1b6b	00					.byte	0											; $c4
>1b6c	00					.byte	0											; $c5
>1b6d	00					.byte	0											; $c6
>1b6e	00					.byte	0											; $c7
>1b6f	00					.byte	0											; $c8
>1b70	00					.byte	0											; $c9
>1b71	00					.byte	0											; $ca
>1b72	00					.byte	0											; $cb
>1b73	00					.byte	0											; $cc
>1b74	00					.byte	0											; $cd
>1b75	00					.byte	0											; $ce
>1b76	00					.byte	0											; $cf
>1b77	00					.byte	0											; $d0
>1b78	00					.byte	0											; $d1
>1b79	00					.byte	0											; $d2
>1b7a	00					.byte	0											; $d3
>1b7b	00					.byte	0											; $d4
>1b7c	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b82	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b88	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b90	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b97	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b9d	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ba3	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ba8	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1bad	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1bb2	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1bb7	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bbc	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bc2	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bc7	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bcf	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bd6	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bdb	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1be0	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1be6	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1beb	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1bf1	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1bf6	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1bfc	01 28					.byte	$01,$28                                 	; $eb (
>1bfe	01 24					.byte	$01,$24                                 	; $ec $
>1c00	00					.byte	$00                                     	; $ed [[decimal]]
>1c01	00					.byte	$00                                     	; $ee [[string]]
>1c02	01 3d					.byte	$01,$3d                                 	; $ef =
>1c04	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1c07	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1c0a	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c0c	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c0f	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c11	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c15	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c18	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c1c	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c20	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c24	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c27	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c2a	01 2f					.byte	$01,$2f                                 	; $fc /
>1c2c	01 2a					.byte	$01,$2a                                 	; $fd *
>1c2e	01 2d					.byte	$01,$2d                                 	; $fe -
>1c30	01 2b					.byte	$01,$2b                                 	; $ff +
>1c32	ff					.byte	$FF
.1c33					AlternateTokens:
>1c33	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1c39	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1c3d	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1c41	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1c46	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1c4a	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1c51	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1c56	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1c5b	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1c60	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1c66	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1c6b	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1c72	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1c7a	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c7b					VectorTable:
>1c7b	bd 24					.word	Command_REPEAT           ; $80 REPEAT
>1c7d	c6 24					.word	Command_UNTIL            ; $81 UNTIL
>1c7f	a0 25					.word	Command_WHILE            ; $82 WHILE
>1c81	c1 25					.word	Command_WEND             ; $83 WEND
>1c83	93 24					.word	IfCommand                ; $84 IF
>1c85	bc 24					.word	EndIf                    ; $85 ENDIF
>1c87	16 23					.word	Command_DO               ; $86 DO
>1c89	2e 23					.word	Command_LOOP             ; $87 LOOP
>1c8b	50 15					.word	NoExec08                 ; $88 PROC
>1c8d	0a 23					.word	Command_ENDPROC          ; $89 ENDPROC
>1c8f	37 23					.word	Command_FOR              ; $8a FOR
>1c91	c4 23					.word	Command_NEXT             ; $8b NEXT
>1c93	d1 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c95	2d 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c97	b5 24					.word	ElseCode                 ; $8e ELSE
>1c99	50 15					.word	NoExec01                 ; $8f THEN
>1c9b	50 15					.word	NoExec02                 ; $90 TO
>1c9d	50 15					.word	NoExec03                 ; $91 STEP
>1c9f	c3 12					.word	CommandLET               ; $92 LET
>1ca1	14 12					.word	Command_Print            ; $93 PRINT
>1ca3	0d 12					.word	Command_Input            ; $94 INPUT
>1ca5	ce 22					.word	Command_CALL             ; $95 CALL
>1ca7	3b 15					.word	Command_Sys              ; $96 SYS
>1ca9	8a 14					.word	Command_REM              ; $97 REM
>1cab	1f 23					.word	Command_EXIT             ; $98 EXIT
>1cad	50 15					.word	NoExec04                 ; $99 ,
>1caf	50 15					.word	NoExec05                 ; $9a ;
>1cb1	50 15					.word	NoExec06                 ; $9b :
>1cb3	8a 14					.word	Command_REM2             ; $9c '
>1cb5	50 15					.word	NoExec07                 ; $9d )
>1cb7	b6 11					.word	Command_Poke             ; $9e POKE
>1cb9	b3 11					.word	Command_Doke             ; $9f DOKE
>1cbb	16 14					.word	Command_READ             ; $a0 READ
>1cbd	7d 14					.word	Command_DATA             ; $a1 DATA
>1cbf	ff 28					.word	NotImplemented           ; $a2
>1cc1	ff 28					.word	NotImplemented           ; $a3
>1cc3	ff 28					.word	NotImplemented           ; $a4
>1cc5	ff 28					.word	NotImplemented           ; $a5
>1cc7	ff 28					.word	NotImplemented           ; $a6
>1cc9	ff 28					.word	NotImplemented           ; $a7
>1ccb	ff 28					.word	NotImplemented           ; $a8
>1ccd	ff 28					.word	NotImplemented           ; $a9
>1ccf	ff 28					.word	NotImplemented           ; $aa
>1cd1	ff 28					.word	NotImplemented           ; $ab
>1cd3	ff 28					.word	NotImplemented           ; $ac
>1cd5	ff 28					.word	NotImplemented           ; $ad
>1cd7	ff 28					.word	NotImplemented           ; $ae
>1cd9	ff 28					.word	NotImplemented           ; $af
>1cdb	ff 28					.word	NotImplemented           ; $b0
>1cdd	ff 28					.word	NotImplemented           ; $b1
>1cdf	ff 28					.word	NotImplemented           ; $b2
>1ce1	ff 28					.word	NotImplemented           ; $b3
>1ce3	ff 28					.word	NotImplemented           ; $b4
>1ce5	ff 28					.word	NotImplemented           ; $b5
>1ce7	ff 28					.word	NotImplemented           ; $b6
>1ce9	ff 28					.word	NotImplemented           ; $b7
>1ceb	ff 28					.word	NotImplemented           ; $b8
>1ced	ff 28					.word	NotImplemented           ; $b9
>1cef	ff 28					.word	NotImplemented           ; $ba
>1cf1	ff 28					.word	NotImplemented           ; $bb
>1cf3	ff 28					.word	NotImplemented           ; $bc
>1cf5	ff 28					.word	NotImplemented           ; $bd
>1cf7	ff 28					.word	NotImplemented           ; $be
>1cf9	ff 28					.word	NotImplemented           ; $bf
>1cfb	ff 28					.word	NotImplemented           ; $c0
>1cfd	ff 28					.word	NotImplemented           ; $c1
>1cff	ff 28					.word	NotImplemented           ; $c2
>1d01	ff 28					.word	NotImplemented           ; $c3
>1d03	ff 28					.word	NotImplemented           ; $c4
>1d05	ff 28					.word	NotImplemented           ; $c5
>1d07	ff 28					.word	NotImplemented           ; $c6
>1d09	ff 28					.word	NotImplemented           ; $c7
>1d0b	ff 28					.word	NotImplemented           ; $c8
>1d0d	ff 28					.word	NotImplemented           ; $c9
>1d0f	ff 28					.word	NotImplemented           ; $ca
>1d11	ff 28					.word	NotImplemented           ; $cb
>1d13	ff 28					.word	NotImplemented           ; $cc
>1d15	ff 28					.word	NotImplemented           ; $cd
>1d17	ff 28					.word	NotImplemented           ; $ce
>1d19	ff 28					.word	NotImplemented           ; $cf
>1d1b	ff 28					.word	NotImplemented           ; $d0
>1d1d	ff 28					.word	NotImplemented           ; $d1
>1d1f	ff 28					.word	NotImplemented           ; $d2
>1d21	ff 28					.word	NotImplemented           ; $d3
>1d23	ff 28					.word	NotImplemented           ; $d4
>1d25	ba 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d27	ac 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d29	fb 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d2b	ee 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d2d	15 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d2f	ac 19					.word	EXPUnaryStr              ; $da STR$(
>1d31	77 1a					.word	EXPUnaryVal              ; $db VAL(
>1d33	79 19					.word	EXPUnarySgn              ; $dc SGN(
>1d35	2a 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d37	fe 18					.word	EXPUnaryLen              ; $de LEN(
>1d39	8f 19					.word	EXPUnarySqr              ; $df SQR(
>1d3b	4a 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d3d	34 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d3f	e0 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d41	ff 28					.word	NotImplemented           ; $e3 EVENT(
>1d43	ff 28					.word	NotImplemented           ; $e4 TIME
>1d45	f4 18					.word	EXPUnaryInt              ; $e5 INT(
>1d47	d6 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d49	5b 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d4b	9e 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d4d	13 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d4f	23 19					.word	ExpUnaryRand             ; $ea RAND(
>1d51	0c 19					.word	EXPUnaryParenthesis      ; $eb (
>1d53	d2 18					.word	EXPUnaryNull             ; $ec $
>1d55	a9 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d57	d3 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d59	0d 16					.word	EXPCompareEqual          ; $ef =
>1d5b	28 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d5d	31 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d5f	16 16					.word	EXPCompareLess           ; $f2 <
>1d61	3a 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d63	1f 16					.word	EXPCompareGreater        ; $f4 >
>1d65	ba 15					.word	EXPBinXor                ; $f5 XOR
>1d67	ae 15					.word	EXPBinOr                 ; $f6 OR
>1d69	a2 15					.word	EXPBinAnd                ; $f7 AND
>1d6b	7a 15					.word	EXPBinIDiv               ; $f8 DIV
>1d6d	8b 15					.word	EXPBinIMod               ; $f9 MOD
>1d6f	85 16					.word	EXPBinLeft               ; $fa <<
>1d71	8d 16					.word	EXPBinRight              ; $fb >>
>1d73	6e 15					.word	EXPBinFDiv               ; $fc /
>1d75	65 15					.word	EXPBinMul                ; $fd *
>1d77	5c 15					.word	EXPBinSub                ; $fe -
>1d79	53 15					.word	EXPBinAdd                ; $ff +
.1d7b					AlternateVectorTable:
>1d7b	23 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1d7d	0d 14					.word	Command_NEW              ; $8d81 NEW
>1d7f	c5 14					.word	Command_RUN              ; $8d82 RUN
>1d81	38 15					.word	Command_STOP             ; $8d83 STOP
>1d83	35 15					.word	Command_END              ; $8d84 END
>1d85	15 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1d87	3d 13					.word	Command_LIST             ; $8d86 LIST
>1d89	ff 28					.word	NotImplemented           ; $8d87 SAVE
>1d8b	ff 28					.word	NotImplemented           ; $8d88 LOAD
>1d8d	79 24					.word	Command_GOSUB            ; $8d89 GOSUB
>1d8f	dd 11					.word	Command_GOTO             ; $8d8a GOTO
>1d91	87 24					.word	Command_RETURN           ; $8d8b RETURN
>1d93	97 14					.word	Command_RESTORE          ; $8d8c RESTORE

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d95					TOKDetokenise:
.1d95	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d97	84 27		sty $27				sty 	zTemp2+1
.1d99	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d9c					_TOKDLoop:
.1d9c	20 cb 1d	jsr $1dcb			jsr 	TOKDGet 					; get next
.1d9f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1da1	f0 26		beq $1dc9			beq 	_TOKDExit
.1da3	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1da5	f0 1d		beq $1dc4			beq 	_TOKDDataItem
.1da7	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1da9	f0 19		beq $1dc4			beq 	_TOKDDataItem
.1dab	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1dad	10 05		bpl $1db4			bpl 	_TOKDNotToken
.1daf	20 93 1e	jsr $1e93			jsr 	TOKDToken 					; token to text.
.1db2	80 e8		bra $1d9c			bra 	_TOKDLoop
.1db4					_TOKDNotToken:
.1db4	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1db6	90 05		bcc $1dbd			bcc 	_TOKDNotIdentifier
.1db8	20 06 1e	jsr $1e06			jsr 	TOKDIdentifier
.1dbb	80 df		bra $1d9c			bra 	_TOKDLoop
.1dbd					_TOKDNotIdentifier:
.1dbd	a0 0a		ldy #$0a			ldy 	#10
.1dbf	20 4f 1e	jsr $1e4f			jsr 	TOKDInteger
.1dc2	80 d8		bra $1d9c			bra 	_TOKDLoop
.1dc4					_TOKDDataItem:
.1dc4	20 e1 1d	jsr $1de1			jsr 	TOKDDataItem
.1dc7	80 d3		bra $1d9c			bra 	_TOKDLoop
.1dc9					_TOKDExit:
.1dc9	18		clc				clc
.1dca	60		rts				rts
.1dcb	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1dcd	e6 26		inc $26				inc 	zTemp2
.1dcf	d0 02		bne $1dd3			bne 	_TKDGExit
.1dd1	e6 27		inc $27				inc 	zTemp2+1
.1dd3					_TKDGExit:
.1dd3	60		rts				rts
.1dd4					TOKDOutput:
.1dd4	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1dd7	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1dda					TOKSetDetokeniseOutput:
.1dda	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1ddd	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1de0	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1de1					TOKDDataItem:
.1de1	a8		tay				tay 								; type in Y
.1de2	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1de4	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1de6	f0 02		beq $1dea			beq 	_TOKDDIsString
.1de8	a9 2e		lda #$2e			lda 	#'.'
.1dea					_TOKDDIsString:
.1dea	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput 					; dump it
.1ded	20 cb 1d	jsr $1dcb			jsr 	TOKDGet 					; get length into X
.1df0	aa		tax				tax
.1df1					_TOKDDOutput:
.1df1	ca		dex				dex 								; are we complete
.1df2	30 08		bmi $1dfc			bmi 	_TOKDDEnd
.1df4	20 cb 1d	jsr $1dcb			jsr 	TOKDGet 					; get character and output it
.1df7	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1dfa	80 f5		bra $1df1			bra 	_TOKDDOutput
.1dfc					_TOKDDEnd:
.1dfc	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1dfe	d0 05		bne $1e05			bne 	_TOKDDNotString
.1e00	a9 22		lda #$22			lda 	#'"'
.1e02	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1e05					_TOKDDNotString:
.1e05	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1e06					TOKDIdentifier:
.1e06	a0 ff		ldy #$ff			ldy 	#$FF
.1e08	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1e0b					_TOKDLoop:
.1e0b	a8		tay				tay 								; token in Y
.1e0c	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1e0e	c0 64		cpy #$64			cpy 	#$64
.1e10	f0 11		beq $1e23			beq 	_TOKDIOutput
.1e12	a9 5f		lda #$5f			lda 	#'_'
.1e14	c0 65		cpy #$65			cpy 	#$65
.1e16	f0 0b		beq $1e23			beq 	_TOKDIOutput
.1e18	98		tya				tya 								; handle a-z
.1e19	18		clc				clc
.1e1a	69 21		adc #$21			adc	 	#$21
.1e1c	c0 5a		cpy #$5a			cpy 	#$5A
.1e1e	90 03		bcc $1e23			bcc 	_TOKDIOutput
.1e20	38		sec				sec 								; handle 0-9
.1e21	e9 4b		sbc #$4b			sbc 	#$4B
.1e23					_TOKDIOutput:
.1e23	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1e26	10 08		bpl $1e30			bpl 	_TOKDINoSpacing
.1e28	48		pha				pha
.1e29	20 d0 1e	jsr $1ed0			jsr 	TOKDSpacing
.1e2c	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1e2f	68		pla				pla
.1e30					_TOKDINoSpacing:
.1e30	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1e33	20 cb 1d	jsr $1dcb			jsr 	TOKDGet 					; get next token
.1e36	c9 7c		cmp #$7c			cmp 	#$7C
.1e38	90 d1		bcc $1e0b			bcc 	_TOKDLoop
.1e3a	f0 12		beq $1e4e			beq 	_TOKDIExit 					; it's a number, no tail.
.1e3c	4a		lsr a				lsr 	a 							; string ?
.1e3d	90 07		bcc $1e46			bcc 	_TOKDICheckArray
.1e3f	48		pha				pha
.1e40	a9 24		lda #$24			lda 	#"$"
.1e42	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1e45	68		pla				pla
.1e46					_TOKDICheckArray:
.1e46	4a		lsr a				lsr 	a 							; array ?
.1e47	90 05		bcc $1e4e			bcc 	_TOKDIExit
.1e49	a9 28		lda #$28			lda 	#"("
.1e4b	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1e4e					_TOKDIExit:
.1e4e	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e4f					TOKDInteger:
.1e4f	5a		phy				phy 								; save base
.1e50	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e52	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.1e55					_TOKDILoop:
.1e55	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e57	c9 40		cmp #$40			cmp 	#$40
.1e59	b0 1d		bcs $1e78			bcs 	_TOKDIHaveInteger
.1e5b	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e5d	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1e60	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1e63	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1e66	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1e69	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1e6c	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.1e6f	20 cb 1d	jsr $1dcb			jsr 	TOKDGet 					; OR byte in.
.1e72	05 08		ora $08				ora 	IFR0+IM0
.1e74	85 08		sta $08				sta 	IFR0+IM0
.1e76	80 dd		bra $1e55			bra 	_TOKDILoop
.1e78					_TOKDIHaveInteger:
.1e78	7a		ply				ply 								; restore base
.1e79	98		tya				tya 								; base in A
.1e7a	20 cd 2e	jsr $2ecd			jsr 	IFloatIntegerToStringR0
.1e7d	86 22		stx $22				stx 	zTemp0
.1e7f	84 23		sty $23				sty 	zTemp0+1
.1e81	b2 22		lda ($22)			lda 	(zTemp0)
.1e83	20 d0 1e	jsr $1ed0			jsr 	TOKDSpacing 				; check spacing okay.
.1e86	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1e88					_TOKDOutput:
.1e88	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e8a	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1e8d	c8		iny				iny
.1e8e	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e90	d0 f6		bne $1e88			bne 	_TOKDOutput
.1e92	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e93					TOKDToken:
.1e93	a2 b6		ldx #$b6			ldx 	#StandardTokens & $FF 		; standard table
.1e95	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e97	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1e99	d0 07		bne $1ea2			bne 	_TOKDSearch
.1e9b	20 cb 1d	jsr $1dcb			jsr 	TOKDGet 					; get next
.1e9e	a2 33		ldx #$33			ldx 	#AlternateTokens & $FF 		; alt table
.1ea0	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.1ea2					_TOKDSearch:
.1ea2	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1ea4	84 23		sty $23				sty 	zTemp0+1
.1ea6	aa		tax				tax 								; token ID in X.
.1ea7					_TOKDFind:
.1ea7	ca		dex				dex 								; reached the start
.1ea8	10 0d		bpl $1eb7			bpl 	_TOKDFound
.1eaa	38		sec				sec 								; go to next entry
.1eab	b2 22		lda ($22)			lda 	(zTemp0)
.1ead	65 22		adc $22				adc 	zTemp0
.1eaf	85 22		sta $22				sta 	zTemp0
.1eb1	90 f4		bcc $1ea7			bcc 	_TOKDFind
.1eb3	e6 23		inc $23				inc 	zTemp0+1
.1eb5	80 f0		bra $1ea7			bra 	_TOKDFind
.1eb7					_TOKDFound:
.1eb7	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1eb9	f0 14		beq $1ecf			beq 	_TOKDExit
.1ebb	aa		tax				tax
.1ebc	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ebe	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1ec0	20 d0 1e	jsr $1ed0			jsr 	TOKDSpacing
.1ec3					_TOKDOutput:
.1ec3	b1 22		lda ($22),y			lda 	(zTemp0),y
.1ec5	20 89 22	jsr $2289			jsr 	TOKToLower
.1ec8	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1ecb	c8		iny				iny
.1ecc	ca		dex				dex
.1ecd	d0 f4		bne $1ec3			bne 	_TOKDOutput
.1ecf					_TOKDExit:
.1ecf	60		rts				rts
.1ed0					TOKDSpacing:
.1ed0	20 a0 22	jsr $22a0			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1ed3	90 0d		bcc $1ee2			bcc 	_TOKDSExit
.1ed5	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1ed8	20 a0 22	jsr $22a0			jsr 	TOKIsIdentifierElement
.1edb	90 05		bcc $1ee2			bcc 	_TOKDSExit
.1edd	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1edf	20 d4 1d	jsr $1dd4			jsr 	TOKDOutput
.1ee2					_TOKDSExit:
.1ee2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1ee3					PGMDeleteLine:
.1ee3	20 96 1f	jsr $1f96			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ee6	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1ee8	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1eeb	85 25		sta $25				sta 	zTemp1+1
.1eed					_PGMDLoop:
.1eed	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1eef	38		sec				sec
.1ef0	f0 3a		beq $1f2c			beq 	_PGMDExit
.1ef2	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1ef4	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ef6	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1ef9	d0 08		bne $1f03			bne 	_PGMDNext
.1efb	c8		iny				iny
.1efc	b1 24		lda ($24),y			lda 	(zTemp1),y
.1efe	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1f01	f0 0d		beq $1f10			beq 	_PGMDDelete
.1f03					_PGMDNext:
.1f03	18		clc				clc
.1f04	b2 24		lda ($24)			lda 	(zTemp1)
.1f06	65 24		adc $24				adc 	zTemp1
.1f08	85 24		sta $24				sta 	zTemp1
.1f0a	90 e1		bcc $1eed			bcc 	_PGMDLoop
.1f0c	e6 25		inc $25				inc 	zTemp1+1
.1f0e	80 dd		bra $1eed			bra 	_PGMDLoop
.1f10					_PGMDDelete:
.1f10	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1f12	a8		tay				tay
.1f13					_PGMDCopy:
.1f13	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1f15	92 24		sta ($24)			sta 	(zTemp1)
.1f17	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1f19	c5 22		cmp $22				cmp 	zTemp0
.1f1b	d0 07		bne $1f24			bne 	_PGMDNext2
.1f1d	a5 25		lda $25				lda 	zTemp1+1
.1f1f	c5 23		cmp $23				cmp 	zTemp0+1
.1f21	18		clc				clc
.1f22	f0 08		beq $1f2c			beq 	_PGMDExit
.1f24					_PGMDNext2:
.1f24	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1f26	d0 eb		bne $1f13			bne 	_PGMDCopy
.1f28	e6 25		inc $25				inc 	zTemp1+1
.1f2a	80 e7		bra $1f13			bra 	_PGMDCopy
.1f2c					_PGMDExit:
.1f2c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1f2d					PGMInsertLine:
.1f2d	20 96 1f	jsr $1f96			jsr 	PGMEndProgram 				; end of program into zTemp0
.1f30	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1f32	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f35	85 25		sta $25				sta 	zTemp1+1
.1f37					_PGMILoop:
.1f37	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1f39	f0 1c		beq $1f57			beq 	_PGMIInsert
.1f3b	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f3d	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f3f	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f42	c8		iny				iny
.1f43	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f45	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f48	b0 0d		bcs $1f57			bcs 	_PGMIInsert 				; insert here.
.1f4a	18		clc				clc
.1f4b	b2 24		lda ($24)			lda 	(zTemp1)
.1f4d	65 24		adc $24				adc 	zTemp1
.1f4f	85 24		sta $24				sta 	zTemp1
.1f51	90 e4		bcc $1f37			bcc 	_PGMILoop
.1f53	e6 25		inc $25				inc 	zTemp1+1
.1f55	80 e0		bra $1f37			bra 	_PGMILoop
.1f57					_PGMIInsert:
.1f57	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f5a					_PGMIInsertLoop:
.1f5a	b2 22		lda ($22)			lda 	(zTemp0)
.1f5c	91 22		sta ($22),y			sta 	(zTemp0),y
.1f5e	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f60	c5 22		cmp $22				cmp 	zTemp0
.1f62	d0 06		bne $1f6a			bne 	_PGMINext
.1f64	a5 25		lda $25				lda 	zTemp1+1
.1f66	c5 23		cmp $23				cmp 	zTemp0+1
.1f68	f0 0a		beq $1f74			beq 	_PGMIInserted
.1f6a					_PGMINext:
.1f6a	a5 22		lda $22				lda 	zTemp0
.1f6c	d0 02		bne $1f70			bne 	_PGMINoBorrow
.1f6e	c6 23		dec $23				dec 	zTemp0+1
.1f70					_PGMINoBorrow:
.1f70	c6 22		dec $22				dec 	zTemp0
.1f72	80 e6		bra $1f5a			bra 	_PGMIInsertLoop
.1f74					_PGMIInserted:
.1f74	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f76					_PGMICopyLoop:
.1f76	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f79	91 24		sta ($24),y			sta 	(zTemp1),y
.1f7b	c8		iny				iny
.1f7c	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f7f	d0 f5		bne $1f76			bne 	_PGMICopyLoop
.1f81	18		clc				clc
.1f82	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f83					PGMSetBaseAddress:
.1f83	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.1f86	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.1f89	60		rts				rts
.1f8a					PGMNewProgram:
.1f8a	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f8c	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f8f	85 23		sta $23				sta 	zTemp0+1
.1f91	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.1f93	92 22		sta ($22)			sta 	(zTemp0)
.1f95	60		rts				rts
.1f96					PGMEndProgram:
.1f96	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f98	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f9b	85 23		sta $23				sta 	zTemp0+1
.1f9d					_PGMEPLoop:
.1f9d	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.1f9f	f0 0b		beq $1fac			beq 	_PGMEPExit
.1fa1	18		clc				clc 								; no, advance to next
.1fa2	65 22		adc $22				adc 	zTemp0
.1fa4	85 22		sta $22				sta 	zTemp0
.1fa6	90 f5		bcc $1f9d			bcc 	_PGMEPLoop
.1fa8	e6 23		inc $23				inc 	zTemp0+1
.1faa	80 f1		bra $1f9d			bra 	_PGMEPLoop
.1fac					_PGMEPExit:
.1fac	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1fad					TOKResetElement:
.1fad	9c 1c 05	stz $051c			stz 	TOKElement
.1fb0	60		rts				rts
.1fb1					TOKWriteElement:
.1fb1	da		phx				phx
.1fb2	ae 1c 05	ldx $051c			ldx 	TOKElement
.1fb5	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1fb8	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1fbb	fa		plx				plx
.1fbc	ee 1c 05	inc $051c			inc 	TOKElement
.1fbf	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1fc0					TOKTokeniseConstant:
.1fc0	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1fc2	48		pha				pha 								; save on stack
.1fc3	29 c0		and #$c0			and 	#$C0
.1fc5	05 09		ora $09				ora 	IFR0+IM1
.1fc7	05 0a		ora $0a				ora 	IFR0+IM2
.1fc9	f0 10		beq $1fdb			beq 	_TTCLess
.1fcb	da		phx				phx
.1fcc	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1fce					_TTCShiftRight:
.1fce	46 0a		lsr $0a				lsr 	IFR0+IM2
.1fd0	66 09		ror $09				ror 	IFR0+IM1
.1fd2	66 08		ror $08				ror 	IFR0+IM0
.1fd4	ca		dex				dex
.1fd5	d0 f7		bne $1fce			bne 	_TTCShiftRight
.1fd7	fa		plx				plx
.1fd8	20 c0 1f	jsr $1fc0			jsr 	TOKTokeniseConstant
.1fdb					_TTCLess:
.1fdb	68		pla				pla
.1fdc	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fde	20 7d 20	jsr $207d			jsr 	TOKWriteA
.1fe1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fe2					TOKTokeniseDecimals:
.1fe2	20 90 20	jsr $2090			jsr 	TOKGetNext 					; consume the .
.1fe5	20 0d 22	jsr $220d			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fe8	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fea	20 7d 20	jsr $207d			jsr 	TOKWriteA
.1fed	20 f2 1f	jsr $1ff2			jsr 	TOKOutputElementBuffer 		; then the buffer
.1ff0	18		clc				clc
.1ff1	60		rts				rts
.1ff2					TOKOutputElementBuffer:
.1ff2	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1ff5	20 7d 20	jsr $207d			jsr 	TOKWriteA
.1ff8	a8		tay				tay 								; put in Y
.1ff9	f0 0c		beq $2007			beq 	_TOEExit 					; exit if empty which is okay.
.1ffb	a2 01		ldx #$01			ldx 	#1
.1ffd					_TOELoop:
.1ffd	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2000	20 7d 20	jsr $207d			jsr 	TOKWriteA
.2003	e8		inx				inx
.2004	88		dey				dey
.2005	d0 f6		bne $1ffd			bne 	_TOELoop
.2007					_TOEExit:
.2007	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2008					TOKTokenise:
.2008	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.200b	8e 1c 06	stx $061c			stx 	TOKDataSource
.200e	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2010	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.2013	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2015	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2018	9c 01 04	stz $0401			stz 	TOKLineNumber
.201b	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.201e					_TOKMainLoop:
.201e	20 8c 20	jsr $208c			jsr 	TOKGet 						; what follows.
.2021	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2023	f0 4f		beq $2074			beq 	_TOKExit
.2025	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2027	d0 05		bne $202e			bne 	_TOKElement
.2029	20 90 20	jsr $2090			jsr 	TOKGetNext
.202c	80 f0		bra $201e			bra 	_TOKMainLoop
.202e					_TOKElement:
.202e	20 94 22	jsr $2294			jsr 	TOKIsDigit 					; is it 0..9
.2031	90 0a		bcc $203d			bcc 	_TOKNotDigit
.2033	20 e4 21	jsr $21e4			jsr 	TOKTokeniseInteger 			; get integer
.2036	b0 43		bcs $207b			bcs 	_TOKFail 					; did it fail ?
.2038	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.203b	80 e1		bra $201e			bra 	_TOKMainLoop
.203d					_TOKNotDigit:
.203d	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2040	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2042	d0 07		bne $204b			bne 	_TOKNotHex
.2044	20 e6 20	jsr $20e6			jsr 	TOKTokeniseHexadecimal
.2047	b0 32		bcs $207b			bcs 	_TOKFail
.2049	80 d3		bra $201e			bra 	_TOKMainLoop
.204b					_TOKNotHex:
.204b	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.204d	d0 07		bne $2056			bne 	_TOKNotDecimal
.204f	20 e2 1f	jsr $1fe2			jsr 	TOKTokeniseDecimals
.2052	b0 27		bcs $207b			bcs 	_TOKFail
.2054	80 c8		bra $201e			bra 	_TOKMainLoop
.2056					_TOKNotDecimal:
.2056	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2058	d0 07		bne $2061			bne 	_TOKNotString
.205a	20 5b 22	jsr $225b			jsr 	TOKTokeniseString
.205d	b0 1c		bcs $207b			bcs 	_TOKFail
.205f	80 bd		bra $201e			bra 	_TOKMainLoop
.2061					_TOKNotString:
.2061	20 b1 22	jsr $22b1			jsr 	TOKIsAlpha 					; identifier ?
.2064	b0 07		bcs $206d			bcs 	_TOKIdentifier
.2066	20 21 22	jsr $2221			jsr 	TOKTokenisePunctuation 		; punctuation
.2069	b0 10		bcs $207b			bcs 	_TOKFail
.206b	80 b1		bra $201e			bra 	_TOKMainLoop
.206d					_TOKIdentifier:
.206d	20 20 21	jsr $2120			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2070	b0 09		bcs $207b			bcs 	_TOKFail
.2072	80 aa		bra $201e			bra 	_TOKMainLoop
.2074					_TOKExit:
.2074	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2076	20 7d 20	jsr $207d			jsr 	TOKWriteA
.2079	18		clc				clc									; return with carry set.
.207a	60		rts				rts
.207b					_TOKFail:
.207b	38		sec				sec
.207c	60		rts				rts
.207d					TOKWriteA:
.207d	da		phx				phx
.207e	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2081	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2084	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2087	fa		plx				plx
.2088	ee 00 04	inc $0400			inc 	TOKLineSize
.208b	60		rts				rts
.208c					TOKGet:
.208c	18		clc				clc
.208d	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2090					TOKGetNext:
.2090	38		sec				sec
.2091	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2094					TOKFindToken:
.2094	a2 b6		ldx #$b6			ldx 	#StandardTokens & $FF 		; do this table
.2096	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.2098	20 b0 20	jsr $20b0			jsr 	TOKFindTokenXY 				; find it, or not
.209b	b0 0d		bcs $20aa			bcs 	_TOKFound1
.209d	a2 33		ldx #$33			ldx 	#AlternateTokens & $FF 		; do the alternate table
.209f	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.20a1	20 b0 20	jsr $20b0			jsr 	TOKFindTokenXY 				; find it, or not
.20a4	90 08		bcc $20ae			bcc 	_TOKFTFail 					; not ....
.20a6	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.20a8	38		sec				sec
.20a9	60		rts				rts
.20aa					_TOKFound1:
.20aa	a2 00		ldx #$00			ldx 	#0
.20ac	38		sec				sec
.20ad	60		rts				rts
.20ae					_TOKFTFail
.20ae	18		clc				clc
.20af	60		rts				rts
.20b0					TOKFindTokenXY:
.20b0	86 22		stx $22				stx 	zTemp0 						; save token table address
.20b2	84 23		sty $23				sty 	zTemp0+1
.20b4	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.20b6	8d 1f 06	sta $061f			sta 	TOKCurrent
.20b9					_TOKFindLoop:
.20b9	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.20bb	18		clc				clc 		 						; clear carry in case of fail
.20bc	30 17		bmi $20d5			bmi 	_TOKExit 					; end of table, fail, so return CC.
.20be	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.20c1	d0 13		bne $20d6			bne 	_TOKNext 					; different, try next.
.20c3	aa		tax				tax 								; number of chars to compare.
.20c4	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.20c6					_TOKCompare:
.20c6	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.20c8	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.20cb	d0 09		bne $20d6			bne 	_TOKNext 					; different ? try next
.20cd	c8		iny				iny 								; compare next two
.20ce	ca		dex				dex
.20cf	d0 f5		bne $20c6			bne 	_TOKCompare 				; until done X characters.
.20d1	38		sec				sec
.20d2	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.20d5					_TOKExit:
.20d5	60		rts				rts
.20d6					_TOKNext:
.20d6	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.20d9	38		sec				sec 								; add length+1 to ptr
.20da	b2 22		lda ($22)			lda 	(zTemp0)
.20dc	65 22		adc $22				adc 	zTemp0
.20de	85 22		sta $22				sta 	zTemp0
.20e0	90 d7		bcc $20b9			bcc 	_TOKFindLoop
.20e2	e6 23		inc $23				inc 	zTemp0+1
.20e4	80 d3		bra $20b9			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.20e6					TOKTokeniseHexadecimal:
.20e6	20 90 20	jsr $2090			jsr 	TOKGetNext 					; consume the $
.20e9	a2 08		ldx #$08			ldx 	#IFR0
.20eb	20 2b 31	jsr $312b			jsr 	IFloatSetZero 				; set R0 = 0
.20ee					_TTHLoop:
.20ee	20 8c 20	jsr $208c			jsr 	TOKGet 						; keep getting and copying while numeric.
.20f1	20 be 22	jsr $22be			jsr 	TOKIsHexadecimal
.20f4	90 20		bcc $2116			bcc 	_TTHDone
.20f6	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20f8	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.20fb	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.20fe	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.2101	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.2104	20 90 20	jsr $2090			jsr 	TOKGetNext
.2107	38		sec				sec 								; convert to decimal.
.2108	e9 30		sbc #$30			sbc 	#48
.210a	c9 0a		cmp #$0a			cmp 	#10
.210c	90 02		bcc $2110			bcc 	_TTHNotAlpha
.210e	e9 07		sbc #$07			sbc 	#7
.2110					_TTHNotAlpha:
.2110	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2112	85 08		sta $08				sta 	IFR0+IM0
.2114	80 d8		bra $20ee			bra 	_TTHLoop
.2116					_TTHDone:
.2116	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.2118	20 7d 20	jsr $207d			jsr 	TOKWriteA
.211b	20 c0 1f	jsr $1fc0			jsr 	TOKTokeniseConstant 		; write integer out.
.211e	18		clc				clc
.211f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2120					TOKTokeniseIdentifier:
.2120	20 ad 1f	jsr $1fad			jsr 	TOKResetElement 			; extract an identifier
.2123					_TOKGetIdentifier:
.2123	20 8c 20	jsr $208c			jsr 	TOKGet
.2126	20 7e 22	jsr $227e			jsr 	TOKToUpper
.2129	20 a0 22	jsr $22a0			jsr 	TOKIsIdentifierElement
.212c	90 08		bcc $2136			bcc 	_TOKEndIdent
.212e	20 b1 1f	jsr $1fb1			jsr		TOKWriteElement
.2131	20 90 20	jsr $2090			jsr 	TOKGetNext
.2134	80 ed		bra $2123			bra 	_TOKGetIdentifier
.2136					_TOKEndIdent:
.2136	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2138	d0 06		bne $2140			bne 	_TOKNotString
.213a	20 b1 1f	jsr $1fb1			jsr 	TOKWriteElement 			; add it
.213d	20 90 20	jsr $2090			jsr 	TOKGetNext 					; consume it
.2140					_TOKNotString:
.2140	20 8c 20	jsr $208c			jsr 	TOKGet 						; finally check for (
.2143	c9 28		cmp #$28			cmp 	#"("
.2145	d0 06		bne $214d			bne 	_TOKNoArray
.2147	20 b1 1f	jsr $1fb1			jsr 	TOKWriteElement 			; add it
.214a	20 90 20	jsr $2090			jsr 	TOKGetNext 					; consume it
.214d					_TOKNoArray:
.214d	20 94 20	jsr $2094			jsr 	TOKFindToken 				; find it
.2150	90 18		bcc $216a			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2152	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2154	f0 0f		beq $2165			beq 	_TOKComment 				; yes, do comment code.
.2156	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2158	d0 06		bne $2160			bne 	_TOKNoShift
.215a	48		pha				pha 								; write the shift.
.215b	8a		txa				txa
.215c	20 7d 20	jsr $207d			jsr 	TOKWriteA
.215f	68		pla				pla
.2160					_TOKNoShift:
.2160	20 7d 20	jsr $207d			jsr 	TOKWriteA 					; write the main token.
.2163	18		clc				clc
.2164	60		rts				rts
.2165					_TOKComment:
.2165	20 b1 21	jsr $21b1			jsr 	TOKDoComment
.2168	18		clc				clc
.2169	60		rts				rts
.216a					_TOKIsVariable:
.216a	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.216c					_TOKOutputBuffer:
.216c	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.216f	20 98 21	jsr $2198			jsr 	TOKTranslateIdentifier
.2172	20 7d 20	jsr $207d			jsr 	TOKWriteA
.2175	e8		inx				inx
.2176	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.2179	20 a0 22	jsr $22a0			jsr 	TOKIsIdentifierElement
.217c	b0 ee		bcs $216c			bcs 	_TOKOutputBuffer
.217e	a8		tay				tay 								; last char in Y
.217f	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2181	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2183	f0 0e		beq $2193			beq 	_TOKIVExit
.2185	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2187	d0 04		bne $218d			bne 	_TOKIVCheckArray 			; no, check for (
.2189	1a		inc a				inc 	a 							; token is $7D
.218a	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.218d					_TOKIVCheckArray:
.218d	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.218f	d0 02		bne $2193			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2191	1a		inc a				inc 	a
.2192	1a		inc a				inc 	a
.2193					_TOKIVExit:
.2193	20 7d 20	jsr $207d			jsr 	TOKWriteA 					; ending token
.2196	18		clc				clc
.2197	60		rts				rts
.2198					TOKTranslateIdentifier:
.2198	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.219a	f0 0f		beq $21ab			beq 	_TTI64
.219c	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.219e	f0 0e		beq $21ae			beq 	_TTI65
.21a0	38		sec				sec
.21a1	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.21a3	10 03		bpl $21a8			bpl 	_TTIExit
.21a5	18		clc				clc 								; map 09 onto 26-35
.21a6	69 2b		adc #$2b			adc 	#"A"-"0"+26
.21a8					_TTIExit:
.21a8	09 40		ora #$40			ora 	#$40 						; correct range.
.21aa	60		rts				rts
.21ab	a9 64		lda #$64	_TTI64:	lda 	#$64
.21ad	60		rts				rts
.21ae	a9 65		lda #$65	_TTI65:	lda 	#$65
.21b0	60		rts				rts
.21b1					TOKDoComment:
.21b1	20 7d 20	jsr $207d			jsr 	TOKWriteA					; output the token.
.21b4					_TOKSkipSpaces:
.21b4	20 8c 20	jsr $208c			jsr 	TOKGet 						; skip over spaces
.21b7	c9 20		cmp #$20			cmp 	#' '
.21b9	d0 05		bne $21c0			bne 	_TOKEndSpaces
.21bb	20 90 20	jsr $2090			jsr 	TOKGetNext
.21be	80 f4		bra $21b4			bra 	_TOKSkipSpaces
.21c0					_TOKEndSpaces:
.21c0	48		pha				pha 								; save it
.21c1	68		pla				pla
.21c2	f0 04		beq $21c8			beq 	_TOKDCExit 					; end of line.
.21c4	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.21c6	d0 01		bne $21c9			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.21c8					_TOKDCExit:
.21c8	60		rts				rts
.21c9					_TOKDCDoLine:
.21c9	20 ad 1f	jsr $1fad			jsr 	TOKResetElement 			; start getting the string
.21cc					_TOKDCLoop:
.21cc	20 8c 20	jsr $208c			jsr 	TOKGet 						; check EOL
.21cf	c9 00		cmp #$00			cmp 	#0
.21d1	f0 08		beq $21db			beq 	_TOKDCEndComment
.21d3	20 90 20	jsr $2090			jsr 	TOKGetNext 					; get and consume
.21d6	20 b1 1f	jsr $1fb1			jsr 	TOKWriteElement
.21d9	80 f1		bra $21cc			bra 	_TOKDCLoop
.21db					_TOKDCEndComment:
.21db	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21dd	20 7d 20	jsr $207d			jsr 	TOKWriteA
.21e0	20 f2 1f	jsr $1ff2			jsr 	TOKOutputElementBuffer
.21e3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.21e4					TOKTokeniseInteger:
.21e4	20 0d 22	jsr $220d			jsr 	TOKExtractInteger 			; pull an integer out as text.
.21e7	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.21e9	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.21eb	ad 1c 05	lda $051c			lda		TOKElement
.21ee	20 8f 2f	jsr $2f8f			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.21f1	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21f4	f0 12		beq $2208			beq 	_TOKNotLineNumber
.21f6	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21f8	d0 0c		bne $2206			bne 	_TOKBadLineNumeber
.21fa	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.21fc	8d 01 04	sta $0401			sta 	TOKLineNumber
.21ff	a5 09		lda $09				lda 	IFR0+IM1
.2201	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2204	18		clc				clc
.2205	60		rts				rts
.2206					_TOKBadLineNumeber:
.2206	38		sec				sec
.2207	60		rts				rts
.2208					_TOKNotLineNumber:
.2208	20 c0 1f	jsr $1fc0			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.220b	18		clc				clc
.220c	60		rts				rts
.220d					TOKExtractInteger:
.220d	20 ad 1f	jsr $1fad			jsr 	TOKResetElement 			; restart
.2210					_TTILoop:
.2210	20 8c 20	jsr $208c			jsr 	TOKGet 						; keep getting and copying while numeric.
.2213	20 94 22	jsr $2294			jsr 	TOKIsDigit
.2216	90 08		bcc $2220			bcc 	_TOKEIExit
.2218	20 b1 1f	jsr $1fb1			jsr 	TOKWriteElement
.221b	20 90 20	jsr $2090			jsr 	TOKGetNext
.221e	80 f0		bra $2210			bra 	_TTILoop
.2220					_TOKEIExit:
.2220	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2221					TOKTokenisePunctuation:
.2221	20 ad 1f	jsr $1fad			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2224	20 90 20	jsr $2090			jsr 	TOKGetNext
.2227	20 b1 1f	jsr $1fb1			jsr 	TOKWriteElement
.222a	20 8c 20	jsr $208c			jsr 	TOKGet 						; what follows ?
.222d	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.222f	f0 10		beq $2241			beq 	_TTPOne
.2231	20 a8 22	jsr $22a8			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2234	b0 0b		bcs $2241			bcs 	_TTPOne 					; these speed things up a bit.
.2236	20 b1 1f	jsr $1fb1			jsr 	TOKWriteElement 			; this is what we will search for.
.2239	20 94 20	jsr $2094			jsr 	TOKFindToken
.223c	b0 0a		bcs $2248			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.223e	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2241					_TTPOne:
.2241	20 94 20	jsr $2094			jsr 	TOKFindToken 				; look for one character punctuation
.2244	b0 07		bcs $224d			bcs 	_TTPOutputExit 				; we found it
.2246	38		sec				sec 								; not recognised.
.2247	60		rts				rts
.2248					_TTPConsumeExit:
.2248	48		pha				pha
.2249	20 90 20	jsr $2090			jsr 	TOKGetNext 					; get the 2nd char out.
.224c	68		pla				pla
.224d					_TTPOutputExit:
.224d	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.224f	f0 05		beq $2256			beq 	_TTPComment
.2251	20 7d 20	jsr $207d			jsr  	TOKWriteA 					; write token out
.2254	18		clc				clc
.2255	60		rts				rts
.2256					_TTPComment:
.2256	20 b1 21	jsr $21b1			jsr 	TOKDoComment
.2259	18		clc				clc
.225a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.225b					TOKTokeniseString:
.225b	20 90 20	jsr $2090			jsr 	TOKGetNext 					; consume the "
.225e	20 ad 1f	jsr $1fad			jsr 	TOKResetElement 			; start getting the string
.2261					_TOKTSLoop:
.2261	20 8c 20	jsr $208c			jsr 	TOKGet 						; check EOL
.2264	c9 00		cmp #$00			cmp 	#0
.2266	f0 0c		beq $2274			beq 	_TOKTSExit
.2268	20 90 20	jsr $2090			jsr 	TOKGetNext 					; get and consume
.226b	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.226d	f0 05		beq $2274			beq 	_TOKTSExit
.226f	20 b1 1f	jsr $1fb1			jsr 	TOKWriteElement
.2272	80 ed		bra $2261			bra 	_TOKTSLoop
.2274					_TOKTSExit:
.2274	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2276	20 7d 20	jsr $207d			jsr 	TOKWriteA
.2279	20 f2 1f	jsr $1ff2			jsr 	TOKOutputElementBuffer
.227c	18		clc				clc
.227d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.227e					TOKToUpper:
.227e	c9 61		cmp #$61			cmp 	#"a"
.2280	90 06		bcc $2288			bcc 	_TTUNotLower
.2282	c9 7b		cmp #$7b			cmp 	#"z"+1
.2284	b0 02		bcs $2288			bcs 	_TTUNotLower
.2286	49 20		eor #$20			eor 	#$20
.2288					_TTUNotLower:
.2288	60		rts				rts
.2289					TOKToLower:
.2289	c9 41		cmp #$41			cmp 	#"A"
.228b	90 06		bcc $2293			bcc 	_TTUNotUpper
.228d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.228f	b0 02		bcs $2293			bcs 	_TTUNotUpper
.2291	49 20		eor #$20			eor 	#$20
.2293					_TTUNotUpper:
.2293	60		rts				rts
.2294					TOKIsDigit:
.2294	c9 30		cmp #$30			cmp 	#"0"
.2296	90 06		bcc $229e			bcc 	TOKFail
.2298	c9 3a		cmp #$3a			cmp 	#"9"+1
.229a	b0 02		bcs $229e			bcs 	TOKFail
.229c					TOKSucceed:
.229c	38		sec				sec
.229d	60		rts				rts
.229e					TOKFail:
.229e	18		clc				clc
.229f	60		rts				rts
.22a0					TOKIsIdentifierElement:
.22a0	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.22a2	f0 f8		beq $229c			beq 	TOKSucceed
.22a4	c9 5f		cmp #$5f			cmp 	#"_"
.22a6	f0 f4		beq $229c			beq 	TOKSucceed 					; else fall through to alphanumeric
.22a8					TOKIsAlphaNumeric:
.22a8	20 b1 22	jsr $22b1			jsr 	TOKIsAlpha
.22ab	b0 ef		bcs $229c			bcs 	TOKSucceed
.22ad	20 94 22	jsr $2294			jsr 	TOKIsDigit
.22b0	60		rts				rts
.22b1					TOKIsAlpha:
.22b1	20 7e 22	jsr $227e			jsr 	TOKToUpper
.22b4	c9 41		cmp #$41			cmp 	#"A"
.22b6	90 e6		bcc $229e			bcc 	TOKFail
.22b8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.22ba	b0 e2		bcs $229e			bcs 	TOKFail
.22bc	80 de		bra $229c			bra 	TOKSucceed
.22be					TOKIsHexadecimal:
.22be	20 94 22	jsr $2294			jsr		TOKIsDigit
.22c1	b0 d9		bcs $229c			bcs 	TOKSucceed
.22c3	20 b1 22	jsr $22b1			jsr 	TOKIsAlpha
.22c6	90 d6		bcc $229e			bcc 	TOKFail
.22c8	c9 47		cmp #$47			cmp 	#"F"+1
.22ca	b0 d2		bcs $229e			bcs 	TOKFail
.22cc	80 ce		bra $229c			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.22ce					Command_CALL:
.22ce	a9 42		lda #$42			lda 	#STK_CALL
.22d0	20 9b 27	jsr $279b			jsr 	StackOpen
.22d3	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.22d5	29 c0		and #$c0			and 	#$C0
.22d7	c9 40		cmp #$40			cmp 	#$40
.22d9	d0 29		bne $2304			bne 	_CCSyntax
.22db	20 6e 2a	jsr $2a6e			jsr 	VARGetInfo 					; get the information
.22de	20 82 27	jsr $2782			jsr 	ERRCheckRParen 				; check right bracket follows.
.22e1	20 20 2a	jsr $2a20			jsr 	VARFind 					; exists ?
.22e4	90 21		bcc $2307			bcc 	_CCUnknown
.22e6	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.22e8	85 22		sta $22				sta 	zTemp0
.22ea	20 cf 27	jsr $27cf			jsr 	STKSaveCodePosition 		; save return address on stack.
.22ed	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.22ef	b1 22		lda ($22),y			lda 	(zTemp0),y
.22f1	c9 ff		cmp #$ff			cmp 	#$FF
.22f3	d0 12		bne $2307			bne 	_CCUnknown
.22f5	88		dey				dey 								; get Y offset to stack
.22f6	b1 22		lda ($22),y			lda 	(zTemp0),y
.22f8	48		pha				pha
.22f9	88		dey				dey 								; get address
.22fa	b1 22		lda ($22),y			lda 	(zTemp0),y
.22fc	85 19		sta $19				sta 	codePtr+1
.22fe	b2 22		lda ($22)			lda 	(zTemp0)
.2300	85 18		sta $18				sta 	codePtr
.2302	7a		ply				ply 								; restore Y
.2303	60		rts				rts
.2304					_CCSyntax:
.2304	4c cd 25	jmp $25cd		jmp	ErrorV_syntax
.2307					_CCUnknown:
.2307	4c 42 27	jmp $2742		jmp	ErrorV_unknown
.230a					Command_ENDPROC:
.230a	a9 42		lda #$42			lda 	#STK_CALL
.230c	20 c7 27	jsr $27c7			jsr 	StackCheckFrame
.230f	20 e1 27	jsr $27e1			jsr 	STKLoadCodePosition 		; return
.2312	20 b9 27	jsr $27b9			jsr 	StackClose
.2315	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2316					Command_DO:
.2316	a9 22		lda #$22			lda 	#STK_DO
.2318	20 9b 27	jsr $279b			jsr 	StackOpen
.231b	20 cf 27	jsr $27cf			jsr 	STKSaveCodePosition 		; save loop position
.231e	60		rts				rts
.231f					Command_EXIT:
.231f	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2321	20 c7 27	jsr $27c7			jsr 	StackCheckFrame
.2324	20 b9 27	jsr $27b9			jsr 	StackClose 					; close it
.2327	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2329	aa		tax				tax
.232a	20 dd 24	jsr $24dd			jsr 	ScanForward
.232d	60		rts				rts
.232e					Command_LOOP:
.232e	a9 22		lda #$22			lda 	#STK_DO
.2330	20 c7 27	jsr $27c7			jsr 	StackCheckFrame
.2333	20 e1 27	jsr $27e1			jsr 	STKLoadCodePosition 		; loop back
.2336	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2337					Command_FOR:
.2337	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2339	20 9b 27	jsr $279b			jsr 	StackOpen
.233c	20 c3 12	jsr $12c3			jsr 	CommandLET 					; do "I = 1" bit
.233f	5a		phy				phy 								; save variable address to +4,+5
.2340	a0 04		ldy #$04			ldy 	#4
.2342	a5 22		lda $22				lda 	zTemp0
.2344	91 2a		sta ($2a),y			sta 	(basicStack),y
.2346	c8		iny				iny
.2347	a5 23		lda $23				lda 	zTemp0+1
.2349	91 2a		sta ($2a),y			sta 	(basicStack),y
.234b	7a		ply				ply
.234c	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.234e	20 92 27	jsr $2792			jsr 	ERRCheckA
.2351	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2354	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2356	a2 08		ldx #$08			ldx 	#IFR0
.2358	20 ad 23	jsr $23ad			jsr 	CFSaveR0X
.235b	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.235d	c9 91		cmp #$91			cmp 	#PR_STEP
.235f	d0 06		bne $2367			bne 	_CFStep1
.2361	c8		iny				iny 								; consume step
.2362	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; evaluate STEP
.2365	80 24		bra $238b			bra 	_CFWriteStep
.2367					_CFStep1:
.2367	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2369	a9 01		lda #$01			lda 	#1
.236b	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.236e	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.236f	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2371	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2373	85 22		sta $22				sta 	zTemp0
.2375	c8		iny				iny
.2376	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2378	85 23		sta $23				sta 	zTemp0+1
.237a	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.237c	b1 22		lda ($22),y			lda 	(zTemp0),y
.237e	d0 0a		bne $238a			bne 	_CFNotOptimised
.2380	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2382	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2384	d0 04		bne $238a			bne 	_CFNotOptimised
.2386	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2388	85 0b		sta $0b				sta 	IFR0+IExp
.238a					_CFNotOptimised:
.238a	7a		ply				ply
.238b					_CFWriteStep:
.238b	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.238d	a9 06		lda #$06			lda 	#6
.238f	20 ad 23	jsr $23ad			jsr 	CFSaveR0X
.2392	20 cf 27	jsr $27cf			jsr 	STKSaveCodePosition 		; save loop position
.2395	60		rts				rts
.2396					CFLoadR0X:
.2396	5a		phy				phy
.2397	a8		tay				tay
.2398	b1 2a		lda ($2a),y			lda 	(basicStack),y
.239a	95 00		sta $00,x			sta 	IM0,x
.239c	c8		iny				iny
.239d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.239f	95 01		sta $01,x			sta 	IM1,x
.23a1	c8		iny				iny
.23a2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a4	95 02		sta $02,x			sta 	IM2,x
.23a6	c8		iny				iny
.23a7	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a9	95 03		sta $03,x			sta 	IExp,x
.23ab	7a		ply				ply
.23ac	60		rts				rts
.23ad					CFSaveR0X:
.23ad	5a		phy				phy
.23ae	a8		tay				tay
.23af	b5 00		lda $00,x			lda 	IM0,x
.23b1	91 2a		sta ($2a),y			sta 	(basicStack),y
.23b3	c8		iny				iny
.23b4	b5 01		lda $01,x			lda 	IM1,x
.23b6	91 2a		sta ($2a),y			sta 	(basicStack),y
.23b8	c8		iny				iny
.23b9	b5 02		lda $02,x			lda 	IM2,x
.23bb	91 2a		sta ($2a),y			sta 	(basicStack),y
.23bd	c8		iny				iny
.23be	b5 03		lda $03,x			lda 	IExp,x
.23c0	91 2a		sta ($2a),y			sta 	(basicStack),y
.23c2	7a		ply				ply
.23c3	60		rts				rts
.23c4					Command_NEXT:
.23c4	a9 37		lda #$37			lda 	#STK_FOR
.23c6	20 c7 27	jsr $27c7			jsr 	StackCheckFrame
.23c9	5a		phy				phy 								; check optimised loop
.23ca	a0 09		ldy #$09			ldy 	#9
.23cc	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23ce	7a		ply				ply
.23cf	0a		asl a				asl 	a
.23d0	b0 35		bcs $2407			bcs 	_CNOptimised
.23d2	20 3e 24	jsr $243e			jsr 	_CNLoadValue 				; load index value to R0.
.23d5	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.23d7	a9 06		lda #$06			lda 	#6
.23d9	20 96 23	jsr $2396			jsr 	CFLoadR0X
.23dc	20 23 2b	jsr $2b23			jsr 	IFloatAdd 					; add them together and write back.
.23df	20 61 24	jsr $2461			jsr 	_CNSaveValue
.23e2	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.23e4	a2 0c		ldx #$0c			ldx 	#IFR1
.23e6	20 96 23	jsr $2396			jsr 	CFLoadR0X
.23e9	20 fa 2d	jsr $2dfa			jsr 	IFloatCompare 				; compare terminal vs current
.23ec	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.23ee	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.23f1	f0 10		beq $2403			beq 	_CNLoopBack
.23f3	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.23f5	5a		phy				phy
.23f6	a0 09		ldy #$09			ldy 	#6+IExp
.23f8	51 2a		eor ($2a),y			eor 	(basicStack),y
.23fa	7a		ply				ply
.23fb	29 40		and #$40			and 	#IFSign
.23fd	f0 04		beq $2403			beq 	_CNLoopBack
.23ff					_CNExitLoop:
.23ff	20 b9 27	jsr $27b9			jsr 	StackClose		 			; return
.2402	60		rts				rts
.2403					_CNLoopBack:
.2403	20 e1 27	jsr $27e1			jsr 	STKLoadCodePosition 		; loop back
.2406	60		rts				rts
.2407					_CNOptimised:
.2407	5a		phy				phy
.2408	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.240a	b1 2a		lda ($2a),y			lda 	(basicStack),y
.240c	85 26		sta $26				sta 	zTemp2
.240e	c8		iny				iny
.240f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2411	85 27		sta $27				sta 	zTemp2+1
.2413	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2415					_CNIncrement:
.2415	c8		iny				iny
.2416	b1 26		lda ($26),y			lda 	(zTemp2),y
.2418	1a		inc a				inc 	a
.2419	91 26		sta ($26),y			sta 	(zTemp2),y
.241b	f0 f8		beq $2415			beq 	_CNIncrement
.241d	18		clc				clc 								; point zTemp0 to terminal value
.241e	a5 2a		lda $2a				lda 	basicStack
.2420	69 0a		adc #$0a			adc 	#10
.2422	85 22		sta $22				sta 	zTemp0
.2424	a5 2b		lda $2b				lda 	basicStack+1
.2426	69 00		adc #$00			adc 	#0
.2428	85 23		sta $23				sta 	zTemp0+1
.242a	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.242c	b2 26		lda ($26)			lda 	(zTemp2)
.242e	d2 22		cmp ($22)			cmp 	(zTemp0)
.2430	b1 26		lda ($26),y			lda 	(zTemp2),y
.2432	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2434	c8		iny				iny
.2435	b1 26		lda ($26),y			lda 	(zTemp2),y
.2437	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2439	7a		ply				ply
.243a	b0 c3		bcs $23ff			bcs 	_CNExitLoop
.243c	80 c5		bra $2403			bra 	_CNLoopBack
.243e					_CNLoadValue:
.243e	5a		phy				phy
.243f	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2441	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2443	85 26		sta $26				sta 	zTemp2
.2445	c8		iny				iny
.2446	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2448	85 27		sta $27				sta 	zTemp2+1
.244a	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.244c	b1 26		lda ($26),y			lda 	(zTemp2),y
.244e	85 08		sta $08				sta 	IFR0+IM0
.2450	c8		iny				iny
.2451	b1 26		lda ($26),y			lda 	(zTemp2),y
.2453	85 09		sta $09				sta 	IFR0+IM1
.2455	c8		iny				iny
.2456	b1 26		lda ($26),y			lda 	(zTemp2),y
.2458	85 0a		sta $0a				sta 	IFR0+IM2
.245a	c8		iny				iny
.245b	b1 26		lda ($26),y			lda 	(zTemp2),y
.245d	85 0b		sta $0b				sta 	IFR0+IExp
.245f	7a		ply				ply
.2460	60		rts				rts
.2461					_CNSaveValue:
.2461	5a		phy				phy
.2462	a0 00		ldy #$00			ldy 	#0
.2464	a5 08		lda $08				lda 	IFR0+IM0
.2466	91 26		sta ($26),y			sta 	(zTemp2),y
.2468	c8		iny				iny
.2469	a5 09		lda $09				lda 	IFR0+IM1
.246b	91 26		sta ($26),y			sta 	(zTemp2),y
.246d	c8		iny				iny
.246e	a5 0a		lda $0a				lda 	IFR0+IM2
.2470	91 26		sta ($26),y			sta 	(zTemp2),y
.2472	c8		iny				iny
.2473	a5 0b		lda $0b				lda 	IFR0+IExp
.2475	91 26		sta ($26),y			sta 	(zTemp2),y
.2477	7a		ply				ply
.2478	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2479					Command_GOSUB:
.2479	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; get line number
.247c	a9 52		lda #$52			lda 	#STK_GOSUB
.247e	20 9b 27	jsr $279b			jsr 	StackOpen
.2481	20 cf 27	jsr $27cf			jsr 	STKSaveCodePosition 		; save return address on stack.
.2484	4c e0 11	jmp $11e0			jmp 	GotoR0
.2487					Command_RETURN:
.2487	a9 52		lda #$52			lda 	#STK_GOSUB
.2489	20 c7 27	jsr $27c7			jsr 	StackCheckFrame
.248c	20 e1 27	jsr $27e1			jsr 	STKLoadCodePosition 		; return
.248f	20 b9 27	jsr $27b9			jsr 	StackClose
.2492	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2493					IfCommand:
.2493	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; Get the if test.
.2496	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2498	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.249a	d0 0c		bne $24a8			bne 	_IfStructured 				; we still support it.
.249c	c8		iny				iny 								; consume THEN
.249d	a2 08		ldx #$08			ldx 	#IFR0
.249f	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; is it zero
.24a2	f0 01		beq $24a5			beq 	_IfFail 					; if fail, go to next line
.24a4	60		rts				rts 								; if THEN just continue
.24a5					_IfFail:
.24a5	4c d1 14	jmp $14d1			jmp 	RUNEndOfLine
.24a8					_IfStructured:
.24a8	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; is it zero
.24ab	d0 07		bne $24b4			bne 	_IfExit 					; if not, then continue normally.
.24ad	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.24af	a2 85		ldx #$85			ldx 	#PR_ENDIF
.24b1	20 dd 24	jsr $24dd			jsr 	ScanForward 				; and run from there
.24b4					_IfExit:
.24b4	60		rts				rts
.24b5					ElseCode:
.24b5	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.24b7	aa		tax				tax 								; so just go to the structure exit
.24b8	20 dd 24	jsr $24dd			jsr 	ScanForward
.24bb	60		rts				rts
.24bc					EndIf:
.24bc	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.24bd					Command_REPEAT:
.24bd	a9 02		lda #$02			lda 	#STK_REPEAT
.24bf	20 9b 27	jsr $279b			jsr 	StackOpen
.24c2	20 cf 27	jsr $27cf			jsr 	STKSaveCodePosition 		; save loop position
.24c5	60		rts				rts
.24c6					Command_UNTIL:
.24c6	a9 02		lda #$02			lda 	#STK_REPEAT
.24c8	20 c7 27	jsr $27c7			jsr 	StackCheckFrame
.24cb	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; work out the test
.24ce	a2 08		ldx #$08			ldx 	#IFR0
.24d0	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; check if zero
.24d3	f0 04		beq $24d9			beq 	_CULoopBack 				; if so keep looping
.24d5	20 b9 27	jsr $27b9			jsr 	StackClose		 			; return
.24d8	60		rts				rts
.24d9					_CULoopBack:
.24d9	20 e1 27	jsr $27e1			jsr 	STKLoadCodePosition 		; loop back
.24dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.24dd					ScanForward:
.24dd	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.24df	86 23		stx $23				stx 	zTemp0+1
.24e1	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.24e3					_ScanForwardLoop:
.24e3	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.24e5	d0 0a		bne $24f1			bne 	_ScanNoCheck
.24e7	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.24e9	c5 22		cmp $22				cmp 	zTemp0
.24eb	f0 49		beq $2536			beq 	_ScanExit
.24ed	c5 23		cmp $23				cmp 	zTemp0+1
.24ef	f0 45		beq $2536			beq 	_ScanExit
.24f1					_ScanNoCheck:
.24f1	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.24f3	c8		iny				iny
.24f4	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.24f6	f0 37		beq $252f			beq		_ScanDataItem
.24f8	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.24fa	f0 33		beq $252f			beq 	_ScanDataItem
.24fc	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.24fe	f0 1b		beq $251b			beq 	_ScanNextLine
.2500	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2502	d0 01		bne $2505			bne 	_ScanNoShift
.2504	c8		iny				iny
.2505					_ScanNoShift:
.2505	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2507	b0 da		bcs $24e3			bcs 	_ScanForwardLoop
.2509	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.250b	90 d6		bcc $24e3			bcc 	_ScanForwardLoop
.250d	aa		tax				tax 								; access the table to get the adjustment.
.250e	18		clc				clc
.250f	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2511	7d 2a 1a	adc $1a2a,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2514	85 24		sta $24				sta 	zTemp1
.2516	10 cb		bpl $24e3			bpl		_ScanForwardLoop 			; error if -ve ?
.2518	4c 59 26	jmp $2659		jmp	ErrorV_structure
.251b					_ScanNextLine:
.251b	18		clc				clc	 								; forward to next line.
.251c	b2 18		lda ($18)			lda 	(codePtr)
.251e	65 18		adc $18				adc 	codePtr
.2520	85 18		sta $18				sta 	codePtr
.2522	90 02		bcc $2526			bcc 	_ScanNoCarry
.2524	e6 19		inc $19				inc 	codePtr+1
.2526					_ScanNoCarry:
.2526	a0 03		ldy #$03			ldy 	#3
.2528	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.252a	d0 b7		bne $24e3			bne 	_ScanForwardLoop
.252c	4c 59 26	jmp $2659		jmp	ErrorV_structure
.252f					_ScanDataItem:
.252f	98		tya				tya
.2530	38		sec				sec
.2531	71 18		adc ($18),y			adc 	(codePtr),y
.2533	a8		tay				tay
.2534	80 ad		bra $24e3			bra 	_ScanForwardLoop
.2536					_ScanExit:
.2536	c8		iny				iny 								; consume final token.
.2537	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2538					ScanProcedures:
.2538	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.253a	48		pha				pha
.253b	a5 19		lda $19				lda 	codePtr+1
.253d	48		pha				pha
.253e	5a		phy				phy
.253f	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2542	85 19		sta $19				sta 	codePtr+1
.2544	64 18		stz $18				stz 	codePtr
.2546					_SPLoop:
.2546	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2548	f0 18		beq $2562			beq 	_SPExit
.254a	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.254c	b1 18		lda ($18),y			lda 	(codePtr),y
.254e	c9 88		cmp #$88			cmp 	#PR_PROC
.2550	d0 03		bne $2555			bne 	_SPNext
.2552	20 6a 25	jsr $256a			jsr 	_SPSetupRecord
.2555					_SPNext:
.2555	18		clc				clc 								; forward to next
.2556	b2 18		lda ($18)			lda 	(codePtr)
.2558	65 18		adc $18				adc 	codePtr
.255a	85 18		sta $18				sta 	codePtr
.255c	90 e8		bcc $2546			bcc 	_SPLoop
.255e	e6 19		inc $19				inc 	codePtr+1
.2560	80 e4		bra $2546			bra 	_SPLoop
.2562					_SPExit:
.2562	7a		ply				ply
.2563	68		pla				pla
.2564	85 19		sta $19				sta 	codePtr+1
.2566	68		pla				pla
.2567	85 18		sta $18				sta 	codePtr
.2569	60		rts				rts
.256a					_SPSetupRecord:
.256a	c8		iny				iny 								; check identifier follows
.256b	b1 18		lda ($18),y			lda 	(codePtr),y
.256d	29 c0		and #$c0			and 	#$C0
.256f	c9 40		cmp #$40			cmp 	#$40
.2571	d0 27		bne $259a			bne 	_SPSyntax
.2573	20 6e 2a	jsr $2a6e			jsr 	VARGetInfo 					; get the information
.2576	20 82 27	jsr $2782			jsr 	ERRCheckRParen 				; check right bracket follows.
.2579	20 20 2a	jsr $2a20			jsr 	VARFind 					; already exists ?
.257c	b0 1f		bcs $259d			bcs 	_SPUsed 					; error !
.257e	20 cc 29	jsr $29cc			jsr 	VARCreate 					; create, XA points to the data.
.2581	85 22		sta $22				sta 	zTemp0
.2583	86 23		stx $23				stx 	zTemp0+1
.2585	5a		phy				phy 								; save Y pos on stack
.2586	a0 01		ldy #$01			ldy 	#1
.2588	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.258a	92 22		sta ($22)			sta 	(zTemp0)
.258c	a5 19		lda $19				lda 	codePtr+1
.258e	91 22		sta ($22),y			sta 	(zTemp0),y
.2590	c8		iny				iny
.2591	68		pla				pla
.2592	91 22		sta ($22),y			sta 	(zTemp0),y
.2594	c8		iny				iny
.2595	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2597	91 22		sta ($22),y			sta 	(zTemp0),y
.2599	60		rts				rts
.259a					_SPSyntax:
.259a	4c cd 25	jmp $25cd		jmp	ErrorV_syntax
.259d					_SPUsed:
.259d	4c 24 27	jmp $2724		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.25a0					Command_WHILE:
.25a0	5a		phy				phy 								; save position of the test
.25a1	20 10 17	jsr $1710			jsr 	EXPEvalNumber 				; work out the while test.
.25a4	a2 08		ldx #$08			ldx 	#IFR0
.25a6	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; check if zero
.25a9	f0 0e		beq $25b9			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.25ab	98		tya				tya 								; position *after* test.
.25ac	7a		ply				ply 								; restore position before test, at WHILE
.25ad	88		dey				dey 								; so we execute the WHILE command again.
.25ae	48		pha				pha 								; push after test on the stack
.25af	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.25b1	20 9b 27	jsr $279b			jsr 	StackOpen
.25b4	20 cf 27	jsr $27cf			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.25b7	7a		ply				ply 								; restore the position *after* the test
.25b8	60		rts				rts
.25b9					_WHExitLoop:
.25b9	68		pla				pla 								; throw post loop position
.25ba	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.25bc	aa		tax				tax
.25bd	20 dd 24	jsr $24dd			jsr 	ScanForward
.25c0	60		rts				rts
.25c1					Command_WEND:
.25c1	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.25c3	20 c7 27	jsr $27c7			jsr 	StackCheckFrame
.25c6	20 e1 27	jsr $27e1			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.25c9	20 b9 27	jsr $27b9			jsr 	StackClose		 			; erase the frame
.25cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.25cd					ErrorV_syntax:
.25cd	20 ba 28	jsr $28ba		jsr	ErrorHandler
>25d0	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>25d8	45 72 72 6f 72 00
.25de					ErrorV_range:
.25de	20 ba 28	jsr $28ba		jsr	ErrorHandler
>25e1	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>25e9	52 61 6e 67 65 00
.25ef					ErrorV_value:
.25ef	20 ba 28	jsr $28ba		jsr	ErrorHandler
>25f2	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>25fa	75 65 00
.25fd					ErrorV_type:
.25fd	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2600	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2608	73 6d 61 74 63 68 00
.260f					ErrorV_unimplemented:
.260f	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2612	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>261a	6c 65 6d 65 6e 74 65 64 00
.2623					ErrorV_assert:
.2623	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2626	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>262e	46 61 69 6c 00
.2633					ErrorV_internal:
.2633	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2636	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>263e	6c 20 45 72 72 6f 72 00
.2646					ErrorV_divzero:
.2646	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2649	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2651	42 79 20 5a 65 72 6f 00
.2659					ErrorV_structure:
.2659	20 ba 28	jsr $28ba		jsr	ErrorHandler
>265c	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2664	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2671					ErrorV_stop:
.2671	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2674	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>267c	20 53 74 6f 70 70 65 64 00
.2685					ErrorV_data:
.2685	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2688	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2690	44 61 74 61 00
.2695					ErrorV_redefine:
.2695	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2698	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>26a0	65 64 65 66 69 6e 65 64 00
.26a9					ErrorV_index:
.26a9	20 ba 28	jsr $28ba		jsr	ErrorHandler
>26ac	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>26b4	61 79 20 49 6e 64 65 78 00
.26bd					ErrorV_memory:
.26bd	20 ba 28	jsr $28ba		jsr	ErrorHandler
>26c0	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>26c8	4d 65 6d 6f 72 79 00
.26cf					ErrorV_uninitialised:
.26cf	20 ba 28	jsr $28ba		jsr	ErrorHandler
>26d2	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>26da	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.26ea					ErrorV_string:
.26ea	20 ba 28	jsr $28ba		jsr	ErrorHandler
>26ed	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>26f5	69 6e 67 20 4c 65 6e 67 74 68 00
.2700					ErrorV_variable:
.2700	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2703	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>270b	65 20 4d 69 73 73 69 6e 67 00
.2715					ErrorV_stack:
.2715	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2718	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2720	75 6c 6c 00
.2724					ErrorV_dupproc:
.2724	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2727	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>272f	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>273f	65 64 00
.2742					ErrorV_unknown:
.2742	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2745	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>274d	20 50 72 6f 63 65 64 75 72 65 00
.2758					ErrorV_break:
.2758	20 ba 28	jsr $28ba		jsr	ErrorHandler
>275b	05 42 72 65 61 6b 00			.text	5,"Break",0
.2762					ErrorV_line:
.2762	20 ba 28	jsr $28ba		jsr	ErrorHandler
>2765	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>276d	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.277a					ERRCheckLParen:
.277a	b1 18		lda ($18),y			lda 	(codePtr),y
.277c	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.277e	d0 18		bne $2798			bne 	ERRSyntaxError
.2780	c8		iny				iny
.2781	60		rts				rts
.2782					ERRCheckRParen:
.2782	b1 18		lda ($18),y			lda 	(codePtr),y
.2784	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2786	d0 10		bne $2798			bne 	ERRSyntaxError
.2788	c8		iny				iny
.2789	60		rts				rts
.278a					ERRCheckComma:
.278a	b1 18		lda ($18),y			lda 	(codePtr),y
.278c	c9 99		cmp #$99			cmp 	#PR_COMMA
.278e	d0 08		bne $2798			bne 	ERRSyntaxError
.2790	c8		iny				iny
.2791	60		rts				rts
.2792					ERRCheckA:
.2792	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2794	d0 02		bne $2798			bne 	ERRSyntaxError
.2796	c8		iny				iny
.2797	60		rts				rts
.2798					ERRSyntaxError:
.2798	4c cd 25	jmp $25cd		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.279b					StackOpen:
.279b	48		pha				pha 								; save frame byte
.279c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.279e	0a		asl a				asl 	a 							; claim twice this for storage
.279f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.27a1	38		sec				sec 								; so basically subtracting from
.27a2	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.27a4	85 2a		sta $2a				sta 	basicStack
.27a6	b0 0a		bcs $27b2			bcs 	_SONoBorrow
>27a8	db						.byte 	$DB
.27a9	c6 2b		dec $2b				dec 	basicStack+1
.27ab	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.27ad	cd 20 06	cmp $0620			cmp 	basicStackEnd
.27b0	f0 04		beq $27b6			beq 	_SOMemory
.27b2					_SONoBorrow:
.27b2	68		pla				pla 								; get marker back and write at TOS
.27b3	92 2a		sta ($2a)			sta 	(basicStack)
.27b5	60		rts				rts
.27b6					_SOMemory:
.27b6	4c 15 27	jmp $2715		jmp	ErrorV_stack
.27b9					StackClose:
.27b9	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.27bb	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.27bd	0a		asl a				asl 	a 							; claim twice this.
.27be	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.27c0	85 2a		sta $2a				sta 	basicStack
.27c2	90 02		bcc $27c6			bcc 	_SCExit
.27c4	e6 2b		inc $2b				inc 	basicStack+1
.27c6					_SCExit:
.27c6	60		rts				rts
.27c7					StackCheckFrame:
.27c7	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.27c9	d0 01		bne $27cc			bne 	_SCFError 					; different, we have structures mixed up
.27cb	60		rts				rts
.27cc					_SCFError:
.27cc	4c 59 26	jmp $2659		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.27cf					STKSaveCodePosition:
.27cf	5a		phy				phy
.27d0	98		tya				tya 								; save Y at offset 1.
.27d1	a0 01		ldy #$01			ldy 	#1
.27d3	91 2a		sta ($2a),y			sta 	(basicStack),y
.27d5	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.27d7	c8		iny				iny
.27d8	91 2a		sta ($2a),y			sta 	(basicStack),y
.27da	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.27dc	c8		iny				iny
.27dd	91 2a		sta ($2a),y			sta 	(basicStack),y
.27df	7a		ply				ply
.27e0	60		rts				rts
.27e1					STKLoadCodePosition:
.27e1	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.27e3	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27e5	85 19		sta $19				sta 	codePtr+1
.27e7	88		dey				dey
.27e8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27ea	85 18		sta $18				sta 	codePtr
.27ec	88		dey				dey
.27ed	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.27ef	a8		tay				tay
.27f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.27f1					StackReset:
.27f1	48		pha				pha 								; save top of memory
.27f2	3a		dec a				dec 	a  							; end of stack = previous byte
.27f3	85 2b		sta $2b				sta 	basicStack+1
.27f5	a9 ff		lda #$ff			lda 	#$FF
.27f7	85 2a		sta $2a				sta 	basicStack
.27f9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.27fb	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.27fd	68		pla				pla 								; allocate pages for stack.
.27fe	38		sec				sec
.27ff	e9 02		sbc #$02			sbc 	#STACKPAGES
.2801	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2804	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2805					StringConcrete:
.2805	5a		phy				phy 								; save position on stack
.2806	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2808	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.280a	b0 41		bcs $284d			bcs 	_SALengthError
.280c	18		clc				clc 								; length of the new string
.280d	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.280f	90 02		bcc $2813			bcc 	_SAHaveLength
.2811	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2813					_SAHaveLength:
.2813	48		pha				pha 								; save length to be allocated for concreting.
.2814	38		sec				sec
.2815	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2817	6d 22 06	adc $0622			adc 	stringMemory
.281a	8d 22 06	sta $0622			sta 	stringMemory
.281d	85 26		sta $26				sta 	zTemp2 						; update storage address
.281f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2821	6d 23 06	adc $0623			adc 	stringMemory+1
.2824	8d 23 06	sta $0623			sta 	stringMemory+1
.2827	85 27		sta $27				sta 	zTemp2+1
.2829	68		pla				pla 								; save length allocated in +0
.282a	92 26		sta ($26)			sta 	(zTemp2)
.282c	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.282e	a0 01		ldy #$01			ldy 	#1
.2830	91 26		sta ($26),y			sta 	(zTemp2),y
.2832					_SACopyNewString:
.2832	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2834	a0 02		ldy #$02			ldy 	#2
.2836	91 26		sta ($26),y			sta 	(zTemp2),y
.2838	aa		tax				tax 								; bytes to copy
.2839	f0 0c		beq $2847			beq 	_SACopyExit
.283b	a0 01		ldy #$01			ldy 	#1 							; first character from here
.283d					_SACopyNSLoop:
.283d	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.283f	c8		iny				iny 								; write two on in string storage
.2840	c8		iny				iny
.2841	91 26		sta ($26),y			sta 	(zTemp2),y
.2843	88		dey				dey
.2844	ca		dex				dex									; until copied all the string lengths.
.2845	d0 f6		bne $283d			bne 	_SACopyNSLoop
.2847					_SACopyExit:
.2847	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2849	a5 26		lda $26				lda 	zTemp2
.284b	7a		ply				ply
.284c	60		rts				rts
.284d					_SALengthError:
.284d	4c ea 26	jmp $26ea		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2850					StringSystemInitialise:
.2850	3a		dec a				dec 	a 							; make last byte of previous page.
.2851	8d 23 06	sta $0623			sta 	stringMemory+1
.2854	85 23		sta $23				sta 	zTemp0+1
.2856	a9 ff		lda #$ff			lda 	#$FF
.2858	8d 22 06	sta $0622			sta 	stringMemory
.285b	85 22		sta $22				sta 	zTemp0
.285d	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.285f	92 22		sta ($22)			sta 	(zTemp0)
.2861	60		rts				rts
.2862					StringSpaceInitialise:
.2862	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2864	8d 21 06	sta $0621			sta 	stringInitialised
.2867	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.286a	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.286d	ad 23 06	lda $0623			lda 	stringMemory+1
.2870	3a		dec a				dec 	a
.2871	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2874	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.2877	60		rts				rts
.2878					StringTempAllocate:
.2878	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.287a	b0 2e		bcs $28aa			bcs 	_STALength
.287c	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.287f	30 05		bmi $2886			bmi 	_STAAllocate
.2881	48		pha				pha 								; save value to subtract.
.2882	20 62 28	jsr $2862			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2885	68		pla				pla 								; restore it
.2886					_STAAllocate:
.2886	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2888	18		clc				clc  								; deliberate allows one more
.2889	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.288c	8d 24 06	sta $0624			sta 	stringTempPointer
.288f	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2891	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2893	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2896	69 ff		adc #$ff			adc 	#$FF
.2898	8d 25 06	sta $0625			sta 	stringTempPointer+1
.289b	85 2d		sta $2d				sta 	zsTemp+1
.289d	85 09		sta $09				sta 	IFR0+IM1
.289f	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.28a1	a9 80		lda #$80			lda 	#$80
.28a3	85 0b		sta $0b				sta 	IFR0+IExp
.28a5	a9 00		lda #$00			lda 	#0 							; clear the target string
.28a7	92 2c		sta ($2c)			sta 	(zsTemp)
.28a9	60		rts				rts
.28aa					_STALength:
.28aa	4c ea 26	jmp $26ea		jmp	ErrorV_string
.28ad					StringTempWrite:
.28ad	5a		phy				phy
.28ae	48		pha				pha
.28af	b2 2c		lda ($2c)			lda 	(zsTemp)
.28b1	1a		inc a				inc 	a
.28b2	92 2c		sta ($2c)			sta 	(zsTemp)
.28b4	a8		tay				tay
.28b5	68		pla				pla
.28b6	91 2c		sta ($2c),y			sta 	(zsTemp),y
.28b8	7a		ply				ply
.28b9	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.28ba					ErrorHandler:
.28ba	fa		plx				plx 								; get address of msg
.28bb	7a		ply				ply
.28bc	e8		inx				inx 								; bump past RTS
.28bd	d0 01		bne $28c0			bne 	_EHNoInc
.28bf	c8		iny				iny
.28c0					_EHNoInc:
.28c0	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.28c3	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.28c6	0d 27 06	ora $0627			ora 	ERRLine+1
.28c9	f0 10		beq $28db			beq 	_EHNoNumber
.28cb	a2 de		ldx #$de			ldx 	#_EHAtMsg & $FF
.28cd	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.28cf	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.28d2	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.28d5	ae 27 06	ldx $0627			ldx 	ERRLine+1
.28d8	20 e3 28	jsr $28e3			jsr 	WriteIntXA
.28db					_EHNoNumber:
.28db	4c 0c 29	jmp $290c			jmp 	WarmStartNewLine
.28de					_EHAtMsg:
>28de	20 61 74 20 00					.text 	" at ",0
.28e3					WriteIntXA:
.28e3	da		phx				phx
.28e4	48		pha				pha
.28e5	a2 08		ldx #$08			ldx 	#IFR0
.28e7	20 7a 30	jsr $307a			jsr 	IFloatPushRx
.28ea	68		pla				pla
.28eb	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.28ee	68		pla				pla
.28ef	85 09		sta $09				sta 	IFR0+IM1
.28f1	a9 0a		lda #$0a			lda 	#10 						; decimal
.28f3	20 cd 2e	jsr $2ecd			jsr 	IFloatIntegerToStringR0	 	; convert
.28f6	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.28f9	a2 08		ldx #$08			ldx 	#IFR0
.28fb	20 9b 30	jsr $309b			jsr 	IFloatPullRx
.28fe	60		rts				rts
.28ff					NotImplemented:
.28ff	4c 0f 26	jmp $260f		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2902					WarmStart:
.2902	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2904	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2907	a9 6b		lda #$6b			lda 	#"k"
.2909	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.290c					WarmStartNewLine:
.290c	a9 0d		lda #$0d			lda 	#13
.290e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2911					WarmStartNoPrompt:
.2911	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2913	9a		txs				txs
.2914	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.2917	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.2919	f0 f1		beq $290c			beq 	WarmStartNewLine
.291b	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.291d	d0 f2		bne $2911			bne 	WarmStartNoPrompt
.291f	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.2922	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2923	d0 01		bne $2926			bne 	_WSSkip
.2925	c8		iny				iny
.2926					_WSSkip:
.2926	86 26		stx $26				stx 	zTemp2 						; save address
.2928	84 27		sty $27				sty 	zTemp2+1
.292a	a2 57		ldx #$57			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.292c	a0 29		ldy #$29			ldy 	#TOKGetCharacter >> 8
.292e	38		sec				sec
.292f	20 08 20	jsr $2008			jsr 	TOKTokenise
.2932	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2935	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2938	d0 0b		bne $2945			bne 	_WSLineEdit
.293a	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.293c	85 18		sta $18				sta 	codePtr
.293e	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2940	85 19		sta $19				sta 	codePtr+1
.2942	4c dc 14	jmp $14dc			jmp 	RUNNewLine
.2945					_WSLineEdit:
.2945	20 e3 1e	jsr $1ee3			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2948	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.294b	c9 04		cmp #$04			cmp 	#4
.294d	f0 03		beq $2952			beq 	_WSNoInsert
.294f	20 2d 1f	jsr $1f2d			jsr 	PGMInsertLine				; if not, maybe insert
.2952					_WSNoInsert:
.2952	20 44 10	jsr $1044			jsr 	ClearCode 					; clear variables etc.
.2955	80 ba		bra $2911			bra 	WarmStartNoPrompt
.2957					TOKGetCharacter:
.2957	b2 26		lda ($26)			lda 	(zTemp2)
.2959	90 06		bcc $2961			bcc 	_GSNoIncrement
.295b	e6 26		inc $26				inc 	zTemp2
.295d	d0 02		bne $2961			bne 	_GSNoIncrement
.295f	e6 27		inc $27				inc 	zTemp2+1
.2961					_GSNoIncrement:
.2961	c9 00		cmp #$00			cmp 	#0
.2963	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2964					VARArrayLookup:
.2964	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2966	86 23		stx $23				stx 	zTemp0+1
.2968	b2 22		lda ($22)			lda 	(zTemp0)
.296a	48		pha				pha
.296b	5a		phy				phy
.296c	a0 01		ldy #$01			ldy 	#1
.296e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2970	7a		ply				ply
.2971	48		pha				pha
.2972	20 22 17	jsr $1722			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2975	68		pla				pla 								; array address to zTemp0
.2976	85 23		sta $23				sta 	zTemp0+1
.2978	68		pla				pla
.2979	85 22		sta $22				sta 	zTemp0
.297b	5a		phy				phy 								; save codePtr position.
.297c	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.297e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2980	48		pha				pha 								; save bit 15 on stack.
.2981	29 7f		and #$7f			and 	#$7F
.2983	85 24		sta $24				sta 	zTemp1
.2985	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2987	d2 22		cmp ($22)			cmp 	(zTemp0)
.2989	a5 09		lda $09				lda 	IFR0+IM1
.298b	e5 24		sbc $24				sbc 	zTemp1
.298d	b0 3a		bcs $29c9			bcs 	_VALIndex
.298f	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2991	c9 40		cmp #$40			cmp 	#$40
.2993	b0 34		bcs $29c9			bcs 	_VALIndex
.2995	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2997	26 09		rol $09				rol 	IFR0+IM1
.2999	fa		plx				plx 								; get msb of size -> X
.299a	30 04		bmi $29a0			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.299c	06 08		asl $08				asl 	IFR0+IM0
.299e	26 09		rol $09				rol 	IFR0+IM1
.29a0					_VARNotX4:
.29a0	18		clc				clc 								; add the two for the size bytes
.29a1	a5 08		lda $08				lda 	IFR0+IM0
.29a3	69 02		adc #$02			adc 	#2
.29a5	85 08		sta $08				sta 	IFR0+IM0
.29a7	90 02		bcc $29ab			bcc 	_VARNoCarry1
.29a9	e6 09		inc $09				inc 	IFR0+IM1
.29ab					_VARNoCarry1:
.29ab	18		clc				clc 								; calculate the element address and push to stack.
.29ac	a5 08		lda $08				lda 	IFR0+IM0
.29ae	65 22		adc $22				adc 	zTemp0
.29b0	48		pha				pha
.29b1	a5 09		lda $09				lda 	IFR0+IM1
.29b3	65 23		adc $23				adc 	zTemp0+1
.29b5	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.29b7	30 04		bmi $29bd			bmi 	_VARHasSubLevel
.29b9	aa		tax				tax 								; address in XA
.29ba	68		pla				pla
.29bb	7a		ply				ply 								; restore Y and exit
.29bc	60		rts				rts
.29bd					_VARHasSubLevel:
.29bd	aa		tax				tax 								; get link address in XA
.29be	68		pla				pla
.29bf	7a		ply				ply 								; restore code position.
.29c0	48		pha				pha
.29c1	20 8a 27	jsr $278a			jsr 	ERRCheckComma 				; comma required.
.29c4	68		pla				pla
.29c5	20 64 29	jsr $2964			jsr 	VARArrayLookup 				; call it recursively
.29c8	60		rts				rts
.29c9					_VALIndex:
.29c9	4c a9 26	jmp $26a9		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.29cc					VARCreate:
.29cc	5a		phy				phy
.29cd	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.29cf	a2 00		ldx #$00			ldx 	#0
.29d1	20 61 10	jsr $1061			jsr 	AllocateMemory
.29d4	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.29d6	86 25		stx $25				stx 	zTemp1+1
.29d8	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.29da	ad 2a 06	lda $062a			lda 	VARHash
.29dd	91 24		sta ($24),y			sta 	(zTemp1),y
.29df	c8		iny				iny 								; put address of name into +3,+4
.29e0	ad 28 06	lda $0628			lda 	VARNameAddress
.29e3	91 24		sta ($24),y			sta 	(zTemp1),y
.29e5	c8		iny				iny
.29e6	ad 29 06	lda $0629			lda 	VARNameAddress+1
.29e9	91 24		sta ($24),y			sta 	(zTemp1),y
.29eb	ad 2b 06	lda $062b			lda 	VARType
.29ee	29 01		and #$01			and 	#1
.29f0	f0 06		beq $29f8			beq 	_CVNotString
.29f2	a0 08		ldy #$08			ldy 	#5+3
.29f4	a9 80		lda #$80			lda 	#$80
.29f6	91 24		sta ($24),y			sta 	(zTemp1),y
.29f8					_CVNotString:
.29f8	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.29fb	85 22		sta $22				sta 	zTemp0
.29fd	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.2a00	85 23		sta $23				sta 	zTemp0+1
.2a02	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2a04	b2 22		lda ($22)			lda 	(zTemp0)
.2a06	92 24		sta ($24)			sta 	(zTemp1)
.2a08	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a0a	91 24		sta ($24),y			sta 	(zTemp1),y
.2a0c	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2a0e	92 22		sta ($22)			sta 	(zTemp0)
.2a10	a5 25		lda $25				lda 	zTemp1+1
.2a12	91 22		sta ($22),y			sta 	(zTemp0),y
.2a14	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2a16	a6 25		ldx $25				ldx 	zTemp1+1
.2a18	18		clc				clc 								; add 5 to point to the data.
.2a19	69 05		adc #$05			adc 	#5
.2a1b	90 01		bcc $2a1e			bcc 	_VCNoCarry
.2a1d	e8		inx				inx
.2a1e					_VCNoCarry:
.2a1e	7a		ply				ply
.2a1f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2a20					VARFind:
.2a20	5a		phy				phy
.2a21	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2a23	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a25	85 25		sta $25				sta 	zTemp1+1
.2a27	f0 1c		beq $2a45			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2a29	b2 22		lda ($22)			lda 	(zTemp0)
.2a2b	85 24		sta $24				sta 	zTemp1
.2a2d					_VFLoop:
.2a2d	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2a2f	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a31	cd 2a 06	cmp $062a			cmp 	VARHash
.2a34	f0 12		beq $2a48			beq 	_VFHashesMatch 				; if so, check the name.
.2a36					_VFNext:
.2a36	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2a38	aa		tax				tax
.2a39	a0 01		ldy #$01			ldy 	#1
.2a3b	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a3d	85 25		sta $25				sta 	zTemp1+1
.2a3f	86 24		stx $24				stx 	zTemp1
.2a41	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2a43	d0 e8		bne $2a2d			bne 	_VFLoop
.2a45					_VFExitFail:
.2a45	7a		ply				ply
.2a46	18		clc				clc
.2a47	60		rts				rts
.2a48					_VFHashesMatch:
.2a48	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2a4a	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a4c	85 26		sta $26				sta 	zTemp2
.2a4e	c8		iny				iny
.2a4f	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a51	85 27		sta $27				sta 	zTemp2+1
.2a53	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2a55					_VFNameCompLoop:
.2a55	c8		iny				iny 								; char at a time
.2a56	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2a59	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2a5b	d0 d9		bne $2a36			bne 	_VFNext						; next entry if different.
.2a5d	c9 7c		cmp #$7c			cmp 	#$7C
.2a5f	90 f4		bcc $2a55			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2a61	18		clc				clc
.2a62	a5 24		lda $24				lda 	zTemp1
.2a64	a6 25		ldx $25				ldx 	zTemp1+1
.2a66	69 05		adc #$05			adc 	#5
.2a68	90 01		bcc $2a6b			bcc 	_VFNNoCarry
.2a6a	e8		inx				inx
.2a6b					_VFNNoCarry:
.2a6b	7a		ply				ply
.2a6c	38		sec				sec
.2a6d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a6e					VARGetInfo:
.2a6e	98		tya				tya 								; calculate the address of the identifier start.
.2a6f	18		clc				clc
.2a70	65 18		adc $18				adc 	codePtr
.2a72	8d 28 06	sta $0628			sta 	VARNameAddress
.2a75	a5 19		lda $19				lda 	codePtr+1
.2a77	69 00		adc #$00			adc 	#0
.2a79	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a7c	9c 2a 06	stz $062a			stz 	VARHash
.2a7f	a2 00		ldx #$00			ldx 	#0
.2a81					_VARCopyName:
.2a81	18		clc				clc 								; update the sum hash.
.2a82	ad 2a 06	lda $062a			lda 	VARHash
.2a85	71 18		adc ($18),y			adc 	(codePtr),y
.2a87	8d 2a 06	sta $062a			sta 	VARHash
.2a8a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a8c	c8		iny				iny
.2a8d	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a90	e8		inx				inx
.2a91	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a93	90 ec		bcc $2a81			bcc 	_VARCopyName
.2a95	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a98	29 03		and #$03			and 	#3 							; type is 0-3
.2a9a	0a		asl a				asl 	a
.2a9b	0a		asl a				asl 	a
.2a9c	85 22		sta $22				sta 	zTemp0
.2a9e	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2aa1	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2aa3	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2aa5	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2aa6	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2aa8	85 22		sta $22				sta 	zTemp0
.2aaa	8d 4c 06	sta $064c			sta 	VARHashEntry
.2aad	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2aaf	69 00		adc #$00			adc 	#0
.2ab1	85 23		sta $23				sta 	zTemp0+1
.2ab3	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2ab6	60		rts				rts
.2ab7					VARClearHashTables:
.2ab7	a2 00		ldx #$00			ldx 	#0
.2ab9					_VCHRLoop:
.2ab9	a9 00		lda #$00			lda 	#0
.2abb	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2abe	e8		inx				inx
.2abf	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2ac1	d0 f6		bne $2ab9			bne 	_VCHRLoop
.2ac3	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2ac4					VARCheckSimple:
.2ac4	aa		tax				tax 								; save in X
.2ac5	b1 18		lda ($18),y			lda 	(codePtr),y
.2ac7	c9 7c		cmp #$7c			cmp 	#$7C
.2ac9	d0 15		bne $2ae0			bne 	_VCSComplex
.2acb	c8		iny				iny 								; consume the second byte, the type.
.2acc	8a		txa				txa  								; character (40-7F) x 4
.2acd	0a		asl a				asl 	a
.2ace	0a		asl a				asl  	a
.2acf	18		clc				clc
.2ad0	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2ad2	85 08		sta $08				sta 	IFR0+IM0
.2ad4	a9 06		lda #$06			lda 	#FastVariables >> 8
.2ad6	69 00		adc #$00			adc 	#0
.2ad8	85 09		sta $09				sta 	IFR0+IM1
.2ada	64 0a		stz $0a				stz 	IFR0+IM2
.2adc	64 0b		stz $0b				stz 	IFR0+IExp
.2ade	38		sec				sec 								; it's a reference
.2adf	60		rts				rts
.2ae0					_VCSComplex:
.2ae0	88		dey				dey	 								; extract information.
.2ae1	20 6e 2a	jsr $2a6e			jsr 	VARGetInfo
.2ae4	20 20 2a	jsr $2a20			jsr 	VARFind 					; search for variable
.2ae7	b0 0a		bcs $2af3			bcs 	_VCSHaveVariable
.2ae9	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2aec	29 02		and #$02			and 	#2
.2aee	d0 25		bne $2b15			bne 	_VCNoCreate
.2af0	20 cc 29	jsr $29cc			jsr 	VARCreate 					; create variable
.2af3					_VCSHaveVariable:
.2af3	48		pha				pha 								; save LSB on the stack
.2af4	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2af7	6a		ror a				ror 	a
.2af8	6a		ror a				ror 	a
.2af9	68		pla				pla 								; restore LSB
.2afa	90 08		bcc $2b04			bcc 	_VCSNotArray 				; skip if not an array
.2afc	20 64 29	jsr $2964			jsr 	VARArrayLookup 				; look for subscripts.
.2aff	48		pha				pha 								; check )
.2b00	20 82 27	jsr $2782			jsr 	ERRCheckRParen
.2b03	68		pla				pla
.2b04					_VCSNotArray:
.2b04	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2b06	85 08		sta $08				sta 	IFR0+IM0
.2b08	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2b0a	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2b0d	6a		ror a				ror 	a
.2b0e	a9 00		lda #$00			lda 	#0
.2b10	6a		ror a				ror 	a 							; now $00 or $80
.2b11	85 0b		sta $0b				sta 	IFR0+IExp
.2b13	38		sec				sec 								; it's a reference
.2b14	60		rts				rts
.2b15					_VCNoCreate:
.2b15	4c cf 26	jmp $26cf		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2b18					IFInitialise:
.2b18	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2b1b	60		rts				rts
.2b1c					IFloatSubtract:
.2b1c	da		phx				phx
.2b1d	a2 08		ldx #$08			ldx 	#IFR0
.2b1f	20 36 31	jsr $3136			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2b22	fa		plx				plx
.2b23					IFloatAdd:
.2b23	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2b25	05 0b		ora $0b				ora 	IFR0+IExp
.2b27	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2b29	d0 4e		bne $2b79			bne 	_IFloatAddDecimals 			; floating point version.
.2b2b					_IFAddSubMantissa:
.2b2b	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2b2d	45 0b		eor $0b				eor 	IFR0+IExp
.2b2f	29 40		and #$40			and 	#IFSign
.2b31	d0 21		bne $2b54			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2b33	18		clc				clc 								; do the actual addition
.2b34	a5 08		lda $08				lda 	IFR0+IM0
.2b36	75 00		adc $00,x			adc 		IM0,x
.2b38	85 08		sta $08				sta 	IFR0+IM0
.2b3a	a5 09		lda $09				lda 	IFR0+IM1
.2b3c	75 01		adc $01,x			adc 		IM1,x
.2b3e	85 09		sta $09				sta 	IFR0+IM1
.2b40	a5 0a		lda $0a				lda 	IFR0+IM2
.2b42	75 02		adc $02,x			adc 		IM2,x
.2b44	85 0a		sta $0a				sta 	IFR0+IM2
.2b46	10 29		bpl $2b71			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2b48	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2b4a	20 5a 31	jsr $315a			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2b4d	20 84 31	jsr $3184			jsr 	IFloatIncExponent
.2b50	d0 1f		bne $2b71			bne 	_IFloatAddExit
.2b52	38		sec				sec 								; overflowed numerically.
.2b53	60		rts				rts
.2b54					_IFloatSubMantissa:
.2b54	38		sec				sec 								; do the subtraction R0-Rx
.2b55	a5 08		lda $08				lda 	IFR0+IM0
.2b57	f5 00		sbc $00,x			sbc 		IM0,x
.2b59	85 08		sta $08				sta 	IFR0+IM0
.2b5b	a5 09		lda $09				lda 	IFR0+IM1
.2b5d	f5 01		sbc $01,x			sbc 		IM1,x
.2b5f	85 09		sta $09				sta 	IFR0+IM1
.2b61	a5 0a		lda $0a				lda 	IFR0+IM2
.2b63	f5 02		sbc $02,x			sbc 		IM2,x
.2b65	85 0a		sta $0a				sta 	IFR0+IM2
.2b67	b0 08		bcs $2b71			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b69	a2 08		ldx #$08			ldx 	#IFR0
.2b6b	20 3e 31	jsr $313e			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b6e	20 36 31	jsr $3136			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b71					_IFloatAddExit:
.2b71	18		clc				clc
.2b72	60		rts				rts
.2b73					_IFloatZeroAdd:
.2b73	fa		plx				plx 								; return this value in R0
.2b74	20 bc 30	jsr $30bc			jsr 	IFloatCopyFromRegister
.2b77	18		clc				clc
.2b78	60		rts				rts
.2b79					_IFloatAddDecimals:
.2b79	20 24 31	jsr $3124			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b7c	f0 f3		beq $2b71			beq 	_IFloatAddExit
.2b7e	20 62 31	jsr $3162			jsr 	IFloatNormalise 			; normalise RX
.2b81	da		phx				phx 								; normalise R0
.2b82	a2 08		ldx #$08			ldx 	#IFR0
.2b84	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.2b87	f0 ea		beq $2b73			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b89	20 62 31	jsr $3162			jsr 	IFloatNormalise
.2b8c	fa		plx				plx
.2b8d	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b8f	29 3f		and #$3f			and 	#IFXMask
.2b91	38		sec				sec
.2b92	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b94	85 20		sta $20				sta 	iTemp0
.2b96	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b98	29 3f		and #$3f			and 	#IFXMask
.2b9a	38		sec				sec
.2b9b	e9 20		sbc #$20			sbc 	#$20
.2b9d	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b9f	b0 02		bcs $2ba3			bcs 	_IFloatHaveLarger
.2ba1	a5 20		lda $20				lda 	iTemp0
.2ba3					_IFloatHaveLarger:
.2ba3	18		clc				clc 								; get the actual one back.
.2ba4	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ba6	20 b3 2b	jsr $2bb3			jsr 	_IFShiftXToA
.2ba9	da		phx				phx
.2baa	a2 08		ldx #$08			ldx 	#IFR0
.2bac	20 b3 2b	jsr $2bb3			jsr 	_IFShiftXToA
.2baf	fa		plx				plx
.2bb0	4c 2b 2b	jmp $2b2b			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2bb3					_IFShiftXToA:
.2bb3	8d d6 06	sta $06d6			sta 	IFTarget
.2bb6	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; check adding zero ?
.2bb9	f0 11		beq $2bcc			beq 	_IFSXExit
.2bbb					_IFSXLoop:
.2bbb	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2bbd	29 3f		and #$3f			and 	#IFXMask
.2bbf	cd d6 06	cmp $06d6			cmp 	IFTarget
.2bc2	f0 08		beq $2bcc			beq 	_IFSXExit
.2bc4	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.2bc7	20 84 31	jsr $3184			jsr 	IFloatIncExponent
.2bca	80 ef		bra $2bbb			bra 	_IFSXLoop
.2bcc					_IFSXExit:
.2bcc	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2bcd					IFloatMultiply:
.2bcd	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2bd0	20 85 2c	jsr $2c85			jsr 	IFCalculateNewSign
.2bd3	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2bd5	05 0b		ora $0b				ora 	IFR0+IExp
.2bd7	29 3f		and #$3f			and 	#IFXMask
.2bd9	15 01		ora $01,x			ora 	IM1,x
.2bdb	05 09		ora $09				ora 	IFR0+IM1
.2bdd	15 02		ora $02,x			ora 	IM2,x
.2bdf	05 0a		ora $0a				ora 	IFR0+IM2
.2be1	d0 0a		bne $2bed			bne 	_IFMStandard
.2be3	20 07 31	jsr $3107			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2be6	ad d8 06	lda $06d8			lda 	IFNewSign
.2be9	85 0b		sta $0b				sta 	IFR0+IExp
.2beb	18		clc				clc
.2bec	60		rts				rts
.2bed					_IFMStandard:
.2bed	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2bef	20 7c 2c	jsr $2c7c			jsr 	IFMSignExtend
.2bf2	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bf5	a5 0b		lda $0b				lda 	IFR0+IExp
.2bf7	20 7c 2c	jsr $2c7c			jsr 	IFMSignExtend
.2bfa	18		clc				clc
.2bfb	6d d7 06	adc $06d7			adc 	IFNewExponent
.2bfe	8d d7 06	sta $06d7			sta 	IFNewExponent
.2c01	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2c03	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister
.2c06	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2c08	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2c0b					_IFMLoop:
.2c0b	a2 14		ldx #$14			ldx 	#IFRTemp
.2c0d	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.2c10	f0 3a		beq $2c4c			beq 	_IFMExit
.2c12	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2c15	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2c17	10 03		bpl $2c1c			bpl	 	_IFMTargetOkay
.2c19	20 6d 2c	jsr $2c6d			jsr 	_IFMShiftAll
.2c1c					_IFMTargetOkay:
.2c1c	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2c1e	29 01		and #$01			and 	#1
.2c20	f0 16		beq $2c38			beq 	_IFMNoAdd
.2c22	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2c25	18		clc				clc
.2c26	a5 08		lda $08				lda 	IFR0+IM0
.2c28	75 00		adc $00,x			adc 		IM0,x
.2c2a	85 08		sta $08				sta 	IFR0+IM0
.2c2c	a5 09		lda $09				lda 	IFR0+IM1
.2c2e	75 01		adc $01,x			adc 		IM1,x
.2c30	85 09		sta $09				sta 	IFR0+IM1
.2c32	a5 0a		lda $0a				lda 	IFR0+IM2
.2c34	75 02		adc $02,x			adc 		IM2,x
.2c36	85 0a		sta $0a				sta 	IFR0+IM2
.2c38					_IFMNoAdd:
.2c38	a5 0a		lda $0a				lda 	IFR0+IM2
.2c3a	10 03		bpl $2c3f			bpl 	_IFMResultOkay
.2c3c	20 6d 2c	jsr $2c6d			jsr 	_IFMShiftAll
.2c3f					_IFMResultOkay:
.2c3f	a2 14		ldx #$14			ldx 	#IFRTemp
.2c41	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.2c44	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c47	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.2c4a	80 bf		bra $2c0b			bra 	_IFMLoop
.2c4c					_IFMExit:
.2c4c	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2c4f	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2c51	90 0f		bcc $2c62			bcc 	_IFMOkay
.2c53	c9 e0		cmp #$e0			cmp 	#$E0
.2c55	b0 0b		bcs $2c62			bcs 	_IFMOkay
.2c57	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2c59	f0 10		beq $2c6b			beq 	_IFMError
.2c5b	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2c5d	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2c60	18		clc				clc
.2c61	60		rts				rts
.2c62					_IFMOkay:
.2c62	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c64	0d d8 06	ora $06d8			ora 	IFNewSign
.2c67	85 0b		sta $0b				sta 	IFR0+IExp
.2c69	18		clc				clc
.2c6a	60		rts				rts
.2c6b					_IFMError:
.2c6b	38		sec				sec
.2c6c	60		rts				rts
.2c6d					_IFMShiftAll:
.2c6d	a2 08		ldx #$08			ldx 	#IFR0
.2c6f	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.2c72	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c75	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.2c78	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c7b	60		rts				rts
.2c7c					IFMSignExtend:
.2c7c	29 3f		and #$3f			and 	#IFXMask
.2c7e	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c80	90 02		bcc $2c84			bcc 	_IFMNoSXX
.2c82	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c84					_IFMNoSXX:
.2c84	60		rts				rts
.2c85					IFCalculateNewSign:
.2c85	b5 03		lda $03,x			lda 	IExp,x
.2c87	45 0b		eor $0b				eor 	IFR0+IExp
.2c89	29 40		and #$40			and 	#IFSign
.2c8b	8d d8 06	sta $06d8			sta 	IFNewSign
.2c8e	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c8f					IFloatDivideInteger:
.2c8f	20 a8 2c	jsr $2ca8			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c92	b0 06		bcs $2c9a			bcs 	_IFDIExit
.2c94	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c96	20 bc 30	jsr $30bc			jsr 	IFloatCopyFromRegister
.2c99	18		clc				clc
.2c9a					_IFDIExit:
.2c9a	60		rts				rts
.2c9b					IFloatModulusInteger:
.2c9b	20 a8 2c	jsr $2ca8			jsr 	IFloatDivideIntegerCommon
.2c9e	b0 07		bcs $2ca7			bcs 	_IFMIExit
.2ca0	ae d6 06	ldx $06d6			ldx 	IFTarget
.2ca3	20 bc 30	jsr $30bc			jsr 	IFloatCopyFromRegister
.2ca6	18		clc				clc
.2ca7					_IFMIExit:
.2ca7	60		rts				rts
.2ca8					IFloatDivideIntegerCommon:
.2ca8	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2cab	20 85 2c	jsr $2c85			jsr 	IFCalculateNewSign 			; calculate sign of result
.2cae	20 d6 2c	jsr $2cd6			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2cb1	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2cb3	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.2cb6	f0 1c		beq $2cd4			beq 	_IFDIDivZero
.2cb8	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2cbb	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2cbe	5a		phy				phy
.2cbf	a0 18		ldy #$18			ldy 	#24
.2cc1					_IFDILoop:
.2cc1	20 e7 2c	jsr $2ce7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cc4	20 f3 2c	jsr $2cf3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cc7	88		dey				dey
.2cc8	d0 f7		bne $2cc1			bne 	_IFDILoop 					; do it 24 times
.2cca	7a		ply				ply
.2ccb	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2cce	29 40		and #$40			and 	#IFSign
.2cd0	85 17		sta $17				sta 	IFRTemp+IExp
.2cd2	18		clc				clc 								; is okay.
.2cd3	60		rts				rts
.2cd4					_IFDIDivZero:
.2cd4	38		sec				sec
.2cd5	60		rts				rts
.2cd6					IFDCopyRXToRTemp:
.2cd6	b5 00		lda $00,x			lda 	IM0,x
.2cd8	85 14		sta $14				sta 	IFRTemp+IM0
.2cda	b5 01		lda $01,x			lda 	IM1,x
.2cdc	85 15		sta $15				sta 	IFRTemp+IM1
.2cde	b5 02		lda $02,x			lda 	IM2,x
.2ce0	85 16		sta $16				sta 	IFRTemp+IM2
.2ce2	b5 03		lda $03,x			lda 	IExp,x
.2ce4	85 17		sta $17				sta 	IFRTemp+IExp
.2ce6	60		rts				rts
.2ce7					IFDShiftSTempS1Left:
.2ce7	a2 14		ldx #$14			ldx 	#IFRTemp
.2ce9	20 52 31	jsr $3152			jsr 	IFloatShiftLeft
.2cec	ae d6 06	ldx $06d6			ldx 	IFTarget
.2cef	20 53 31	jsr $3153			jsr 	IFloatRotateLeft
.2cf2	60		rts				rts
.2cf3					IFDTrySubtract:
.2cf3	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2cf6	38		sec				sec 								; subtract, saving the results on the stack.
.2cf7	b5 00		lda $00,x			lda 	IM0,x
.2cf9	e5 08		sbc $08				sbc 	IFR0+IM0
.2cfb	48		pha				pha
.2cfc	b5 01		lda $01,x			lda 	IM1,x
.2cfe	e5 09		sbc $09				sbc 	IFR0+IM1
.2d00	48		pha				pha
.2d01	b5 02		lda $02,x			lda 	IM2,x
.2d03	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2d05	b0 03		bcs $2d0a			bcs 	_IFDCanSubtract
.2d07	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2d08	68		pla				pla
.2d09	60		rts				rts
.2d0a					_IFDCanSubtract:
.2d0a	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2d0c	68		pla				pla
.2d0d	95 01		sta $01,x			sta 	IM1,x
.2d0f	68		pla				pla
.2d10	95 00		sta $00,x			sta 	IM0,x
.2d12	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2d14	d0 06		bne $2d1c			bne 	_IFDCSExit
.2d16	e6 15		inc $15				inc 	IFRTemp+IM1
.2d18	d0 02		bne $2d1c			bne 	_IFDCSExit
.2d1a	e6 16		inc $16				inc 	IFRTemp+IM2
.2d1c					_IFDCSExit:
.2d1c	60		rts				rts
.2d1d					IFloatBitwiseAnd:
.2d1d	5a		phy				phy
.2d1e	20 62 2d	jsr $2d62			jsr 	IFPreProcessBitwise 		; set up everything.
.2d21	d0 0f		bne $2d32			bne 	_IFBAExit
.2d23					_IFBALoop:
.2d23	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d26	35 00		and $00,x			and 	IM0,x
.2d28	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d2b	e8		inx				inx
.2d2c	c8		iny				iny
.2d2d	c0 03		cpy #$03			cpy 	#3
.2d2f	d0 f2		bne $2d23			bne 	_IFBALoop
.2d31	18		clc				clc
.2d32					_IFBAExit:
.2d32	7a		ply				ply
.2d33	60		rts				rts
.2d34					IFloatBitwiseOr:
.2d34	5a		phy				phy
.2d35	20 62 2d	jsr $2d62			jsr 	IFPreProcessBitwise 		; set up everything.
.2d38	d0 0f		bne $2d49			bne 	_IFBAExit
.2d3a					_IFBALoop:
.2d3a	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d3d	15 00		ora $00,x			ora 	IM0,x
.2d3f	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d42	e8		inx				inx
.2d43	c8		iny				iny
.2d44	c0 03		cpy #$03			cpy 	#3
.2d46	d0 f2		bne $2d3a			bne 	_IFBALoop
.2d48	18		clc				clc
.2d49					_IFBAExit:
.2d49	7a		ply				ply
.2d4a	60		rts				rts
.2d4b					IFloatBitwiseXor:
.2d4b	5a		phy				phy
.2d4c	20 62 2d	jsr $2d62			jsr 	IFPreProcessBitwise 		; set up everything.
.2d4f	d0 0f		bne $2d60			bne 	_IFBAExit
.2d51					_IFBALoop:
.2d51	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d54	55 00		eor $00,x			eor 	IM0,x
.2d56	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d59	e8		inx				inx
.2d5a	c8		iny				iny
.2d5b	c0 03		cpy #$03			cpy 	#3
.2d5d	d0 f2		bne $2d51			bne 	_IFBALoop
.2d5f	18		clc				clc
.2d60					_IFBAExit:
.2d60	7a		ply				ply
.2d61	60		rts				rts
.2d62					IFPreProcessBitwise:
.2d62	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d64	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d66	15 03		ora $03,x			ora 	IExp,x
.2d68	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d6a	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d6c	38		sec				sec 								; carry set just in cases.
.2d6d	60		rts				rts
.2d6e					IFloatAbsoluteR0:
.2d6e	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d70	29 bf		and #$bf			and 	#IFSign ^ 255
.2d72	85 0b		sta $0b				sta 	IFR0+IExp
.2d74	18		clc				clc
.2d75	60		rts				rts
.2d76					IFloatSquareRootR0:
.2d76	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d78	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.2d7b	f0 2e		beq $2dab			beq 	_IFSRZero
.2d7d	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d7f	29 40		and #$40			and 	#IFSign
.2d81	d0 2f		bne $2db2			bne 	_IFSRFail
.2d83	20 62 31	jsr $3162			jsr 	IFloatNormalise 			; it will work better !
.2d86	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d88	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister
.2d8b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d8d	20 7c 2c	jsr $2c7c			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d90	18		clc				clc
.2d91	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d93	85 0b		sta $0b				sta 	IFR0+IExp
.2d95	4a		lsr a				lsr 	a 							; which we can halve.
.2d96	38		sec				sec 								; convert back
.2d97	e9 17		sbc #$17			sbc 	#23
.2d99	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d9b	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d9d	20 b4 2d	jsr $2db4			jsr 	_IFSRNewton
.2da0	20 b4 2d	jsr $2db4			jsr 	_IFSRNewton
.2da3	20 b4 2d	jsr $2db4			jsr 	_IFSRNewton
.2da6	20 b4 2d	jsr $2db4			jsr 	_IFSRNewton
.2da9	18		clc				clc
.2daa	60		rts				rts
.2dab					_IFSRZero:
.2dab	a2 08		ldx #$08			ldx 	#IFR0
.2dad	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2db0	18		clc				clc
.2db1	60		rts				rts
.2db2					_IFSRFail:
.2db2	38		sec				sec
.2db3	60		rts				rts
.2db4					_IFSRNewton:
.2db4	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2db6	20 7a 30	jsr $307a			jsr 	IFloatPushRx
.2db9	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2dbb	20 7a 30	jsr $307a			jsr 	IFloatPushRx
.2dbe	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2dc0	20 4f 2e	jsr $2e4f			jsr 	IFloatDivideFloat
.2dc3	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2dc5	20 9b 30	jsr $309b			jsr 	IFloatPullRx
.2dc8	20 23 2b	jsr $2b23			jsr 	IFloatAdd 					; now guess + original/guess
.2dcb	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2dcd	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.2dd0	a2 0c		ldx #$0c			ldx 	#IFR1
.2dd2	20 9b 30	jsr $309b			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2dd5	60		rts				rts
.2dd6					IFloatFractionalR0:
.2dd6	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2dd8	29 3f		and #$3f			and 	#IFXMask
.2dda	f0 17		beq $2df3			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2ddc	20 6e 2d	jsr $2d6e			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2ddf	a2 08		ldx #$08			ldx 	#IFR0
.2de1	20 62 31	jsr $3162			jsr 	IFloatNormalise 			; normalise R0
.2de4	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2de6	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister
.2de9	20 2c 2e	jsr $2e2c			jsr 	IFloatIntegerR0 			; take integer part of R0
.2dec	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2dee	20 1c 2b	jsr $2b1c			jsr 	IFloatSubtract
.2df1	80 05		bra $2df8			bra 	_FIPExit
.2df3					_FIPZero:
.2df3	a2 08		ldx #$08			ldx 	#IFR0
.2df5	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2df8					_FIPExit:
.2df8	18		clc				clc
.2df9	60		rts				rts
.2dfa					IFloatCompare:
.2dfa	20 1c 2b	jsr $2b1c			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2dfd	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2dff	05 0b		ora $0b				ora 	IFR0+IExp
.2e01	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2e03	29 3f		and #$3f			and 	#IFXMask
.2e05	d0 19		bne $2e20			bne 	_IFCNonInteger
.2e07	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; check if zero
.2e0a	f0 0f		beq $2e1b			beq 	_IFCZero
.2e0c					_IFCReturnSign:
.2e0c	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2e0e	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2e10	48		pha				pha
.2e11	a9 01		lda #$01			lda 	#1
.2e13	20 2d 31	jsr $312d			jsr 	IFloatSetByte 				; return to +1
.2e16	68		pla				pla 								; sign bit back
.2e17	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2e19	18		clc				clc
.2e1a	60		rts				rts
.2e1b					_IFCZero:
.2e1b	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2e1e	18		clc				clc
.2e1f	60		rts				rts
.2e20					_IFCNonInteger:
.2e20	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2e22	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2e24	05 09		ora $09				ora 	IFR0+IM1
.2e26	05 0a		ora $0a				ora 	IFR0+IM2
.2e28	f0 f1		beq $2e1b			beq 	_IFCZero 					; near enough !
.2e2a	80 e0		bra $2e0c			bra 	_IFCReturnSign 				; return the sign of the difference.
.2e2c					IFloatIntegerR0:
.2e2c	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2e2e	29 3f		and #$3f			and 	#IFXMask
.2e30	f0 1b		beq $2e4d			beq 	_FIPExit 					; if so do nothing
.2e32	a2 08		ldx #$08			ldx 	#IFR0
.2e34	20 62 31	jsr $3162			jsr 	IFloatNormalise 			; normalise
.2e37	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; is it zero ?
.2e3a	f0 0e		beq $2e4a			beq 	_FIPZero 					; if so return zero.
.2e3c					_FIPShift:
.2e3c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2e3e	29 20		and #$20			and 	#$20 						; still -ve
.2e40	f0 0b		beq $2e4d			beq 	_FIPExit
.2e42	20 5a 31	jsr $315a			jsr 	IFloatShiftRight 			; shift mantissa right
.2e45	20 84 31	jsr $3184			jsr 	IFloatIncExponent 			; bump exponent
.2e48	80 f2		bra $2e3c			bra 	_FIPShift
.2e4a					_FIPZero:
.2e4a	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2e4d					_FIPExit:
.2e4d	18		clc				clc
.2e4e	60		rts				rts
.2e4f					IFloatDivideFloat:
.2e4f	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2e52	20 85 2c	jsr $2c85			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e55	20 62 31	jsr $3162			jsr 	IFloatNormalise 			; normalise RX
.2e58	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2e5a	20 62 31	jsr $3162			jsr 	IFloatNormalise
.2e5d	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.2e60	f0 56		beq $2eb8			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e62	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e64	20 7c 2c	jsr $2c7c			jsr 	IFMSignExtend
.2e67	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e6a	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e6d	b5 03		lda $03,x			lda 	IExp,x
.2e6f	20 7c 2c	jsr $2c7c			jsr 	IFMSignExtend
.2e72	38		sec				sec
.2e73	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e76	38		sec				sec
.2e77	e9 17		sbc #$17			sbc 	#23
.2e79	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e7c	20 ba 2e	jsr $2eba			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e7f	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e81	10 08		bpl $2e8b			bpl 	_IFDFNoShiftResult
.2e83	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e85	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.2e88	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e8b					_IFDFNoShiftResult:
.2e8b	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e8e	30 06		bmi $2e96			bmi 	_IFDFCheckUnderflow
.2e90	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e92	b0 24		bcs $2eb8			bcs 	_IFDFDivZero
.2e94	80 11		bra $2ea7			bra		_IFDFExit
.2e96					_IFDFCheckUnderflow:
.2e96	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e99	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e9b	b0 0a		bcs $2ea7			bcs 	_IFDFExit
.2e9d	ee d7 06	inc $06d7			inc 	IFNewExponent
.2ea0	a2 14		ldx #$14			ldx 	#IFRTemp
.2ea2	20 5a 31	jsr $315a			jsr 	IFloatShiftRight
.2ea5	80 ef		bra $2e96			bra 	_IFDFCheckUnderflow
.2ea7					_IFDFExit:
.2ea7	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2eaa	29 3f		and #$3f			and 	#IFXMask
.2eac	0d d8 06	ora $06d8			ora 	IFNewSign
.2eaf	85 17		sta $17				sta 	IFRTemp+IExp
.2eb1	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2eb3	20 bc 30	jsr $30bc			jsr 	IFloatCopyFromRegister
.2eb6	18		clc				clc
.2eb7	60		rts				rts
.2eb8					_IFDFDivZero:
.2eb8	38		sec				sec
.2eb9	60		rts				rts
.2eba					IFloatDivideSupport:
.2eba	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2ebc	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2ebf	5a		phy				phy 								; main division loop x 23
.2ec0	a0 17		ldy #$17			ldy 	#23
.2ec2					_IFDSLoop:
.2ec2	20 f3 2c	jsr $2cf3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ec5	20 e7 2c	jsr $2ce7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2ec8	88		dey				dey
.2ec9	d0 f7		bne $2ec2			bne 	_IFDSLoop 					; do it 24 times
.2ecb	7a		ply				ply
.2ecc	60		rts				rts
.2ecd					IFloatIntegerToStringR0:
.2ecd	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2ed0	20 ac 31	jsr $31ac			jsr 	IFloatBufferReset			; empty buffer
.2ed3	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2ed5	29 3f		and #$3f			and 	#IFXMask
.2ed7	d0 1d		bne $2ef6			bne 	_IFIFail
.2ed9	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2edb	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.2ede	f0 0e		beq $2eee			beq 	_IFINotNegative
.2ee0	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2ee2	29 40		and #$40			and 	#IFSign
.2ee4	f0 08		beq $2eee			beq 	_IFINotNegative
.2ee6	a9 2d		lda #$2d			lda 	#"-"						; output -
.2ee8	20 bb 31	jsr $31bb			jsr 	IFloatBufferWrite
.2eeb	20 36 31	jsr $3136			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2eee					_IFINotNegative:
.2eee	20 f8 2e	jsr $2ef8			jsr 	_IFIRecursiveConvert 		; start converting
.2ef1	20 b3 31	jsr $31b3			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2ef4	18		clc				clc
.2ef5	60		rts				rts
.2ef6					_IFIFail:
.2ef6	38		sec				sec
.2ef7	60		rts				rts
.2ef8					_IFIRecursiveConvert:
.2ef8	a2 0c		ldx #$0c			ldx 	#IFR1
.2efa	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister 		; R0->R1
.2efd	a2 08		ldx #$08			ldx 	#IFR0
.2eff	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2f02	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.2f05	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2f07	20 8f 2c	jsr $2c8f			jsr 	IFloatDivideInteger
.2f0a	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2f0c	20 24 31	jsr $3124			jsr 	IFloatCheckZero
.2f0f	f0 09		beq $2f1a			beq 	_IFIOutDigit
.2f11	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2f13	48		pha				pha
.2f14	20 f8 2e	jsr $2ef8			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2f17	68		pla				pla
.2f18	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2f1a					_IFIOutDigit:
.2f1a	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2f1c	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2f1e	90 02		bcc $2f22			bcc 	_IFINotHex
.2f20	69 06		adc #$06			adc 	#6
.2f22					_IFINotHex:
.2f22	69 30		adc #$30			adc 	#48
.2f24	20 bb 31	jsr $31bb			jsr 	IFloatBufferWrite 			; write character to buffer.
.2f27	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2f28					IFloatFloatToStringR0:
.2f28	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2f2a	20 7a 30	jsr $307a			jsr 	IFloatPushRx
.2f2d	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister
.2f30	20 2c 2e	jsr $2e2c			jsr 	IFloatIntegerR0				; make R0 integer
.2f33	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2f35	20 cd 2e	jsr $2ecd			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2f38	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2f3b	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2f3d	29 3f		and #$3f			and 	#IFXMask
.2f3f	f0 44		beq $2f85			beq 	_IFFSExit
.2f41					_IFloatFracLoop:
.2f41	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2f43	20 bc 30	jsr $30bc			jsr 	IFloatCopyFromRegister
.2f46	20 d6 2d	jsr $2dd6			jsr 	IFloatFractionalR0
.2f49	20 62 31	jsr $3162			jsr 	IFloatNormalise
.2f4c	a2 10		ldx #$10			ldx 	#IFR2
.2f4e	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister 		; copy to back R2
.2f51	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2f53	a9 0a		lda #$0a			lda 	#10
.2f55	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.2f58	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2f5a	20 cd 2b	jsr $2bcd			jsr 	IFloatMultiply
.2f5d	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2f5f	20 cd 30	jsr $30cd			jsr 	IFloatCopyToRegister
.2f62	20 2c 2e	jsr $2e2c			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f65	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f68	c9 03		cmp #$03			cmp 	#3
.2f6a	f0 16		beq $2f82			beq 	_IFFSExitStripZero
.2f6c	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f6f	d0 05		bne $2f76			bne 	_IFloatNotFirst
.2f71	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f73	20 bb 31	jsr $31bb			jsr 	IFloatBufferWrite
.2f76					_IFloatNotFirst:
.2f76	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f79	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f7b	09 30		ora #$30			ora 	#"0"						; ASCII
.2f7d	20 bb 31	jsr $31bb			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f80	80 bf		bra $2f41			bra 	_IFloatFracLoop
.2f82					_IFFSExitStripZero:
.2f82	20 ca 31	jsr $31ca			jsr 	IFloatStripTrailingZeros
.2f85					_IFFSExit:
.2f85	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f87	20 9b 30	jsr $309b			jsr 	IFloatPullRx
.2f8a	20 b3 31	jsr $31b3			jsr 	IFloatGetBufferAddress
.2f8d	18		clc				clc
.2f8e	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f8f					IFloatStringToFloatR0:
.2f8f	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f92	86 20		stx $20				stx 	iTemp0
.2f94	84 21		sty $21				sty 	iTemp0+1
.2f96	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f98	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2f9b	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f9e	20 2b 30	jsr $302b			jsr 	IFSTFGetNext 				; get first
.2fa1	f0 1b		beq $2fbe			beq 	_IFSTFFail 					; no character, fail.
.2fa3	90 10		bcc $2fb5			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2fa5	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2fa7	d0 15		bne $2fbe			bne 	_IFSTFFail
.2fa9	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2fab	8d dc 06	sta $06dc			sta 	IFSignFlag
.2fae					_IFSTFLoop:
.2fae	20 2b 30	jsr $302b			jsr 	IFSTFGetNext 				; get next character
.2fb1	b0 0b		bcs $2fbe			bcs 	_IFSTFFail 					; bad character.
.2fb3	f0 11		beq $2fc6			beq 	_IFSTFExit 					; end of data
.2fb5					_IFSTFHaveChar:
.2fb5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2fb7	f0 08		beq $2fc1			beq 	_IFSTFDecimal
.2fb9	20 4f 30	jsr $304f			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2fbc	80 f0		bra $2fae			bra 	_IFSTFLoop 					; keep going until . or end.
.2fbe					_IFSTFFail:
.2fbe	38		sec				sec
.2fbf	80 0d		bra $2fce			bra 	_IFSTFReturn
.2fc1					_IFSTFDecimal:
.2fc1	20 d6 2f	jsr $2fd6			jsr 	IFSTFDecimal 				; call the decimal places code.
.2fc4	b0 08		bcs $2fce			bcs 	_IFSTFReturn 				; error
.2fc6					_IFSTFExit:
.2fc6	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2fc8	0d dc 06	ora $06dc			ora 	IFSignFlag
.2fcb	85 0b		sta $0b				sta 	IFR0+IExp
.2fcd	18		clc				clc
.2fce					_IFSTFReturn:
.2fce	60		rts				rts
.2fcf					IFloatAddDecimalToR0:
.2fcf	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2fd2	86 20		stx $20				stx 	iTemp0
.2fd4	84 21		sty $21				sty 	iTemp0+1
.2fd6					IFSTFDecimal:
.2fd6	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2fd8	20 7a 30	jsr $307a			jsr 	IFloatPushRx
.2fdb	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2fdd	20 2b 31	jsr $312b			jsr 	IFloatSetZero
.2fe0	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2fe3					_IFSTDLoop:
.2fe3	20 2b 30	jsr $302b			jsr 	IFSTFGetNext 				; get next
.2fe6	b0 41		bcs $3029			bcs 	_IFSTFFail2 				; bad character.
.2fe8	f0 11		beq $2ffb			beq 	_IFSTFComplete 				; end of data, work out the result.
.2fea	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2fec	f0 39		beq $3027			beq 	_IFSTFExit2
.2fee	20 4f 30	jsr $304f			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2ff1	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2ff4	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2ff7	c9 03		cmp #$03			cmp 	#3
.2ff9	90 e8		bcc $2fe3			bcc 	_IFSTDLoop
.2ffb					_IFSTFComplete:
.2ffb	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2ffe	f0 27		beq $3027			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3000	3a		dec a				dec 	a 							; table indexed from 1.
.3001	0a		asl a				asl 	a
.3002	0a		asl a				asl 	a
.3003	aa		tax				tax
.3004	bd 66 30	lda $3066,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3007	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3009	bd 67 30	lda $3067,x			lda 	TableTen+1,x
.300c	85 0d		sta $0d				sta  	IFR1+IM1
.300e	bd 68 30	lda $3068,x			lda 	TableTen+2,x
.3011	85 0e		sta $0e				sta  	IFR1+IM2
.3013	bd 69 30	lda $3069,x			lda 	TableTen+3,x
.3016	85 0f		sta $0f				sta  	IFR1+IExp
.3018	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.301a	20 cd 2b	jsr $2bcd			jsr 	IFloatMultiply
.301d	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.301f	20 9b 30	jsr $309b			jsr 	IFloatPullRx
.3022	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3024	20 23 2b	jsr $2b23			jsr 	IFloatAdd
.3027					_IFSTFExit2:
.3027	18		clc				clc
.3028	60		rts				rts
.3029					_IFSTFFail2:
.3029	38		sec				sec
.302a	60		rts				rts
.302b					IFSTFGetNext:
.302b	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.302e	f0 19		beq $3049			beq 	_IFSTFReturnOk
.3030	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3032	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3034	d0 02		bne $3038			bne 	_IFSTFGNNoCarry
.3036	e6 21		inc $21				inc 	iTemp0+1
.3038					_IFSTFGNNoCarry:
.3038	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.303b	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.303d	f0 08		beq $3047			beq 	_IFSTFGOkay
.303f	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3041	90 08		bcc $304b			bcc 	_IFSTFGFail
.3043	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3045	b0 04		bcs $304b			bcs 	_IFSTFGFail
.3047					_IFSTFGOkay:
.3047	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3049					_IFSTFReturnOk:
.3049	18		clc				clc
.304a	60		rts				rts
.304b					_IFSTFGFail:
.304b	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.304d	38		sec				sec
.304e	60		rts				rts
.304f					IFSTFAddR0:
.304f	29 0f		and #$0f			and 	#15 						; to int value
.3051	48		pha				pha 								; save it.
.3052	a9 0a		lda #$0a			lda 	#10
.3054	a2 0c		ldx #$0c			ldx 	#IFR1
.3056	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.3059	20 cd 2b	jsr $2bcd			jsr 	IFloatMultiply
.305c	68		pla				pla
.305d	a2 0c		ldx #$0c			ldx 	#IFR1
.305f	20 2d 31	jsr $312d			jsr 	IFloatSetByte
.3062	20 23 2b	jsr $2b23			jsr 	IFloatAdd
.3065	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3066					TableTen:
>3066	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>306a	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>306e	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3072	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3076	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.307a					IFloatPushRx:
.307a	5a		phy				phy
.307b	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.307e	b5 00		lda $00,x			lda 	IM0,x
.3080	99 df 06	sta $06df,y			sta 	IFStack,y
.3083	b5 01		lda $01,x			lda 	IM1,x
.3085	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3088	b5 02		lda $02,x			lda 	IM2,x
.308a	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.308d	b5 03		lda $03,x			lda 	IExp,x
.308f	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.3092	c8		iny				iny
.3093	c8		iny				iny
.3094	c8		iny				iny
.3095	c8		iny				iny
.3096	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3099	7a		ply				ply
.309a	60		rts				rts
.309b					IFloatPullRx:
.309b	5a		phy				phy
.309c	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.309f	88		dey				dey
.30a0	88		dey				dey
.30a1	88		dey				dey
.30a2	88		dey				dey
.30a3	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.30a6	95 00		sta $00,x			sta 	IM0,x
.30a8	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.30ab	95 01		sta $01,x			sta 	IM1,x
.30ad	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.30b0	95 02		sta $02,x			sta 	IM2,x
.30b2	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.30b5	95 03		sta $03,x			sta 	IExp,x
.30b7	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.30ba	7a		ply				ply
.30bb	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.30bc					IFloatCopyFromRegister:
.30bc	b5 00		lda $00,x			lda 	0,x
.30be	85 08		sta $08				sta 	IFR0
.30c0	b5 01		lda $01,x			lda 	1,x
.30c2	85 09		sta $09				sta 	IFR0+1
.30c4	b5 02		lda $02,x			lda 	2,x
.30c6	85 0a		sta $0a				sta 	IFR0+2
.30c8	b5 03		lda $03,x			lda 	3,x
.30ca	85 0b		sta $0b				sta 	IFR0+3
.30cc	60		rts				rts
.30cd					IFloatCopyToRegister:
.30cd	a5 08		lda $08				lda 	IFR0
.30cf	95 00		sta $00,x			sta 	0,x
.30d1	a5 09		lda $09				lda 	IFR0+1
.30d3	95 01		sta $01,x			sta 	1,x
.30d5	a5 0a		lda $0a				lda 	IFR0+2
.30d7	95 02		sta $02,x			sta 	2,x
.30d9	a5 0b		lda $0b				lda 	IFR0+3
.30db	95 03		sta $03,x			sta 	3,x
.30dd	60		rts				rts
.30de					IFloatLoadInline:
.30de	68		pla				pla 								; pop address off to iTemp0
.30df	85 20		sta $20				sta 	iTemp0
.30e1	68		pla				pla
.30e2	85 21		sta $21				sta 	iTemp0+1
.30e4	a0 01		ldy #$01			ldy 	#1
.30e6	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.30e8	95 00		sta $00,x			sta 	0,x
.30ea	c8		iny				iny
.30eb	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.30ed	95 01		sta $01,x			sta 	1,x
.30ef	c8		iny				iny
.30f0	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.30f2	95 02		sta $02,x			sta 	2,x
.30f4	c8		iny				iny
.30f5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.30f7	95 03		sta $03,x			sta 	3,x
.30f9	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.30fa	a5 20		lda $20				lda 	iTemp0
.30fc	69 05		adc #$05			adc 	#5
.30fe	85 20		sta $20				sta 	iTemp0
.3100	90 02		bcc $3104			bcc 	_IFLINoCarry
.3102	e6 21		inc $21				inc 	iTemp0+1
.3104					_IFLINoCarry:
.3104	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3107					IFloatMultiply8BitRx:
.3107	5a		phy		        phy
.3108	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.310a	a4 08		ldy $08		        ldy     IFR0+IM0
.310c	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.310d	85 08		sta $08		        sta     IFR0+IM0
.310f	84 09		sty $09		        sty     IFR0+IM1
.3111	a9 00		lda #$00	        lda     #0
.3113	a0 08		ldy #$08	        ldy     #8
.3115					_IFMLoop:
.3115	90 03		bcc $311a	        bcc     _IFMNoAdd
.3117	18		clc		        clc
.3118	65 09		adc $09		        adc     IFR0+IM1
.311a					_IFMNoAdd:
.311a	6a		ror a		        ror     a
.311b	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.311d	88		dey		        dey
.311e	d0 f5		bne $3115	        bne     _IFMLoop
.3120	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3122	7a		ply		        ply
.3123	60		rts		        rts
.3124					IFloatCheckZero:
.3124	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3126	15 01		ora $01,x			ora 	IM1,x
.3128	15 02		ora $02,x			ora 	IM2,x
.312a	60		rts				rts
.312b					IFloatSetZero:
.312b	a9 00		lda #$00			lda 	#0
.312d					IFloatSetByte:
.312d	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.312f	74 01		stz $01,x			stz 	IM1,x
.3131	74 02		stz $02,x			stz 	IM2,x
.3133	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3135	60		rts				rts
.3136					IFloatNegate:
.3136	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3138	49 40		eor #$40			eor 	#IFSign
.313a	95 03		sta $03,x			sta 	IExp,x
.313c	18		clc				clc
.313d	60		rts				rts
.313e					IFloatMantissaNegate:
.313e	38		sec				sec 								; when you want a real 2's complement negative value.
.313f	a9 00		lda #$00			lda 	#0
.3141	f5 00		sbc $00,x			sbc 	IM0,x
.3143	95 00		sta $00,x			sta 	IM0,x
.3145	a9 00		lda #$00			lda 	#0
.3147	f5 01		sbc $01,x			sbc 	IM1,x
.3149	95 01		sta $01,x			sta 	IM1,x
.314b	a9 00		lda #$00			lda 	#0
.314d	f5 02		sbc $02,x			sbc 	IM2,x
.314f	95 02		sta $02,x			sta 	IM2,x
.3151	60		rts				rts
.3152					IFloatShiftLeft:
.3152	18		clc				clc
.3153					IFloatRotateLeft:
.3153	36 00		rol $00,x			rol 	IM0,x
.3155	36 01		rol $01,x			rol 	IM1,x
.3157	36 02		rol $02,x			rol 	IM2,x
.3159	60		rts				rts
.315a					IFloatShiftRight:
.315a	18		clc				clc
.315b					IFloatRotateRight:
.315b	76 02		ror $02,x			ror 	IM2,x
.315d	76 01		ror $01,x			ror 	IM1,x
.315f	76 00		ror $00,x			ror 	IM0,x
.3161	60		rts				rts
.3162					IFloatNormalise:
.3162	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; is it zero
.3165	f0 18		beq $317f			beq 	_IFNExitZero 				; if so exit
.3167					_IFNLoop:
.3167	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3169	29 c0		and #$c0			and 	#$C0
.316b	c9 40		cmp #$40			cmp 	#$40
.316d	f0 13		beq $3182			beq 	_IFNExitOkay 				; if so , then we are done.
.316f	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3171	29 3f		and #$3f			and 	#$3F
.3173	c9 20		cmp #$20			cmp 	#$20
.3175	f0 0b		beq $3182			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3177	20 98 31	jsr $3198			jsr 	IFloatDecExponent
.317a	20 52 31	jsr $3152			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.317d	80 e8		bra $3167			bra 	_IFNLoop
.317f					_IFNExitZero:
.317f	20 2b 31	jsr $312b			jsr 	IFloatSetZero 				; set the result to zero
.3182					_IFNExitOkay:
.3182	18		clc				clc  								; return with CC.
.3183	60		rts				rts
.3184					IFloatIncExponent:
.3184	b5 03		lda $03,x			lda 	IExp,x
.3186	48		pha				pha
.3187	29 c0		and #$c0			and 	#$C0
.3189	8d 1f 07	sta $071f			sta 	IFXTemp
.318c	68		pla				pla
.318d	1a		inc a				inc 	a
.318e	29 3f		and #$3f			and 	#$3F
.3190	48		pha				pha
.3191	0d 1f 07	ora $071f			ora 	IFXTemp
.3194	95 03		sta $03,x			sta 	IExp,x
.3196	68		pla				pla
.3197	60		rts				rts
.3198					IFloatDecExponent:
.3198	b5 03		lda $03,x			lda 	IExp,x
.319a	48		pha				pha
.319b	29 c0		and #$c0			and 	#$C0
.319d	8d 1f 07	sta $071f			sta 	IFXTemp
.31a0	68		pla				pla
.31a1	3a		dec a				dec 	a
.31a2	29 3f		and #$3f			and 	#$3F
.31a4	48		pha				pha
.31a5	0d 1f 07	ora $071f			ora 	IFXTemp
.31a8	95 03		sta $03,x			sta 	IExp,x
.31aa	68		pla				pla
.31ab	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.31ac					IFloatBufferReset:
.31ac	9c 20 07	stz $0720			stz 	IFBufferCount
.31af	9c 21 07	stz $0721			stz 	IFBuffer
.31b2	60		rts				rts
.31b3					IFloatGetBufferAddress:
.31b3	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.31b5	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.31b7	ad 20 07	lda $0720			lda 	IFBufferCount
.31ba	60		rts				rts
.31bb					IFloatBufferWrite:
.31bb	da		phx				phx
.31bc	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31bf	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.31c2	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.31c5	ee 20 07	inc $0720			inc 	IFBufferCount
.31c8	fa		plx				plx
.31c9	60		rts				rts
.31ca					IFloatStripTrailingZeros:
.31ca	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31cd	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.31d0	c9 30		cmp #$30			cmp		#"0"
.31d2	d0 0f		bne $31e3			bne 	_IFSTExit
.31d4	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.31d7	c9 2e		cmp #$2e			cmp 	#"."
.31d9	f0 08		beq $31e3			beq 	_IFSTExit
.31db	ce 20 07	dec $0720			dec 	IFBufferCount
.31de	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.31e1	80 e7		bra $31ca			bra 	IFloatStripTrailingZeros
.31e3					_IFSTExit:
.31e3	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.31e4					IFloatCheckRange:
.31e4	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.31e6	09 40		ora #$40			ora 	#IFSign
.31e8	85 0b		sta $0b				sta 	IFR0+IExp
.31ea	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.31ec	20 23 2b	jsr $2b23			jsr 	IFloatAdd 					; add allowed to error.
.31ef	a2 08		ldx #$08			ldx 	#IFR0
.31f1	20 24 31	jsr $3124			jsr 	IFloatCheckZero 			; error if < 0
.31f4	f0 06		beq $31fc			beq 	_IFAOkay
.31f6	a5 0b		lda $0b				lda 	IFR0+IExp
.31f8	29 40		and #$40			and 	#IFSign
.31fa	d0 01		bne $31fd			bne 	_IFAFail
.31fc					_IFAOkay:
.31fc	60		rts				rts
.31fd					_IFAFail:
.31fd	38		sec				sec
.31fe	68		pla				pla 								; get address - 2
.31ff	e9 02		sbc #$02			sbc 	#2
.3201	aa		tax				tax
.3202	68		pla				pla
.3203	e9 00		sbc #$00			sbc 	#0
.3205	a8		tay				tay
.3206	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3208					_IFAStop:
>3208	db						.byte 	$DB 						; display an error AA ADR ADR
.3209	80 fd		bra $3208			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
