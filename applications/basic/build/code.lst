
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Tue Jun  6 04:24:42 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSRKOriginal:
>0237							.fill 	1
=192					OSTextBufferSize = 192
.0238					OSXEdit:
>0238							.fill 	1
.0239					OSYEdit:
>0239							.fill 	1
.023a					OSEditWidth:
>023a							.fill 	1
.023b					OSEditPos:
>023b							.fill 	1
.023c					OSEditScroll:
>023c							.fill 	1
.023d					OSEditLength:
>023d							.fill 	1
.023e					OSEditBuffer:
>023e							.fill 	OSTextBufferSize+1
>02ff							.fill 	32
>031f							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd9					OSEditLine               = $ffd9 ; Edit line, return completion in A, line in YX
=$ffdc					OSEditNewLine            = $ffdc ; Edit line, start clear.
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSWriteStringZ           = $ffe2 ; Write ASCIIZ string YX to screen
=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 de 1c	jsr $1cde			jsr 	PGMSetBaseAddress
.1007	20 bf 27	jsr $27bf			jsr 	IFInitialise 				; setup math library
.100a	4c 8e 12	jmp $128e			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber
.1010	a2 0e		ldx #$0e			ldx 	#IFR0
.1012	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c ff 22	jmp $22ff		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 f1 1c	jsr $1cf1			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 26		stz $26				stz 	freeMemory 					; start on next free page
.1020	a5 21		lda $21				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 27		sta $27				sta 	freeMemory+1
.1025	20 5e 27	jsr $275e			jsr 	VARClearHashTables
.1028	ad 10 05	lda $0510			lda 	PGMEndMemoryHigh
.102b	20 ab 24	jsr $24ab			jsr 	StackReset
.102e	20 0a 25	jsr $250a			jsr 	StringSystemInitialise
.1031	20 16 22	jsr $2216			jsr 	ScanProcedures
.1034	60		rts				rts
.1035					AllocateMemory:
.1035	5a		phy				phy 								; save Y
.1036	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.1038	5a		phy				phy
.1039	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.103b	5a		phy				phy
.103c	a8		tay				tay 								; count is now in XY
.103d					_AllocateLoop:
.103d	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103f	d0 04		bne $1045			bne 	_AllocateOne
.1041	c0 00		cpy #$00			cpy 	#0
.1043	f0 15		beq $105a			beq 	_AllocateExit
.1045					_AllocateOne:
.1045	a9 00		lda #$00			lda 	#0 							; zero byte
.1047	92 26		sta ($26)			sta 	(freeMemory)
.1049	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.104b	d0 05		bne $1052			bne 	_AllocateSkipCarry
.104d	e6 27		inc $27				inc 	freeMemory+1
.104f	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.1052					_AllocateSkipCarry:
.1052	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1054	d0 01		bne $1057			bne 	_AllocateSkipBorrow
.1056	ca		dex				dex
.1057					_AllocateSkipBorrow:
.1057	88		dey				dey
.1058	80 e3		bra $103d			bra 	_AllocateLoop
.105a					_AllocateExit:
.105a	fa		plx				plx 								; restore address
.105b	68		pla				pla
.105c	7a		ply				ply 								; restore Y
.105d	60		rts				rts
.105e					ClearCheckMemory:
.105e	a5 27		lda $27				lda 	freeMemory+1
.1060	1a		inc a				inc 	a
.1061	1a		inc a				inc 	a
.1062	cd 18 06	cmp $0618			cmp 	stringMemory+1
.1065	b0 01		bcs $1068			bcs  	_CCMError
.1067	60		rts				rts
.1068					_CCMError:
.1068	4c 99 23	jmp $2399		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.106b					CommandDIM:
.106b	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.106d	29 c0		and #$c0			and 	#$C0
.106f	c9 40		cmp #$40			cmp 	#$40
.1071	d0 39		bne $10ac			bne 	_CDSyntax
.1073	20 15 27	jsr $2715			jsr 	VARGetInfo 					; get information
.1076	ad 20 06	lda $0620			lda 	VARType 					; check array.
.1079	29 02		and #$02			and 	#2
.107b	f0 2f		beq $10ac			beq 	_CDSyntax
.107d	20 c7 26	jsr $26c7			jsr 	VARFind 					; does it already exist
.1080	b0 2d		bcs $10af			bcs 	_CDExists
.1082	20 73 26	jsr $2673			jsr 	VARCreate 					; create it - returns data ptr in XA
.1085	da		phx				phx 								; save target address
.1086	48		pha				pha
.1087	ad 20 06	lda $0620			lda 	VARType 					; type ID.
.108a	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.108c	20 b2 10	jsr $10b2			jsr 	CreateArray 				; create array to XA
.108f	84 22		sty $22				sty 	zTemp1 						; save Y
.1091	7a		ply				ply 								; restore target to zTemp0
.1092	84 20		sty $20				sty 	zTemp0
.1094	7a		ply				ply
.1095	84 21		sty $21				sty 	zTemp0+1
.1097	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.1099	a0 01		ldy #$01			ldy 	#1
.109b	8a		txa				txa
.109c	91 20		sta ($20),y			sta 	(zTemp0),y
.109e	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.10a0	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 				; check )
.10a3	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a5	c8		iny				iny
.10a6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a8	f0 c1		beq $106b			beq 	CommandDIM
.10aa	88		dey				dey
.10ab	60		rts				rts
.10ac					_CDSyntax:
.10ac	4c a9 22	jmp $22a9		jmp	ErrorV_syntax
.10af					_CDExists:
.10af	4c 71 23	jmp $2371		jmp	ErrorV_redefine
.10b2					CreateArray:
.10b2	8d 03 05	sta $0503			sta 	CAType						; save type
.10b5	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10ba	c9 99		cmp #$99			cmp 	#PR_COMMA
.10bc	f0 04		beq $10c2			beq 	_CATwoDimensions
.10be	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c1	60		rts				rts
.10c2					_CATwoDimensions:
.10c2	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c4	8d 05 05	sta $0505			sta 	CADim1+1
.10c7	a5 0e		lda $0e				lda 	IFR0+IM0
.10c9	8d 04 05	sta $0504			sta 	CADim1+0
.10cc	20 44 24	jsr $2444			jsr 	ERRCheckComma 				; check comma
.10cf	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10d2	5a		phy				phy 								; save Y position
.10d3	18		clc				clc 								; allocate the outer array of pointers.
.10d4	ae 05 05	ldx $0505			ldx 	CADim1+1
.10d7	ad 04 05	lda $0504			lda 	CADim1
.10da	20 4d 11	jsr $114d			jsr 	CSAAllocate 				; allocate the outer array
.10dd	da		phx				phx									; save this address on the stack
.10de	48		pha				pha
.10df	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.10e1	85 24		sta $24				sta 	zTemp2
.10e3					_CACreateSubLoop:
.10e3	38		sec				sec
.10e4	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create data array of required size.
.10e7	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e9	91 24		sta ($24),y			sta 	(zTemp2),y
.10eb	8a		txa				txa
.10ec	c8		iny				iny
.10ed	91 24		sta ($24),y			sta 	(zTemp2),y
.10ef	18		clc				clc  								; next slot.
.10f0	a5 24		lda $24				lda 	zTemp2
.10f2	69 02		adc #$02			adc 	#2
.10f4	85 24		sta $24				sta 	zTemp2
.10f6	90 02		bcc $10fa			bcc 	_CACNoCarry
.10f8	e6 25		inc $25				inc 	zTemp2+1
.10fa					_CACNoCarry:
.10fa	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.10fd	d0 03		bne $1102			bne 	_CACNoBorrow
.10ff	ce 05 05	dec $0505			dec 	CADim1+1
.1102					_CACNoBorrow:
.1102	ce 04 05	dec $0504			dec 	CADim1
.1105	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1108	10 d9		bpl $10e3			bpl 	_CACreateSubLoop
.110a	68		pla				pla
.110b	fa		plx				plx
.110c	7a		ply				ply
.110d	60		rts				rts
.110e					CreateSingleArray:
.110e	5a		phy				phy
.110f	38		sec				sec 								; allocate memory block all zeros.
.1110	a5 0e		lda $0e				lda 	IFR0+IM0
.1112	a6 0f		ldx $0f				ldx 	IFR0+IM1
.1114	20 4d 11	jsr $114d			jsr 	CSAAllocate
.1117	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.111a	f0 2f		beq $114b			beq 	_CSANoInit
.111c	da		phx				phx 								; save address of new array
.111d	48		pha				pha
.111e	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.1120	86 21		stx $21				stx 	zTemp0+1
.1122	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1124	b1 20		lda ($20),y			lda 	(zTemp0),y
.1126	a8		tay				tay
.1127	b2 20		lda ($20)			lda 	(zTemp0)
.1129	aa		tax				tax
.112a					_CSAEraseString:
.112a	5a		phy				phy
.112b	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112d	a9 80		lda #$80			lda 	#$80
.112f	91 20		sta ($20),y			sta 	(zTemp0),y
.1131	7a		ply				ply
.1132	18		clc				clc 								; add 4 to next slot.
.1133	a5 20		lda $20				lda 	zTemp0
.1135	69 04		adc #$04			adc 	#4
.1137	85 20		sta $20				sta 	zTemp0
.1139	90 02		bcc $113d			bcc 	_CSAENoCarry
.113b	e6 21		inc $21				inc 	zTemp0+1
.113d					_CSAENoCarry:
.113d	e0 00		cpx #$00			cpx 	#0
.113f	d0 01		bne $1142			bne 	_CSANoBorrow
.1141	88		dey				dey
.1142					_CSANoBorrow:
.1142	ca		dex				dex
.1143	d0 e5		bne $112a			bne 	_CSAEraseString
.1145	c0 00		cpy #$00			cpy 	#0
.1147	d0 e1		bne $112a			bne 	_CSAEraseString
.1149	68		pla				pla
.114a	fa		plx				plx
.114b					_CSANoInit:
.114b	7a		ply				ply
.114c	60		rts				rts
.114d					CSAAllocate:
.114d	08		php				php 								; save type flag.
.114e	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114f	d0 01		bne $1152			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1151	e8		inx				inx
.1152					_CSAANoCarry:
.1152	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1154	b0 2e		bcs $1184			bcs 	_CSARange
.1156	28		plp				plp 								; restore type flag
.1157	08		php				php 								; save it back again.
.1158	da		phx				phx 								; save size.
.1159	48		pha				pha
.115a	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.115c	90 03		bcc $1161			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115e	0a		asl a				asl 	a
.115f	26 21		rol $21				rol 	zTemp0+1
.1161					_CSAATimes2:
.1161	0a		asl a				asl 	a
.1162	26 21		rol $21				rol 	zTemp0+1
.1164	18		clc				clc
.1165	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1167	90 02		bcc $116b			bcc 	_CSAANoCarry2
.1169	e6 21		inc $21				inc 	zTemp0+1
.116b					_CSAANoCarry2:
.116b	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.116d	20 35 10	jsr $1035			jsr 	AllocateMemory 				; allocate memory to XA
.1170	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.1172	85 20		sta $20				sta 	zTemp0
.1174	68		pla				pla  								; write element count to first 2 bytes
.1175	92 20		sta ($20)			sta 	(zTemp0)
.1177	68		pla				pla 								; msb of element count
.1178	28		plp				plp 								; CC if pointer array
.1179	b0 02		bcs $117d			bcs 	_CSAAIsData
.117b	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117d					_CSAAIsData:
.117d	a0 01		ldy #$01			ldy 	#1
.117f	91 20		sta ($20),y			sta 	(zTemp0),y
.1181	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.1183	60		rts				rts
.1184					_CSARange:
.1184	4c ba 22	jmp $22ba		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1187					Command_Doke:
.1187	38		sec				sec
.1188	80 01		bra $118b			bra 	DPCommon
.118a					Command_Poke:
.118a	18		clc				clc
.118b					DPCommon:
.118b	08		php				php 								; CS if DOKE
.118c	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16 			; address
.118f	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.1191	48		pha				pha
.1192	a5 0f		lda $0f				lda 	IFR0+IM1
.1194	48		pha				pha
.1195	20 44 24	jsr $2444			jsr 	ERRCheckComma 				; [dp]oke address,data
.1198	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16
.119b	68		pla				pla 								; get address back
.119c	85 21		sta $21				sta 	zTemp0+1
.119e	68		pla				pla
.119f	85 20		sta $20				sta 	zTemp0
.11a1	a5 0e		lda $0e				lda 	IFR0+IM0
.11a3	92 20		sta ($20)			sta 	(zTemp0)
.11a5	28		plp				plp
.11a6	90 08		bcc $11b0			bcc 	_DPExit
.11a8	5a		phy				phy
.11a9	a5 0f		lda $0f				lda 	IFR0+IM1
.11ab	a0 01		ldy #$01			ldy 	#1
.11ad	91 20		sta ($20),y			sta 	(zTemp0),y
.11af	7a		ply				ply
.11b0					_DPExit:
.11b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b1					Command_Print:
.11b1					Command_IP_Main:
.11b1	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11b2					_CPLoop:
.11b2	08		php				php 								; save last action flag
.11b3	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.11b5	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11b7	f0 3e		beq $11f7			beq 	_CPExit 					; without consuming
.11b9	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11bb	f0 3a		beq $11f7			beq 	_CPExit
.11bd	68		pla				pla 								; throw last action flag
.11be	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.11c0	c8		iny				iny
.11c1	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11c3	f0 2f		beq $11f4			beq 	_CPContinueWithSameLine
.11c5	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11c7	f0 26		beq $11ef			beq 	_CPTab
.11c9	88		dey				dey 								; undo the get.
.11ca	20 98 14	jsr $1498			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11cd	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.11cf	10 14		bpl $11e5			bpl 	_CPNumber
.11d1	5a		phy				phy
.11d2	18		clc				clc 								; string address to YX
.11d3	a5 0e		lda $0e				lda 	IFR0+IM0
.11d5	aa		tax				tax
.11d6	a5 0f		lda $0f				lda 	IFR0+IM1
.11d8	a8		tay				tay
.11d9	e8		inx				inx 								; point to 1st character
.11da	d0 01		bne $11dd			bne 	_CPNoCarry
.11dc	c8		iny				iny
.11dd					_CPNoCarry:
.11dd	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.11df	20 00 12	jsr $1200			jsr 	CPPrintAYX 					; print AYX
.11e2	7a		ply				ply
.11e3	80 cc		bra $11b1			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11e5					_CPNumber:
.11e5	5a		phy				phy
.11e6	20 d1 2b	jsr $2bd1			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11e9	20 00 12	jsr $1200			jsr 	CPPrintAYX 					; print AYX
.11ec	7a		ply				ply
.11ed	80 c2		bra $11b1			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11ef					_CPTab:
.11ef	a9 09		lda #$09			lda 	#9 							; print TAB
.11f1	20 13 12	jsr $1213			jsr 	CPPrintA
.11f4					_CPContinueWithSameLine:
.11f4	38		sec				sec 								; loop round with carry set, which
.11f5	80 bb		bra $11b2			bra 	_CPLoop 					; will inhibit final CR
.11f7					_CPExit:
.11f7	28		plp				plp 								; get last action flag
.11f8	b0 05		bcs $11ff			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11fa	a9 0d		lda #$0d			lda 	#13 						; print new line
.11fc	20 13 12	jsr $1213			jsr 	CPPrintA
.11ff					_CPExit2:
.11ff	60		rts				rts
.1200					CPPrintAYX:
.1200	86 20		stx $20				stx 	zTemp0
.1202	84 21		sty $21				sty 	zTemp0+1
.1204	aa		tax				tax
.1205	f0 0b		beq $1212			beq 	_CPPrintExit
.1207	a0 00		ldy #$00			ldy 	#0
.1209					_CPPrintAYXLoop:
.1209	b1 20		lda ($20),y			lda 	(zTemp0),y
.120b	20 13 12	jsr $1213			jsr 	CPPrintA
.120e	c8		iny				iny
.120f	ca		dex				dex
.1210	d0 f7		bne $1209			bne 	_CPPrintAYXLoop
.1212					_CPPrintExit:
.1212	60		rts				rts
.1213					CPPrintA:
.1213	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1216					CommandLET:
.1216	20 60 15	jsr $1560			jsr 	EXPTermR0 					; get term
.1219	90 6d		bcc $1288			bcc 	_CLError 					; must be a reference term.
.121b	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.121d	48		pha				pha
.121e	a5 0f		lda $0f				lda 	IFR0+IM1
.1220	48		pha				pha
.1221	a5 11		lda $11				lda 	IFR0+IExp
.1223	48		pha				pha
.1224	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1226	20 4c 24	jsr $244c			jsr 	ERRCheckA
.1229	20 98 14	jsr $1498			jsr 	EXPEvaluateExpression 		; right hand side.
.122c	68		pla				pla 								; type of l-expr
.122d	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.122f	30 5a		bmi $128b			bmi 	_CLType
.1231	fa		plx				plx 	 							; pop target address to zTemp0
.1232	86 21		stx $21				stx 	zTemp0+1
.1234	fa		plx				plx
.1235	86 20		stx $20				stx 	zTemp0
.1237	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.1239	30 15		bmi $1250			bmi 	_CLStringAssign
.123b	5a		phy				phy
.123c	a0 03		ldy #$03			ldy 	#3
.123e	91 20		sta ($20),y			sta 	(zTemp0),y
.1240	88		dey				dey
.1241	a5 10		lda $10				lda 	IFR0+IM2
.1243	91 20		sta ($20),y			sta 	(zTemp0),y
.1245	88		dey				dey
.1246	a5 0f		lda $0f				lda 	IFR0+IM1
.1248	91 20		sta ($20),y			sta 	(zTemp0),y
.124a	a5 0e		lda $0e				lda 	IFR0+IM0
.124c	92 20		sta ($20)			sta 	(zTemp0)
.124e	7a		ply				ply
.124f	60		rts				rts
.1250					_CLStringAssign:
.1250	5a		phy				phy
.1251	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1253	b1 20		lda ($20),y			lda 	(zTemp0),y
.1255	12 20		ora ($20)			ora 	(zTemp0)
.1257	f0 23		beq $127c			beq 	_CLConcreteString
.1259	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.125b	85 22		sta $22				sta 	zTemp1
.125d	b1 20		lda ($20),y			lda 	(zTemp0),y
.125f	85 23		sta $23				sta 	zTemp1+1
.1261	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.1263	38		sec				sec 								; we want 3 for slot size, status, string size.
.1264	e9 03		sbc #$03			sbc 	#3
.1266	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.1268	90 12		bcc $127c			bcc 	_CLConcreteString 			; if so, concrete the string again.
.126a	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.126c	1a		inc a				inc 	a
.126d	aa		tax				tax
.126e	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1270					_CLReplaceString:
.1270	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.1272	c8		iny				iny
.1273	c8		iny				iny
.1274	91 22		sta ($22),y			sta 	(zTemp1),y
.1276	88		dey				dey
.1277	ca		dex				dex
.1278	d0 f6		bne $1270			bne 	_CLReplaceString
.127a	80 0a		bra $1286			bra 	_CLExit
.127c					_CLConcreteString:
.127c	20 bf 24	jsr $24bf			jsr 	StringConcrete  			; concreted string in XA.
.127f	a0 01		ldy #$01			ldy 	#1 							; store the address
.1281	92 20		sta ($20)			sta 	(zTemp0)
.1283	8a		txa				txa
.1284	91 20		sta ($20),y			sta 	(zTemp0),y
.1286					_CLExit:
.1286	7a		ply				ply
.1287	60		rts				rts
.1288					_CLError:
.1288	4c dc 23	jmp $23dc		jmp	ErrorV_variable
.128b					_CLType:
.128b	4c d9 22	jmp $22d9		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.128e					Command_NEW:
.128e	20 e5 1c	jsr $1ce5			jsr 	PGMNewProgram
.1291	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1294	4c fd 12	jmp $12fd			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1297					Command_REM:
.1297					Command_REM2:
.1297	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.1299	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.129b	d0 06		bne $12a3			bne 	_CRExit
.129d	c8		iny				iny 								; skip over it, it's a comment.
.129e	98		tya				tya
.129f	38		sec				sec
.12a0	71 1e		adc ($1e),y			adc 	(codePtr),y
.12a2	a8		tay				tay
.12a3					_CRExit:
.12a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.12a4					Command_RUN:
.12a4	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.12a7	ad 0f 05	lda $050f			lda 	PGMBaseHigh 				; back to the program start
.12aa	85 1f		sta $1f				sta 	codePtr+1
.12ac	64 1e		stz $1e				stz 	codePtr
.12ae	80 0b		bra $12bb			bra 	RUNNewLine
.12b0					RUNEndOfLine:
.12b0	18		clc				clc 								; advance to next line.
.12b1	b2 1e		lda ($1e)			lda 	(codePtr)
.12b3	65 1e		adc $1e				adc 	codePtr
.12b5	85 1e		sta $1e				sta 	codePtr
.12b7	90 02		bcc $12bb			bcc 	_RELNoCarry
.12b9	e6 1f		inc $1f				inc 	codePtr+1
.12bb					_RELNoCarry:
.12bb					RUNNewLine:
.12bb	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.12bd	9a		txs				txs
.12be	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.12c0	f0 3b		beq $12fd			beq 	Command_END
.12c2	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.12c4	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12c6	8d 1b 06	sta $061b			sta 	ERRLine
.12c9	c8		iny				iny
.12ca	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12cc	8d 1c 06	sta $061c			sta 	ERRLine+1
.12cf	c8		iny				iny 								; offset into codePtr for start of line.
.12d0					RUNNewCommand:
.12d0	9c 16 06	stz $0616			stz 	stringInitialised 			; reset string system.
.12d3	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.12d5	10 1a		bpl $12f1			bpl		_RUNNotToken 				; probably an identifier
.12d7	c8		iny				iny 								; consume token
.12d8	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.12da	f0 f4		beq $12d0			beq 	RUNNewCommand
.12dc	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.12de	b0 0e		bcs $12ee			bcs 	_RUNSyntax
.12e0	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.12e2	90 0a		bcc $12ee			bcc 	_RUNSyntax
.12e4	0a		asl a				asl 	a 							; double into X.
.12e5	aa		tax				tax
.12e6	20 eb 12	jsr $12eb			jsr 	_RUNDispatchMain			; call the main dispatcher
.12e9	80 e5		bra $12d0			bra 	RUNNewCommand
.12eb					_RUNDispatchMain:
.12eb	7c fb 19	jmp ($19fb,x)			jmp 	(VectorTable,x)
.12ee					_RUNSyntax:
.12ee	4c a9 22	jmp $22a9		jmp	ErrorV_syntax
.12f1					_RUNNotToken:
.12f1	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12f3	90 f9		bcc $12ee			bcc 	_RUNSyntax
.12f5	20 16 12	jsr $1216			jsr 	CommandLET 					; assignment
.12f8	80 d6		bra $12d0			bra 	RUNNewCommand 				; loop round.
.12fa					Command_Shift_Handler:
.12fa	4c eb 22	jmp $22eb		jmp	ErrorV_unimplemented
.12fd					Command_END:
.12fd	4c ac 25	jmp $25ac			jmp 	WarmStart

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1300					Command_STOP:
.1300	4c 4d 23	jmp $234d		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1303					Command_Sys:
.1303	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16 			; execution address
.1306	5a		phy				phy
.1307	ad 63 06	lda $0663			lda 	('A'-'A')*4 + FastVariables ; load AXY
.130a	ae bf 06	ldx $06bf			ldx 	('X'-'A')*4 + FastVariables
.130d	ac c3 06	ldy $06c3			ldy 	('Y'-'A')*4 + FastVariables
.1310	20 15 13	jsr $1315			jsr 	_CSCallIFR0 				; call the code
.1313	7a		ply				ply
.1314	60		rts				rts
.1315					_CSCallIFR0:
.1315	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1318					NoExec01:
.1318					NoExec02:
.1318					NoExec03:
.1318					NoExec04:
.1318					NoExec05:
.1318					NoExec06:
.1318					NoExec07:
.1318					NoExec08:
.1318	4c a9 22	jmp $22a9		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.131b					EXPBinAdd:
.131b	24 11		bit $11				bit 	IFR0+IExp
.131d	30 6f		bmi $138e			bmi 	EXPConcatenate
.131f	a2 12		ldx #$12			ldx 	#IFR1
.1321	4c ca 27	jmp $27ca			jmp 	IFloatAdd
.1324					EXPBinSub:
.1324	24 11		bit $11				bit 	IFR0+IExp
.1326	30 3f		bmi $1367			bmi 	EXPTypeError
.1328	a2 12		ldx #$12			ldx 	#IFR1
.132a	4c c3 27	jmp $27c3			jmp 	IFloatSubtract
.132d					EXPBinMul:
.132d	24 11		bit $11				bit 	IFR0+IExp
.132f	30 36		bmi $1367			bmi 	EXPTypeError
.1331	a2 12		ldx #$12			ldx 	#IFR1
.1333	4c 74 28	jmp $2874			jmp 	IFloatMultiply
.1336					EXPBinFDiv:
.1336	24 11		bit $11				bit 	IFR0+IExp
.1338	30 2d		bmi $1367			bmi 	EXPTypeError
.133a	a2 12		ldx #$12			ldx 	#IFR1
.133c	20 f7 2a	jsr $2af7			jsr 	IFloatDivideFloat
.133f	b0 0f		bcs $1350			bcs 	EXPDZero
.1341	60		rts				rts
.1342					EXPBinIDiv:
.1342	24 11		bit $11				bit 	IFR0+IExp
.1344	30 21		bmi $1367			bmi 	EXPTypeError
.1346	a2 12		ldx #$12			ldx 	#IFR1
.1348	20 f7 2a	jsr $2af7			jsr 	IFloatDivideFloat
.134b	b0 03		bcs $1350			bcs 	EXPDZero
.134d	4c d4 2a	jmp $2ad4			jmp 	IFloatIntegerR0
.1350					EXPDZero:
.1350	4c 22 23	jmp $2322		jmp	ErrorV_divzero
.1353					EXPBinIMod:
.1353	24 11		bit $11				bit 	IFR0+IExp
.1355	30 10		bmi $1367			bmi 	EXPTypeError
.1357	a2 12		ldx #$12			ldx 	#IFR1
.1359	5a		phy				phy
.135a	20 0c 2a	jsr $2a0c			jsr 	IFPreProcessBitwise 		; set up everything.
.135d	d0 05		bne $1364			bne 	EXPDRange
.135f	20 45 29	jsr $2945			jsr 	IFloatModulusInteger
.1362	7a		ply				ply
.1363	60		rts				rts
.1364					EXPDRange:
.1364	4c ba 22	jmp $22ba		jmp	ErrorV_range
.1367					EXPTypeError:
.1367	4c d9 22	jmp $22d9		jmp	ErrorV_type
.136a					EXPBinAnd:
.136a	24 11		bit $11				bit 	IFR0+IExp
.136c	30 f9		bmi $1367			bmi 	EXPTypeError
.136e	a2 12		ldx #$12			ldx 	#IFR1
.1370	20 c7 29	jsr $29c7			jsr 	IFloatBitwiseAnd
.1373	b0 ef		bcs $1364			bcs 	EXPDRange
.1375	60		rts				rts
.1376					EXPBinOr:
.1376	24 11		bit $11				bit 	IFR0+IExp
.1378	30 ed		bmi $1367			bmi 	EXPTypeError
.137a	a2 12		ldx #$12			ldx 	#IFR1
.137c	20 de 29	jsr $29de			jsr 	IFloatBitwiseOr
.137f	b0 e3		bcs $1364			bcs 	EXPDRange
.1381	60		rts				rts
.1382					EXPBinXor:
.1382	24 11		bit $11				bit 	IFR0+IExp
.1384	30 e1		bmi $1367			bmi 	EXPTypeError
.1386	a2 12		ldx #$12			ldx 	#IFR1
.1388	20 f5 29	jsr $29f5			jsr 	IFloatBitwiseXor
.138b	b0 d7		bcs $1364			bcs 	EXPDRange
.138d	60		rts				rts
.138e					EXPConcatenate:
.138e	18		clc				clc
.138f	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.1391	72 12		adc ($12)			adc 	(IFR1)
.1393	b0 2d		bcs $13c2			bcs 	_EXPCError
.1395	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.1397	da		phx				phx
.1398	a6 0f		ldx $0f				ldx 	IFR0+1
.139a	da		phx				phx
.139b	20 32 25	jsr $2532			jsr 	StringTempAllocate 			; allocate string, set up return
.139e	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.13a0	a5 12		lda $12				lda 	IFR1
.13a2	20 ab 13	jsr $13ab			jsr 	_EXPCCopyXA
.13a5	fa		plx				plx 								; copy second string
.13a6	68		pla				pla
.13a7	20 ab 13	jsr $13ab			jsr 	_EXPCCopyXA
.13aa	60		rts				rts
.13ab					_EXPCCopyXA:
.13ab	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.13ad	85 20		sta $20				sta 	zTemp0
.13af	b2 20		lda ($20)			lda 	(zTemp0)					; length
.13b1	f0 0e		beq $13c1			beq 	_EXPCCExit 					; nothing.
.13b3	aa		tax				tax 								; count
.13b4	5a		phy				phy 								; start positioin
.13b5	a0 01		ldy #$01			ldy 	#1
.13b7					_EXPCCLoop:
.13b7	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.13b9	20 67 25	jsr $2567			jsr 	StringTempWrite
.13bc	c8		iny				iny
.13bd	ca		dex				dex
.13be	d0 f7		bne $13b7			bne 	_EXPCCLoop
.13c0	7a		ply				ply
.13c1					_EXPCCExit:
.13c1	60		rts				rts
.13c2					_EXPCError:
.13c2	4c c6 23	jmp $23c6		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.13c5					EXPReturnTrue:
.13c5	a2 0e		ldx #$0e			ldx 	#IFR0
.13c7	a9 01		lda #$01			lda 	#1
.13c9	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.13cc	20 df 2d	jsr $2ddf			jsr 	IFloatNegate
.13cf	60		rts				rts
.13d0					EXPReturnFalse:
.13d0	a2 0e		ldx #$0e			ldx 	#IFR0
.13d2	4c d4 2d	jmp $2dd4			jmp 	IFloatSetZero
.13d5					EXPCompareEqual:
.13d5	20 0b 14	jsr $140b			jsr 	EXPCompareBaseCode
.13d8	c9 00		cmp #$00			cmp 	#0
.13da	f0 e9		beq $13c5			beq 	EXPReturnTrue
.13dc	80 f2		bra $13d0			bra 	EXPReturnFalse
.13de					EXPCompareLess:
.13de	20 0b 14	jsr $140b			jsr 	EXPCompareBaseCode
.13e1	c9 ff		cmp #$ff			cmp 	#$FF
.13e3	f0 e0		beq $13c5			beq 	EXPReturnTrue
.13e5	80 e9		bra $13d0			bra 	EXPReturnFalse
.13e7					EXPCompareGreater:
.13e7	20 0b 14	jsr $140b			jsr 	EXPCompareBaseCode
.13ea	c9 01		cmp #$01			cmp 	#1
.13ec	f0 d7		beq $13c5			beq 	EXPReturnTrue
.13ee	80 e0		bra $13d0			bra 	EXPReturnFalse
.13f0					EXPCompareNotEqual:
.13f0	20 0b 14	jsr $140b			jsr 	EXPCompareBaseCode
.13f3	c9 00		cmp #$00			cmp 	#0
.13f5	d0 ce		bne $13c5			bne 	EXPReturnTrue
.13f7	80 d7		bra $13d0			bra 	EXPReturnFalse
.13f9					EXPCompareLessEqual:
.13f9	20 0b 14	jsr $140b			jsr 	EXPCompareBaseCode
.13fc	c9 01		cmp #$01			cmp 	#1
.13fe	d0 c5		bne $13c5			bne 	EXPReturnTrue
.1400	80 ce		bra $13d0			bra 	EXPReturnFalse
.1402					EXPCompareGreaterEqual:
.1402	20 0b 14	jsr $140b			jsr 	EXPCompareBaseCode
.1405	c9 ff		cmp #$ff			cmp 	#$FF
.1407	d0 bc		bne $13c5			bne 	EXPReturnTrue
.1409	80 c5		bra $13d0			bra 	EXPReturnFalse
.140b					EXPCompareBaseCode:
.140b	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.140d	30 10		bmi $141f			bmi 	_EXCBCString
.140f	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.1411	20 a2 2a	jsr $2aa2			jsr 	IFloatCompare
.1414	a5 0e		lda $0e				lda 	IFR0+IM0
.1416	f0 06		beq $141e			beq 	_EXCBCExit 					; return 0 if zero
.1418	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.141a	50 02		bvc $141e			bvc 	_EXCBCExit
.141c	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.141e					_EXCBCExit:
.141e	60		rts				rts
.141f					_EXCBCString:
.141f	5a		phy				phy
.1420	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.1422	d2 12		cmp ($12)			cmp 	(IFR1)
.1424	90 02		bcc $1428			bcc 	_EXCBCSmaller
.1426	b2 12		lda ($12)			lda 	(IFR1)
.1428					_EXCBCSmaller:
.1428	aa		tax				tax
.1429	f0 0d		beq $1438			beq 	_EXCBCMatches 				; if zero common length matches
.142b	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.142d					_EXCBCCheckSmallerMatches:
.142d	c8		iny				iny 								; compare directly as far as common length
.142e	38		sec				sec
.142f	b1 12		lda ($12),y			lda 	(IFR1),y
.1431	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.1433	d0 08		bne $143d			bne 	_EXCBCExit2
.1435	ca		dex				dex
.1436	d0 f5		bne $142d			bne 	_EXCBCCheckSmallerMatches
.1438					_EXCBCMatches:
.1438	38		sec				sec
.1439	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.143b	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.143d					_EXCBCExit2:
.143d	7a		ply				ply
.143e	c9 00		cmp #$00			cmp 	#0
.1440	f0 04		beq $1446			beq 	_EXCBCReturn
.1442	30 03		bmi $1447			bmi 	_EXCBCFF
.1444	a9 01		lda #$01			lda 	#1
.1446					_EXCBCReturn:
.1446	60		rts				rts
.1447					_EXCBCFF:
.1447	a9 ff		lda #$ff			lda 	#$FF
.1449	60		rts				rts
.144a					_EXCBCRange:
.144a	4c ba 22	jmp $22ba		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.144d					EXPBinLeft:
.144d	a9 ff		lda #$ff			lda 	#$FF
.144f	8d 06 05	sta $0506			sta 	EXPShiftLeftFlag
.1452	4c 58 14	jmp $1458			jmp 	EXPShiftCommon
.1455					EXPBinRight:
.1455	9c 06 05	stz $0506			stz 	EXPShiftLeftFlag
.1458					EXPShiftCommon:
.1458	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.145a	05 15		ora $15				ora 	IFR1+IExp
.145c	29 7f		and #$7f			and 	#$7F
.145e	d0 35		bne $1495			bne 	_EXPSRange
.1460	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.1462	29 e0		and #$e0			and 	#$E0
.1464	05 0f		ora $0f				ora 	IFR0+IM1
.1466	05 10		ora $10				ora 	IFR0+IM2
.1468	d0 25		bne $148f			bne 	_EXPSShiftZero 				; if so return zero
.146a	5a		phy				phy
.146b	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.146d	29 1f		and #$1f			and 	#$1F
.146f	f0 17		beq $1488			beq 	_EXPSExit 					; exit if zero
.1471	a8		tay				tay
.1472					_EXPSLoop:
.1472	a2 12		ldx #$12			ldx 	#IFR1
.1474	2c 06 05	bit $0506			bit 	EXPShiftLeftFlag
.1477	30 05		bmi $147e			bmi 	_EXPSShiftLeft
.1479	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.147c	80 07		bra $1485			bra 	_EXPSContinue
.147e					_EXPSShiftLeft:
.147e	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1481	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.1483	30 10		bmi $1495			bmi 	_EXPSRange
.1485					_EXPSContinue:
.1485	88		dey				dey
.1486	d0 ea		bne $1472			bne 	_EXPSLoop
.1488					_EXPSExit:
.1488	a2 12		ldx #$12			ldx 	#IFR1
.148a	20 65 2d	jsr $2d65			jsr 	IFloatCopyFromRegister
.148d	7a		ply				ply
.148e	60		rts				rts
.148f					_EXPSShiftZero:
.148f	a2 0e		ldx #$0e			ldx 	#IFR0
.1491	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.1494	60		rts				rts
.1495					_EXPSRange:
.1495	4c ba 22	jmp $22ba		jmp	ErrorV_range
.0506					EXPShiftLeftFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1498					EXPEvaluateExpression:
.1498	a9 00		lda #$00			lda 	#0 							; current precedence
.149a					EXPEvaluateExpressionPrecedenceA:
.149a	48		pha				pha
.149b	20 15 15	jsr $1515			jsr 	EXPTermValueR0				; do first term.
.149e					_EELoop:
.149e	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.14a0	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.14a2	90 31		bcc $14d5			bcc 	_EEExit
.14a4	aa		tax				tax 								; access the precedence of the operator.
.14a5	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.14a6	dd 53 17	cmp $1753,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.14a9	b0 2b		bcs $14d6			bcs 	_EEExit2
.14ab	48		pha				pha 								; save current precedence.
.14ac	da		phx				phx 								; save operator
.14ad	c8		iny				iny 								; consume operator
.14ae	da		phx				phx
.14af	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.14b1	20 23 2d	jsr $2d23			jsr 	IFloatPushRx
.14b4	fa		plx				plx
.14b5	bd 53 17	lda $1753,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.14b8	20 9a 14	jsr $149a			jsr 	EXPEvaluateExpressionPrecedenceA
.14bb	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.14bd	20 44 2d	jsr $2d44			jsr 	IFloatPullRx
.14c0	fa		plx				plx 								; operator
.14c1	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.14c3	45 15		eor $15				eor 	IFR1+IExp
.14c5	30 08		bmi $14cf			bmi 	_EEType
.14c7					_EETypeOkay:
.14c7	8a		txa				txa
.14c8	0a		asl a				asl 	a 							; double -> X
.14c9	aa		tax				tax
.14ca	20 d2 14	jsr $14d2			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.14cd	80 cf		bra $149e			bra 	_EELoop
.14cf					_EEType:
.14cf	4c d9 22	jmp $22d9		jmp	ErrorV_type
.14d2					_EECallBinary:
.14d2	7c fb 19	jmp ($19fb,x)			jmp 	(VectorTable,x)
.14d5					_EEExit:
.14d5	68		pla				pla 								; throw precedence
.14d6					_EEExit2:
.14d6	18		clc				clc
.14d7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.14d8					EXPEvalNumber:
.14d8	20 98 14	jsr $1498			jsr 	EXPEvaluateExpression
.14db	24 11		bit $11				bit 	IFR0+IExp
.14dd	30 01		bmi $14e0			bmi 	EVUType
.14df	60		rts				rts
.14e0					EVUType:
.14e0	4c d9 22	jmp $22d9		jmp	ErrorV_type
.14e3					EXPEvalInteger:
.14e3	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.14e6	20 d4 2a	jsr $2ad4			jsr 	IFloatIntegerR0
.14e9	60		rts				rts
.14ea					EXPEvalInteger16:
.14ea	20 e3 14	jsr $14e3			jsr 	EXPEvalInteger
.14ed	a5 10		lda $10				lda 	IFR0+IM2
.14ef	d0 21		bne $1512			bne 	EVURange
.14f1	a6 0f		ldx $0f				ldx 	IFR0+IM1
.14f3	a5 0e		lda $0e				lda 	IFR0+IM0
.14f5	60		rts				rts
.14f6					EXPEvalInteger8:
.14f6	20 e3 14	jsr $14e3			jsr 	EXPEvalInteger
.14f9	a5 10		lda $10				lda 	IFR0+IM2
.14fb	05 0f		ora $0f				ora 	IFR0+IM1
.14fd	d0 13		bne $1512			bne 	EVURange
.14ff	a5 0e		lda $0e				lda 	IFR0+IM0
.1501	60		rts				rts
.1502					EXPEvalString:
.1502	20 98 14	jsr $1498			jsr 	EXPEvaluateExpression
.1505	24 11		bit $11				bit 	IFR0+IExp
.1507	10 d7		bpl $14e0			bpl 	EVUType
.1509	a6 0f		ldx $0f				ldx 	IFR0+IM1
.150b	86 21		stx $21				stx 	zTemp0+1
.150d	a5 0e		lda $0e				lda 	IFR0+IM0
.150f	85 20		sta $20				sta 	zTemp0
.1511	60		rts				rts
.1512					EVURange:
.1512	4c ba 22	jmp $22ba		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1515					EXPTermValueR0:
.1515	20 60 15	jsr $1560			jsr 	EXPTermR0 					; get term
.1518	90 45		bcc $155f			bcc 	_ETVNotReference 			; exit if value.
.151a	5a		phy				phy
.151b	a0 03		ldy #$03			ldy 	#3 							; get type
.151d	b1 0e		lda ($0e),y			lda 	(IFR0),y
.151f	30 14		bmi $1535			bmi 	_ETVDereferenceString
.1521	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.1523	88		dey				dey
.1524	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1526	85 10		sta $10				sta 	IFR0+IM2
.1528	88		dey				dey
.1529	b1 0e		lda ($0e),y			lda 	(IFR0),y
.152b	aa		tax				tax
.152c	b2 0e		lda ($0e)			lda 	(IFR0)
.152e	86 0f		stx $0f				stx 	IFR0+IM1
.1530	85 0e		sta $0e				sta 	IFR0+IM0
.1532	7a		ply				ply
.1533	18		clc				clc
.1534	60		rts				rts
.1535					_ETVDereferenceString:
.1535	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1537	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1539	12 0e		ora ($0e)			ora 	(IFR0)
.153b	f0 11		beq $154e			beq 	_ETVNull
.153d	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.153f	aa		tax				tax
.1540	b2 0e		lda ($0e)			lda 	(IFR0)
.1542	18		clc				clc 								; add two so points to actual string.
.1543	69 02		adc #$02			adc 	#2
.1545	90 01		bcc $1548			bcc 	_EVDSNoCarry
.1547	e8		inx				inx
.1548					_EVDSNoCarry:
.1548	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.154a	85 0e		sta $0e				sta 	IFR0
.154c	80 08		bra $1556			bra 	_ETVFillExit 				; tidy up and exit.
.154e					_ETVNull:
.154e	a9 5e		lda #$5e			lda 	#_EVTNString & $FF
.1550	85 0e		sta $0e				sta 	IFR0+IM0
.1552	a9 15		lda #$15			lda 	#_EVTNString >> 8
.1554	85 0f		sta $0f				sta 	IFR0+IM1
.1556					_ETVFillExit:
.1556	64 10		stz $10				stz 	IFR0+IM2
.1558	a9 80		lda #$80			lda 	#$80
.155a	85 11		sta $11				sta 	IFR0+IExp
.155c	7a		ply				ply
.155d	60		rts				rts
.155e					_EVTNString:
>155e	00						.byte 	0
.155f					_ETVNotReference:
.155f	60		rts				rts
.1560					EXPTermR0:
.1560	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.1562	30 10		bmi $1574			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1564	c8		iny				iny 								; consume element
.1565	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1567	b0 08		bcs $1571			bcs 	_ETMIdentifier
.1569	20 98 15	jsr $1598			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.156c	20 cb 15	jsr $15cb			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.156f	18		clc				clc 								; return value
.1570	60		rts				rts
.1571					_ETMIdentifier:
.1571	4c 6b 27	jmp $276b			jmp 	VARCheckSimple 				; check simple variables A-Z
.1574					_ETMIsUnaryOrMinus:
.1574	c8		iny				iny 								; consume element
.1575	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1577	d0 0a		bne $1583			bne 	_ETMCheckUnary
.1579	20 15 15	jsr $1515			jsr 	EXPTermValueR0 				; get a term to negate
.157c	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.157e	20 df 2d	jsr $2ddf			jsr 	IFloatNegate
.1581	18		clc				clc
.1582	60		rts				rts
.1583					_ETMCheckUnary:
.1583	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1585	90 0e		bcc $1595			bcc 	_ETMUnarySyntax
.1587	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1589	b0 0a		bcs $1595			bcs 	_ETMUnarySyntax
.158b	0a		asl a				asl 	a
.158c	aa		tax				tax
.158d	20 92 15	jsr $1592			jsr 	_ETMCallUnaryFunction
.1590	18		clc				clc
.1591	60		rts				rts
.1592					_ETMCallUnaryFunction:
.1592	7c fb 19	jmp ($19fb,x)			jmp 	(VectorTable,x)
.1595					_ETMUnarySyntax:
.1595	4c a9 22	jmp $22a9		jmp	ErrorV_syntax
.1598					EXPExtractTokenisedInteger:
.1598	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.159a	64 11		stz $11				stz 	IFR0+IExp
.159c	64 0f		stz $0f				stz 	IFR0+IM1
.159e	64 10		stz $10				stz 	IFR0+IM2
.15a0					_ETMConstant:
.15a0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.15a2	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.15a4	b0 24		bcs $15ca			bcs 	_ETMCExit 					; no.
.15a6	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.15a8	a5 0f		lda $0f				lda 	IFR0+IM1
.15aa	85 10		sta $10				sta 	IFR0+IM2
.15ac	a5 0e		lda $0e				lda 	IFR0+IM0
.15ae	85 0f		sta $0f				sta 	IFR0+IM1
.15b0	64 0e		stz $0e				stz 	IFR0+IM0
.15b2	8a		txa				txa
.15b3	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.15b4	66 10		ror $10				ror 	IFR0+IM2
.15b6	66 0f		ror $0f				ror 	IFR0+IM1
.15b8	66 0e		ror $0e				ror 	IFR0+IM0
.15ba	4a		lsr a				lsr 	a
.15bb	66 10		ror $10				ror 	IFR0+IM2
.15bd	66 0f		ror $0f				ror 	IFR0+IM1
.15bf	66 0e		ror $0e				ror 	IFR0+IM0
.15c1	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.15c3	11 1e		ora ($1e),y			ora 	(codePtr),y
.15c5	85 0e		sta $0e				sta 	IFR0+IM0
.15c7	c8		iny				iny 								; consume, loop back
.15c8	80 d6		bra $15a0			bra 	_ETMConstant
.15ca					_ETMCExit:
.15ca	60		rts				rts
.15cb					EXPCheckDecimalFollows:
.15cb	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.15cd	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.15cf	d0 19		bne $15ea			bne 	_ETMCDExit
.15d1	c8		iny				iny 								; consume token.
.15d2	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.15d4	5a		phy				phy									; save current position
.15d5	48		pha				pha 								; save count of chars.
.15d6	38		sec				sec 								; address into YX : y + codePtr+1
.15d7	98		tya				tya
.15d8	65 1e		adc $1e				adc 	codePtr
.15da	aa		tax				tax
.15db	a5 1f		lda $1f				lda 	codePtr+1
.15dd	69 00		adc #$00			adc 	#0
.15df	a8		tay				tay
.15e0	68		pla				pla 								; get count.
.15e1	20 78 2c	jsr $2c78			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.15e4	7a		ply				ply 								; go to next token.
.15e5	98		tya				tya
.15e6	38		sec				sec
.15e7	71 1e		adc ($1e),y			adc 	(codePtr),y
.15e9	a8		tay				tay
.15ea					_ETMCDExit:
.15ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.15eb					EXPUnaryAbs:
.15eb	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 					; number to R0
.15ee	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.15f1	20 18 2a	jsr $2a18			jsr 	IFloatAbsoluteR0
.15f4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15f5					EXPUnaryAsc:
.15f5	20 02 15	jsr $1502			jsr 	EXPEvalString 					; string to R0, zTemp0
.15f8	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.15fb	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.15fd	f0 06		beq $1605			beq 	_EXAZero 						; if so return 0
.15ff	5a		phy				phy 									; otherwise get first character
.1600	a0 01		ldy #$01			ldy 	#1
.1602	b1 20		lda ($20),y			lda 	(zTemp0),y
.1604	7a		ply				ply
.1605					_EXAZero:
.1605	a2 0e		ldx #$0e			ldx 	#IFR0
.1607	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.160a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.160b					EXPUnaryChr:
.160b	20 f6 14	jsr $14f6			jsr 	EXPEvalInteger8 				; expr
.160e	48		pha				pha 									; push on stack
.160f	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.1612	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1614	20 32 25	jsr $2532			jsr 	StringTempAllocate
.1617	68		pla				pla
.1618	20 67 25	jsr $2567			jsr 	StringTempWrite
.161b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.161c					EXPUnaryDec:
.161c	20 02 15	jsr $1502			jsr 	EXPEvalString 					; string to R0, zTemp0
.161f	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.1622	5a		phy				phy
.1623	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.1625	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.1628	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.162a	f0 3b		beq $1667			beq 	_EUDError 						; empty string
.162c	aa		tax				tax
.162d	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.162f					_EUDLoop:
.162f	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.1631	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1633	90 02		bcc $1637			bcc 	_EUDNoCase
.1635	e9 20		sbc #$20			sbc 	#$20
.1637					_EUDNoCase:
.1637	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1639	90 2c		bcc $1667			bcc 	_EUDError
.163b	c9 3a		cmp #$3a			cmp 	#'9'+1
.163d	90 0a		bcc $1649			bcc 	_EUDOkay
.163f	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1641	90 24		bcc $1667			bcc 	_EUDError
.1643	c9 47		cmp #$47			cmp 	#'F'+1
.1645	b0 20		bcs $1667			bcs 	_EUDError
.1647	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1649					_EUDOkay:
.1649	29 0f		and #$0f			and 	#15 							; make constant
.164b	da		phx				phx
.164c	48		pha				pha
.164d	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.164f	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1652	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1655	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1658	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.165b	68		pla				pla 									; pop constant and OR in
.165c	fa		plx				plx
.165d	05 0e		ora $0e				ora 	IFR0+IM0
.165f	85 0e		sta $0e				sta 	IFR0+IM0
.1661	c8		iny				iny 									; next
.1662	ca		dex				dex
.1663	d0 ca		bne $162f			bne 	_EUDLoop
.1665	7a		ply				ply
.1666	60		rts				rts
.1667					_EUDError:
.1667	4c cb 22	jmp $22cb		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.166a					EXPUnaryInlineDec:
.166a	4c a9 22	jmp $22a9		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.166d					EXPUnaryPeek:
.166d	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16 				; number to R0
.1670	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.1673	b2 0e		lda ($0e)			lda 	(IFR0)
.1675	a2 0e		ldx #$0e			ldx 	#IFR0
.1677	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.167a	60		rts				rts
.167b					EXPUnaryDeek:
.167b	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16 				; number to R0
.167e	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.1681	5a		phy				phy
.1682	a0 01		ldy #$01			ldy 	#1
.1684	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1686	7a		ply				ply
.1687	48		pha				pha
.1688	b2 0e		lda ($0e)			lda 	(IFR0)
.168a	a2 0e		ldx #$0e			ldx 	#IFR0
.168c	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.168f	68		pla				pla
.1690	85 0f		sta $0f				sta 	IFR0+IM1
.1692	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1693					EXPUnaryNull:
.1693	20 15 15	jsr $1515			jsr 	EXPTermValueR0
.1696	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1697					EXPUnaryFrac:
.1697	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 					; number to R0
.169a	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.169d	20 7e 2a	jsr $2a7e			jsr 	IFloatFractionalR0
.16a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.16a1					EXPUnaryInt:
.16a1	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 					; number to R0
.16a4	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.16a7	20 d4 2a	jsr $2ad4			jsr 	IFloatIntegerR0
.16aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.16ab					EXPUnaryLen:
.16ab	20 02 15	jsr $1502			jsr 	EXPEvalString 					; string to R0, zTemp0
.16ae	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.16b1	b2 20		lda ($20)			lda 	(zTemp0)
.16b3	a2 0e		ldx #$0e			ldx 	#IFR0
.16b5	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.16b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.16b9					EXPUnaryParenthesis:
.16b9	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 					; number to R0
.16bc	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.16bf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.16c0					EXPUnaryRnd:
.16c0	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 				; number to R0
.16c3	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 				; )
.16c6	a2 0e		ldx #$0e			ldx 	#IFR0
.16c8	20 df 16	jsr $16df			jsr 	EXPLoadInRandom
.16cb	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.16cd	85 11		sta $11				sta 	IFR0+IExp
.16cf	60		rts				rts
.16d0					ExpUnaryRand:
.16d0	20 e3 14	jsr $14e3			jsr 	EXPEvalInteger 				; integer to R0
.16d3	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 				; )
.16d6	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.16d8	20 df 16	jsr $16df			jsr 	EXPLoadInRandom
.16db	20 45 29	jsr $2945			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.16de	60		rts				rts
.16df					EXPLoadInRandom:
.16df	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.16e2	20 f4 16	jsr $16f4			jsr 	EXPRandom32
.16e5	95 00		sta $00,x			sta 	IM0,x
.16e7	20 f4 16	jsr $16f4			jsr 	EXPRandom32
.16ea	95 01		sta $01,x			sta 	IM1,x
.16ec	20 f4 16	jsr $16f4			jsr 	EXPRandom32
.16ef	29 7f		and #$7f			and 	#$7F
.16f1	95 02		sta $02,x			sta 	IM2,x
.16f3	60		rts				rts
.16f4					EXPRandom32:
.16f4	5a		phy				phy
.16f5	a0 08		ldy #$08			ldy 	#8
.16f7	ad 07 05	lda $0507			lda 	EXPSeed+0
.16fa	0d 08 05	ora $0508			ora 	EXPSeed+1
.16fd	0d 09 05	ora $0509			ora 	EXPSeed+2
.1700	0d 0a 05	ora $050a			ora 	EXPSeed+3
.1703	d0 08		bne $170d			bne 	_EXPRNoReset
.1705	ee 07 05	inc $0507			inc 	EXPSeed+0
.1708	a0 10		ldy #$10			ldy 	#16
.170a	8c 0a 05	sty $050a			sty 	EXPSeed+3
.170d					_EXPRNoReset:
.170d	ad 07 05	lda $0507			lda 	EXPSeed+0
.1710					_EXPRLoop:
.1710	0a		asl a				asl		a
.1711	2e 08 05	rol $0508			rol 	EXPSeed+1
.1714	2e 09 05	rol $0509			rol 	EXPSeed+2
.1717	2e 0a 05	rol $050a			rol 	EXPSeed+3
.171a	90 02		bcc $171e			bcc 	_EXPRNoEOR
.171c	49 c5		eor #$c5			eor 	#$C5
.171e					_EXPRNoEOR:
.171e	88		dey				dey
.171f	d0 ef		bne $1710			bne 	_EXPRLoop
.1721	8d 07 05	sta $0507			sta 	EXPSeed+0
.1724	7a		ply				ply
.1725	60		rts				rts
.0507					EXPSeed:
>0507							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1726					EXPUnarySgn:
.1726	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 					; number to R0
.1729	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.172c	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.172e	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister
.1731	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.1733	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.1736	a2 12		ldx #$12			ldx 	#IFR1
.1738	20 a2 2a	jsr $2aa2			jsr 	IFloatCompare 					; compare R1 vs 0.
.173b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.173c					EXPUnarySqr:
.173c	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 					; number to R0
.173f	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.1742	20 20 2a	jsr $2a20			jsr 	IFloatSquareRootR0 				; square root.
.1745	b0 01		bcs $1748			bcs 	_EUSValue
.1747	60		rts				rts
.1748					_EUSValue:
.1748	4c ba 22	jmp $22ba		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.174b					EXPUnaryHex:
.174b	20 e3 14	jsr $14e3			jsr 	EXPEvalInteger 					; expr
.174e	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.1751	5a		phy				phy
.1752	a9 10		lda #$10			lda 	#16
.1754	20 75 2b	jsr $2b75			jsr 	IFloatIntegerToStringR0
.1757	80 0a		bra $1763			bra 	EUSMain
.1759					EXPUnaryStr:
.1759	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 					; expr
.175c	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.175f	5a		phy				phy
.1760	20 d1 2b	jsr $2bd1			jsr 	IFloatFloatToStringR0 			; convert to string
.1763					EUSMain:
.1763	b0 18		bcs $177d			bcs 	_EUSError
.1765	86 20		stx $20				stx 	zTemp0 							; save string address
.1767	84 21		sty $21				sty 	zTemp0+1
.1769	48		pha				pha 									; save count
.176a	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.176c	20 32 25	jsr $2532			jsr 	StringTempAllocate
.176f	fa		plx				plx 									; count in X
.1770	a0 00		ldy #$00			ldy 	#0
.1772					_EUSCopy:
.1772	b1 20		lda ($20),y			lda 	(zTemp0),y
.1774	c8		iny				iny
.1775	20 67 25	jsr $2567			jsr 	StringTempWrite
.1778	ca		dex				dex
.1779	d0 f7		bne $1772			bne	 	_EUSCopy
.177b	7a		ply				ply
.177c	60		rts				rts
.177d					_EUSError:
.177d	4c ba 22	jmp $22ba		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1780					EXPUnaryInlineString:
.1780	18		clc				clc 								; physical address -> IM0,1
.1781	98		tya				tya
.1782	65 1e		adc $1e				adc 	codePtr
.1784	85 0e		sta $0e				sta 	IFR0+IM0
.1786	a5 1f		lda $1f				lda 	codePtr+1
.1788	69 00		adc #$00			adc 	#0
.178a	85 0f		sta $0f				sta 	IFR0+IM1
.178c	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.178e	a9 80		lda #$80			lda 	#$80
.1790	85 11		sta $11				sta 	IFR0+IExp
.1792	98		tya				tya	 								; skip over it.
.1793	38		sec				sec
.1794	71 1e		adc ($1e),y			adc 	(codePtr),y
.1796	a8		tay				tay
.1797	60		rts				rts
.1798					_EXPUISRange:
.1798	4c ba 22	jmp $22ba		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.179b					EXPUnaryLeft:
.179b	20 e1 17	jsr $17e1			jsr 	EXPCommonStart 					; <string>,
.179e	48		pha				pha 									; save string address on stack
.179f	da		phx				phx
.17a0	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.17a2	48		pha				pha
.17a3	20 f6 14	jsr $14f6			jsr 	EXPEvalInteger8 				; characters to do
.17a6	80 44		bra $17ec			bra 	EXPSubstringCommon
.17a8					EXPUnaryRight:
.17a8	20 e1 17	jsr $17e1			jsr 	EXPCommonStart 					; <string>,
.17ab	48		pha				pha 									; save string address on stack
.17ac	da		phx				phx
.17ad	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.17af	48		pha				pha
.17b0	20 f6 14	jsr $14f6			jsr 	EXPEvalInteger8 				; characters to do
.17b3	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.17b5	68		pla				pla
.17b6	38		sec				sec
.17b7	e5 20		sbc $20				sbc 	zTemp0
.17b9	b0 02		bcs $17bd			bcs 	_EUROffLeft
.17bb	a9 00		lda #$00			lda 	#0
.17bd					_EUROffLeft:
.17bd	48		pha				pha 									; start pos
.17be	a9 ff		lda #$ff			lda 	#255
.17c0	80 2a		bra $17ec			bra 	EXPSubstringCommon
.17c2					EXPUnaryMid:
.17c2	20 e1 17	jsr $17e1			jsr 	EXPCommonStart 					; <string>,
.17c5	48		pha				pha 									; save string address on stack
.17c6	da		phx				phx
.17c7	20 f6 14	jsr $14f6			jsr 	EXPEvalInteger8 				; characters start
.17ca	f0 12		beq $17de			beq 	_EUSError 						; 1 is left
.17cc	3a		dec a				dec 	a 								; zero based.
.17cd	48		pha				pha
.17ce	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.17d0	c9 99		cmp #$99			cmp 	#PR_COMMA
.17d2	f0 04		beq $17d8			beq 	_EUMLength 						; if so m is provided
.17d4	a9 ff		lda #$ff			lda 	#255 							; default m
.17d6	80 14		bra $17ec			bra 	EXPSubstringCommon
.17d8					_EUMLength:
.17d8	c8		iny				iny 									; consume comma
.17d9	20 f6 14	jsr $14f6			jsr 	EXPEvalInteger8 				; characters to do
.17dc	80 0e		bra $17ec			bra 	EXPSubstringCommon
.17de					_EUSError:
.17de	4c cb 22	jmp $22cb		jmp	ErrorV_value
.17e1					EXPCommonStart:
.17e1	20 02 15	jsr $1502			jsr 	EXPEvalString
.17e4	20 44 24	jsr $2444			jsr 	ERRCheckComma
.17e7	a5 0e		lda $0e				lda 	IFR0+IM0
.17e9	a6 0f		ldx $0f				ldx 	IFR0+IM1
.17eb	60		rts				rts
.17ec					EXPSubstringCommon:
.17ec	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.17ee	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; check right bracket.
.17f1	68		pla				pla 									; start position
.17f2	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.17f4	fa		plx				plx 									; get string address to zTemp2.
.17f5	86 25		stx $25				stx 	zTemp2+1
.17f7	68		pla				pla
.17f8	85 24		sta $24				sta 	zTemp2
.17fa	38		sec				sec 									; length - start is the max count of chars
.17fb	b2 24		lda ($24)			lda 	(zTemp2)
.17fd	e5 23		sbc $23				sbc 	zTemp1+1
.17ff	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.1801	b0 02		bcs $1805			bcs 	_EXPSSNoTrim
.1803	85 22		sta $22				sta 	zTemp1 							; update count with available
.1805					_EXPSSNoTrim:
.1805	a5 22		lda $22				lda 	zTemp1 							; chars required.
.1807	20 32 25	jsr $2532			jsr 	StringTempAllocate 				; allocate memory for it.
.180a	a5 22		lda $22				lda 	zTemp1 							; zero length string
.180c	f0 15		beq $1823			beq 	_EXPSSExit
.180e	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.1810	d2 24		cmp ($24)			cmp 	(zTemp2)
.1812	b0 0f		bcs $1823			bcs 	_EXPSSExit
.1814	5a		phy				phy
.1815	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.1817	c8		iny				iny 									; +1 for the length byte
.1818					_EXPSSCopy:
.1818	b1 24		lda ($24),y			lda 	(zTemp2),y
.181a	20 67 25	jsr $2567			jsr 	StringTempWrite
.181d	c8		iny				iny
.181e	c6 22		dec $22				dec 	zTemp1
.1820	d0 f6		bne $1818			bne 	_EXPSSCopy
.1822	7a		ply				ply
.1823					_EXPSSExit:
.1823	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1824					EXPUnaryVal:
.1824	20 02 15	jsr $1502			jsr 	EXPEvalString 					; string to R0, zTemp0
.1827	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 					; )
.182a	5a		phy				phy
.182b	18		clc				clc
.182c	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.182e	69 01		adc #$01			adc 	#1
.1830	aa		tax				tax
.1831	a5 21		lda $21				lda 	zTemp0+1
.1833	69 00		adc #$00			adc 	#0
.1835	a8		tay				tay
.1836	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.1838	20 38 2c	jsr $2c38			jsr 	IFloatStringToFloatR0 			; do conversion
.183b	b0 02		bcs $183f			bcs 	_EUVError
.183d	7a		ply				ply
.183e	60		rts				rts
.183f					_EUVError:
.183f	4c cb 22	jmp $22cb		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1842					BinaryPrecedence:
>1842	02					.byte	 2	; $ef =
>1843	02					.byte	 2	; $f0 <>
>1844	02					.byte	 2	; $f1 <=
>1845	02					.byte	 2	; $f2 <
>1846	02					.byte	 2	; $f3 >=
>1847	02					.byte	 2	; $f4 >
>1848	01					.byte	 1	; $f5 XOR
>1849	01					.byte	 1	; $f6 OR
>184a	01					.byte	 1	; $f7 AND
>184b	04					.byte	 4	; $f8 DIV
>184c	04					.byte	 4	; $f9 MOD
>184d	04					.byte	 4	; $fa <<
>184e	04					.byte	 4	; $fb >>
>184f	04					.byte	 4	; $fc /
>1850	04					.byte	 4	; $fd *
>1851	03					.byte	 3	; $fe -
>1852	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1853					StructureOffsets:
>1853	01					.byte	1  	; $80 REPEAT
>1854	ff					.byte	255	; $81 UNTIL
>1855	01					.byte	1  	; $82 WHILE
>1856	ff					.byte	255	; $83 WEND
>1857	01					.byte	1  	; $84 IF
>1858	ff					.byte	255	; $85 ENDIF
>1859	01					.byte	1  	; $86 DO
>185a	ff					.byte	255	; $87 LOOP
>185b	01					.byte	1  	; $88 PROC
>185c	ff					.byte	255	; $89 ENDPROC
>185d	01					.byte	1  	; $8a FOR
>185e	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.185f					StandardTokens:
>185f	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1866	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>186c	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1872	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1877	02 49 46				.byte	$02,$49,$46                             	; $84 if
>187a	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1880	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1883	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1888	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>188d	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1895	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1899	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>189e	00					.byte	$00                                     	; $8c [[end]]
>189f	00					.byte	$00                                     	; $8d [[shift]]
>18a0	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>18a5	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>18aa	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>18ad	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>18b2	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>18b6	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>18bc	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>18c2	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>18c7	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>18cb	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>18cf	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>18d4	01 2c					.byte	$01,$2c                                 	; $99 ,
>18d6	01 3b					.byte	$01,$3b                                 	; $9a ;
>18d8	01 3a					.byte	$01,$3a                                 	; $9b :
>18da	01 27					.byte	$01,$27                                 	; $9c '
>18dc	01 29					.byte	$01,$29                                 	; $9d )
>18de	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>18e2	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>18e8	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>18ec	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>18f0	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>18f5	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>18f9	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1900	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1905	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>190a	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>190f	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1914	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1919	00					.byte	0											; $aa
>191a	00					.byte	0											; $ab
>191b	00					.byte	0											; $ac
>191c	00					.byte	0											; $ad
>191d	00					.byte	0											; $ae
>191e	00					.byte	0											; $af
>191f	00					.byte	0											; $b0
>1920	00					.byte	0											; $b1
>1921	00					.byte	0											; $b2
>1922	00					.byte	0											; $b3
>1923	00					.byte	0											; $b4
>1924	00					.byte	0											; $b5
>1925	00					.byte	0											; $b6
>1926	00					.byte	0											; $b7
>1927	00					.byte	0											; $b8
>1928	00					.byte	0											; $b9
>1929	00					.byte	0											; $ba
>192a	00					.byte	0											; $bb
>192b	00					.byte	0											; $bc
>192c	00					.byte	0											; $bd
>192d	00					.byte	0											; $be
>192e	00					.byte	0											; $bf
>192f	00					.byte	0											; $c0
>1930	00					.byte	0											; $c1
>1931	00					.byte	0											; $c2
>1932	00					.byte	0											; $c3
>1933	00					.byte	0											; $c4
>1934	00					.byte	0											; $c5
>1935	00					.byte	0											; $c6
>1936	00					.byte	0											; $c7
>1937	00					.byte	0											; $c8
>1938	00					.byte	0											; $c9
>1939	00					.byte	0											; $ca
>193a	00					.byte	0											; $cb
>193b	00					.byte	0											; $cc
>193c	00					.byte	0											; $cd
>193d	00					.byte	0											; $ce
>193e	00					.byte	0											; $cf
>193f	00					.byte	0											; $d0
>1940	00					.byte	0											; $d1
>1941	00					.byte	0											; $d2
>1942	00					.byte	0											; $d3
>1943	00					.byte	0											; $d4
>1944	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>194a	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1950	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1958	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>195f	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1965	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>196b	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1970	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1975	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>197a	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>197f	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1984	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>198a	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>198f	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1997	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>199e	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>19a3	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>19a8	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>19ae	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>19b3	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>19b9	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>19be	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>19c4	01 28					.byte	$01,$28                                 	; $eb (
>19c6	01 24					.byte	$01,$24                                 	; $ec $
>19c8	00					.byte	$00                                     	; $ed [[decimal]]
>19c9	00					.byte	$00                                     	; $ee [[string]]
>19ca	01 3d					.byte	$01,$3d                                 	; $ef =
>19cc	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>19cf	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>19d2	01 3c					.byte	$01,$3c                                 	; $f2 <
>19d4	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>19d7	01 3e					.byte	$01,$3e                                 	; $f4 >
>19d9	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>19dd	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>19e0	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>19e4	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>19e8	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>19ec	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>19ef	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>19f2	01 2f					.byte	$01,$2f                                 	; $fc /
>19f4	01 2a					.byte	$01,$2a                                 	; $fd *
>19f6	01 2d					.byte	$01,$2d                                 	; $fe -
>19f8	01 2b					.byte	$01,$2b                                 	; $ff +
>19fa	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.19fb					VectorTable:
>19fb	9d 21					.word	Command_REPEAT           ; $80 REPEAT
>19fd	a6 21					.word	Command_UNTIL            ; $81 UNTIL
>19ff	7e 22					.word	Command_WHILE            ; $82 WHILE
>1a01	9d 22					.word	Command_WEND             ; $83 WEND
>1a03	75 21					.word	IfCommand                ; $84 IF
>1a05	9c 21					.word	EndIf                    ; $85 ENDIF
>1a07	12 20					.word	Command_DO               ; $86 DO
>1a09	2a 20					.word	Command_LOOP             ; $87 LOOP
>1a0b	18 13					.word	NoExec08                 ; $88 PROC
>1a0d	06 20					.word	Command_ENDPROC          ; $89 ENDPROC
>1a0f	33 20					.word	Command_FOR              ; $8a FOR
>1a11	c0 20					.word	Command_NEXT             ; $8b NEXT
>1a13	b0 12					.word	RUNEndOfLine             ; $8c [[END]]
>1a15	fa 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1a17	95 21					.word	ElseCode                 ; $8e ELSE
>1a19	18 13					.word	NoExec01                 ; $8f THEN
>1a1b	18 13					.word	NoExec02                 ; $90 TO
>1a1d	18 13					.word	NoExec03                 ; $91 STEP
>1a1f	16 12					.word	CommandLET               ; $92 LET
>1a21	b1 11					.word	Command_Print            ; $93 PRINT
>1a23	a9 25					.word	NotImplemented           ; $94 INPUT
>1a25	ca 1f					.word	Command_CALL             ; $95 CALL
>1a27	03 13					.word	Command_Sys              ; $96 SYS
>1a29	97 12					.word	Command_REM              ; $97 REM
>1a2b	1b 20					.word	Command_EXIT             ; $98 EXIT
>1a2d	18 13					.word	NoExec04                 ; $99 ,
>1a2f	18 13					.word	NoExec05                 ; $9a ;
>1a31	18 13					.word	NoExec06                 ; $9b :
>1a33	97 12					.word	Command_REM2             ; $9c '
>1a35	18 13					.word	NoExec07                 ; $9d )
>1a37	6b 10					.word	CommandDIM               ; $9e DIM
>1a39	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1a3b	8e 12					.word	Command_NEW              ; $a0 NEW
>1a3d	a4 12					.word	Command_RUN              ; $a1 RUN
>1a3f	00 13					.word	Command_STOP             ; $a2 STOP
>1a41	fd 12					.word	Command_END              ; $a3 END
>1a43	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1a45	a9 25					.word	NotImplemented           ; $a5 LIST
>1a47	a9 25					.word	NotImplemented           ; $a6 SAVE
>1a49	a9 25					.word	NotImplemented           ; $a7 LOAD
>1a4b	8a 11					.word	Command_Poke             ; $a8 POKE
>1a4d	87 11					.word	Command_Doke             ; $a9 DOKE
>1a4f	a9 25					.word	NotImplemented           ; $aa
>1a51	a9 25					.word	NotImplemented           ; $ab
>1a53	a9 25					.word	NotImplemented           ; $ac
>1a55	a9 25					.word	NotImplemented           ; $ad
>1a57	a9 25					.word	NotImplemented           ; $ae
>1a59	a9 25					.word	NotImplemented           ; $af
>1a5b	a9 25					.word	NotImplemented           ; $b0
>1a5d	a9 25					.word	NotImplemented           ; $b1
>1a5f	a9 25					.word	NotImplemented           ; $b2
>1a61	a9 25					.word	NotImplemented           ; $b3
>1a63	a9 25					.word	NotImplemented           ; $b4
>1a65	a9 25					.word	NotImplemented           ; $b5
>1a67	a9 25					.word	NotImplemented           ; $b6
>1a69	a9 25					.word	NotImplemented           ; $b7
>1a6b	a9 25					.word	NotImplemented           ; $b8
>1a6d	a9 25					.word	NotImplemented           ; $b9
>1a6f	a9 25					.word	NotImplemented           ; $ba
>1a71	a9 25					.word	NotImplemented           ; $bb
>1a73	a9 25					.word	NotImplemented           ; $bc
>1a75	a9 25					.word	NotImplemented           ; $bd
>1a77	a9 25					.word	NotImplemented           ; $be
>1a79	a9 25					.word	NotImplemented           ; $bf
>1a7b	a9 25					.word	NotImplemented           ; $c0
>1a7d	a9 25					.word	NotImplemented           ; $c1
>1a7f	a9 25					.word	NotImplemented           ; $c2
>1a81	a9 25					.word	NotImplemented           ; $c3
>1a83	a9 25					.word	NotImplemented           ; $c4
>1a85	a9 25					.word	NotImplemented           ; $c5
>1a87	a9 25					.word	NotImplemented           ; $c6
>1a89	a9 25					.word	NotImplemented           ; $c7
>1a8b	a9 25					.word	NotImplemented           ; $c8
>1a8d	a9 25					.word	NotImplemented           ; $c9
>1a8f	a9 25					.word	NotImplemented           ; $ca
>1a91	a9 25					.word	NotImplemented           ; $cb
>1a93	a9 25					.word	NotImplemented           ; $cc
>1a95	a9 25					.word	NotImplemented           ; $cd
>1a97	a9 25					.word	NotImplemented           ; $ce
>1a99	a9 25					.word	NotImplemented           ; $cf
>1a9b	a9 25					.word	NotImplemented           ; $d0
>1a9d	a9 25					.word	NotImplemented           ; $d1
>1a9f	a9 25					.word	NotImplemented           ; $d2
>1aa1	a9 25					.word	NotImplemented           ; $d3
>1aa3	a9 25					.word	NotImplemented           ; $d4
>1aa5	7b 16					.word	EXPUnaryDeek             ; $d5 DEEK(
>1aa7	6d 16					.word	EXPUnaryPeek             ; $d6 PEEK(
>1aa9	a8 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1aab	9b 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1aad	c2 17					.word	EXPUnaryMid              ; $d9 MID$(
>1aaf	59 17					.word	EXPUnaryStr              ; $da STR$(
>1ab1	24 18					.word	EXPUnaryVal              ; $db VAL(
>1ab3	26 17					.word	EXPUnarySgn              ; $dc SGN(
>1ab5	eb 15					.word	EXPUnaryAbs              ; $dd ABS(
>1ab7	ab 16					.word	EXPUnaryLen              ; $de LEN(
>1ab9	3c 17					.word	EXPUnarySqr              ; $df SQR(
>1abb	0b 16					.word	EXPUnaryChr              ; $e0 CHR$(
>1abd	f5 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1abf	a9 25					.word	NotImplemented           ; $e2 INKEY$(
>1ac1	a9 25					.word	NotImplemented           ; $e3 EVENT(
>1ac3	a9 25					.word	NotImplemented           ; $e4 TIME
>1ac5	a1 16					.word	EXPUnaryInt              ; $e5 INT(
>1ac7	97 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1ac9	1c 16					.word	EXPUnaryDec              ; $e7 DEC(
>1acb	4b 17					.word	EXPUnaryHex              ; $e8 HEX$(
>1acd	c0 16					.word	EXPUnaryRnd              ; $e9 RND(
>1acf	d0 16					.word	ExpUnaryRand             ; $ea RAND(
>1ad1	b9 16					.word	EXPUnaryParenthesis      ; $eb (
>1ad3	93 16					.word	EXPUnaryNull             ; $ec $
>1ad5	6a 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1ad7	80 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1ad9	d5 13					.word	EXPCompareEqual          ; $ef =
>1adb	f0 13					.word	EXPCompareNotEqual       ; $f0 <>
>1add	f9 13					.word	EXPCompareLessEqual      ; $f1 <=
>1adf	de 13					.word	EXPCompareLess           ; $f2 <
>1ae1	02 14					.word	EXPCompareGreaterEqual   ; $f3 >=
>1ae3	e7 13					.word	EXPCompareGreater        ; $f4 >
>1ae5	82 13					.word	EXPBinXor                ; $f5 XOR
>1ae7	76 13					.word	EXPBinOr                 ; $f6 OR
>1ae9	6a 13					.word	EXPBinAnd                ; $f7 AND
>1aeb	42 13					.word	EXPBinIDiv               ; $f8 DIV
>1aed	53 13					.word	EXPBinIMod               ; $f9 MOD
>1aef	4d 14					.word	EXPBinLeft               ; $fa <<
>1af1	55 14					.word	EXPBinRight              ; $fb >>
>1af3	36 13					.word	EXPBinFDiv               ; $fc /
>1af5	2d 13					.word	EXPBinMul                ; $fd *
>1af7	24 13					.word	EXPBinSub                ; $fe -
>1af9	1b 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1afb					TOKDetokenise:
.1afb	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.1afd	84 25		sty $25				sty 	zTemp2+1
.1aff	9c 0d 05	stz $050d			stz		TOKLastCharacter 			; clear last character
.1b02					_TOKDLoop:
.1b02	20 31 1b	jsr $1b31			jsr 	TOKDGet 					; get next
.1b05	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1b07	f0 26		beq $1b2f			beq 	_TOKDExit
.1b09	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1b0b	f0 1d		beq $1b2a			beq 	_TOKDDataItem
.1b0d	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b0f	f0 19		beq $1b2a			beq 	_TOKDDataItem
.1b11	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1b13	10 05		bpl $1b1a			bpl 	_TOKDNotToken
.1b15	20 f9 1b	jsr $1bf9			jsr 	TOKDToken 					; token to text.
.1b18	80 e8		bra $1b02			bra 	_TOKDLoop
.1b1a					_TOKDNotToken:
.1b1a	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1b1c	90 05		bcc $1b23			bcc 	_TOKDNotIdentifier
.1b1e	20 6c 1b	jsr $1b6c			jsr 	TOKDIdentifier
.1b21	80 df		bra $1b02			bra 	_TOKDLoop
.1b23					_TOKDNotIdentifier:
.1b23	a0 0a		ldy #$0a			ldy 	#10
.1b25	20 b5 1b	jsr $1bb5			jsr 	TOKDInteger
.1b28	80 d8		bra $1b02			bra 	_TOKDLoop
.1b2a					_TOKDDataItem:
.1b2a	20 47 1b	jsr $1b47			jsr 	TOKDDataItem
.1b2d	80 d3		bra $1b02			bra 	_TOKDLoop
.1b2f					_TOKDExit:
.1b2f	18		clc				clc
.1b30	60		rts				rts
.1b31	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.1b33	e6 24		inc $24				inc 	zTemp2
.1b35	d0 02		bne $1b39			bne 	_TKDGExit
.1b37	e6 25		inc $25				inc 	zTemp2+1
.1b39					_TKDGExit:
.1b39	60		rts				rts
.1b3a					TOKDOutput:
.1b3a	8d 0d 05	sta $050d			sta 	TOKLastCharacter
.1b3d	6c 0b 05	jmp ($050b)			jmp 	(TOKOutputMethod)
.1b40					TOKSetDetokeniseOutput:
.1b40	8e 0b 05	stx $050b			stx 	TOKOutputMethod
.1b43	8c 0c 05	sty $050c			sty 	TOKOutputMethod+1
.1b46	60		rts				rts
.050b					TOKOutputMethod:
>050b							.fill 	2
.050d					TOKLastCharacter:
>050d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1b47					TOKDDataItem:
.1b47	a8		tay				tay 								; type in Y
.1b48	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1b4a	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1b4c	f0 02		beq $1b50			beq 	_TOKDDIsString
.1b4e	a9 2e		lda #$2e			lda 	#'.'
.1b50					_TOKDDIsString:
.1b50	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput 					; dump it
.1b53	20 31 1b	jsr $1b31			jsr 	TOKDGet 					; get length into X
.1b56	aa		tax				tax
.1b57					_TOKDDOutput:
.1b57	ca		dex				dex 								; are we complete
.1b58	30 08		bmi $1b62			bmi 	_TOKDDEnd
.1b5a	20 31 1b	jsr $1b31			jsr 	TOKDGet 					; get character and output it
.1b5d	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1b60	80 f5		bra $1b57			bra 	_TOKDDOutput
.1b62					_TOKDDEnd:
.1b62	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1b64	d0 05		bne $1b6b			bne 	_TOKDDNotString
.1b66	a9 22		lda #$22			lda 	#'"'
.1b68	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1b6b					_TOKDDNotString:
.1b6b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1b6c					TOKDIdentifier:
.1b6c	a0 ff		ldy #$ff			ldy 	#$FF
.1b6e	8c 0e 05	sty $050e			sty 	TOKDIFirstChar
.1b71					_TOKDLoop:
.1b71	a8		tay				tay 								; token in Y
.1b72	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b74	c0 64		cpy #$64			cpy 	#$64
.1b76	f0 11		beq $1b89			beq 	_TOKDIOutput
.1b78	a9 5f		lda #$5f			lda 	#'_'
.1b7a	c0 65		cpy #$65			cpy 	#$65
.1b7c	f0 0b		beq $1b89			beq 	_TOKDIOutput
.1b7e	98		tya				tya 								; handle a-z
.1b7f	18		clc				clc
.1b80	69 21		adc #$21			adc	 	#$21
.1b82	c0 5a		cpy #$5a			cpy 	#$5A
.1b84	90 03		bcc $1b89			bcc 	_TOKDIOutput
.1b86	38		sec				sec 								; handle 0-9
.1b87	e9 4b		sbc #$4b			sbc 	#$4B
.1b89					_TOKDIOutput:
.1b89	2c 0e 05	bit $050e			bit 	TOKDIFirstChar
.1b8c	10 08		bpl $1b96			bpl 	_TOKDINoSpacing
.1b8e	48		pha				pha
.1b8f	20 2b 1c	jsr $1c2b			jsr 	TOKDSpacing
.1b92	9c 0e 05	stz $050e			stz 	TOKDIFirstChar
.1b95	68		pla				pla
.1b96					_TOKDINoSpacing:
.1b96	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1b99	20 31 1b	jsr $1b31			jsr 	TOKDGet 					; get next token
.1b9c	c9 7c		cmp #$7c			cmp 	#$7C
.1b9e	90 d1		bcc $1b71			bcc 	_TOKDLoop
.1ba0	f0 12		beq $1bb4			beq 	_TOKDIExit 					; it's a number, no tail.
.1ba2	4a		lsr a				lsr 	a 							; string ?
.1ba3	90 07		bcc $1bac			bcc 	_TOKDICheckArray
.1ba5	48		pha				pha
.1ba6	a9 24		lda #$24			lda 	#"$"
.1ba8	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1bab	68		pla				pla
.1bac					_TOKDICheckArray:
.1bac	4a		lsr a				lsr 	a 							; array ?
.1bad	90 05		bcc $1bb4			bcc 	_TOKDIExit
.1baf	a9 28		lda #$28			lda 	#"("
.1bb1	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1bb4					_TOKDIExit:
.1bb4	60		rts				rts
.050e					TOKDIFirstChar:
>050e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1bb5					TOKDInteger:
.1bb5	5a		phy				phy 								; save base
.1bb6	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.1bb8	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.1bbb					_TOKDILoop:
.1bbb	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.1bbd	c9 40		cmp #$40			cmp 	#$40
.1bbf	b0 1d		bcs $1bde			bcs 	_TOKDIHaveInteger
.1bc1	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.1bc3	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1bc6	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1bc9	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1bcc	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1bcf	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1bd2	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1bd5	20 31 1b	jsr $1b31			jsr 	TOKDGet 					; OR byte in.
.1bd8	05 0e		ora $0e				ora 	IFR0+IM0
.1bda	85 0e		sta $0e				sta 	IFR0+IM0
.1bdc	80 dd		bra $1bbb			bra 	_TOKDILoop
.1bde					_TOKDIHaveInteger:
.1bde	7a		ply				ply 								; restore base
.1bdf	98		tya				tya 								; base in A
.1be0	20 75 2b	jsr $2b75			jsr 	IFloatIntegerToStringR0
.1be3	86 20		stx $20				stx 	zTemp0
.1be5	84 21		sty $21				sty 	zTemp0+1
.1be7	b2 20		lda ($20)			lda 	(zTemp0)
.1be9	20 2b 1c	jsr $1c2b			jsr 	TOKDSpacing 				; check spacing okay.
.1bec	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1bee					_TOKDOutput:
.1bee	b1 20		lda ($20),y			lda 	(zTemp0),y
.1bf0	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1bf3	c8		iny				iny
.1bf4	b1 20		lda ($20),y			lda 	(zTemp0),y
.1bf6	d0 f6		bne $1bee			bne 	_TOKDOutput
.1bf8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1bf9					TOKDToken:
.1bf9	a2 5f		ldx #$5f			ldx 	#StandardTokens & $FF
.1bfb	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1bfd					_TOKDSearch:
.1bfd	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.1bff	84 21		sty $21				sty 	zTemp0+1
.1c01	aa		tax				tax 								; token ID in X.
.1c02					_TOKDFind:
.1c02	ca		dex				dex 								; reached the start
.1c03	10 0d		bpl $1c12			bpl 	_TOKDFound
.1c05	38		sec				sec 								; go to next entry
.1c06	b2 20		lda ($20)			lda 	(zTemp0)
.1c08	65 20		adc $20				adc 	zTemp0
.1c0a	85 20		sta $20				sta 	zTemp0
.1c0c	90 f4		bcc $1c02			bcc 	_TOKDFind
.1c0e	e6 21		inc $21				inc 	zTemp0+1
.1c10	80 f0		bra $1c02			bra 	_TOKDFind
.1c12					_TOKDFound:
.1c12	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.1c14	f0 14		beq $1c2a			beq 	_TOKDExit
.1c16	aa		tax				tax
.1c17	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1c19	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.1c1b	20 2b 1c	jsr $1c2b			jsr 	TOKDSpacing
.1c1e					_TOKDOutput:
.1c1e	b1 20		lda ($20),y			lda 	(zTemp0),y
.1c20	20 85 1f	jsr $1f85			jsr 	TOKToLower
.1c23	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1c26	c8		iny				iny
.1c27	ca		dex				dex
.1c28	d0 f4		bne $1c1e			bne 	_TOKDOutput
.1c2a					_TOKDExit:
.1c2a	60		rts				rts
.1c2b					TOKDSpacing:
.1c2b	20 9c 1f	jsr $1f9c			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1c2e	90 0d		bcc $1c3d			bcc 	_TOKDSExit
.1c30	ad 0d 05	lda $050d			lda 	TOKLastCharacter			; and last character also alphanumeric
.1c33	20 9c 1f	jsr $1f9c			jsr 	TOKIsIdentifierElement
.1c36	90 05		bcc $1c3d			bcc 	_TOKDSExit
.1c38	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1c3a	20 3a 1b	jsr $1b3a			jsr 	TOKDOutput
.1c3d					_TOKDSExit:
.1c3d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1c3e					PGMDeleteLine:
.1c3e	20 f1 1c	jsr $1cf1			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c41	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1c43	ad 0f 05	lda $050f			lda 	PGMBaseHigh
.1c46	85 23		sta $23				sta 	zTemp1+1
.1c48					_PGMDLoop:
.1c48	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.1c4a	38		sec				sec
.1c4b	f0 3a		beq $1c87			beq 	_PGMDExit
.1c4d	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1c4f	b1 22		lda ($22),y			lda 	(zTemp1),y
.1c51	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1c54	d0 08		bne $1c5e			bne 	_PGMDNext
.1c56	c8		iny				iny
.1c57	b1 22		lda ($22),y			lda 	(zTemp1),y
.1c59	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1c5c	f0 0d		beq $1c6b			beq 	_PGMDDelete
.1c5e					_PGMDNext:
.1c5e	18		clc				clc
.1c5f	b2 22		lda ($22)			lda 	(zTemp1)
.1c61	65 22		adc $22				adc 	zTemp1
.1c63	85 22		sta $22				sta 	zTemp1
.1c65	90 e1		bcc $1c48			bcc 	_PGMDLoop
.1c67	e6 23		inc $23				inc 	zTemp1+1
.1c69	80 dd		bra $1c48			bra 	_PGMDLoop
.1c6b					_PGMDDelete:
.1c6b	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.1c6d	a8		tay				tay
.1c6e					_PGMDCopy:
.1c6e	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.1c70	92 22		sta ($22)			sta 	(zTemp1)
.1c72	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.1c74	c5 20		cmp $20				cmp 	zTemp0
.1c76	d0 07		bne $1c7f			bne 	_PGMDNext2
.1c78	a5 23		lda $23				lda 	zTemp1+1
.1c7a	c5 21		cmp $21				cmp 	zTemp0+1
.1c7c	18		clc				clc
.1c7d	f0 08		beq $1c87			beq 	_PGMDExit
.1c7f					_PGMDNext2:
.1c7f	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.1c81	d0 eb		bne $1c6e			bne 	_PGMDCopy
.1c83	e6 23		inc $23				inc 	zTemp1+1
.1c85	80 e7		bra $1c6e			bra 	_PGMDCopy
.1c87					_PGMDExit:
.1c87	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c88					PGMInsertLine:
.1c88	20 f1 1c	jsr $1cf1			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c8b	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1c8d	ad 0f 05	lda $050f			lda 	PGMBaseHigh
.1c90	85 23		sta $23				sta 	zTemp1+1
.1c92					_PGMILoop:
.1c92	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c94	f0 1c		beq $1cb2			beq 	_PGMIInsert
.1c96	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c98	b1 22		lda ($22),y			lda 	(zTemp1),y
.1c9a	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1c9d	c8		iny				iny
.1c9e	b1 22		lda ($22),y			lda 	(zTemp1),y
.1ca0	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1ca3	b0 0d		bcs $1cb2			bcs 	_PGMIInsert 				; insert here.
.1ca5	18		clc				clc
.1ca6	b2 22		lda ($22)			lda 	(zTemp1)
.1ca8	65 22		adc $22				adc 	zTemp1
.1caa	85 22		sta $22				sta 	zTemp1
.1cac	90 e4		bcc $1c92			bcc 	_PGMILoop
.1cae	e6 23		inc $23				inc 	zTemp1+1
.1cb0	80 e0		bra $1c92			bra 	_PGMILoop
.1cb2					_PGMIInsert:
.1cb2	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1cb5					_PGMIInsertLoop:
.1cb5	b2 20		lda ($20)			lda 	(zTemp0)
.1cb7	91 20		sta ($20),y			sta 	(zTemp0),y
.1cb9	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.1cbb	c5 20		cmp $20				cmp 	zTemp0
.1cbd	d0 06		bne $1cc5			bne 	_PGMINext
.1cbf	a5 23		lda $23				lda 	zTemp1+1
.1cc1	c5 21		cmp $21				cmp 	zTemp0+1
.1cc3	f0 0a		beq $1ccf			beq 	_PGMIInserted
.1cc5					_PGMINext:
.1cc5	a5 20		lda $20				lda 	zTemp0
.1cc7	d0 02		bne $1ccb			bne 	_PGMINoBorrow
.1cc9	c6 21		dec $21				dec 	zTemp0+1
.1ccb					_PGMINoBorrow:
.1ccb	c6 20		dec $20				dec 	zTemp0
.1ccd	80 e6		bra $1cb5			bra 	_PGMIInsertLoop
.1ccf					_PGMIInserted:
.1ccf	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1cd1					_PGMICopyLoop:
.1cd1	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1cd4	91 22		sta ($22),y			sta 	(zTemp1),y
.1cd6	c8		iny				iny
.1cd7	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1cda	d0 f5		bne $1cd1			bne 	_PGMICopyLoop
.1cdc	18		clc				clc
.1cdd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1cde					PGMSetBaseAddress:
.1cde	8e 0f 05	stx $050f			stx 	PGMBaseHigh
.1ce1	8c 10 05	sty $0510			sty 	PGMEndMemoryHigh
.1ce4	60		rts				rts
.1ce5					PGMNewProgram:
.1ce5	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.1ce7	ad 0f 05	lda $050f			lda 	PGMBaseHigh
.1cea	85 21		sta $21				sta 	zTemp0+1
.1cec	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1cee	92 20		sta ($20)			sta 	(zTemp0)
.1cf0	60		rts				rts
.1cf1					PGMEndProgram:
.1cf1	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.1cf3	ad 0f 05	lda $050f			lda 	PGMBaseHigh
.1cf6	85 21		sta $21				sta 	zTemp0+1
.1cf8					_PGMEPLoop:
.1cf8	b2 20		lda ($20)			lda 	(zTemp0)
.1cfa	f0 0b		beq $1d07			beq 	_PGMEPExit
.1cfc	18		clc				clc
.1cfd	65 20		adc $20				adc 	zTemp0
.1cff	85 20		sta $20				sta 	zTemp0
.1d01	90 f5		bcc $1cf8			bcc 	_PGMEPLoop
.1d03	e6 21		inc $21				inc 	zTemp0+1
.1d05	80 f1		bra $1cf8			bra 	_PGMEPLoop
.1d07					_PGMEPExit:
.1d07	60		rts				rts
.050f					PGMBaseHigh:
>050f							.fill 	1
.0510					PGMEndMemoryHigh:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1d08					TOKResetElement:
.1d08	9c 11 05	stz $0511			stz 	TOKElement
.1d0b	60		rts				rts
.1d0c					TOKWriteElement:
.1d0c	da		phx				phx
.1d0d	ae 11 05	ldx $0511			ldx 	TOKElement
.1d10	9d 12 05	sta $0512,x			sta 	TOKElementText,x
.1d13	9e 13 05	stz $0513,x			stz 	TOKElementText+1,x
.1d16	fa		plx				plx
.1d17	ee 11 05	inc $0511			inc 	TOKElement
.1d1a	60		rts				rts
.0511					TOKElement:
>0511							.fill 	1
.0512					TOKElementText:
>0512							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1d1b					TOKTokeniseConstant:
.1d1b	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.1d1d	48		pha				pha 								; save on stack
.1d1e	29 c0		and #$c0			and 	#$C0
.1d20	05 0f		ora $0f				ora 	IFR0+IM1
.1d22	05 10		ora $10				ora 	IFR0+IM2
.1d24	f0 10		beq $1d36			beq 	_TTCLess
.1d26	da		phx				phx
.1d27	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1d29					_TTCShiftRight:
.1d29	46 10		lsr $10				lsr 	IFR0+IM2
.1d2b	66 0f		ror $0f				ror 	IFR0+IM1
.1d2d	66 0e		ror $0e				ror 	IFR0+IM0
.1d2f	ca		dex				dex
.1d30	d0 f7		bne $1d29			bne 	_TTCShiftRight
.1d32	fa		plx				plx
.1d33	20 1b 1d	jsr $1d1b			jsr 	TOKTokeniseConstant
.1d36					_TTCLess:
.1d36	68		pla				pla
.1d37	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1d39	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1d3c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1d3d					TOKTokeniseDecimals:
.1d3d	20 e8 1d	jsr $1de8			jsr 	TOKGetNext 					; consume the .
.1d40	20 12 1f	jsr $1f12			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1d43	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1d45	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1d48	20 4d 1d	jsr $1d4d			jsr 	TOKOutputElementBuffer 		; then the buffer
.1d4b	18		clc				clc
.1d4c	60		rts				rts
.1d4d					TOKOutputElementBuffer:
.1d4d	ad 11 05	lda $0511			lda 	TOKElement 					; get count and write that
.1d50	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1d53	a8		tay				tay 								; put in Y
.1d54	f0 0c		beq $1d62			beq 	_TOEExit 					; exit if empty which is okay.
.1d56	a2 01		ldx #$01			ldx 	#1
.1d58					_TOELoop:
.1d58	bd 11 05	lda $0511,x			lda 	TOKElement,x
.1d5b	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1d5e	e8		inx				inx
.1d5f	88		dey				dey
.1d60	d0 f6		bne $1d58			bne 	_TOELoop
.1d62					_TOEExit:
.1d62	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1d63					TOKTokenise:
.1d63	8c 12 06	sty $0612			sty 	TOKDataSource+1 			; save source routine pointer
.1d66	8e 11 06	stx $0611			stx 	TOKDataSource
.1d69	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1d6b	8d 13 06	sta $0613			sta 	TOKIsFirstElement
.1d6e	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1d70	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1d73	9c 01 04	stz $0401			stz 	TOKLineNumber
.1d76	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1d79					_TOKMainLoop:
.1d79	20 e4 1d	jsr $1de4			jsr 	TOKGet 						; what follows.
.1d7c	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d7e	f0 4f		beq $1dcf			beq 	_TOKExit
.1d80	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d82	d0 05		bne $1d89			bne 	_TOKElement
.1d84	20 e8 1d	jsr $1de8			jsr 	TOKGetNext
.1d87	80 f0		bra $1d79			bra 	_TOKMainLoop
.1d89					_TOKElement:
.1d89	20 90 1f	jsr $1f90			jsr 	TOKIsDigit 					; is it 0..9
.1d8c	90 0a		bcc $1d98			bcc 	_TOKNotDigit
.1d8e	20 e9 1e	jsr $1ee9			jsr 	TOKTokeniseInteger 			; get integer
.1d91	b0 43		bcs $1dd6			bcs 	_TOKFail 					; did it fail ?
.1d93	9c 13 06	stz $0613			stz 	TOKIsFirstElement 			; clear first element flag
.1d96	80 e1		bra $1d79			bra 	_TOKMainLoop
.1d98					_TOKNotDigit:
.1d98	9c 13 06	stz $0613			stz 	TOKIsFirstElement 			; clear first element flag
.1d9b	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d9d	d0 07		bne $1da6			bne 	_TOKNotHex
.1d9f	20 31 1e	jsr $1e31			jsr 	TOKTokeniseHexadecimal
.1da2	b0 32		bcs $1dd6			bcs 	_TOKFail
.1da4	80 d3		bra $1d79			bra 	_TOKMainLoop
.1da6					_TOKNotHex:
.1da6	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1da8	d0 07		bne $1db1			bne 	_TOKNotDecimal
.1daa	20 3d 1d	jsr $1d3d			jsr 	TOKTokeniseDecimals
.1dad	b0 27		bcs $1dd6			bcs 	_TOKFail
.1daf	80 c8		bra $1d79			bra 	_TOKMainLoop
.1db1					_TOKNotDecimal:
.1db1	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1db3	d0 07		bne $1dbc			bne 	_TOKNotString
.1db5	20 57 1f	jsr $1f57			jsr 	TOKTokeniseString
.1db8	b0 1c		bcs $1dd6			bcs 	_TOKFail
.1dba	80 bd		bra $1d79			bra 	_TOKMainLoop
.1dbc					_TOKNotString:
.1dbc	20 ad 1f	jsr $1fad			jsr 	TOKIsAlpha 					; identifier ?
.1dbf	b0 07		bcs $1dc8			bcs 	_TOKIdentifier
.1dc1	20 26 1f	jsr $1f26			jsr 	TOKTokenisePunctuation 		; punctuation
.1dc4	b0 10		bcs $1dd6			bcs 	_TOKFail
.1dc6	80 b1		bra $1d79			bra 	_TOKMainLoop
.1dc8					_TOKIdentifier:
.1dc8	20 6b 1e	jsr $1e6b			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1dcb	b0 09		bcs $1dd6			bcs 	_TOKFail
.1dcd	80 aa		bra $1d79			bra 	_TOKMainLoop
.1dcf					_TOKExit:
.1dcf	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1dd1	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1dd4	18		clc				clc									; return with carry set.
.1dd5	60		rts				rts
.1dd6					_TOKFail:
.1dd6	38		sec				sec
.1dd7	60		rts				rts
.1dd8					TOKWriteA:
.1dd8	da		phx				phx
.1dd9	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1ddc	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1ddf	fa		plx				plx
.1de0	ee 00 04	inc $0400			inc 	TOKLineSize
.1de3	60		rts				rts
.1de4					TOKGet:
.1de4	18		clc				clc
.1de5	6c 11 06	jmp ($0611)			jmp 	(TOKDataSource)
.1de8					TOKGetNext:
.1de8	38		sec				sec
.1de9	6c 11 06	jmp ($0611)			jmp 	(TOKDataSource)
.0611					TOKDataSource:
>0611							.fill 	2
.0613					TOKIsFirstElement:
>0613							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1dec					TOKFindToken:
.1dec	a2 5f		ldx #$5f			ldx 	#StandardTokens & $FF 		; do this table
.1dee	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1df0	20 fb 1d	jsr $1dfb			jsr 	TOKFindTokenXY 				; find it, or not
.1df3	90 04		bcc $1df9			bcc 	_TOKFTFail
.1df5	a2 00		ldx #$00			ldx 	#0
.1df7	38		sec				sec
.1df8	60		rts				rts
.1df9					_TOKFTFail
.1df9	18		clc				clc
.1dfa	60		rts				rts
.1dfb					TOKFindTokenXY:
.1dfb	86 20		stx $20				stx 	zTemp0 						; save token table address
.1dfd	84 21		sty $21				sty 	zTemp0+1
.1dff	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1e01	8d 14 06	sta $0614			sta 	TOKCurrent
.1e04					_TOKFindLoop:
.1e04	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.1e06	18		clc				clc 		 						; clear carry in case of fail
.1e07	30 17		bmi $1e20			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1e09	cd 11 05	cmp $0511			cmp 	TOKElement 					; compare against the element length
.1e0c	d0 13		bne $1e21			bne 	_TOKNext 					; different, try next.
.1e0e	aa		tax				tax 								; number of chars to compare.
.1e0f	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1e11					_TOKCompare:
.1e11	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.1e13	d9 11 05	cmp $0511,y			cmp 	TOKElementText-1,y
.1e16	d0 09		bne $1e21			bne 	_TOKNext 					; different ? try next
.1e18	c8		iny				iny 								; compare next two
.1e19	ca		dex				dex
.1e1a	d0 f5		bne $1e11			bne 	_TOKCompare 				; until done X characters.
.1e1c	38		sec				sec
.1e1d	ad 14 06	lda $0614			lda 	TOKCurrent 					; return current ID.
.1e20					_TOKExit:
.1e20	60		rts				rts
.1e21					_TOKNext:
.1e21	ee 14 06	inc $0614			inc 	TOKCurrent 					; increment token #
.1e24	38		sec				sec 								; add length+1 to ptr
.1e25	b2 20		lda ($20)			lda 	(zTemp0)
.1e27	65 20		adc $20				adc 	zTemp0
.1e29	85 20		sta $20				sta 	zTemp0
.1e2b	90 d7		bcc $1e04			bcc 	_TOKFindLoop
.1e2d	e6 21		inc $21				inc 	zTemp0+1
.1e2f	80 d3		bra $1e04			bra 	_TOKFindLoop
.0614					TOKCurrent:
>0614							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1e31					TOKTokeniseHexadecimal:
.1e31	20 e8 1d	jsr $1de8			jsr 	TOKGetNext 					; consume the $
.1e34	a2 0e		ldx #$0e			ldx 	#IFR0
.1e36	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero 				; set R0 = 0
.1e39					_TTHLoop:
.1e39	20 e4 1d	jsr $1de4			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e3c	20 ba 1f	jsr $1fba			jsr 	TOKIsHexadecimal
.1e3f	90 20		bcc $1e61			bcc 	_TTHDone
.1e41	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.1e43	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1e46	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1e49	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1e4c	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.1e4f	20 e8 1d	jsr $1de8			jsr 	TOKGetNext
.1e52	38		sec				sec 								; convert to decimal.
.1e53	e9 30		sbc #$30			sbc 	#48
.1e55	c9 0a		cmp #$0a			cmp 	#10
.1e57	90 02		bcc $1e5b			bcc 	_TTHNotAlpha
.1e59	e9 07		sbc #$07			sbc 	#7
.1e5b					_TTHNotAlpha:
.1e5b	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.1e5d	85 0e		sta $0e				sta 	IFR0+IM0
.1e5f	80 d8		bra $1e39			bra 	_TTHLoop
.1e61					_TTHDone:
.1e61	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1e63	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1e66	20 1b 1d	jsr $1d1b			jsr 	TOKTokeniseConstant 		; write integer out.
.1e69	18		clc				clc
.1e6a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1e6b					TOKTokeniseIdentifier:
.1e6b	20 08 1d	jsr $1d08			jsr 	TOKResetElement 			; extract an identifier
.1e6e					_TOKGetIdentifier:
.1e6e	20 e4 1d	jsr $1de4			jsr 	TOKGet
.1e71	20 7a 1f	jsr $1f7a			jsr 	TOKToUpper
.1e74	20 9c 1f	jsr $1f9c			jsr 	TOKIsIdentifierElement
.1e77	90 08		bcc $1e81			bcc 	_TOKEndIdent
.1e79	20 0c 1d	jsr $1d0c			jsr		TOKWriteElement
.1e7c	20 e8 1d	jsr $1de8			jsr 	TOKGetNext
.1e7f	80 ed		bra $1e6e			bra 	_TOKGetIdentifier
.1e81					_TOKEndIdent:
.1e81	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e83	d0 06		bne $1e8b			bne 	_TOKNotString
.1e85	20 0c 1d	jsr $1d0c			jsr 	TOKWriteElement 			; add it
.1e88	20 e8 1d	jsr $1de8			jsr 	TOKGetNext 					; consume it
.1e8b					_TOKNotString:
.1e8b	20 e4 1d	jsr $1de4			jsr 	TOKGet 						; finally check for (
.1e8e	c9 28		cmp #$28			cmp 	#"("
.1e90	d0 06		bne $1e98			bne 	_TOKNoArray
.1e92	20 0c 1d	jsr $1d0c			jsr 	TOKWriteElement 			; add it
.1e95	20 e8 1d	jsr $1de8			jsr 	TOKGetNext 					; consume it
.1e98					_TOKNoArray:
.1e98	20 ec 1d	jsr $1dec			jsr 	TOKFindToken 				; find it
.1e9b	90 05		bcc $1ea2			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e9d	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1ea0	18		clc				clc
.1ea1	60		rts				rts
.1ea2					_TOKIsVariable:
.1ea2	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1ea4					_TOKOutputBuffer:
.1ea4	bd 12 05	lda $0512,x			lda 	TOKElementText,x 			; output it translated.
.1ea7	20 d0 1e	jsr $1ed0			jsr 	TOKTranslateIdentifier
.1eaa	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1ead	e8		inx				inx
.1eae	bd 12 05	lda $0512,x			lda 	TOKElementText,x
.1eb1	20 9c 1f	jsr $1f9c			jsr 	TOKIsIdentifierElement
.1eb4	b0 ee		bcs $1ea4			bcs 	_TOKOutputBuffer
.1eb6	a8		tay				tay 								; last char in Y
.1eb7	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1eb9	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1ebb	f0 0e		beq $1ecb			beq 	_TOKIVExit
.1ebd	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1ebf	d0 04		bne $1ec5			bne 	_TOKIVCheckArray 			; no, check for (
.1ec1	1a		inc a				inc 	a 							; token is $7D
.1ec2	bc 13 05	ldy $0513,x			ldy 	TOKElementText+1,x 			; get next one.
.1ec5					_TOKIVCheckArray:
.1ec5	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1ec7	d0 02		bne $1ecb			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1ec9	1a		inc a				inc 	a
.1eca	1a		inc a				inc 	a
.1ecb					_TOKIVExit:
.1ecb	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA 					; ending token
.1ece	18		clc				clc
.1ecf	60		rts				rts
.1ed0					TOKTranslateIdentifier:
.1ed0	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1ed2	f0 0f		beq $1ee3			beq 	_TTI64
.1ed4	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1ed6	f0 0e		beq $1ee6			beq 	_TTI65
.1ed8	38		sec				sec
.1ed9	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1edb	10 03		bpl $1ee0			bpl 	_TTIExit
.1edd	18		clc				clc 								; map 09 onto 26-35
.1ede	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1ee0					_TTIExit:
.1ee0	09 40		ora #$40			ora 	#$40 						; correct range.
.1ee2	60		rts				rts
.1ee3	a9 64		lda #$64	_TTI64:	lda 	#$64
.1ee5	60		rts				rts
.1ee6	a9 65		lda #$65	_TTI65:	lda 	#$65
.1ee8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1ee9					TOKTokeniseInteger:
.1ee9	20 12 1f	jsr $1f12			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1eec	a2 12		ldx #$12			ldx 	#TOKElementText & $FF
.1eee	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.1ef0	ad 11 05	lda $0511			lda		TOKElement
.1ef3	20 38 2c	jsr $2c38			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1ef6	ad 13 06	lda $0613			lda 	TOKIsFirstElement 			; first element ?
.1ef9	f0 12		beq $1f0d			beq 	_TOKNotLineNumber
.1efb	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.1efd	d0 0c		bne $1f0b			bne 	_TOKBadLineNumeber
.1eff	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.1f01	8d 01 04	sta $0401			sta 	TOKLineNumber
.1f04	a5 0f		lda $0f				lda 	IFR0+IM1
.1f06	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.1f09	18		clc				clc
.1f0a	60		rts				rts
.1f0b					_TOKBadLineNumeber:
.1f0b	38		sec				sec
.1f0c	60		rts				rts
.1f0d					_TOKNotLineNumber:
.1f0d	20 1b 1d	jsr $1d1b			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1f10	18		clc				clc
.1f11	60		rts				rts
.1f12					TOKExtractInteger:
.1f12	20 08 1d	jsr $1d08			jsr 	TOKResetElement 			; restart
.1f15					_TTILoop:
.1f15	20 e4 1d	jsr $1de4			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f18	20 90 1f	jsr $1f90			jsr 	TOKIsDigit
.1f1b	90 08		bcc $1f25			bcc 	_TOKEIExit
.1f1d	20 0c 1d	jsr $1d0c			jsr 	TOKWriteElement
.1f20	20 e8 1d	jsr $1de8			jsr 	TOKGetNext
.1f23	80 f0		bra $1f15			bra 	_TTILoop
.1f25					_TOKEIExit:
.1f25	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1f26					TOKTokenisePunctuation:
.1f26	20 08 1d	jsr $1d08			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1f29	20 e8 1d	jsr $1de8			jsr 	TOKGetNext
.1f2c	20 0c 1d	jsr $1d0c			jsr 	TOKWriteElement
.1f2f	20 e4 1d	jsr $1de4			jsr 	TOKGet 						; what follows ?
.1f32	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1f34	f0 10		beq $1f46			beq 	_TTPOne
.1f36	20 a4 1f	jsr $1fa4			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1f39	b0 0b		bcs $1f46			bcs 	_TTPOne 					; these speed things up a bit.
.1f3b	20 0c 1d	jsr $1d0c			jsr 	TOKWriteElement 			; this is what we will search for.
.1f3e	20 ec 1d	jsr $1dec			jsr 	TOKFindToken
.1f41	b0 0a		bcs $1f4d			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1f43	ce 11 05	dec $0511			dec 	TOKElement 					; make it a single character
.1f46					_TTPOne:
.1f46	20 ec 1d	jsr $1dec			jsr 	TOKFindToken 				; look for one character punctuation
.1f49	b0 07		bcs $1f52			bcs 	_TTPOutputExit 				; we found it
.1f4b	38		sec				sec 								; not recognised.
.1f4c	60		rts				rts
.1f4d					_TTPConsumeExit:
.1f4d	48		pha				pha
.1f4e	20 e8 1d	jsr $1de8			jsr 	TOKGetNext 					; get the 2nd char out.
.1f51	68		pla				pla
.1f52					_TTPOutputExit:
.1f52	20 d8 1d	jsr $1dd8			jsr  	TOKWriteA 					; write token out
.1f55	18		clc				clc
.1f56	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1f57					TOKTokeniseString:
.1f57	20 e8 1d	jsr $1de8			jsr 	TOKGetNext 					; consume the "
.1f5a	20 08 1d	jsr $1d08			jsr 	TOKResetElement 			; start getting the string
.1f5d					_TOKTSLoop:
.1f5d	20 e4 1d	jsr $1de4			jsr 	TOKGet 						; check EOL
.1f60	c9 00		cmp #$00			cmp 	#0
.1f62	f0 0c		beq $1f70			beq 	_TOKTSExit
.1f64	20 e8 1d	jsr $1de8			jsr 	TOKGetNext 					; get and consume
.1f67	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1f69	f0 05		beq $1f70			beq 	_TOKTSExit
.1f6b	20 0c 1d	jsr $1d0c			jsr 	TOKWriteElement
.1f6e	80 ed		bra $1f5d			bra 	_TOKTSLoop
.1f70					_TOKTSExit:
.1f70	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1f72	20 d8 1d	jsr $1dd8			jsr 	TOKWriteA
.1f75	20 4d 1d	jsr $1d4d			jsr 	TOKOutputElementBuffer
.1f78	18		clc				clc
.1f79	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f7a					TOKToUpper:
.1f7a	c9 61		cmp #$61			cmp 	#"a"
.1f7c	90 06		bcc $1f84			bcc 	_TTUNotLower
.1f7e	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f80	b0 02		bcs $1f84			bcs 	_TTUNotLower
.1f82	49 20		eor #$20			eor 	#$20
.1f84					_TTUNotLower:
.1f84	60		rts				rts
.1f85					TOKToLower:
.1f85	c9 41		cmp #$41			cmp 	#"A"
.1f87	90 06		bcc $1f8f			bcc 	_TTUNotUpper
.1f89	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f8b	b0 02		bcs $1f8f			bcs 	_TTUNotUpper
.1f8d	49 20		eor #$20			eor 	#$20
.1f8f					_TTUNotUpper:
.1f8f	60		rts				rts
.1f90					TOKIsDigit:
.1f90	c9 30		cmp #$30			cmp 	#"0"
.1f92	90 06		bcc $1f9a			bcc 	TOKFail
.1f94	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f96	b0 02		bcs $1f9a			bcs 	TOKFail
.1f98					TOKSucceed:
.1f98	38		sec				sec
.1f99	60		rts				rts
.1f9a					TOKFail:
.1f9a	18		clc				clc
.1f9b	60		rts				rts
.1f9c					TOKIsIdentifierElement:
.1f9c	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f9e	f0 f8		beq $1f98			beq 	TOKSucceed
.1fa0	c9 5f		cmp #$5f			cmp 	#"_"
.1fa2	f0 f4		beq $1f98			beq 	TOKSucceed 					; else fall through to alphanumeric
.1fa4					TOKIsAlphaNumeric:
.1fa4	20 ad 1f	jsr $1fad			jsr 	TOKIsAlpha
.1fa7	b0 ef		bcs $1f98			bcs 	TOKSucceed
.1fa9	20 90 1f	jsr $1f90			jsr 	TOKIsDigit
.1fac	60		rts				rts
.1fad					TOKIsAlpha:
.1fad	20 7a 1f	jsr $1f7a			jsr 	TOKToUpper
.1fb0	c9 41		cmp #$41			cmp 	#"A"
.1fb2	90 e6		bcc $1f9a			bcc 	TOKFail
.1fb4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1fb6	b0 e2		bcs $1f9a			bcs 	TOKFail
.1fb8	80 de		bra $1f98			bra 	TOKSucceed
.1fba					TOKIsHexadecimal:
.1fba	20 90 1f	jsr $1f90			jsr		TOKIsDigit
.1fbd	b0 d9		bcs $1f98			bcs 	TOKSucceed
.1fbf	20 ad 1f	jsr $1fad			jsr 	TOKIsAlpha
.1fc2	90 d6		bcc $1f9a			bcc 	TOKFail
.1fc4	c9 47		cmp #$47			cmp 	#"F"+1
.1fc6	b0 d2		bcs $1f9a			bcs 	TOKFail
.1fc8	80 ce		bra $1f98			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.1fca					Command_CALL:
.1fca	a9 42		lda #$42			lda 	#STK_CALL
.1fcc	20 55 24	jsr $2455			jsr 	StackOpen
.1fcf	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.1fd1	29 c0		and #$c0			and 	#$C0
.1fd3	c9 40		cmp #$40			cmp 	#$40
.1fd5	d0 29		bne $2000			bne 	_CCSyntax
.1fd7	20 15 27	jsr $2715			jsr 	VARGetInfo 					; get the information
.1fda	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 				; check right bracket follows.
.1fdd	20 c7 26	jsr $26c7			jsr 	VARFind 					; exists ?
.1fe0	90 21		bcc $2003			bcc 	_CCUnknown
.1fe2	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.1fe4	85 20		sta $20				sta 	zTemp0
.1fe6	20 89 24	jsr $2489			jsr 	STKSaveCodePosition 		; save return address on stack.
.1fe9	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.1feb	b1 20		lda ($20),y			lda 	(zTemp0),y
.1fed	c9 ff		cmp #$ff			cmp 	#$FF
.1fef	d0 12		bne $2003			bne 	_CCUnknown
.1ff1	88		dey				dey 								; get Y offset to stack
.1ff2	b1 20		lda ($20),y			lda 	(zTemp0),y
.1ff4	48		pha				pha
.1ff5	88		dey				dey 								; get address
.1ff6	b1 20		lda ($20),y			lda 	(zTemp0),y
.1ff8	85 1f		sta $1f				sta 	codePtr+1
.1ffa	b2 20		lda ($20)			lda 	(zTemp0)
.1ffc	85 1e		sta $1e				sta 	codePtr
.1ffe	7a		ply				ply 								; restore Y
.1fff	60		rts				rts
.2000					_CCSyntax:
.2000	4c a9 22	jmp $22a9		jmp	ErrorV_syntax
.2003					_CCUnknown:
.2003	4c 1e 24	jmp $241e		jmp	ErrorV_unknown
.2006					Command_ENDPROC:
.2006	a9 42		lda #$42			lda 	#STK_CALL
.2008	20 81 24	jsr $2481			jsr 	StackCheckFrame
.200b	20 9b 24	jsr $249b			jsr 	STKLoadCodePosition 		; return
.200e	20 73 24	jsr $2473			jsr 	StackClose
.2011	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2012					Command_DO:
.2012	a9 22		lda #$22			lda 	#STK_DO
.2014	20 55 24	jsr $2455			jsr 	StackOpen
.2017	20 89 24	jsr $2489			jsr 	STKSaveCodePosition 		; save loop position
.201a	60		rts				rts
.201b					Command_EXIT:
.201b	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.201d	20 81 24	jsr $2481			jsr 	StackCheckFrame
.2020	20 73 24	jsr $2473			jsr 	StackClose 					; close it
.2023	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2025	aa		tax				tax
.2026	20 bb 21	jsr $21bb			jsr 	ScanForward
.2029	60		rts				rts
.202a					Command_LOOP:
.202a	a9 22		lda #$22			lda 	#STK_DO
.202c	20 81 24	jsr $2481			jsr 	StackCheckFrame
.202f	20 9b 24	jsr $249b			jsr 	STKLoadCodePosition 		; loop back
.2032	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2033					Command_FOR:
.2033	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2035	20 55 24	jsr $2455			jsr 	StackOpen
.2038	20 16 12	jsr $1216			jsr 	CommandLET 					; do "I = 1" bit
.203b	5a		phy				phy 								; save variable address to +4,+5
.203c	a0 04		ldy #$04			ldy 	#4
.203e	a5 20		lda $20				lda 	zTemp0
.2040	91 28		sta ($28),y			sta 	(basicStack),y
.2042	c8		iny				iny
.2043	a5 21		lda $21				lda 	zTemp0+1
.2045	91 28		sta ($28),y			sta 	(basicStack),y
.2047	7a		ply				ply
.2048	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.204a	20 4c 24	jsr $244c			jsr 	ERRCheckA
.204d	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2050	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2052	a2 0e		ldx #$0e			ldx 	#IFR0
.2054	20 a9 20	jsr $20a9			jsr 	CFSaveR0X
.2057	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.2059	c9 91		cmp #$91			cmp 	#PR_STEP
.205b	d0 06		bne $2063			bne 	_CFStep1
.205d	c8		iny				iny 								; consume step
.205e	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 				; evaluate STEP
.2061	80 24		bra $2087			bra 	_CFWriteStep
.2063					_CFStep1:
.2063	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.2065	a9 01		lda #$01			lda 	#1
.2067	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.206a	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.206b	a0 04		ldy #$04			ldy 	#4 							; get variable address
.206d	b1 28		lda ($28),y			lda 	(basicStack),y
.206f	85 20		sta $20				sta 	zTemp0
.2071	c8		iny				iny
.2072	b1 28		lda ($28),y			lda 	(basicStack),y
.2074	85 21		sta $21				sta 	zTemp0+1
.2076	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2078	b1 20		lda ($20),y			lda 	(zTemp0),y
.207a	d0 0a		bne $2086			bne 	_CFNotOptimised
.207c	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.207e	b1 28		lda ($28),y			lda 	(basicStack),y
.2080	d0 04		bne $2086			bne 	_CFNotOptimised
.2082	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2084	85 11		sta $11				sta 	IFR0+IExp
.2086					_CFNotOptimised:
.2086	7a		ply				ply
.2087					_CFWriteStep:
.2087	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.2089	a9 06		lda #$06			lda 	#6
.208b	20 a9 20	jsr $20a9			jsr 	CFSaveR0X
.208e	20 89 24	jsr $2489			jsr 	STKSaveCodePosition 		; save loop position
.2091	60		rts				rts
.2092					CFLoadR0X:
.2092	5a		phy				phy
.2093	a8		tay				tay
.2094	b1 28		lda ($28),y			lda 	(basicStack),y
.2096	95 00		sta $00,x			sta 	IM0,x
.2098	c8		iny				iny
.2099	b1 28		lda ($28),y			lda 	(basicStack),y
.209b	95 01		sta $01,x			sta 	IM1,x
.209d	c8		iny				iny
.209e	b1 28		lda ($28),y			lda 	(basicStack),y
.20a0	95 02		sta $02,x			sta 	IM2,x
.20a2	c8		iny				iny
.20a3	b1 28		lda ($28),y			lda 	(basicStack),y
.20a5	95 03		sta $03,x			sta 	IExp,x
.20a7	7a		ply				ply
.20a8	60		rts				rts
.20a9					CFSaveR0X:
.20a9	5a		phy				phy
.20aa	a8		tay				tay
.20ab	b5 00		lda $00,x			lda 	IM0,x
.20ad	91 28		sta ($28),y			sta 	(basicStack),y
.20af	c8		iny				iny
.20b0	b5 01		lda $01,x			lda 	IM1,x
.20b2	91 28		sta ($28),y			sta 	(basicStack),y
.20b4	c8		iny				iny
.20b5	b5 02		lda $02,x			lda 	IM2,x
.20b7	91 28		sta ($28),y			sta 	(basicStack),y
.20b9	c8		iny				iny
.20ba	b5 03		lda $03,x			lda 	IExp,x
.20bc	91 28		sta ($28),y			sta 	(basicStack),y
.20be	7a		ply				ply
.20bf	60		rts				rts
.20c0					Command_NEXT:
.20c0	a9 37		lda #$37			lda 	#STK_FOR
.20c2	20 81 24	jsr $2481			jsr 	StackCheckFrame
.20c5	5a		phy				phy 								; check optimised loop
.20c6	a0 09		ldy #$09			ldy 	#9
.20c8	b1 28		lda ($28),y			lda 	(basicStack),y
.20ca	7a		ply				ply
.20cb	0a		asl a				asl 	a
.20cc	b0 35		bcs $2103			bcs 	_CNOptimised
.20ce	20 3a 21	jsr $213a			jsr 	_CNLoadValue 				; load index value to R0.
.20d1	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.20d3	a9 06		lda #$06			lda 	#6
.20d5	20 92 20	jsr $2092			jsr 	CFLoadR0X
.20d8	20 ca 27	jsr $27ca			jsr 	IFloatAdd 					; add them together and write back.
.20db	20 5d 21	jsr $215d			jsr 	_CNSaveValue
.20de	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.20e0	a2 12		ldx #$12			ldx 	#IFR1
.20e2	20 92 20	jsr $2092			jsr 	CFLoadR0X
.20e5	20 a2 2a	jsr $2aa2			jsr 	IFloatCompare 				; compare terminal vs current
.20e8	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.20ea	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.20ed	f0 10		beq $20ff			beq 	_CNLoopBack
.20ef	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.20f1	5a		phy				phy
.20f2	a0 09		ldy #$09			ldy 	#6+IExp
.20f4	51 28		eor ($28),y			eor 	(basicStack),y
.20f6	7a		ply				ply
.20f7	29 40		and #$40			and 	#IFSign
.20f9	f0 04		beq $20ff			beq 	_CNLoopBack
.20fb					_CNExitLoop:
.20fb	20 73 24	jsr $2473			jsr 	StackClose		 			; return
.20fe	60		rts				rts
.20ff					_CNLoopBack:
.20ff	20 9b 24	jsr $249b			jsr 	STKLoadCodePosition 		; loop back
.2102	60		rts				rts
.2103					_CNOptimised:
.2103	5a		phy				phy
.2104	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2106	b1 28		lda ($28),y			lda 	(basicStack),y
.2108	85 24		sta $24				sta 	zTemp2
.210a	c8		iny				iny
.210b	b1 28		lda ($28),y			lda 	(basicStack),y
.210d	85 25		sta $25				sta 	zTemp2+1
.210f	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2111					_CNIncrement:
.2111	c8		iny				iny
.2112	b1 24		lda ($24),y			lda 	(zTemp2),y
.2114	1a		inc a				inc 	a
.2115	91 24		sta ($24),y			sta 	(zTemp2),y
.2117	f0 f8		beq $2111			beq 	_CNIncrement
.2119	18		clc				clc 								; point zTemp0 to terminal value
.211a	a5 28		lda $28				lda 	basicStack
.211c	69 0a		adc #$0a			adc 	#10
.211e	85 20		sta $20				sta 	zTemp0
.2120	a5 29		lda $29				lda 	basicStack+1
.2122	69 00		adc #$00			adc 	#0
.2124	85 21		sta $21				sta 	zTemp0+1
.2126	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2128	b2 24		lda ($24)			lda 	(zTemp2)
.212a	d2 20		cmp ($20)			cmp 	(zTemp0)
.212c	b1 24		lda ($24),y			lda 	(zTemp2),y
.212e	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.2130	c8		iny				iny
.2131	b1 24		lda ($24),y			lda 	(zTemp2),y
.2133	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.2135	7a		ply				ply
.2136	b0 c3		bcs $20fb			bcs 	_CNExitLoop
.2138	80 c5		bra $20ff			bra 	_CNLoopBack
.213a					_CNLoadValue:
.213a	5a		phy				phy
.213b	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.213d	b1 28		lda ($28),y			lda 	(basicStack),y
.213f	85 24		sta $24				sta 	zTemp2
.2141	c8		iny				iny
.2142	b1 28		lda ($28),y			lda 	(basicStack),y
.2144	85 25		sta $25				sta 	zTemp2+1
.2146	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2148	b1 24		lda ($24),y			lda 	(zTemp2),y
.214a	85 0e		sta $0e				sta 	IFR0+IM0
.214c	c8		iny				iny
.214d	b1 24		lda ($24),y			lda 	(zTemp2),y
.214f	85 0f		sta $0f				sta 	IFR0+IM1
.2151	c8		iny				iny
.2152	b1 24		lda ($24),y			lda 	(zTemp2),y
.2154	85 10		sta $10				sta 	IFR0+IM2
.2156	c8		iny				iny
.2157	b1 24		lda ($24),y			lda 	(zTemp2),y
.2159	85 11		sta $11				sta 	IFR0+IExp
.215b	7a		ply				ply
.215c	60		rts				rts
.215d					_CNSaveValue:
.215d	5a		phy				phy
.215e	a0 00		ldy #$00			ldy 	#0
.2160	a5 0e		lda $0e				lda 	IFR0+IM0
.2162	91 24		sta ($24),y			sta 	(zTemp2),y
.2164	c8		iny				iny
.2165	a5 0f		lda $0f				lda 	IFR0+IM1
.2167	91 24		sta ($24),y			sta 	(zTemp2),y
.2169	c8		iny				iny
.216a	a5 10		lda $10				lda 	IFR0+IM2
.216c	91 24		sta ($24),y			sta 	(zTemp2),y
.216e	c8		iny				iny
.216f	a5 11		lda $11				lda 	IFR0+IExp
.2171	91 24		sta ($24),y			sta 	(zTemp2),y
.2173	7a		ply				ply
.2174	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2175					IfCommand:
.2175	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 				; Get the if test.
.2178	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.217a	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.217c	d0 0a		bne $2188			bne 	_IfStructured 				; we still support it.
.217e	c8		iny				iny 								; consume THEN
.217f	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; is it zero
.2182	f0 01		beq $2185			beq 	_IfFail 					; if fail, go to next line
.2184	60		rts				rts 								; if THEN just continue
.2185					_IfFail:
.2185	4c b0 12	jmp $12b0			jmp 	RUNEndOfLine
.2188					_IfStructured:
.2188	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; is it zero
.218b	d0 07		bne $2194			bne 	_IfExit 					; if not, then continue normally.
.218d	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.218f	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2191	20 bb 21	jsr $21bb			jsr 	ScanForward 				; and run from there
.2194					_IfExit:
.2194	60		rts				rts
.2195					ElseCode:
.2195	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2197	aa		tax				tax 								; so just go to the structure exit
.2198	20 bb 21	jsr $21bb			jsr 	ScanForward
.219b	60		rts				rts
.219c					EndIf:
.219c	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.219d					Command_REPEAT:
.219d	a9 02		lda #$02			lda 	#STK_REPEAT
.219f	20 55 24	jsr $2455			jsr 	StackOpen
.21a2	20 89 24	jsr $2489			jsr 	STKSaveCodePosition 		; save loop position
.21a5	60		rts				rts
.21a6					Command_UNTIL:
.21a6	a9 02		lda #$02			lda 	#STK_REPEAT
.21a8	20 81 24	jsr $2481			jsr 	StackCheckFrame
.21ab	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 				; work out the test
.21ae	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; check if zero
.21b1	f0 04		beq $21b7			beq 	_CULoopBack 				; if so keep looping
.21b3	20 73 24	jsr $2473			jsr 	StackClose		 			; return
.21b6	60		rts				rts
.21b7					_CULoopBack:
.21b7	20 9b 24	jsr $249b			jsr 	STKLoadCodePosition 		; loop back
.21ba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.21bb					ScanForward:
.21bb	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.21bd	86 21		stx $21				stx 	zTemp0+1
.21bf	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.21c1					_ScanForwardLoop:
.21c1	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.21c3	d0 0a		bne $21cf			bne 	_ScanNoCheck
.21c5	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.21c7	c5 20		cmp $20				cmp 	zTemp0
.21c9	f0 49		beq $2214			beq 	_ScanExit
.21cb	c5 21		cmp $21				cmp 	zTemp0+1
.21cd	f0 45		beq $2214			beq 	_ScanExit
.21cf					_ScanNoCheck:
.21cf	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.21d1	c8		iny				iny
.21d2	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.21d4	f0 37		beq $220d			beq		_ScanDataItem
.21d6	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.21d8	f0 33		beq $220d			beq 	_ScanDataItem
.21da	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.21dc	f0 1b		beq $21f9			beq 	_ScanNextLine
.21de	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.21e0	d0 01		bne $21e3			bne 	_ScanNoShift
.21e2	c8		iny				iny
.21e3					_ScanNoShift:
.21e3	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.21e5	b0 da		bcs $21c1			bcs 	_ScanForwardLoop
.21e7	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.21e9	90 d6		bcc $21c1			bcc 	_ScanForwardLoop
.21eb	aa		tax				tax 								; access the table to get the adjustment.
.21ec	18		clc				clc
.21ed	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.21ef	7d d3 17	adc $17d3,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.21f2	85 22		sta $22				sta 	zTemp1
.21f4	10 cb		bpl $21c1			bpl		_ScanForwardLoop 			; error if -ve ?
.21f6	4c 35 23	jmp $2335		jmp	ErrorV_structure
.21f9					_ScanNextLine:
.21f9	18		clc				clc	 								; forward to next line.
.21fa	b2 1e		lda ($1e)			lda 	(codePtr)
.21fc	65 1e		adc $1e				adc 	codePtr
.21fe	85 1e		sta $1e				sta 	codePtr
.2200	90 02		bcc $2204			bcc 	_ScanNoCarry
.2202	e6 1f		inc $1f				inc 	codePtr+1
.2204					_ScanNoCarry:
.2204	a0 03		ldy #$03			ldy 	#3
.2206	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.2208	d0 b7		bne $21c1			bne 	_ScanForwardLoop
.220a	4c 35 23	jmp $2335		jmp	ErrorV_structure
.220d					_ScanDataItem:
.220d	98		tya				tya
.220e	38		sec				sec
.220f	71 1e		adc ($1e),y			adc 	(codePtr),y
.2211	a8		tay				tay
.2212	80 ad		bra $21c1			bra 	_ScanForwardLoop
.2214					_ScanExit:
.2214	c8		iny				iny 								; consume final token.
.2215	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2216					ScanProcedures:
.2216	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.2218	48		pha				pha
.2219	a5 1f		lda $1f				lda 	codePtr+1
.221b	48		pha				pha
.221c	5a		phy				phy
.221d	ad 0f 05	lda $050f			lda 	PGMBaseHigh 				; back to the program start
.2220	85 1f		sta $1f				sta 	codePtr+1
.2222	64 1e		stz $1e				stz 	codePtr
.2224					_SPLoop:
.2224	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.2226	f0 18		beq $2240			beq 	_SPExit
.2228	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.222a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.222c	c9 88		cmp #$88			cmp 	#PR_PROC
.222e	d0 03		bne $2233			bne 	_SPNext
.2230	20 48 22	jsr $2248			jsr 	_SPSetupRecord
.2233					_SPNext:
.2233	18		clc				clc 								; forward to next
.2234	b2 1e		lda ($1e)			lda 	(codePtr)
.2236	65 1e		adc $1e				adc 	codePtr
.2238	85 1e		sta $1e				sta 	codePtr
.223a	90 e8		bcc $2224			bcc 	_SPLoop
.223c	e6 1f		inc $1f				inc 	codePtr+1
.223e	80 e4		bra $2224			bra 	_SPLoop
.2240					_SPExit:
.2240	7a		ply				ply
.2241	68		pla				pla
.2242	85 1f		sta $1f				sta 	codePtr+1
.2244	68		pla				pla
.2245	85 1e		sta $1e				sta 	codePtr
.2247	60		rts				rts
.2248					_SPSetupRecord:
.2248	c8		iny				iny 								; check identifier follows
.2249	b1 1e		lda ($1e),y			lda 	(codePtr),y
.224b	29 c0		and #$c0			and 	#$C0
.224d	c9 40		cmp #$40			cmp 	#$40
.224f	d0 27		bne $2278			bne 	_SPSyntax
.2251	20 15 27	jsr $2715			jsr 	VARGetInfo 					; get the information
.2254	20 3c 24	jsr $243c			jsr 	ERRCheckRParen 				; check right bracket follows.
.2257	20 c7 26	jsr $26c7			jsr 	VARFind 					; already exists ?
.225a	b0 1f		bcs $227b			bcs 	_SPUsed 					; error !
.225c	20 73 26	jsr $2673			jsr 	VARCreate 					; create, XA points to the data.
.225f	85 20		sta $20				sta 	zTemp0
.2261	86 21		stx $21				stx 	zTemp0+1
.2263	5a		phy				phy 								; save Y pos on stack
.2264	a0 01		ldy #$01			ldy 	#1
.2266	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.2268	92 20		sta ($20)			sta 	(zTemp0)
.226a	a5 1f		lda $1f				lda 	codePtr+1
.226c	91 20		sta ($20),y			sta 	(zTemp0),y
.226e	c8		iny				iny
.226f	68		pla				pla
.2270	91 20		sta ($20),y			sta 	(zTemp0),y
.2272	c8		iny				iny
.2273	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2275	91 20		sta ($20),y			sta 	(zTemp0),y
.2277	60		rts				rts
.2278					_SPSyntax:
.2278	4c a9 22	jmp $22a9		jmp	ErrorV_syntax
.227b					_SPUsed:
.227b	4c 00 24	jmp $2400		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.227e					Command_WHILE:
.227e	5a		phy				phy 								; save position of the test
.227f	20 d8 14	jsr $14d8			jsr 	EXPEvalNumber 				; work out the while test.
.2282	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; check if zero
.2285	f0 0e		beq $2295			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2287	98		tya				tya 								; position *after* test.
.2288	7a		ply				ply 								; restore position before test, at WHILE
.2289	88		dey				dey 								; so we execute the WHILE command again.
.228a	48		pha				pha 								; push after test on the stack
.228b	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.228d	20 55 24	jsr $2455			jsr 	StackOpen
.2290	20 89 24	jsr $2489			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2293	7a		ply				ply 								; restore the position *after* the test
.2294	60		rts				rts
.2295					_WHExitLoop:
.2295	68		pla				pla 								; throw post loop position
.2296	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2298	aa		tax				tax
.2299	20 bb 21	jsr $21bb			jsr 	ScanForward
.229c	60		rts				rts
.229d					Command_WEND:
.229d	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.229f	20 81 24	jsr $2481			jsr 	StackCheckFrame
.22a2	20 9b 24	jsr $249b			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.22a5	20 73 24	jsr $2473			jsr 	StackClose		 			; erase the frame
.22a8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.22a9					ErrorV_syntax:
.22a9	20 74 25	jsr $2574		jsr	ErrorHandler
>22ac	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>22b4	45 72 72 6f 72 00
.22ba					ErrorV_range:
.22ba	20 74 25	jsr $2574		jsr	ErrorHandler
>22bd	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>22c5	52 61 6e 67 65 00
.22cb					ErrorV_value:
.22cb	20 74 25	jsr $2574		jsr	ErrorHandler
>22ce	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>22d6	75 65 00
.22d9					ErrorV_type:
.22d9	20 74 25	jsr $2574		jsr	ErrorHandler
>22dc	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>22e4	73 6d 61 74 63 68 00
.22eb					ErrorV_unimplemented:
.22eb	20 74 25	jsr $2574		jsr	ErrorHandler
>22ee	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>22f6	6c 65 6d 65 6e 74 65 64 00
.22ff					ErrorV_assert:
.22ff	20 74 25	jsr $2574		jsr	ErrorHandler
>2302	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>230a	46 61 69 6c 00
.230f					ErrorV_internal:
.230f	20 74 25	jsr $2574		jsr	ErrorHandler
>2312	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>231a	6c 20 45 72 72 6f 72 00
.2322					ErrorV_divzero:
.2322	20 74 25	jsr $2574		jsr	ErrorHandler
>2325	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>232d	42 79 20 5a 65 72 6f 00
.2335					ErrorV_structure:
.2335	20 74 25	jsr $2574		jsr	ErrorHandler
>2338	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2340	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.234d					ErrorV_stop:
.234d	20 74 25	jsr $2574		jsr	ErrorHandler
>2350	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2358	20 53 74 6f 70 70 65 64 00
.2361					ErrorV_data:
.2361	20 74 25	jsr $2574		jsr	ErrorHandler
>2364	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>236c	44 61 74 61 00
.2371					ErrorV_redefine:
.2371	20 74 25	jsr $2574		jsr	ErrorHandler
>2374	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>237c	65 64 65 66 69 6e 65 64 00
.2385					ErrorV_index:
.2385	20 74 25	jsr $2574		jsr	ErrorHandler
>2388	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2390	61 79 20 49 6e 64 65 78 00
.2399					ErrorV_memory:
.2399	20 74 25	jsr $2574		jsr	ErrorHandler
>239c	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>23a4	4d 65 6d 6f 72 79 00
.23ab					ErrorV_uninitialised:
.23ab	20 74 25	jsr $2574		jsr	ErrorHandler
>23ae	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>23b6	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.23c6					ErrorV_string:
.23c6	20 74 25	jsr $2574		jsr	ErrorHandler
>23c9	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>23d1	69 6e 67 20 4c 65 6e 67 74 68 00
.23dc					ErrorV_variable:
.23dc	20 74 25	jsr $2574		jsr	ErrorHandler
>23df	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>23e7	65 20 4d 69 73 73 69 6e 67 00
.23f1					ErrorV_stack:
.23f1	20 74 25	jsr $2574		jsr	ErrorHandler
>23f4	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>23fc	75 6c 6c 00
.2400					ErrorV_dupproc:
.2400	20 74 25	jsr $2574		jsr	ErrorHandler
>2403	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>240b	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>241b	65 64 00
.241e					ErrorV_unknown:
.241e	20 74 25	jsr $2574		jsr	ErrorHandler
>2421	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2429	20 50 72 6f 63 65 64 75 72 65 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2434					ERRCheckLParen:
.2434	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2436	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2438	d0 18		bne $2452			bne 	ERRSyntaxError
.243a	c8		iny				iny
.243b	60		rts				rts
.243c					ERRCheckRParen:
.243c	b1 1e		lda ($1e),y			lda 	(codePtr),y
.243e	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2440	d0 10		bne $2452			bne 	ERRSyntaxError
.2442	c8		iny				iny
.2443	60		rts				rts
.2444					ERRCheckComma:
.2444	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2446	c9 99		cmp #$99			cmp 	#PR_COMMA
.2448	d0 08		bne $2452			bne 	ERRSyntaxError
.244a	c8		iny				iny
.244b	60		rts				rts
.244c					ERRCheckA:
.244c	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.244e	d0 02		bne $2452			bne 	ERRSyntaxError
.2450	c8		iny				iny
.2451	60		rts				rts
.2452					ERRSyntaxError:
.2452	4c a9 22	jmp $22a9		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2455					StackOpen:
.2455	48		pha				pha 								; save frame byte
.2456	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2458	0a		asl a				asl 	a 							; claim twice this for storage
.2459	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.245b	38		sec				sec 								; so basically subtracting from
.245c	65 28		adc $28				adc 	basicStack 	 				; basicStack
.245e	85 28		sta $28				sta 	basicStack
.2460	b0 0a		bcs $246c			bcs 	_SONoBorrow
>2462	db						.byte 	$DB
.2463	c6 29		dec $29				dec 	basicStack+1
.2465	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.2467	cd 15 06	cmp $0615			cmp 	basicStackEnd
.246a	f0 04		beq $2470			beq 	_SOMemory
.246c					_SONoBorrow:
.246c	68		pla				pla 								; get marker back and write at TOS
.246d	92 28		sta ($28)			sta 	(basicStack)
.246f	60		rts				rts
.2470					_SOMemory:
.2470	4c f1 23	jmp $23f1		jmp	ErrorV_stack
.2473					StackClose:
.2473	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.2475	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2477	0a		asl a				asl 	a 							; claim twice this.
.2478	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.247a	85 28		sta $28				sta 	basicStack
.247c	90 02		bcc $2480			bcc 	_SCExit
.247e	e6 29		inc $29				inc 	basicStack+1
.2480					_SCExit:
.2480	60		rts				rts
.2481					StackCheckFrame:
.2481	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.2483	d0 01		bne $2486			bne 	_SCFError 					; different, we have structures mixed up
.2485	60		rts				rts
.2486					_SCFError:
.2486	4c 35 23	jmp $2335		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2489					STKSaveCodePosition:
.2489	5a		phy				phy
.248a	98		tya				tya 								; save Y at offset 1.
.248b	a0 01		ldy #$01			ldy 	#1
.248d	91 28		sta ($28),y			sta 	(basicStack),y
.248f	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.2491	c8		iny				iny
.2492	91 28		sta ($28),y			sta 	(basicStack),y
.2494	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.2496	c8		iny				iny
.2497	91 28		sta ($28),y			sta 	(basicStack),y
.2499	7a		ply				ply
.249a	60		rts				rts
.249b					STKLoadCodePosition:
.249b	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.249d	b1 28		lda ($28),y			lda 	(basicStack),y
.249f	85 1f		sta $1f				sta 	codePtr+1
.24a1	88		dey				dey
.24a2	b1 28		lda ($28),y			lda 	(basicStack),y
.24a4	85 1e		sta $1e				sta 	codePtr
.24a6	88		dey				dey
.24a7	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.24a9	a8		tay				tay
.24aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.24ab					StackReset:
.24ab	48		pha				pha 								; save top of memory
.24ac	3a		dec a				dec 	a  							; end of stack = previous byte
.24ad	85 29		sta $29				sta 	basicStack+1
.24af	a9 ff		lda #$ff			lda 	#$FF
.24b1	85 28		sta $28				sta 	basicStack
.24b3	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.24b5	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.24b7	68		pla				pla 								; allocate pages for stack.
.24b8	38		sec				sec
.24b9	e9 02		sbc #$02			sbc 	#STACKPAGES
.24bb	8d 15 06	sta $0615			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.24be	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.0615					basicStackEnd:
>0615							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.24bf					StringConcrete:
.24bf	5a		phy				phy 								; save position on stack
.24c0	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.24c2	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.24c4	b0 41		bcs $2507			bcs 	_SALengthError
.24c6	18		clc				clc 								; length of the new string
.24c7	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.24c9	90 02		bcc $24cd			bcc 	_SAHaveLength
.24cb	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.24cd					_SAHaveLength:
.24cd	48		pha				pha 								; save length to be allocated for concreting.
.24ce	38		sec				sec
.24cf	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.24d1	6d 17 06	adc $0617			adc 	stringMemory
.24d4	8d 17 06	sta $0617			sta 	stringMemory
.24d7	85 24		sta $24				sta 	zTemp2 						; update storage address
.24d9	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.24db	6d 18 06	adc $0618			adc 	stringMemory+1
.24de	8d 18 06	sta $0618			sta 	stringMemory+1
.24e1	85 25		sta $25				sta 	zTemp2+1
.24e3	68		pla				pla 								; save length allocated in +0
.24e4	92 24		sta ($24)			sta 	(zTemp2)
.24e6	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.24e8	a0 01		ldy #$01			ldy 	#1
.24ea	91 24		sta ($24),y			sta 	(zTemp2),y
.24ec					_SACopyNewString:
.24ec	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.24ee	a0 02		ldy #$02			ldy 	#2
.24f0	91 24		sta ($24),y			sta 	(zTemp2),y
.24f2	aa		tax				tax 								; bytes to copy
.24f3	f0 0c		beq $2501			beq 	_SACopyExit
.24f5	a0 01		ldy #$01			ldy 	#1 							; first character from here
.24f7					_SACopyNSLoop:
.24f7	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.24f9	c8		iny				iny 								; write two on in string storage
.24fa	c8		iny				iny
.24fb	91 24		sta ($24),y			sta 	(zTemp2),y
.24fd	88		dey				dey
.24fe	ca		dex				dex									; until copied all the string lengths.
.24ff	d0 f6		bne $24f7			bne 	_SACopyNSLoop
.2501					_SACopyExit:
.2501	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.2503	a5 24		lda $24				lda 	zTemp2
.2505	7a		ply				ply
.2506	60		rts				rts
.2507					_SALengthError:
.2507	4c c6 23	jmp $23c6		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.250a					StringSystemInitialise:
.250a	3a		dec a				dec 	a 							; make last byte of previous page.
.250b	8d 18 06	sta $0618			sta 	stringMemory+1
.250e	85 21		sta $21				sta 	zTemp0+1
.2510	a9 ff		lda #$ff			lda 	#$FF
.2512	8d 17 06	sta $0617			sta 	stringMemory
.2515	85 20		sta $20				sta 	zTemp0
.2517	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2519	92 20		sta ($20)			sta 	(zTemp0)
.251b	60		rts				rts
.251c					StringSpaceInitialise:
.251c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.251e	8d 16 06	sta $0616			sta 	stringInitialised
.2521	ad 17 06	lda $0617			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2524	8d 19 06	sta $0619			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2527	ad 18 06	lda $0618			lda 	stringMemory+1
.252a	3a		dec a				dec 	a
.252b	8d 1a 06	sta $061a			sta 	stringTempPointer+1
.252e	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.2531	60		rts				rts
.2532					StringTempAllocate:
.2532	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2534	b0 2e		bcs $2564			bcs 	_STALength
.2536	2c 16 06	bit $0616			bit 	stringInitialised 			; already initialised
.2539	30 05		bmi $2540			bmi 	_STAAllocate
.253b	48		pha				pha 								; save value to subtract.
.253c	20 1c 25	jsr $251c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.253f	68		pla				pla 								; restore it
.2540					_STAAllocate:
.2540	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2542	18		clc				clc  								; deliberate allows one more
.2543	6d 19 06	adc $0619			adc 	stringTempPointer 			; subtract from temp pointer
.2546	8d 19 06	sta $0619			sta 	stringTempPointer
.2549	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.254b	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.254d	ad 1a 06	lda $061a			lda 	stringTempPointer+1
.2550	69 ff		adc #$ff			adc 	#$FF
.2552	8d 1a 06	sta $061a			sta 	stringTempPointer+1
.2555	85 2b		sta $2b				sta 	zsTemp+1
.2557	85 0f		sta $0f				sta 	IFR0+IM1
.2559	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.255b	a9 80		lda #$80			lda 	#$80
.255d	85 11		sta $11				sta 	IFR0+IExp
.255f	a9 00		lda #$00			lda 	#0 							; clear the target string
.2561	92 2a		sta ($2a)			sta 	(zsTemp)
.2563	60		rts				rts
.2564					_STALength:
.2564	4c c6 23	jmp $23c6		jmp	ErrorV_string
.2567					StringTempWrite:
.2567	5a		phy				phy
.2568	48		pha				pha
.2569	b2 2a		lda ($2a)			lda 	(zsTemp)
.256b	1a		inc a				inc 	a
.256c	92 2a		sta ($2a)			sta 	(zsTemp)
.256e	a8		tay				tay
.256f	68		pla				pla
.2570	91 2a		sta ($2a),y			sta 	(zsTemp),y
.2572	7a		ply				ply
.2573	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.0616					stringInitialised:
>0616							.fill 	1
.0617					stringMemory:
>0617							.fill 	2
.0619					stringTempPointer:
>0619							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2574					ErrorHandler:
.2574	fa		plx				plx 								; get address of msg
.2575	7a		ply				ply
.2576	e8		inx				inx 								; bump past RTS
.2577	d0 01		bne $257a			bne 	_EHNoInc
.2579	c8		iny				iny
.257a					_EHNoInc:
.257a	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.257d	ad 1b 06	lda $061b			lda 	ERRLine 					; direct command ?
.2580	0d 1c 06	ora $061c			ora 	ERRLine+1
.2583	f0 1c		beq $25a1			beq 	_EHNoNumber
.2585	a2 a4		ldx #$a4			ldx 	#_EHAtMsg & $FF
.2587	a0 25		ldy #$25			ldy 	#_EHAtMsg >> 8
.2589	20 e2 ff	jsr $ffe2			jsr 	OSWriteStringZ
.258c	ad 1b 06	lda $061b			lda 	ERRLine 					; line number -> R0
.258f	a2 0e		ldx #$0e			ldx 	#IFR0
.2591	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.2594	ad 1c 06	lda $061c			lda 	ERRLine+1
.2597	85 0f		sta $0f				sta 	IFR0+IM1
.2599	a9 0a		lda #$0a			lda 	#10 						; decimal
.259b	20 75 2b	jsr $2b75			jsr 	IFloatIntegerToStringR0	 	; convert
.259e	20 e2 ff	jsr $ffe2			jsr 	OSWriteStringZ 				; print
.25a1					_EHNoNumber:
.25a1	4c b6 25	jmp $25b6			jmp 	WarmStartNewLine
.25a4					_EHAtMsg:
>25a4	20 61 74 20 00					.text 	" at ",0
.25a9					NotImplemented:
.25a9	4c eb 22	jmp $22eb		jmp	ErrorV_unimplemented
.061b					ERRLine:
>061b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.25ac					WarmStart:
.25ac	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.25ae	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.25b1	a9 6b		lda #$6b			lda 	#"k"
.25b3	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.25b6					WarmStartNewLine:
.25b6	a9 0d		lda #$0d			lda 	#13
.25b8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.25bb					WarmStartNoPrompt:
.25bb	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.25bd	9a		txs				txs
.25be	20 dc ff	jsr $ffdc			jsr 	OSEditNewLine 				; edit
.25c1	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.25c3	f0 f1		beq $25b6			beq 	WarmStartNewLine
.25c5	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.25c7	d0 f2		bne $25bb			bne 	WarmStartNoPrompt
.25c9	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.25cc	e8		inx				inx 								; skip length byte to make it ASCIIZ
.25cd	d0 01		bne $25d0			bne 	_WSSkip
.25cf	c8		iny				iny
.25d0					_WSSkip:
.25d0	86 24		stx $24				stx 	zTemp2 						; save address
.25d2	84 25		sty $25				sty 	zTemp2+1
.25d4	a2 fe		ldx #$fe			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.25d6	a0 25		ldy #$25			ldy 	#TOKGetCharacter >> 8
.25d8	38		sec				sec
.25d9	20 63 1d	jsr $1d63			jsr 	TOKTokenise
.25dc	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.25df	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.25e2	d0 0b		bne $25ef			bne 	_WSLineEdit
.25e4	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.25e6	85 1e		sta $1e				sta 	codePtr
.25e8	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.25ea	85 1f		sta $1f				sta 	codePtr+1
.25ec	4c bb 12	jmp $12bb			jmp 	RUNNewLine
.25ef					_WSLineEdit:
.25ef	20 3e 1c	jsr $1c3e			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.25f2	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.25f5	c9 04		cmp #$04			cmp 	#4
.25f7	f0 03		beq $25fc			beq 	_WSNoInsert
.25f9	20 88 1c	jsr $1c88			jsr 	PGMInsertLine				; if not, maybe insert
.25fc					_WSNoInsert:
.25fc	80 bd		bra $25bb			bra 	WarmStartNoPrompt
.25fe					TOKGetCharacter:
.25fe	b2 24		lda ($24)			lda 	(zTemp2)
.2600	90 06		bcc $2608			bcc 	_GSNoIncrement
.2602	e6 24		inc $24				inc 	zTemp2
.2604	d0 02		bne $2608			bne 	_GSNoIncrement
.2606	e6 25		inc $25				inc 	zTemp2+1
.2608					_GSNoIncrement:
.2608	c9 00		cmp #$00			cmp 	#0
.260a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.260b					VARArrayLookup:
.260b	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.260d	86 21		stx $21				stx 	zTemp0+1
.260f	b2 20		lda ($20)			lda 	(zTemp0)
.2611	48		pha				pha
.2612	5a		phy				phy
.2613	a0 01		ldy #$01			ldy 	#1
.2615	b1 20		lda ($20),y			lda 	(zTemp0),y
.2617	7a		ply				ply
.2618	48		pha				pha
.2619	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger16 			; R0 now contains the index
.261c	68		pla				pla 								; array address to zTemp0
.261d	85 21		sta $21				sta 	zTemp0+1
.261f	68		pla				pla
.2620	85 20		sta $20				sta 	zTemp0
.2622	5a		phy				phy 								; save codePtr position.
.2623	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2625	b1 20		lda ($20),y			lda 	(zTemp0),y
.2627	48		pha				pha 								; save bit 15 on stack.
.2628	29 7f		and #$7f			and 	#$7F
.262a	85 22		sta $22				sta 	zTemp1
.262c	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.262e	d2 20		cmp ($20)			cmp 	(zTemp0)
.2630	a5 0f		lda $0f				lda 	IFR0+IM1
.2632	e5 22		sbc $22				sbc 	zTemp1
.2634	b0 3a		bcs $2670			bcs 	_VALIndex
.2636	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.2638	c9 40		cmp #$40			cmp 	#$40
.263a	b0 34		bcs $2670			bcs 	_VALIndex
.263c	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.263e	26 0f		rol $0f				rol 	IFR0+IM1
.2640	fa		plx				plx 								; get msb of size -> X
.2641	30 04		bmi $2647			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2643	06 0e		asl $0e				asl 	IFR0+IM0
.2645	26 0f		rol $0f				rol 	IFR0+IM1
.2647					_VARNotX4:
.2647	18		clc				clc 								; add the two for the size bytes
.2648	a5 0e		lda $0e				lda 	IFR0+IM0
.264a	69 02		adc #$02			adc 	#2
.264c	85 0e		sta $0e				sta 	IFR0+IM0
.264e	90 02		bcc $2652			bcc 	_VARNoCarry1
.2650	e6 0f		inc $0f				inc 	IFR0+IM1
.2652					_VARNoCarry1:
.2652	18		clc				clc 								; calculate the element address and push to stack.
.2653	a5 0e		lda $0e				lda 	IFR0+IM0
.2655	65 20		adc $20				adc 	zTemp0
.2657	48		pha				pha
.2658	a5 0f		lda $0f				lda 	IFR0+IM1
.265a	65 21		adc $21				adc 	zTemp0+1
.265c	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.265e	30 04		bmi $2664			bmi 	_VARHasSubLevel
.2660	aa		tax				tax 								; address in XA
.2661	68		pla				pla
.2662	7a		ply				ply 								; restore Y and exit
.2663	60		rts				rts
.2664					_VARHasSubLevel:
.2664	aa		tax				tax 								; get link address in XA
.2665	68		pla				pla
.2666	7a		ply				ply 								; restore code position.
.2667	48		pha				pha
.2668	20 44 24	jsr $2444			jsr 	ERRCheckComma 				; comma required.
.266b	68		pla				pla
.266c	20 0b 26	jsr $260b			jsr 	VARArrayLookup 				; call it recursively
.266f	60		rts				rts
.2670					_VALIndex:
.2670	4c 85 23	jmp $2385		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2673					VARCreate:
.2673	5a		phy				phy
.2674	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2676	a2 00		ldx #$00			ldx 	#0
.2678	20 35 10	jsr $1035			jsr 	AllocateMemory
.267b	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.267d	86 23		stx $23				stx 	zTemp1+1
.267f	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2681	ad 1f 06	lda $061f			lda 	VARHash
.2684	91 22		sta ($22),y			sta 	(zTemp1),y
.2686	c8		iny				iny 								; put address of name into +3,+4
.2687	ad 1d 06	lda $061d			lda 	VARNameAddress
.268a	91 22		sta ($22),y			sta 	(zTemp1),y
.268c	c8		iny				iny
.268d	ad 1e 06	lda $061e			lda 	VARNameAddress+1
.2690	91 22		sta ($22),y			sta 	(zTemp1),y
.2692	ad 20 06	lda $0620			lda 	VARType
.2695	29 01		and #$01			and 	#1
.2697	f0 06		beq $269f			beq 	_CVNotString
.2699	a0 08		ldy #$08			ldy 	#5+3
.269b	a9 80		lda #$80			lda 	#$80
.269d	91 22		sta ($22),y			sta 	(zTemp1),y
.269f					_CVNotString:
.269f	ad 41 06	lda $0641			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.26a2	85 20		sta $20				sta 	zTemp0
.26a4	ad 42 06	lda $0642			lda 	VARHashEntry+1
.26a7	85 21		sta $21				sta 	zTemp0+1
.26a9	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.26ab	b2 20		lda ($20)			lda 	(zTemp0)
.26ad	92 22		sta ($22)			sta 	(zTemp1)
.26af	b1 20		lda ($20),y			lda 	(zTemp0),y
.26b1	91 22		sta ($22),y			sta 	(zTemp1),y
.26b3	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.26b5	92 20		sta ($20)			sta 	(zTemp0)
.26b7	a5 23		lda $23				lda 	zTemp1+1
.26b9	91 20		sta ($20),y			sta 	(zTemp0),y
.26bb	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.26bd	a6 23		ldx $23				ldx 	zTemp1+1
.26bf	18		clc				clc 								; add 5 to point to the data.
.26c0	69 05		adc #$05			adc 	#5
.26c2	90 01		bcc $26c5			bcc 	_VCNoCarry
.26c4	e8		inx				inx
.26c5					_VCNoCarry:
.26c5	7a		ply				ply
.26c6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.26c7					VARFind:
.26c7	5a		phy				phy
.26c8	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.26ca	b1 20		lda ($20),y			lda 	(zTemp0),y
.26cc	85 23		sta $23				sta 	zTemp1+1
.26ce	f0 1c		beq $26ec			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.26d0	b2 20		lda ($20)			lda 	(zTemp0)
.26d2	85 22		sta $22				sta 	zTemp1
.26d4					_VFLoop:
.26d4	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.26d6	b1 22		lda ($22),y			lda 	(zTemp1),y
.26d8	cd 1f 06	cmp $061f			cmp 	VARHash
.26db	f0 12		beq $26ef			beq 	_VFHashesMatch 				; if so, check the name.
.26dd					_VFNext:
.26dd	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.26df	aa		tax				tax
.26e0	a0 01		ldy #$01			ldy 	#1
.26e2	b1 22		lda ($22),y			lda 	(zTemp1),y
.26e4	85 23		sta $23				sta 	zTemp1+1
.26e6	86 22		stx $22				stx 	zTemp1
.26e8	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.26ea	d0 e8		bne $26d4			bne 	_VFLoop
.26ec					_VFExitFail:
.26ec	7a		ply				ply
.26ed	18		clc				clc
.26ee	60		rts				rts
.26ef					_VFHashesMatch:
.26ef	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.26f1	b1 22		lda ($22),y			lda 	(zTemp1),y
.26f3	85 24		sta $24				sta 	zTemp2
.26f5	c8		iny				iny
.26f6	b1 22		lda ($22),y			lda 	(zTemp1),y
.26f8	85 25		sta $25				sta 	zTemp2+1
.26fa	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.26fc					_VFNameCompLoop:
.26fc	c8		iny				iny 								; char at a time
.26fd	b9 21 06	lda $0621,y			lda 	VARBuffer,y
.2700	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.2702	d0 d9		bne $26dd			bne 	_VFNext						; next entry if different.
.2704	c9 7c		cmp #$7c			cmp 	#$7C
.2706	90 f4		bcc $26fc			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2708	18		clc				clc
.2709	a5 22		lda $22				lda 	zTemp1
.270b	a6 23		ldx $23				ldx 	zTemp1+1
.270d	69 05		adc #$05			adc 	#5
.270f	90 01		bcc $2712			bcc 	_VFNNoCarry
.2711	e8		inx				inx
.2712					_VFNNoCarry:
.2712	7a		ply				ply
.2713	38		sec				sec
.2714	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2715					VARGetInfo:
.2715	98		tya				tya 								; calculate the address of the identifier start.
.2716	18		clc				clc
.2717	65 1e		adc $1e				adc 	codePtr
.2719	8d 1d 06	sta $061d			sta 	VARNameAddress
.271c	a5 1f		lda $1f				lda 	codePtr+1
.271e	69 00		adc #$00			adc 	#0
.2720	8d 1e 06	sta $061e			sta 	VARNameAddress+1
.2723	9c 1f 06	stz $061f			stz 	VARHash
.2726	a2 00		ldx #$00			ldx 	#0
.2728					_VARCopyName:
.2728	18		clc				clc 								; update the sum hash.
.2729	ad 1f 06	lda $061f			lda 	VARHash
.272c	71 1e		adc ($1e),y			adc 	(codePtr),y
.272e	8d 1f 06	sta $061f			sta 	VARHash
.2731	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.2733	c8		iny				iny
.2734	9d 21 06	sta $0621,x			sta 	VARBuffer,x
.2737	e8		inx				inx
.2738	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.273a	90 ec		bcc $2728			bcc 	_VARCopyName
.273c	8d 20 06	sta $0620			sta 	VARType 					; save type byte
.273f	29 03		and #$03			and 	#3 							; type is 0-3
.2741	0a		asl a				asl 	a
.2742	0a		asl a				asl 	a
.2743	85 20		sta $20				sta 	zTemp0
.2745	ad 1f 06	lda $061f			lda 	VARHash 					; force into range of hash entries per type.
.2748	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.274a	65 20		adc $20				adc 	zTemp0 						; index of hash table
.274c	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.274d	69 43		adc #$43			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.274f	85 20		sta $20				sta 	zTemp0
.2751	8d 41 06	sta $0641			sta 	VARHashEntry
.2754	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2756	69 00		adc #$00			adc 	#0
.2758	85 21		sta $21				sta 	zTemp0+1
.275a	8d 42 06	sta $0642			sta 	VARHashEntry+1
.275d	60		rts				rts
.275e					VARClearHashTables:
.275e	a2 00		ldx #$00			ldx 	#0
.2760					_VCHRLoop:
.2760	a9 00		lda #$00			lda 	#0
.2762	9d 43 06	sta $0643,x			sta 	VARHashTables,x
.2765	e8		inx				inx
.2766	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2768	d0 f6		bne $2760			bne 	_VCHRLoop
.276a	60		rts				rts
.061d					VARNameAddress:
>061d							.fill 	2
.061f					VARHash:
>061f							.fill 	1
.0620					VARType:
>0620							.fill 	1
.0621					VARBuffer:
>0621							.fill 	32
.0641					VARHashEntry:
>0641							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0643					VARHashTables:
>0643							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.276b					VARCheckSimple:
.276b	aa		tax				tax 								; save in X
.276c	b1 1e		lda ($1e),y			lda 	(codePtr),y
.276e	c9 7c		cmp #$7c			cmp 	#$7C
.2770	d0 15		bne $2787			bne 	_VCSComplex
.2772	c8		iny				iny 								; consume the second byte, the type.
.2773	8a		txa				txa  								; character (40-7F) x 4
.2774	0a		asl a				asl 	a
.2775	0a		asl a				asl  	a
.2776	18		clc				clc
.2777	69 63		adc #$63			adc 	#FastVariables & $FF
.2779	85 0e		sta $0e				sta 	IFR0+IM0
.277b	a9 06		lda #$06			lda 	#FastVariables >> 8
.277d	69 00		adc #$00			adc 	#0
.277f	85 0f		sta $0f				sta 	IFR0+IM1
.2781	64 10		stz $10				stz 	IFR0+IM2
.2783	64 11		stz $11				stz 	IFR0+IExp
.2785	38		sec				sec 								; it's a reference
.2786	60		rts				rts
.2787					_VCSComplex:
.2787	88		dey				dey	 								; extract information.
.2788	20 15 27	jsr $2715			jsr 	VARGetInfo
.278b	20 c7 26	jsr $26c7			jsr 	VARFind 					; search for variable
.278e	b0 0a		bcs $279a			bcs 	_VCSHaveVariable
.2790	ad 20 06	lda $0620			lda 	VARType 					; error if arrays, cannot autocreate
.2793	29 02		and #$02			and 	#2
.2795	d0 25		bne $27bc			bne 	_VCNoCreate
.2797	20 73 26	jsr $2673			jsr 	VARCreate 					; create variable
.279a					_VCSHaveVariable:
.279a	48		pha				pha 								; save LSB on the stack
.279b	ad 20 06	lda $0620			lda 	VARType 					; get var type, and shift bit 1 into carry
.279e	6a		ror a				ror 	a
.279f	6a		ror a				ror 	a
.27a0	68		pla				pla 								; restore LSB
.27a1	90 08		bcc $27ab			bcc 	_VCSNotArray 				; skip if not an array
.27a3	20 0b 26	jsr $260b			jsr 	VARArrayLookup 				; look for subscripts.
.27a6	48		pha				pha 								; check )
.27a7	20 3c 24	jsr $243c			jsr 	ERRCheckRParen
.27aa	68		pla				pla
.27ab					_VCSNotArray:
.27ab	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.27ad	85 0e		sta $0e				sta 	IFR0+IM0
.27af	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.27b1	ad 20 06	lda $0620			lda 	VARType 					; number/string bit into carry
.27b4	6a		ror a				ror 	a
.27b5	a9 00		lda #$00			lda 	#0
.27b7	6a		ror a				ror 	a 							; now $00 or $80
.27b8	85 11		sta $11				sta 	IFR0+IExp
.27ba	38		sec				sec 								; it's a reference
.27bb	60		rts				rts
.27bc					_VCNoCreate:
.27bc	4c ab 23	jmp $23ab		jmp	ErrorV_uninitialised
.0663					FastVariables:
>0663							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.27bf					IFInitialise:
.27bf	9c d3 06	stz $06d3			stz 	IFStackIndex
.27c2	60		rts				rts
.27c3					IFloatSubtract:
.27c3	da		phx				phx
.27c4	a2 0e		ldx #$0e			ldx 	#IFR0
.27c6	20 df 2d	jsr $2ddf			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.27c9	fa		plx				plx
.27ca					IFloatAdd:
.27ca	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.27cc	05 11		ora $11				ora 	IFR0+IExp
.27ce	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.27d0	d0 4e		bne $2820			bne 	_IFloatAddDecimals 			; decimal version.
.27d2					_IFAddSubMantissa:
.27d2	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.27d4	45 11		eor $11				eor 	IFR0+IExp
.27d6	29 40		and #$40			and 	#IFSign
.27d8	d0 21		bne $27fb			bne 	_IFloatSubMantissa
.27da	18		clc				clc 								; do the actual addition
.27db	a5 0e		lda $0e			lda 	IFR0+IM0
.27dd	75 00		adc $00,x		adc 		IM0,x
.27df	85 0e		sta $0e			sta 	IFR0+IM0
.27e1	a5 0f		lda $0f			lda 	IFR0+IM1
.27e3	75 01		adc $01,x		adc 		IM1,x
.27e5	85 0f		sta $0f			sta 	IFR0+IM1
.27e7	a5 10		lda $10			lda 	IFR0+IM2
.27e9	75 02		adc $02,x		adc 		IM2,x
.27eb	85 10		sta $10			sta 	IFR0+IM2
.27ed	10 29		bpl $2818			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.27ef	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.27f1	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.27f4	20 2d 2e	jsr $2e2d			jsr 	IFloatIncExponent
.27f7	d0 1f		bne $2818			bne 	_IFloatAddExit
.27f9	38		sec				sec 								; overflowed numerically.
.27fa	60		rts				rts
.27fb					_IFloatSubMantissa:
.27fb	38		sec				sec 								; do the subtraction R0-Rx
.27fc	a5 0e		lda $0e			lda 	IFR0+IM0
.27fe	f5 00		sbc $00,x		sbc 		IM0,x
.2800	85 0e		sta $0e			sta 	IFR0+IM0
.2802	a5 0f		lda $0f			lda 	IFR0+IM1
.2804	f5 01		sbc $01,x		sbc 		IM1,x
.2806	85 0f		sta $0f			sta 	IFR0+IM1
.2808	a5 10		lda $10			lda 	IFR0+IM2
.280a	f5 02		sbc $02,x		sbc 		IM2,x
.280c	85 10		sta $10			sta 	IFR0+IM2
.280e	b0 08		bcs $2818			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2810	a2 0e		ldx #$0e			ldx 	#IFR0
.2812	20 e7 2d	jsr $2de7			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2815	20 df 2d	jsr $2ddf			jsr 	IFloatNegate 				; negate
.2818					_IFloatAddExit:
.2818	18		clc				clc
.2819	60		rts				rts
.281a					_IFloatZeroAdd:
.281a	fa		plx				plx 								; return this value in R0
.281b	20 65 2d	jsr $2d65			jsr 	IFloatCopyFromRegister
.281e	18		clc				clc
.281f	60		rts				rts
.2820					_IFloatAddDecimals:
.2820	20 cd 2d	jsr $2dcd			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2823	f0 f3		beq $2818			beq 	_IFloatAddExit
.2825	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise 			; normalise RX
.2828	da		phx				phx 								; normalise R0
.2829	a2 0e		ldx #$0e			ldx 	#IFR0
.282b	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.282e	f0 ea		beq $281a			beq 	_IFloatZeroAdd
.2830	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise
.2833	fa		plx				plx
.2834	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.2836	29 3f		and #$3f			and 	#IFXMask
.2838	38		sec				sec
.2839	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.283b	85 0c		sta $0c				sta 	iTemp0
.283d	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.283f	29 3f		and #$3f			and 	#IFXMask
.2841	38		sec				sec
.2842	e9 20		sbc #$20			sbc 	#$20
.2844	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.2846	b0 02		bcs $284a			bcs 	_IFloatHaveLarger
.2848	a5 0c		lda $0c				lda 	iTemp0
.284a					_IFloatHaveLarger:
.284a	18		clc				clc 								; get the actual one back.
.284b	69 20		adc #$20			adc 	#$20 						; shift both to that.
.284d	20 5a 28	jsr $285a			jsr 	_IFShiftXToA
.2850	da		phx				phx
.2851	a2 0e		ldx #$0e			ldx 	#IFR0
.2853	20 5a 28	jsr $285a			jsr 	_IFShiftXToA
.2856	fa		plx				plx
.2857	4c d2 27	jmp $27d2			jmp 	_IFAddSubMantissa 			; do the adding bit.
.285a					_IFShiftXToA:
.285a	8d cb 06	sta $06cb			sta 	IFTarget
.285d	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; check adding zero ?
.2860	f0 11		beq $2873			beq 	_IFSXExit
.2862					_IFSXLoop:
.2862	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2864	29 3f		and #$3f			and 	#IFXMask
.2866	cd cb 06	cmp $06cb			cmp 	IFTarget
.2869	f0 08		beq $2873			beq 	_IFSXExit
.286b	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.286e	20 2d 2e	jsr $2e2d			jsr 	IFloatIncExponent
.2871	80 ef		bra $2862			bra 	_IFSXLoop
.2873					_IFSXExit:
.2873	60		rts				rts
.06cb					IFTarget:
>06cb							.fill 	1
.2874					IFloatMultiply:
.2874	8e cb 06	stx $06cb			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2877	20 2f 29	jsr $292f			jsr 	IFCalculateNewSign
.287a	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.287c	05 11		ora $11				ora 	IFR0+IExp
.287e	29 3f		and #$3f			and 	#IFXMask
.2880	15 01		ora $01,x			ora 	IM1,x
.2882	05 0f		ora $0f				ora 	IFR0+IM1
.2884	15 02		ora $02,x			ora 	IM2,x
.2886	05 10		ora $10				ora 	IFR0+IM2
.2888	d0 0a		bne $2894			bne 	_IFMStandard
.288a	20 b0 2d	jsr $2db0			jsr 	IFloatMultiply8BitRx
.288d	ad cd 06	lda $06cd			lda 	IFNewSign
.2890	85 11		sta $11				sta 	IFR0+IExp
.2892	18		clc				clc
.2893	60		rts				rts
.2894					_IFMStandard:
.2894	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2896	20 26 29	jsr $2926			jsr 	IFMSignExtend
.2899	8d cc 06	sta $06cc			sta 	IFNewExponent
.289c	a5 11		lda $11				lda 	IFR0+IExp
.289e	20 26 29	jsr $2926			jsr 	IFMSignExtend
.28a1	18		clc				clc
.28a2	6d cc 06	adc $06cc			adc 	IFNewExponent
.28a5	8d cc 06	sta $06cc			sta 	IFNewExponent
.28a8	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.28aa	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister
.28ad	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.28af	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.28b2					_IFMLoop:
.28b2	a2 1a		ldx #$1a			ldx 	#IFRTemp
.28b4	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.28b7	f0 3a		beq $28f3			beq 	_IFMExit
.28b9	ae cb 06	ldx $06cb			ldx 	IFTarget 					; look at adder MSB
.28bc	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.28be	10 03		bpl $28c3			bpl	 	_IFMTargetOkay
.28c0	20 17 29	jsr $2917			jsr 	_IFMShiftAll
.28c3					_IFMTargetOkay:
.28c3	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.28c5	29 01		and #$01			and 	#1
.28c7	f0 16		beq $28df			beq 	_IFMNoAdd
.28c9	ae cb 06	ldx $06cb			ldx 	IFTarget 					; add adder
.28cc	18		clc				clc
.28cd	a5 0e		lda $0e			lda 	IFR0+IM0
.28cf	75 00		adc $00,x		adc 		IM0,x
.28d1	85 0e		sta $0e			sta 	IFR0+IM0
.28d3	a5 0f		lda $0f			lda 	IFR0+IM1
.28d5	75 01		adc $01,x		adc 		IM1,x
.28d7	85 0f		sta $0f			sta 	IFR0+IM1
.28d9	a5 10		lda $10			lda 	IFR0+IM2
.28db	75 02		adc $02,x		adc 		IM2,x
.28dd	85 10		sta $10			sta 	IFR0+IM2
.28df					_IFMNoAdd:
.28df	a5 10		lda $10				lda 	IFR0+IM2
.28e1	10 03		bpl $28e6			bpl 	_IFMResultOkay
.28e3	20 17 29	jsr $2917			jsr 	_IFMShiftAll
.28e6					_IFMResultOkay:
.28e6	a2 1a		ldx #$1a			ldx 	#IFRTemp
.28e8	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.28eb	ae cb 06	ldx $06cb			ldx 	IFTarget
.28ee	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.28f1	80 bf		bra $28b2			bra 	_IFMLoop
.28f3					_IFMExit:
.28f3	ad cc 06	lda $06cc			lda 	IFNewExponent 				; validate new exponent.
.28f6	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.28f8	90 0f		bcc $2909			bcc 	_IFMOkay
.28fa	c9 e0		cmp #$e0			cmp 	#$E0
.28fc	b0 0b		bcs $2909			bcs 	_IFMOkay
.28fe	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2900	f0 13		beq $2915			beq 	_IFMError
.2902	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.2904	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2907	18		clc				clc
.2908	60		rts				rts
.2909					_IFMOkay:
.2909	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.290b	0d cd 06	ora $06cd			ora 	IFNewSign
.290e	85 11		sta $11				sta 	IFR0+IExp
.2910	18		clc				clc
.2911	60		rts				rts
.2912	4c ff ff	jmp $ffff			jmp 	$FFFF
.2915					_IFMError:
.2915	38		sec				sec
.2916	60		rts				rts
.2917					_IFMShiftAll:
.2917	a2 0e		ldx #$0e			ldx 	#IFR0
.2919	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.291c	ae cb 06	ldx $06cb			ldx 	IFTarget
.291f	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.2922	ee cc 06	inc $06cc			inc 	IFNewExponent
.2925	60		rts				rts
.2926					IFMSignExtend:
.2926	29 3f		and #$3f			and 	#IFXMask
.2928	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.292a	90 02		bcc $292e			bcc 	_IFMNoSXX
.292c	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.292e					_IFMNoSXX:
.292e	60		rts				rts
.292f					IFCalculateNewSign:
.292f	b5 03		lda $03,x			lda 	IExp,x
.2931	45 11		eor $11				eor 	IFR0+IExp
.2933	29 40		and #$40			and 	#IFSign
.2935	8d cd 06	sta $06cd			sta 	IFNewSign
.2938	60		rts				rts
.06cc					IFNewExponent:
>06cc							.fill 	1
.06cd					IFNewSign:
>06cd							.fill 	1
.2939					IFloatDivideInteger:
.2939	20 52 29	jsr $2952			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.293c	b0 06		bcs $2944			bcs 	_IFDIExit
.293e	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.2940	20 65 2d	jsr $2d65			jsr 	IFloatCopyFromRegister
.2943	18		clc				clc
.2944					_IFDIExit:
.2944	60		rts				rts
.2945					IFloatModulusInteger:
.2945	20 52 29	jsr $2952			jsr 	IFloatDivideIntegerCommon
.2948	b0 07		bcs $2951			bcs 	_IFMIExit
.294a	ae cb 06	ldx $06cb			ldx 	IFTarget
.294d	20 65 2d	jsr $2d65			jsr 	IFloatCopyFromRegister
.2950	18		clc				clc
.2951					_IFMIExit:
.2951	60		rts				rts
.2952					IFloatDivideIntegerCommon:
.2952	8e cb 06	stx $06cb			stx 	IFTarget  					; this is s1, s0 = R0
.2955	20 2f 29	jsr $292f			jsr 	IFCalculateNewSign 			; calculate sign of result
.2958	20 80 29	jsr $2980			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.295b	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.295d	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.2960	f0 1c		beq $297e			beq 	_IFDIDivZero
.2962	ae cb 06	ldx $06cb			ldx 	IFTarget 					; zero Rx (S1)
.2965	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2968	5a		phy				phy
.2969	a0 18		ldy #$18			ldy 	#24
.296b					_IFDILoop:
.296b	20 91 29	jsr $2991			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.296e	20 9d 29	jsr $299d			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2971	88		dey				dey
.2972	d0 f7		bne $296b			bne 	_IFDILoop 					; do it 24 times
.2974	7a		ply				ply
.2975	ad cd 06	lda $06cd			lda 	IFNewSign 					; set sign of result.
.2978	29 40		and #$40			and 	#IFSign
.297a	85 1d		sta $1d				sta 	IFRTemp+IExp
.297c	18		clc				clc 								; is okay.
.297d	60		rts				rts
.297e					_IFDIDivZero:
.297e	38		sec				sec
.297f	60		rts				rts
.2980					IFDCopyRXToRTemp:
.2980	b5 00		lda $00,x			lda 	IM0,x
.2982	85 1a		sta $1a				sta 	IFRTemp+IM0
.2984	b5 01		lda $01,x			lda 	IM1,x
.2986	85 1b		sta $1b				sta 	IFRTemp+IM1
.2988	b5 02		lda $02,x			lda 	IM2,x
.298a	85 1c		sta $1c				sta 	IFRTemp+IM2
.298c	b5 03		lda $03,x			lda 	IExp,x
.298e	85 1d		sta $1d				sta 	IFRTemp+IExp
.2990	60		rts				rts
.2991					IFDShiftSTempS1Left:
.2991	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2993	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft
.2996	ae cb 06	ldx $06cb			ldx 	IFTarget
.2999	20 fc 2d	jsr $2dfc			jsr 	IFloatRotateLeft
.299c	60		rts				rts
.299d					IFDTrySubtract:
.299d	ae cb 06	ldx $06cb			ldx 	IFTarget 					; s1 = Rx
.29a0	38		sec				sec 								; subtract, saving the results on the stack.
.29a1	b5 00		lda $00,x			lda 	IM0,x
.29a3	e5 0e		sbc $0e				sbc 	IFR0+IM0
.29a5	48		pha				pha
.29a6	b5 01		lda $01,x			lda 	IM1,x
.29a8	e5 0f		sbc $0f				sbc 	IFR0+IM1
.29aa	48		pha				pha
.29ab	b5 02		lda $02,x			lda 	IM2,x
.29ad	e5 10		sbc $10				sbc 	IFR0+IM2
.29af	b0 03		bcs $29b4			bcs 	_IFDCanSubtract
.29b1	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.29b2	68		pla				pla
.29b3	60		rts				rts
.29b4					_IFDCanSubtract:
.29b4	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.29b6	68		pla				pla
.29b7	95 01		sta $01,x			sta 	IM1,x
.29b9	68		pla				pla
.29ba	95 00		sta $00,x			sta 	IM0,x
.29bc	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.29be	d0 06		bne $29c6			bne 	_IFDCSExit
.29c0	e6 1b		inc $1b				inc 	IFRTemp+IM1
.29c2	d0 02		bne $29c6			bne 	_IFDCSExit
.29c4	e6 1c		inc $1c				inc 	IFRTemp+IM2
.29c6					_IFDCSExit:
.29c6	60		rts				rts
.29c7					IFloatBitwiseAnd:
.29c7	5a		phy				phy
.29c8	20 0c 2a	jsr $2a0c			jsr 	IFPreProcessBitwise 		; set up everything.
.29cb	d0 0f		bne $29dc			bne 	_IFBAExit
.29cd					_IFBALoop:
.29cd	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.29d0	35 00		and $00,x			and 	IM0,x
.29d2	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.29d5	e8		inx				inx
.29d6	c8		iny				iny
.29d7	c0 03		cpy #$03			cpy 	#3
.29d9	d0 f2		bne $29cd			bne 	_IFBALoop
.29db	18		clc				clc
.29dc					_IFBAExit:
.29dc	7a		ply				ply
.29dd	60		rts				rts
.29de					IFloatBitwiseOr:
.29de	5a		phy				phy
.29df	20 0c 2a	jsr $2a0c			jsr 	IFPreProcessBitwise 		; set up everything.
.29e2	d0 0f		bne $29f3			bne 	_IFBAExit
.29e4					_IFBALoop:
.29e4	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.29e7	15 00		ora $00,x			ora 	IM0,x
.29e9	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.29ec	e8		inx				inx
.29ed	c8		iny				iny
.29ee	c0 03		cpy #$03			cpy 	#3
.29f0	d0 f2		bne $29e4			bne 	_IFBALoop
.29f2	18		clc				clc
.29f3					_IFBAExit:
.29f3	7a		ply				ply
.29f4	60		rts				rts
.29f5					IFloatBitwiseXor:
.29f5	5a		phy				phy
.29f6	20 0c 2a	jsr $2a0c			jsr 	IFPreProcessBitwise 		; set up everything.
.29f9	d0 0f		bne $2a0a			bne 	_IFBAExit
.29fb					_IFBALoop:
.29fb	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.29fe	55 00		eor $00,x			eor 	IM0,x
.2a00	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2a03	e8		inx				inx
.2a04	c8		iny				iny
.2a05	c0 03		cpy #$03			cpy 	#3
.2a07	d0 f2		bne $29fb			bne 	_IFBALoop
.2a09	18		clc				clc
.2a0a					_IFBAExit:
.2a0a	7a		ply				ply
.2a0b	60		rts				rts
.2a0c					IFPreProcessBitwise:
.2a0c	a0 00		ldy #$00			ldy 	#0 							; set index.
.2a0e	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.2a10	15 03		ora $03,x			ora 	IExp,x
.2a12	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2a14	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2a16	38		sec				sec 								; carry set just in cases.
.2a17	60		rts				rts
.2a18					IFloatAbsoluteR0:
.2a18	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.2a1a	29 bf		and #$bf			and 	#IFSign ^ 255
.2a1c	85 11		sta $11				sta 	IFR0+IExp
.2a1e	18		clc				clc
.2a1f	60		rts				rts
.2a20					IFloatSquareRootR0:
.2a20	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.2a22	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.2a25	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.2a27	29 40		and #$40			and 	#IFSign
.2a29	d0 2f		bne $2a5a			bne 	_IFSRFail
.2a2b	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise 			; it will work better !
.2a2e	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.2a30	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister
.2a33	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2a35	20 26 29	jsr $2926			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2a38	18		clc				clc
.2a39	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2a3b	85 11		sta $11				sta 	IFR0+IExp
.2a3d	4a		lsr a				lsr 	a 							; which we can halve.
.2a3e	38		sec				sec 								; convert back
.2a3f	e9 17		sbc #$17			sbc 	#23
.2a41	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2a43	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.2a45	20 5c 2a	jsr $2a5c			jsr 	_IFSRNewton
.2a48	20 5c 2a	jsr $2a5c			jsr 	_IFSRNewton
.2a4b	20 5c 2a	jsr $2a5c			jsr 	_IFSRNewton
.2a4e	20 5c 2a	jsr $2a5c			jsr 	_IFSRNewton
.2a51	18		clc				clc
.2a52	60		rts				rts
.2a53					_IFSRZero:
.2a53	a2 0e		ldx #$0e			ldx 	#IFR0
.2a55	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2a58	18		clc				clc
.2a59	60		rts				rts
.2a5a					_IFSRFail:
.2a5a	38		sec				sec
.2a5b	60		rts				rts
.2a5c					_IFSRNewton:
.2a5c	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.2a5e	20 23 2d	jsr $2d23			jsr 	IFloatPushRx
.2a61	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2a63	20 23 2d	jsr $2d23			jsr 	IFloatPushRx
.2a66	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.2a68	20 f7 2a	jsr $2af7			jsr 	IFloatDivideFloat
.2a6b	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2a6d	20 44 2d	jsr $2d44			jsr 	IFloatPullRx
.2a70	20 ca 27	jsr $27ca			jsr 	IFloatAdd 					; now guess + original/guess
.2a73	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.2a75	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.2a78	a2 12		ldx #$12			ldx 	#IFR1
.2a7a	20 44 2d	jsr $2d44			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2a7d	60		rts				rts
.2a7e					IFloatFractionalR0:
.2a7e	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2a80	29 3f		and #$3f			and 	#IFXMask
.2a82	f0 17		beq $2a9b			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2a84	20 18 2a	jsr $2a18			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2a87	a2 0e		ldx #$0e			ldx 	#IFR0
.2a89	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise 			; normalise R0
.2a8c	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.2a8e	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister
.2a91	20 d4 2a	jsr $2ad4			jsr 	IFloatIntegerR0 			; take integer part of R0
.2a94	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.2a96	20 c3 27	jsr $27c3			jsr 	IFloatSubtract
.2a99	80 05		bra $2aa0			bra 	_FIPExit
.2a9b					_FIPZero:
.2a9b	a2 0e		ldx #$0e			ldx 	#IFR0
.2a9d	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2aa0					_FIPExit:
.2aa0	18		clc				clc
.2aa1	60		rts				rts
.2aa2					IFloatCompare:
.2aa2	20 c3 27	jsr $27c3			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2aa5	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2aa7	05 11		ora $11				ora 	IFR0+IExp
.2aa9	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.2aab	29 3f		and #$3f			and 	#IFXMask
.2aad	d0 19		bne $2ac8			bne 	_IFCNonInteger
.2aaf	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; check if zero
.2ab2	f0 0f		beq $2ac3			beq 	_IFCZero
.2ab4					_IFCReturnSign:
.2ab4	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2ab6	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2ab8	48		pha				pha
.2ab9	a9 01		lda #$01			lda 	#1
.2abb	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte 				; return to +1
.2abe	68		pla				pla 								; sign bit back
.2abf	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.2ac1	18		clc				clc
.2ac2	60		rts				rts
.2ac3					_IFCZero:
.2ac3	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2ac6	18		clc				clc
.2ac7	60		rts				rts
.2ac8					_IFCNonInteger:
.2ac8	a5 0e		lda $0e				lda 	IFR0+IM0
.2aca	29 00		and #$00			and		#$00
.2acc	05 0f		ora $0f				ora 	IFR0+IM1
.2ace	05 10		ora $10				ora 	IFR0+IM2
.2ad0	f0 f1		beq $2ac3			beq 	_IFCZero 					; near enough !
.2ad2	80 e0		bra $2ab4			bra 	_IFCReturnSign 				; return the sign of the difference.
.2ad4					IFloatIntegerR0:
.2ad4	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2ad6	29 3f		and #$3f			and 	#IFXMask
.2ad8	f0 1b		beq $2af5			beq 	_FIPExit 					; if so do nothing
.2ada	a2 0e		ldx #$0e			ldx 	#IFR0
.2adc	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise 			; normalise
.2adf	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; is it zero ?
.2ae2	f0 0e		beq $2af2			beq 	_FIPZero 					; if so return zero.
.2ae4					_FIPShift:
.2ae4	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2ae6	29 20		and #$20			and 	#$20 						; still -ve
.2ae8	f0 0b		beq $2af5			beq 	_FIPExit
.2aea	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight 			; shift mantissa right
.2aed	20 2d 2e	jsr $2e2d			jsr 	IFloatIncExponent 			; bump exponent
.2af0	80 f2		bra $2ae4			bra 	_FIPShift
.2af2					_FIPZero:
.2af2	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2af5					_FIPExit:
.2af5	18		clc				clc
.2af6	60		rts				rts
.2af7					IFloatDivideFloat:
.2af7	8e cb 06	stx $06cb			stx 	IFTarget  					; this is s1, s0 = R0
.2afa	20 2f 29	jsr $292f			jsr 	IFCalculateNewSign 			; calculate sign of result
.2afd	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise 			; normalise RX
.2b00	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.2b02	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise
.2b05	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.2b08	f0 56		beq $2b60			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2b0a	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.2b0c	20 26 29	jsr $2926			jsr 	IFMSignExtend
.2b0f	8d cc 06	sta $06cc			sta 	IFNewExponent
.2b12	ae cb 06	ldx $06cb			ldx 	IFTarget 					; calculate s1.exponent
.2b15	b5 03		lda $03,x			lda 	IExp,x
.2b17	20 26 29	jsr $2926			jsr 	IFMSignExtend
.2b1a	38		sec				sec
.2b1b	ed cc 06	sbc $06cc			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2b1e	38		sec				sec
.2b1f	e9 17		sbc #$17			sbc 	#23
.2b21	8d cc 06	sta $06cc			sta 	IFNewExponent
.2b24	20 62 2b	jsr $2b62			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2b27	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.2b29	10 08		bpl $2b33			bpl 	_IFDFNoShiftResult
.2b2b	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.2b2d	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.2b30	ee cc 06	inc $06cc			inc 	IFNewExponent
.2b33					_IFDFNoShiftResult:
.2b33	ad cc 06	lda $06cc			lda 	IFNewExponent 				; underflow/overflow check.
.2b36	30 06		bmi $2b3e			bmi 	_IFDFCheckUnderflow
.2b38	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2b3a	b0 24		bcs $2b60			bcs 	_IFDFDivZero
.2b3c	80 11		bra $2b4f			bra		_IFDFExit
.2b3e					_IFDFCheckUnderflow:
.2b3e	ad cc 06	lda $06cc			lda 	IFNewExponent 				; shift into a legal exponent.
.2b41	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2b43	b0 0a		bcs $2b4f			bcs 	_IFDFExit
.2b45	ee cc 06	inc $06cc			inc 	IFNewExponent
.2b48	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2b4a	20 03 2e	jsr $2e03			jsr 	IFloatShiftRight
.2b4d	80 ef		bra $2b3e			bra 	_IFDFCheckUnderflow
.2b4f					_IFDFExit:
.2b4f	ad cc 06	lda $06cc			lda 	IFNewExponent 				; combine exponent and sign.
.2b52	29 3f		and #$3f			and 	#IFXMask
.2b54	0d cd 06	ora $06cd			ora 	IFNewSign
.2b57	85 1d		sta $1d				sta 	IFRTemp+IExp
.2b59	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.2b5b	20 65 2d	jsr $2d65			jsr 	IFloatCopyFromRegister
.2b5e	18		clc				clc
.2b5f	60		rts				rts
.2b60					_IFDFDivZero:
.2b60	38		sec				sec
.2b61	60		rts				rts
.2b62					IFloatDivideSupport:
.2b62	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.2b64	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2b67	5a		phy				phy 								; main division loop x 23
.2b68	a0 17		ldy #$17			ldy 	#23
.2b6a					_IFDSLoop:
.2b6a	20 9d 29	jsr $299d			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2b6d	20 91 29	jsr $2991			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2b70	88		dey				dey
.2b71	d0 f7		bne $2b6a			bne 	_IFDSLoop 					; do it 24 times
.2b73	7a		ply				ply
.2b74	60		rts				rts
.2b75					IFloatIntegerToStringR0:
.2b75	8d ce 06	sta $06ce			sta 	IFBase 						; save base to use.
.2b78	20 55 2e	jsr $2e55			jsr 	IFloatBufferReset			; empty buffer
.2b7b	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.2b7d	29 3f		and #$3f			and 	#IFXMask
.2b7f	d0 1e		bne $2b9f			bne 	_IFIFail
.2b81	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.2b83	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.2b86	f0 0e		beq $2b96			beq 	_IFINotNegative
.2b88	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.2b8a	29 40		and #$40			and 	#IFSign
.2b8c	f0 08		beq $2b96			beq 	_IFINotNegative
.2b8e	a9 2d		lda #$2d			lda 	#"-"						; output -
.2b90	20 64 2e	jsr $2e64			jsr 	IFloatBufferWrite
.2b93	20 df 2d	jsr $2ddf			jsr 	IFloatNegate 				; tidy up !
.2b96					_IFINotNegative:
.2b96	20 a1 2b	jsr $2ba1			jsr 	_IFIRecursiveConvert 		; start converting
.2b99	20 5c 2e	jsr $2e5c			jsr 	IFloatGetBufferAddress
.2b9c	18		clc				clc
.2b9d	80 01		bra $2ba0			bra 	_IFIExit
.2b9f					_IFIFail:
.2b9f	38		sec				sec
.2ba0					_IFIExit:
.2ba0	60		rts				rts
.2ba1					_IFIRecursiveConvert:
.2ba1	a2 12		ldx #$12			ldx 	#IFR1
.2ba3	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister 		; R0->R1
.2ba6	a2 0e		ldx #$0e			ldx 	#IFR0
.2ba8	ad ce 06	lda $06ce			lda 	IFBase 						; Base -> R0
.2bab	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.2bae	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.2bb0	20 39 29	jsr $2939			jsr 	IFloatDivideInteger
.2bb3	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.2bb5	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero
.2bb8	f0 09		beq $2bc3			beq 	_IFIOutDigit
.2bba	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.2bbc	48		pha				pha
.2bbd	20 a1 2b	jsr $2ba1			jsr 	_IFIRecursiveConvert 		; convert the divider
.2bc0	68		pla				pla
.2bc1	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.2bc3					_IFIOutDigit:
.2bc3	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.2bc5	c9 0a		cmp #$0a			cmp	 	#10
.2bc7	90 02		bcc $2bcb			bcc 	_IFINotHex
.2bc9	69 06		adc #$06			adc 	#6
.2bcb					_IFINotHex:
.2bcb	69 30		adc #$30			adc 	#48
.2bcd	20 64 2e	jsr $2e64			jsr 	IFloatBufferWrite
.2bd0	60		rts				rts
.06ce					IFBase:
>06ce							.fill 	1
.2bd1					IFloatFloatToStringR0:
.2bd1	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2bd3	20 23 2d	jsr $2d23			jsr 	IFloatPushRx
.2bd6	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister
.2bd9	20 d4 2a	jsr $2ad4			jsr 	IFloatIntegerR0				; make R0 integer
.2bdc	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2bde	20 75 2b	jsr $2b75			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2be1	9c cf 06	stz $06cf			stz 	IFloatDecimalCount 			; zero the decimal count.
.2be4	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.2be6	29 3f		and #$3f			and 	#IFXMask
.2be8	f0 44		beq $2c2e			beq 	_IFFSExit
.2bea					_IFloatFracLoop:
.2bea	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.2bec	20 65 2d	jsr $2d65			jsr 	IFloatCopyFromRegister
.2bef	20 7e 2a	jsr $2a7e			jsr 	IFloatFractionalR0
.2bf2	20 0b 2e	jsr $2e0b			jsr 	IFloatNormalise
.2bf5	a2 16		ldx #$16			ldx 	#IFR2
.2bf7	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister 		; copy to R2
.2bfa	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.2bfc	a9 0a		lda #$0a			lda 	#10
.2bfe	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.2c01	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.2c03	20 74 28	jsr $2874			jsr 	IFloatMultiply
.2c06	a2 16		ldx #$16			ldx 	#IFR2
.2c08	20 76 2d	jsr $2d76			jsr 	IFloatCopyToRegister
.2c0b	20 d4 2a	jsr $2ad4			jsr 	IFloatIntegerR0 			; get integer part of R0
.2c0e	ad cf 06	lda $06cf			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2c11	c9 03		cmp #$03			cmp 	#3
.2c13	f0 16		beq $2c2b			beq 	_IFFSExitStripZero
.2c15	ad cf 06	lda $06cf			lda 	IFloatDecimalCount 			; written the DP yet ?
.2c18	d0 05		bne $2c1f			bne 	_IFloatNotFirst
.2c1a	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2c1c	20 64 2e	jsr $2e64			jsr 	IFloatBufferWrite
.2c1f					_IFloatNotFirst:
.2c1f	ee cf 06	inc $06cf			inc 	IFloatDecimalCount
.2c22	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.2c24	09 30		ora #$30			ora 	#"0"						; ASCII
.2c26	20 64 2e	jsr $2e64			jsr 	IFloatBufferWrite 			; write to the buffer.
.2c29	80 bf		bra $2bea			bra 	_IFloatFracLoop
.2c2b					_IFFSExitStripZero:
.2c2b	20 73 2e	jsr $2e73			jsr 	IFloatStripTrailingZeros
.2c2e					_IFFSExit:
.2c2e	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.2c30	20 44 2d	jsr $2d44			jsr 	IFloatPullRx
.2c33	20 5c 2e	jsr $2e5c			jsr 	IFloatGetBufferAddress
.2c36	18		clc				clc
.2c37	60		rts				rts
.06cf					IFloatDecimalCount:
>06cf							.fill 	1
.2c38					IFloatStringToFloatR0:
.2c38	8d d0 06	sta $06d0			sta 	IFCount 					; save it out.
.2c3b	86 0c		stx $0c				stx 	iTemp0
.2c3d	84 0d		sty $0d				sty 	iTemp0+1
.2c3f	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.2c41	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2c44	9c d1 06	stz $06d1			stz 	IFSignFlag 					; clear the sign flag
.2c47	20 d4 2c	jsr $2cd4			jsr 	IFSTFGetNext 				; get first
.2c4a	f0 1b		beq $2c67			beq 	_IFSTFFail 					; no character
.2c4c	90 10		bcc $2c5e			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2c4e	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2c50	d0 15		bne $2c67			bne 	_IFSTFFail
.2c52	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2c54	8d d1 06	sta $06d1			sta 	IFSignFlag
.2c57					_IFSTFLoop:
.2c57	20 d4 2c	jsr $2cd4			jsr 	IFSTFGetNext 				; get next
.2c5a	b0 0b		bcs $2c67			bcs 	_IFSTFFail 					; bad character.
.2c5c	f0 11		beq $2c6f			beq 	_IFSTFExit 					; end of data
.2c5e					_IFSTFHaveChar:
.2c5e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2c60	f0 08		beq $2c6a			beq 	_IFSTFDecimal
.2c62	20 f8 2c	jsr $2cf8			jsr 	IFSTFAddR0 					; add number in
.2c65	80 f0		bra $2c57			bra 	_IFSTFLoop 					; keep going until . or end.
.2c67					_IFSTFFail:
.2c67	38		sec				sec
.2c68	80 0d		bra $2c77			bra 	_IFSTFReturn
.2c6a					_IFSTFDecimal:
.2c6a	20 7f 2c	jsr $2c7f			jsr 	IFSTFDecimal 				; call the decimal places code.
.2c6d	b0 08		bcs $2c77			bcs 	_IFSTFReturn 				; error
.2c6f					_IFSTFExit:
.2c6f	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.2c71	0d d1 06	ora $06d1			ora 	IFSignFlag
.2c74	85 11		sta $11				sta 	IFR0+IExp
.2c76	18		clc				clc
.2c77					_IFSTFReturn:
.2c77	60		rts				rts
.2c78					IFloatAddDecimalToR0:
.2c78	8d d0 06	sta $06d0			sta 	IFCount 					; save it out.
.2c7b	86 0c		stx $0c				stx 	iTemp0
.2c7d	84 0d		sty $0d				sty 	iTemp0+1
.2c7f					IFSTFDecimal:
.2c7f	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.2c81	20 23 2d	jsr $2d23			jsr 	IFloatPushRx
.2c84	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2c86	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero
.2c89	9c d2 06	stz $06d2			stz 	IFDecimalPlaces
.2c8c					_IFSTDLoop:
.2c8c	20 d4 2c	jsr $2cd4			jsr 	IFSTFGetNext 				; get next
.2c8f	b0 41		bcs $2cd2			bcs 	_IFSTFFail2 				; bad character.
.2c91	f0 11		beq $2ca4			beq 	_IFSTFComplete 				; end of data, work out the result.
.2c93	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2c95	f0 39		beq $2cd0			beq 	_IFSTFExit2
.2c97	20 f8 2c	jsr $2cf8			jsr 	IFSTFAddR0 					; add number in
.2c9a	ee d2 06	inc $06d2			inc 	IFDecimalPlaces 			; count decimals
.2c9d	ad d2 06	lda $06d2			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2ca0	c9 03		cmp #$03			cmp 	#3
.2ca2	90 e8		bcc $2c8c			bcc 	_IFSTDLoop
.2ca4					_IFSTFComplete:
.2ca4	ad d2 06	lda $06d2			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2ca7	f0 27		beq $2cd0			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2ca9	3a		dec a				dec 	a 							; table indexed from 1.
.2caa	0a		asl a				asl 	a
.2cab	0a		asl a				asl 	a
.2cac	aa		tax				tax
.2cad	bd 0f 2d	lda $2d0f,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2cb0	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2cb2	bd 10 2d	lda $2d10,x			lda 	TableTen+1,x
.2cb5	85 13		sta $13				sta  	IFR1+IM1
.2cb7	bd 11 2d	lda $2d11,x			lda 	TableTen+2,x
.2cba	85 14		sta $14				sta  	IFR1+IM2
.2cbc	bd 12 2d	lda $2d12,x			lda 	TableTen+3,x
.2cbf	85 15		sta $15				sta  	IFR1+IExp
.2cc1	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.2cc3	20 74 28	jsr $2874			jsr 	IFloatMultiply
.2cc6	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.2cc8	20 44 2d	jsr $2d44			jsr 	IFloatPullRx
.2ccb	a2 12		ldx #$12			ldx 	#IFR1
.2ccd	20 ca 27	jsr $27ca			jsr 	IFloatAdd
.2cd0					_IFSTFExit2:
.2cd0	18		clc				clc
.2cd1	60		rts				rts
.2cd2					_IFSTFFail2:
.2cd2	38		sec				sec
.2cd3	60		rts				rts
.2cd4					IFSTFGetNext:
.2cd4	ad d0 06	lda $06d0			lda 	IFCount  					; if count is zero, return with Z set.
.2cd7	f0 19		beq $2cf2			beq 	_IFSTFReturnOk
.2cd9	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.2cdb	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.2cdd	d0 02		bne $2ce1			bne 	_IFSTFGNNoCarry
.2cdf	e6 0d		inc $0d				inc 	iTemp0+1
.2ce1					_IFSTFGNNoCarry:
.2ce1	ce d0 06	dec $06d0			dec 	IFCount 					; dec count.
.2ce4	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2ce6	f0 08		beq $2cf0			beq 	_IFSTFGOkay
.2ce8	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2cea	90 08		bcc $2cf4			bcc 	_IFSTFGFail
.2cec	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2cee	b0 04		bcs $2cf4			bcs 	_IFSTFGFail
.2cf0					_IFSTFGOkay:
.2cf0	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2cf2					_IFSTFReturnOk:
.2cf2	18		clc				clc
.2cf3	60		rts				rts
.2cf4					_IFSTFGFail:
.2cf4	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2cf6	38		sec				sec
.2cf7	60		rts				rts
.2cf8					IFSTFAddR0:
.2cf8	29 0f		and #$0f			and 	#15 						; to int value
.2cfa	48		pha				pha 								; save it.
.2cfb	a9 0a		lda #$0a			lda 	#10
.2cfd	a2 12		ldx #$12			ldx 	#IFR1
.2cff	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.2d02	20 74 28	jsr $2874			jsr 	IFloatMultiply
.2d05	68		pla				pla
.2d06	a2 12		ldx #$12			ldx 	#IFR1
.2d08	20 d6 2d	jsr $2dd6			jsr 	IFloatSetByte
.2d0b	20 ca 27	jsr $27ca			jsr 	IFloatAdd
.2d0e	60		rts				rts
.06d0					IFCount:
>06d0							.fill 	1
.06d1					IFSignFlag:
>06d1							.fill 	1
.06d2					IFDecimalPlaces:
>06d2							.fill 	1
.2d0f					TableTen:
>2d0f	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2d13	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2d17	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2d1b	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2d1f	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2d23					IFloatPushRx:
.2d23	5a		phy				phy
.2d24	ac d3 06	ldy $06d3			ldy 	IFStackIndex
.2d27	b5 00		lda $00,x			lda 	IM0,x
.2d29	99 d4 06	sta $06d4,y			sta 	IFStack,y
.2d2c	b5 01		lda $01,x			lda 	IM1,x
.2d2e	99 d5 06	sta $06d5,y			sta 	IFStack+1,y
.2d31	b5 02		lda $02,x			lda 	IM2,x
.2d33	99 d6 06	sta $06d6,y			sta 	IFStack+2,y
.2d36	b5 03		lda $03,x			lda 	IExp,x
.2d38	99 d7 06	sta $06d7,y			sta 	IFStack+3,y
.2d3b	c8		iny				iny
.2d3c	c8		iny				iny
.2d3d	c8		iny				iny
.2d3e	c8		iny				iny
.2d3f	8c d3 06	sty $06d3			sty 	IFStackIndex
.2d42	7a		ply				ply
.2d43	60		rts				rts
.2d44					IFloatPullRx:
.2d44	5a		phy				phy
.2d45	ac d3 06	ldy $06d3			ldy 	IFStackIndex
.2d48	88		dey				dey
.2d49	88		dey				dey
.2d4a	88		dey				dey
.2d4b	88		dey				dey
.2d4c	b9 d4 06	lda $06d4,y			lda 	IFStack,y
.2d4f	95 00		sta $00,x			sta 	IM0,x
.2d51	b9 d5 06	lda $06d5,y			lda 	IFStack+1,y
.2d54	95 01		sta $01,x			sta 	IM1,x
.2d56	b9 d6 06	lda $06d6,y			lda 	IFStack+2,y
.2d59	95 02		sta $02,x			sta 	IM2,x
.2d5b	b9 d7 06	lda $06d7,y			lda 	IFStack+3,y
.2d5e	95 03		sta $03,x			sta 	IExp,x
.2d60	8c d3 06	sty $06d3			sty 	IFStackIndex
.2d63	7a		ply				ply
.2d64	60		rts				rts
.06d3					IFStackIndex:
>06d3							.fill 	1
.06d4					IFStack:
>06d4							.fill 	16*4
.2d65					IFloatCopyFromRegister:
.2d65	b5 00		lda $00,x			lda 	0,x
.2d67	85 0e		sta $0e				sta 	IFR0
.2d69	b5 01		lda $01,x			lda 	1,x
.2d6b	85 0f		sta $0f				sta 	IFR0+1
.2d6d	b5 02		lda $02,x			lda 	2,x
.2d6f	85 10		sta $10				sta 	IFR0+2
.2d71	b5 03		lda $03,x			lda 	3,x
.2d73	85 11		sta $11				sta 	IFR0+3
.2d75	60		rts				rts
.2d76					IFloatCopyToRegister:
.2d76	a5 0e		lda $0e				lda 	IFR0
.2d78	95 00		sta $00,x			sta 	0,x
.2d7a	a5 0f		lda $0f				lda 	IFR0+1
.2d7c	95 01		sta $01,x			sta 	1,x
.2d7e	a5 10		lda $10				lda 	IFR0+2
.2d80	95 02		sta $02,x			sta 	2,x
.2d82	a5 11		lda $11				lda 	IFR0+3
.2d84	95 03		sta $03,x			sta 	3,x
.2d86	60		rts				rts
.2d87					IFloatLoadInline:
.2d87	68		pla				pla 								; pop address off to iTemp0
.2d88	85 0c		sta $0c				sta 	iTemp0
.2d8a	68		pla				pla
.2d8b	85 0d		sta $0d				sta 	iTemp0+1
.2d8d	a0 01		ldy #$01			ldy 	#1
.2d8f	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.2d91	95 00		sta $00,x			sta 	0,x
.2d93	c8		iny				iny
.2d94	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.2d96	95 01		sta $01,x			sta 	1,x
.2d98	c8		iny				iny
.2d99	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.2d9b	95 02		sta $02,x			sta 	2,x
.2d9d	c8		iny				iny
.2d9e	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.2da0	95 03		sta $03,x			sta 	3,x
.2da2	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2da3	a5 0c		lda $0c				lda 	iTemp0
.2da5	69 05		adc #$05			adc 	#5
.2da7	85 0c		sta $0c				sta 	iTemp0
.2da9	90 02		bcc $2dad			bcc 	_IFLINoCarry
.2dab	e6 0d		inc $0d				inc 	iTemp0+1
.2dad					_IFLINoCarry:
.2dad	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.2db0					IFloatMultiply8BitRx:
.2db0	5a		phy		        phy
.2db1	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2db3	a4 0e		ldy $0e		        ldy     IFR0+IM0
.2db5	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2db6	85 0e		sta $0e		        sta     IFR0+IM0
.2db8	84 0f		sty $0f		        sty     IFR0+IM1
.2dba	a9 00		lda #$00	        lda     #0
.2dbc	a0 08		ldy #$08	        ldy     #8
.2dbe					_IFMLoop:
.2dbe	90 03		bcc $2dc3	        bcc     _IFMNoAdd
.2dc0	18		clc		        clc
.2dc1	65 0f		adc $0f		        adc     IFR0+IM1
.2dc3					_IFMNoAdd:
.2dc3	6a		ror a		        ror     a
.2dc4	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2dc6	88		dey		        dey
.2dc7	d0 f5		bne $2dbe	        bne     _IFMLoop
.2dc9	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.2dcb	7a		ply		        ply
.2dcc	60		rts		        rts
.2dcd					IFloatCheckZero:
.2dcd	b5 00		lda $00,x			lda 	IM0,x
.2dcf	15 01		ora $01,x			ora 	IM1,x
.2dd1	15 02		ora $02,x			ora 	IM2,x
.2dd3	60		rts				rts
.2dd4					IFloatSetZero:
.2dd4	a9 00		lda #$00			lda 	#0
.2dd6					IFloatSetByte:
.2dd6	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2dd8	74 01		stz $01,x			stz 	IM1,x
.2dda	74 02		stz $02,x			stz 	IM2,x
.2ddc	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2dde	60		rts				rts
.2ddf					IFloatNegate:
.2ddf	b5 03		lda $03,x			lda 	IExp,x
.2de1	49 40		eor #$40			eor 	#IFSign
.2de3	95 03		sta $03,x			sta 	IExp,x
.2de5	18		clc				clc
.2de6	60		rts				rts
.2de7					IFloatMantissaNegate:
.2de7	38		sec				sec
.2de8	a9 00		lda #$00			lda 	#0
.2dea	f5 00		sbc $00,x			sbc 	IM0,x
.2dec	95 00		sta $00,x			sta 	IM0,x
.2dee	a9 00		lda #$00			lda 	#0
.2df0	f5 01		sbc $01,x			sbc 	IM1,x
.2df2	95 01		sta $01,x			sta 	IM1,x
.2df4	a9 00		lda #$00			lda 	#0
.2df6	f5 02		sbc $02,x			sbc 	IM2,x
.2df8	95 02		sta $02,x			sta 	IM2,x
.2dfa	60		rts				rts
.2dfb					IFloatShiftLeft:
.2dfb	18		clc				clc
.2dfc					IFloatRotateLeft:
.2dfc	36 00		rol $00,x			rol 	IM0,x
.2dfe	36 01		rol $01,x			rol 	IM1,x
.2e00	36 02		rol $02,x			rol 	IM2,x
.2e02	60		rts				rts
.2e03					IFloatShiftRight:
.2e03	18		clc				clc
.2e04					IFloatRotateRight:
.2e04	76 02		ror $02,x			ror 	IM2,x
.2e06	76 01		ror $01,x			ror 	IM1,x
.2e08	76 00		ror $00,x			ror 	IM0,x
.2e0a	60		rts				rts
.2e0b					IFloatNormalise:
.2e0b	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; is it zero
.2e0e	f0 18		beq $2e28			beq 	_IFNExitZero 				; if so exit
.2e10					_IFNLoop:
.2e10	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2e12	29 c0		and #$c0			and 	#$C0
.2e14	c9 40		cmp #$40			cmp 	#$40
.2e16	f0 13		beq $2e2b			beq 	_IFNExitOkay 				; if so , then we are done.
.2e18	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2e1a	29 3f		and #$3f			and 	#$3F
.2e1c	c9 20		cmp #$20			cmp 	#$20
.2e1e	f0 0b		beq $2e2b			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2e20	20 41 2e	jsr $2e41			jsr 	IFloatDecExponent
.2e23	20 fb 2d	jsr $2dfb			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2e26	80 e8		bra $2e10			bra 	_IFNLoop
.2e28					_IFNExitZero:
.2e28	20 d4 2d	jsr $2dd4			jsr 	IFloatSetZero 				; set the result to zero
.2e2b					_IFNExitOkay:
.2e2b	18		clc				clc  								; return with CC.
.2e2c	60		rts				rts
.2e2d					IFloatIncExponent:
.2e2d	b5 03		lda $03,x			lda 	IExp,x
.2e2f	48		pha				pha
.2e30	29 c0		and #$c0			and 	#$C0
.2e32	8d 14 07	sta $0714			sta 	IFXTemp
.2e35	68		pla				pla
.2e36	1a		inc a				inc 	a
.2e37	29 3f		and #$3f			and 	#$3F
.2e39	48		pha				pha
.2e3a	0d 14 07	ora $0714			ora 	IFXTemp
.2e3d	95 03		sta $03,x			sta 	IExp,x
.2e3f	68		pla				pla
.2e40	60		rts				rts
.2e41					IFloatDecExponent:
.2e41	b5 03		lda $03,x			lda 	IExp,x
.2e43	48		pha				pha
.2e44	29 c0		and #$c0			and 	#$C0
.2e46	8d 14 07	sta $0714			sta 	IFXTemp
.2e49	68		pla				pla
.2e4a	3a		dec a				dec 	a
.2e4b	29 3f		and #$3f			and 	#$3F
.2e4d	48		pha				pha
.2e4e	0d 14 07	ora $0714			ora 	IFXTemp
.2e51	95 03		sta $03,x			sta 	IExp,x
.2e53	68		pla				pla
.2e54	60		rts				rts
.0714					IFXTemp:
>0714							.fill 	1
.2e55					IFloatBufferReset:
.2e55	9c 15 07	stz $0715			stz 	IFBufferCount
.2e58	9c 16 07	stz $0716			stz 	IFBuffer
.2e5b	60		rts				rts
.2e5c					IFloatGetBufferAddress:
.2e5c	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2e5e	a2 16		ldx #$16			ldx 	#(IFBuffer & $FF)
.2e60	ad 15 07	lda $0715			lda 	IFBufferCount
.2e63	60		rts				rts
.2e64					IFloatBufferWrite:
.2e64	da		phx				phx
.2e65	ae 15 07	ldx $0715			ldx 	IFBufferCount
.2e68	9d 16 07	sta $0716,x			sta 	IFBuffer,x
.2e6b	9e 17 07	stz $0717,x			stz 	IFBuffer+1,x
.2e6e	ee 15 07	inc $0715			inc 	IFBufferCount
.2e71	fa		plx				plx
.2e72	60		rts				rts
.2e73					IFloatStripTrailingZeros:
.2e73	ae 15 07	ldx $0715			ldx 	IFBufferCount
.2e76	bd 15 07	lda $0715,x			lda 	IFBuffer-1,x
.2e79	c9 30		cmp #$30			cmp		#"0"
.2e7b	d0 0f		bne $2e8c			bne 	_IFSTExit
.2e7d	bd 14 07	lda $0714,x			lda 	IFBuffer-2,x
.2e80	c9 2e		cmp #$2e			cmp 	#"."
.2e82	f0 08		beq $2e8c			beq 	_IFSTExit
.2e84	ce 15 07	dec $0715			dec 	IFBufferCount
.2e87	9e 15 07	stz $0715,x			stz 	IFBuffer-1,x
.2e8a	80 e7		bra $2e73			bra 	IFloatStripTrailingZeros
.2e8c					_IFSTExit:
.2e8c	60		rts				rts
.0715					IFBufferCount:
>0715							.fill 	1
.0716					IFBuffer:
>0716							.fill 	25
.2e8d					IFloatCheck:
.2e8d	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.2e8f	09 40		ora #$40			ora 	#IFSign
.2e91	85 11		sta $11				sta 	IFR0+IExp
.2e93	20 ca 27	jsr $27ca			jsr 	IFloatAdd 					; add allowed to error.
.2e96	a2 0e		ldx #$0e			ldx 	#IFR0
.2e98	20 cd 2d	jsr $2dcd			jsr 	IFloatCheckZero 			; error if < 0
.2e9b	f0 06		beq $2ea3			beq 	_IFAOkay
.2e9d	a5 11		lda $11				lda 	IFR0+IExp
.2e9f	29 40		and #$40			and 	#IFSign
.2ea1	d0 01		bne $2ea4			bne 	_IFAFail
.2ea3					_IFAOkay:
.2ea3	60		rts				rts
.2ea4					_IFAFail:
.2ea4	38		sec				sec
.2ea5	68		pla				pla 								; get address - 2
.2ea6	e9 02		sbc #$02			sbc 	#2
.2ea8	aa		tax				tax
.2ea9	68		pla				pla
.2eaa	e9 00		sbc #$00			sbc 	#0
.2eac	a8		tay				tay
.2ead	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2eaf					_IFAStop:
>2eaf	db						.byte 	$DB 						; display an error AA ADR ADR
.2eb0	80 fd		bra $2eaf			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
