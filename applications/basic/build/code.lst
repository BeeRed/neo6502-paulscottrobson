
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D runEdit=1 -o build/basic.bin basic.asm
; Thu Jun 29 21:13:25 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					runEdit=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
=192					OSTextBufferSize = 192
.025d					OSEditWidth:
>025d							.fill 	1
.025e					OSEditLength:
>025e							.fill 	1
.025f					OSEditBuffer:
>025f							.fill 	OSTextBufferSize+1
>0320							.fill 	32
>0340							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSEnterLine              = $ffdf ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe2					OSScreenLine             = $ffe2 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe5					OSKeyboardDataProcess    = $ffe5 ; Keyboard update process.
=$ffe8					OSCheckBreak             = $ffe8 ; NZ if ESC pressed.
=$ffeb					OSIsKeyAvailable         = $ffeb ; Check if key available (CS if so)
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard, CC = success, CS = no key
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSWriteScreen            = $fff4 ; Write A to screen, CC = success
=$fff7					OSWriteString            = $fff7 ; Write length prefixed string YX to screen

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 8a 1f	jsr $1f8a			jsr 	PGMSetBaseAddress
.1007	20 19 2b	jsr $2b19			jsr 	IFInitialise 				; setup math library
.100a	4c d2 95	jmp $95d2			jmp 	TestCode
.100d	4c 0b 14	jmp $140b			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_STANDARD_LAST = $a1
=$a1					PR_DATA = $a1
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1010					Command_ASSERT:
.1010	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; get a number to assert
.1013	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1015	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.1018	f0 01		beq $101b			beq 	_CAFail 					; if so, the assert fails.
.101a	60		rts				rts
.101b					_CAFail:
.101b	4c 2b 26	jmp $262b		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101e					Command_CLEAR:
.101e	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1020	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1022	f0 14		beq $1038			beq 	_CLNoParam
.1024	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1026	f0 10		beq $1038			beq 	_CLNoParam
.1028	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; address for CLEAR
.102b	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102d	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102f	b0 0b		bcs $103c			bcs 	_CLMemory
.1031	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1033	90 07		bcc $103c			bcc 	_CLMemory
.1035	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1038					_CLNoParam:
.1038	20 3f 10	jsr $103f			jsr 	ClearCode
.103b	60		rts				rts
.103c					_CLMemory:
.103c	4c c5 26	jmp $26c5		jmp	ErrorV_memory
.103f					ClearCode:
.103f	20 9d 1f	jsr $1f9d			jsr 	PGMEndProgram 				; end program => zTemp0
.1042	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1044	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.1046	1a		inc a				inc 	a
.1047	85 29		sta $29				sta 	freeMemory+1
.1049	20 b8 2a	jsr $2ab8			jsr 	VARClearHashTables
.104c	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104f	20 f9 27	jsr $27f9			jsr 	StackReset 					; page passed on in A
.1052	20 58 28	jsr $2858			jsr 	StringSystemInitialise
.1055	20 40 25	jsr $2540			jsr 	ScanProcedures
.1058	20 95 14	jsr $1495			jsr 	Command_RESTORE
.105b	60		rts				rts
.105c					AllocateMemory:
.105c	5a		phy				phy 								; save Y
.105d	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.105f	5a		phy				phy
.1060	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1062	5a		phy				phy
.1063	a8		tay				tay 								; count is now in XY
.1064					_AllocateLoop:
.1064	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1066	d0 04		bne $106c			bne 	_AllocateOne
.1068	c0 00		cpy #$00			cpy 	#0
.106a	f0 15		beq $1081			beq 	_AllocateExit
.106c					_AllocateOne:
.106c	a9 00		lda #$00			lda 	#0 							; zero byte
.106e	92 28		sta ($28)			sta 	(freeMemory)
.1070	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1072	d0 05		bne $1079			bne 	_AllocateSkipCarry
.1074	e6 29		inc $29				inc 	freeMemory+1
.1076	20 85 10	jsr $1085			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1079					_AllocateSkipCarry:
.1079	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.107b	d0 01		bne $107e			bne 	_AllocateSkipBorrow
.107d	ca		dex				dex
.107e					_AllocateSkipBorrow:
.107e	88		dey				dey
.107f	80 e3		bra $1064			bra 	_AllocateLoop
.1081					_AllocateExit:
.1081	fa		plx				plx 								; restore address
.1082	68		pla				pla
.1083	7a		ply				ply 								; restore Y
.1084	60		rts				rts
.1085					ClearCheckMemory:
.1085	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.1087	1a		inc a				inc 	a 							; spacing 2 pages
.1088	1a		inc a				inc 	a
.1089	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.108c	b0 01		bcs $108f			bcs  	_CCMError
.108e	60		rts				rts
.108f					_CCMError:
.108f	4c c5 26	jmp $26c5		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1092					CommandDIM:
.1092	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1094	29 c0		and #$c0			and 	#$C0
.1096	c9 40		cmp #$40			cmp 	#$40
.1098	d0 39		bne $10d3			bne 	_CDSyntax
.109a	20 6f 2a	jsr $2a6f			jsr 	VARGetInfo 					; get information
.109d	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a0	29 02		and #$02			and 	#2
.10a2	f0 2f		beq $10d3			beq 	_CDSyntax
.10a4	20 21 2a	jsr $2a21			jsr 	VARFind 					; does it already exist
.10a7	b0 2d		bcs $10d6			bcs 	_CDExists
.10a9	20 cd 29	jsr $29cd			jsr 	VARCreate 					; create it - returns data ptr in XA
.10ac	da		phx				phx 								; save target address
.10ad	48		pha				pha
.10ae	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b1	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b3	20 d9 10	jsr $10d9			jsr 	CreateArray 				; create array to XA
.10b6	84 24		sty $24				sty 	zTemp1 						; save Y
.10b8	7a		ply				ply 								; restore target to zTemp0
.10b9	84 22		sty $22				sty 	zTemp0
.10bb	7a		ply				ply
.10bc	84 23		sty $23				sty 	zTemp0+1
.10be	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c0	a0 01		ldy #$01			ldy 	#1
.10c2	8a		txa				txa
.10c3	91 22		sta ($22),y			sta 	(zTemp0),y
.10c5	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c7	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 				; check )
.10ca	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10cc	c8		iny				iny
.10cd	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cf	f0 c1		beq $1092			beq 	CommandDIM
.10d1	88		dey				dey
.10d2	60		rts				rts
.10d3					_CDSyntax:
.10d3	4c d5 25	jmp $25d5		jmp	ErrorV_syntax
.10d6					_CDExists:
.10d6	4c 9d 26	jmp $269d		jmp	ErrorV_redefine
.10d9					CreateArray:
.10d9	8d 03 05	sta $0503			sta 	CAType						; save type
.10dc	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10df	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e1	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e3	f0 04		beq $10e9			beq 	_CATwoDimensions
.10e5	20 35 11	jsr $1135			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e8	60		rts				rts
.10e9					_CATwoDimensions:
.10e9	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10eb	8d 05 05	sta $0505			sta 	CADim1+1
.10ee	a5 08		lda $08				lda 	IFR0+IM0
.10f0	8d 04 05	sta $0504			sta 	CADim1+0
.10f3	20 92 27	jsr $2792			jsr 	ERRCheckComma 				; check comma
.10f6	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f9	5a		phy				phy 								; save Y position
.10fa	18		clc				clc 								; allocate the outer array of pointers.
.10fb	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fe	ad 04 05	lda $0504			lda 	CADim1
.1101	20 74 11	jsr $1174			jsr 	CSAAllocate 				; allocate the outer array
.1104	da		phx				phx									; save this address on the stack
.1105	48		pha				pha
.1106	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1108	85 26		sta $26				sta 	zTemp2
.110a					_CACreateSubLoop:
.110a	38		sec				sec
.110b	20 35 11	jsr $1135			jsr 	CreateSingleArray 			; create data array of required size.
.110e	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1110	91 26		sta ($26),y			sta 	(zTemp2),y
.1112	8a		txa				txa
.1113	c8		iny				iny
.1114	91 26		sta ($26),y			sta 	(zTemp2),y
.1116	18		clc				clc  								; next slot.
.1117	a5 26		lda $26				lda 	zTemp2
.1119	69 02		adc #$02			adc 	#2
.111b	85 26		sta $26				sta 	zTemp2
.111d	90 02		bcc $1121			bcc 	_CACNoCarry
.111f	e6 27		inc $27				inc 	zTemp2+1
.1121					_CACNoCarry:
.1121	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1124	d0 03		bne $1129			bne 	_CACNoBorrow
.1126	ce 05 05	dec $0505			dec 	CADim1+1
.1129					_CACNoBorrow:
.1129	ce 04 05	dec $0504			dec 	CADim1
.112c	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112f	10 d9		bpl $110a			bpl 	_CACreateSubLoop
.1131	68		pla				pla
.1132	fa		plx				plx
.1133	7a		ply				ply
.1134	60		rts				rts
.1135					CreateSingleArray:
.1135	5a		phy				phy
.1136	38		sec				sec 								; allocate memory block all zeros.
.1137	a5 08		lda $08				lda 	IFR0+IM0
.1139	a6 09		ldx $09				ldx 	IFR0+IM1
.113b	20 74 11	jsr $1174			jsr 	CSAAllocate
.113e	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1141	f0 2f		beq $1172			beq 	_CSANoInit
.1143	da		phx				phx 								; save address of new array
.1144	48		pha				pha
.1145	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1147	86 23		stx $23				stx 	zTemp0+1
.1149	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.114b	b1 22		lda ($22),y			lda 	(zTemp0),y
.114d	a8		tay				tay
.114e	b2 22		lda ($22)			lda 	(zTemp0)
.1150	aa		tax				tax
.1151					_CSAEraseString:
.1151	5a		phy				phy
.1152	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1154	a9 80		lda #$80			lda 	#$80
.1156	91 22		sta ($22),y			sta 	(zTemp0),y
.1158	7a		ply				ply
.1159	18		clc				clc 								; add 4 to next slot.
.115a	a5 22		lda $22				lda 	zTemp0
.115c	69 04		adc #$04			adc 	#4
.115e	85 22		sta $22				sta 	zTemp0
.1160	90 02		bcc $1164			bcc 	_CSAENoCarry
.1162	e6 23		inc $23				inc 	zTemp0+1
.1164					_CSAENoCarry:
.1164	e0 00		cpx #$00			cpx 	#0
.1166	d0 01		bne $1169			bne 	_CSANoBorrow
.1168	88		dey				dey
.1169					_CSANoBorrow:
.1169	ca		dex				dex
.116a	d0 e5		bne $1151			bne 	_CSAEraseString
.116c	c0 00		cpy #$00			cpy 	#0
.116e	d0 e1		bne $1151			bne 	_CSAEraseString
.1170	68		pla				pla
.1171	fa		plx				plx
.1172					_CSANoInit:
.1172	7a		ply				ply
.1173	60		rts				rts
.1174					CSAAllocate:
.1174	08		php				php 								; save type flag.
.1175	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1176	d0 01		bne $1179			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1178	e8		inx				inx
.1179					_CSAANoCarry:
.1179	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.117b	b0 2e		bcs $11ab			bcs 	_CSARange
.117d	28		plp				plp 								; restore type flag
.117e	08		php				php 								; save it back again.
.117f	da		phx				phx 								; save size.
.1180	48		pha				pha
.1181	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1183	90 03		bcc $1188			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188					_CSAATimes2:
.1188	0a		asl a				asl 	a
.1189	26 23		rol $23				rol 	zTemp0+1
.118b	18		clc				clc
.118c	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118e	90 02		bcc $1192			bcc 	_CSAANoCarry2
.1190	e6 23		inc $23				inc 	zTemp0+1
.1192					_CSAANoCarry2:
.1192	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1194	20 5c 10	jsr $105c			jsr 	AllocateMemory 				; allocate memory to XA
.1197	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1199	85 22		sta $22				sta 	zTemp0
.119b	68		pla				pla  								; write element count to first 2 bytes
.119c	92 22		sta ($22)			sta 	(zTemp0)
.119e	68		pla				pla 								; msb of element count
.119f	28		plp				plp 								; CC if pointer array
.11a0	b0 02		bcs $11a4			bcs 	_CSAAIsData
.11a2	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a4					_CSAAIsData:
.11a4	a0 01		ldy #$01			ldy 	#1
.11a6	91 22		sta ($22),y			sta 	(zTemp0),y
.11a8	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11aa	60		rts				rts
.11ab					_CSARange:
.11ab	4c e6 25	jmp $25e6		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ae					Command_Doke:
.11ae	38		sec				sec
.11af	80 01		bra $11b2			bra 	DPCommon
.11b1					Command_Poke:
.11b1	18		clc				clc
.11b2					DPCommon:
.11b2	08		php				php 								; CS if DOKE
.11b3	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; address
.11b6	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b8	48		pha				pha
.11b9	a5 09		lda $09				lda 	IFR0+IM1
.11bb	48		pha				pha
.11bc	20 92 27	jsr $2792			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bf	20 20 17	jsr $1720			jsr 	EXPEvalInteger16
.11c2	68		pla				pla 								; get address back
.11c3	85 23		sta $23				sta 	zTemp0+1
.11c5	68		pla				pla
.11c6	85 22		sta $22				sta 	zTemp0
.11c8	a5 08		lda $08				lda 	IFR0+IM0
.11ca	92 22		sta ($22)			sta 	(zTemp0)
.11cc	28		plp				plp
.11cd	90 08		bcc $11d7			bcc 	_DPExit
.11cf	5a		phy				phy
.11d0	a5 09		lda $09				lda 	IFR0+IM1
.11d2	a0 01		ldy #$01			ldy 	#1
.11d4	91 22		sta ($22),y			sta 	(zTemp0),y
.11d6	7a		ply				ply
.11d7					_DPExit:
.11d7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d8					Command_GOTO:
.11d8	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; get line number
.11db					GotoR0:
.11db	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11de	85 19		sta $19				sta 	codePtr+1
.11e0	64 18		stz $18				stz 	codePtr
.11e2					_GOSearch:
.11e2	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e4	f0 1f		beq $1205			beq 	_GOError
.11e6	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e8	b1 18		lda ($18),y			lda 	(codePtr),y
.11ea	c5 08		cmp $08				cmp 	IFR0+IM0
.11ec	d0 0a		bne $11f8			bne 	_GONext
.11ee	c8		iny				iny
.11ef	b1 18		lda ($18),y			lda 	(codePtr),y
.11f1	c5 09		cmp $09				cmp 	IFR0+IM1
.11f3	d0 03		bne $11f8			bne 	_GONext
.11f5	4c da 14	jmp $14da			jmp 	RUNNewLine
.11f8					_GONext:
.11f8	18		clc				clc 								; advance to next line.
.11f9	b2 18		lda ($18)			lda 	(codePtr)
.11fb	65 18		adc $18				adc 	codePtr
.11fd	85 18		sta $18				sta 	codePtr
.11ff	90 e1		bcc $11e2			bcc 	_GOSearch
.1201	e6 19		inc $19				inc 	codePtr+1
.1203	80 dd		bra $11e2			bra 	_GOSearch
.1205					_GOError:
.1205	4c 6a 27	jmp $276a		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1208					Command_Input:
.1208	a9 ff		lda #$ff			lda 	#$FF
.120a	8d 06 05	sta $0506			sta 	InputFlag
.120d	80 03		bra $1212			bra 	Command_IP_Main
.120f					Command_Print:
.120f	9c 06 05	stz $0506			stz 	InputFlag
.1212					Command_IP_Main:
.1212	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1213					_CPLoop:
.1213	08		php				php 								; save last action flag
.1214	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1216	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1218	f0 48		beq $1262			beq 	_CPExit 					; without consuming
.121a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.121c	f0 44		beq $1262			beq 	_CPExit
.121e	68		pla				pla 								; throw last action flag
.121f	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1221	c8		iny				iny
.1222	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1224	f0 39		beq $125f			beq 	_CPContinueWithSameLine
.1226	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1228	f0 30		beq $125a			beq 	_CPTab
.122a	88		dey				dey 								; undo the get.
.122b	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.122e	10 0b		bpl $123b			bpl	 	_CPNotInput
.1230	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1232	c9 40		cmp #$40			cmp 	#$40
.1234	d0 05		bne $123b			bne 	_CPNotInput
.1236	20 6b 12	jsr $126b			jsr 	_CPInputCode 				; input code
.1239	80 d7		bra $1212			bra 	Command_IP_Main 			; and go round again.
.123b					_CPNotInput:
.123b	20 ce 16	jsr $16ce			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123e	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1240	10 0e		bpl $1250			bpl 	_CPNumber
.1242	5a		phy				phy
.1243	18		clc				clc 								; string address to YX
.1244	a5 08		lda $08				lda 	IFR0+IM0
.1246	aa		tax				tax
.1247	a5 09		lda $09				lda 	IFR0+IM1
.1249	a8		tay				tay
.124a	20 9f 12	jsr $129f			jsr 	CPPrintYX 					; print YX
.124d	7a		ply				ply
.124e	80 c2		bra $1212			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1250					_CPNumber:
.1250	5a		phy				phy
.1251	20 29 2f	jsr $2f29			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1254	20 9f 12	jsr $129f			jsr 	CPPrintYX 					; print string at YX
.1257	7a		ply				ply
.1258	80 b8		bra $1212			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125a					_CPTab:
.125a	a9 09		lda #$09			lda 	#9 							; print TAB
.125c	20 b7 12	jsr $12b7			jsr 	CPPrintA
.125f					_CPContinueWithSameLine:
.125f	38		sec				sec 								; loop round with carry set, which
.1260	80 b1		bra $1213			bra 	_CPLoop 					; will inhibit final CR
.1262					_CPExit:
.1262	28		plp				plp 								; get last action flag
.1263	b0 05		bcs $126a			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1265	a9 0d		lda #$0d			lda 	#13 						; print new line
.1267	20 b7 12	jsr $12b7			jsr 	CPPrintA
.126a					_CPExit2:
.126a	60		rts				rts
.126b					_CPInputCode:
.126b	20 96 17	jsr $1796			jsr 	EXPTermR0 					; get the term.
.126e	5a		phy				phy 								; save position
.126f	20 b4 12	jsr $12b4			jsr 	CPInputA					; input a line to YX
.1272	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1274	30 18		bmi $128e			bmi 	_CPInputString
.1276	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1278	48		pha				pha
.1279	a5 09		lda $09				lda 	IFR0+IM1
.127b	48		pha				pha
.127c	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.127e	84 23		sty $23				sty 	zTemp0+1
.1280	20 80 1a	jsr $1a80			jsr 	VALConversionZTemp0
.1283	68		pla				pla 								; do the assign.
.1284	85 23		sta $23				sta 	zTemp0+1
.1286	68		pla				pla
.1287	85 22		sta $22				sta 	zTemp0
.1289	20 df 12	jsr $12df			jsr 	AssignNumber
.128c	7a		ply				ply
.128d	60		rts				rts
.128e					_CPInputString:
.128e	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1290	85 22		sta $22				sta 	zTemp0
.1292	a5 09		lda $09				lda 	IFR0+IM1
.1294	85 23		sta $23				sta 	zTemp0+1
.1296	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1298	84 09		sty $09				sty 	IFR0+IM1
.129a	20 f6 12	jsr $12f6			jsr 	AssignString 				; assign the string
.129d	7a		ply				ply 								; exit
.129e	60		rts				rts
.129f					CPPrintYX:
.129f	86 22		stx $22				stx 	zTemp0
.12a1	84 23		sty $23				sty 	zTemp0+1
.12a3	b2 22		lda ($22)			lda 	(zTemp0)
.12a5	aa		tax				tax
.12a6	f0 0b		beq $12b3			beq 	_CPPrintExit
.12a8	a0 01		ldy #$01			ldy 	#1
.12aa					_CPPrintAYXLoop:
.12aa	b1 22		lda ($22),y			lda 	(zTemp0),y
.12ac	20 b7 12	jsr $12b7			jsr 	CPPrintA
.12af	c8		iny				iny
.12b0	ca		dex				dex
.12b1	d0 f7		bne $12aa			bne 	_CPPrintAYXLoop
.12b3					_CPPrintExit:
.12b3	60		rts				rts
.12b4					CPInputA:
.12b4	4c df ff	jmp $ffdf			jmp 	OSEnterLine
.12b7					CPPrintA:
.12b7	4c f4 ff	jmp $fff4			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12ba					CommandLET:
.12ba	20 96 17	jsr $1796			jsr 	EXPTermR0 					; get term
.12bd	90 6f		bcc $132e			bcc 	CLError 					; must be a reference term.
.12bf	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c1	48		pha				pha
.12c2	a5 09		lda $09				lda 	IFR0+IM1
.12c4	48		pha				pha
.12c5	a5 0b		lda $0b				lda 	IFR0+IExp
.12c7	48		pha				pha
.12c8	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12ca	20 9a 27	jsr $279a			jsr 	ERRCheckA
.12cd	20 ce 16	jsr $16ce			jsr 	EXPEvaluateExpression 		; right hand side.
.12d0	68		pla				pla 								; type of l-expr
.12d1	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d3	30 5c		bmi $1331			bmi 	CLType
.12d5	fa		plx				plx 	 							; pop target address to zTemp0
.12d6	86 23		stx $23				stx 	zTemp0+1
.12d8	fa		plx				plx
.12d9	86 22		stx $22				stx 	zTemp0
.12db					AssignData:
.12db	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12dd	30 17		bmi $12f6			bmi 	AssignString
.12df					AssignNumber:
.12df	5a		phy				phy
.12e0	a0 03		ldy #$03			ldy 	#3
.12e2	a5 0b		lda $0b				lda 	IFR0+IExp
.12e4	91 22		sta ($22),y			sta 	(zTemp0),y
.12e6	88		dey				dey
.12e7	a5 0a		lda $0a				lda 	IFR0+IM2
.12e9	91 22		sta ($22),y			sta 	(zTemp0),y
.12eb	88		dey				dey
.12ec	a5 09		lda $09				lda 	IFR0+IM1
.12ee	91 22		sta ($22),y			sta 	(zTemp0),y
.12f0	a5 08		lda $08				lda 	IFR0+IM0
.12f2	92 22		sta ($22)			sta 	(zTemp0)
.12f4	7a		ply				ply
.12f5	60		rts				rts
.12f6					AssignString:
.12f6	5a		phy				phy
.12f7	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12f9	b1 22		lda ($22),y			lda 	(zTemp0),y
.12fb	12 22		ora ($22)			ora 	(zTemp0)
.12fd	f0 23		beq $1322			beq 	_CLConcreteString
.12ff	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1301	85 24		sta $24				sta 	zTemp1
.1303	b1 22		lda ($22),y			lda 	(zTemp0),y
.1305	85 25		sta $25				sta 	zTemp1+1
.1307	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.1309	38		sec				sec 								; we want 3 for slot size, status, string size.
.130a	e9 03		sbc #$03			sbc 	#3
.130c	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.130e	90 12		bcc $1322			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1310	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1312	1a		inc a				inc 	a
.1313	aa		tax				tax
.1314	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1316					_CLReplaceString:
.1316	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1318	c8		iny				iny
.1319	c8		iny				iny
.131a	91 24		sta ($24),y			sta 	(zTemp1),y
.131c	88		dey				dey
.131d	ca		dex				dex
.131e	d0 f6		bne $1316			bne 	_CLReplaceString
.1320	80 0a		bra $132c			bra 	_CLExit
.1322					_CLConcreteString:
.1322	20 0d 28	jsr $280d			jsr 	StringConcrete  			; concreted string in XA.
.1325	a0 01		ldy #$01			ldy 	#1 							; store the address
.1327	92 22		sta ($22)			sta 	(zTemp0)
.1329	8a		txa				txa
.132a	91 22		sta ($22),y			sta 	(zTemp0),y
.132c					_CLExit:
.132c	7a		ply				ply
.132d	60		rts				rts
.132e					CLError:
.132e	4c 08 27	jmp $2708		jmp	ErrorV_variable
.1331					CLType:
.1331	4c 05 26	jmp $2605		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1334					Command_LIST:
.1334	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1337	9c 08 05	stz $0508			stz 	CLFrom+1
.133a	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.133c	c9 99		cmp #$99			cmp 	#PR_COMMA
.133e	f0 1d		beq $135d			beq 	_CLToLine
.1340	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1342	f0 37		beq $137b			beq 	_CLDefaultTo
.1344	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1347	a5 08		lda $08				lda 	IFR0+IM0
.1349	8d 07 05	sta $0507			sta 	CLFrom
.134c	8d 09 05	sta $0509			sta 	CLTo
.134f	a5 09		lda $09				lda 	IFR0+IM1
.1351	8d 08 05	sta $0508			sta 	CLFrom+1
.1354	8d 0a 05	sta $050a			sta 	CLTo+1
.1357	b1 18		lda ($18),y			lda 	(codePtr),y
.1359	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.135b	f0 26		beq $1383			beq 	_CLList
.135d					_CLToLine:
.135d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.135f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1361	f0 18		beq $137b			beq 	_CLDefaultTo
.1363	20 92 27	jsr $2792			jsr 	ERRCheckComma 				; sep comma
.1366	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1368	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136a	f0 0f		beq $137b			beq 	_CLDefaultTo
.136c	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; there's a To value.
.136f	a5 08		lda $08				lda 	IFR0+IM0
.1371	8d 09 05	sta $0509			sta 	CLTo
.1374	a5 09		lda $09				lda 	IFR0+IM1
.1376	8d 0a 05	sta $050a			sta 	CLTo+1
.1379	80 08		bra $1383			bra 	_CLList
.137b					_CLDefaultTo:
.137b	a9 ff		lda #$ff			lda 	#$FF
.137d	8d 09 05	sta $0509			sta 	CLTo
.1380	8d 0a 05	sta $050a			sta 	CLTo+1
.1383					_CLList:
.1383	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1386	85 19		sta $19				sta 	codePtr+1
.1388	64 18		stz $18				stz 	codePtr
.138a	a2 f4		ldx #$f4			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.138c	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.138e	20 df 1d	jsr $1ddf			jsr 	TOKSetDetokeniseOutput
.1391					_CLLoop:
.1391	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1393	f0 51		beq $13e6			beq 	_CLExit
.1395	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.1398	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.139b	d0 4c		bne $13e9			bne 	_CLBreak
.139d	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.139f	20 ec 13	jsr $13ec			jsr 	_CLCompareLine
.13a2	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a4	f0 33		beq $13d9			beq 	_CLNext
.13a6	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13a8	20 ec 13	jsr $13ec			jsr 	_CLCompareLine
.13ab	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13ad	f0 2a		beq $13d9			beq 	_CLNext
.13af	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b1	b1 18		lda ($18),y			lda 	(codePtr),y
.13b3	aa		tax				tax
.13b4	88		dey				dey
.13b5	b1 18		lda ($18),y			lda 	(codePtr),y
.13b7	20 eb 28	jsr $28eb			jsr 	WriteIntXA
.13ba					_CLSpacing:
.13ba	a9 20		lda #$20			lda 	#32
.13bc	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13bf	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13c2	e0 06		cpx #$06			cpx 	#6
.13c4	d0 f4		bne $13ba			bne 	_CLSpacing
.13c6	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c8	a5 18		lda $18				lda 	codePtr
.13ca	18		clc				clc
.13cb	69 03		adc #$03			adc 	#3
.13cd	aa		tax				tax
.13ce	90 01		bcc $13d1			bcc 	_CLNoCarry2
.13d0	c8		iny				iny
.13d1					_CLNoCarry2:
.13d1	20 9a 1d	jsr $1d9a			jsr 	TOKDetokenise
.13d4	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d6	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13d9					_CLNext:
.13d9	18		clc				clc 								; advance to next line.
.13da	b2 18		lda ($18)			lda 	(codePtr)
.13dc	65 18		adc $18				adc 	codePtr
.13de	85 18		sta $18				sta 	codePtr
.13e0	90 02		bcc $13e4			bcc 	_CLNoCarry
.13e2	e6 19		inc $19				inc 	codePtr+1
.13e4					_CLNoCarry:
.13e4	80 ab		bra $1391			bra 	_CLLoop
.13e6					_CLExit:
.13e6	4c 0a 29	jmp $290a			jmp 	WarmStart
.13e9					_CLBreak:
.13e9	4c 60 27	jmp $2760		jmp	ErrorV_break
.13ec					_CLCompareLine:
.13ec	a0 01		ldy #$01			ldy 	#1
.13ee	38		sec				sec
.13ef	b1 18		lda ($18),y			lda 	(codePtr),y
.13f1	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f4	85 22		sta $22				sta 	zTemp0
.13f6	c8		iny				iny
.13f7	b1 18		lda ($18),y			lda 	(codePtr),y
.13f9	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13fc	90 0a		bcc $1408			bcc 	_CLIsNegative
.13fe	d0 05		bne $1405			bne 	_CLIsPositive
.1400	a5 22		lda $22				lda 	zTemp0
.1402	d0 01		bne $1405			bne 	_CLIsPositive
.1404	60		rts				rts
.1405					_CLIsPositive:
.1405	a9 01		lda #$01			lda 	#1
.1407	60		rts				rts
.1408					_CLIsNegative:
.1408	a9 ff		lda #$ff			lda 	#255
.140a	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.140b					Command_NEW:
.140b	20 91 1f	jsr $1f91			jsr 	PGMNewProgram 				; Reset current program
.140e	20 3f 10	jsr $103f			jsr 	ClearCode 					; Run CLR
.1411	4c 33 15	jmp $1533			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1414					Command_READ:
.1414	20 96 17	jsr $1796			jsr 	EXPTermR0 					; get term to R0
.1417	90 35		bcc $144e			bcc 	_CRSyntax 					; fail if not a reference.
.1419	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.141b	48		pha				pha
.141c	a5 09		lda $09				lda 	IFR0+IM1
.141e	48		pha				pha
.141f	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1421	48		pha				pha
.1422	20 a7 14	jsr $14a7			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1425	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1428	d0 27		bne $1451			bne 	_CRHaveData  				; forward for the next one.
.142a					_CRNextLine:
.142a	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.142c	f0 1a		beq $1448			beq 	_CRNoData
.142e					_CRKeepSearching:
.142e	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1430	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1432	20 e5 24	jsr $24e5			jsr 	ScanForward
.1435	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1437	f0 18		beq $1451			beq 	_CRHaveData 				; found it
.1439	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.143b	18		clc				clc 								; try the next line, keep going.
.143c	b2 18		lda ($18)			lda 	(codePtr)
.143e	65 18		adc $18				adc 	codePtr
.1440	85 18		sta $18				sta 	codePtr
.1442	90 e6		bcc $142a			bcc 	_CRNextLine
.1444	e6 19		inc $19				inc 	codePtr+1
.1446	80 e2		bra $142a			bra 	_CRNextLine
.1448					_CRNoData:
.1448	4c 8d 26	jmp $268d		jmp	ErrorV_data
.144b					_CLType:
.144b	4c 05 26	jmp $2605		jmp	ErrorV_type
.144e					_CRSyntax:
.144e	4c d5 25	jmp $25d5		jmp	ErrorV_syntax
.1451					_CRHaveData:
.1451	20 ce 16	jsr $16ce			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1454	68		pla				pla 								; type of l-expr
.1455	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1457	30 f2		bmi $144b			bmi 	_CLType
.1459	68		pla				pla 								; restore address
.145a	85 23		sta $23				sta 	zTemp0+1
.145c	68		pla				pla
.145d	85 22		sta $22				sta 	zTemp0
.145f	20 db 12	jsr $12db			jsr 	AssignData 					; write R0 there.
.1462	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1465	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1467	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1469	d0 04		bne $146f			bne 	_CRSwapBack
.146b	c8		iny				iny 								; consume comma
.146c	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.146f					_CRSwapBack:
.146f	20 a7 14	jsr $14a7			jsr 	SwapCodeDataPointers		; swap them back.
.1472	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1474	c8		iny				iny
.1475	c9 99		cmp #$99			cmp 	#PR_COMMA
.1477	f0 9b		beq $1414			beq 	Command_READ 				; if so go round again.
.1479	88		dey				dey 								; unpick get.
.147a	60		rts				rts
.147b					Command_DATA:
.147b	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147d	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.147f	20 e5 24	jsr $24e5			jsr 	ScanForward
.1482	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1484	d0 01		bne $1487			bne 	_CDNotEOL
.1486	88		dey				dey
.1487					_CDNotEOL:
.1487	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1488					Command_REM:
.1488					Command_REM2:
.1488	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.148a	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.148c	d0 06		bne $1494			bne 	_CRExit
.148e	c8		iny				iny 								; skip over it, it's a comment.
.148f	98		tya				tya
.1490	38		sec				sec
.1491	71 18		adc ($18),y			adc 	(codePtr),y
.1493	a8		tay				tay
.1494					_CRExit:
.1494	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1495					S
.1495					Command_RESTORE:
.1495	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1498	8d 0c 05	sta $050c			sta 	dataPtr+1
.149b	9c 0b 05	stz $050b			stz 	dataPtr
.149e	a9 03		lda #$03			lda 	#3 							; position start of line
.14a0	8d 0d 05	sta $050d			sta 	dataPos
.14a3	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a6	60		rts				rts
.14a7					SwapCodeDataPointers:
.14a7	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14aa	a6 18		ldx $18				ldx 	codePtr
.14ac	85 18		sta $18				sta 	codePtr
.14ae	8e 0b 05	stx $050b			stx 	dataPtr
.14b1	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b4	a6 19		ldx $19				ldx 	codePtr+1
.14b6	85 19		sta $19				sta 	codePtr+1
.14b8	8e 0c 05	stx $050c			stx 	dataPtr+1
.14bb	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14be	8c 0d 05	sty $050d			sty 	dataPos
.14c1	a8		tay				tay
.14c2	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c3					Command_RUN:
.14c3	20 3f 10	jsr $103f			jsr 	ClearCode					; clear everything out.
.14c6	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c9	85 19		sta $19				sta 	codePtr+1
.14cb	64 18		stz $18				stz 	codePtr
.14cd	80 0b		bra $14da			bra 	RUNNewLine
.14cf					RUNEndOfLine:
.14cf	18		clc				clc 								; advance to next line.
.14d0	b2 18		lda ($18)			lda 	(codePtr)
.14d2	65 18		adc $18				adc 	codePtr
.14d4	85 18		sta $18				sta 	codePtr
.14d6	90 02		bcc $14da			bcc 	_RELNoCarry
.14d8	e6 19		inc $19				inc 	codePtr+1
.14da					_RELNoCarry:
.14da					RUNNewLine:
.14da	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14dc	9a		txs				txs
.14dd	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14df	f0 52		beq $1533			beq 	Command_END
.14e1	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e3	b1 18		lda ($18),y			lda 	(codePtr),y
.14e5	8d 26 06	sta $0626			sta 	ERRLine
.14e8	c8		iny				iny
.14e9	b1 18		lda ($18),y			lda 	(codePtr),y
.14eb	8d 27 06	sta $0627			sta 	ERRLine+1
.14ee	c8		iny				iny 								; offset into codePtr for start of line.
.14ef					RUNNewCommand:
.14ef	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14f2	ce 10 05	dec $0510			dec 	checkCounter
.14f5	d0 0a		bne $1501			bne 	_RNCNoCheck
.14f7	5a		phy				phy 								; keyboard check.
.14f8	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.14fb	7a		ply				ply
.14fc	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.14ff	d0 1e		bne $151f			bne 	_RUNBreak
.1501					_RNCNoCheck:
.1501	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1503	10 1d		bpl $1522			bpl		_RUNNotToken 				; probably an identifier
.1505	c8		iny				iny 								; consume token
.1506	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1508	f0 e5		beq $14ef			beq 	RUNNewCommand
.150a	c9 a2		cmp #$a2			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.150c	b0 0e		bcs $151c			bcs 	_RUNSyntax
.150e	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1510	90 0a		bcc $151c			bcc 	_RUNSyntax
.1512	0a		asl a				asl 	a 							; double into X.
.1513	aa		tax				tax
.1514	20 19 15	jsr $1519			jsr 	_RUNDispatchMain			; call the main dispatcher
.1517	80 d6		bra $14ef			bra 	RUNNewCommand
.1519					_RUNDispatchMain:
.1519	7c 7e 1c	jmp ($1c7e,x)			jmp 	(VectorTable,x)
.151c					_RUNSyntax:
.151c	4c d5 25	jmp $25d5		jmp	ErrorV_syntax
.151f					_RUNBreak:
.151f	4c 60 27	jmp $2760		jmp	ErrorV_break
.1522					_RUNNotToken:
.1522	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1524	90 f6		bcc $151c			bcc 	_RUNSyntax
.1526	20 ba 12	jsr $12ba			jsr 	CommandLET 					; assignment
.1529	80 c4		bra $14ef			bra 	RUNNewCommand 				; loop round.
.152b					Command_Shift_Handler:
.152b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.152d	c8		iny				iny
.152e	0a		asl a				asl 	a 							; double into X
.152f	aa		tax				tax
.1530	7c 7e 1d	jmp ($1d7e,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1533					Command_END:
.1533	4c 0a 29	jmp $290a			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1536					Command_STOP:
.1536	4c 79 26	jmp $2679		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1539					Command_Sys:
.1539	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; execution address
.153c	5a		phy				phy
.153d	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1540	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1543	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.1546	20 4b 15	jsr $154b			jsr 	_CSCallIFR0 				; call the code
.1549	7a		ply				ply
.154a	60		rts				rts
.154b					_CSCallIFR0:
.154b	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.154e					NoExec01:
.154e					NoExec02:
.154e					NoExec03:
.154e					NoExec04:
.154e					NoExec05:
.154e					NoExec06:
.154e					NoExec07:
.154e					NoExec08:
.154e	4c d5 25	jmp $25d5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1551					EXPBinAdd:
.1551	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1553	30 6f		bmi $15c4			bmi 	EXPConcatenate
.1555	a2 0c		ldx #$0c			ldx 	#IFR1
.1557	4c 24 2b	jmp $2b24			jmp 	IFloatAdd
.155a					EXPBinSub:
.155a	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.155c	30 3f		bmi $159d			bmi 	EXPTypeError
.155e	a2 0c		ldx #$0c			ldx 	#IFR1
.1560	4c 1d 2b	jmp $2b1d			jmp 	IFloatSubtract
.1563					EXPBinMul:
.1563	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1565	30 36		bmi $159d			bmi 	EXPTypeError
.1567	a2 0c		ldx #$0c			ldx 	#IFR1
.1569	4c ce 2b	jmp $2bce			jmp 	IFloatMultiply
.156c					EXPBinFDiv:
.156c	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.156e	30 2d		bmi $159d			bmi 	EXPTypeError
.1570	a2 0c		ldx #$0c			ldx 	#IFR1
.1572	20 50 2e	jsr $2e50			jsr 	IFloatDivideFloat
.1575	b0 0f		bcs $1586			bcs 	EXPDZero
.1577	60		rts				rts
.1578					EXPBinIDiv:
.1578	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.157a	30 21		bmi $159d			bmi 	EXPTypeError
.157c	a2 0c		ldx #$0c			ldx 	#IFR1
.157e	20 50 2e	jsr $2e50			jsr 	IFloatDivideFloat
.1581	b0 03		bcs $1586			bcs 	EXPDZero
.1583	4c 2d 2e	jmp $2e2d			jmp 	IFloatIntegerR0
.1586					EXPDZero:
.1586	4c 4e 26	jmp $264e		jmp	ErrorV_divzero
.1589					EXPBinIMod:
.1589	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.158b	30 10		bmi $159d			bmi 	EXPTypeError
.158d	a2 0c		ldx #$0c			ldx 	#IFR1
.158f	5a		phy				phy
.1590	20 63 2d	jsr $2d63			jsr 	IFPreProcessBitwise 		; set up everything.
.1593	d0 05		bne $159a			bne 	EXPDRange
.1595	20 9c 2c	jsr $2c9c			jsr 	IFloatModulusInteger
.1598	7a		ply				ply
.1599	60		rts				rts
.159a					EXPDRange:
.159a	4c e6 25	jmp $25e6		jmp	ErrorV_range
.159d					EXPTypeError:
.159d	4c 05 26	jmp $2605		jmp	ErrorV_type
.15a0					EXPBinAnd:
.15a0	24 0b		bit $0b				bit 	IFR0+IExp
.15a2	30 f9		bmi $159d			bmi 	EXPTypeError
.15a4	a2 0c		ldx #$0c			ldx 	#IFR1
.15a6	20 1e 2d	jsr $2d1e			jsr 	IFloatBitwiseAnd
.15a9	b0 ef		bcs $159a			bcs 	EXPDRange
.15ab	60		rts				rts
.15ac					EXPBinOr:
.15ac	24 0b		bit $0b				bit 	IFR0+IExp
.15ae	30 ed		bmi $159d			bmi 	EXPTypeError
.15b0	a2 0c		ldx #$0c			ldx 	#IFR1
.15b2	20 35 2d	jsr $2d35			jsr 	IFloatBitwiseOr
.15b5	b0 e3		bcs $159a			bcs 	EXPDRange
.15b7	60		rts				rts
.15b8					EXPBinXor:
.15b8	24 0b		bit $0b				bit 	IFR0+IExp
.15ba	30 e1		bmi $159d			bmi 	EXPTypeError
.15bc	a2 0c		ldx #$0c			ldx 	#IFR1
.15be	20 4c 2d	jsr $2d4c			jsr 	IFloatBitwiseXor
.15c1	b0 d7		bcs $159a			bcs 	EXPDRange
.15c3	60		rts				rts
.15c4					EXPConcatenate:
.15c4	18		clc				clc
.15c5	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c7	72 0c		adc ($0c)			adc 	(IFR1)
.15c9	b0 2d		bcs $15f8			bcs 	_EXPCError 					; far too long.
.15cb	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15cd	da		phx				phx
.15ce	a6 09		ldx $09				ldx 	IFR0+1
.15d0	da		phx				phx
.15d1	20 80 28	jsr $2880			jsr 	StringTempAllocate 			; allocate string, set up return
.15d4	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d6	a5 0c		lda $0c				lda 	IFR1
.15d8	20 e1 15	jsr $15e1			jsr 	_EXPCCopyXA
.15db	fa		plx				plx 								; copy second string
.15dc	68		pla				pla
.15dd	20 e1 15	jsr $15e1			jsr 	_EXPCCopyXA
.15e0	60		rts				rts
.15e1					_EXPCCopyXA:
.15e1	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e3	85 22		sta $22				sta 	zTemp0
.15e5	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15e7	f0 0e		beq $15f7			beq 	_EXPCCExit 					; nothing in string
.15e9	aa		tax				tax 								; count
.15ea	5a		phy				phy 								; start position
.15eb	a0 01		ldy #$01			ldy 	#1
.15ed					_EXPCCLoop:
.15ed	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15ef	20 b5 28	jsr $28b5			jsr 	StringTempWrite
.15f2	c8		iny				iny
.15f3	ca		dex				dex
.15f4	d0 f7		bne $15ed			bne 	_EXPCCLoop
.15f6	7a		ply				ply
.15f7					_EXPCCExit:
.15f7	60		rts				rts
.15f8					_EXPCError:
.15f8	4c f2 26	jmp $26f2		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15fb					EXPReturnTrue:
.15fb	a2 08		ldx #$08			ldx 	#IFR0
.15fd	a9 01		lda #$01			lda 	#1
.15ff	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.1602	20 37 31	jsr $3137			jsr 	IFloatNegate
.1605	60		rts				rts
.1606					EXPReturnFalse:
.1606	a2 08		ldx #$08			ldx 	#IFR0
.1608	4c 2c 31	jmp $312c			jmp 	IFloatSetZero
.160b					EXPCompareEqual:
.160b	20 41 16	jsr $1641			jsr 	EXPCompareBaseCode
.160e	c9 00		cmp #$00			cmp 	#0
.1610	f0 e9		beq $15fb			beq 	EXPReturnTrue
.1612	80 f2		bra $1606			bra 	EXPReturnFalse
.1614					EXPCompareLess:
.1614	20 41 16	jsr $1641			jsr 	EXPCompareBaseCode
.1617	c9 ff		cmp #$ff			cmp 	#$FF
.1619	f0 e0		beq $15fb			beq 	EXPReturnTrue
.161b	80 e9		bra $1606			bra 	EXPReturnFalse
.161d					EXPCompareGreater:
.161d	20 41 16	jsr $1641			jsr 	EXPCompareBaseCode
.1620	c9 01		cmp #$01			cmp 	#1
.1622	f0 d7		beq $15fb			beq 	EXPReturnTrue
.1624	80 e0		bra $1606			bra 	EXPReturnFalse
.1626					EXPCompareNotEqual:
.1626	20 41 16	jsr $1641			jsr 	EXPCompareBaseCode
.1629	c9 00		cmp #$00			cmp 	#0
.162b	d0 ce		bne $15fb			bne 	EXPReturnTrue
.162d	80 d7		bra $1606			bra 	EXPReturnFalse
.162f					EXPCompareLessEqual:
.162f	20 41 16	jsr $1641			jsr 	EXPCompareBaseCode
.1632	c9 01		cmp #$01			cmp 	#1
.1634	d0 c5		bne $15fb			bne 	EXPReturnTrue
.1636	80 ce		bra $1606			bra 	EXPReturnFalse
.1638					EXPCompareGreaterEqual:
.1638	20 41 16	jsr $1641			jsr 	EXPCompareBaseCode
.163b	c9 ff		cmp #$ff			cmp 	#$FF
.163d	d0 bc		bne $15fb			bne 	EXPReturnTrue
.163f	80 c5		bra $1606			bra 	EXPReturnFalse
.1641					EXPCompareBaseCode:
.1641	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1643	30 10		bmi $1655			bmi 	_EXCBCString
.1645	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1647	20 fb 2d	jsr $2dfb			jsr 	IFloatCompare
.164a	a5 08		lda $08				lda 	IFR0+IM0
.164c	f0 06		beq $1654			beq 	_EXCBCExit 					; return 0 if zero
.164e	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1650	50 02		bvc $1654			bvc 	_EXCBCExit
.1652	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1654					_EXCBCExit:
.1654	60		rts				rts
.1655					_EXCBCString:
.1655	5a		phy				phy
.1656	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1658	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.165a	90 02		bcc $165e			bcc 	_EXCBCSmaller
.165c	b2 0c		lda ($0c)			lda 	(IFR1)
.165e					_EXCBCSmaller:
.165e	aa		tax				tax
.165f	f0 0d		beq $166e			beq 	_EXCBCMatches 				; if zero common length matches
.1661	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1663					_EXCBCCheckSmallerMatches:
.1663	c8		iny				iny 								; compare directly as far as common length
.1664	38		sec				sec
.1665	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1667	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1669	d0 08		bne $1673			bne 	_EXCBCExit2
.166b	ca		dex				dex
.166c	d0 f5		bne $1663			bne 	_EXCBCCheckSmallerMatches
.166e					_EXCBCMatches:
.166e	38		sec				sec
.166f	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1671	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1673					_EXCBCExit2:
.1673	7a		ply				ply
.1674	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1676	f0 04		beq $167c			beq 	_EXCBCReturn
.1678	30 03		bmi $167d			bmi 	_EXCBCFF 					; return $FF if <
.167a	a9 01		lda #$01			lda 	#1 							; return 1 if >
.167c					_EXCBCReturn:
.167c	60		rts				rts
.167d					_EXCBCFF:
.167d	a9 ff		lda #$ff			lda 	#$FF
.167f	60		rts				rts
.1680					_EXCBCRange:
.1680	4c e6 25	jmp $25e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1683					EXPBinLeft:
.1683	a9 ff		lda #$ff			lda 	#$FF
.1685	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1688	4c 8e 16	jmp $168e			jmp 	EXPShiftCommon
.168b					EXPBinRight:
.168b	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.168e					EXPShiftCommon:
.168e	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1690	05 0f		ora $0f				ora 	IFR1+IExp
.1692	29 7f		and #$7f			and 	#$7F
.1694	d0 35		bne $16cb			bne 	_EXPSRange
.1696	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1698	29 e0		and #$e0			and 	#$E0
.169a	05 09		ora $09				ora 	IFR0+IM1
.169c	05 0a		ora $0a				ora 	IFR0+IM2
.169e	d0 25		bne $16c5			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.16a0	5a		phy				phy
.16a1	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a3	29 1f		and #$1f			and 	#$1F
.16a5	f0 17		beq $16be			beq 	_EXPSExit 					; exit if zero
.16a7	a8		tay				tay
.16a8					_EXPSLoop:
.16a8	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16aa	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16ad	30 05		bmi $16b4			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16af	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.16b2	80 07		bra $16bb			bra 	_EXPSContinue
.16b4					_EXPSShiftLeft:
.16b4	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.16b7	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16b9	30 10		bmi $16cb			bmi 	_EXPSRange
.16bb					_EXPSContinue:
.16bb	88		dey				dey 								; do it Y times
.16bc	d0 ea		bne $16a8			bne 	_EXPSLoop
.16be					_EXPSExit:
.16be	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16c0	20 bd 30	jsr $30bd			jsr 	IFloatCopyFromRegister
.16c3	7a		ply				ply
.16c4	60		rts				rts
.16c5					_EXPSShiftZero:
.16c5	a2 08		ldx #$08			ldx 	#IFR0
.16c7	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.16ca	60		rts				rts
.16cb					_EXPSRange:
.16cb	4c e6 25	jmp $25e6		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16ce					EXPEvaluateExpression:
.16ce	a9 00		lda #$00			lda 	#0 							; current precedence
.16d0					EXPEvaluateExpressionPrecedenceA:
.16d0	48		pha				pha
.16d1	20 4b 17	jsr $174b			jsr 	EXPTermValueR0				; do first term.
.16d4					_EELoop:
.16d4	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d6	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d8	90 31		bcc $170b			bcc 	_EEExit
.16da	aa		tax				tax 								; access the precedence of the operator.
.16db	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16dc	dd a9 19	cmp $19a9,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16df	b0 2b		bcs $170c			bcs 	_EEExit2
.16e1	48		pha				pha 								; save current precedence.
.16e2	da		phx				phx 								; save operator
.16e3	c8		iny				iny 								; consume operator
.16e4	da		phx				phx
.16e5	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e7	20 7b 30	jsr $307b			jsr 	IFloatPushRx
.16ea	fa		plx				plx
.16eb	bd a9 19	lda $19a9,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16ee	20 d0 16	jsr $16d0			jsr 	EXPEvaluateExpressionPrecedenceA
.16f1	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f3	20 9c 30	jsr $309c			jsr 	IFloatPullRx
.16f6	fa		plx				plx 								; operator
.16f7	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f9	45 0f		eor $0f				eor 	IFR1+IExp
.16fb	30 08		bmi $1705			bmi 	_EEType
.16fd					_EETypeOkay:
.16fd	8a		txa				txa
.16fe	0a		asl a				asl 	a 							; double -> X
.16ff	aa		tax				tax
.1700	20 08 17	jsr $1708			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1703	80 cf		bra $16d4			bra 	_EELoop
.1705					_EEType:
.1705	4c 05 26	jmp $2605		jmp	ErrorV_type
.1708					_EECallBinary:
.1708	7c 7e 1c	jmp ($1c7e,x)			jmp 	(VectorTable,x)
.170b					_EEExit:
.170b	68		pla				pla 								; throw precedence
.170c					_EEExit2:
.170c	18		clc				clc
.170d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.170e					EXPEvalNumber:
.170e	20 ce 16	jsr $16ce			jsr 	EXPEvaluateExpression 		; get a value
.1711	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1713	30 01		bmi $1716			bmi 	EVUType
.1715	60		rts				rts
.1716					EVUType:
.1716	4c 05 26	jmp $2605		jmp	ErrorV_type
.1719					EXPEvalInteger:
.1719	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.171c	20 2d 2e	jsr $2e2d			jsr 	IFloatIntegerR0
.171f	60		rts				rts
.1720					EXPEvalInteger16:
.1720	20 19 17	jsr $1719			jsr 	EXPEvalInteger 				; get integer
.1723	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1725	d0 21		bne $1748			bne 	EVURange
.1727	a6 09		ldx $09				ldx 	IFR0+IM1
.1729	a5 08		lda $08				lda 	IFR0+IM0
.172b	60		rts				rts
.172c					EXPEvalInteger8:
.172c	20 19 17	jsr $1719			jsr 	EXPEvalInteger 				; get integer
.172f	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1731	05 09		ora $09				ora 	IFR0+IM1
.1733	d0 13		bne $1748			bne 	EVURange
.1735	a5 08		lda $08				lda 	IFR0+IM0
.1737	60		rts				rts
.1738					EXPEvalString:
.1738	20 ce 16	jsr $16ce			jsr 	EXPEvaluateExpression 		; get value
.173b	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.173d	10 d7		bpl $1716			bpl 	EVUType
.173f	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1741	86 23		stx $23				stx 	zTemp0+1
.1743	a5 08		lda $08				lda 	IFR0+IM0
.1745	85 22		sta $22				sta 	zTemp0
.1747	60		rts				rts
.1748					EVURange:
.1748	4c e6 25	jmp $25e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.174b					EXPTermValueR0:
.174b	20 96 17	jsr $1796			jsr 	EXPTermR0 					; get term
.174e	90 45		bcc $1795			bcc 	_ETVNotReference 			; exit if value.
.1750	5a		phy				phy
.1751	a0 03		ldy #$03			ldy 	#3 							; get type
.1753	b1 08		lda ($08),y			lda 	(IFR0),y
.1755	30 14		bmi $176b			bmi 	_ETVDereferenceString
.1757	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1759	88		dey				dey 								; get byte 2
.175a	b1 08		lda ($08),y			lda 	(IFR0),y
.175c	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.175e	88		dey				dey 								; get byte 1
.175f	b1 08		lda ($08),y			lda 	(IFR0),y
.1761	aa		tax				tax 								; save in X so we can overwrite it
.1762	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1764	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1766	85 08		sta $08				sta 	IFR0+IM0
.1768	7a		ply				ply
.1769	18		clc				clc
.176a	60		rts				rts
.176b					_ETVDereferenceString:
.176b	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176d	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.176f	12 08		ora ($08)			ora 	(IFR0)
.1771	f0 11		beq $1784			beq 	_ETVNull 					; if so, return a fake NULL.
.1773	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1775	aa		tax				tax
.1776	b2 08		lda ($08)			lda 	(IFR0)
.1778	18		clc				clc 								; add two so points to actual string.
.1779	69 02		adc #$02			adc 	#2
.177b	90 01		bcc $177e			bcc 	_EVDSNoCarry
.177d	e8		inx				inx
.177e					_EVDSNoCarry:
.177e	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1780	85 08		sta $08				sta 	IFR0
.1782	80 08		bra $178c			bra 	_ETVFillExit 				; tidy up and exit.
.1784					_ETVNull:
.1784	a9 94		lda #$94			lda 	#_EVTNString & $FF
.1786	85 08		sta $08				sta 	IFR0+IM0
.1788	a9 17		lda #$17			lda 	#_EVTNString >> 8
.178a	85 09		sta $09				sta 	IFR0+IM1
.178c					_ETVFillExit:
.178c	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.178e	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1790	85 0b		sta $0b				sta 	IFR0+IExp
.1792	7a		ply				ply
.1793	60		rts				rts
.1794					_EVTNString:
>1794	00						.byte 	0
.1795					_ETVNotReference:
.1795	60		rts				rts
.1796					EXPTermR0:
.1796	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1798	30 10		bmi $17aa			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.179a	c8		iny				iny 								; consume element
.179b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179d	b0 08		bcs $17a7			bcs 	_ETMIdentifier
.179f	20 d5 17	jsr $17d5			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.17a2	20 08 18	jsr $1808			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a5	18		clc				clc 								; return value ok
.17a6	60		rts				rts
.17a7					_ETMIdentifier:
.17a7	4c c5 2a	jmp $2ac5			jmp 	VARCheckSimple 				; check variables, seperate module.
.17aa					_ETMIsUnaryOrMinus:
.17aa	c8		iny				iny 								; consume element
.17ab	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17ad	d0 0e		bne $17bd			bne 	_ETMCheckUnary
.17af	20 4b 17	jsr $174b			jsr 	EXPTermValueR0 				; get a term to negate
.17b2	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b4	20 37 31	jsr $3137			jsr 	IFloatNegate
.17b7	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17b9	30 17		bmi $17d2			bmi 	_ETMUnaryType				; if so error.
.17bb	18		clc				clc
.17bc	60		rts				rts
.17bd					_ETMCheckUnary:
.17bd	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17bf	90 0e		bcc $17cf			bcc 	_ETMUnarySyntax
.17c1	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c3	b0 0a		bcs $17cf			bcs 	_ETMUnarySyntax
.17c5	0a		asl a				asl 	a 							; make it into an index => X
.17c6	aa		tax				tax
.17c7	20 cc 17	jsr $17cc			jsr 	_ETMCallUnaryFunction 		; call the function
.17ca	18		clc				clc 								; and return it.
.17cb	60		rts				rts
.17cc					_ETMCallUnaryFunction:
.17cc	7c 7e 1c	jmp ($1c7e,x)			jmp 	(VectorTable,x)
.17cf					_ETMUnarySyntax:
.17cf	4c d5 25	jmp $25d5		jmp	ErrorV_syntax
.17d2					_ETMUnaryType:
.17d2	4c 05 26	jmp $2605		jmp	ErrorV_type
.17d5					EXPExtractTokenisedInteger:
.17d5	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17d7	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17d9	64 09		stz $09				stz 	IFR0+IM1
.17db	64 0a		stz $0a				stz 	IFR0+IM2
.17dd					_ETMConstant:
.17dd	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17df	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17e1	b0 24		bcs $1807			bcs 	_ETMCExit 					; no, exit.
.17e3	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17e5	a5 09		lda $09				lda 	IFR0+IM1
.17e7	85 0a		sta $0a				sta 	IFR0+IM2
.17e9	a5 08		lda $08				lda 	IFR0+IM0
.17eb	85 09		sta $09				sta 	IFR0+IM1
.17ed	64 08		stz $08				stz 	IFR0+IM0
.17ef	8a		txa				txa
.17f0	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17f1	66 0a		ror $0a				ror 	IFR0+IM2
.17f3	66 09		ror $09				ror 	IFR0+IM1
.17f5	66 08		ror $08				ror 	IFR0+IM0
.17f7	4a		lsr a				lsr 	a
.17f8	66 0a		ror $0a				ror 	IFR0+IM2
.17fa	66 09		ror $09				ror 	IFR0+IM1
.17fc	66 08		ror $08				ror 	IFR0+IM0
.17fe	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1800	11 18		ora ($18),y			ora 	(codePtr),y
.1802	85 08		sta $08				sta 	IFR0+IM0
.1804	c8		iny				iny 								; consume, loop back
.1805	80 d6		bra $17dd			bra 	_ETMConstant
.1807					_ETMCExit:
.1807	60		rts				rts
.1808					EXPCheckDecimalFollows:
.1808	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.180a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.180c	d0 19		bne $1827			bne 	_ETMCDExit
.180e	c8		iny				iny 								; consume token.
.180f	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1811	5a		phy				phy									; save current position
.1812	48		pha				pha 								; save count of chars.
.1813	38		sec				sec 								; address into YX : y + codePtr+1
.1814	98		tya				tya
.1815	65 18		adc $18				adc 	codePtr
.1817	aa		tax				tax
.1818	a5 19		lda $19				lda 	codePtr+1
.181a	69 00		adc #$00			adc 	#0
.181c	a8		tay				tay
.181d	68		pla				pla 								; get count.
.181e	20 d0 2f	jsr $2fd0			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1821	7a		ply				ply 								; go to next token.
.1822	98		tya				tya
.1823	38		sec				sec
.1824	71 18		adc ($18),y			adc 	(codePtr),y
.1826	a8		tay				tay
.1827					_ETMCDExit:
.1827	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1828					EXPUnaryAbs:
.1828	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 					; number to R0
.182b	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.182e	20 6f 2d	jsr $2d6f			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1831	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1832					EXPUnaryAsc:
.1832	20 38 17	jsr $1738			jsr 	EXPEvalString 					; string to R0, zTemp0
.1835	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.1838	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.183a	f0 06		beq $1842			beq 	_EXAZero 						; if so return 0
.183c	5a		phy				phy 									; otherwise get first character
.183d	a0 01		ldy #$01			ldy 	#1
.183f	b1 22		lda ($22),y			lda 	(zTemp0),y
.1841	7a		ply				ply
.1842					_EXAZero:
.1842	a2 08		ldx #$08			ldx 	#IFR0
.1844	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.1847	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1848					EXPUnaryChr:
.1848	20 2c 17	jsr $172c			jsr 	EXPEvalInteger8 				; expr
.184b	48		pha				pha 									; push on stack
.184c	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.184f	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1851	20 80 28	jsr $2880			jsr 	StringTempAllocate
.1854	68		pla				pla 									; get value back
.1855	20 b5 28	jsr $28b5			jsr 	StringTempWrite 				; write to string.
.1858	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1859					EXPUnaryDec:
.1859	20 38 17	jsr $1738			jsr 	EXPEvalString 					; string to R0, zTemp0
.185c	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.185f	5a		phy				phy 									; save position.
.1860	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1862	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.1865	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1867	f0 3b		beq $18a4			beq 	_EUDError 						; empty string is not legit.
.1869	aa		tax				tax 									; count in X.
.186a	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.186c					_EUDLoop:
.186c	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.186e	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1870	90 02		bcc $1874			bcc 	_EUDNoCase
.1872	e9 20		sbc #$20			sbc 	#$20
.1874					_EUDNoCase:
.1874	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1876	90 2c		bcc $18a4			bcc 	_EUDError
.1878	c9 3a		cmp #$3a			cmp 	#'9'+1
.187a	90 0a		bcc $1886			bcc 	_EUDOkay
.187c	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.187e	90 24		bcc $18a4			bcc 	_EUDError
.1880	c9 47		cmp #$47			cmp 	#'F'+1
.1882	b0 20		bcs $18a4			bcs 	_EUDError
.1884	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1886					_EUDOkay:
.1886	29 0f		and #$0f			and 	#15 							; make constant
.1888	da		phx				phx
.1889	48		pha				pha
.188a	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.188c	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.188f	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1892	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1895	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1898	68		pla				pla 									; pop constant and OR in
.1899	fa		plx				plx
.189a	05 08		ora $08				ora 	IFR0+IM0
.189c	85 08		sta $08				sta 	IFR0+IM0
.189e	c8		iny				iny 									; next char
.189f	ca		dex				dex 									; done all characters ?
.18a0	d0 ca		bne $186c			bne 	_EUDLoop
.18a2	7a		ply				ply
.18a3	60		rts				rts
.18a4					_EUDError:
.18a4	4c f7 25	jmp $25f7		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18a7					EXPUnaryInlineDec:
.18a7	4c d5 25	jmp $25d5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18aa					EXPUnaryPeek:
.18aa	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 				; number to R0
.18ad	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.18b0	b2 08		lda ($08)			lda 	(IFR0)
.18b2	a2 08		ldx #$08			ldx 	#IFR0
.18b4	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.18b7	60		rts				rts
.18b8					EXPUnaryDeek:
.18b8	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 				; number to R0
.18bb	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.18be	5a		phy				phy
.18bf	a0 01		ldy #$01			ldy 	#1
.18c1	b1 08		lda ($08),y			lda 	(IFR0),y
.18c3	7a		ply				ply
.18c4	48		pha				pha
.18c5	b2 08		lda ($08)			lda 	(IFR0)
.18c7	a2 08		ldx #$08			ldx 	#IFR0
.18c9	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.18cc	68		pla				pla
.18cd	85 09		sta $09				sta 	IFR0+IM1
.18cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18d0					EXPUnaryNull:
.18d0	20 4b 17	jsr $174b			jsr 	EXPTermValueR0
.18d3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d4					EXPUnaryFrac:
.18d4	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 					; number to R0
.18d7	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.18da	20 d7 2d	jsr $2dd7			jsr 	IFloatFractionalR0 				; get fractional bit.
.18dd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18de					EXPUnaryInkey:
.18de	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.18e1	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e3	20 80 28	jsr $2880			jsr 	StringTempAllocate
.18e6	20 eb ff	jsr $ffeb			jsr 	OSIsKeyAvailable 				; if no key exit
.18e9	b0 06		bcs $18f1			bcs 	_EUIExit
.18eb	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18ee	20 b5 28	jsr $28b5			jsr 	StringTempWrite
.18f1					_EUIExit:
.18f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18f2					EXPUnaryInt:
.18f2	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 					; number to R0
.18f5	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; check for )
.18f8	20 2d 2e	jsr $2e2d			jsr 	IFloatIntegerR0 				; force to integer.
.18fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18fc					EXPUnaryLen:
.18fc	20 38 17	jsr $1738			jsr 	EXPEvalString 					; string to R0, zTemp0
.18ff	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.1902	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.1904	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1906	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.1909	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.190a					EXPUnaryParenthesis:
.190a	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 					; number to R0
.190d	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.1910	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1911					EXPUnaryRnd:
.1911	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; number to R0
.1914	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 				; )
.1917	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1919	20 30 19	jsr $1930			jsr 	EXPLoadInRandom
.191c	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.191e	85 0b		sta $0b				sta 	IFR0+IExp
.1920	60		rts				rts
.1921					ExpUnaryRand:
.1921	20 19 17	jsr $1719			jsr 	EXPEvalInteger 				; integer to R0
.1924	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 				; )
.1927	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1929	20 30 19	jsr $1930			jsr 	EXPLoadInRandom
.192c	20 9c 2c	jsr $2c9c			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.192f	60		rts				rts
.1930					EXPLoadInRandom:
.1930	20 2c 31	jsr $312c			jsr 	IFloatSetZero 				; zero it
.1933	20 45 19	jsr $1945			jsr 	EXPRandom32 				; do a 23 bit number.
.1936	95 00		sta $00,x			sta 	IM0,x
.1938	20 45 19	jsr $1945			jsr 	EXPRandom32
.193b	95 01		sta $01,x			sta 	IM1,x
.193d	20 45 19	jsr $1945			jsr 	EXPRandom32
.1940	29 7f		and #$7f			and 	#$7F
.1942	95 02		sta $02,x			sta 	IM2,x
.1944	60		rts				rts
.1945					EXPRandom32:
.1945	5a		phy				phy
.1946	a0 08		ldy #$08			ldy 	#8
.1948	ad 12 05	lda $0512			lda 	EXPSeed+0
.194b	0d 13 05	ora $0513			ora 	EXPSeed+1
.194e	0d 14 05	ora $0514			ora 	EXPSeed+2
.1951	0d 15 05	ora $0515			ora 	EXPSeed+3
.1954	d0 08		bne $195e			bne 	_EXPRNoReset
.1956	ee 12 05	inc $0512			inc 	EXPSeed+0
.1959	a0 10		ldy #$10			ldy 	#16
.195b	8c 15 05	sty $0515			sty 	EXPSeed+3
.195e					_EXPRNoReset:
.195e	ad 12 05	lda $0512			lda 	EXPSeed+0
.1961					_EXPRLoop:
.1961	0a		asl a				asl		a
.1962	2e 13 05	rol $0513			rol 	EXPSeed+1
.1965	2e 14 05	rol $0514			rol 	EXPSeed+2
.1968	2e 15 05	rol $0515			rol 	EXPSeed+3
.196b	90 02		bcc $196f			bcc 	_EXPRNoEOR
.196d	49 c5		eor #$c5			eor 	#$C5
.196f					_EXPRNoEOR:
.196f	88		dey				dey
.1970	d0 ef		bne $1961			bne 	_EXPRLoop
.1972	8d 12 05	sta $0512			sta 	EXPSeed+0
.1975	7a		ply				ply
.1976	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1977					EXPUnarySgn:
.1977	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 					; number to R0
.197a	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.197d	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.197f	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister
.1982	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1984	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.1987	a2 0c		ldx #$0c			ldx 	#IFR1
.1989	20 fb 2d	jsr $2dfb			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.198c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.198d					EXPUnarySqr:
.198d	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 					; number to R0
.1990	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.1993	20 77 2d	jsr $2d77			jsr 	IFloatSquareRootR0 				; square root.
.1996	b0 01		bcs $1999			bcs 	_EUSValue 						; error check.
.1998	60		rts				rts
.1999					_EUSValue:
.1999	4c e6 25	jmp $25e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.199c					EXPUnaryHex:
.199c	20 19 17	jsr $1719			jsr 	EXPEvalInteger 					; expr
.199f	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.19a2	5a		phy				phy
.19a3	a9 10		lda #$10			lda 	#16
.19a5	20 ce 2e	jsr $2ece			jsr 	IFloatIntegerToStringR0
.19a8	80 0a		bra $19b4			bra 	EUSMain
.19aa					EXPUnaryStr:
.19aa	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 					; expr
.19ad	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.19b0	5a		phy				phy
.19b1	20 29 2f	jsr $2f29			jsr 	IFloatFloatToStringR0 			; convert to string
.19b4					EUSMain:
.19b4	b0 19		bcs $19cf			bcs 	_EUSError
.19b6	86 22		stx $22				stx 	zTemp0 							; save string address
.19b8	84 23		sty $23				sty 	zTemp0+1
.19ba	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19bc	20 80 28	jsr $2880			jsr 	StringTempAllocate
.19bf	b2 22		lda ($22)			lda 	(zTemp0) 						; get count
.19c1	aa		tax				tax 									; count in X
.19c2	a0 01		ldy #$01			ldy 	#1
.19c4					_EUSCopy:
.19c4	b1 22		lda ($22),y			lda 	(zTemp0),y
.19c6	c8		iny				iny
.19c7	20 b5 28	jsr $28b5			jsr 	StringTempWrite
.19ca	ca		dex				dex
.19cb	d0 f7		bne $19c4			bne	 	_EUSCopy
.19cd	7a		ply				ply
.19ce	60		rts				rts
.19cf					_EUSError:
.19cf	4c e6 25	jmp $25e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19d2					EXPUnaryInlineString:
.19d2	18		clc				clc 								; physical address -> IM0,1
.19d3	98		tya				tya 								; put the actual address in IM0
.19d4	65 18		adc $18				adc 	codePtr
.19d6	85 08		sta $08				sta 	IFR0+IM0
.19d8	a5 19		lda $19				lda 	codePtr+1
.19da	69 00		adc #$00			adc 	#0
.19dc	85 09		sta $09				sta 	IFR0+IM1
.19de	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19e0	a9 80		lda #$80			lda 	#$80
.19e2	85 0b		sta $0b				sta 	IFR0+IExp
.19e4	98		tya				tya	 								; skip over it.
.19e5	38		sec				sec
.19e6	71 18		adc ($18),y			adc 	(codePtr),y
.19e8	a8		tay				tay
.19e9	60		rts				rts
.19ea					_EXPUISRange:
.19ea	4c e6 25	jmp $25e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19ed					EXPUnaryLeft:
.19ed	20 33 1a	jsr $1a33			jsr 	EXPCommonStart 					; <string>,
.19f0	48		pha				pha 									; save string address on stack
.19f1	da		phx				phx
.19f2	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f4	48		pha				pha
.19f5	20 2c 17	jsr $172c			jsr 	EXPEvalInteger8 				; characters to do
.19f8	80 44		bra $1a3e			bra 	EXPSubstringCommon
.19fa					EXPUnaryRight:
.19fa	20 33 1a	jsr $1a33			jsr 	EXPCommonStart 					; <string>,
.19fd	48		pha				pha 									; save string address on stack
.19fe	da		phx				phx
.19ff	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1a01	48		pha				pha
.1a02	20 2c 17	jsr $172c			jsr 	EXPEvalInteger8 				; characters to do
.1a05	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1a07	68		pla				pla
.1a08	38		sec				sec
.1a09	e5 22		sbc $22				sbc 	zTemp0
.1a0b	b0 02		bcs $1a0f			bcs 	_EUROffLeft
.1a0d	a9 00		lda #$00			lda 	#0
.1a0f					_EUROffLeft:
.1a0f	48		pha				pha 									; start pos
.1a10	a9 ff		lda #$ff			lda 	#255
.1a12	80 2a		bra $1a3e			bra 	EXPSubstringCommon
.1a14					EXPUnaryMid:
.1a14	20 33 1a	jsr $1a33			jsr 	EXPCommonStart 					; <string>,
.1a17	48		pha				pha 									; save string address on stack
.1a18	da		phx				phx
.1a19	20 2c 17	jsr $172c			jsr 	EXPEvalInteger8 				; characters start
.1a1c	f0 12		beq $1a30			beq 	_EUSError 						; 1 is left
.1a1e	3a		dec a				dec 	a 								; zero based.
.1a1f	48		pha				pha
.1a20	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a22	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a24	f0 04		beq $1a2a			beq 	_EUMLength 						; if so m is provided
.1a26	a9 ff		lda #$ff			lda 	#255 							; default m
.1a28	80 14		bra $1a3e			bra 	EXPSubstringCommon
.1a2a					_EUMLength:
.1a2a	c8		iny				iny 									; consume comma
.1a2b	20 2c 17	jsr $172c			jsr 	EXPEvalInteger8 				; characters to do
.1a2e	80 0e		bra $1a3e			bra 	EXPSubstringCommon
.1a30					_EUSError:
.1a30	4c f7 25	jmp $25f7		jmp	ErrorV_value
.1a33					EXPCommonStart:
.1a33	20 38 17	jsr $1738			jsr 	EXPEvalString
.1a36	20 92 27	jsr $2792			jsr 	ERRCheckComma
.1a39	a5 08		lda $08				lda 	IFR0+IM0
.1a3b	a6 09		ldx $09				ldx 	IFR0+IM1
.1a3d	60		rts				rts
.1a3e					EXPSubstringCommon:
.1a3e	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a40	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; check right bracket.
.1a43	68		pla				pla 									; start position
.1a44	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a46	fa		plx				plx 									; get string address to zTemp2.
.1a47	86 27		stx $27				stx 	zTemp2+1
.1a49	68		pla				pla
.1a4a	85 26		sta $26				sta 	zTemp2
.1a4c	38		sec				sec 									; length - start is the max count of chars
.1a4d	b2 26		lda ($26)			lda 	(zTemp2)
.1a4f	e5 25		sbc $25				sbc 	zTemp1+1
.1a51	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a53	b0 02		bcs $1a57			bcs 	_EXPSSNoTrim
.1a55	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a57					_EXPSSNoTrim:
.1a57	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a59	20 80 28	jsr $2880			jsr 	StringTempAllocate 				; allocate memory for it.
.1a5c	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a5e	f0 15		beq $1a75			beq 	_EXPSSExit
.1a60	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a62	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a64	b0 0f		bcs $1a75			bcs 	_EXPSSExit
.1a66	5a		phy				phy
.1a67	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a69	c8		iny				iny 									; +1 for the length byte
.1a6a					_EXPSSCopy:
.1a6a	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a6c	20 b5 28	jsr $28b5			jsr 	StringTempWrite
.1a6f	c8		iny				iny
.1a70	c6 24		dec $24				dec 	zTemp1
.1a72	d0 f6		bne $1a6a			bne 	_EXPSSCopy
.1a74	7a		ply				ply
.1a75					_EXPSSExit:
.1a75	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a76					EXPUnaryVal:
.1a76	20 38 17	jsr $1738			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a79	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 					; )
.1a7c	20 80 1a	jsr $1a80			jsr 	VALConversionZTemp0
.1a7f	60		rts				rts
.1a80					VALConversionZTemp0:
.1a80	5a		phy				phy
.1a81	18		clc				clc
.1a82	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a84	69 01		adc #$01			adc 	#1
.1a86	aa		tax				tax
.1a87	a5 23		lda $23				lda 	zTemp0+1
.1a89	69 00		adc #$00			adc 	#0
.1a8b	a8		tay				tay
.1a8c	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a8e	20 90 2f	jsr $2f90			jsr 	IFloatStringToFloatR0 			; do conversion
.1a91	b0 02		bcs $1a95			bcs 	_EUVError
.1a93	7a		ply				ply
.1a94	60		rts				rts
.1a95					_EUVError:
.1a95	4c f7 25	jmp $25f7		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a98					BinaryPrecedence:
>1a98	02					.byte	 2	; $ef =
>1a99	02					.byte	 2	; $f0 <>
>1a9a	02					.byte	 2	; $f1 <=
>1a9b	02					.byte	 2	; $f2 <
>1a9c	02					.byte	 2	; $f3 >=
>1a9d	02					.byte	 2	; $f4 >
>1a9e	01					.byte	 1	; $f5 XOR
>1a9f	01					.byte	 1	; $f6 OR
>1aa0	01					.byte	 1	; $f7 AND
>1aa1	04					.byte	 4	; $f8 DIV
>1aa2	04					.byte	 4	; $f9 MOD
>1aa3	04					.byte	 4	; $fa <<
>1aa4	04					.byte	 4	; $fb >>
>1aa5	04					.byte	 4	; $fc /
>1aa6	04					.byte	 4	; $fd *
>1aa7	03					.byte	 3	; $fe -
>1aa8	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1aa9					StructureOffsets:
>1aa9	01					.byte	1  	; $80 REPEAT
>1aaa	ff					.byte	255	; $81 UNTIL
>1aab	01					.byte	1  	; $82 WHILE
>1aac	ff					.byte	255	; $83 WEND
>1aad	01					.byte	1  	; $84 IF
>1aae	ff					.byte	255	; $85 ENDIF
>1aaf	01					.byte	1  	; $86 DO
>1ab0	ff					.byte	255	; $87 LOOP
>1ab1	01					.byte	1  	; $88 PROC
>1ab2	ff					.byte	255	; $89 ENDPROC
>1ab3	01					.byte	1  	; $8a FOR
>1ab4	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1ab5					StandardTokens:
>1ab5	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1abc	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ac2	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1ac8	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1acd	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ad0	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1ad6	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ad9	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1ade	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ae3	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1aeb	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1aef	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1af4	00					.byte	$00                                     	; $8c [[end]]
>1af5	00					.byte	$00                                     	; $8d [[shift]]
>1af6	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1afb	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1b00	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1b03	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1b08	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b0c	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b12	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b18	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b1d	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b21	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b25	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b2a	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b2c	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b2e	01 3a					.byte	$01,$3a                                 	; $9b :
>1b30	01 27					.byte	$01,$27                                 	; $9c '
>1b32	01 29					.byte	$01,$29                                 	; $9d )
>1b34	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1b39	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1b3e	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1b43	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1b48	00					.byte	0											; $a2
>1b49	00					.byte	0											; $a3
>1b4a	00					.byte	0											; $a4
>1b4b	00					.byte	0											; $a5
>1b4c	00					.byte	0											; $a6
>1b4d	00					.byte	0											; $a7
>1b4e	00					.byte	0											; $a8
>1b4f	00					.byte	0											; $a9
>1b50	00					.byte	0											; $aa
>1b51	00					.byte	0											; $ab
>1b52	00					.byte	0											; $ac
>1b53	00					.byte	0											; $ad
>1b54	00					.byte	0											; $ae
>1b55	00					.byte	0											; $af
>1b56	00					.byte	0											; $b0
>1b57	00					.byte	0											; $b1
>1b58	00					.byte	0											; $b2
>1b59	00					.byte	0											; $b3
>1b5a	00					.byte	0											; $b4
>1b5b	00					.byte	0											; $b5
>1b5c	00					.byte	0											; $b6
>1b5d	00					.byte	0											; $b7
>1b5e	00					.byte	0											; $b8
>1b5f	00					.byte	0											; $b9
>1b60	00					.byte	0											; $ba
>1b61	00					.byte	0											; $bb
>1b62	00					.byte	0											; $bc
>1b63	00					.byte	0											; $bd
>1b64	00					.byte	0											; $be
>1b65	00					.byte	0											; $bf
>1b66	00					.byte	0											; $c0
>1b67	00					.byte	0											; $c1
>1b68	00					.byte	0											; $c2
>1b69	00					.byte	0											; $c3
>1b6a	00					.byte	0											; $c4
>1b6b	00					.byte	0											; $c5
>1b6c	00					.byte	0											; $c6
>1b6d	00					.byte	0											; $c7
>1b6e	00					.byte	0											; $c8
>1b6f	00					.byte	0											; $c9
>1b70	00					.byte	0											; $ca
>1b71	00					.byte	0											; $cb
>1b72	00					.byte	0											; $cc
>1b73	00					.byte	0											; $cd
>1b74	00					.byte	0											; $ce
>1b75	00					.byte	0											; $cf
>1b76	00					.byte	0											; $d0
>1b77	00					.byte	0											; $d1
>1b78	00					.byte	0											; $d2
>1b79	00					.byte	0											; $d3
>1b7a	00					.byte	0											; $d4
>1b7b	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b81	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b87	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b8f	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b96	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b9c	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ba2	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ba7	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1bac	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1bb1	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1bb6	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bbb	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bc1	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bc6	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bce	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bd5	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bda	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1bdf	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1be5	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1bea	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1bf0	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1bf5	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1bfb	01 28					.byte	$01,$28                                 	; $eb (
>1bfd	01 24					.byte	$01,$24                                 	; $ec $
>1bff	00					.byte	$00                                     	; $ed [[decimal]]
>1c00	00					.byte	$00                                     	; $ee [[string]]
>1c01	01 3d					.byte	$01,$3d                                 	; $ef =
>1c03	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1c06	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1c09	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c0b	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c0e	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c10	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c14	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c17	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c1b	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c1f	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c23	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c26	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c29	01 2f					.byte	$01,$2f                                 	; $fc /
>1c2b	01 2a					.byte	$01,$2a                                 	; $fd *
>1c2d	01 2d					.byte	$01,$2d                                 	; $fe -
>1c2f	01 2b					.byte	$01,$2b                                 	; $ff +
>1c31	ff					.byte	$FF
.1c32					AlternateTokens:
>1c32	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1c38	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1c3c	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1c40	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1c45	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1c49	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1c50	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1c55	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1c5a	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1c5f	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1c65	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1c6a	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1c71	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1c79	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1c7d	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c7e					VectorTable:
>1c7e	c5 24					.word	Command_REPEAT           ; $80 REPEAT
>1c80	ce 24					.word	Command_UNTIL            ; $81 UNTIL
>1c82	a8 25					.word	Command_WHILE            ; $82 WHILE
>1c84	c9 25					.word	Command_WEND             ; $83 WEND
>1c86	9b 24					.word	IfCommand                ; $84 IF
>1c88	c4 24					.word	EndIf                    ; $85 ENDIF
>1c8a	1d 23					.word	Command_DO               ; $86 DO
>1c8c	35 23					.word	Command_LOOP             ; $87 LOOP
>1c8e	4e 15					.word	NoExec08                 ; $88 PROC
>1c90	11 23					.word	Command_ENDPROC          ; $89 ENDPROC
>1c92	3e 23					.word	Command_FOR              ; $8a FOR
>1c94	cb 23					.word	Command_NEXT             ; $8b NEXT
>1c96	cf 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c98	2b 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c9a	bd 24					.word	ElseCode                 ; $8e ELSE
>1c9c	4e 15					.word	NoExec01                 ; $8f THEN
>1c9e	4e 15					.word	NoExec02                 ; $90 TO
>1ca0	4e 15					.word	NoExec03                 ; $91 STEP
>1ca2	ba 12					.word	CommandLET               ; $92 LET
>1ca4	0f 12					.word	Command_Print            ; $93 PRINT
>1ca6	08 12					.word	Command_Input            ; $94 INPUT
>1ca8	d5 22					.word	Command_CALL             ; $95 CALL
>1caa	39 15					.word	Command_Sys              ; $96 SYS
>1cac	88 14					.word	Command_REM              ; $97 REM
>1cae	26 23					.word	Command_EXIT             ; $98 EXIT
>1cb0	4e 15					.word	NoExec04                 ; $99 ,
>1cb2	4e 15					.word	NoExec05                 ; $9a ;
>1cb4	4e 15					.word	NoExec06                 ; $9b :
>1cb6	88 14					.word	Command_REM2             ; $9c '
>1cb8	4e 15					.word	NoExec07                 ; $9d )
>1cba	b1 11					.word	Command_Poke             ; $9e POKE
>1cbc	ae 11					.word	Command_Doke             ; $9f DOKE
>1cbe	14 14					.word	Command_READ             ; $a0 READ
>1cc0	7b 14					.word	Command_DATA             ; $a1 DATA
>1cc2	07 29					.word	NotImplemented           ; $a2
>1cc4	07 29					.word	NotImplemented           ; $a3
>1cc6	07 29					.word	NotImplemented           ; $a4
>1cc8	07 29					.word	NotImplemented           ; $a5
>1cca	07 29					.word	NotImplemented           ; $a6
>1ccc	07 29					.word	NotImplemented           ; $a7
>1cce	07 29					.word	NotImplemented           ; $a8
>1cd0	07 29					.word	NotImplemented           ; $a9
>1cd2	07 29					.word	NotImplemented           ; $aa
>1cd4	07 29					.word	NotImplemented           ; $ab
>1cd6	07 29					.word	NotImplemented           ; $ac
>1cd8	07 29					.word	NotImplemented           ; $ad
>1cda	07 29					.word	NotImplemented           ; $ae
>1cdc	07 29					.word	NotImplemented           ; $af
>1cde	07 29					.word	NotImplemented           ; $b0
>1ce0	07 29					.word	NotImplemented           ; $b1
>1ce2	07 29					.word	NotImplemented           ; $b2
>1ce4	07 29					.word	NotImplemented           ; $b3
>1ce6	07 29					.word	NotImplemented           ; $b4
>1ce8	07 29					.word	NotImplemented           ; $b5
>1cea	07 29					.word	NotImplemented           ; $b6
>1cec	07 29					.word	NotImplemented           ; $b7
>1cee	07 29					.word	NotImplemented           ; $b8
>1cf0	07 29					.word	NotImplemented           ; $b9
>1cf2	07 29					.word	NotImplemented           ; $ba
>1cf4	07 29					.word	NotImplemented           ; $bb
>1cf6	07 29					.word	NotImplemented           ; $bc
>1cf8	07 29					.word	NotImplemented           ; $bd
>1cfa	07 29					.word	NotImplemented           ; $be
>1cfc	07 29					.word	NotImplemented           ; $bf
>1cfe	07 29					.word	NotImplemented           ; $c0
>1d00	07 29					.word	NotImplemented           ; $c1
>1d02	07 29					.word	NotImplemented           ; $c2
>1d04	07 29					.word	NotImplemented           ; $c3
>1d06	07 29					.word	NotImplemented           ; $c4
>1d08	07 29					.word	NotImplemented           ; $c5
>1d0a	07 29					.word	NotImplemented           ; $c6
>1d0c	07 29					.word	NotImplemented           ; $c7
>1d0e	07 29					.word	NotImplemented           ; $c8
>1d10	07 29					.word	NotImplemented           ; $c9
>1d12	07 29					.word	NotImplemented           ; $ca
>1d14	07 29					.word	NotImplemented           ; $cb
>1d16	07 29					.word	NotImplemented           ; $cc
>1d18	07 29					.word	NotImplemented           ; $cd
>1d1a	07 29					.word	NotImplemented           ; $ce
>1d1c	07 29					.word	NotImplemented           ; $cf
>1d1e	07 29					.word	NotImplemented           ; $d0
>1d20	07 29					.word	NotImplemented           ; $d1
>1d22	07 29					.word	NotImplemented           ; $d2
>1d24	07 29					.word	NotImplemented           ; $d3
>1d26	07 29					.word	NotImplemented           ; $d4
>1d28	b8 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d2a	aa 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d2c	fa 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d2e	ed 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d30	14 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d32	aa 19					.word	EXPUnaryStr              ; $da STR$(
>1d34	76 1a					.word	EXPUnaryVal              ; $db VAL(
>1d36	77 19					.word	EXPUnarySgn              ; $dc SGN(
>1d38	28 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d3a	fc 18					.word	EXPUnaryLen              ; $de LEN(
>1d3c	8d 19					.word	EXPUnarySqr              ; $df SQR(
>1d3e	48 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d40	32 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d42	de 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d44	07 29					.word	NotImplemented           ; $e3 EVENT(
>1d46	07 29					.word	NotImplemented           ; $e4 TIME
>1d48	f2 18					.word	EXPUnaryInt              ; $e5 INT(
>1d4a	d4 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d4c	59 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d4e	9c 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d50	11 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d52	21 19					.word	ExpUnaryRand             ; $ea RAND(
>1d54	0a 19					.word	EXPUnaryParenthesis      ; $eb (
>1d56	d0 18					.word	EXPUnaryNull             ; $ec $
>1d58	a7 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d5a	d2 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d5c	0b 16					.word	EXPCompareEqual          ; $ef =
>1d5e	26 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d60	2f 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d62	14 16					.word	EXPCompareLess           ; $f2 <
>1d64	38 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d66	1d 16					.word	EXPCompareGreater        ; $f4 >
>1d68	b8 15					.word	EXPBinXor                ; $f5 XOR
>1d6a	ac 15					.word	EXPBinOr                 ; $f6 OR
>1d6c	a0 15					.word	EXPBinAnd                ; $f7 AND
>1d6e	78 15					.word	EXPBinIDiv               ; $f8 DIV
>1d70	89 15					.word	EXPBinIMod               ; $f9 MOD
>1d72	83 16					.word	EXPBinLeft               ; $fa <<
>1d74	8b 16					.word	EXPBinRight              ; $fb >>
>1d76	6c 15					.word	EXPBinFDiv               ; $fc /
>1d78	63 15					.word	EXPBinMul                ; $fd *
>1d7a	5a 15					.word	EXPBinSub                ; $fe -
>1d7c	51 15					.word	EXPBinAdd                ; $ff +
.1d7e					AlternateVectorTable:
>1d7e	1e 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1d80	0b 14					.word	Command_NEW              ; $8d81 NEW
>1d82	c3 14					.word	Command_RUN              ; $8d82 RUN
>1d84	36 15					.word	Command_STOP             ; $8d83 STOP
>1d86	33 15					.word	Command_END              ; $8d84 END
>1d88	10 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1d8a	34 13					.word	Command_LIST             ; $8d86 LIST
>1d8c	07 29					.word	NotImplemented           ; $8d87 SAVE
>1d8e	07 29					.word	NotImplemented           ; $8d88 LOAD
>1d90	81 24					.word	Command_GOSUB            ; $8d89 GOSUB
>1d92	d8 11					.word	Command_GOTO             ; $8d8a GOTO
>1d94	8f 24					.word	Command_RETURN           ; $8d8b RETURN
>1d96	95 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1d98	92 10					.word	CommandDIM               ; $8d8d DIM

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d9a					TOKDetokenise:
.1d9a	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d9c	84 27		sty $27				sty 	zTemp2+1
.1d9e	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1da1					_TOKDLoop:
.1da1	20 d0 1d	jsr $1dd0			jsr 	TOKDGet 					; get next
.1da4	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1da6	f0 26		beq $1dce			beq 	_TOKDExit
.1da8	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1daa	f0 1d		beq $1dc9			beq 	_TOKDDataItem
.1dac	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1dae	f0 19		beq $1dc9			beq 	_TOKDDataItem
.1db0	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1db2	10 05		bpl $1db9			bpl 	_TOKDNotToken
.1db4	20 9a 1e	jsr $1e9a			jsr 	TOKDToken 					; token to text.
.1db7	80 e8		bra $1da1			bra 	_TOKDLoop
.1db9					_TOKDNotToken:
.1db9	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1dbb	90 05		bcc $1dc2			bcc 	_TOKDNotIdentifier
.1dbd	20 0b 1e	jsr $1e0b			jsr 	TOKDIdentifier
.1dc0	80 df		bra $1da1			bra 	_TOKDLoop
.1dc2					_TOKDNotIdentifier:
.1dc2	a0 0a		ldy #$0a			ldy 	#10
.1dc4	20 54 1e	jsr $1e54			jsr 	TOKDInteger
.1dc7	80 d8		bra $1da1			bra 	_TOKDLoop
.1dc9					_TOKDDataItem:
.1dc9	20 e6 1d	jsr $1de6			jsr 	TOKDDataItem
.1dcc	80 d3		bra $1da1			bra 	_TOKDLoop
.1dce					_TOKDExit:
.1dce	18		clc				clc
.1dcf	60		rts				rts
.1dd0	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1dd2	e6 26		inc $26				inc 	zTemp2
.1dd4	d0 02		bne $1dd8			bne 	_TKDGExit
.1dd6	e6 27		inc $27				inc 	zTemp2+1
.1dd8					_TKDGExit:
.1dd8	60		rts				rts
.1dd9					TOKDOutput:
.1dd9	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1ddc	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1ddf					TOKSetDetokeniseOutput:
.1ddf	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1de2	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1de5	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1de6					TOKDDataItem:
.1de6	a8		tay				tay 								; type in Y
.1de7	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1de9	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1deb	f0 02		beq $1def			beq 	_TOKDDIsString
.1ded	a9 2e		lda #$2e			lda 	#'.'
.1def					_TOKDDIsString:
.1def	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput 					; dump it
.1df2	20 d0 1d	jsr $1dd0			jsr 	TOKDGet 					; get length into X
.1df5	aa		tax				tax
.1df6					_TOKDDOutput:
.1df6	ca		dex				dex 								; are we complete
.1df7	30 08		bmi $1e01			bmi 	_TOKDDEnd
.1df9	20 d0 1d	jsr $1dd0			jsr 	TOKDGet 					; get character and output it
.1dfc	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1dff	80 f5		bra $1df6			bra 	_TOKDDOutput
.1e01					_TOKDDEnd:
.1e01	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1e03	d0 05		bne $1e0a			bne 	_TOKDDNotString
.1e05	a9 22		lda #$22			lda 	#'"'
.1e07	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1e0a					_TOKDDNotString:
.1e0a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1e0b					TOKDIdentifier:
.1e0b	a0 ff		ldy #$ff			ldy 	#$FF
.1e0d	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1e10					_TOKDLoop:
.1e10	a8		tay				tay 								; token in Y
.1e11	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1e13	c0 64		cpy #$64			cpy 	#$64
.1e15	f0 11		beq $1e28			beq 	_TOKDIOutput
.1e17	a9 5f		lda #$5f			lda 	#'_'
.1e19	c0 65		cpy #$65			cpy 	#$65
.1e1b	f0 0b		beq $1e28			beq 	_TOKDIOutput
.1e1d	98		tya				tya 								; handle a-z
.1e1e	18		clc				clc
.1e1f	69 21		adc #$21			adc	 	#$21
.1e21	c0 5a		cpy #$5a			cpy 	#$5A
.1e23	90 03		bcc $1e28			bcc 	_TOKDIOutput
.1e25	38		sec				sec 								; handle 0-9
.1e26	e9 4b		sbc #$4b			sbc 	#$4B
.1e28					_TOKDIOutput:
.1e28	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1e2b	10 08		bpl $1e35			bpl 	_TOKDINoSpacing
.1e2d	48		pha				pha
.1e2e	20 d7 1e	jsr $1ed7			jsr 	TOKDSpacing
.1e31	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1e34	68		pla				pla
.1e35					_TOKDINoSpacing:
.1e35	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1e38	20 d0 1d	jsr $1dd0			jsr 	TOKDGet 					; get next token
.1e3b	c9 7c		cmp #$7c			cmp 	#$7C
.1e3d	90 d1		bcc $1e10			bcc 	_TOKDLoop
.1e3f	f0 12		beq $1e53			beq 	_TOKDIExit 					; it's a number, no tail.
.1e41	4a		lsr a				lsr 	a 							; string ?
.1e42	90 07		bcc $1e4b			bcc 	_TOKDICheckArray
.1e44	48		pha				pha
.1e45	a9 24		lda #$24			lda 	#"$"
.1e47	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1e4a	68		pla				pla
.1e4b					_TOKDICheckArray:
.1e4b	4a		lsr a				lsr 	a 							; array ?
.1e4c	90 05		bcc $1e53			bcc 	_TOKDIExit
.1e4e	a9 28		lda #$28			lda 	#"("
.1e50	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1e53					_TOKDIExit:
.1e53	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e54					TOKDInteger:
.1e54	5a		phy				phy 								; save base
.1e55	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e57	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.1e5a					_TOKDILoop:
.1e5a	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e5c	c9 40		cmp #$40			cmp 	#$40
.1e5e	b0 1d		bcs $1e7d			bcs 	_TOKDIHaveInteger
.1e60	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e62	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1e65	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1e68	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1e6b	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1e6e	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1e71	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.1e74	20 d0 1d	jsr $1dd0			jsr 	TOKDGet 					; OR byte in.
.1e77	05 08		ora $08				ora 	IFR0+IM0
.1e79	85 08		sta $08				sta 	IFR0+IM0
.1e7b	80 dd		bra $1e5a			bra 	_TOKDILoop
.1e7d					_TOKDIHaveInteger:
.1e7d	7a		ply				ply 								; restore base
.1e7e	98		tya				tya 								; base in A
.1e7f	20 ce 2e	jsr $2ece			jsr 	IFloatIntegerToStringR0
.1e82	86 22		stx $22				stx 	zTemp0
.1e84	84 23		sty $23				sty 	zTemp0+1
.1e86	b2 22		lda ($22)			lda 	(zTemp0)
.1e88	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1e8a	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e8c	20 d7 1e	jsr $1ed7			jsr 	TOKDSpacing 				; check spacing okay.
.1e8f					_TOKDOutput:
.1e8f	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e91	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1e94	c8		iny				iny
.1e95	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e97	d0 f6		bne $1e8f			bne 	_TOKDOutput
.1e99	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e9a					TOKDToken:
.1e9a	a2 b5		ldx #$b5			ldx 	#StandardTokens & $FF 		; standard table
.1e9c	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e9e	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1ea0	d0 07		bne $1ea9			bne 	_TOKDSearch
.1ea2	20 d0 1d	jsr $1dd0			jsr 	TOKDGet 					; get next
.1ea5	a2 32		ldx #$32			ldx 	#AlternateTokens & $FF 		; alt table
.1ea7	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.1ea9					_TOKDSearch:
.1ea9	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1eab	84 23		sty $23				sty 	zTemp0+1
.1ead	aa		tax				tax 								; token ID in X.
.1eae					_TOKDFind:
.1eae	ca		dex				dex 								; reached the start
.1eaf	10 0d		bpl $1ebe			bpl 	_TOKDFound
.1eb1	38		sec				sec 								; go to next entry
.1eb2	b2 22		lda ($22)			lda 	(zTemp0)
.1eb4	65 22		adc $22				adc 	zTemp0
.1eb6	85 22		sta $22				sta 	zTemp0
.1eb8	90 f4		bcc $1eae			bcc 	_TOKDFind
.1eba	e6 23		inc $23				inc 	zTemp0+1
.1ebc	80 f0		bra $1eae			bra 	_TOKDFind
.1ebe					_TOKDFound:
.1ebe	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1ec0	f0 14		beq $1ed6			beq 	_TOKDExit
.1ec2	aa		tax				tax
.1ec3	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ec5	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing first character,
.1ec7	20 d7 1e	jsr $1ed7			jsr 	TOKDSpacing
.1eca					_TOKDOutput:
.1eca	b1 22		lda ($22),y			lda 	(zTemp0),y
.1ecc	20 90 22	jsr $2290			jsr 	TOKToLower
.1ecf	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1ed2	c8		iny				iny
.1ed3	ca		dex				dex
.1ed4	d0 f4		bne $1eca			bne 	_TOKDOutput
.1ed6					_TOKDExit:
.1ed6	60		rts				rts
.1ed7					TOKDSpacing:
.1ed7	20 a7 22	jsr $22a7			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1eda	90 0d		bcc $1ee9			bcc 	_TOKDSExit
.1edc	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1edf	20 a7 22	jsr $22a7			jsr 	TOKIsIdentifierElement
.1ee2	90 05		bcc $1ee9			bcc 	_TOKDSExit
.1ee4	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ee6	20 d9 1d	jsr $1dd9			jsr 	TOKDOutput
.1ee9					_TOKDSExit:
.1ee9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1eea					PGMDeleteLine:
.1eea	20 9d 1f	jsr $1f9d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1eed	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eef	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ef2	85 25		sta $25				sta 	zTemp1+1
.1ef4					_PGMDLoop:
.1ef4	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1ef6	38		sec				sec
.1ef7	f0 3a		beq $1f33			beq 	_PGMDExit
.1ef9	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1efb	b1 24		lda ($24),y			lda 	(zTemp1),y
.1efd	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f00	d0 08		bne $1f0a			bne 	_PGMDNext
.1f02	c8		iny				iny
.1f03	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f05	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1f08	f0 0d		beq $1f17			beq 	_PGMDDelete
.1f0a					_PGMDNext:
.1f0a	18		clc				clc
.1f0b	b2 24		lda ($24)			lda 	(zTemp1)
.1f0d	65 24		adc $24				adc 	zTemp1
.1f0f	85 24		sta $24				sta 	zTemp1
.1f11	90 e1		bcc $1ef4			bcc 	_PGMDLoop
.1f13	e6 25		inc $25				inc 	zTemp1+1
.1f15	80 dd		bra $1ef4			bra 	_PGMDLoop
.1f17					_PGMDDelete:
.1f17	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1f19	a8		tay				tay
.1f1a					_PGMDCopy:
.1f1a	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1f1c	92 24		sta ($24)			sta 	(zTemp1)
.1f1e	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1f20	c5 22		cmp $22				cmp 	zTemp0
.1f22	d0 07		bne $1f2b			bne 	_PGMDNext2
.1f24	a5 25		lda $25				lda 	zTemp1+1
.1f26	c5 23		cmp $23				cmp 	zTemp0+1
.1f28	18		clc				clc
.1f29	f0 08		beq $1f33			beq 	_PGMDExit
.1f2b					_PGMDNext2:
.1f2b	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1f2d	d0 eb		bne $1f1a			bne 	_PGMDCopy
.1f2f	e6 25		inc $25				inc 	zTemp1+1
.1f31	80 e7		bra $1f1a			bra 	_PGMDCopy
.1f33					_PGMDExit:
.1f33	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1f34					PGMInsertLine:
.1f34	20 9d 1f	jsr $1f9d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1f37	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1f39	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f3c	85 25		sta $25				sta 	zTemp1+1
.1f3e					_PGMILoop:
.1f3e	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1f40	f0 1c		beq $1f5e			beq 	_PGMIInsert
.1f42	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f44	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f46	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f49	c8		iny				iny
.1f4a	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f4c	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f4f	b0 0d		bcs $1f5e			bcs 	_PGMIInsert 				; insert here.
.1f51	18		clc				clc
.1f52	b2 24		lda ($24)			lda 	(zTemp1)
.1f54	65 24		adc $24				adc 	zTemp1
.1f56	85 24		sta $24				sta 	zTemp1
.1f58	90 e4		bcc $1f3e			bcc 	_PGMILoop
.1f5a	e6 25		inc $25				inc 	zTemp1+1
.1f5c	80 e0		bra $1f3e			bra 	_PGMILoop
.1f5e					_PGMIInsert:
.1f5e	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f61					_PGMIInsertLoop:
.1f61	b2 22		lda ($22)			lda 	(zTemp0)
.1f63	91 22		sta ($22),y			sta 	(zTemp0),y
.1f65	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f67	c5 22		cmp $22				cmp 	zTemp0
.1f69	d0 06		bne $1f71			bne 	_PGMINext
.1f6b	a5 25		lda $25				lda 	zTemp1+1
.1f6d	c5 23		cmp $23				cmp 	zTemp0+1
.1f6f	f0 0a		beq $1f7b			beq 	_PGMIInserted
.1f71					_PGMINext:
.1f71	a5 22		lda $22				lda 	zTemp0
.1f73	d0 02		bne $1f77			bne 	_PGMINoBorrow
.1f75	c6 23		dec $23				dec 	zTemp0+1
.1f77					_PGMINoBorrow:
.1f77	c6 22		dec $22				dec 	zTemp0
.1f79	80 e6		bra $1f61			bra 	_PGMIInsertLoop
.1f7b					_PGMIInserted:
.1f7b	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f7d					_PGMICopyLoop:
.1f7d	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f80	91 24		sta ($24),y			sta 	(zTemp1),y
.1f82	c8		iny				iny
.1f83	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f86	d0 f5		bne $1f7d			bne 	_PGMICopyLoop
.1f88	18		clc				clc
.1f89	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f8a					PGMSetBaseAddress:
.1f8a	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.1f8d	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.1f90	60		rts				rts
.1f91					PGMNewProgram:
.1f91	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f93	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f96	85 23		sta $23				sta 	zTemp0+1
.1f98	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.1f9a	92 22		sta ($22)			sta 	(zTemp0)
.1f9c	60		rts				rts
.1f9d					PGMEndProgram:
.1f9d	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f9f	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1fa2	85 23		sta $23				sta 	zTemp0+1
.1fa4					_PGMEPLoop:
.1fa4	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.1fa6	f0 0b		beq $1fb3			beq 	_PGMEPExit
.1fa8	18		clc				clc 								; no, advance to next
.1fa9	65 22		adc $22				adc 	zTemp0
.1fab	85 22		sta $22				sta 	zTemp0
.1fad	90 f5		bcc $1fa4			bcc 	_PGMEPLoop
.1faf	e6 23		inc $23				inc 	zTemp0+1
.1fb1	80 f1		bra $1fa4			bra 	_PGMEPLoop
.1fb3					_PGMEPExit:
.1fb3	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1fb4					TOKResetElement:
.1fb4	9c 1c 05	stz $051c			stz 	TOKElement
.1fb7	60		rts				rts
.1fb8					TOKWriteElement:
.1fb8	da		phx				phx
.1fb9	ae 1c 05	ldx $051c			ldx 	TOKElement
.1fbc	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1fbf	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1fc2	fa		plx				plx
.1fc3	ee 1c 05	inc $051c			inc 	TOKElement
.1fc6	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1fc7					TOKTokeniseConstant:
.1fc7	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1fc9	48		pha				pha 								; save on stack
.1fca	29 c0		and #$c0			and 	#$C0
.1fcc	05 09		ora $09				ora 	IFR0+IM1
.1fce	05 0a		ora $0a				ora 	IFR0+IM2
.1fd0	f0 10		beq $1fe2			beq 	_TTCLess
.1fd2	da		phx				phx
.1fd3	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1fd5					_TTCShiftRight:
.1fd5	46 0a		lsr $0a				lsr 	IFR0+IM2
.1fd7	66 09		ror $09				ror 	IFR0+IM1
.1fd9	66 08		ror $08				ror 	IFR0+IM0
.1fdb	ca		dex				dex
.1fdc	d0 f7		bne $1fd5			bne 	_TTCShiftRight
.1fde	fa		plx				plx
.1fdf	20 c7 1f	jsr $1fc7			jsr 	TOKTokeniseConstant
.1fe2					_TTCLess:
.1fe2	68		pla				pla
.1fe3	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fe5	20 84 20	jsr $2084			jsr 	TOKWriteA
.1fe8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fe9					TOKTokeniseDecimals:
.1fe9	20 97 20	jsr $2097			jsr 	TOKGetNext 					; consume the .
.1fec	20 14 22	jsr $2214			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fef	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1ff1	20 84 20	jsr $2084			jsr 	TOKWriteA
.1ff4	20 f9 1f	jsr $1ff9			jsr 	TOKOutputElementBuffer 		; then the buffer
.1ff7	18		clc				clc
.1ff8	60		rts				rts
.1ff9					TOKOutputElementBuffer:
.1ff9	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1ffc	20 84 20	jsr $2084			jsr 	TOKWriteA
.1fff	a8		tay				tay 								; put in Y
.2000	f0 0c		beq $200e			beq 	_TOEExit 					; exit if empty which is okay.
.2002	a2 01		ldx #$01			ldx 	#1
.2004					_TOELoop:
.2004	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2007	20 84 20	jsr $2084			jsr 	TOKWriteA
.200a	e8		inx				inx
.200b	88		dey				dey
.200c	d0 f6		bne $2004			bne 	_TOELoop
.200e					_TOEExit:
.200e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.200f					TOKTokenise:
.200f	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.2012	8e 1c 06	stx $061c			stx 	TOKDataSource
.2015	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2017	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.201a	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.201c	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.201f	9c 01 04	stz $0401			stz 	TOKLineNumber
.2022	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2025					_TOKMainLoop:
.2025	20 93 20	jsr $2093			jsr 	TOKGet 						; what follows.
.2028	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.202a	f0 4f		beq $207b			beq 	_TOKExit
.202c	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.202e	d0 05		bne $2035			bne 	_TOKElement
.2030	20 97 20	jsr $2097			jsr 	TOKGetNext
.2033	80 f0		bra $2025			bra 	_TOKMainLoop
.2035					_TOKElement:
.2035	20 9b 22	jsr $229b			jsr 	TOKIsDigit 					; is it 0..9
.2038	90 0a		bcc $2044			bcc 	_TOKNotDigit
.203a	20 eb 21	jsr $21eb			jsr 	TOKTokeniseInteger 			; get integer
.203d	b0 43		bcs $2082			bcs 	_TOKFail 					; did it fail ?
.203f	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2042	80 e1		bra $2025			bra 	_TOKMainLoop
.2044					_TOKNotDigit:
.2044	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2047	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2049	d0 07		bne $2052			bne 	_TOKNotHex
.204b	20 ed 20	jsr $20ed			jsr 	TOKTokeniseHexadecimal
.204e	b0 32		bcs $2082			bcs 	_TOKFail
.2050	80 d3		bra $2025			bra 	_TOKMainLoop
.2052					_TOKNotHex:
.2052	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2054	d0 07		bne $205d			bne 	_TOKNotDecimal
.2056	20 e9 1f	jsr $1fe9			jsr 	TOKTokeniseDecimals
.2059	b0 27		bcs $2082			bcs 	_TOKFail
.205b	80 c8		bra $2025			bra 	_TOKMainLoop
.205d					_TOKNotDecimal:
.205d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.205f	d0 07		bne $2068			bne 	_TOKNotString
.2061	20 62 22	jsr $2262			jsr 	TOKTokeniseString
.2064	b0 1c		bcs $2082			bcs 	_TOKFail
.2066	80 bd		bra $2025			bra 	_TOKMainLoop
.2068					_TOKNotString:
.2068	20 b8 22	jsr $22b8			jsr 	TOKIsAlpha 					; identifier ?
.206b	b0 07		bcs $2074			bcs 	_TOKIdentifier
.206d	20 28 22	jsr $2228			jsr 	TOKTokenisePunctuation 		; punctuation
.2070	b0 10		bcs $2082			bcs 	_TOKFail
.2072	80 b1		bra $2025			bra 	_TOKMainLoop
.2074					_TOKIdentifier:
.2074	20 27 21	jsr $2127			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2077	b0 09		bcs $2082			bcs 	_TOKFail
.2079	80 aa		bra $2025			bra 	_TOKMainLoop
.207b					_TOKExit:
.207b	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.207d	20 84 20	jsr $2084			jsr 	TOKWriteA
.2080	18		clc				clc									; return with carry set.
.2081	60		rts				rts
.2082					_TOKFail:
.2082	38		sec				sec
.2083	60		rts				rts
.2084					TOKWriteA:
.2084	da		phx				phx
.2085	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2088	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.208b	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.208e	fa		plx				plx
.208f	ee 00 04	inc $0400			inc 	TOKLineSize
.2092	60		rts				rts
.2093					TOKGet:
.2093	18		clc				clc
.2094	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2097					TOKGetNext:
.2097	38		sec				sec
.2098	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.209b					TOKFindToken:
.209b	a2 b5		ldx #$b5			ldx 	#StandardTokens & $FF 		; do this table
.209d	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.209f	20 b7 20	jsr $20b7			jsr 	TOKFindTokenXY 				; find it, or not
.20a2	b0 0d		bcs $20b1			bcs 	_TOKFound1
.20a4	a2 32		ldx #$32			ldx 	#AlternateTokens & $FF 		; do the alternate table
.20a6	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.20a8	20 b7 20	jsr $20b7			jsr 	TOKFindTokenXY 				; find it, or not
.20ab	90 08		bcc $20b5			bcc 	_TOKFTFail 					; not ....
.20ad	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.20af	38		sec				sec
.20b0	60		rts				rts
.20b1					_TOKFound1:
.20b1	a2 00		ldx #$00			ldx 	#0
.20b3	38		sec				sec
.20b4	60		rts				rts
.20b5					_TOKFTFail
.20b5	18		clc				clc
.20b6	60		rts				rts
.20b7					TOKFindTokenXY:
.20b7	86 22		stx $22				stx 	zTemp0 						; save token table address
.20b9	84 23		sty $23				sty 	zTemp0+1
.20bb	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.20bd	8d 1f 06	sta $061f			sta 	TOKCurrent
.20c0					_TOKFindLoop:
.20c0	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.20c2	18		clc				clc 		 						; clear carry in case of fail
.20c3	30 17		bmi $20dc			bmi 	_TOKExit 					; end of table, fail, so return CC.
.20c5	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.20c8	d0 13		bne $20dd			bne 	_TOKNext 					; different, try next.
.20ca	aa		tax				tax 								; number of chars to compare.
.20cb	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.20cd					_TOKCompare:
.20cd	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.20cf	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.20d2	d0 09		bne $20dd			bne 	_TOKNext 					; different ? try next
.20d4	c8		iny				iny 								; compare next two
.20d5	ca		dex				dex
.20d6	d0 f5		bne $20cd			bne 	_TOKCompare 				; until done X characters.
.20d8	38		sec				sec
.20d9	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.20dc					_TOKExit:
.20dc	60		rts				rts
.20dd					_TOKNext:
.20dd	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.20e0	38		sec				sec 								; add length+1 to ptr
.20e1	b2 22		lda ($22)			lda 	(zTemp0)
.20e3	65 22		adc $22				adc 	zTemp0
.20e5	85 22		sta $22				sta 	zTemp0
.20e7	90 d7		bcc $20c0			bcc 	_TOKFindLoop
.20e9	e6 23		inc $23				inc 	zTemp0+1
.20eb	80 d3		bra $20c0			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.20ed					TOKTokeniseHexadecimal:
.20ed	20 97 20	jsr $2097			jsr 	TOKGetNext 					; consume the $
.20f0	a2 08		ldx #$08			ldx 	#IFR0
.20f2	20 2c 31	jsr $312c			jsr 	IFloatSetZero 				; set R0 = 0
.20f5					_TTHLoop:
.20f5	20 93 20	jsr $2093			jsr 	TOKGet 						; keep getting and copying while numeric.
.20f8	20 c5 22	jsr $22c5			jsr 	TOKIsHexadecimal
.20fb	90 20		bcc $211d			bcc 	_TTHDone
.20fd	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20ff	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.2102	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.2105	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.2108	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.210b	20 97 20	jsr $2097			jsr 	TOKGetNext
.210e	38		sec				sec 								; convert to decimal.
.210f	e9 30		sbc #$30			sbc 	#48
.2111	c9 0a		cmp #$0a			cmp 	#10
.2113	90 02		bcc $2117			bcc 	_TTHNotAlpha
.2115	e9 07		sbc #$07			sbc 	#7
.2117					_TTHNotAlpha:
.2117	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2119	85 08		sta $08				sta 	IFR0+IM0
.211b	80 d8		bra $20f5			bra 	_TTHLoop
.211d					_TTHDone:
.211d	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.211f	20 84 20	jsr $2084			jsr 	TOKWriteA
.2122	20 c7 1f	jsr $1fc7			jsr 	TOKTokeniseConstant 		; write integer out.
.2125	18		clc				clc
.2126	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2127					TOKTokeniseIdentifier:
.2127	20 b4 1f	jsr $1fb4			jsr 	TOKResetElement 			; extract an identifier
.212a					_TOKGetIdentifier:
.212a	20 93 20	jsr $2093			jsr 	TOKGet
.212d	20 85 22	jsr $2285			jsr 	TOKToUpper
.2130	20 a7 22	jsr $22a7			jsr 	TOKIsIdentifierElement
.2133	90 08		bcc $213d			bcc 	_TOKEndIdent
.2135	20 b8 1f	jsr $1fb8			jsr		TOKWriteElement
.2138	20 97 20	jsr $2097			jsr 	TOKGetNext
.213b	80 ed		bra $212a			bra 	_TOKGetIdentifier
.213d					_TOKEndIdent:
.213d	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.213f	d0 06		bne $2147			bne 	_TOKNotString
.2141	20 b8 1f	jsr $1fb8			jsr 	TOKWriteElement 			; add it
.2144	20 97 20	jsr $2097			jsr 	TOKGetNext 					; consume it
.2147					_TOKNotString:
.2147	20 93 20	jsr $2093			jsr 	TOKGet 						; finally check for (
.214a	c9 28		cmp #$28			cmp 	#"("
.214c	d0 06		bne $2154			bne 	_TOKNoArray
.214e	20 b8 1f	jsr $1fb8			jsr 	TOKWriteElement 			; add it
.2151	20 97 20	jsr $2097			jsr 	TOKGetNext 					; consume it
.2154					_TOKNoArray:
.2154	20 9b 20	jsr $209b			jsr 	TOKFindToken 				; find it
.2157	90 18		bcc $2171			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2159	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.215b	f0 0f		beq $216c			beq 	_TOKComment 				; yes, do comment code.
.215d	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.215f	d0 06		bne $2167			bne 	_TOKNoShift
.2161	48		pha				pha 								; write the shift.
.2162	8a		txa				txa
.2163	20 84 20	jsr $2084			jsr 	TOKWriteA
.2166	68		pla				pla
.2167					_TOKNoShift:
.2167	20 84 20	jsr $2084			jsr 	TOKWriteA 					; write the main token.
.216a	18		clc				clc
.216b	60		rts				rts
.216c					_TOKComment:
.216c	20 b8 21	jsr $21b8			jsr 	TOKDoComment
.216f	18		clc				clc
.2170	60		rts				rts
.2171					_TOKIsVariable:
.2171	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2173					_TOKOutputBuffer:
.2173	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2176	20 9f 21	jsr $219f			jsr 	TOKTranslateIdentifier
.2179	20 84 20	jsr $2084			jsr 	TOKWriteA
.217c	e8		inx				inx
.217d	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.2180	20 a7 22	jsr $22a7			jsr 	TOKIsIdentifierElement
.2183	b0 ee		bcs $2173			bcs 	_TOKOutputBuffer
.2185	a8		tay				tay 								; last char in Y
.2186	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2188	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.218a	f0 0e		beq $219a			beq 	_TOKIVExit
.218c	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.218e	d0 04		bne $2194			bne 	_TOKIVCheckArray 			; no, check for (
.2190	1a		inc a				inc 	a 							; token is $7D
.2191	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2194					_TOKIVCheckArray:
.2194	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2196	d0 02		bne $219a			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2198	1a		inc a				inc 	a
.2199	1a		inc a				inc 	a
.219a					_TOKIVExit:
.219a	20 84 20	jsr $2084			jsr 	TOKWriteA 					; ending token
.219d	18		clc				clc
.219e	60		rts				rts
.219f					TOKTranslateIdentifier:
.219f	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.21a1	f0 0f		beq $21b2			beq 	_TTI64
.21a3	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.21a5	f0 0e		beq $21b5			beq 	_TTI65
.21a7	38		sec				sec
.21a8	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.21aa	10 03		bpl $21af			bpl 	_TTIExit
.21ac	18		clc				clc 								; map 09 onto 26-35
.21ad	69 2b		adc #$2b			adc 	#"A"-"0"+26
.21af					_TTIExit:
.21af	09 40		ora #$40			ora 	#$40 						; correct range.
.21b1	60		rts				rts
.21b2	a9 64		lda #$64	_TTI64:	lda 	#$64
.21b4	60		rts				rts
.21b5	a9 65		lda #$65	_TTI65:	lda 	#$65
.21b7	60		rts				rts
.21b8					TOKDoComment:
.21b8	20 84 20	jsr $2084			jsr 	TOKWriteA					; output the token.
.21bb					_TOKSkipSpaces:
.21bb	20 93 20	jsr $2093			jsr 	TOKGet 						; skip over spaces
.21be	c9 20		cmp #$20			cmp 	#' '
.21c0	d0 05		bne $21c7			bne 	_TOKEndSpaces
.21c2	20 97 20	jsr $2097			jsr 	TOKGetNext
.21c5	80 f4		bra $21bb			bra 	_TOKSkipSpaces
.21c7					_TOKEndSpaces:
.21c7	48		pha				pha 								; save it
.21c8	68		pla				pla
.21c9	f0 04		beq $21cf			beq 	_TOKDCExit 					; end of line.
.21cb	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.21cd	d0 01		bne $21d0			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.21cf					_TOKDCExit:
.21cf	60		rts				rts
.21d0					_TOKDCDoLine:
.21d0	20 b4 1f	jsr $1fb4			jsr 	TOKResetElement 			; start getting the string
.21d3					_TOKDCLoop:
.21d3	20 93 20	jsr $2093			jsr 	TOKGet 						; check EOL
.21d6	c9 00		cmp #$00			cmp 	#0
.21d8	f0 08		beq $21e2			beq 	_TOKDCEndComment
.21da	20 97 20	jsr $2097			jsr 	TOKGetNext 					; get and consume
.21dd	20 b8 1f	jsr $1fb8			jsr 	TOKWriteElement
.21e0	80 f1		bra $21d3			bra 	_TOKDCLoop
.21e2					_TOKDCEndComment:
.21e2	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21e4	20 84 20	jsr $2084			jsr 	TOKWriteA
.21e7	20 f9 1f	jsr $1ff9			jsr 	TOKOutputElementBuffer
.21ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.21eb					TOKTokeniseInteger:
.21eb	20 14 22	jsr $2214			jsr 	TOKExtractInteger 			; pull an integer out as text.
.21ee	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.21f0	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.21f2	ad 1c 05	lda $051c			lda		TOKElement
.21f5	20 90 2f	jsr $2f90			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.21f8	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21fb	f0 12		beq $220f			beq 	_TOKNotLineNumber
.21fd	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21ff	d0 0c		bne $220d			bne 	_TOKBadLineNumeber
.2201	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2203	8d 01 04	sta $0401			sta 	TOKLineNumber
.2206	a5 09		lda $09				lda 	IFR0+IM1
.2208	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.220b	18		clc				clc
.220c	60		rts				rts
.220d					_TOKBadLineNumeber:
.220d	38		sec				sec
.220e	60		rts				rts
.220f					_TOKNotLineNumber:
.220f	20 c7 1f	jsr $1fc7			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2212	18		clc				clc
.2213	60		rts				rts
.2214					TOKExtractInteger:
.2214	20 b4 1f	jsr $1fb4			jsr 	TOKResetElement 			; restart
.2217					_TTILoop:
.2217	20 93 20	jsr $2093			jsr 	TOKGet 						; keep getting and copying while numeric.
.221a	20 9b 22	jsr $229b			jsr 	TOKIsDigit
.221d	90 08		bcc $2227			bcc 	_TOKEIExit
.221f	20 b8 1f	jsr $1fb8			jsr 	TOKWriteElement
.2222	20 97 20	jsr $2097			jsr 	TOKGetNext
.2225	80 f0		bra $2217			bra 	_TTILoop
.2227					_TOKEIExit:
.2227	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2228					TOKTokenisePunctuation:
.2228	20 b4 1f	jsr $1fb4			jsr 	TOKResetElement 			; copy first punctuation character into element.
.222b	20 97 20	jsr $2097			jsr 	TOKGetNext
.222e	20 b8 1f	jsr $1fb8			jsr 	TOKWriteElement
.2231	20 93 20	jsr $2093			jsr 	TOKGet 						; what follows ?
.2234	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2236	f0 10		beq $2248			beq 	_TTPOne
.2238	20 af 22	jsr $22af			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.223b	b0 0b		bcs $2248			bcs 	_TTPOne 					; these speed things up a bit.
.223d	20 b8 1f	jsr $1fb8			jsr 	TOKWriteElement 			; this is what we will search for.
.2240	20 9b 20	jsr $209b			jsr 	TOKFindToken
.2243	b0 0a		bcs $224f			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2245	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2248					_TTPOne:
.2248	20 9b 20	jsr $209b			jsr 	TOKFindToken 				; look for one character punctuation
.224b	b0 07		bcs $2254			bcs 	_TTPOutputExit 				; we found it
.224d	38		sec				sec 								; not recognised.
.224e	60		rts				rts
.224f					_TTPConsumeExit:
.224f	48		pha				pha
.2250	20 97 20	jsr $2097			jsr 	TOKGetNext 					; get the 2nd char out.
.2253	68		pla				pla
.2254					_TTPOutputExit:
.2254	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2256	f0 05		beq $225d			beq 	_TTPComment
.2258	20 84 20	jsr $2084			jsr  	TOKWriteA 					; write token out
.225b	18		clc				clc
.225c	60		rts				rts
.225d					_TTPComment:
.225d	20 b8 21	jsr $21b8			jsr 	TOKDoComment
.2260	18		clc				clc
.2261	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2262					TOKTokeniseString:
.2262	20 97 20	jsr $2097			jsr 	TOKGetNext 					; consume the "
.2265	20 b4 1f	jsr $1fb4			jsr 	TOKResetElement 			; start getting the string
.2268					_TOKTSLoop:
.2268	20 93 20	jsr $2093			jsr 	TOKGet 						; check EOL
.226b	c9 00		cmp #$00			cmp 	#0
.226d	f0 0c		beq $227b			beq 	_TOKTSExit
.226f	20 97 20	jsr $2097			jsr 	TOKGetNext 					; get and consume
.2272	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2274	f0 05		beq $227b			beq 	_TOKTSExit
.2276	20 b8 1f	jsr $1fb8			jsr 	TOKWriteElement
.2279	80 ed		bra $2268			bra 	_TOKTSLoop
.227b					_TOKTSExit:
.227b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.227d	20 84 20	jsr $2084			jsr 	TOKWriteA
.2280	20 f9 1f	jsr $1ff9			jsr 	TOKOutputElementBuffer
.2283	18		clc				clc
.2284	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2285					TOKToUpper:
.2285	c9 61		cmp #$61			cmp 	#"a"
.2287	90 06		bcc $228f			bcc 	_TTUNotLower
.2289	c9 7b		cmp #$7b			cmp 	#"z"+1
.228b	b0 02		bcs $228f			bcs 	_TTUNotLower
.228d	49 20		eor #$20			eor 	#$20
.228f					_TTUNotLower:
.228f	60		rts				rts
.2290					TOKToLower:
.2290	c9 41		cmp #$41			cmp 	#"A"
.2292	90 06		bcc $229a			bcc 	_TTUNotUpper
.2294	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2296	b0 02		bcs $229a			bcs 	_TTUNotUpper
.2298	49 20		eor #$20			eor 	#$20
.229a					_TTUNotUpper:
.229a	60		rts				rts
.229b					TOKIsDigit:
.229b	c9 30		cmp #$30			cmp 	#"0"
.229d	90 06		bcc $22a5			bcc 	TOKFail
.229f	c9 3a		cmp #$3a			cmp 	#"9"+1
.22a1	b0 02		bcs $22a5			bcs 	TOKFail
.22a3					TOKSucceed:
.22a3	38		sec				sec
.22a4	60		rts				rts
.22a5					TOKFail:
.22a5	18		clc				clc
.22a6	60		rts				rts
.22a7					TOKIsIdentifierElement:
.22a7	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.22a9	f0 f8		beq $22a3			beq 	TOKSucceed
.22ab	c9 5f		cmp #$5f			cmp 	#"_"
.22ad	f0 f4		beq $22a3			beq 	TOKSucceed 					; else fall through to alphanumeric
.22af					TOKIsAlphaNumeric:
.22af	20 b8 22	jsr $22b8			jsr 	TOKIsAlpha
.22b2	b0 ef		bcs $22a3			bcs 	TOKSucceed
.22b4	20 9b 22	jsr $229b			jsr 	TOKIsDigit
.22b7	60		rts				rts
.22b8					TOKIsAlpha:
.22b8	20 85 22	jsr $2285			jsr 	TOKToUpper
.22bb	c9 41		cmp #$41			cmp 	#"A"
.22bd	90 e6		bcc $22a5			bcc 	TOKFail
.22bf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.22c1	b0 e2		bcs $22a5			bcs 	TOKFail
.22c3	80 de		bra $22a3			bra 	TOKSucceed
.22c5					TOKIsHexadecimal:
.22c5	20 9b 22	jsr $229b			jsr		TOKIsDigit
.22c8	b0 d9		bcs $22a3			bcs 	TOKSucceed
.22ca	20 b8 22	jsr $22b8			jsr 	TOKIsAlpha
.22cd	90 d6		bcc $22a5			bcc 	TOKFail
.22cf	c9 47		cmp #$47			cmp 	#"F"+1
.22d1	b0 d2		bcs $22a5			bcs 	TOKFail
.22d3	80 ce		bra $22a3			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.22d5					Command_CALL:
.22d5	a9 42		lda #$42			lda 	#STK_CALL
.22d7	20 a3 27	jsr $27a3			jsr 	StackOpen
.22da	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.22dc	29 c0		and #$c0			and 	#$C0
.22de	c9 40		cmp #$40			cmp 	#$40
.22e0	d0 29		bne $230b			bne 	_CCSyntax
.22e2	20 6f 2a	jsr $2a6f			jsr 	VARGetInfo 					; get the information
.22e5	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 				; check right bracket follows.
.22e8	20 21 2a	jsr $2a21			jsr 	VARFind 					; exists ?
.22eb	90 21		bcc $230e			bcc 	_CCUnknown
.22ed	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.22ef	85 22		sta $22				sta 	zTemp0
.22f1	20 d7 27	jsr $27d7			jsr 	STKSaveCodePosition 		; save return address on stack.
.22f4	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.22f6	b1 22		lda ($22),y			lda 	(zTemp0),y
.22f8	c9 ff		cmp #$ff			cmp 	#$FF
.22fa	d0 12		bne $230e			bne 	_CCUnknown
.22fc	88		dey				dey 								; get Y offset to stack
.22fd	b1 22		lda ($22),y			lda 	(zTemp0),y
.22ff	48		pha				pha
.2300	88		dey				dey 								; get address
.2301	b1 22		lda ($22),y			lda 	(zTemp0),y
.2303	85 19		sta $19				sta 	codePtr+1
.2305	b2 22		lda ($22)			lda 	(zTemp0)
.2307	85 18		sta $18				sta 	codePtr
.2309	7a		ply				ply 								; restore Y
.230a	60		rts				rts
.230b					_CCSyntax:
.230b	4c d5 25	jmp $25d5		jmp	ErrorV_syntax
.230e					_CCUnknown:
.230e	4c 4a 27	jmp $274a		jmp	ErrorV_unknown
.2311					Command_ENDPROC:
.2311	a9 42		lda #$42			lda 	#STK_CALL
.2313	20 cf 27	jsr $27cf			jsr 	StackCheckFrame
.2316	20 e9 27	jsr $27e9			jsr 	STKLoadCodePosition 		; return
.2319	20 c1 27	jsr $27c1			jsr 	StackClose
.231c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.231d					Command_DO:
.231d	a9 22		lda #$22			lda 	#STK_DO
.231f	20 a3 27	jsr $27a3			jsr 	StackOpen
.2322	20 d7 27	jsr $27d7			jsr 	STKSaveCodePosition 		; save loop position
.2325	60		rts				rts
.2326					Command_EXIT:
.2326	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2328	20 cf 27	jsr $27cf			jsr 	StackCheckFrame
.232b	20 c1 27	jsr $27c1			jsr 	StackClose 					; close it
.232e	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2330	aa		tax				tax
.2331	20 e5 24	jsr $24e5			jsr 	ScanForward
.2334	60		rts				rts
.2335					Command_LOOP:
.2335	a9 22		lda #$22			lda 	#STK_DO
.2337	20 cf 27	jsr $27cf			jsr 	StackCheckFrame
.233a	20 e9 27	jsr $27e9			jsr 	STKLoadCodePosition 		; loop back
.233d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.233e					Command_FOR:
.233e	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2340	20 a3 27	jsr $27a3			jsr 	StackOpen
.2343	20 ba 12	jsr $12ba			jsr 	CommandLET 					; do "I = 1" bit
.2346	5a		phy				phy 								; save variable address to +4,+5
.2347	a0 04		ldy #$04			ldy 	#4
.2349	a5 22		lda $22				lda 	zTemp0
.234b	91 2a		sta ($2a),y			sta 	(basicStack),y
.234d	c8		iny				iny
.234e	a5 23		lda $23				lda 	zTemp0+1
.2350	91 2a		sta ($2a),y			sta 	(basicStack),y
.2352	7a		ply				ply
.2353	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2355	20 9a 27	jsr $279a			jsr 	ERRCheckA
.2358	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.235b	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.235d	a2 08		ldx #$08			ldx 	#IFR0
.235f	20 b4 23	jsr $23b4			jsr 	CFSaveR0X
.2362	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2364	c9 91		cmp #$91			cmp 	#PR_STEP
.2366	d0 06		bne $236e			bne 	_CFStep1
.2368	c8		iny				iny 								; consume step
.2369	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; evaluate STEP
.236c	80 24		bra $2392			bra 	_CFWriteStep
.236e					_CFStep1:
.236e	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2370	a9 01		lda #$01			lda 	#1
.2372	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.2375	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2376	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2378	b1 2a		lda ($2a),y			lda 	(basicStack),y
.237a	85 22		sta $22				sta 	zTemp0
.237c	c8		iny				iny
.237d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.237f	85 23		sta $23				sta 	zTemp0+1
.2381	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2383	b1 22		lda ($22),y			lda 	(zTemp0),y
.2385	d0 0a		bne $2391			bne 	_CFNotOptimised
.2387	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2389	b1 2a		lda ($2a),y			lda 	(basicStack),y
.238b	d0 04		bne $2391			bne 	_CFNotOptimised
.238d	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.238f	85 0b		sta $0b				sta 	IFR0+IExp
.2391					_CFNotOptimised:
.2391	7a		ply				ply
.2392					_CFWriteStep:
.2392	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2394	a9 06		lda #$06			lda 	#6
.2396	20 b4 23	jsr $23b4			jsr 	CFSaveR0X
.2399	20 d7 27	jsr $27d7			jsr 	STKSaveCodePosition 		; save loop position
.239c	60		rts				rts
.239d					CFLoadR0X:
.239d	5a		phy				phy
.239e	a8		tay				tay
.239f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a1	95 00		sta $00,x			sta 	IM0,x
.23a3	c8		iny				iny
.23a4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a6	95 01		sta $01,x			sta 	IM1,x
.23a8	c8		iny				iny
.23a9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23ab	95 02		sta $02,x			sta 	IM2,x
.23ad	c8		iny				iny
.23ae	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23b0	95 03		sta $03,x			sta 	IExp,x
.23b2	7a		ply				ply
.23b3	60		rts				rts
.23b4					CFSaveR0X:
.23b4	5a		phy				phy
.23b5	a8		tay				tay
.23b6	b5 00		lda $00,x			lda 	IM0,x
.23b8	91 2a		sta ($2a),y			sta 	(basicStack),y
.23ba	c8		iny				iny
.23bb	b5 01		lda $01,x			lda 	IM1,x
.23bd	91 2a		sta ($2a),y			sta 	(basicStack),y
.23bf	c8		iny				iny
.23c0	b5 02		lda $02,x			lda 	IM2,x
.23c2	91 2a		sta ($2a),y			sta 	(basicStack),y
.23c4	c8		iny				iny
.23c5	b5 03		lda $03,x			lda 	IExp,x
.23c7	91 2a		sta ($2a),y			sta 	(basicStack),y
.23c9	7a		ply				ply
.23ca	60		rts				rts
.23cb					Command_NEXT:
.23cb	a9 37		lda #$37			lda 	#STK_FOR
.23cd	20 cf 27	jsr $27cf			jsr 	StackCheckFrame
.23d0	5a		phy				phy 								; check optimised loop
.23d1	a0 09		ldy #$09			ldy 	#9
.23d3	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23d5	7a		ply				ply
.23d6	0a		asl a				asl 	a
.23d7	b0 35		bcs $240e			bcs 	_CNOptimised
.23d9	20 46 24	jsr $2446			jsr 	_CNLoadValue 				; load index value to R0.
.23dc	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.23de	a9 06		lda #$06			lda 	#6
.23e0	20 9d 23	jsr $239d			jsr 	CFLoadR0X
.23e3	20 24 2b	jsr $2b24			jsr 	IFloatAdd 					; add them together and write back.
.23e6	20 69 24	jsr $2469			jsr 	_CNSaveValue
.23e9	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.23eb	a2 0c		ldx #$0c			ldx 	#IFR1
.23ed	20 9d 23	jsr $239d			jsr 	CFLoadR0X
.23f0	20 fb 2d	jsr $2dfb			jsr 	IFloatCompare 				; compare terminal vs current
.23f3	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.23f5	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.23f8	f0 10		beq $240a			beq 	_CNLoopBack
.23fa	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.23fc	5a		phy				phy
.23fd	a0 09		ldy #$09			ldy 	#6+IExp
.23ff	51 2a		eor ($2a),y			eor 	(basicStack),y
.2401	7a		ply				ply
.2402	29 40		and #$40			and 	#IFSign
.2404	f0 04		beq $240a			beq 	_CNLoopBack
.2406					_CNExitLoop:
.2406	20 c1 27	jsr $27c1			jsr 	StackClose		 			; return
.2409	60		rts				rts
.240a					_CNLoopBack:
.240a	20 e9 27	jsr $27e9			jsr 	STKLoadCodePosition 		; loop back
.240d	60		rts				rts
.240e					_CNOptimised:
.240e	5a		phy				phy
.240f	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2411	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2413	85 26		sta $26				sta 	zTemp2
.2415	c8		iny				iny
.2416	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2418	85 27		sta $27				sta 	zTemp2+1
.241a	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.241c					_CNIncrement:
.241c	c8		iny				iny
.241d	b1 26		lda ($26),y			lda 	(zTemp2),y
.241f	1a		inc a				inc 	a
.2420	91 26		sta ($26),y			sta 	(zTemp2),y
.2422	f0 f8		beq $241c			beq 	_CNIncrement
.2424	18		clc				clc 								; point zTemp0 to terminal value
.2425	a5 2a		lda $2a				lda 	basicStack
.2427	69 0a		adc #$0a			adc 	#10
.2429	85 22		sta $22				sta 	zTemp0
.242b	a5 2b		lda $2b				lda 	basicStack+1
.242d	69 00		adc #$00			adc 	#0
.242f	85 23		sta $23				sta 	zTemp0+1
.2431	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2433	18		clc				clc 								; borrow 1, we want > not >=
.2434	b2 26		lda ($26)			lda 	(zTemp2)
.2436	f2 22		sbc ($22)			sbc 	(zTemp0)
.2438	b1 26		lda ($26),y			lda 	(zTemp2),y
.243a	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.243c	c8		iny				iny
.243d	b1 26		lda ($26),y			lda 	(zTemp2),y
.243f	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2441	7a		ply				ply
.2442	b0 c2		bcs $2406			bcs 	_CNExitLoop
.2444	80 c4		bra $240a			bra 	_CNLoopBack
.2446					_CNLoadValue:
.2446	5a		phy				phy
.2447	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2449	b1 2a		lda ($2a),y			lda 	(basicStack),y
.244b	85 26		sta $26				sta 	zTemp2
.244d	c8		iny				iny
.244e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2450	85 27		sta $27				sta 	zTemp2+1
.2452	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2454	b1 26		lda ($26),y			lda 	(zTemp2),y
.2456	85 08		sta $08				sta 	IFR0+IM0
.2458	c8		iny				iny
.2459	b1 26		lda ($26),y			lda 	(zTemp2),y
.245b	85 09		sta $09				sta 	IFR0+IM1
.245d	c8		iny				iny
.245e	b1 26		lda ($26),y			lda 	(zTemp2),y
.2460	85 0a		sta $0a				sta 	IFR0+IM2
.2462	c8		iny				iny
.2463	b1 26		lda ($26),y			lda 	(zTemp2),y
.2465	85 0b		sta $0b				sta 	IFR0+IExp
.2467	7a		ply				ply
.2468	60		rts				rts
.2469					_CNSaveValue:
.2469	5a		phy				phy
.246a	a0 00		ldy #$00			ldy 	#0
.246c	a5 08		lda $08				lda 	IFR0+IM0
.246e	91 26		sta ($26),y			sta 	(zTemp2),y
.2470	c8		iny				iny
.2471	a5 09		lda $09				lda 	IFR0+IM1
.2473	91 26		sta ($26),y			sta 	(zTemp2),y
.2475	c8		iny				iny
.2476	a5 0a		lda $0a				lda 	IFR0+IM2
.2478	91 26		sta ($26),y			sta 	(zTemp2),y
.247a	c8		iny				iny
.247b	a5 0b		lda $0b				lda 	IFR0+IExp
.247d	91 26		sta ($26),y			sta 	(zTemp2),y
.247f	7a		ply				ply
.2480	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2481					Command_GOSUB:
.2481	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; get line number
.2484	a9 52		lda #$52			lda 	#STK_GOSUB
.2486	20 a3 27	jsr $27a3			jsr 	StackOpen
.2489	20 d7 27	jsr $27d7			jsr 	STKSaveCodePosition 		; save return address on stack.
.248c	4c db 11	jmp $11db			jmp 	GotoR0
.248f					Command_RETURN:
.248f	a9 52		lda #$52			lda 	#STK_GOSUB
.2491	20 cf 27	jsr $27cf			jsr 	StackCheckFrame
.2494	20 e9 27	jsr $27e9			jsr 	STKLoadCodePosition 		; return
.2497	20 c1 27	jsr $27c1			jsr 	StackClose
.249a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.249b					IfCommand:
.249b	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; Get the if test.
.249e	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.24a0	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.24a2	d0 0c		bne $24b0			bne 	_IfStructured 				; we still support it.
.24a4	c8		iny				iny 								; consume THEN
.24a5	a2 08		ldx #$08			ldx 	#IFR0
.24a7	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; is it zero
.24aa	f0 01		beq $24ad			beq 	_IfFail 					; if fail, go to next line
.24ac	60		rts				rts 								; if THEN just continue
.24ad					_IfFail:
.24ad	4c cf 14	jmp $14cf			jmp 	RUNEndOfLine
.24b0					_IfStructured:
.24b0	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; is it zero
.24b3	d0 07		bne $24bc			bne 	_IfExit 					; if not, then continue normally.
.24b5	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.24b7	a2 85		ldx #$85			ldx 	#PR_ENDIF
.24b9	20 e5 24	jsr $24e5			jsr 	ScanForward 				; and run from there
.24bc					_IfExit:
.24bc	60		rts				rts
.24bd					ElseCode:
.24bd	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.24bf	aa		tax				tax 								; so just go to the structure exit
.24c0	20 e5 24	jsr $24e5			jsr 	ScanForward
.24c3	60		rts				rts
.24c4					EndIf:
.24c4	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.24c5					Command_REPEAT:
.24c5	a9 02		lda #$02			lda 	#STK_REPEAT
.24c7	20 a3 27	jsr $27a3			jsr 	StackOpen
.24ca	20 d7 27	jsr $27d7			jsr 	STKSaveCodePosition 		; save loop position
.24cd	60		rts				rts
.24ce					Command_UNTIL:
.24ce	a9 02		lda #$02			lda 	#STK_REPEAT
.24d0	20 cf 27	jsr $27cf			jsr 	StackCheckFrame
.24d3	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; work out the test
.24d6	a2 08		ldx #$08			ldx 	#IFR0
.24d8	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; check if zero
.24db	f0 04		beq $24e1			beq 	_CULoopBack 				; if so keep looping
.24dd	20 c1 27	jsr $27c1			jsr 	StackClose		 			; return
.24e0	60		rts				rts
.24e1					_CULoopBack:
.24e1	20 e9 27	jsr $27e9			jsr 	STKLoadCodePosition 		; loop back
.24e4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.24e5					ScanForward:
.24e5	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.24e7	86 23		stx $23				stx 	zTemp0+1
.24e9	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.24eb					_ScanForwardLoop:
.24eb	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.24ed	d0 0a		bne $24f9			bne 	_ScanNoCheck
.24ef	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.24f1	c5 22		cmp $22				cmp 	zTemp0
.24f3	f0 49		beq $253e			beq 	_ScanExit
.24f5	c5 23		cmp $23				cmp 	zTemp0+1
.24f7	f0 45		beq $253e			beq 	_ScanExit
.24f9					_ScanNoCheck:
.24f9	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.24fb	c8		iny				iny
.24fc	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.24fe	f0 37		beq $2537			beq		_ScanDataItem
.2500	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2502	f0 33		beq $2537			beq 	_ScanDataItem
.2504	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2506	f0 1b		beq $2523			beq 	_ScanNextLine
.2508	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.250a	d0 01		bne $250d			bne 	_ScanNoShift
.250c	c8		iny				iny
.250d					_ScanNoShift:
.250d	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.250f	b0 da		bcs $24eb			bcs 	_ScanForwardLoop
.2511	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2513	90 d6		bcc $24eb			bcc 	_ScanForwardLoop
.2515	aa		tax				tax 								; access the table to get the adjustment.
.2516	18		clc				clc
.2517	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2519	7d 29 1a	adc $1a29,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.251c	85 24		sta $24				sta 	zTemp1
.251e	10 cb		bpl $24eb			bpl		_ScanForwardLoop 			; error if -ve ?
.2520	4c 61 26	jmp $2661		jmp	ErrorV_structure
.2523					_ScanNextLine:
.2523	18		clc				clc	 								; forward to next line.
.2524	b2 18		lda ($18)			lda 	(codePtr)
.2526	65 18		adc $18				adc 	codePtr
.2528	85 18		sta $18				sta 	codePtr
.252a	90 02		bcc $252e			bcc 	_ScanNoCarry
.252c	e6 19		inc $19				inc 	codePtr+1
.252e					_ScanNoCarry:
.252e	a0 03		ldy #$03			ldy 	#3
.2530	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2532	d0 b7		bne $24eb			bne 	_ScanForwardLoop
.2534	4c 61 26	jmp $2661		jmp	ErrorV_structure
.2537					_ScanDataItem:
.2537	98		tya				tya
.2538	38		sec				sec
.2539	71 18		adc ($18),y			adc 	(codePtr),y
.253b	a8		tay				tay
.253c	80 ad		bra $24eb			bra 	_ScanForwardLoop
.253e					_ScanExit:
.253e	c8		iny				iny 								; consume final token.
.253f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2540					ScanProcedures:
.2540	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2542	48		pha				pha
.2543	a5 19		lda $19				lda 	codePtr+1
.2545	48		pha				pha
.2546	5a		phy				phy
.2547	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.254a	85 19		sta $19				sta 	codePtr+1
.254c	64 18		stz $18				stz 	codePtr
.254e					_SPLoop:
.254e	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2550	f0 18		beq $256a			beq 	_SPExit
.2552	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2554	b1 18		lda ($18),y			lda 	(codePtr),y
.2556	c9 88		cmp #$88			cmp 	#PR_PROC
.2558	d0 03		bne $255d			bne 	_SPNext
.255a	20 72 25	jsr $2572			jsr 	_SPSetupRecord
.255d					_SPNext:
.255d	18		clc				clc 								; forward to next
.255e	b2 18		lda ($18)			lda 	(codePtr)
.2560	65 18		adc $18				adc 	codePtr
.2562	85 18		sta $18				sta 	codePtr
.2564	90 e8		bcc $254e			bcc 	_SPLoop
.2566	e6 19		inc $19				inc 	codePtr+1
.2568	80 e4		bra $254e			bra 	_SPLoop
.256a					_SPExit:
.256a	7a		ply				ply
.256b	68		pla				pla
.256c	85 19		sta $19				sta 	codePtr+1
.256e	68		pla				pla
.256f	85 18		sta $18				sta 	codePtr
.2571	60		rts				rts
.2572					_SPSetupRecord:
.2572	c8		iny				iny 								; check identifier follows
.2573	b1 18		lda ($18),y			lda 	(codePtr),y
.2575	29 c0		and #$c0			and 	#$C0
.2577	c9 40		cmp #$40			cmp 	#$40
.2579	d0 27		bne $25a2			bne 	_SPSyntax
.257b	20 6f 2a	jsr $2a6f			jsr 	VARGetInfo 					; get the information
.257e	20 8a 27	jsr $278a			jsr 	ERRCheckRParen 				; check right bracket follows.
.2581	20 21 2a	jsr $2a21			jsr 	VARFind 					; already exists ?
.2584	b0 1f		bcs $25a5			bcs 	_SPUsed 					; error !
.2586	20 cd 29	jsr $29cd			jsr 	VARCreate 					; create, XA points to the data.
.2589	85 22		sta $22				sta 	zTemp0
.258b	86 23		stx $23				stx 	zTemp0+1
.258d	5a		phy				phy 								; save Y pos on stack
.258e	a0 01		ldy #$01			ldy 	#1
.2590	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2592	92 22		sta ($22)			sta 	(zTemp0)
.2594	a5 19		lda $19				lda 	codePtr+1
.2596	91 22		sta ($22),y			sta 	(zTemp0),y
.2598	c8		iny				iny
.2599	68		pla				pla
.259a	91 22		sta ($22),y			sta 	(zTemp0),y
.259c	c8		iny				iny
.259d	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.259f	91 22		sta ($22),y			sta 	(zTemp0),y
.25a1	60		rts				rts
.25a2					_SPSyntax:
.25a2	4c d5 25	jmp $25d5		jmp	ErrorV_syntax
.25a5					_SPUsed:
.25a5	4c 2c 27	jmp $272c		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.25a8					Command_WHILE:
.25a8	5a		phy				phy 								; save position of the test
.25a9	20 0e 17	jsr $170e			jsr 	EXPEvalNumber 				; work out the while test.
.25ac	a2 08		ldx #$08			ldx 	#IFR0
.25ae	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; check if zero
.25b1	f0 0e		beq $25c1			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.25b3	98		tya				tya 								; position *after* test.
.25b4	7a		ply				ply 								; restore position before test, at WHILE
.25b5	88		dey				dey 								; so we execute the WHILE command again.
.25b6	48		pha				pha 								; push after test on the stack
.25b7	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.25b9	20 a3 27	jsr $27a3			jsr 	StackOpen
.25bc	20 d7 27	jsr $27d7			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.25bf	7a		ply				ply 								; restore the position *after* the test
.25c0	60		rts				rts
.25c1					_WHExitLoop:
.25c1	68		pla				pla 								; throw post loop position
.25c2	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.25c4	aa		tax				tax
.25c5	20 e5 24	jsr $24e5			jsr 	ScanForward
.25c8	60		rts				rts
.25c9					Command_WEND:
.25c9	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.25cb	20 cf 27	jsr $27cf			jsr 	StackCheckFrame
.25ce	20 e9 27	jsr $27e9			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.25d1	20 c1 27	jsr $27c1			jsr 	StackClose		 			; erase the frame
.25d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.25d5					ErrorV_syntax:
.25d5	20 c2 28	jsr $28c2		jsr	ErrorHandler
>25d8	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>25e0	45 72 72 6f 72 00
.25e6					ErrorV_range:
.25e6	20 c2 28	jsr $28c2		jsr	ErrorHandler
>25e9	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>25f1	52 61 6e 67 65 00
.25f7					ErrorV_value:
.25f7	20 c2 28	jsr $28c2		jsr	ErrorHandler
>25fa	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2602	75 65 00
.2605					ErrorV_type:
.2605	20 c2 28	jsr $28c2		jsr	ErrorHandler
>2608	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2610	73 6d 61 74 63 68 00
.2617					ErrorV_unimplemented:
.2617	20 c2 28	jsr $28c2		jsr	ErrorHandler
>261a	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2622	6c 65 6d 65 6e 74 65 64 00
.262b					ErrorV_assert:
.262b	20 c2 28	jsr $28c2		jsr	ErrorHandler
>262e	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2636	46 61 69 6c 00
.263b					ErrorV_internal:
.263b	20 c2 28	jsr $28c2		jsr	ErrorHandler
>263e	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2646	6c 20 45 72 72 6f 72 00
.264e					ErrorV_divzero:
.264e	20 c2 28	jsr $28c2		jsr	ErrorHandler
>2651	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2659	42 79 20 5a 65 72 6f 00
.2661					ErrorV_structure:
.2661	20 c2 28	jsr $28c2		jsr	ErrorHandler
>2664	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>266c	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2679					ErrorV_stop:
.2679	20 c2 28	jsr $28c2		jsr	ErrorHandler
>267c	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2684	20 53 74 6f 70 70 65 64 00
.268d					ErrorV_data:
.268d	20 c2 28	jsr $28c2		jsr	ErrorHandler
>2690	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2698	44 61 74 61 00
.269d					ErrorV_redefine:
.269d	20 c2 28	jsr $28c2		jsr	ErrorHandler
>26a0	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>26a8	65 64 65 66 69 6e 65 64 00
.26b1					ErrorV_index:
.26b1	20 c2 28	jsr $28c2		jsr	ErrorHandler
>26b4	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>26bc	61 79 20 49 6e 64 65 78 00
.26c5					ErrorV_memory:
.26c5	20 c2 28	jsr $28c2		jsr	ErrorHandler
>26c8	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>26d0	4d 65 6d 6f 72 79 00
.26d7					ErrorV_uninitialised:
.26d7	20 c2 28	jsr $28c2		jsr	ErrorHandler
>26da	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>26e2	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.26f2					ErrorV_string:
.26f2	20 c2 28	jsr $28c2		jsr	ErrorHandler
>26f5	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>26fd	69 6e 67 20 4c 65 6e 67 74 68 00
.2708					ErrorV_variable:
.2708	20 c2 28	jsr $28c2		jsr	ErrorHandler
>270b	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2713	65 20 4d 69 73 73 69 6e 67 00
.271d					ErrorV_stack:
.271d	20 c2 28	jsr $28c2		jsr	ErrorHandler
>2720	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2728	75 6c 6c 00
.272c					ErrorV_dupproc:
.272c	20 c2 28	jsr $28c2		jsr	ErrorHandler
>272f	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2737	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2747	65 64 00
.274a					ErrorV_unknown:
.274a	20 c2 28	jsr $28c2		jsr	ErrorHandler
>274d	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2755	20 50 72 6f 63 65 64 75 72 65 00
.2760					ErrorV_break:
.2760	20 c2 28	jsr $28c2		jsr	ErrorHandler
>2763	05 42 72 65 61 6b 00			.text	5,"Break",0
.276a					ErrorV_line:
.276a	20 c2 28	jsr $28c2		jsr	ErrorHandler
>276d	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2775	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2782					ERRCheckLParen:
.2782	b1 18		lda ($18),y			lda 	(codePtr),y
.2784	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2786	d0 18		bne $27a0			bne 	ERRSyntaxError
.2788	c8		iny				iny
.2789	60		rts				rts
.278a					ERRCheckRParen:
.278a	b1 18		lda ($18),y			lda 	(codePtr),y
.278c	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.278e	d0 10		bne $27a0			bne 	ERRSyntaxError
.2790	c8		iny				iny
.2791	60		rts				rts
.2792					ERRCheckComma:
.2792	b1 18		lda ($18),y			lda 	(codePtr),y
.2794	c9 99		cmp #$99			cmp 	#PR_COMMA
.2796	d0 08		bne $27a0			bne 	ERRSyntaxError
.2798	c8		iny				iny
.2799	60		rts				rts
.279a					ERRCheckA:
.279a	d1 18		cmp ($18),y			cmp 	(codePtr),y
.279c	d0 02		bne $27a0			bne 	ERRSyntaxError
.279e	c8		iny				iny
.279f	60		rts				rts
.27a0					ERRSyntaxError:
.27a0	4c d5 25	jmp $25d5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.27a3					StackOpen:
.27a3	48		pha				pha 								; save frame byte
.27a4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.27a6	0a		asl a				asl 	a 							; claim twice this for storage
.27a7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.27a9	38		sec				sec 								; so basically subtracting from
.27aa	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.27ac	85 2a		sta $2a				sta 	basicStack
.27ae	b0 0a		bcs $27ba			bcs 	_SONoBorrow
>27b0	db						.byte 	$DB
.27b1	c6 2b		dec $2b				dec 	basicStack+1
.27b3	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.27b5	cd 20 06	cmp $0620			cmp 	basicStackEnd
.27b8	f0 04		beq $27be			beq 	_SOMemory
.27ba					_SONoBorrow:
.27ba	68		pla				pla 								; get marker back and write at TOS
.27bb	92 2a		sta ($2a)			sta 	(basicStack)
.27bd	60		rts				rts
.27be					_SOMemory:
.27be	4c 1d 27	jmp $271d		jmp	ErrorV_stack
.27c1					StackClose:
.27c1	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.27c3	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.27c5	0a		asl a				asl 	a 							; claim twice this.
.27c6	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.27c8	85 2a		sta $2a				sta 	basicStack
.27ca	90 02		bcc $27ce			bcc 	_SCExit
.27cc	e6 2b		inc $2b				inc 	basicStack+1
.27ce					_SCExit:
.27ce	60		rts				rts
.27cf					StackCheckFrame:
.27cf	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.27d1	d0 01		bne $27d4			bne 	_SCFError 					; different, we have structures mixed up
.27d3	60		rts				rts
.27d4					_SCFError:
.27d4	4c 61 26	jmp $2661		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.27d7					STKSaveCodePosition:
.27d7	5a		phy				phy
.27d8	98		tya				tya 								; save Y at offset 1.
.27d9	a0 01		ldy #$01			ldy 	#1
.27db	91 2a		sta ($2a),y			sta 	(basicStack),y
.27dd	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.27df	c8		iny				iny
.27e0	91 2a		sta ($2a),y			sta 	(basicStack),y
.27e2	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.27e4	c8		iny				iny
.27e5	91 2a		sta ($2a),y			sta 	(basicStack),y
.27e7	7a		ply				ply
.27e8	60		rts				rts
.27e9					STKLoadCodePosition:
.27e9	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.27eb	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27ed	85 19		sta $19				sta 	codePtr+1
.27ef	88		dey				dey
.27f0	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27f2	85 18		sta $18				sta 	codePtr
.27f4	88		dey				dey
.27f5	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.27f7	a8		tay				tay
.27f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.27f9					StackReset:
.27f9	48		pha				pha 								; save top of memory
.27fa	3a		dec a				dec 	a  							; end of stack = previous byte
.27fb	85 2b		sta $2b				sta 	basicStack+1
.27fd	a9 ff		lda #$ff			lda 	#$FF
.27ff	85 2a		sta $2a				sta 	basicStack
.2801	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2803	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2805	68		pla				pla 								; allocate pages for stack.
.2806	38		sec				sec
.2807	e9 02		sbc #$02			sbc 	#STACKPAGES
.2809	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.280c	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.280d					StringConcrete:
.280d	5a		phy				phy 								; save position on stack
.280e	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2810	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2812	b0 41		bcs $2855			bcs 	_SALengthError
.2814	18		clc				clc 								; length of the new string
.2815	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2817	90 02		bcc $281b			bcc 	_SAHaveLength
.2819	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.281b					_SAHaveLength:
.281b	48		pha				pha 								; save length to be allocated for concreting.
.281c	38		sec				sec
.281d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.281f	6d 22 06	adc $0622			adc 	stringMemory
.2822	8d 22 06	sta $0622			sta 	stringMemory
.2825	85 26		sta $26				sta 	zTemp2 						; update storage address
.2827	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2829	6d 23 06	adc $0623			adc 	stringMemory+1
.282c	8d 23 06	sta $0623			sta 	stringMemory+1
.282f	85 27		sta $27				sta 	zTemp2+1
.2831	68		pla				pla 								; save length allocated in +0
.2832	92 26		sta ($26)			sta 	(zTemp2)
.2834	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2836	a0 01		ldy #$01			ldy 	#1
.2838	91 26		sta ($26),y			sta 	(zTemp2),y
.283a					_SACopyNewString:
.283a	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.283c	a0 02		ldy #$02			ldy 	#2
.283e	91 26		sta ($26),y			sta 	(zTemp2),y
.2840	aa		tax				tax 								; bytes to copy
.2841	f0 0c		beq $284f			beq 	_SACopyExit
.2843	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2845					_SACopyNSLoop:
.2845	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2847	c8		iny				iny 								; write two on in string storage
.2848	c8		iny				iny
.2849	91 26		sta ($26),y			sta 	(zTemp2),y
.284b	88		dey				dey
.284c	ca		dex				dex									; until copied all the string lengths.
.284d	d0 f6		bne $2845			bne 	_SACopyNSLoop
.284f					_SACopyExit:
.284f	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2851	a5 26		lda $26				lda 	zTemp2
.2853	7a		ply				ply
.2854	60		rts				rts
.2855					_SALengthError:
.2855	4c f2 26	jmp $26f2		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2858					StringSystemInitialise:
.2858	3a		dec a				dec 	a 							; make last byte of previous page.
.2859	8d 23 06	sta $0623			sta 	stringMemory+1
.285c	85 23		sta $23				sta 	zTemp0+1
.285e	a9 ff		lda #$ff			lda 	#$FF
.2860	8d 22 06	sta $0622			sta 	stringMemory
.2863	85 22		sta $22				sta 	zTemp0
.2865	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2867	92 22		sta ($22)			sta 	(zTemp0)
.2869	60		rts				rts
.286a					StringSpaceInitialise:
.286a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.286c	8d 21 06	sta $0621			sta 	stringInitialised
.286f	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2872	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2875	ad 23 06	lda $0623			lda 	stringMemory+1
.2878	3a		dec a				dec 	a
.2879	8d 25 06	sta $0625			sta 	stringTempPointer+1
.287c	20 85 10	jsr $1085			jsr 	ClearCheckMemory
.287f	60		rts				rts
.2880					StringTempAllocate:
.2880	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2882	b0 2e		bcs $28b2			bcs 	_STALength
.2884	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2887	30 05		bmi $288e			bmi 	_STAAllocate
.2889	48		pha				pha 								; save value to subtract.
.288a	20 6a 28	jsr $286a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.288d	68		pla				pla 								; restore it
.288e					_STAAllocate:
.288e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2890	18		clc				clc  								; deliberate allows one more
.2891	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.2894	8d 24 06	sta $0624			sta 	stringTempPointer
.2897	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2899	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.289b	ad 25 06	lda $0625			lda 	stringTempPointer+1
.289e	69 ff		adc #$ff			adc 	#$FF
.28a0	8d 25 06	sta $0625			sta 	stringTempPointer+1
.28a3	85 2d		sta $2d				sta 	zsTemp+1
.28a5	85 09		sta $09				sta 	IFR0+IM1
.28a7	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.28a9	a9 80		lda #$80			lda 	#$80
.28ab	85 0b		sta $0b				sta 	IFR0+IExp
.28ad	a9 00		lda #$00			lda 	#0 							; clear the target string
.28af	92 2c		sta ($2c)			sta 	(zsTemp)
.28b1	60		rts				rts
.28b2					_STALength:
.28b2	4c f2 26	jmp $26f2		jmp	ErrorV_string
.28b5					StringTempWrite:
.28b5	5a		phy				phy
.28b6	48		pha				pha
.28b7	b2 2c		lda ($2c)			lda 	(zsTemp)
.28b9	1a		inc a				inc 	a
.28ba	92 2c		sta ($2c)			sta 	(zsTemp)
.28bc	a8		tay				tay
.28bd	68		pla				pla
.28be	91 2c		sta ($2c),y			sta 	(zsTemp),y
.28c0	7a		ply				ply
.28c1	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.28c2					ErrorHandler:
.28c2	fa		plx				plx 								; get address of msg
.28c3	7a		ply				ply
.28c4	e8		inx				inx 								; bump past RTS
.28c5	d0 01		bne $28c8			bne 	_EHNoInc
.28c7	c8		iny				iny
.28c8					_EHNoInc:
.28c8	20 f7 ff	jsr $fff7			jsr	 	OSWriteString 				; print it.
.28cb	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.28ce	0d 27 06	ora $0627			ora 	ERRLine+1
.28d1	f0 10		beq $28e3			beq 	_EHNoNumber
.28d3	a2 e6		ldx #$e6			ldx 	#_EHAtMsg & $FF
.28d5	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.28d7	20 f7 ff	jsr $fff7			jsr 	OSWriteString
.28da	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.28dd	ae 27 06	ldx $0627			ldx 	ERRLine+1
.28e0	20 eb 28	jsr $28eb			jsr 	WriteIntXA
.28e3					_EHNoNumber:
.28e3	4c 14 29	jmp $2914			jmp 	WarmStartNewLine
.28e6					_EHAtMsg:
>28e6	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.28eb					_EHAtMsg1:
.28eb					WriteIntXA:
.28eb	da		phx				phx
.28ec	48		pha				pha
.28ed	a2 08		ldx #$08			ldx 	#IFR0
.28ef	20 7b 30	jsr $307b			jsr 	IFloatPushRx
.28f2	68		pla				pla
.28f3	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.28f6	68		pla				pla
.28f7	85 09		sta $09				sta 	IFR0+IM1
.28f9	a9 0a		lda #$0a			lda 	#10 						; decimal
.28fb	20 ce 2e	jsr $2ece			jsr 	IFloatIntegerToStringR0	 	; convert
.28fe	20 f7 ff	jsr $fff7			jsr 	OSWriteString 				; print
.2901	a2 08		ldx #$08			ldx 	#IFR0
.2903	20 9c 30	jsr $309c			jsr 	IFloatPullRx
.2906	60		rts				rts
.2907					NotImplemented:
.2907	4c 17 26	jmp $2617		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.290a					WarmStart:
.290a	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.290c	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.290f	a9 6b		lda #$6b			lda 	#"k"
.2911	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2914					WarmStartNewLine:
.2914	a9 0d		lda #$0d			lda 	#13
.2916	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2919					WarmStartNoPrompt:
.2919	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.291b	9a		txs				txs
.291c	20 e2 ff	jsr $ffe2			jsr 	OSScreenLine 				; edit
.291f	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2920	d0 01		bne $2923			bne 	_WSSkip
.2922	c8		iny				iny
.2923					_WSSkip:
.2923	86 26		stx $26				stx 	zTemp2 						; save address
.2925	84 27		sty $27				sty 	zTemp2+1
.2927	b2 26		lda ($26)			lda 	(zTemp2)
.2929	f0 ee		beq $2919			beq 	WarmStartNoPrompt 			; ignore empty line.
.292b	a2 58		ldx #$58			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.292d	a0 29		ldy #$29			ldy 	#TOKGetCharacter >> 8
.292f	38		sec				sec
.2930	20 0f 20	jsr $200f			jsr 	TOKTokenise
.2933	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2936	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2939	d0 0b		bne $2946			bne 	_WSLineEdit
.293b	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.293d	85 18		sta $18				sta 	codePtr
.293f	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2941	85 19		sta $19				sta 	codePtr+1
.2943	4c da 14	jmp $14da			jmp 	RUNNewLine
.2946					_WSLineEdit:
.2946	20 ea 1e	jsr $1eea			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2949	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.294c	c9 04		cmp #$04			cmp 	#4
.294e	f0 03		beq $2953			beq 	_WSNoInsert
.2950	20 34 1f	jsr $1f34			jsr 	PGMInsertLine				; if not, maybe insert
.2953					_WSNoInsert:
.2953	20 3f 10	jsr $103f			jsr 	ClearCode 					; clear variables etc.
.2956	80 c1		bra $2919			bra 	WarmStartNoPrompt
.2958					TOKGetCharacter:
.2958	b2 26		lda ($26)			lda 	(zTemp2)
.295a	90 06		bcc $2962			bcc 	_GSNoIncrement
.295c	e6 26		inc $26				inc 	zTemp2
.295e	d0 02		bne $2962			bne 	_GSNoIncrement
.2960	e6 27		inc $27				inc 	zTemp2+1
.2962					_GSNoIncrement:
.2962	c9 00		cmp #$00			cmp 	#0
.2964	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2965					VARArrayLookup:
.2965	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2967	86 23		stx $23				stx 	zTemp0+1
.2969	b2 22		lda ($22)			lda 	(zTemp0)
.296b	48		pha				pha
.296c	5a		phy				phy
.296d	a0 01		ldy #$01			ldy 	#1
.296f	b1 22		lda ($22),y			lda 	(zTemp0),y
.2971	7a		ply				ply
.2972	48		pha				pha
.2973	20 20 17	jsr $1720			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2976	68		pla				pla 								; array address to zTemp0
.2977	85 23		sta $23				sta 	zTemp0+1
.2979	68		pla				pla
.297a	85 22		sta $22				sta 	zTemp0
.297c	5a		phy				phy 								; save codePtr position.
.297d	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.297f	b1 22		lda ($22),y			lda 	(zTemp0),y
.2981	48		pha				pha 								; save bit 15 on stack.
.2982	29 7f		and #$7f			and 	#$7F
.2984	85 24		sta $24				sta 	zTemp1
.2986	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2988	d2 22		cmp ($22)			cmp 	(zTemp0)
.298a	a5 09		lda $09				lda 	IFR0+IM1
.298c	e5 24		sbc $24				sbc 	zTemp1
.298e	b0 3a		bcs $29ca			bcs 	_VALIndex
.2990	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2992	c9 40		cmp #$40			cmp 	#$40
.2994	b0 34		bcs $29ca			bcs 	_VALIndex
.2996	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2998	26 09		rol $09				rol 	IFR0+IM1
.299a	fa		plx				plx 								; get msb of size -> X
.299b	30 04		bmi $29a1			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.299d	06 08		asl $08				asl 	IFR0+IM0
.299f	26 09		rol $09				rol 	IFR0+IM1
.29a1					_VARNotX4:
.29a1	18		clc				clc 								; add the two for the size bytes
.29a2	a5 08		lda $08				lda 	IFR0+IM0
.29a4	69 02		adc #$02			adc 	#2
.29a6	85 08		sta $08				sta 	IFR0+IM0
.29a8	90 02		bcc $29ac			bcc 	_VARNoCarry1
.29aa	e6 09		inc $09				inc 	IFR0+IM1
.29ac					_VARNoCarry1:
.29ac	18		clc				clc 								; calculate the element address and push to stack.
.29ad	a5 08		lda $08				lda 	IFR0+IM0
.29af	65 22		adc $22				adc 	zTemp0
.29b1	48		pha				pha
.29b2	a5 09		lda $09				lda 	IFR0+IM1
.29b4	65 23		adc $23				adc 	zTemp0+1
.29b6	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.29b8	30 04		bmi $29be			bmi 	_VARHasSubLevel
.29ba	aa		tax				tax 								; address in XA
.29bb	68		pla				pla
.29bc	7a		ply				ply 								; restore Y and exit
.29bd	60		rts				rts
.29be					_VARHasSubLevel:
.29be	aa		tax				tax 								; get link address in XA
.29bf	68		pla				pla
.29c0	7a		ply				ply 								; restore code position.
.29c1	48		pha				pha
.29c2	20 92 27	jsr $2792			jsr 	ERRCheckComma 				; comma required.
.29c5	68		pla				pla
.29c6	20 65 29	jsr $2965			jsr 	VARArrayLookup 				; call it recursively
.29c9	60		rts				rts
.29ca					_VALIndex:
.29ca	4c b1 26	jmp $26b1		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.29cd					VARCreate:
.29cd	5a		phy				phy
.29ce	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.29d0	a2 00		ldx #$00			ldx 	#0
.29d2	20 5c 10	jsr $105c			jsr 	AllocateMemory
.29d5	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.29d7	86 25		stx $25				stx 	zTemp1+1
.29d9	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.29db	ad 2a 06	lda $062a			lda 	VARHash
.29de	91 24		sta ($24),y			sta 	(zTemp1),y
.29e0	c8		iny				iny 								; put address of name into +3,+4
.29e1	ad 28 06	lda $0628			lda 	VARNameAddress
.29e4	91 24		sta ($24),y			sta 	(zTemp1),y
.29e6	c8		iny				iny
.29e7	ad 29 06	lda $0629			lda 	VARNameAddress+1
.29ea	91 24		sta ($24),y			sta 	(zTemp1),y
.29ec	ad 2b 06	lda $062b			lda 	VARType
.29ef	29 01		and #$01			and 	#1
.29f1	f0 06		beq $29f9			beq 	_CVNotString
.29f3	a0 08		ldy #$08			ldy 	#5+3
.29f5	a9 80		lda #$80			lda 	#$80
.29f7	91 24		sta ($24),y			sta 	(zTemp1),y
.29f9					_CVNotString:
.29f9	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.29fc	85 22		sta $22				sta 	zTemp0
.29fe	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.2a01	85 23		sta $23				sta 	zTemp0+1
.2a03	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2a05	b2 22		lda ($22)			lda 	(zTemp0)
.2a07	92 24		sta ($24)			sta 	(zTemp1)
.2a09	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a0b	91 24		sta ($24),y			sta 	(zTemp1),y
.2a0d	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2a0f	92 22		sta ($22)			sta 	(zTemp0)
.2a11	a5 25		lda $25				lda 	zTemp1+1
.2a13	91 22		sta ($22),y			sta 	(zTemp0),y
.2a15	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2a17	a6 25		ldx $25				ldx 	zTemp1+1
.2a19	18		clc				clc 								; add 5 to point to the data.
.2a1a	69 05		adc #$05			adc 	#5
.2a1c	90 01		bcc $2a1f			bcc 	_VCNoCarry
.2a1e	e8		inx				inx
.2a1f					_VCNoCarry:
.2a1f	7a		ply				ply
.2a20	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2a21					VARFind:
.2a21	5a		phy				phy
.2a22	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2a24	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a26	85 25		sta $25				sta 	zTemp1+1
.2a28	f0 1c		beq $2a46			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2a2a	b2 22		lda ($22)			lda 	(zTemp0)
.2a2c	85 24		sta $24				sta 	zTemp1
.2a2e					_VFLoop:
.2a2e	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2a30	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a32	cd 2a 06	cmp $062a			cmp 	VARHash
.2a35	f0 12		beq $2a49			beq 	_VFHashesMatch 				; if so, check the name.
.2a37					_VFNext:
.2a37	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2a39	aa		tax				tax
.2a3a	a0 01		ldy #$01			ldy 	#1
.2a3c	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a3e	85 25		sta $25				sta 	zTemp1+1
.2a40	86 24		stx $24				stx 	zTemp1
.2a42	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2a44	d0 e8		bne $2a2e			bne 	_VFLoop
.2a46					_VFExitFail:
.2a46	7a		ply				ply
.2a47	18		clc				clc
.2a48	60		rts				rts
.2a49					_VFHashesMatch:
.2a49	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2a4b	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a4d	85 26		sta $26				sta 	zTemp2
.2a4f	c8		iny				iny
.2a50	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a52	85 27		sta $27				sta 	zTemp2+1
.2a54	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2a56					_VFNameCompLoop:
.2a56	c8		iny				iny 								; char at a time
.2a57	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2a5a	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2a5c	d0 d9		bne $2a37			bne 	_VFNext						; next entry if different.
.2a5e	c9 7c		cmp #$7c			cmp 	#$7C
.2a60	90 f4		bcc $2a56			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2a62	18		clc				clc
.2a63	a5 24		lda $24				lda 	zTemp1
.2a65	a6 25		ldx $25				ldx 	zTemp1+1
.2a67	69 05		adc #$05			adc 	#5
.2a69	90 01		bcc $2a6c			bcc 	_VFNNoCarry
.2a6b	e8		inx				inx
.2a6c					_VFNNoCarry:
.2a6c	7a		ply				ply
.2a6d	38		sec				sec
.2a6e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a6f					VARGetInfo:
.2a6f	98		tya				tya 								; calculate the address of the identifier start.
.2a70	18		clc				clc
.2a71	65 18		adc $18				adc 	codePtr
.2a73	8d 28 06	sta $0628			sta 	VARNameAddress
.2a76	a5 19		lda $19				lda 	codePtr+1
.2a78	69 00		adc #$00			adc 	#0
.2a7a	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a7d	9c 2a 06	stz $062a			stz 	VARHash
.2a80	a2 00		ldx #$00			ldx 	#0
.2a82					_VARCopyName:
.2a82	18		clc				clc 								; update the sum hash.
.2a83	ad 2a 06	lda $062a			lda 	VARHash
.2a86	71 18		adc ($18),y			adc 	(codePtr),y
.2a88	8d 2a 06	sta $062a			sta 	VARHash
.2a8b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a8d	c8		iny				iny
.2a8e	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a91	e8		inx				inx
.2a92	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a94	90 ec		bcc $2a82			bcc 	_VARCopyName
.2a96	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a99	29 03		and #$03			and 	#3 							; type is 0-3
.2a9b	0a		asl a				asl 	a
.2a9c	0a		asl a				asl 	a
.2a9d	85 22		sta $22				sta 	zTemp0
.2a9f	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2aa2	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2aa4	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2aa6	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2aa7	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2aa9	85 22		sta $22				sta 	zTemp0
.2aab	8d 4c 06	sta $064c			sta 	VARHashEntry
.2aae	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2ab0	69 00		adc #$00			adc 	#0
.2ab2	85 23		sta $23				sta 	zTemp0+1
.2ab4	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2ab7	60		rts				rts
.2ab8					VARClearHashTables:
.2ab8	a2 00		ldx #$00			ldx 	#0
.2aba					_VCHRLoop:
.2aba	a9 00		lda #$00			lda 	#0
.2abc	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2abf	e8		inx				inx
.2ac0	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2ac2	d0 f6		bne $2aba			bne 	_VCHRLoop
.2ac4	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2ac5					VARCheckSimple:
.2ac5	aa		tax				tax 								; save in X
.2ac6	b1 18		lda ($18),y			lda 	(codePtr),y
.2ac8	c9 7c		cmp #$7c			cmp 	#$7C
.2aca	d0 15		bne $2ae1			bne 	_VCSComplex
.2acc	c8		iny				iny 								; consume the second byte, the type.
.2acd	8a		txa				txa  								; character (40-7F) x 4
.2ace	0a		asl a				asl 	a
.2acf	0a		asl a				asl  	a
.2ad0	18		clc				clc
.2ad1	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2ad3	85 08		sta $08				sta 	IFR0+IM0
.2ad5	a9 06		lda #$06			lda 	#FastVariables >> 8
.2ad7	69 00		adc #$00			adc 	#0
.2ad9	85 09		sta $09				sta 	IFR0+IM1
.2adb	64 0a		stz $0a				stz 	IFR0+IM2
.2add	64 0b		stz $0b				stz 	IFR0+IExp
.2adf	38		sec				sec 								; it's a reference
.2ae0	60		rts				rts
.2ae1					_VCSComplex:
.2ae1	88		dey				dey	 								; extract information.
.2ae2	20 6f 2a	jsr $2a6f			jsr 	VARGetInfo
.2ae5	20 21 2a	jsr $2a21			jsr 	VARFind 					; search for variable
.2ae8	b0 0a		bcs $2af4			bcs 	_VCSHaveVariable
.2aea	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2aed	29 02		and #$02			and 	#2
.2aef	d0 25		bne $2b16			bne 	_VCNoCreate
.2af1	20 cd 29	jsr $29cd			jsr 	VARCreate 					; create variable
.2af4					_VCSHaveVariable:
.2af4	48		pha				pha 								; save LSB on the stack
.2af5	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2af8	6a		ror a				ror 	a
.2af9	6a		ror a				ror 	a
.2afa	68		pla				pla 								; restore LSB
.2afb	90 08		bcc $2b05			bcc 	_VCSNotArray 				; skip if not an array
.2afd	20 65 29	jsr $2965			jsr 	VARArrayLookup 				; look for subscripts.
.2b00	48		pha				pha 								; check )
.2b01	20 8a 27	jsr $278a			jsr 	ERRCheckRParen
.2b04	68		pla				pla
.2b05					_VCSNotArray:
.2b05	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2b07	85 08		sta $08				sta 	IFR0+IM0
.2b09	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2b0b	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2b0e	6a		ror a				ror 	a
.2b0f	a9 00		lda #$00			lda 	#0
.2b11	6a		ror a				ror 	a 							; now $00 or $80
.2b12	85 0b		sta $0b				sta 	IFR0+IExp
.2b14	38		sec				sec 								; it's a reference
.2b15	60		rts				rts
.2b16					_VCNoCreate:
.2b16	4c d7 26	jmp $26d7		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2b19					IFInitialise:
.2b19	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2b1c	60		rts				rts
.2b1d					IFloatSubtract:
.2b1d	da		phx				phx
.2b1e	a2 08		ldx #$08			ldx 	#IFR0
.2b20	20 37 31	jsr $3137			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2b23	fa		plx				plx
.2b24					IFloatAdd:
.2b24	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2b26	05 0b		ora $0b				ora 	IFR0+IExp
.2b28	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2b2a	d0 4e		bne $2b7a			bne 	_IFloatAddDecimals 			; floating point version.
.2b2c					_IFAddSubMantissa:
.2b2c	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2b2e	45 0b		eor $0b				eor 	IFR0+IExp
.2b30	29 40		and #$40			and 	#IFSign
.2b32	d0 21		bne $2b55			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2b34	18		clc				clc 								; do the actual addition
.2b35	a5 08		lda $08				lda 	IFR0+IM0
.2b37	75 00		adc $00,x			adc 		IM0,x
.2b39	85 08		sta $08				sta 	IFR0+IM0
.2b3b	a5 09		lda $09				lda 	IFR0+IM1
.2b3d	75 01		adc $01,x			adc 		IM1,x
.2b3f	85 09		sta $09				sta 	IFR0+IM1
.2b41	a5 0a		lda $0a				lda 	IFR0+IM2
.2b43	75 02		adc $02,x			adc 		IM2,x
.2b45	85 0a		sta $0a				sta 	IFR0+IM2
.2b47	10 29		bpl $2b72			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2b49	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2b4b	20 5b 31	jsr $315b			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2b4e	20 85 31	jsr $3185			jsr 	IFloatIncExponent
.2b51	d0 1f		bne $2b72			bne 	_IFloatAddExit
.2b53	38		sec				sec 								; overflowed numerically.
.2b54	60		rts				rts
.2b55					_IFloatSubMantissa:
.2b55	38		sec				sec 								; do the subtraction R0-Rx
.2b56	a5 08		lda $08				lda 	IFR0+IM0
.2b58	f5 00		sbc $00,x			sbc 		IM0,x
.2b5a	85 08		sta $08				sta 	IFR0+IM0
.2b5c	a5 09		lda $09				lda 	IFR0+IM1
.2b5e	f5 01		sbc $01,x			sbc 		IM1,x
.2b60	85 09		sta $09				sta 	IFR0+IM1
.2b62	a5 0a		lda $0a				lda 	IFR0+IM2
.2b64	f5 02		sbc $02,x			sbc 		IM2,x
.2b66	85 0a		sta $0a				sta 	IFR0+IM2
.2b68	b0 08		bcs $2b72			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b6a	a2 08		ldx #$08			ldx 	#IFR0
.2b6c	20 3f 31	jsr $313f			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b6f	20 37 31	jsr $3137			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b72					_IFloatAddExit:
.2b72	18		clc				clc
.2b73	60		rts				rts
.2b74					_IFloatZeroAdd:
.2b74	fa		plx				plx 								; return this value in R0
.2b75	20 bd 30	jsr $30bd			jsr 	IFloatCopyFromRegister
.2b78	18		clc				clc
.2b79	60		rts				rts
.2b7a					_IFloatAddDecimals:
.2b7a	20 25 31	jsr $3125			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b7d	f0 f3		beq $2b72			beq 	_IFloatAddExit
.2b7f	20 63 31	jsr $3163			jsr 	IFloatNormalise 			; normalise RX
.2b82	da		phx				phx 								; normalise R0
.2b83	a2 08		ldx #$08			ldx 	#IFR0
.2b85	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.2b88	f0 ea		beq $2b74			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b8a	20 63 31	jsr $3163			jsr 	IFloatNormalise
.2b8d	fa		plx				plx
.2b8e	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b90	29 3f		and #$3f			and 	#IFXMask
.2b92	38		sec				sec
.2b93	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b95	85 20		sta $20				sta 	iTemp0
.2b97	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b99	29 3f		and #$3f			and 	#IFXMask
.2b9b	38		sec				sec
.2b9c	e9 20		sbc #$20			sbc 	#$20
.2b9e	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2ba0	b0 02		bcs $2ba4			bcs 	_IFloatHaveLarger
.2ba2	a5 20		lda $20				lda 	iTemp0
.2ba4					_IFloatHaveLarger:
.2ba4	18		clc				clc 								; get the actual one back.
.2ba5	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ba7	20 b4 2b	jsr $2bb4			jsr 	_IFShiftXToA
.2baa	da		phx				phx
.2bab	a2 08		ldx #$08			ldx 	#IFR0
.2bad	20 b4 2b	jsr $2bb4			jsr 	_IFShiftXToA
.2bb0	fa		plx				plx
.2bb1	4c 2c 2b	jmp $2b2c			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2bb4					_IFShiftXToA:
.2bb4	8d d6 06	sta $06d6			sta 	IFTarget
.2bb7	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; check adding zero ?
.2bba	f0 11		beq $2bcd			beq 	_IFSXExit
.2bbc					_IFSXLoop:
.2bbc	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2bbe	29 3f		and #$3f			and 	#IFXMask
.2bc0	cd d6 06	cmp $06d6			cmp 	IFTarget
.2bc3	f0 08		beq $2bcd			beq 	_IFSXExit
.2bc5	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.2bc8	20 85 31	jsr $3185			jsr 	IFloatIncExponent
.2bcb	80 ef		bra $2bbc			bra 	_IFSXLoop
.2bcd					_IFSXExit:
.2bcd	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2bce					IFloatMultiply:
.2bce	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2bd1	20 86 2c	jsr $2c86			jsr 	IFCalculateNewSign
.2bd4	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2bd6	05 0b		ora $0b				ora 	IFR0+IExp
.2bd8	29 3f		and #$3f			and 	#IFXMask
.2bda	15 01		ora $01,x			ora 	IM1,x
.2bdc	05 09		ora $09				ora 	IFR0+IM1
.2bde	15 02		ora $02,x			ora 	IM2,x
.2be0	05 0a		ora $0a				ora 	IFR0+IM2
.2be2	d0 0a		bne $2bee			bne 	_IFMStandard
.2be4	20 08 31	jsr $3108			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2be7	ad d8 06	lda $06d8			lda 	IFNewSign
.2bea	85 0b		sta $0b				sta 	IFR0+IExp
.2bec	18		clc				clc
.2bed	60		rts				rts
.2bee					_IFMStandard:
.2bee	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2bf0	20 7d 2c	jsr $2c7d			jsr 	IFMSignExtend
.2bf3	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bf6	a5 0b		lda $0b				lda 	IFR0+IExp
.2bf8	20 7d 2c	jsr $2c7d			jsr 	IFMSignExtend
.2bfb	18		clc				clc
.2bfc	6d d7 06	adc $06d7			adc 	IFNewExponent
.2bff	8d d7 06	sta $06d7			sta 	IFNewExponent
.2c02	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2c04	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister
.2c07	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2c09	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2c0c					_IFMLoop:
.2c0c	a2 14		ldx #$14			ldx 	#IFRTemp
.2c0e	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.2c11	f0 3a		beq $2c4d			beq 	_IFMExit
.2c13	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2c16	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2c18	10 03		bpl $2c1d			bpl	 	_IFMTargetOkay
.2c1a	20 6e 2c	jsr $2c6e			jsr 	_IFMShiftAll
.2c1d					_IFMTargetOkay:
.2c1d	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2c1f	29 01		and #$01			and 	#1
.2c21	f0 16		beq $2c39			beq 	_IFMNoAdd
.2c23	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2c26	18		clc				clc
.2c27	a5 08		lda $08				lda 	IFR0+IM0
.2c29	75 00		adc $00,x			adc 		IM0,x
.2c2b	85 08		sta $08				sta 	IFR0+IM0
.2c2d	a5 09		lda $09				lda 	IFR0+IM1
.2c2f	75 01		adc $01,x			adc 		IM1,x
.2c31	85 09		sta $09				sta 	IFR0+IM1
.2c33	a5 0a		lda $0a				lda 	IFR0+IM2
.2c35	75 02		adc $02,x			adc 		IM2,x
.2c37	85 0a		sta $0a				sta 	IFR0+IM2
.2c39					_IFMNoAdd:
.2c39	a5 0a		lda $0a				lda 	IFR0+IM2
.2c3b	10 03		bpl $2c40			bpl 	_IFMResultOkay
.2c3d	20 6e 2c	jsr $2c6e			jsr 	_IFMShiftAll
.2c40					_IFMResultOkay:
.2c40	a2 14		ldx #$14			ldx 	#IFRTemp
.2c42	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.2c45	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c48	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.2c4b	80 bf		bra $2c0c			bra 	_IFMLoop
.2c4d					_IFMExit:
.2c4d	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2c50	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2c52	90 0f		bcc $2c63			bcc 	_IFMOkay
.2c54	c9 e0		cmp #$e0			cmp 	#$E0
.2c56	b0 0b		bcs $2c63			bcs 	_IFMOkay
.2c58	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2c5a	f0 10		beq $2c6c			beq 	_IFMError
.2c5c	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2c5e	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2c61	18		clc				clc
.2c62	60		rts				rts
.2c63					_IFMOkay:
.2c63	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c65	0d d8 06	ora $06d8			ora 	IFNewSign
.2c68	85 0b		sta $0b				sta 	IFR0+IExp
.2c6a	18		clc				clc
.2c6b	60		rts				rts
.2c6c					_IFMError:
.2c6c	38		sec				sec
.2c6d	60		rts				rts
.2c6e					_IFMShiftAll:
.2c6e	a2 08		ldx #$08			ldx 	#IFR0
.2c70	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.2c73	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c76	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.2c79	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c7c	60		rts				rts
.2c7d					IFMSignExtend:
.2c7d	29 3f		and #$3f			and 	#IFXMask
.2c7f	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c81	90 02		bcc $2c85			bcc 	_IFMNoSXX
.2c83	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c85					_IFMNoSXX:
.2c85	60		rts				rts
.2c86					IFCalculateNewSign:
.2c86	b5 03		lda $03,x			lda 	IExp,x
.2c88	45 0b		eor $0b				eor 	IFR0+IExp
.2c8a	29 40		and #$40			and 	#IFSign
.2c8c	8d d8 06	sta $06d8			sta 	IFNewSign
.2c8f	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c90					IFloatDivideInteger:
.2c90	20 a9 2c	jsr $2ca9			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c93	b0 06		bcs $2c9b			bcs 	_IFDIExit
.2c95	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c97	20 bd 30	jsr $30bd			jsr 	IFloatCopyFromRegister
.2c9a	18		clc				clc
.2c9b					_IFDIExit:
.2c9b	60		rts				rts
.2c9c					IFloatModulusInteger:
.2c9c	20 a9 2c	jsr $2ca9			jsr 	IFloatDivideIntegerCommon
.2c9f	b0 07		bcs $2ca8			bcs 	_IFMIExit
.2ca1	ae d6 06	ldx $06d6			ldx 	IFTarget
.2ca4	20 bd 30	jsr $30bd			jsr 	IFloatCopyFromRegister
.2ca7	18		clc				clc
.2ca8					_IFMIExit:
.2ca8	60		rts				rts
.2ca9					IFloatDivideIntegerCommon:
.2ca9	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2cac	20 86 2c	jsr $2c86			jsr 	IFCalculateNewSign 			; calculate sign of result
.2caf	20 d7 2c	jsr $2cd7			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2cb2	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2cb4	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.2cb7	f0 1c		beq $2cd5			beq 	_IFDIDivZero
.2cb9	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2cbc	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2cbf	5a		phy				phy
.2cc0	a0 18		ldy #$18			ldy 	#24
.2cc2					_IFDILoop:
.2cc2	20 e8 2c	jsr $2ce8			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cc5	20 f4 2c	jsr $2cf4			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cc8	88		dey				dey
.2cc9	d0 f7		bne $2cc2			bne 	_IFDILoop 					; do it 24 times
.2ccb	7a		ply				ply
.2ccc	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2ccf	29 40		and #$40			and 	#IFSign
.2cd1	85 17		sta $17				sta 	IFRTemp+IExp
.2cd3	18		clc				clc 								; is okay.
.2cd4	60		rts				rts
.2cd5					_IFDIDivZero:
.2cd5	38		sec				sec
.2cd6	60		rts				rts
.2cd7					IFDCopyRXToRTemp:
.2cd7	b5 00		lda $00,x			lda 	IM0,x
.2cd9	85 14		sta $14				sta 	IFRTemp+IM0
.2cdb	b5 01		lda $01,x			lda 	IM1,x
.2cdd	85 15		sta $15				sta 	IFRTemp+IM1
.2cdf	b5 02		lda $02,x			lda 	IM2,x
.2ce1	85 16		sta $16				sta 	IFRTemp+IM2
.2ce3	b5 03		lda $03,x			lda 	IExp,x
.2ce5	85 17		sta $17				sta 	IFRTemp+IExp
.2ce7	60		rts				rts
.2ce8					IFDShiftSTempS1Left:
.2ce8	a2 14		ldx #$14			ldx 	#IFRTemp
.2cea	20 53 31	jsr $3153			jsr 	IFloatShiftLeft
.2ced	ae d6 06	ldx $06d6			ldx 	IFTarget
.2cf0	20 54 31	jsr $3154			jsr 	IFloatRotateLeft
.2cf3	60		rts				rts
.2cf4					IFDTrySubtract:
.2cf4	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2cf7	38		sec				sec 								; subtract, saving the results on the stack.
.2cf8	b5 00		lda $00,x			lda 	IM0,x
.2cfa	e5 08		sbc $08				sbc 	IFR0+IM0
.2cfc	48		pha				pha
.2cfd	b5 01		lda $01,x			lda 	IM1,x
.2cff	e5 09		sbc $09				sbc 	IFR0+IM1
.2d01	48		pha				pha
.2d02	b5 02		lda $02,x			lda 	IM2,x
.2d04	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2d06	b0 03		bcs $2d0b			bcs 	_IFDCanSubtract
.2d08	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2d09	68		pla				pla
.2d0a	60		rts				rts
.2d0b					_IFDCanSubtract:
.2d0b	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2d0d	68		pla				pla
.2d0e	95 01		sta $01,x			sta 	IM1,x
.2d10	68		pla				pla
.2d11	95 00		sta $00,x			sta 	IM0,x
.2d13	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2d15	d0 06		bne $2d1d			bne 	_IFDCSExit
.2d17	e6 15		inc $15				inc 	IFRTemp+IM1
.2d19	d0 02		bne $2d1d			bne 	_IFDCSExit
.2d1b	e6 16		inc $16				inc 	IFRTemp+IM2
.2d1d					_IFDCSExit:
.2d1d	60		rts				rts
.2d1e					IFloatBitwiseAnd:
.2d1e	5a		phy				phy
.2d1f	20 63 2d	jsr $2d63			jsr 	IFPreProcessBitwise 		; set up everything.
.2d22	d0 0f		bne $2d33			bne 	_IFBAExit
.2d24					_IFBALoop:
.2d24	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d27	35 00		and $00,x			and 	IM0,x
.2d29	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d2c	e8		inx				inx
.2d2d	c8		iny				iny
.2d2e	c0 03		cpy #$03			cpy 	#3
.2d30	d0 f2		bne $2d24			bne 	_IFBALoop
.2d32	18		clc				clc
.2d33					_IFBAExit:
.2d33	7a		ply				ply
.2d34	60		rts				rts
.2d35					IFloatBitwiseOr:
.2d35	5a		phy				phy
.2d36	20 63 2d	jsr $2d63			jsr 	IFPreProcessBitwise 		; set up everything.
.2d39	d0 0f		bne $2d4a			bne 	_IFBAExit
.2d3b					_IFBALoop:
.2d3b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d3e	15 00		ora $00,x			ora 	IM0,x
.2d40	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d43	e8		inx				inx
.2d44	c8		iny				iny
.2d45	c0 03		cpy #$03			cpy 	#3
.2d47	d0 f2		bne $2d3b			bne 	_IFBALoop
.2d49	18		clc				clc
.2d4a					_IFBAExit:
.2d4a	7a		ply				ply
.2d4b	60		rts				rts
.2d4c					IFloatBitwiseXor:
.2d4c	5a		phy				phy
.2d4d	20 63 2d	jsr $2d63			jsr 	IFPreProcessBitwise 		; set up everything.
.2d50	d0 0f		bne $2d61			bne 	_IFBAExit
.2d52					_IFBALoop:
.2d52	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d55	55 00		eor $00,x			eor 	IM0,x
.2d57	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d5a	e8		inx				inx
.2d5b	c8		iny				iny
.2d5c	c0 03		cpy #$03			cpy 	#3
.2d5e	d0 f2		bne $2d52			bne 	_IFBALoop
.2d60	18		clc				clc
.2d61					_IFBAExit:
.2d61	7a		ply				ply
.2d62	60		rts				rts
.2d63					IFPreProcessBitwise:
.2d63	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d65	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d67	15 03		ora $03,x			ora 	IExp,x
.2d69	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d6b	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d6d	38		sec				sec 								; carry set just in cases.
.2d6e	60		rts				rts
.2d6f					IFloatAbsoluteR0:
.2d6f	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d71	29 bf		and #$bf			and 	#IFSign ^ 255
.2d73	85 0b		sta $0b				sta 	IFR0+IExp
.2d75	18		clc				clc
.2d76	60		rts				rts
.2d77					IFloatSquareRootR0:
.2d77	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d79	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.2d7c	f0 2e		beq $2dac			beq 	_IFSRZero
.2d7e	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d80	29 40		and #$40			and 	#IFSign
.2d82	d0 2f		bne $2db3			bne 	_IFSRFail
.2d84	20 63 31	jsr $3163			jsr 	IFloatNormalise 			; it will work better !
.2d87	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d89	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister
.2d8c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d8e	20 7d 2c	jsr $2c7d			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d91	18		clc				clc
.2d92	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d94	85 0b		sta $0b				sta 	IFR0+IExp
.2d96	4a		lsr a				lsr 	a 							; which we can halve.
.2d97	38		sec				sec 								; convert back
.2d98	e9 17		sbc #$17			sbc 	#23
.2d9a	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d9c	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d9e	20 b5 2d	jsr $2db5			jsr 	_IFSRNewton
.2da1	20 b5 2d	jsr $2db5			jsr 	_IFSRNewton
.2da4	20 b5 2d	jsr $2db5			jsr 	_IFSRNewton
.2da7	20 b5 2d	jsr $2db5			jsr 	_IFSRNewton
.2daa	18		clc				clc
.2dab	60		rts				rts
.2dac					_IFSRZero:
.2dac	a2 08		ldx #$08			ldx 	#IFR0
.2dae	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2db1	18		clc				clc
.2db2	60		rts				rts
.2db3					_IFSRFail:
.2db3	38		sec				sec
.2db4	60		rts				rts
.2db5					_IFSRNewton:
.2db5	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2db7	20 7b 30	jsr $307b			jsr 	IFloatPushRx
.2dba	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2dbc	20 7b 30	jsr $307b			jsr 	IFloatPushRx
.2dbf	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2dc1	20 50 2e	jsr $2e50			jsr 	IFloatDivideFloat
.2dc4	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2dc6	20 9c 30	jsr $309c			jsr 	IFloatPullRx
.2dc9	20 24 2b	jsr $2b24			jsr 	IFloatAdd 					; now guess + original/guess
.2dcc	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2dce	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.2dd1	a2 0c		ldx #$0c			ldx 	#IFR1
.2dd3	20 9c 30	jsr $309c			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2dd6	60		rts				rts
.2dd7					IFloatFractionalR0:
.2dd7	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2dd9	29 3f		and #$3f			and 	#IFXMask
.2ddb	f0 17		beq $2df4			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2ddd	20 6f 2d	jsr $2d6f			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2de0	a2 08		ldx #$08			ldx 	#IFR0
.2de2	20 63 31	jsr $3163			jsr 	IFloatNormalise 			; normalise R0
.2de5	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2de7	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister
.2dea	20 2d 2e	jsr $2e2d			jsr 	IFloatIntegerR0 			; take integer part of R0
.2ded	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2def	20 1d 2b	jsr $2b1d			jsr 	IFloatSubtract
.2df2	80 05		bra $2df9			bra 	_FIPExit
.2df4					_FIPZero:
.2df4	a2 08		ldx #$08			ldx 	#IFR0
.2df6	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2df9					_FIPExit:
.2df9	18		clc				clc
.2dfa	60		rts				rts
.2dfb					IFloatCompare:
.2dfb	20 1d 2b	jsr $2b1d			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2dfe	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2e00	05 0b		ora $0b				ora 	IFR0+IExp
.2e02	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2e04	29 3f		and #$3f			and 	#IFXMask
.2e06	d0 19		bne $2e21			bne 	_IFCNonInteger
.2e08	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; check if zero
.2e0b	f0 0f		beq $2e1c			beq 	_IFCZero
.2e0d					_IFCReturnSign:
.2e0d	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2e0f	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2e11	48		pha				pha
.2e12	a9 01		lda #$01			lda 	#1
.2e14	20 2e 31	jsr $312e			jsr 	IFloatSetByte 				; return to +1
.2e17	68		pla				pla 								; sign bit back
.2e18	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2e1a	18		clc				clc
.2e1b	60		rts				rts
.2e1c					_IFCZero:
.2e1c	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2e1f	18		clc				clc
.2e20	60		rts				rts
.2e21					_IFCNonInteger:
.2e21	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2e23	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2e25	05 09		ora $09				ora 	IFR0+IM1
.2e27	05 0a		ora $0a				ora 	IFR0+IM2
.2e29	f0 f1		beq $2e1c			beq 	_IFCZero 					; near enough !
.2e2b	80 e0		bra $2e0d			bra 	_IFCReturnSign 				; return the sign of the difference.
.2e2d					IFloatIntegerR0:
.2e2d	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2e2f	29 3f		and #$3f			and 	#IFXMask
.2e31	f0 1b		beq $2e4e			beq 	_FIPExit 					; if so do nothing
.2e33	a2 08		ldx #$08			ldx 	#IFR0
.2e35	20 63 31	jsr $3163			jsr 	IFloatNormalise 			; normalise
.2e38	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; is it zero ?
.2e3b	f0 0e		beq $2e4b			beq 	_FIPZero 					; if so return zero.
.2e3d					_FIPShift:
.2e3d	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2e3f	29 20		and #$20			and 	#$20 						; still -ve
.2e41	f0 0b		beq $2e4e			beq 	_FIPExit
.2e43	20 5b 31	jsr $315b			jsr 	IFloatShiftRight 			; shift mantissa right
.2e46	20 85 31	jsr $3185			jsr 	IFloatIncExponent 			; bump exponent
.2e49	80 f2		bra $2e3d			bra 	_FIPShift
.2e4b					_FIPZero:
.2e4b	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2e4e					_FIPExit:
.2e4e	18		clc				clc
.2e4f	60		rts				rts
.2e50					IFloatDivideFloat:
.2e50	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2e53	20 86 2c	jsr $2c86			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e56	20 63 31	jsr $3163			jsr 	IFloatNormalise 			; normalise RX
.2e59	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2e5b	20 63 31	jsr $3163			jsr 	IFloatNormalise
.2e5e	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.2e61	f0 56		beq $2eb9			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e63	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e65	20 7d 2c	jsr $2c7d			jsr 	IFMSignExtend
.2e68	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e6b	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e6e	b5 03		lda $03,x			lda 	IExp,x
.2e70	20 7d 2c	jsr $2c7d			jsr 	IFMSignExtend
.2e73	38		sec				sec
.2e74	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e77	38		sec				sec
.2e78	e9 17		sbc #$17			sbc 	#23
.2e7a	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e7d	20 bb 2e	jsr $2ebb			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e80	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e82	10 08		bpl $2e8c			bpl 	_IFDFNoShiftResult
.2e84	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e86	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.2e89	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e8c					_IFDFNoShiftResult:
.2e8c	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e8f	30 06		bmi $2e97			bmi 	_IFDFCheckUnderflow
.2e91	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e93	b0 24		bcs $2eb9			bcs 	_IFDFDivZero
.2e95	80 11		bra $2ea8			bra		_IFDFExit
.2e97					_IFDFCheckUnderflow:
.2e97	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e9a	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e9c	b0 0a		bcs $2ea8			bcs 	_IFDFExit
.2e9e	ee d7 06	inc $06d7			inc 	IFNewExponent
.2ea1	a2 14		ldx #$14			ldx 	#IFRTemp
.2ea3	20 5b 31	jsr $315b			jsr 	IFloatShiftRight
.2ea6	80 ef		bra $2e97			bra 	_IFDFCheckUnderflow
.2ea8					_IFDFExit:
.2ea8	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2eab	29 3f		and #$3f			and 	#IFXMask
.2ead	0d d8 06	ora $06d8			ora 	IFNewSign
.2eb0	85 17		sta $17				sta 	IFRTemp+IExp
.2eb2	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2eb4	20 bd 30	jsr $30bd			jsr 	IFloatCopyFromRegister
.2eb7	18		clc				clc
.2eb8	60		rts				rts
.2eb9					_IFDFDivZero:
.2eb9	38		sec				sec
.2eba	60		rts				rts
.2ebb					IFloatDivideSupport:
.2ebb	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2ebd	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2ec0	5a		phy				phy 								; main division loop x 23
.2ec1	a0 17		ldy #$17			ldy 	#23
.2ec3					_IFDSLoop:
.2ec3	20 f4 2c	jsr $2cf4			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ec6	20 e8 2c	jsr $2ce8			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2ec9	88		dey				dey
.2eca	d0 f7		bne $2ec3			bne 	_IFDSLoop 					; do it 24 times
.2ecc	7a		ply				ply
.2ecd	60		rts				rts
.2ece					IFloatIntegerToStringR0:
.2ece	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2ed1	20 ad 31	jsr $31ad			jsr 	IFloatBufferReset			; empty buffer
.2ed4	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2ed6	29 3f		and #$3f			and 	#IFXMask
.2ed8	d0 1d		bne $2ef7			bne 	_IFIFail
.2eda	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2edc	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.2edf	f0 0e		beq $2eef			beq 	_IFINotNegative
.2ee1	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2ee3	29 40		and #$40			and 	#IFSign
.2ee5	f0 08		beq $2eef			beq 	_IFINotNegative
.2ee7	a9 2d		lda #$2d			lda 	#"-"						; output -
.2ee9	20 bc 31	jsr $31bc			jsr 	IFloatBufferWrite
.2eec	20 37 31	jsr $3137			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2eef					_IFINotNegative:
.2eef	20 f9 2e	jsr $2ef9			jsr 	_IFIRecursiveConvert 		; start converting
.2ef2	20 b4 31	jsr $31b4			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2ef5	18		clc				clc
.2ef6	60		rts				rts
.2ef7					_IFIFail:
.2ef7	38		sec				sec
.2ef8	60		rts				rts
.2ef9					_IFIRecursiveConvert:
.2ef9	a2 0c		ldx #$0c			ldx 	#IFR1
.2efb	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister 		; R0->R1
.2efe	a2 08		ldx #$08			ldx 	#IFR0
.2f00	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2f03	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.2f06	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2f08	20 90 2c	jsr $2c90			jsr 	IFloatDivideInteger
.2f0b	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2f0d	20 25 31	jsr $3125			jsr 	IFloatCheckZero
.2f10	f0 09		beq $2f1b			beq 	_IFIOutDigit
.2f12	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2f14	48		pha				pha
.2f15	20 f9 2e	jsr $2ef9			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2f18	68		pla				pla
.2f19	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2f1b					_IFIOutDigit:
.2f1b	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2f1d	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2f1f	90 02		bcc $2f23			bcc 	_IFINotHex
.2f21	69 06		adc #$06			adc 	#6
.2f23					_IFINotHex:
.2f23	69 30		adc #$30			adc 	#48
.2f25	20 bc 31	jsr $31bc			jsr 	IFloatBufferWrite 			; write character to buffer.
.2f28	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2f29					IFloatFloatToStringR0:
.2f29	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2f2b	20 7b 30	jsr $307b			jsr 	IFloatPushRx
.2f2e	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister
.2f31	20 2d 2e	jsr $2e2d			jsr 	IFloatIntegerR0				; make R0 integer
.2f34	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2f36	20 ce 2e	jsr $2ece			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2f39	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2f3c	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2f3e	29 3f		and #$3f			and 	#IFXMask
.2f40	f0 44		beq $2f86			beq 	_IFFSExit
.2f42					_IFloatFracLoop:
.2f42	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2f44	20 bd 30	jsr $30bd			jsr 	IFloatCopyFromRegister
.2f47	20 d7 2d	jsr $2dd7			jsr 	IFloatFractionalR0
.2f4a	20 63 31	jsr $3163			jsr 	IFloatNormalise
.2f4d	a2 10		ldx #$10			ldx 	#IFR2
.2f4f	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister 		; copy to back R2
.2f52	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2f54	a9 0a		lda #$0a			lda 	#10
.2f56	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.2f59	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2f5b	20 ce 2b	jsr $2bce			jsr 	IFloatMultiply
.2f5e	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2f60	20 ce 30	jsr $30ce			jsr 	IFloatCopyToRegister
.2f63	20 2d 2e	jsr $2e2d			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f66	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f69	c9 03		cmp #$03			cmp 	#3
.2f6b	f0 16		beq $2f83			beq 	_IFFSExitStripZero
.2f6d	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f70	d0 05		bne $2f77			bne 	_IFloatNotFirst
.2f72	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f74	20 bc 31	jsr $31bc			jsr 	IFloatBufferWrite
.2f77					_IFloatNotFirst:
.2f77	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f7a	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f7c	09 30		ora #$30			ora 	#"0"						; ASCII
.2f7e	20 bc 31	jsr $31bc			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f81	80 bf		bra $2f42			bra 	_IFloatFracLoop
.2f83					_IFFSExitStripZero:
.2f83	20 cb 31	jsr $31cb			jsr 	IFloatStripTrailingZeros
.2f86					_IFFSExit:
.2f86	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f88	20 9c 30	jsr $309c			jsr 	IFloatPullRx
.2f8b	20 b4 31	jsr $31b4			jsr 	IFloatGetBufferAddress
.2f8e	18		clc				clc
.2f8f	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f90					IFloatStringToFloatR0:
.2f90	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f93	86 20		stx $20				stx 	iTemp0
.2f95	84 21		sty $21				sty 	iTemp0+1
.2f97	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f99	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2f9c	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f9f	20 2c 30	jsr $302c			jsr 	IFSTFGetNext 				; get first
.2fa2	f0 1b		beq $2fbf			beq 	_IFSTFFail 					; no character, fail.
.2fa4	90 10		bcc $2fb6			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2fa6	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2fa8	d0 15		bne $2fbf			bne 	_IFSTFFail
.2faa	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2fac	8d dc 06	sta $06dc			sta 	IFSignFlag
.2faf					_IFSTFLoop:
.2faf	20 2c 30	jsr $302c			jsr 	IFSTFGetNext 				; get next character
.2fb2	b0 0b		bcs $2fbf			bcs 	_IFSTFFail 					; bad character.
.2fb4	f0 11		beq $2fc7			beq 	_IFSTFExit 					; end of data
.2fb6					_IFSTFHaveChar:
.2fb6	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2fb8	f0 08		beq $2fc2			beq 	_IFSTFDecimal
.2fba	20 50 30	jsr $3050			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2fbd	80 f0		bra $2faf			bra 	_IFSTFLoop 					; keep going until . or end.
.2fbf					_IFSTFFail:
.2fbf	38		sec				sec
.2fc0	80 0d		bra $2fcf			bra 	_IFSTFReturn
.2fc2					_IFSTFDecimal:
.2fc2	20 d7 2f	jsr $2fd7			jsr 	IFSTFDecimal 				; call the decimal places code.
.2fc5	b0 08		bcs $2fcf			bcs 	_IFSTFReturn 				; error
.2fc7					_IFSTFExit:
.2fc7	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2fc9	0d dc 06	ora $06dc			ora 	IFSignFlag
.2fcc	85 0b		sta $0b				sta 	IFR0+IExp
.2fce	18		clc				clc
.2fcf					_IFSTFReturn:
.2fcf	60		rts				rts
.2fd0					IFloatAddDecimalToR0:
.2fd0	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2fd3	86 20		stx $20				stx 	iTemp0
.2fd5	84 21		sty $21				sty 	iTemp0+1
.2fd7					IFSTFDecimal:
.2fd7	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2fd9	20 7b 30	jsr $307b			jsr 	IFloatPushRx
.2fdc	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2fde	20 2c 31	jsr $312c			jsr 	IFloatSetZero
.2fe1	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2fe4					_IFSTDLoop:
.2fe4	20 2c 30	jsr $302c			jsr 	IFSTFGetNext 				; get next
.2fe7	b0 41		bcs $302a			bcs 	_IFSTFFail2 				; bad character.
.2fe9	f0 11		beq $2ffc			beq 	_IFSTFComplete 				; end of data, work out the result.
.2feb	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2fed	f0 39		beq $3028			beq 	_IFSTFExit2
.2fef	20 50 30	jsr $3050			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2ff2	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2ff5	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2ff8	c9 03		cmp #$03			cmp 	#3
.2ffa	90 e8		bcc $2fe4			bcc 	_IFSTDLoop
.2ffc					_IFSTFComplete:
.2ffc	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2fff	f0 27		beq $3028			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3001	3a		dec a				dec 	a 							; table indexed from 1.
.3002	0a		asl a				asl 	a
.3003	0a		asl a				asl 	a
.3004	aa		tax				tax
.3005	bd 67 30	lda $3067,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3008	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.300a	bd 68 30	lda $3068,x			lda 	TableTen+1,x
.300d	85 0d		sta $0d				sta  	IFR1+IM1
.300f	bd 69 30	lda $3069,x			lda 	TableTen+2,x
.3012	85 0e		sta $0e				sta  	IFR1+IM2
.3014	bd 6a 30	lda $306a,x			lda 	TableTen+3,x
.3017	85 0f		sta $0f				sta  	IFR1+IExp
.3019	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.301b	20 ce 2b	jsr $2bce			jsr 	IFloatMultiply
.301e	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3020	20 9c 30	jsr $309c			jsr 	IFloatPullRx
.3023	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3025	20 24 2b	jsr $2b24			jsr 	IFloatAdd
.3028					_IFSTFExit2:
.3028	18		clc				clc
.3029	60		rts				rts
.302a					_IFSTFFail2:
.302a	38		sec				sec
.302b	60		rts				rts
.302c					IFSTFGetNext:
.302c	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.302f	f0 19		beq $304a			beq 	_IFSTFReturnOk
.3031	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3033	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3035	d0 02		bne $3039			bne 	_IFSTFGNNoCarry
.3037	e6 21		inc $21				inc 	iTemp0+1
.3039					_IFSTFGNNoCarry:
.3039	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.303c	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.303e	f0 08		beq $3048			beq 	_IFSTFGOkay
.3040	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3042	90 08		bcc $304c			bcc 	_IFSTFGFail
.3044	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3046	b0 04		bcs $304c			bcs 	_IFSTFGFail
.3048					_IFSTFGOkay:
.3048	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.304a					_IFSTFReturnOk:
.304a	18		clc				clc
.304b	60		rts				rts
.304c					_IFSTFGFail:
.304c	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.304e	38		sec				sec
.304f	60		rts				rts
.3050					IFSTFAddR0:
.3050	29 0f		and #$0f			and 	#15 						; to int value
.3052	48		pha				pha 								; save it.
.3053	a9 0a		lda #$0a			lda 	#10
.3055	a2 0c		ldx #$0c			ldx 	#IFR1
.3057	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.305a	20 ce 2b	jsr $2bce			jsr 	IFloatMultiply
.305d	68		pla				pla
.305e	a2 0c		ldx #$0c			ldx 	#IFR1
.3060	20 2e 31	jsr $312e			jsr 	IFloatSetByte
.3063	20 24 2b	jsr $2b24			jsr 	IFloatAdd
.3066	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3067					TableTen:
>3067	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>306b	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>306f	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3073	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3077	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.307b					IFloatPushRx:
.307b	5a		phy				phy
.307c	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.307f	b5 00		lda $00,x			lda 	IM0,x
.3081	99 df 06	sta $06df,y			sta 	IFStack,y
.3084	b5 01		lda $01,x			lda 	IM1,x
.3086	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3089	b5 02		lda $02,x			lda 	IM2,x
.308b	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.308e	b5 03		lda $03,x			lda 	IExp,x
.3090	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.3093	c8		iny				iny
.3094	c8		iny				iny
.3095	c8		iny				iny
.3096	c8		iny				iny
.3097	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.309a	7a		ply				ply
.309b	60		rts				rts
.309c					IFloatPullRx:
.309c	5a		phy				phy
.309d	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.30a0	88		dey				dey
.30a1	88		dey				dey
.30a2	88		dey				dey
.30a3	88		dey				dey
.30a4	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.30a7	95 00		sta $00,x			sta 	IM0,x
.30a9	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.30ac	95 01		sta $01,x			sta 	IM1,x
.30ae	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.30b1	95 02		sta $02,x			sta 	IM2,x
.30b3	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.30b6	95 03		sta $03,x			sta 	IExp,x
.30b8	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.30bb	7a		ply				ply
.30bc	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.30bd					IFloatCopyFromRegister:
.30bd	b5 00		lda $00,x			lda 	0,x
.30bf	85 08		sta $08				sta 	IFR0
.30c1	b5 01		lda $01,x			lda 	1,x
.30c3	85 09		sta $09				sta 	IFR0+1
.30c5	b5 02		lda $02,x			lda 	2,x
.30c7	85 0a		sta $0a				sta 	IFR0+2
.30c9	b5 03		lda $03,x			lda 	3,x
.30cb	85 0b		sta $0b				sta 	IFR0+3
.30cd	60		rts				rts
.30ce					IFloatCopyToRegister:
.30ce	a5 08		lda $08				lda 	IFR0
.30d0	95 00		sta $00,x			sta 	0,x
.30d2	a5 09		lda $09				lda 	IFR0+1
.30d4	95 01		sta $01,x			sta 	1,x
.30d6	a5 0a		lda $0a				lda 	IFR0+2
.30d8	95 02		sta $02,x			sta 	2,x
.30da	a5 0b		lda $0b				lda 	IFR0+3
.30dc	95 03		sta $03,x			sta 	3,x
.30de	60		rts				rts
.30df					IFloatLoadInline:
.30df	68		pla				pla 								; pop address off to iTemp0
.30e0	85 20		sta $20				sta 	iTemp0
.30e2	68		pla				pla
.30e3	85 21		sta $21				sta 	iTemp0+1
.30e5	a0 01		ldy #$01			ldy 	#1
.30e7	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.30e9	95 00		sta $00,x			sta 	0,x
.30eb	c8		iny				iny
.30ec	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.30ee	95 01		sta $01,x			sta 	1,x
.30f0	c8		iny				iny
.30f1	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.30f3	95 02		sta $02,x			sta 	2,x
.30f5	c8		iny				iny
.30f6	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.30f8	95 03		sta $03,x			sta 	3,x
.30fa	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.30fb	a5 20		lda $20				lda 	iTemp0
.30fd	69 05		adc #$05			adc 	#5
.30ff	85 20		sta $20				sta 	iTemp0
.3101	90 02		bcc $3105			bcc 	_IFLINoCarry
.3103	e6 21		inc $21				inc 	iTemp0+1
.3105					_IFLINoCarry:
.3105	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3108					IFloatMultiply8BitRx:
.3108	5a		phy		        phy
.3109	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.310b	a4 08		ldy $08		        ldy     IFR0+IM0
.310d	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.310e	85 08		sta $08		        sta     IFR0+IM0
.3110	84 09		sty $09		        sty     IFR0+IM1
.3112	a9 00		lda #$00	        lda     #0
.3114	a0 08		ldy #$08	        ldy     #8
.3116					_IFMLoop:
.3116	90 03		bcc $311b	        bcc     _IFMNoAdd
.3118	18		clc		        clc
.3119	65 09		adc $09		        adc     IFR0+IM1
.311b					_IFMNoAdd:
.311b	6a		ror a		        ror     a
.311c	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.311e	88		dey		        dey
.311f	d0 f5		bne $3116	        bne     _IFMLoop
.3121	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3123	7a		ply		        ply
.3124	60		rts		        rts
.3125					IFloatCheckZero:
.3125	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3127	15 01		ora $01,x			ora 	IM1,x
.3129	15 02		ora $02,x			ora 	IM2,x
.312b	60		rts				rts
.312c					IFloatSetZero:
.312c	a9 00		lda #$00			lda 	#0
.312e					IFloatSetByte:
.312e	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3130	74 01		stz $01,x			stz 	IM1,x
.3132	74 02		stz $02,x			stz 	IM2,x
.3134	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3136	60		rts				rts
.3137					IFloatNegate:
.3137	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3139	49 40		eor #$40			eor 	#IFSign
.313b	95 03		sta $03,x			sta 	IExp,x
.313d	18		clc				clc
.313e	60		rts				rts
.313f					IFloatMantissaNegate:
.313f	38		sec				sec 								; when you want a real 2's complement negative value.
.3140	a9 00		lda #$00			lda 	#0
.3142	f5 00		sbc $00,x			sbc 	IM0,x
.3144	95 00		sta $00,x			sta 	IM0,x
.3146	a9 00		lda #$00			lda 	#0
.3148	f5 01		sbc $01,x			sbc 	IM1,x
.314a	95 01		sta $01,x			sta 	IM1,x
.314c	a9 00		lda #$00			lda 	#0
.314e	f5 02		sbc $02,x			sbc 	IM2,x
.3150	95 02		sta $02,x			sta 	IM2,x
.3152	60		rts				rts
.3153					IFloatShiftLeft:
.3153	18		clc				clc
.3154					IFloatRotateLeft:
.3154	36 00		rol $00,x			rol 	IM0,x
.3156	36 01		rol $01,x			rol 	IM1,x
.3158	36 02		rol $02,x			rol 	IM2,x
.315a	60		rts				rts
.315b					IFloatShiftRight:
.315b	18		clc				clc
.315c					IFloatRotateRight:
.315c	76 02		ror $02,x			ror 	IM2,x
.315e	76 01		ror $01,x			ror 	IM1,x
.3160	76 00		ror $00,x			ror 	IM0,x
.3162	60		rts				rts
.3163					IFloatNormalise:
.3163	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; is it zero
.3166	f0 18		beq $3180			beq 	_IFNExitZero 				; if so exit
.3168					_IFNLoop:
.3168	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.316a	29 c0		and #$c0			and 	#$C0
.316c	c9 40		cmp #$40			cmp 	#$40
.316e	f0 13		beq $3183			beq 	_IFNExitOkay 				; if so , then we are done.
.3170	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3172	29 3f		and #$3f			and 	#$3F
.3174	c9 20		cmp #$20			cmp 	#$20
.3176	f0 0b		beq $3183			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3178	20 99 31	jsr $3199			jsr 	IFloatDecExponent
.317b	20 53 31	jsr $3153			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.317e	80 e8		bra $3168			bra 	_IFNLoop
.3180					_IFNExitZero:
.3180	20 2c 31	jsr $312c			jsr 	IFloatSetZero 				; set the result to zero
.3183					_IFNExitOkay:
.3183	18		clc				clc  								; return with CC.
.3184	60		rts				rts
.3185					IFloatIncExponent:
.3185	b5 03		lda $03,x			lda 	IExp,x
.3187	48		pha				pha
.3188	29 c0		and #$c0			and 	#$C0
.318a	8d 1f 07	sta $071f			sta 	IFXTemp
.318d	68		pla				pla
.318e	1a		inc a				inc 	a
.318f	29 3f		and #$3f			and 	#$3F
.3191	48		pha				pha
.3192	0d 1f 07	ora $071f			ora 	IFXTemp
.3195	95 03		sta $03,x			sta 	IExp,x
.3197	68		pla				pla
.3198	60		rts				rts
.3199					IFloatDecExponent:
.3199	b5 03		lda $03,x			lda 	IExp,x
.319b	48		pha				pha
.319c	29 c0		and #$c0			and 	#$C0
.319e	8d 1f 07	sta $071f			sta 	IFXTemp
.31a1	68		pla				pla
.31a2	3a		dec a				dec 	a
.31a3	29 3f		and #$3f			and 	#$3F
.31a5	48		pha				pha
.31a6	0d 1f 07	ora $071f			ora 	IFXTemp
.31a9	95 03		sta $03,x			sta 	IExp,x
.31ab	68		pla				pla
.31ac	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.31ad					IFloatBufferReset:
.31ad	9c 20 07	stz $0720			stz 	IFBufferCount
.31b0	9c 21 07	stz $0721			stz 	IFBuffer
.31b3	60		rts				rts
.31b4					IFloatGetBufferAddress:
.31b4	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.31b6	a2 20		ldx #$20			ldx 	#(IFBufferCount & $FF)
.31b8	ad 20 07	lda $0720			lda 	IFBufferCount
.31bb	60		rts				rts
.31bc					IFloatBufferWrite:
.31bc	da		phx				phx
.31bd	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31c0	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.31c3	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.31c6	ee 20 07	inc $0720			inc 	IFBufferCount
.31c9	fa		plx				plx
.31ca	60		rts				rts
.31cb					IFloatStripTrailingZeros:
.31cb	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31ce	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.31d1	c9 30		cmp #$30			cmp		#"0"
.31d3	d0 0f		bne $31e4			bne 	_IFSTExit
.31d5	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.31d8	c9 2e		cmp #$2e			cmp 	#"."
.31da	f0 08		beq $31e4			beq 	_IFSTExit
.31dc	ce 20 07	dec $0720			dec 	IFBufferCount
.31df	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.31e2	80 e7		bra $31cb			bra 	IFloatStripTrailingZeros
.31e4					_IFSTExit:
.31e4	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.31e5					IFloatCheckRange:
.31e5	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.31e7	09 40		ora #$40			ora 	#IFSign
.31e9	85 0b		sta $0b				sta 	IFR0+IExp
.31eb	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.31ed	20 24 2b	jsr $2b24			jsr 	IFloatAdd 					; add allowed to error.
.31f0	a2 08		ldx #$08			ldx 	#IFR0
.31f2	20 25 31	jsr $3125			jsr 	IFloatCheckZero 			; error if < 0
.31f5	f0 06		beq $31fd			beq 	_IFAOkay
.31f7	a5 0b		lda $0b				lda 	IFR0+IExp
.31f9	29 40		and #$40			and 	#IFSign
.31fb	d0 01		bne $31fe			bne 	_IFAFail
.31fd					_IFAOkay:
.31fd	60		rts				rts
.31fe					_IFAFail:
.31fe	38		sec				sec
.31ff	68		pla				pla 								; get address - 2
.3200	e9 02		sbc #$02			sbc 	#2
.3202	aa		tax				tax
.3203	68		pla				pla
.3204	e9 00		sbc #$00			sbc 	#0
.3206	a8		tay				tay
.3207	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3209					_IFAStop:
>3209	db						.byte 	$DB 						; display an error AA ADR ADR
.320a	80 fd		bra $3209			bra 	_IFAStop

;******  Return to file: basic.asm


;******  Processing file: src/program/testing/testing.asmx


;******  Processing file: src/program/testing/testdat.incx

.7800					Line0:
>7800	33 32 36 20 20 59 20 22			.text '326  Y "EDLNEO") 2.33 TIME NEXT 726-2.93=838 7.29 E9J3 982-1.68 W2J9H0"CNMT" "X" LOOP 574 D$"IIQD"U4J4C SYS Z2(UNTIL-1.94 822 G4P4I DIV-4.37',0
>7808	45 44 4c 4e 45 4f 22 29 20 32 2e 33 33 20 54 49
>7818	4d 45 20 4e 45 58 54 20 37 32 36 2d 32 2e 39 33
>7828	3d 38 33 38 20 37 2e 32 39 20 45 39 4a 33 20 39
>7838	38 32 2d 31 2e 36 38 20 57 32 4a 39 48 30 22 43
>7848	4e 4d 54 22 20 22 58 22 20 4c 4f 4f 50 20 35 37
>7858	34 20 44 24 22 49 49 51 44 22 55 34 4a 34 43 20
>7868	53 59 53 20 5a 32 28 55 4e 54 49 4c 2d 31 2e 39
>7878	34 20 38 32 32 20 47 34 50 34 49 20 44 49 56 2d
>7888	34 2e 33 37 00
.788d					Line1:
>788d	37 39 30 20 45 4c 53 45			.text '790 ELSE"GNWH"502"RLPT""KGF"DATA--8.87-=798 MID$() "BCPIN"',0
>7895	22 47 4e 57 48 22 35 30 32 22 52 4c 50 54 22 22
>78a5	4b 47 46 22 44 41 54 41 2d 2d 38 2e 38 37 2d 3d
>78b5	37 39 38 20 4d 49 44 24 28 29 20 22 42 43 50 49
>78c5	4e 22 00
.78c8					Line2:
>78c8	36 34 36 20 36 2e 31 38			.text '646 6.18 1.39 854 "WPM"REPEAT"HEIOW"INPUT W6 1.3 S5$ 3.5 N0N2P-"CM""YUBOOB" ("EO@B"998 "CNJ""@NK"( "SDGQMADN" 990 STR$(G6W 446',0
>78d0	20 31 2e 33 39 20 38 35 34 20 22 57 50 4d 22 52
>78e0	45 50 45 41 54 22 48 45 49 4f 57 22 49 4e 50 55
>78f0	54 20 57 36 20 31 2e 33 20 53 35 24 20 33 2e 35
>7900	20 4e 30 4e 32 50 2d 22 43 4d 22 22 59 55 42 4f
>7910	4f 42 22 20 28 22 45 4f 40 42 22 39 39 38 20 22
>7920	43 4e 4a 22 22 40 4e 4b 22 28 20 22 53 44 47 51
>7930	4d 41 44 4e 22 20 39 39 30 20 53 54 52 24 28 47
>7940	36 57 20 34 34 36 00
.7947					Line3:
>7947	33 34 32 00				.text '342',0
.794b					Line4:
>794b	31 30 38 36 20 2d 33 2e			.text '1086 -3.57"ZZDK" 534 ASC(-5.7-3.19 CHR$(E 942 462 MID$(-2.81',0
>7953	35 37 22 5a 5a 44 4b 22 20 35 33 34 20 41 53 43
>7963	28 2d 35 2e 37 2d 33 2e 31 39 20 43 48 52 24 28
>7973	45 20 39 34 32 20 34 36 32 20 4d 49 44 24 28 2d
>7983	32 2e 38 31 00
.7988					Line5:
>7988	34 37 30 20 42 31 4e 37			.text '470 B1N7 ""DIV 0.42 DEC(""(A0C1N$*STR$(-< B1B5$878-5.03+-3.92 8.46 "" "CFYLS" -"A"3.65 630 E6M1I1 """QYW"1150',0
>7990	20 22 22 44 49 56 20 30 2e 34 32 20 44 45 43 28
>79a0	22 22 28 41 30 43 31 4e 24 2a 53 54 52 24 28 2d
>79b0	3c 20 42 31 42 35 24 38 37 38 2d 35 2e 30 33 2b
>79c0	2d 33 2e 39 32 20 38 2e 34 36 20 22 22 20 22 43
>79d0	46 59 4c 53 22 20 2d 22 41 22 33 2e 36 35 20 36
>79e0	33 30 20 45 36 4d 31 49 31 20 22 22 22 51 59 57
>79f0	22 31 31 35 30 00
.79f6					Line6:
>79f6	36 37 30 20 22 57 51 55			.text '670 "WQUHCGJO"4.06-2.59 U8Z7S(302 486 3.44 "Y" 1006 DEEK( HEX$( Z L9Q3-1.82 950',0
>79fe	48 43 47 4a 4f 22 34 2e 30 36 2d 32 2e 35 39 20
>7a0e	55 38 5a 37 53 28 33 30 32 20 34 38 36 20 33 2e
>7a1e	34 34 20 22 59 22 20 31 30 30 36 20 44 45 45 4b
>7a2e	28 20 48 45 58 24 28 20 5a 20 4c 39 51 33 2d 31
>7a3e	2e 38 32 20 39 35 30 00
.7a46					Line7:
>7a46	38 35 34 20 20 2b 54 32			.text '854  +T2V2T6 "UUWUUGMJ" / F0D9X6 446 THEN 830-8.89 IF T4S1 6.08 H(D$)(4.2"UQ"550"" 7.16 1062',0
>7a4e	56 32 54 36 20 22 55 55 57 55 55 47 4d 4a 22 20
>7a5e	2f 20 46 30 44 39 58 36 20 34 34 36 20 54 48 45
>7a6e	4e 20 38 33 30 2d 38 2e 38 39 20 49 46 20 54 34
>7a7e	53 31 20 36 2e 30 38 20 48 28 44 24 29 28 34 2e
>7a8e	32 22 55 51 22 35 35 30 22 22 20 37 2e 31 36 20
>7a9e	31 30 36 32 00
.7aa3					Line8:
>7aa3	32 31 34 20 30 2e 31 38			.text '214 0.18 630 ( )774 3.04 1158 ENDPROC "HHI"ENDIF O3B 854- "YRXMZSGS"> E6V4U+8.64 W5L9P2$ELSE 822 950 5.09',0
>7aab	20 36 33 30 20 28 20 29 37 37 34 20 33 2e 30 34
>7abb	20 31 31 35 38 20 45 4e 44 50 52 4f 43 20 22 48
>7acb	48 49 22 45 4e 44 49 46 20 4f 33 42 20 38 35 34
>7adb	2d 20 22 59 52 58 4d 5a 53 47 53 22 3e 20 45 36
>7aeb	56 34 55 2b 38 2e 36 34 20 57 35 4c 39 50 32 24
>7afb	45 4c 53 45 20 38 32 32 20 39 35 30 20 35 2e 30
>7b0b	39 00
.7b0d					Line9:
>7b0d	31 30 39 34 20 20 3e 20			.text '1094  > 1.42 M5D8U DIV EVENT(9.12 ENDPROC 886 Y4( 502 DATA>HEX$(',0
>7b15	31 2e 34 32 20 4d 35 44 38 55 20 44 49 56 20 45
>7b25	56 45 4e 54 28 39 2e 31 32 20 45 4e 44 50 52 4f
>7b35	43 20 38 38 36 20 59 34 28 20 35 30 32 20 44 41
>7b45	54 41 3e 48 45 58 24 28 00
.7b4e					Line10:
>7b4e	33 36 36 00				.text '366',0
.7b52					Line11:
>7b52	38 31 34 20 39 35 30 20			.text '814 950 758:-6.61 UNTIL*',0
>7b5a	37 35 38 3a 2d 36 2e 36 31 20 55 4e 54 49 4c 2a
>7b6a	00
.7b6b					Line12:
>7b6b	32 32 32 20 20 53 31 50			.text '222  S1P L9Q3< F3I5L 398 A3 918 894 446 G I G4P4I 830 E*< THEN< -""0.02"JVBEDBP" ENDIF',0
>7b73	20 4c 39 51 33 3c 20 46 33 49 35 4c 20 33 39 38
>7b83	20 41 33 20 39 31 38 20 38 39 34 20 34 34 36 20
>7b93	47 20 49 20 47 34 50 34 49 20 38 33 30 20 45 2a
>7ba3	3c 20 54 48 45 4e 3c 20 2d 22 22 30 2e 30 32 22
>7bb3	4a 56 42 45 44 42 50 22 20 45 4e 44 49 46 00
.7bc2					Line13:
>7bc2	34 32 32 20 22 53 50 22			.text '422 "SP"',0
>7bca	00
.7bcb					Line14:
>7bcb	33 35 30 20 22 46 40 22			.text '350 "F@"4.45 J5G0O5)-3.29"KJNKDXP"-9.86-4.85 T4S1 U4V4Z8$ "SRK"6.88 <"GUILKOB"*/',0
>7bd3	34 2e 34 35 20 4a 35 47 30 4f 35 29 2d 33 2e 32
>7be3	39 22 4b 4a 4e 4b 44 58 50 22 2d 39 2e 38 36 2d
>7bf3	34 2e 38 35 20 54 34 53 31 20 55 34 56 34 5a 38
>7c03	24 20 22 53 52 4b 22 36 2e 38 38 20 3c 22 47 55
>7c13	49 4c 4b 4f 42 22 2a 2f 00
.7c1c					Line15:
>7c1c	35 37 34 20 45 4e 44 50			.text '574 ENDPROC 942 ABS( "NQIWRIKL""FCS"790 542 710 "MH"-9.03 710 "TAO"CALL',0
>7c24	52 4f 43 20 39 34 32 20 41 42 53 28 20 22 4e 51
>7c34	49 57 52 49 4b 4c 22 22 46 43 53 22 37 39 30 20
>7c44	35 34 32 20 37 31 30 20 22 4d 48 22 2d 39 2e 30
>7c54	33 20 37 31 30 20 22 54 41 4f 22 43 41 4c 4c 00
.7c64					Line16:
>7c64	35 37 34 20 20 29 32 2e			.text '574  )2.26 P3H3I3 -8.32 574-4.05/"TJRJSX" P3H3I3',0
>7c6c	32 36 20 50 33 48 33 49 33 20 2d 38 2e 33 32 20
>7c7c	35 37 34 2d 34 2e 30 35 2f 22 54 4a 52 4a 53 58
>7c8c	22 20 50 33 48 33 49 33 00
.7c95					Line17:
>7c95	39 36 36 20 24 20 32 39			.text '966 $ 294 2.9 INKEY$(-1.51 8.74',0
>7c9d	34 20 32 2e 39 20 49 4e 4b 45 59 24 28 2d 31 2e
>7cad	35 31 20 38 2e 37 34 00
.7cb5					Line18:
>7cb5	34 37 38 20 20 2d 30 2e			.text '478  -0.83 -4.78 W5L9P2$1134"BUMG" /CALL 454 I3F3(+>"FVFZO" 1.88 "@EOI"-3.08 V8 N7B9S("VRC"-3.09 "QADQ"/ INPUT<214 710 O3B/',0
>7cbd	38 33 20 2d 34 2e 37 38 20 57 35 4c 39 50 32 24
>7ccd	31 31 33 34 22 42 55 4d 47 22 20 2f 43 41 4c 4c
>7cdd	20 34 35 34 20 49 33 46 33 28 2b 3e 22 46 56 46
>7ced	5a 4f 22 20 31 2e 38 38 20 22 40 45 4f 49 22 2d
>7cfd	33 2e 30 38 20 56 38 20 4e 37 42 39 53 28 22 56
>7d0d	52 43 22 2d 33 2e 30 39 20 22 51 41 44 51 22 2f
>7d1d	20 49 4e 50 55 54 3c 32 31 34 20 37 31 30 20 4f
>7d2d	33 42 2f 00
.7d31					Line19:
>7d31	34 37 38 20 39 33 34 20			.text '478 934 T2V2T6 734 8.21 462 958 D5J5U8 6.81 878"RQOSSEB"SQR( 958 3.36 558-6.88 G3X4L4$',0
>7d39	54 32 56 32 54 36 20 37 33 34 20 38 2e 32 31 20
>7d49	34 36 32 20 39 35 38 20 44 35 4a 35 55 38 20 36
>7d59	2e 38 31 20 38 37 38 22 52 51 4f 53 53 45 42 22
>7d69	53 51 52 28 20 39 35 38 20 33 2e 33 36 20 35 35
>7d79	38 2d 36 2e 38 38 20 47 33 58 34 4c 34 24 00
.7d88					Line20:
>7d88	31 30 34 36 20 20 34 36			.text '1046  462 1.98-7.03 1054 K5F4P 822 1134"UVGN"',0
>7d90	32 20 31 2e 39 38 2d 37 2e 30 33 20 31 30 35 34
>7da0	20 4b 35 46 34 50 20 38 32 32 20 31 31 33 34 22
>7db0	55 56 47 4e 22 00
.7db6					Line21:
>7db6	33 31 38 20 20 2d 38 2e			.text '318  -8.56 C7 1.28',0
>7dbe	35 36 20 43 37 20 31 2e 32 38 00
.7dc9					Line22:
>7dc9	37 32 36 20 20 22 51 45			.text '726  "QEHNF" + "LGY@"1046 PROC"@SFWCYN"+342<>A3N7S( Z2(1.78 678"H@@QB" 6.81 -870"SAVFYY"-7.33"WNMMS"E 3.57 RAND(-8.53 >= 966 E3( 1038 PRINT',0
>7dd1	48 4e 46 22 20 2b 20 22 4c 47 59 40 22 31 30 34
>7de1	36 20 50 52 4f 43 22 40 53 46 57 43 59 4e 22 2b
>7df1	33 34 32 3c 3e 41 33 4e 37 53 28 20 5a 32 28 31
>7e01	2e 37 38 20 36 37 38 22 48 40 40 51 42 22 20 36
>7e11	2e 38 31 20 2d 38 37 30 22 53 41 56 46 59 59 22
>7e21	2d 37 2e 33 33 22 57 4e 4d 4d 53 22 45 20 33 2e
>7e31	35 37 20 52 41 4e 44 28 2d 38 2e 35 33 20 3e 3d
>7e41	20 39 36 36 20 45 33 28 20 31 30 33 38 20 50 52
>7e51	49 4e 54 00
.7e55					Line23:
>7e55	34 32 32 20 20 4a 28 20			.text '422  J( H( ASC(',0
>7e5d	48 28 20 41 53 43 28 00
.7e65					Line24:
>7e65	35 39 38 20 22 59 22 33			.text '598 "Y"358< TO "T" 638 "QD") C1P9V "VU@U" 6.12 3.4 -9.15 718 4.4',0
>7e6d	35 38 3c 20 54 4f 20 22 54 22 20 36 33 38 20 22
>7e7d	51 44 22 29 20 43 31 50 39 56 20 22 56 55 40 55
>7e8d	22 20 36 2e 31 32 20 33 2e 34 20 2d 39 2e 31 35
>7e9d	20 37 31 38 20 34 2e 34 00
.7ea6					Line25:
>7ea6	36 35 34 00				.text '654',0
.7eaa					Line26:
>7eaa	34 33 30 20 32 2e 37 38			.text '430 2.78',0
>7eb2	00
.7eb3					Line27:
>7eb3	35 36 36 20 2d 32 2e 39			.text '566 -2.95 382 958"V@KZGW"7.68"@Y" ) 662 K5F4P-0.11 X6C2L7("Z"> -982> J(1.43( C7 B B8X0$<<POKE "KBDKMWVF"( 806 V8E(',0
>7ebb	35 20 33 38 32 20 39 35 38 22 56 40 4b 5a 47 57
>7ecb	22 37 2e 36 38 22 40 59 22 20 29 20 36 36 32 20
>7edb	4b 35 46 34 50 2d 30 2e 31 31 20 58 36 43 32 4c
>7eeb	37 28 22 5a 22 3e 20 2d 39 38 32 3e 20 4a 28 31
>7efb	2e 34 33 28 20 43 37 20 42 20 42 38 58 30 24 3c
>7f0b	3c 50 4f 4b 45 20 22 4b 42 44 4b 4d 57 56 46 22
>7f1b	28 20 38 30 36 20 56 38 45 28 00
.7f26					Line28:
>7f26	36 31 34 20 44 35 4a 35			.text '614 D5J5U8 -5.16"XZ"R4Q3Z0 518 0.0 734 822 8.21 ) =734"TQIFXHWH""MZCR" >=4.41 G3X4L4$598 S',0
>7f2e	55 38 20 2d 35 2e 31 36 22 58 5a 22 52 34 51 33
>7f3e	5a 30 20 35 31 38 20 30 2e 30 20 37 33 34 20 38
>7f4e	32 32 20 38 2e 32 31 20 29 20 3d 37 33 34 22 54
>7f5e	51 49 46 58 48 57 48 22 22 4d 5a 43 52 22 20 3e
>7f6e	3d 34 2e 34 31 20 47 33 58 34 4c 34 24 35 39 38
>7f7e	20 53 00
.7f81					Line29:
>7f81	35 36 36 20 2d 31 2e 31			.text '566 -1.19 S = 734 :3.79 RAND(F4J1 POKE L9Q3"X"D2N4 Z4Q(-0.63"OTCJWKB" A0C1N$638 V3S5J5 >TO',0
>7f89	39 20 53 20 3d 20 37 33 34 20 3a 33 2e 37 39 20
>7f99	52 41 4e 44 28 46 34 4a 31 20 50 4f 4b 45 20 4c
>7fa9	39 51 33 22 58 22 44 32 4e 34 20 5a 34 51 28 2d
>7fb9	30 2e 36 33 22 4f 54 43 4a 57 4b 42 22 20 41 30
>7fc9	43 31 4e 24 36 33 38 20 56 33 53 35 4a 35 20 3e
>7fd9	54 4f 00
.7fdc					Line30:
>7fdc	31 30 34 36 20 20 2f 37			.text '1046  /7.57 I FOR 6.93 5.57"ELJ"G6W ) "DOYB" 7.6 W$""486 X6B7D0 -4.39 M8O X6C2L7(-8.36 ""= RAND(',0
>7fe4	2e 35 37 20 49 20 46 4f 52 20 36 2e 39 33 20 35
>7ff4	2e 35 37 22 45 4c 4a 22 47 36 57 20 29 20 22 44
>8004	4f 59 42 22 20 37 2e 36 20 57 24 22 22 34 38 36
>8014	20 58 36 42 37 44 30 20 2d 34 2e 33 39 20 4d 38
>8024	4f 20 58 36 43 32 4c 37 28 2d 38 2e 33 36 20 22
>8034	22 3d 20 52 41 4e 44 28 00
.803d					Line31:
>803d	38 31 34 20 20 32 2e 36			.text '814  2.69-3.14< -9.12 O7 MID$(3.34 DOKE VAL(E9J3 -5.02"HPGLWB"',0
>8045	39 2d 33 2e 31 34 3c 20 2d 39 2e 31 32 20 4f 37
>8055	20 4d 49 44 24 28 33 2e 33 34 20 44 4f 4b 45 20
>8065	56 41 4c 28 45 39 4a 33 20 2d 35 2e 30 32 22 48
>8075	50 47 4c 57 42 22 00
.807c					Line32:
>807c	38 39 34 20 22 56 55 52			.text '894 "VUR"-3.61 1.29 494 T2 990-5.5 Z "BT""O"',0
>8084	22 2d 33 2e 36 31 20 31 2e 32 39 20 34 39 34 20
>8094	54 32 20 39 39 30 2d 35 2e 35 20 5a 20 22 42 54
>80a4	22 22 4f 22 00
.80a9					Line33:
>80a9	37 34 32 20 20 46 52 41			.text '742  FRAC(870 630 Y 710<T0W8$THEN<) READ 638 O3B"B"L7Q4 -9.87 I0T0"SMSSPPCX" INPUT "D"D5M( 0.32 * G4P4I "TKMPLJL"558 );B8X0$',0
>80b1	43 28 38 37 30 20 36 33 30 20 59 20 37 31 30 3c
>80c1	54 30 57 38 24 54 48 45 4e 3c 29 20 52 45 41 44
>80d1	20 36 33 38 20 4f 33 42 22 42 22 4c 37 51 34 20
>80e1	2d 39 2e 38 37 20 49 30 54 30 22 53 4d 53 53 50
>80f1	50 43 58 22 20 49 4e 50 55 54 20 22 44 22 44 35
>8101	4d 28 20 30 2e 33 32 20 2a 20 47 34 50 34 49 20
>8111	22 54 4b 4d 50 4c 4a 4c 22 35 35 38 20 29 3b 42
>8121	38 58 30 24 00
.8126					Line34:
>8126	38 31 34 20 20 59 20 31			.text '814  Y 1158>W5L9P2$230-8.99 Z4Q ELSE/Q0O4A9$N X4B2 Z4Q S"P"934(-1.94 230',0
>812e	31 35 38 3e 57 35 4c 39 50 32 24 32 33 30 2d 38
>813e	2e 39 39 20 5a 34 51 20 45 4c 53 45 2f 51 30 4f
>814e	34 41 39 24 4e 20 58 34 42 32 20 5a 34 51 20 53
>815e	22 50 22 39 33 34 28 2d 31 2e 39 34 20 32 33 30
>816e	00
.816f					Line35:
>816f	36 33 30 20 3e 20 33 37			.text '630 > 374 B1B5$> E4V$"BJNMSRRY"-4.67 8.11 H( 518"H""">934 DEC(E4V$782-9.67 DEEK(-3.89 -4.88 INKEY$(O7 ENDPROC 7.13 526-0.36-1.7',0
>8177	34 20 42 31 42 35 24 3e 20 45 34 56 24 22 42 4a
>8187	4e 4d 53 52 52 59 22 2d 34 2e 36 37 20 38 2e 31
>8197	31 20 48 28 20 35 31 38 22 48 22 22 22 3e 39 33
>81a7	34 20 44 45 43 28 45 34 56 24 37 38 32 2d 39 2e
>81b7	36 37 20 44 45 45 4b 28 2d 33 2e 38 39 20 2d 34
>81c7	2e 38 38 20 49 4e 4b 45 59 24 28 4f 37 20 45 4e
>81d7	44 50 52 4f 43 20 37 2e 31 33 20 35 32 36 2d 30
>81e7	2e 33 36 2d 31 2e 37 00
.81ef					Line36:
>81ef	38 39 34 20 22 48 52 22			.text '894 "HR""ES" 3.27"SC"606 "RHZECZLO"V8E(STEP"P@HVPBJ"-8.97 590 982',0
>81f7	22 45 53 22 20 33 2e 32 37 22 53 43 22 36 30 36
>8207	20 22 52 48 5a 45 43 5a 4c 4f 22 56 38 45 28 53
>8217	54 45 50 22 50 40 48 56 50 42 4a 22 2d 38 2e 39
>8227	37 20 35 39 30 20 39 38 32 00
.8231					Line37:
>8231	33 39 30 20 20 36 2e 32			.text '390  6.26 ASC( 406)766 918"RA""BAC"--3.8"ZA"DEEK(T2 N7B9S(WHILE "EZGJD""URJM""MQXJ""FOD" "EXSUSO"-0.77 =*1046<IF 558 1.89 4.05',0
>8239	36 20 41 53 43 28 20 34 30 36 29 37 36 36 20 39
>8249	31 38 22 52 41 22 22 42 41 43 22 2d 2d 33 2e 38
>8259	22 5a 41 22 44 45 45 4b 28 54 32 20 4e 37 42 39
>8269	53 28 57 48 49 4c 45 20 22 45 5a 47 4a 44 22 22
>8279	55 52 4a 4d 22 22 4d 51 58 4a 22 22 46 4f 44 22
>8289	20 22 45 58 53 55 53 4f 22 2d 30 2e 37 37 20 3d
>8299	2a 31 30 34 36 3c 49 46 20 35 35 38 20 31 2e 38
>82a9	39 20 34 2e 30 35 00
.82b0					Line38:
>82b0	38 37 30 20 22 53 48 59			.text '870 "SHYEFS"* "TB"526 494 THEN W6 G4Q5U 0.94 W6Z5>NEXT > 694 V8<=-3.51',0
>82b8	45 46 53 22 2a 20 22 54 42 22 35 32 36 20 34 39
>82c8	34 20 54 48 45 4e 20 57 36 20 47 34 51 35 55 20
>82d8	30 2e 39 34 20 57 36 5a 35 3e 4e 45 58 54 20 3e
>82e8	20 36 39 34 20 56 38 3c 3d 2d 33 2e 35 31 00
.82f7					Line39:
>82f7	39 33 34 20 20 22 55 50			.text '934  "UPYQQBLY" (G6W -1.98 4.53"FWFDPD""MH"T2("HSYGJMAZ"B"ZWI""X"-9.23 -7.82 <<*C7"N" -4.01+ <"RFDDYEN"230 -8.11 UNTIL"SJTOR"=',0
>82ff	59 51 51 42 4c 59 22 20 28 47 36 57 20 2d 31 2e
>830f	39 38 20 34 2e 35 33 22 46 57 46 44 50 44 22 22
>831f	4d 48 22 54 32 28 22 48 53 59 47 4a 4d 41 5a 22
>832f	42 22 5a 57 49 22 22 58 22 2d 39 2e 32 33 20 2d
>833f	37 2e 38 32 20 3c 3c 2a 43 37 22 4e 22 20 2d 34
>834f	2e 30 31 2b 20 3c 22 52 46 44 44 59 45 4e 22 32
>835f	33 30 20 2d 38 2e 31 31 20 55 4e 54 49 4c 22 53
>836f	4a 54 4f 52 22 3d 00
.8376					Line40:
>8376	34 37 38 20 28 28 20 2d			.text '478 (( - -7.93 814 -0.16',0
>837e	20 2d 37 2e 39 33 20 38 31 34 20 2d 30 2e 31 36
>838e	00
.838f					Line41:
>838f	38 34 36 20 31 30 32 32			.text '846 1022 LEFT$(',0
>8397	20 4c 45 46 54 24 28 00
.839f					Line42:
>839f	33 35 38 20 20 43 48 52			.text '358  CHR$("ZQRJM"1.62 "LNVIPS"-8.68"FISYS@JC"T2 Y9O6J STR$( M8O 966 CHR$( >RND("ZI"',0
>83a7	24 28 22 5a 51 52 4a 4d 22 31 2e 36 32 20 22 4c
>83b7	4e 56 49 50 53 22 2d 38 2e 36 38 22 46 49 53 59
>83c7	53 40 4a 43 22 54 32 20 59 39 4f 36 4a 20 53 54
>83d7	52 24 28 20 4d 38 4f 20 39 36 36 20 43 48 52 24
>83e7	28 20 3e 52 4e 44 28 22 5a 49 22 00
.83f3					Line43:
>83f3	38 39 34 20 2d 37 2e 36			.text '894 -7.62 8.96 7.28 2.67 - G4Q5U Q"UWR@KJX""AI@HGGPX" "UOUDBME@" T4S1 *7.74 926"ADHR"- 382 +-4.07 438',0
>83fb	32 20 38 2e 39 36 20 37 2e 32 38 20 32 2e 36 37
>840b	20 2d 20 47 34 51 35 55 20 51 22 55 57 52 40 4b
>841b	4a 58 22 22 41 49 40 48 47 47 50 58 22 20 22 55
>842b	4f 55 44 42 4d 45 40 22 20 54 34 53 31 20 2a 37
>843b	2e 37 34 20 39 32 36 22 41 44 48 52 22 2d 20 33
>844b	38 32 20 2b 2d 34 2e 30 37 20 34 33 38 00
.8459					Line44:
>8459	31 31 35 30 20 20 34 33			.text '1150  430 FRAC(/"ONYZC@H"U4V4Z8$"WJKE""OXSMGXOF"-5.15 5.63 + DEC(D7 LOOP"GGXV""UMFJ@T""ALJ"270 (',0
>8461	30 20 46 52 41 43 28 2f 22 4f 4e 59 5a 43 40 48
>8471	22 55 34 56 34 5a 38 24 22 57 4a 4b 45 22 22 4f
>8481	58 53 4d 47 58 4f 46 22 2d 35 2e 31 35 20 35 2e
>8491	36 33 20 2b 20 44 45 43 28 44 37 20 4c 4f 4f 50
>84a1	22 47 47 58 56 22 22 55 4d 46 4a 40 54 22 22 41
>84b1	4c 4a 22 32 37 30 20 28 00
.84ba					Line45:
>84ba	38 35 34 20 22 49 4a 57			.text '854 "IJWHP"REPEAT-5.89 1158/670 + $ 1134- TIME FOR "ALZN""ZQ"-8.99 T2(614 B1B5$',0
>84c2	48 50 22 52 45 50 45 41 54 2d 35 2e 38 39 20 31
>84d2	31 35 38 2f 36 37 30 20 2b 20 24 20 31 31 33 34
>84e2	2d 20 54 49 4d 45 20 46 4f 52 20 22 41 4c 5a 4e
>84f2	22 22 5a 51 22 2d 38 2e 39 39 20 54 32 28 36 31
>8502	34 20 42 31 42 35 24 00
.850a					Line46:
>850a	39 30 32 20 22 52 49 50			.text '902 "RIPBJXIM"DEC( CALL 3.85"EVJCA" I0T0 574-2.79 G /""D5J5U8 Q2D4 2.77/ -5.83 "PAZSR"-9.99"""""A" 486 318-6.88 V3S5J5 G3X4L4$',0
>8512	42 4a 58 49 4d 22 44 45 43 28 20 43 41 4c 4c 20
>8522	33 2e 38 35 22 45 56 4a 43 41 22 20 49 30 54 30
>8532	20 35 37 34 2d 32 2e 37 39 20 47 20 2f 22 22 44
>8542	35 4a 35 55 38 20 51 32 44 34 20 32 2e 37 37 2f
>8552	20 2d 35 2e 38 33 20 22 50 41 5a 53 52 22 2d 39
>8562	2e 39 39 22 22 22 22 22 41 22 20 34 38 36 20 33
>8572	31 38 2d 36 2e 38 38 20 56 33 53 35 4a 35 20 47
>8582	33 58 34 4c 34 24 00
.8589					Line47:
>8589	35 33 34 20 20 4e 30 4e			.text '534  N0N2P REPEAT 806 430 PROC-2.75 4.18 0.93 OR "HXBO""HP" ""E9J3+862 LOOP "RLFO@ZJO"""DIV U4J4C LEN(462 A0C1N$',0
>8591	32 50 20 52 45 50 45 41 54 20 38 30 36 20 34 33
>85a1	30 20 50 52 4f 43 2d 32 2e 37 35 20 34 2e 31 38
>85b1	20 30 2e 39 33 20 4f 52 20 22 48 58 42 4f 22 22
>85c1	48 50 22 20 22 22 45 39 4a 33 2b 38 36 32 20 4c
>85d1	4f 4f 50 20 22 52 4c 46 4f 40 5a 4a 4f 22 22 22
>85e1	44 49 56 20 55 34 4a 34 43 20 4c 45 4e 28 34 36
>85f1	32 20 41 30 43 31 4e 24 00
.85fa					Line48:
>85fa	35 36 36 20 2a 36 2e 31			.text '566 *6.15 =; 854 N+V3S5J5 5.64""0.74 446 IF',0
>8602	35 20 3d 3b 20 38 35 34 20 4e 2b 56 33 53 35 4a
>8612	35 20 35 2e 36 34 22 22 30 2e 37 34 20 34 34 36
>8622	20 49 46 00
.8626					Line49:
>8626	34 37 38 20 20 2d 34 2e			.text '478  -4.11 =7.62 838 Z8I8D IF LET*</ "FKUVXR"ENDIF>"GQFKGF"J2K7H8(-2.59 270"QF""KHDKDWMI"N7B9S( N0N2P "@LI"',0
>862e	31 31 20 3d 37 2e 36 32 20 38 33 38 20 5a 38 49
>863e	38 44 20 49 46 20 4c 45 54 2a 3c 2f 20 22 46 4b
>864e	55 56 58 52 22 45 4e 44 49 46 3e 22 47 51 46 4b
>865e	47 46 22 4a 32 4b 37 48 38 28 2d 32 2e 35 39 20
>866e	32 37 30 22 51 46 22 22 4b 48 44 4b 44 57 4d 49
>867e	22 4e 37 42 39 53 28 20 4e 30 4e 32 50 20 22 40
>868e	4c 49 22 00
.8692					Line50:
>8692	38 32 32 20 36 36 32 20			.text '822 662 2.77 830 K5F4P"YDLH"J5G0O5 Q2D4 SQR(--0.98 I3F3(',0
>869a	32 2e 37 37 20 38 33 30 20 4b 35 46 34 50 22 59
>86aa	44 4c 48 22 4a 35 47 30 4f 35 20 51 32 44 34 20
>86ba	53 51 52 28 2d 2d 30 2e 39 38 20 49 33 46 33 28
>86ca	00
.86cb					Line51:
>86cb	35 36 36 20 36 32 32 00			.text '566 622',0
.86d3					Line52:
>86d3	32 37 38 20 22 54 41 52			.text '278 "TARAJKJ" -1.77(SGN(0.8 982 -O1D3"DUYPI"+622 WEND""EVENT(-0.42-4.31',0
>86db	41 4a 4b 4a 22 20 2d 31 2e 37 37 28 53 47 4e 28
>86eb	30 2e 38 20 39 38 32 20 2d 4f 31 44 33 22 44 55
>86fb	59 50 49 22 2b 36 32 32 20 57 45 4e 44 22 22 45
>870b	56 45 4e 54 28 2d 30 2e 34 32 2d 34 2e 33 31 00
.871b					Line53:
>871b	32 32 32 20 35 31 30 20			.text '222 510 470-7.98 X6B7D0 678<4.71 8.93 D 574 318 622 * SGN("KC"342 5.65-9.02 -5.23 Z4Q 1078-7.09 PEEK( 814"GP") WEND 526',0
>8723	34 37 30 2d 37 2e 39 38 20 58 36 42 37 44 30 20
>8733	36 37 38 3c 34 2e 37 31 20 38 2e 39 33 20 44 20
>8743	35 37 34 20 33 31 38 20 36 32 32 20 2a 20 53 47
>8753	4e 28 22 4b 43 22 33 34 32 20 35 2e 36 35 2d 39
>8763	2e 30 32 20 2d 35 2e 32 33 20 5a 34 51 20 31 30
>8773	37 38 2d 37 2e 30 39 20 50 45 45 4b 28 20 38 31
>8783	34 22 47 50 22 29 20 57 45 4e 44 20 35 32 36 00
.8793					Line54:
>8793	33 33 34 20 20 2d 3c 32			.text '334  -<2.27 T 1094 REPEAT "EQDH"',0
>879b	2e 32 37 20 54 20 31 30 39 34 20 52 45 50 45 41
>87ab	54 20 22 45 51 44 48 22 00
.87b4					Line55:
>87b4	32 37 30 00				.text '270',0
.87b8					Line56:
>87b8	38 36 32 20 45 58 49 54			.text '862 EXIT A3 E3( /MOD 6.38 0.6 ASC(',0
>87c0	20 41 33 20 45 33 28 20 2f 4d 4f 44 20 36 2e 33
>87d0	38 20 30 2e 36 20 41 53 43 28 00
.87db					Line57:
>87db	32 35 34 20 31 2e 36 36			.text '254 1.66 -0.96 B"ZIT"214+ DIV E4V$>G< H() -8.77< 8.49 >)1.53 "HJMPTJ"454 F',0
>87e3	20 2d 30 2e 39 36 20 42 22 5a 49 54 22 32 31 34
>87f3	2b 20 44 49 56 20 45 34 56 24 3e 47 3c 20 48 28
>8803	29 20 2d 38 2e 37 37 3c 20 38 2e 34 39 20 3e 29
>8813	31 2e 35 33 20 22 48 4a 4d 50 54 4a 22 34 35 34
>8823	20 46 00
.8826					Line58:
>8826	31 30 33 30 20 20 2a 44			.text '1030  *DEEK(4.79 278 LEFT$(R DEEK(V3S5J5 R4Q3Z0 -9.27 DO 1094 =/)>=(1.57""4.56 <670-2.97-"XLDW@TTH""TEME" D ( <',0
>882e	45 45 4b 28 34 2e 37 39 20 32 37 38 20 4c 45 46
>883e	54 24 28 52 20 44 45 45 4b 28 56 33 53 35 4a 35
>884e	20 52 34 51 33 5a 30 20 2d 39 2e 32 37 20 44 4f
>885e	20 31 30 39 34 20 3d 2f 29 3e 3d 28 31 2e 35 37
>886e	22 22 34 2e 35 36 20 3c 36 37 30 2d 32 2e 39 37
>887e	2d 22 58 4c 44 57 40 54 54 48 22 22 54 45 4d 45
>888e	22 20 44 20 28 20 3c 00
.8896					Line59:
>8896	35 36 36 20 2d 22 4b 44			.text '566 -"KDSY" 9.88"IZ"W2J9H0 I=/I7N0<A3N7S(-4.02"E"E3( "AYSE"W6-4.55 IF"UXAUG"<',0
>889e	53 59 22 20 39 2e 38 38 22 49 5a 22 57 32 4a 39
>88ae	48 30 20 49 3d 2f 49 37 4e 30 3c 41 33 4e 37 53
>88be	28 2d 34 2e 30 32 22 45 22 45 33 28 20 22 41 59
>88ce	53 45 22 57 36 2d 34 2e 35 35 20 49 46 22 55 58
>88de	41 55 47 22 3c 00
.88e4					Line60:
>88e4	39 36 36 00				.text '966',0
.88e8					Line61:
>88e8	32 32 32 20 22 4e 58 41			.text '222 "NXAO""DCZMOBL"EXIT "UMNEGUPE" STR$(HEX$("IEDZ" 502 2.99 G1)1.39 614""',0
>88f0	4f 22 22 44 43 5a 4d 4f 42 4c 22 45 58 49 54 20
>8900	22 55 4d 4e 45 47 55 50 45 22 20 53 54 52 24 28
>8910	48 45 58 24 28 22 49 45 44 5a 22 20 35 30 32 20
>8920	32 2e 39 39 20 47 31 29 31 2e 33 39 20 36 31 34
>8930	22 22 00
.8933					Line62:
>8933	36 33 38 20 20 2d 31 2e			.text '638  -1.31 N0N2P B1B5$"XSTKZO""MHPAKZN"D5M( K3S4D3 ELSE 3.5 2.69 390 K4( 7.4 U4J4C N "SF" 894 2.71',0
>893b	33 31 20 4e 30 4e 32 50 20 42 31 42 35 24 22 58
>894b	53 54 4b 5a 4f 22 22 4d 48 50 41 4b 5a 4e 22 44
>895b	35 4d 28 20 4b 33 53 34 44 33 20 45 4c 53 45 20
>896b	33 2e 35 20 32 2e 36 39 20 33 39 30 20 4b 34 28
>897b	20 37 2e 34 20 55 34 4a 34 43 20 4e 20 22 53 46
>898b	22 20 38 39 34 20 32 2e 37 31 00
.8996					Line63:
>8996	36 35 34 00				.text '654',0
.899a					Line64:
>899a	38 36 32 20 20 2d 22 41			.text '862  -"AMZZB"',0
>89a2	4d 5a 5a 42 22 00
.89a8					Line65:
>89a8	31 30 31 34 20 47 33 58			.text '1014 G3X4L4$LET R7Z1G2( T2 "AL""OGARASH" 4.97 966 366-5.6 Y 2.95 494 J2K7H8(:',0
>89b0	34 4c 34 24 4c 45 54 20 52 37 5a 31 47 32 28 20
>89c0	54 32 20 22 41 4c 22 22 4f 47 41 52 41 53 48 22
>89d0	20 34 2e 39 37 20 39 36 36 20 33 36 36 2d 35 2e
>89e0	36 20 59 20 32 2e 39 35 20 34 39 34 20 4a 32 4b
>89f0	37 48 38 28 3a 00
.89f6					Line66:
>89f6	33 30 32 20 56 35 41 36			.text '302 V5A6 N0N2P ENDPROC "ROY" (SYS Q-9.66 = EVENT(B "YJLLRFE"()438 966 <= -9.42 G6W"OWAEDSP",<7.89 ELSE 334 "TR"1046',0
>89fe	20 4e 30 4e 32 50 20 45 4e 44 50 52 4f 43 20 22
>8a0e	52 4f 59 22 20 28 53 59 53 20 51 2d 39 2e 36 36
>8a1e	20 3d 20 45 56 45 4e 54 28 42 20 22 59 4a 4c 4c
>8a2e	52 46 45 22 28 29 34 33 38 20 39 36 36 20 3c 3d
>8a3e	20 2d 39 2e 34 32 20 47 36 57 22 4f 57 41 45 44
>8a4e	53 50 22 2c 3c 37 2e 38 39 20 45 4c 53 45 20 33
>8a5e	33 34 20 22 54 52 22 31 30 34 36 00
.8a6a					Line67:
>8a6a	39 34 32 00				.text '942',0
.8a6e					Line68:
>8a6e	35 31 38 20 3d 20 22 43			.text '518 = "CWGWQJ"<> "RXAZQL"V5A6 R4Q3Z0 ""-4.8 886""Q "" 1046"GCO"1134 894 Y7I7 Z8I8D"TLY"-7.3 )',0
>8a76	57 47 57 51 4a 22 3c 3e 20 22 52 58 41 5a 51 4c
>8a86	22 56 35 41 36 20 52 34 51 33 5a 30 20 22 22 2d
>8a96	34 2e 38 20 38 38 36 22 22 51 20 22 22 20 31 30
>8aa6	34 36 22 47 43 4f 22 31 31 33 34 20 38 39 34 20
>8ab6	59 37 49 37 20 5a 38 49 38 44 22 54 4c 59 22 2d
>8ac6	37 2e 33 20 29 00
.8acc					Line69:
>8acc	37 38 32 20 2a 31 31 33			.text '782 *1134 5.77-"GEY">- Y7I7)E4V$-9.92 1150 4.18 = * < ) >',0
>8ad4	34 20 35 2e 37 37 2d 22 47 45 59 22 3e 2d 20 59
>8ae4	37 49 37 29 45 34 56 24 2d 39 2e 39 32 20 31 31
>8af4	35 30 20 34 2e 31 38 20 3d 20 2a 20 3c 20 29 20
>8b04	3e 00
.8b06					Line70:
>8b06	33 34 32 20 20 37 2e 36			.text '342  7.67 THEN 694 FOR"""BXIU" WHILE "NE""OQLDFD" =*982"PMITXBG" "PUHTBUM" -4.04 TIME+',0
>8b0e	37 20 54 48 45 4e 20 36 39 34 20 46 4f 52 22 22
>8b1e	22 42 58 49 55 22 20 57 48 49 4c 45 20 22 4e 45
>8b2e	22 22 4f 51 4c 44 46 44 22 20 3d 2a 39 38 32 22
>8b3e	50 4d 49 54 58 42 47 22 20 22 50 55 48 54 42 55
>8b4e	4d 22 20 2d 34 2e 30 34 20 54 49 4d 45 2b 00
.8b5d					Line71:
>8b5d	36 35 34 20 54 29 39 34			.text '654 T)942 542 K4( -0.07 918 CHR$( -',0
>8b65	32 20 35 34 32 20 4b 34 28 20 2d 30 2e 30 37 20
>8b75	39 31 38 20 43 48 52 24 28 20 2d 00
.8b81					Line72:
>8b81	36 33 38 00				.text '638',0
.8b85					Line73:
>8b85	38 30 36 20 28 20 2d 37			.text '806 ( -7.16 LEFT$(UNTIL"DDCEZN" "OG"734>P3H3I3 510 414* 3.79',0
>8b8d	2e 31 36 20 4c 45 46 54 24 28 55 4e 54 49 4c 22
>8b9d	44 44 43 45 5a 4e 22 20 22 4f 47 22 37 33 34 3e
>8bad	50 33 48 33 49 33 20 35 31 30 20 34 31 34 2a 20
>8bbd	33 2e 37 39 00
.8bc2					Line74:
>8bc2	31 30 37 38 20 3e 2d 38			.text '1078 >-8.21/1.56"ND"PRINT=0.85 PRINT Q0O4A9$+542 +"KO@"DOKE 470 950<=846)""254 9.46 "MANICKW"REPEAT>CHR$(+',0
>8bca	2e 32 31 2f 31 2e 35 36 22 4e 44 22 50 52 49 4e
>8bda	54 3d 30 2e 38 35 20 50 52 49 4e 54 20 51 30 4f
>8bea	34 41 39 24 2b 35 34 32 20 2b 22 4b 4f 40 22 44
>8bfa	4f 4b 45 20 34 37 30 20 39 35 30 3c 3d 38 34 36
>8c0a	29 22 22 32 35 34 20 39 2e 34 36 20 22 4d 41 4e
>8c1a	49 43 4b 57 22 52 45 50 45 41 54 3e 43 48 52 24
>8c2a	28 2b 00
.8c2d					Line75:
>8c2d	31 31 33 34 20 52 20 39			.text '1134 R 9.52"FE"-6.38"WPCHGJR"',0
>8c35	2e 35 32 22 46 45 22 2d 36 2e 33 38 22 57 50 43
>8c45	48 47 4a 52 22 00
.8c4b					Line76:
>8c4b	38 36 32 20 20 22 44 59			.text '862  "DYYE""YBYY">K4(STR$(="FEX"< "OO"OR -1.09 -3.56 WEND 534 LOOP / "G""ZUTHS""V" 0.98( CHR$(750 F3I5L 2.54 UNTIL 590 1.61 G4Q5U',0
>8c53	59 45 22 22 59 42 59 59 22 3e 4b 34 28 53 54 52
>8c63	24 28 3d 22 46 45 58 22 3c 20 22 4f 4f 22 4f 52
>8c73	20 2d 31 2e 30 39 20 2d 33 2e 35 36 20 57 45 4e
>8c83	44 20 35 33 34 20 4c 4f 4f 50 20 2f 20 22 47 22
>8c93	22 5a 55 54 48 53 22 22 56 22 20 30 2e 39 38 28
>8ca3	20 43 48 52 24 28 37 35 30 20 46 33 49 35 4c 20
>8cb3	32 2e 35 34 20 55 4e 54 49 4c 20 35 39 30 20 31
>8cc3	2e 36 31 20 47 34 51 35 55 00
.8ccd					Line77:
>8ccd	34 33 38 00				.text '438',0
.8cd1					Line78:
>8cd1	39 33 34 20 20 2f 48 28			.text '934  /H(E5L9( -1.67 S5$1142',0
>8cd9	45 35 4c 39 28 20 2d 31 2e 36 37 20 53 35 24 31
>8ce9	31 34 32 00
.8ced					Line79:
>8ced	33 35 38 20 54 4f 20 28			.text '358 TO (/TO ENDIF * 814 Z4Q I7N0"LARJVW"V8E(G1 --8.45<WHILE$>LEFT$( /662 J2K7H8(',0
>8cf5	2f 54 4f 20 45 4e 44 49 46 20 2a 20 38 31 34 20
>8d05	5a 34 51 20 49 37 4e 30 22 4c 41 52 4a 56 57 22
>8d15	56 38 45 28 47 31 20 2d 2d 38 2e 34 35 3c 57 48
>8d25	49 4c 45 24 3e 4c 45 46 54 24 28 20 2f 36 36 32
>8d35	20 4a 32 4b 37 48 38 28 00
.8d3e					Line80:
>8d3e	32 33 30 20 20 55 34 24			.text '230  U4$ DIV 1134',0
>8d46	20 44 49 56 20 31 31 33 34 00
.8d50					Line81:
>8d50	36 35 34 20 22 49 22 2d			.text '654 "I"-4.24 8.16 +Y$ -7.17 W5L9P2$518 854 4.47< 438"WJIXL"A3 710<>',0
>8d58	34 2e 32 34 20 38 2e 31 36 20 2b 59 24 20 2d 37
>8d68	2e 31 37 20 57 35 4c 39 50 32 24 35 31 38 20 38
>8d78	35 34 20 34 2e 34 37 3c 20 34 33 38 22 57 4a 49
>8d88	58 4c 22 41 33 20 37 31 30 3c 3e 00
.8d94					Line82:
>8d94	33 37 34 20 20 37 37 34			.text '374  774 DATA 9.06 + H( <Q2D4<) *854+D5J5U8 534',0
>8d9c	20 44 41 54 41 20 39 2e 30 36 20 2b 20 48 28 20
>8dac	3c 51 32 44 34 3c 29 20 2a 38 35 34 2b 44 35 4a
>8dbc	35 55 38 20 35 33 34 00
.8dc4					Line83:
>8dc4	36 37 38 20 20 22 22 00			.text '678  ""',0
.8dcc					Line84:
>8dcc	33 35 30 20 53 54 52 24			.text '350 STR$( RIGHT$(S1P -7.2(INKEY$(<870"IKC"5.92 )0.65= XOR I0T0-3.2 * "H" 814-0.6"JEZQM" >> I0T0 "JZBT" "DV"',0
>8dd4	28 20 52 49 47 48 54 24 28 53 31 50 20 2d 37 2e
>8de4	32 28 49 4e 4b 45 59 24 28 3c 38 37 30 22 49 4b
>8df4	43 22 35 2e 39 32 20 29 30 2e 36 35 3d 20 58 4f
>8e04	52 20 49 30 54 30 2d 33 2e 32 20 2a 20 22 48 22
>8e14	20 38 31 34 2d 30 2e 36 22 4a 45 5a 51 4d 22 20
>8e24	3e 3e 20 49 30 54 30 20 22 4a 5a 42 54 22 20 22
>8e34	44 56 22 00
.8e38					Line85:
>8e38	31 31 30 32 20 2d 30 2e			.text '1102 -0.71 DIV- 366 CHR$("CXLD"606) -"CVDLUXY" N> G6W-0.92 838 -2.33"WVZPS""UCHGYQV"606<=422 "JFM""CNHNAML" F9N0S DEEK(/ CHR$("JFGRMM"',0
>8e40	37 31 20 44 49 56 2d 20 33 36 36 20 43 48 52 24
>8e50	28 22 43 58 4c 44 22 36 30 36 29 20 2d 22 43 56
>8e60	44 4c 55 58 59 22 20 4e 3e 20 47 36 57 2d 30 2e
>8e70	39 32 20 38 33 38 20 2d 32 2e 33 33 22 57 56 5a
>8e80	50 53 22 22 55 43 48 47 59 51 56 22 36 30 36 3c
>8e90	3d 34 32 32 20 22 4a 46 4d 22 22 43 4e 48 4e 41
>8ea0	4d 4c 22 20 46 39 4e 30 53 20 44 45 45 4b 28 2f
>8eb0	20 43 48 52 24 28 22 4a 46 47 52 4d 4d 22 00
.8ebf					Line86:
>8ebf	37 36 36 20 22 49 45 4e			.text '766 "IENB" "SDH"246 *F3I5L 486) "J"Y9O6J"Z@TTGDWJ"L9Q3 1054 B REPEAT M5D8U/"@R""HYYJZZAF"990 3.83"E" 814 Q/-9.34 0.94 0.19',0
>8ec7	42 22 20 22 53 44 48 22 32 34 36 20 2a 46 33 49
>8ed7	35 4c 20 34 38 36 29 20 22 4a 22 59 39 4f 36 4a
>8ee7	22 5a 40 54 54 47 44 57 4a 22 4c 39 51 33 20 31
>8ef7	30 35 34 20 42 20 52 45 50 45 41 54 20 4d 35 44
>8f07	38 55 2f 22 40 52 22 22 48 59 59 4a 5a 5a 41 46
>8f17	22 39 39 30 20 33 2e 38 33 22 45 22 20 38 31 34
>8f27	20 51 2f 2d 39 2e 33 34 20 30 2e 39 34 20 30 2e
>8f37	31 39 00
.8f3a					Line87:
>8f3a	34 30 36 20 22 52 59 57			.text '406 "RYW")D5J5U8 W6Z5="QIDNT"WEND-1.51',0
>8f42	22 29 44 35 4a 35 55 38 20 57 36 5a 35 3d 22 51
>8f52	49 44 4e 54 22 57 45 4e 44 2d 31 2e 35 31 00
.8f61					Line88:
>8f61	32 36 32 20 3d 22 42 58			.text '262 ="BXOIR"5.48 R7Z1G2(( 3.57 X4B2+ MID$( >)Z4Q 5.33> J2K7H8( > "IDBC"XOR WEND-3.46 C1P9V SGN("PZQTE@IX"',0
>8f69	4f 49 52 22 35 2e 34 38 20 52 37 5a 31 47 32 28
>8f79	28 20 33 2e 35 37 20 58 34 42 32 2b 20 4d 49 44
>8f89	24 28 20 3e 29 5a 34 51 20 35 2e 33 33 3e 20 4a
>8f99	32 4b 37 48 38 28 20 3e 20 22 49 44 42 43 22 58
>8fa9	4f 52 20 57 45 4e 44 2d 33 2e 34 36 20 43 31 50
>8fb9	39 56 20 53 47 4e 28 22 50 5a 51 54 45 40 49 58
>8fc9	22 00
.8fcb					Line89:
>8fcb	37 39 38 20 20 2d 20 22			.text '798  - "NTM"1046 478 <574 W$DIV>822"KMPCPVXN"',0
>8fd3	4e 54 4d 22 31 30 34 36 20 34 37 38 20 3c 35 37
>8fe3	34 20 57 24 44 49 56 3e 38 32 32 22 4b 4d 50 43
>8ff3	50 56 58 4e 22 00
.8ff9					Line90:
>8ff9	36 35 34 20 20 28 54 32			.text '654  (T2V2T6"" <((/EVENT( 222"OYGLVIDM"* 0.31 1142<=-2.17"TZBU" "UWDMXT"',0
>9001	56 32 54 36 22 22 20 3c 28 28 2f 45 56 45 4e 54
>9011	28 20 32 32 32 22 4f 59 47 4c 56 49 44 4d 22 2a
>9021	20 30 2e 33 31 20 31 31 34 32 3c 3d 2d 32 2e 31
>9031	37 22 54 5a 42 55 22 20 22 55 57 44 4d 58 54 22
>9041	00
.9042					Line91:
>9042	34 39 34 00				.text '494',0
.9046					Line92:
>9046	34 34 36 20 38 35 34 2f			.text '446 854/814',0
>904e	38 31 34 00
.9052					Line93:
>9052	37 33 34 20 48 45 58 24			.text '734 HEX$(1.5 9.51*+B "MBXNRS""LM@UEDPV"-9.85 7.31 ASC(8.43)',0
>905a	28 31 2e 35 20 39 2e 35 31 2a 2b 42 20 22 4d 42
>906a	58 4e 52 53 22 22 4c 4d 40 55 45 44 50 56 22 2d
>907a	39 2e 38 35 20 37 2e 33 31 20 41 53 43 28 38 2e
>908a	34 33 29 00
.908e					Line94:
>908e	32 32 32 20 20 4f 37 20			.text '222  O7 4.08 3.5"DANQFRX" /-5.84+=',0
>9096	34 2e 30 38 20 33 2e 35 22 44 41 4e 51 46 52 58
>90a6	22 20 2f 2d 35 2e 38 34 2b 3d 00
.90b1					Line95:
>90b1	39 31 38 20 59 39 4f 36			.text '918 Y9O6J T 758 894 ="C@"-9.87 510 3.7 838 910 766',0
>90b9	4a 20 54 20 37 35 38 20 38 39 34 20 3d 22 43 40
>90c9	22 2d 39 2e 38 37 20 35 31 30 20 33 2e 37 20 38
>90d9	33 38 20 39 31 30 20 37 36 36 00
.90e4					Line96:
>90e4	31 30 37 30 00				.text '1070',0
.90e9					Line97:
>90e9	36 35 34 00				.text '654',0
.90ed					Line98:
>90ed	32 36 32 20 20 33 2e 33			.text '262  3.31/"" 5.55 766 262 790"" W5L9P2$INT(B8X0$ THEN 254 Q0O4A9$WHILE T4S1',0
>90f5	31 2f 22 22 20 35 2e 35 35 20 37 36 36 20 32 36
>9105	32 20 37 39 30 22 22 20 57 35 4c 39 50 32 24 49
>9115	4e 54 28 42 38 58 30 24 20 54 48 45 4e 20 32 35
>9125	34 20 51 30 4f 34 41 39 24 57 48 49 4c 45 20 54
>9135	34 53 31 00
.9139					Line99:
>9139	33 39 30 20 2d 59 34 28			.text '390 -Y4(+)686 N 1054-7.19-9.13 582-PEEK(-0.72""(INKEY$(E A3 ""1030 T4S1 8.07 214+ -6.24*I',0
>9141	2b 29 36 38 36 20 4e 20 31 30 35 34 2d 37 2e 31
>9151	39 2d 39 2e 31 33 20 35 38 32 2d 50 45 45 4b 28
>9161	2d 30 2e 37 32 22 22 28 49 4e 4b 45 59 24 28 45
>9171	20 41 33 20 22 22 31 30 33 30 20 54 34 53 31 20
>9181	38 2e 30 37 20 32 31 34 2b 20 2d 36 2e 32 34 2a
>9191	49 00
.9193					Line100:
>9193	37 34 32 20 38 39 34 20			.text '742 894 >"MNLKTV" >*"GRDJYA"<(Y$ M8O 8.02"NG"I4I9( (Q FOR 5.11 >I7N0"SLAHB" -0.75 V8E(E6M1I1 742-6.13 5.82 V3S5J5 =',0
>919b	3e 22 4d 4e 4c 4b 54 56 22 20 3e 2a 22 47 52 44
>91ab	4a 59 41 22 3c 28 59 24 20 4d 38 4f 20 38 2e 30
>91bb	32 22 4e 47 22 49 34 49 39 28 20 28 51 20 46 4f
>91cb	52 20 35 2e 31 31 20 3e 49 37 4e 30 22 53 4c 41
>91db	48 42 22 20 2d 30 2e 37 35 20 56 38 45 28 45 36
>91eb	4d 31 49 31 20 37 34 32 2d 36 2e 31 33 20 35 2e
>91fb	38 32 20 56 33 53 35 4a 35 20 3d 00
.9207					Line101:
>9207	33 38 32 00				.text '382',0
.920b					Line102:
>920b	35 38 32 20 20 36 33 38			.text '582  638"UPP" ABS(1.05 1102-0.8',0
>9213	22 55 50 50 22 20 41 42 53 28 31 2e 30 35 20 31
>9223	31 30 32 2d 30 2e 38 00
.922b					Line103:
>922b	36 31 34 20 57 36 20 4d			.text '614 W6 MOD-7.43 558 278"DXNVX"430 G 1142<4.03+F0D9X6',0
>9233	4f 44 2d 37 2e 34 33 20 35 35 38 20 32 37 38 22
>9243	44 58 4e 56 58 22 34 33 30 20 47 20 31 31 34 32
>9253	3c 34 2e 30 33 2b 46 30 44 39 58 36 00
.9260					Line104:
>9260	31 30 31 34 20 57 36 20			.text '1014 W6 FOR G1',0
>9268	46 4f 52 20 47 31 00
.926f					Line105:
>926f	38 33 38 20 22 59 46 47			.text '838 "YFGHHNT">EVENT( -0.68 -4.0',0
>9277	48 48 4e 54 22 3e 45 56 45 4e 54 28 20 2d 30 2e
>9287	36 38 20 2d 34 2e 30 00
.928f					Line106:
>928f	31 30 30 36 20 22 53 4f			.text '1006 "SOZZ"K5K1 638 D4E1T7 M6 "QRVG" "HU""FRWO" "W@TEV""B""J"*(SQR((742$8.23 1022"QL@HHT"-1.19',0
>9297	5a 5a 22 4b 35 4b 31 20 36 33 38 20 44 34 45 31
>92a7	54 37 20 4d 36 20 22 51 52 56 47 22 20 22 48 55
>92b7	22 22 46 52 57 4f 22 20 22 57 40 54 45 56 22 22
>92c7	42 22 22 4a 22 2a 28 53 51 52 28 28 37 34 32 24
>92d7	38 2e 32 33 20 31 30 32 32 22 51 4c 40 48 48 54
>92e7	22 2d 31 2e 31 39 00
.92ee					Line107:
>92ee	39 31 38 20 3c 3d 00			.text '918 <=',0
.92f5					Line108:
>92f5	37 36 36 20 20 22 4c 49			.text '766  "LIMTHWZ"-7.52 Q8C7"YVCPFAM"2.03 "@M" G3X4L4$"JCUBIHA" <206 Q2D4',0
>92fd	4d 54 48 57 5a 22 2d 37 2e 35 32 20 51 38 43 37
>930d	22 59 56 43 50 46 41 4d 22 32 2e 30 33 20 22 40
>931d	4d 22 20 47 33 58 34 4c 34 24 22 4a 43 55 42 49
>932d	48 41 22 20 3c 32 30 36 20 51 32 44 34 00
.933b					Line109:
>933b	32 31 34 20 2b 34 37 30			.text '214 +470 1134 U4V4Z8$"DBAO" FRAC(RIGHT$( 574 ELSE 0.69 ABS(-4.16',0
>9343	20 31 31 33 34 20 55 34 56 34 5a 38 24 22 44 42
>9353	41 4f 22 20 46 52 41 43 28 52 49 47 48 54 24 28
>9363	20 35 37 34 20 45 4c 53 45 20 30 2e 36 39 20 41
>9373	42 53 28 2d 34 2e 31 36 00
.937c					Line110:
>937c	36 32 32 20 20 34 39 34			.text '622  494>>9.37 870 /POKE) *',0
>9384	3e 3e 39 2e 33 37 20 38 37 30 20 2f 50 4f 4b 45
>9394	29 20 2a 00
.9398					Line111:
>9398	38 35 34 20 29 20 47 31			.text '854 ) G1 MOD MID$("GC"-3.11 E4V$878 X4B2 ABS(366 422 "WJRCKBG" PROC "LZSGSZU"=>670 "WRWA@CS"FOR "MPFIY" PEEK(2.2',0
>93a0	20 4d 4f 44 20 4d 49 44 24 28 22 47 43 22 2d 33
>93b0	2e 31 31 20 45 34 56 24 38 37 38 20 58 34 42 32
>93c0	20 41 42 53 28 33 36 36 20 34 32 32 20 22 57 4a
>93d0	52 43 4b 42 47 22 20 50 52 4f 43 20 22 4c 5a 53
>93e0	47 53 5a 55 22 3d 3e 36 37 30 20 22 57 52 57 41
>93f0	40 43 53 22 46 4f 52 20 22 4d 50 46 49 59 22 20
>9400	50 45 45 4b 28 32 2e 32 00
.9409					Line112:
>9409	39 34 32 00				.text '942',0
.940d					Line113:
>940d	33 35 38 20 4f 37 20 37			.text '358 O7 742 RAND( I 862 "XZ""N" + F STEP "" ""438 -7.23 5.68 W6Z5 "Y"990 "WDREJMY"8.45 1014',0
>9415	34 32 20 52 41 4e 44 28 20 49 20 38 36 32 20 22
>9425	58 5a 22 22 4e 22 20 2b 20 46 20 53 54 45 50 20
>9435	22 22 20 22 22 34 33 38 20 2d 37 2e 32 33 20 35
>9445	2e 36 38 20 57 36 5a 35 20 22 59 22 39 39 30 20
>9455	22 57 44 52 45 4a 4d 59 22 38 2e 34 35 20 31 30
>9465	31 34 00
.9468					Line114:
>9468	34 37 30 20 2d 33 2e 39			.text '470 -3.99 0.52 486 326 ( 5.87"GH"WHILE "CKYTNRP" G3X4L4$3.57"FB"3.72 5.97 "AARYQ"-8.96 D2N4"R"(*1086"Z"=206 LEFT$( "LJFC"',0
>9470	39 20 30 2e 35 32 20 34 38 36 20 33 32 36 20 28
>9480	20 35 2e 38 37 22 47 48 22 57 48 49 4c 45 20 22
>9490	43 4b 59 54 4e 52 50 22 20 47 33 58 34 4c 34 24
>94a0	33 2e 35 37 22 46 42 22 33 2e 37 32 20 35 2e 39
>94b0	37 20 22 41 41 52 59 51 22 2d 38 2e 39 36 20 44
>94c0	32 4e 34 22 52 22 28 2a 31 30 38 36 22 5a 22 3d
>94d0	32 30 36 20 4c 45 46 54 24 28 20 22 4c 4a 46 43
>94e0	22 00
.94e2					Line115:
>94e2	32 37 30 00				.text '270',0
.94e6					Line116:
>94e6	39 38 32 20 22 43 46 55			.text '982 "CFUOUUPC"(422 854 918 5.28 7.64"GL"EVENT(-5.54"OJLU">710 B B1B5$ 814 2.86"NRHBEGP"214=630(',0
>94ee	4f 55 55 50 43 22 28 34 32 32 20 38 35 34 20 39
>94fe	31 38 20 35 2e 32 38 20 37 2e 36 34 22 47 4c 22
>950e	45 56 45 4e 54 28 2d 35 2e 35 34 22 4f 4a 4c 55
>951e	22 3e 37 31 30 20 42 20 42 31 42 35 24 20 38 31
>952e	34 20 32 2e 38 36 22 4e 52 48 42 45 47 50 22 32
>953e	31 34 3d 36 33 30 28 00
.9546					Line117:
>9546	35 39 30 00				.text '590',0
.954a					Line118:
>954a	31 31 30 32 20 35 36 36			.text '1102 566 238 422 1030 POKE 3.01 > W7G6P"DBUQ" 1014 0.81<( ( 430 /(=',0
>9552	20 32 33 38 20 34 32 32 20 31 30 33 30 20 50 4f
>9562	4b 45 20 33 2e 30 31 20 3e 20 57 37 47 36 50 22
>9572	44 42 55 51 22 20 31 30 31 34 20 30 2e 38 31 3c
>9582	28 20 28 20 34 33 30 20 2f 28 3d 00
.958e					Line119:
>958e	37 35 30 20 20 58 4f 52			.text '750  XOR$ )"XUR"-8.43 "CJI"2.59-6.97 -6.42"NSLJB"W$)+B1N7 -6.04 502',0
>9596	24 20 29 22 58 55 52 22 2d 38 2e 34 33 20 22 43
>95a6	4a 49 22 32 2e 35 39 2d 36 2e 39 37 20 2d 36 2e
>95b6	34 32 22 4e 53 4c 4a 42 22 57 24 29 2b 42 31 4e
>95c6	37 20 2d 36 2e 30 34 20 35 30 32 00

;******  Return to file: src/program/testing/testing.asmx

.95d2					TestCode:
.95d2	20 91 1f	jsr $1f91			jsr 	PGMNewProgram
.95d5	9c ff ff	stz $ffff			stz 	$FFFF

;******  Processing file: src/program/testing/testrun.incx

.95d8	a2 00		ldx #$00		ldx #Line0 & $FF
.95da	a0 78		ldy #$78		ldy #Line0 >> 8
.95dc	20 23 99	jsr $9923		jsr TOKOneLine
.95df	a2 8d		ldx #$8d		ldx #Line1 & $FF
.95e1	a0 78		ldy #$78		ldy #Line1 >> 8
.95e3	20 23 99	jsr $9923		jsr TOKOneLine
.95e6	a2 c8		ldx #$c8		ldx #Line2 & $FF
.95e8	a0 78		ldy #$78		ldy #Line2 >> 8
.95ea	20 23 99	jsr $9923		jsr TOKOneLine
.95ed	a2 47		ldx #$47		ldx #Line3 & $FF
.95ef	a0 79		ldy #$79		ldy #Line3 >> 8
.95f1	20 23 99	jsr $9923		jsr TOKOneLine
.95f4	a2 4b		ldx #$4b		ldx #Line4 & $FF
.95f6	a0 79		ldy #$79		ldy #Line4 >> 8
.95f8	20 23 99	jsr $9923		jsr TOKOneLine
.95fb	a2 88		ldx #$88		ldx #Line5 & $FF
.95fd	a0 79		ldy #$79		ldy #Line5 >> 8
.95ff	20 23 99	jsr $9923		jsr TOKOneLine
.9602	a2 f6		ldx #$f6		ldx #Line6 & $FF
.9604	a0 79		ldy #$79		ldy #Line6 >> 8
.9606	20 23 99	jsr $9923		jsr TOKOneLine
.9609	a2 46		ldx #$46		ldx #Line7 & $FF
.960b	a0 7a		ldy #$7a		ldy #Line7 >> 8
.960d	20 23 99	jsr $9923		jsr TOKOneLine
.9610	a2 a3		ldx #$a3		ldx #Line8 & $FF
.9612	a0 7a		ldy #$7a		ldy #Line8 >> 8
.9614	20 23 99	jsr $9923		jsr TOKOneLine
.9617	a2 0d		ldx #$0d		ldx #Line9 & $FF
.9619	a0 7b		ldy #$7b		ldy #Line9 >> 8
.961b	20 23 99	jsr $9923		jsr TOKOneLine
.961e	a2 4e		ldx #$4e		ldx #Line10 & $FF
.9620	a0 7b		ldy #$7b		ldy #Line10 >> 8
.9622	20 23 99	jsr $9923		jsr TOKOneLine
.9625	a2 52		ldx #$52		ldx #Line11 & $FF
.9627	a0 7b		ldy #$7b		ldy #Line11 >> 8
.9629	20 23 99	jsr $9923		jsr TOKOneLine
.962c	a2 6b		ldx #$6b		ldx #Line12 & $FF
.962e	a0 7b		ldy #$7b		ldy #Line12 >> 8
.9630	20 23 99	jsr $9923		jsr TOKOneLine
.9633	a2 c2		ldx #$c2		ldx #Line13 & $FF
.9635	a0 7b		ldy #$7b		ldy #Line13 >> 8
.9637	20 23 99	jsr $9923		jsr TOKOneLine
.963a	a2 cb		ldx #$cb		ldx #Line14 & $FF
.963c	a0 7b		ldy #$7b		ldy #Line14 >> 8
.963e	20 23 99	jsr $9923		jsr TOKOneLine
.9641	a2 1c		ldx #$1c		ldx #Line15 & $FF
.9643	a0 7c		ldy #$7c		ldy #Line15 >> 8
.9645	20 23 99	jsr $9923		jsr TOKOneLine
.9648	a2 64		ldx #$64		ldx #Line16 & $FF
.964a	a0 7c		ldy #$7c		ldy #Line16 >> 8
.964c	20 23 99	jsr $9923		jsr TOKOneLine
.964f	a2 95		ldx #$95		ldx #Line17 & $FF
.9651	a0 7c		ldy #$7c		ldy #Line17 >> 8
.9653	20 23 99	jsr $9923		jsr TOKOneLine
.9656	a2 b5		ldx #$b5		ldx #Line18 & $FF
.9658	a0 7c		ldy #$7c		ldy #Line18 >> 8
.965a	20 23 99	jsr $9923		jsr TOKOneLine
.965d	a2 31		ldx #$31		ldx #Line19 & $FF
.965f	a0 7d		ldy #$7d		ldy #Line19 >> 8
.9661	20 23 99	jsr $9923		jsr TOKOneLine
.9664	a2 88		ldx #$88		ldx #Line20 & $FF
.9666	a0 7d		ldy #$7d		ldy #Line20 >> 8
.9668	20 23 99	jsr $9923		jsr TOKOneLine
.966b	a2 b6		ldx #$b6		ldx #Line21 & $FF
.966d	a0 7d		ldy #$7d		ldy #Line21 >> 8
.966f	20 23 99	jsr $9923		jsr TOKOneLine
.9672	a2 c9		ldx #$c9		ldx #Line22 & $FF
.9674	a0 7d		ldy #$7d		ldy #Line22 >> 8
.9676	20 23 99	jsr $9923		jsr TOKOneLine
.9679	a2 55		ldx #$55		ldx #Line23 & $FF
.967b	a0 7e		ldy #$7e		ldy #Line23 >> 8
.967d	20 23 99	jsr $9923		jsr TOKOneLine
.9680	a2 65		ldx #$65		ldx #Line24 & $FF
.9682	a0 7e		ldy #$7e		ldy #Line24 >> 8
.9684	20 23 99	jsr $9923		jsr TOKOneLine
.9687	a2 a6		ldx #$a6		ldx #Line25 & $FF
.9689	a0 7e		ldy #$7e		ldy #Line25 >> 8
.968b	20 23 99	jsr $9923		jsr TOKOneLine
.968e	a2 aa		ldx #$aa		ldx #Line26 & $FF
.9690	a0 7e		ldy #$7e		ldy #Line26 >> 8
.9692	20 23 99	jsr $9923		jsr TOKOneLine
.9695	a2 b3		ldx #$b3		ldx #Line27 & $FF
.9697	a0 7e		ldy #$7e		ldy #Line27 >> 8
.9699	20 23 99	jsr $9923		jsr TOKOneLine
.969c	a2 26		ldx #$26		ldx #Line28 & $FF
.969e	a0 7f		ldy #$7f		ldy #Line28 >> 8
.96a0	20 23 99	jsr $9923		jsr TOKOneLine
.96a3	a2 81		ldx #$81		ldx #Line29 & $FF
.96a5	a0 7f		ldy #$7f		ldy #Line29 >> 8
.96a7	20 23 99	jsr $9923		jsr TOKOneLine
.96aa	a2 dc		ldx #$dc		ldx #Line30 & $FF
.96ac	a0 7f		ldy #$7f		ldy #Line30 >> 8
.96ae	20 23 99	jsr $9923		jsr TOKOneLine
.96b1	a2 3d		ldx #$3d		ldx #Line31 & $FF
.96b3	a0 80		ldy #$80		ldy #Line31 >> 8
.96b5	20 23 99	jsr $9923		jsr TOKOneLine
.96b8	a2 7c		ldx #$7c		ldx #Line32 & $FF
.96ba	a0 80		ldy #$80		ldy #Line32 >> 8
.96bc	20 23 99	jsr $9923		jsr TOKOneLine
.96bf	a2 a9		ldx #$a9		ldx #Line33 & $FF
.96c1	a0 80		ldy #$80		ldy #Line33 >> 8
.96c3	20 23 99	jsr $9923		jsr TOKOneLine
.96c6	a2 26		ldx #$26		ldx #Line34 & $FF
.96c8	a0 81		ldy #$81		ldy #Line34 >> 8
.96ca	20 23 99	jsr $9923		jsr TOKOneLine
.96cd	a2 6f		ldx #$6f		ldx #Line35 & $FF
.96cf	a0 81		ldy #$81		ldy #Line35 >> 8
.96d1	20 23 99	jsr $9923		jsr TOKOneLine
.96d4	a2 ef		ldx #$ef		ldx #Line36 & $FF
.96d6	a0 81		ldy #$81		ldy #Line36 >> 8
.96d8	20 23 99	jsr $9923		jsr TOKOneLine
.96db	a2 31		ldx #$31		ldx #Line37 & $FF
.96dd	a0 82		ldy #$82		ldy #Line37 >> 8
.96df	20 23 99	jsr $9923		jsr TOKOneLine
.96e2	a2 b0		ldx #$b0		ldx #Line38 & $FF
.96e4	a0 82		ldy #$82		ldy #Line38 >> 8
.96e6	20 23 99	jsr $9923		jsr TOKOneLine
.96e9	a2 f7		ldx #$f7		ldx #Line39 & $FF
.96eb	a0 82		ldy #$82		ldy #Line39 >> 8
.96ed	20 23 99	jsr $9923		jsr TOKOneLine
.96f0	a2 76		ldx #$76		ldx #Line40 & $FF
.96f2	a0 83		ldy #$83		ldy #Line40 >> 8
.96f4	20 23 99	jsr $9923		jsr TOKOneLine
.96f7	a2 8f		ldx #$8f		ldx #Line41 & $FF
.96f9	a0 83		ldy #$83		ldy #Line41 >> 8
.96fb	20 23 99	jsr $9923		jsr TOKOneLine
.96fe	a2 9f		ldx #$9f		ldx #Line42 & $FF
.9700	a0 83		ldy #$83		ldy #Line42 >> 8
.9702	20 23 99	jsr $9923		jsr TOKOneLine
.9705	a2 f3		ldx #$f3		ldx #Line43 & $FF
.9707	a0 83		ldy #$83		ldy #Line43 >> 8
.9709	20 23 99	jsr $9923		jsr TOKOneLine
.970c	a2 59		ldx #$59		ldx #Line44 & $FF
.970e	a0 84		ldy #$84		ldy #Line44 >> 8
.9710	20 23 99	jsr $9923		jsr TOKOneLine
.9713	a2 ba		ldx #$ba		ldx #Line45 & $FF
.9715	a0 84		ldy #$84		ldy #Line45 >> 8
.9717	20 23 99	jsr $9923		jsr TOKOneLine
.971a	a2 0a		ldx #$0a		ldx #Line46 & $FF
.971c	a0 85		ldy #$85		ldy #Line46 >> 8
.971e	20 23 99	jsr $9923		jsr TOKOneLine
.9721	a2 89		ldx #$89		ldx #Line47 & $FF
.9723	a0 85		ldy #$85		ldy #Line47 >> 8
.9725	20 23 99	jsr $9923		jsr TOKOneLine
.9728	a2 fa		ldx #$fa		ldx #Line48 & $FF
.972a	a0 85		ldy #$85		ldy #Line48 >> 8
.972c	20 23 99	jsr $9923		jsr TOKOneLine
.972f	a2 26		ldx #$26		ldx #Line49 & $FF
.9731	a0 86		ldy #$86		ldy #Line49 >> 8
.9733	20 23 99	jsr $9923		jsr TOKOneLine
.9736	a2 92		ldx #$92		ldx #Line50 & $FF
.9738	a0 86		ldy #$86		ldy #Line50 >> 8
.973a	20 23 99	jsr $9923		jsr TOKOneLine
.973d	a2 cb		ldx #$cb		ldx #Line51 & $FF
.973f	a0 86		ldy #$86		ldy #Line51 >> 8
.9741	20 23 99	jsr $9923		jsr TOKOneLine
.9744	a2 d3		ldx #$d3		ldx #Line52 & $FF
.9746	a0 86		ldy #$86		ldy #Line52 >> 8
.9748	20 23 99	jsr $9923		jsr TOKOneLine
.974b	a2 1b		ldx #$1b		ldx #Line53 & $FF
.974d	a0 87		ldy #$87		ldy #Line53 >> 8
.974f	20 23 99	jsr $9923		jsr TOKOneLine
.9752	a2 93		ldx #$93		ldx #Line54 & $FF
.9754	a0 87		ldy #$87		ldy #Line54 >> 8
.9756	20 23 99	jsr $9923		jsr TOKOneLine
.9759	a2 b4		ldx #$b4		ldx #Line55 & $FF
.975b	a0 87		ldy #$87		ldy #Line55 >> 8
.975d	20 23 99	jsr $9923		jsr TOKOneLine
.9760	a2 b8		ldx #$b8		ldx #Line56 & $FF
.9762	a0 87		ldy #$87		ldy #Line56 >> 8
.9764	20 23 99	jsr $9923		jsr TOKOneLine
.9767	a2 db		ldx #$db		ldx #Line57 & $FF
.9769	a0 87		ldy #$87		ldy #Line57 >> 8
.976b	20 23 99	jsr $9923		jsr TOKOneLine
.976e	a2 26		ldx #$26		ldx #Line58 & $FF
.9770	a0 88		ldy #$88		ldy #Line58 >> 8
.9772	20 23 99	jsr $9923		jsr TOKOneLine
.9775	a2 96		ldx #$96		ldx #Line59 & $FF
.9777	a0 88		ldy #$88		ldy #Line59 >> 8
.9779	20 23 99	jsr $9923		jsr TOKOneLine
.977c	a2 e4		ldx #$e4		ldx #Line60 & $FF
.977e	a0 88		ldy #$88		ldy #Line60 >> 8
.9780	20 23 99	jsr $9923		jsr TOKOneLine
.9783	a2 e8		ldx #$e8		ldx #Line61 & $FF
.9785	a0 88		ldy #$88		ldy #Line61 >> 8
.9787	20 23 99	jsr $9923		jsr TOKOneLine
.978a	a2 33		ldx #$33		ldx #Line62 & $FF
.978c	a0 89		ldy #$89		ldy #Line62 >> 8
.978e	20 23 99	jsr $9923		jsr TOKOneLine
.9791	a2 96		ldx #$96		ldx #Line63 & $FF
.9793	a0 89		ldy #$89		ldy #Line63 >> 8
.9795	20 23 99	jsr $9923		jsr TOKOneLine
.9798	a2 9a		ldx #$9a		ldx #Line64 & $FF
.979a	a0 89		ldy #$89		ldy #Line64 >> 8
.979c	20 23 99	jsr $9923		jsr TOKOneLine
.979f	a2 a8		ldx #$a8		ldx #Line65 & $FF
.97a1	a0 89		ldy #$89		ldy #Line65 >> 8
.97a3	20 23 99	jsr $9923		jsr TOKOneLine
.97a6	a2 f6		ldx #$f6		ldx #Line66 & $FF
.97a8	a0 89		ldy #$89		ldy #Line66 >> 8
.97aa	20 23 99	jsr $9923		jsr TOKOneLine
.97ad	a2 6a		ldx #$6a		ldx #Line67 & $FF
.97af	a0 8a		ldy #$8a		ldy #Line67 >> 8
.97b1	20 23 99	jsr $9923		jsr TOKOneLine
.97b4	a2 6e		ldx #$6e		ldx #Line68 & $FF
.97b6	a0 8a		ldy #$8a		ldy #Line68 >> 8
.97b8	20 23 99	jsr $9923		jsr TOKOneLine
.97bb	a2 cc		ldx #$cc		ldx #Line69 & $FF
.97bd	a0 8a		ldy #$8a		ldy #Line69 >> 8
.97bf	20 23 99	jsr $9923		jsr TOKOneLine
.97c2	a2 06		ldx #$06		ldx #Line70 & $FF
.97c4	a0 8b		ldy #$8b		ldy #Line70 >> 8
.97c6	20 23 99	jsr $9923		jsr TOKOneLine
.97c9	a2 5d		ldx #$5d		ldx #Line71 & $FF
.97cb	a0 8b		ldy #$8b		ldy #Line71 >> 8
.97cd	20 23 99	jsr $9923		jsr TOKOneLine
.97d0	a2 81		ldx #$81		ldx #Line72 & $FF
.97d2	a0 8b		ldy #$8b		ldy #Line72 >> 8
.97d4	20 23 99	jsr $9923		jsr TOKOneLine
.97d7	a2 85		ldx #$85		ldx #Line73 & $FF
.97d9	a0 8b		ldy #$8b		ldy #Line73 >> 8
.97db	20 23 99	jsr $9923		jsr TOKOneLine
.97de	a2 c2		ldx #$c2		ldx #Line74 & $FF
.97e0	a0 8b		ldy #$8b		ldy #Line74 >> 8
.97e2	20 23 99	jsr $9923		jsr TOKOneLine
.97e5	a2 2d		ldx #$2d		ldx #Line75 & $FF
.97e7	a0 8c		ldy #$8c		ldy #Line75 >> 8
.97e9	20 23 99	jsr $9923		jsr TOKOneLine
.97ec	a2 4b		ldx #$4b		ldx #Line76 & $FF
.97ee	a0 8c		ldy #$8c		ldy #Line76 >> 8
.97f0	20 23 99	jsr $9923		jsr TOKOneLine
.97f3	a2 cd		ldx #$cd		ldx #Line77 & $FF
.97f5	a0 8c		ldy #$8c		ldy #Line77 >> 8
.97f7	20 23 99	jsr $9923		jsr TOKOneLine
.97fa	a2 d1		ldx #$d1		ldx #Line78 & $FF
.97fc	a0 8c		ldy #$8c		ldy #Line78 >> 8
.97fe	20 23 99	jsr $9923		jsr TOKOneLine
.9801	a2 ed		ldx #$ed		ldx #Line79 & $FF
.9803	a0 8c		ldy #$8c		ldy #Line79 >> 8
.9805	20 23 99	jsr $9923		jsr TOKOneLine
.9808	a2 3e		ldx #$3e		ldx #Line80 & $FF
.980a	a0 8d		ldy #$8d		ldy #Line80 >> 8
.980c	20 23 99	jsr $9923		jsr TOKOneLine
.980f	a2 50		ldx #$50		ldx #Line81 & $FF
.9811	a0 8d		ldy #$8d		ldy #Line81 >> 8
.9813	20 23 99	jsr $9923		jsr TOKOneLine
.9816	a2 94		ldx #$94		ldx #Line82 & $FF
.9818	a0 8d		ldy #$8d		ldy #Line82 >> 8
.981a	20 23 99	jsr $9923		jsr TOKOneLine
.981d	a2 c4		ldx #$c4		ldx #Line83 & $FF
.981f	a0 8d		ldy #$8d		ldy #Line83 >> 8
.9821	20 23 99	jsr $9923		jsr TOKOneLine
.9824	a2 cc		ldx #$cc		ldx #Line84 & $FF
.9826	a0 8d		ldy #$8d		ldy #Line84 >> 8
.9828	20 23 99	jsr $9923		jsr TOKOneLine
.982b	a2 38		ldx #$38		ldx #Line85 & $FF
.982d	a0 8e		ldy #$8e		ldy #Line85 >> 8
.982f	20 23 99	jsr $9923		jsr TOKOneLine
.9832	a2 bf		ldx #$bf		ldx #Line86 & $FF
.9834	a0 8e		ldy #$8e		ldy #Line86 >> 8
.9836	20 23 99	jsr $9923		jsr TOKOneLine
.9839	a2 3a		ldx #$3a		ldx #Line87 & $FF
.983b	a0 8f		ldy #$8f		ldy #Line87 >> 8
.983d	20 23 99	jsr $9923		jsr TOKOneLine
.9840	a2 61		ldx #$61		ldx #Line88 & $FF
.9842	a0 8f		ldy #$8f		ldy #Line88 >> 8
.9844	20 23 99	jsr $9923		jsr TOKOneLine
.9847	a2 cb		ldx #$cb		ldx #Line89 & $FF
.9849	a0 8f		ldy #$8f		ldy #Line89 >> 8
.984b	20 23 99	jsr $9923		jsr TOKOneLine
.984e	a2 f9		ldx #$f9		ldx #Line90 & $FF
.9850	a0 8f		ldy #$8f		ldy #Line90 >> 8
.9852	20 23 99	jsr $9923		jsr TOKOneLine
.9855	a2 42		ldx #$42		ldx #Line91 & $FF
.9857	a0 90		ldy #$90		ldy #Line91 >> 8
.9859	20 23 99	jsr $9923		jsr TOKOneLine
.985c	a2 46		ldx #$46		ldx #Line92 & $FF
.985e	a0 90		ldy #$90		ldy #Line92 >> 8
.9860	20 23 99	jsr $9923		jsr TOKOneLine
.9863	a2 52		ldx #$52		ldx #Line93 & $FF
.9865	a0 90		ldy #$90		ldy #Line93 >> 8
.9867	20 23 99	jsr $9923		jsr TOKOneLine
.986a	a2 8e		ldx #$8e		ldx #Line94 & $FF
.986c	a0 90		ldy #$90		ldy #Line94 >> 8
.986e	20 23 99	jsr $9923		jsr TOKOneLine
.9871	a2 b1		ldx #$b1		ldx #Line95 & $FF
.9873	a0 90		ldy #$90		ldy #Line95 >> 8
.9875	20 23 99	jsr $9923		jsr TOKOneLine
.9878	a2 e4		ldx #$e4		ldx #Line96 & $FF
.987a	a0 90		ldy #$90		ldy #Line96 >> 8
.987c	20 23 99	jsr $9923		jsr TOKOneLine
.987f	a2 e9		ldx #$e9		ldx #Line97 & $FF
.9881	a0 90		ldy #$90		ldy #Line97 >> 8
.9883	20 23 99	jsr $9923		jsr TOKOneLine
.9886	a2 ed		ldx #$ed		ldx #Line98 & $FF
.9888	a0 90		ldy #$90		ldy #Line98 >> 8
.988a	20 23 99	jsr $9923		jsr TOKOneLine
.988d	a2 39		ldx #$39		ldx #Line99 & $FF
.988f	a0 91		ldy #$91		ldy #Line99 >> 8
.9891	20 23 99	jsr $9923		jsr TOKOneLine
.9894	a2 93		ldx #$93		ldx #Line100 & $FF
.9896	a0 91		ldy #$91		ldy #Line100 >> 8
.9898	20 23 99	jsr $9923		jsr TOKOneLine
.989b	a2 07		ldx #$07		ldx #Line101 & $FF
.989d	a0 92		ldy #$92		ldy #Line101 >> 8
.989f	20 23 99	jsr $9923		jsr TOKOneLine
.98a2	a2 0b		ldx #$0b		ldx #Line102 & $FF
.98a4	a0 92		ldy #$92		ldy #Line102 >> 8
.98a6	20 23 99	jsr $9923		jsr TOKOneLine
.98a9	a2 2b		ldx #$2b		ldx #Line103 & $FF
.98ab	a0 92		ldy #$92		ldy #Line103 >> 8
.98ad	20 23 99	jsr $9923		jsr TOKOneLine
.98b0	a2 60		ldx #$60		ldx #Line104 & $FF
.98b2	a0 92		ldy #$92		ldy #Line104 >> 8
.98b4	20 23 99	jsr $9923		jsr TOKOneLine
.98b7	a2 6f		ldx #$6f		ldx #Line105 & $FF
.98b9	a0 92		ldy #$92		ldy #Line105 >> 8
.98bb	20 23 99	jsr $9923		jsr TOKOneLine
.98be	a2 8f		ldx #$8f		ldx #Line106 & $FF
.98c0	a0 92		ldy #$92		ldy #Line106 >> 8
.98c2	20 23 99	jsr $9923		jsr TOKOneLine
.98c5	a2 ee		ldx #$ee		ldx #Line107 & $FF
.98c7	a0 92		ldy #$92		ldy #Line107 >> 8
.98c9	20 23 99	jsr $9923		jsr TOKOneLine
.98cc	a2 f5		ldx #$f5		ldx #Line108 & $FF
.98ce	a0 92		ldy #$92		ldy #Line108 >> 8
.98d0	20 23 99	jsr $9923		jsr TOKOneLine
.98d3	a2 3b		ldx #$3b		ldx #Line109 & $FF
.98d5	a0 93		ldy #$93		ldy #Line109 >> 8
.98d7	20 23 99	jsr $9923		jsr TOKOneLine
.98da	a2 7c		ldx #$7c		ldx #Line110 & $FF
.98dc	a0 93		ldy #$93		ldy #Line110 >> 8
.98de	20 23 99	jsr $9923		jsr TOKOneLine
.98e1	a2 98		ldx #$98		ldx #Line111 & $FF
.98e3	a0 93		ldy #$93		ldy #Line111 >> 8
.98e5	20 23 99	jsr $9923		jsr TOKOneLine
.98e8	a2 09		ldx #$09		ldx #Line112 & $FF
.98ea	a0 94		ldy #$94		ldy #Line112 >> 8
.98ec	20 23 99	jsr $9923		jsr TOKOneLine
.98ef	a2 0d		ldx #$0d		ldx #Line113 & $FF
.98f1	a0 94		ldy #$94		ldy #Line113 >> 8
.98f3	20 23 99	jsr $9923		jsr TOKOneLine
.98f6	a2 68		ldx #$68		ldx #Line114 & $FF
.98f8	a0 94		ldy #$94		ldy #Line114 >> 8
.98fa	20 23 99	jsr $9923		jsr TOKOneLine
.98fd	a2 e2		ldx #$e2		ldx #Line115 & $FF
.98ff	a0 94		ldy #$94		ldy #Line115 >> 8
.9901	20 23 99	jsr $9923		jsr TOKOneLine
.9904	a2 e6		ldx #$e6		ldx #Line116 & $FF
.9906	a0 94		ldy #$94		ldy #Line116 >> 8
.9908	20 23 99	jsr $9923		jsr TOKOneLine
.990b	a2 46		ldx #$46		ldx #Line117 & $FF
.990d	a0 95		ldy #$95		ldy #Line117 >> 8
.990f	20 23 99	jsr $9923		jsr TOKOneLine
.9912	a2 4a		ldx #$4a		ldx #Line118 & $FF
.9914	a0 95		ldy #$95		ldy #Line118 >> 8
.9916	20 23 99	jsr $9923		jsr TOKOneLine
.9919	a2 8e		ldx #$8e		ldx #Line119 & $FF
.991b	a0 95		ldy #$95		ldy #Line119 >> 8
.991d	20 23 99	jsr $9923		jsr TOKOneLine

;******  Return to file: src/program/testing/testing.asmx

.9920	4c ff ff	jmp $ffff			jmp 	$FFFF
.9923					TOKOneLine:
.9923	86 26		stx $26				stx 	zTemp2
.9925	84 27		sty $27				sty 	zTemp2+1
.9927	a2 3d		ldx #$3d			ldx 	#TOKGetSource & $FF
.9929	a0 99		ldy #$99			ldy 	#TOKGetSource >> 8
.992b	38		sec				sec
.992c	20 0f 20	jsr $200f			jsr 	TOKTokenise
.992f	20 ea 1e	jsr $1eea			jsr 	PGMDeleteLine
.9932	ad 00 04	lda $0400			lda 	TOKLineSize
.9935	c9 04		cmp #$04			cmp 	#4
.9937	f0 03		beq $993c			beq 	_TOKNoInsert
.9939	20 34 1f	jsr $1f34			jsr 	PGMInsertLine
.993c					_TOKNoInsert:
.993c	60		rts				rts
.993d					TOKGetSource:
.993d	b2 26		lda ($26)			lda 	(zTemp2)
.993f	90 06		bcc $9947			bcc 	_GSNoIncrement
.9941	e6 26		inc $26				inc 	zTemp2
.9943	d0 02		bne $9947			bne 	_GSNoIncrement
.9945	e6 27		inc $27				inc 	zTemp2+1
.9947					_GSNoIncrement:
.9947	c9 00		cmp #$00			cmp 	#0
.9949	60		rts				rts
.073a					SrcPosition:
>073a							.fill 		1

;******  Return to file: basic.asm


;******  End of listing
