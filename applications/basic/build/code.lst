
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Wed Jun 28 17:52:14 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0224					OSKeyStatus:
>0224							.fill 	32
.0244					OSKeyboardQueue:
>0244							.fill 	OSKeyboardQueueMaxSize
.0254					OSKeyboardQueueSize:
>0254							.fill 	1
.0255					OSIsKeyUp:
>0255							.fill 	1
.0256					OSIsKeyShift:
>0256							.fill 	1
.0257					OSEscapePressed:
>0257							.fill 	1
.0258					OSRKOriginal:
>0258							.fill 	1
=192					OSTextBufferSize = 192
.0259					OSEditWidth:
>0259							.fill 	1
.025a					OSEditLength:
>025a							.fill 	1
.025b					OSEditBuffer:
>025b							.fill 	OSTextBufferSize+1
>031c							.fill 	32
>033c							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffdf					OSEnterLine              = $ffdf ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboard           = $ffeb ; Read A from keyboard, CC = success, CS = no key
=$ffee					OSReadKeystroke          = $ffee ; Read A from keyboard, display cursor, wait for key.
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen, CC = success
=$fff4					OSWriteString            = $fff4 ; Write length prefixed string YX to screen
=$fff7					OSGetScreenSize          = $fff7 ; Get size of screen to XY

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 80 1f	jsr $1f80			jsr 	PGMSetBaseAddress
.1007	20 0b 2b	jsr $2b0b			jsr 	IFInitialise 				; setup math library
.100a	4c 01 14	jmp $1401			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_STANDARD_LAST = $a1
=$a1					PR_DATA = $a1
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; get a number to assert
.1010	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1012	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail 					; if so, the assert fails.
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 21 26	jmp $2621		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c bb 26	jmp $26bb		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 93 1f	jsr $1f93			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 aa 2a	jsr $2aaa			jsr 	VARClearHashTables
.1049	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104c	20 ef 27	jsr $27ef			jsr 	StackReset 					; page passed on in A
.104f	20 4e 28	jsr $284e			jsr 	StringSystemInitialise
.1052	20 36 25	jsr $2536			jsr 	ScanProcedures
.1055	20 8b 14	jsr $148b			jsr 	Command_RESTORE
.1058	60		rts				rts
.1059					AllocateMemory:
.1059	5a		phy				phy 								; save Y
.105a	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.105c	5a		phy				phy
.105d	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105f	5a		phy				phy
.1060	a8		tay				tay 								; count is now in XY
.1061					_AllocateLoop:
.1061	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1063	d0 04		bne $1069			bne 	_AllocateOne
.1065	c0 00		cpy #$00			cpy 	#0
.1067	f0 15		beq $107e			beq 	_AllocateExit
.1069					_AllocateOne:
.1069	a9 00		lda #$00			lda 	#0 							; zero byte
.106b	92 28		sta ($28)			sta 	(freeMemory)
.106d	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106f	d0 05		bne $1076			bne 	_AllocateSkipCarry
.1071	e6 29		inc $29				inc 	freeMemory+1
.1073	20 82 10	jsr $1082			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1076					_AllocateSkipCarry:
.1076	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1078	d0 01		bne $107b			bne 	_AllocateSkipBorrow
.107a	ca		dex				dex
.107b					_AllocateSkipBorrow:
.107b	88		dey				dey
.107c	80 e3		bra $1061			bra 	_AllocateLoop
.107e					_AllocateExit:
.107e	fa		plx				plx 								; restore address
.107f	68		pla				pla
.1080	7a		ply				ply 								; restore Y
.1081	60		rts				rts
.1082					ClearCheckMemory:
.1082	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.1084	1a		inc a				inc 	a 							; spacing 2 pages
.1085	1a		inc a				inc 	a
.1086	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1089	b0 01		bcs $108c			bcs  	_CCMError
.108b	60		rts				rts
.108c					_CCMError:
.108c	4c bb 26	jmp $26bb		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108f					CommandDIM:
.108f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1091	29 c0		and #$c0			and 	#$C0
.1093	c9 40		cmp #$40			cmp 	#$40
.1095	d0 39		bne $10d0			bne 	_CDSyntax
.1097	20 61 2a	jsr $2a61			jsr 	VARGetInfo 					; get information
.109a	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.109d	29 02		and #$02			and 	#2
.109f	f0 2f		beq $10d0			beq 	_CDSyntax
.10a1	20 13 2a	jsr $2a13			jsr 	VARFind 					; does it already exist
.10a4	b0 2d		bcs $10d3			bcs 	_CDExists
.10a6	20 bf 29	jsr $29bf			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a9	da		phx				phx 								; save target address
.10aa	48		pha				pha
.10ab	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10ae	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b0	20 d6 10	jsr $10d6			jsr 	CreateArray 				; create array to XA
.10b3	84 24		sty $24				sty 	zTemp1 						; save Y
.10b5	7a		ply				ply 								; restore target to zTemp0
.10b6	84 22		sty $22				sty 	zTemp0
.10b8	7a		ply				ply
.10b9	84 23		sty $23				sty 	zTemp0+1
.10bb	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10bd	a0 01		ldy #$01			ldy 	#1
.10bf	8a		txa				txa
.10c0	91 22		sta ($22),y			sta 	(zTemp0),y
.10c2	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c4	20 80 27	jsr $2780			jsr 	ERRCheckRParen 				; check )
.10c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c9	c8		iny				iny
.10ca	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cc	f0 c1		beq $108f			beq 	CommandDIM
.10ce	88		dey				dey
.10cf	60		rts				rts
.10d0					_CDSyntax:
.10d0	4c cb 25	jmp $25cb		jmp	ErrorV_syntax
.10d3					_CDExists:
.10d3	4c 93 26	jmp $2693		jmp	ErrorV_redefine
.10d6					CreateArray:
.10d6	8d 03 05	sta $0503			sta 	CAType						; save type
.10d9	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	f0 04		beq $10e6			beq 	_CATwoDimensions
.10e2	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e5	60		rts				rts
.10e6					_CATwoDimensions:
.10e6	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e8	8d 05 05	sta $0505			sta 	CADim1+1
.10eb	a5 08		lda $08				lda 	IFR0+IM0
.10ed	8d 04 05	sta $0504			sta 	CADim1+0
.10f0	20 88 27	jsr $2788			jsr 	ERRCheckComma 				; check comma
.10f3	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f6	5a		phy				phy 								; save Y position
.10f7	18		clc				clc 								; allocate the outer array of pointers.
.10f8	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fb	ad 04 05	lda $0504			lda 	CADim1
.10fe	20 71 11	jsr $1171			jsr 	CSAAllocate 				; allocate the outer array
.1101	da		phx				phx									; save this address on the stack
.1102	48		pha				pha
.1103	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1105	85 26		sta $26				sta 	zTemp2
.1107					_CACreateSubLoop:
.1107	38		sec				sec
.1108	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create data array of required size.
.110b	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110d	91 26		sta ($26),y			sta 	(zTemp2),y
.110f	8a		txa				txa
.1110	c8		iny				iny
.1111	91 26		sta ($26),y			sta 	(zTemp2),y
.1113	18		clc				clc  								; next slot.
.1114	a5 26		lda $26				lda 	zTemp2
.1116	69 02		adc #$02			adc 	#2
.1118	85 26		sta $26				sta 	zTemp2
.111a	90 02		bcc $111e			bcc 	_CACNoCarry
.111c	e6 27		inc $27				inc 	zTemp2+1
.111e					_CACNoCarry:
.111e	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1121	d0 03		bne $1126			bne 	_CACNoBorrow
.1123	ce 05 05	dec $0505			dec 	CADim1+1
.1126					_CACNoBorrow:
.1126	ce 04 05	dec $0504			dec 	CADim1
.1129	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112c	10 d9		bpl $1107			bpl 	_CACreateSubLoop
.112e	68		pla				pla
.112f	fa		plx				plx
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					CreateSingleArray:
.1132	5a		phy				phy
.1133	38		sec				sec 								; allocate memory block all zeros.
.1134	a5 08		lda $08				lda 	IFR0+IM0
.1136	a6 09		ldx $09				ldx 	IFR0+IM1
.1138	20 71 11	jsr $1171			jsr 	CSAAllocate
.113b	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113e	f0 2f		beq $116f			beq 	_CSANoInit
.1140	da		phx				phx 								; save address of new array
.1141	48		pha				pha
.1142	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1144	86 23		stx $23				stx 	zTemp0+1
.1146	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1148	b1 22		lda ($22),y			lda 	(zTemp0),y
.114a	a8		tay				tay
.114b	b2 22		lda ($22)			lda 	(zTemp0)
.114d	aa		tax				tax
.114e					_CSAEraseString:
.114e	5a		phy				phy
.114f	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1151	a9 80		lda #$80			lda 	#$80
.1153	91 22		sta ($22),y			sta 	(zTemp0),y
.1155	7a		ply				ply
.1156	18		clc				clc 								; add 4 to next slot.
.1157	a5 22		lda $22				lda 	zTemp0
.1159	69 04		adc #$04			adc 	#4
.115b	85 22		sta $22				sta 	zTemp0
.115d	90 02		bcc $1161			bcc 	_CSAENoCarry
.115f	e6 23		inc $23				inc 	zTemp0+1
.1161					_CSAENoCarry:
.1161	e0 00		cpx #$00			cpx 	#0
.1163	d0 01		bne $1166			bne 	_CSANoBorrow
.1165	88		dey				dey
.1166					_CSANoBorrow:
.1166	ca		dex				dex
.1167	d0 e5		bne $114e			bne 	_CSAEraseString
.1169	c0 00		cpy #$00			cpy 	#0
.116b	d0 e1		bne $114e			bne 	_CSAEraseString
.116d	68		pla				pla
.116e	fa		plx				plx
.116f					_CSANoInit:
.116f	7a		ply				ply
.1170	60		rts				rts
.1171					CSAAllocate:
.1171	08		php				php 								; save type flag.
.1172	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1173	d0 01		bne $1176			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1175	e8		inx				inx
.1176					_CSAANoCarry:
.1176	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1178	b0 2e		bcs $11a8			bcs 	_CSARange
.117a	28		plp				plp 								; restore type flag
.117b	08		php				php 								; save it back again.
.117c	da		phx				phx 								; save size.
.117d	48		pha				pha
.117e	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1180	90 03		bcc $1185			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185					_CSAATimes2:
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188	18		clc				clc
.1189	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118b	90 02		bcc $118f			bcc 	_CSAANoCarry2
.118d	e6 23		inc $23				inc 	zTemp0+1
.118f					_CSAANoCarry2:
.118f	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1191	20 59 10	jsr $1059			jsr 	AllocateMemory 				; allocate memory to XA
.1194	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1196	85 22		sta $22				sta 	zTemp0
.1198	68		pla				pla  								; write element count to first 2 bytes
.1199	92 22		sta ($22)			sta 	(zTemp0)
.119b	68		pla				pla 								; msb of element count
.119c	28		plp				plp 								; CC if pointer array
.119d	b0 02		bcs $11a1			bcs 	_CSAAIsData
.119f	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a1					_CSAAIsData:
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 22		sta ($22),y			sta 	(zTemp0),y
.11a5	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a7	60		rts				rts
.11a8					_CSARange:
.11a8	4c dc 25	jmp $25dc		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ab					Command_Doke:
.11ab	38		sec				sec
.11ac	80 01		bra $11af			bra 	DPCommon
.11ae					Command_Poke:
.11ae	18		clc				clc
.11af					DPCommon:
.11af	08		php				php 								; CS if DOKE
.11b0	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; address
.11b3	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b5	48		pha				pha
.11b6	a5 09		lda $09				lda 	IFR0+IM1
.11b8	48		pha				pha
.11b9	20 88 27	jsr $2788			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bc	20 16 17	jsr $1716			jsr 	EXPEvalInteger16
.11bf	68		pla				pla 								; get address back
.11c0	85 23		sta $23				sta 	zTemp0+1
.11c2	68		pla				pla
.11c3	85 22		sta $22				sta 	zTemp0
.11c5	a5 08		lda $08				lda 	IFR0+IM0
.11c7	92 22		sta ($22)			sta 	(zTemp0)
.11c9	28		plp				plp
.11ca	90 08		bcc $11d4			bcc 	_DPExit
.11cc	5a		phy				phy
.11cd	a5 09		lda $09				lda 	IFR0+IM1
.11cf	a0 01		ldy #$01			ldy 	#1
.11d1	91 22		sta ($22),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4					_DPExit:
.11d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d5					Command_GOTO:
.11d5	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; get line number
.11d8					GotoR0:
.11d8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11db	85 19		sta $19				sta 	codePtr+1
.11dd	64 18		stz $18				stz 	codePtr
.11df					_GOSearch:
.11df	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e1	f0 1f		beq $1202			beq 	_GOError
.11e3	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e5	b1 18		lda ($18),y			lda 	(codePtr),y
.11e7	c5 08		cmp $08				cmp 	IFR0+IM0
.11e9	d0 0a		bne $11f5			bne 	_GONext
.11eb	c8		iny				iny
.11ec	b1 18		lda ($18),y			lda 	(codePtr),y
.11ee	c5 09		cmp $09				cmp 	IFR0+IM1
.11f0	d0 03		bne $11f5			bne 	_GONext
.11f2	4c d0 14	jmp $14d0			jmp 	RUNNewLine
.11f5					_GONext:
.11f5	18		clc				clc 								; advance to next line.
.11f6	b2 18		lda ($18)			lda 	(codePtr)
.11f8	65 18		adc $18				adc 	codePtr
.11fa	85 18		sta $18				sta 	codePtr
.11fc	90 e1		bcc $11df			bcc 	_GOSearch
.11fe	e6 19		inc $19				inc 	codePtr+1
.1200	80 dd		bra $11df			bra 	_GOSearch
.1202					_GOError:
.1202	4c 60 27	jmp $2760		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1205					Command_Input:
.1205	a9 ff		lda #$ff			lda 	#$FF
.1207	8d 06 05	sta $0506			sta 	InputFlag
.120a	80 03		bra $120f			bra 	Command_IP_Main
.120c					Command_Print:
.120c	9c 06 05	stz $0506			stz 	InputFlag
.120f					Command_IP_Main:
.120f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1210					_CPLoop:
.1210	08		php				php 								; save last action flag
.1211	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1213	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1215	f0 48		beq $125f			beq 	_CPExit 					; without consuming
.1217	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1219	f0 44		beq $125f			beq 	_CPExit
.121b	68		pla				pla 								; throw last action flag
.121c	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.121e	c8		iny				iny
.121f	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1221	f0 39		beq $125c			beq 	_CPContinueWithSameLine
.1223	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1225	f0 30		beq $1257			beq 	_CPTab
.1227	88		dey				dey 								; undo the get.
.1228	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.122b	10 0b		bpl $1238			bpl	 	_CPNotInput
.122d	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.122f	c9 40		cmp #$40			cmp 	#$40
.1231	d0 05		bne $1238			bne 	_CPNotInput
.1233	20 68 12	jsr $1268			jsr 	_CPInputCode 				; input code
.1236	80 d7		bra $120f			bra 	Command_IP_Main 			; and go round again.
.1238					_CPNotInput:
.1238	20 c4 16	jsr $16c4			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.123d	10 0e		bpl $124d			bpl 	_CPNumber
.123f	5a		phy				phy
.1240	18		clc				clc 								; string address to YX
.1241	a5 08		lda $08				lda 	IFR0+IM0
.1243	aa		tax				tax
.1244	a5 09		lda $09				lda 	IFR0+IM1
.1246	a8		tay				tay
.1247	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print YX
.124a	7a		ply				ply
.124b	80 c2		bra $120f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.124d					_CPNumber:
.124d	5a		phy				phy
.124e	20 1b 2f	jsr $2f1b			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1251	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print string at YX
.1254	7a		ply				ply
.1255	80 b8		bra $120f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1257					_CPTab:
.1257	a9 09		lda #$09			lda 	#9 							; print TAB
.1259	20 b4 12	jsr $12b4			jsr 	CPPrintA
.125c					_CPContinueWithSameLine:
.125c	38		sec				sec 								; loop round with carry set, which
.125d	80 b1		bra $1210			bra 	_CPLoop 					; will inhibit final CR
.125f					_CPExit:
.125f	28		plp				plp 								; get last action flag
.1260	b0 05		bcs $1267			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1262	a9 0d		lda #$0d			lda 	#13 						; print new line
.1264	20 b4 12	jsr $12b4			jsr 	CPPrintA
.1267					_CPExit2:
.1267	60		rts				rts
.1268					_CPInputCode:
.1268	20 8c 17	jsr $178c			jsr 	EXPTermR0 					; get the term.
.126b	5a		phy				phy 								; save position
.126c	20 b1 12	jsr $12b1			jsr 	CPInputA					; input a line to YX
.126f	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1271	30 18		bmi $128b			bmi 	_CPInputString
.1273	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1275	48		pha				pha
.1276	a5 09		lda $09				lda 	IFR0+IM1
.1278	48		pha				pha
.1279	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.127b	84 23		sty $23				sty 	zTemp0+1
.127d	20 76 1a	jsr $1a76			jsr 	VALConversionZTemp0
.1280	68		pla				pla 								; do the assign.
.1281	85 23		sta $23				sta 	zTemp0+1
.1283	68		pla				pla
.1284	85 22		sta $22				sta 	zTemp0
.1286	20 dc 12	jsr $12dc			jsr 	AssignNumber
.1289	7a		ply				ply
.128a	60		rts				rts
.128b					_CPInputString:
.128b	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.128d	85 22		sta $22				sta 	zTemp0
.128f	a5 09		lda $09				lda 	IFR0+IM1
.1291	85 23		sta $23				sta 	zTemp0+1
.1293	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1295	84 09		sty $09				sty 	IFR0+IM1
.1297	20 f3 12	jsr $12f3			jsr 	AssignString 				; assign the string
.129a	7a		ply				ply 								; exit
.129b	60		rts				rts
.129c					CPPrintYX:
.129c	86 22		stx $22				stx 	zTemp0
.129e	84 23		sty $23				sty 	zTemp0+1
.12a0	b2 22		lda ($22)			lda 	(zTemp0)
.12a2	aa		tax				tax
.12a3	f0 0b		beq $12b0			beq 	_CPPrintExit
.12a5	a0 01		ldy #$01			ldy 	#1
.12a7					_CPPrintAYXLoop:
.12a7	b1 22		lda ($22),y			lda 	(zTemp0),y
.12a9	20 b4 12	jsr $12b4			jsr 	CPPrintA
.12ac	c8		iny				iny
.12ad	ca		dex				dex
.12ae	d0 f7		bne $12a7			bne 	_CPPrintAYXLoop
.12b0					_CPPrintExit:
.12b0	60		rts				rts
.12b1					CPInputA:
.12b1	4c df ff	jmp $ffdf			jmp 	OSEnterLine
.12b4					CPPrintA:
.12b4	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12b7					CommandLET:
.12b7	20 8c 17	jsr $178c			jsr 	EXPTermR0 					; get term
.12ba	90 6f		bcc $132b			bcc 	CLError 					; must be a reference term.
.12bc	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12be	48		pha				pha
.12bf	a5 09		lda $09				lda 	IFR0+IM1
.12c1	48		pha				pha
.12c2	a5 0b		lda $0b				lda 	IFR0+IExp
.12c4	48		pha				pha
.12c5	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12c7	20 90 27	jsr $2790			jsr 	ERRCheckA
.12ca	20 c4 16	jsr $16c4			jsr 	EXPEvaluateExpression 		; right hand side.
.12cd	68		pla				pla 								; type of l-expr
.12ce	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d0	30 5c		bmi $132e			bmi 	CLType
.12d2	fa		plx				plx 	 							; pop target address to zTemp0
.12d3	86 23		stx $23				stx 	zTemp0+1
.12d5	fa		plx				plx
.12d6	86 22		stx $22				stx 	zTemp0
.12d8					AssignData:
.12d8	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12da	30 17		bmi $12f3			bmi 	AssignString
.12dc					AssignNumber:
.12dc	5a		phy				phy
.12dd	a0 03		ldy #$03			ldy 	#3
.12df	a5 0b		lda $0b				lda 	IFR0+IExp
.12e1	91 22		sta ($22),y			sta 	(zTemp0),y
.12e3	88		dey				dey
.12e4	a5 0a		lda $0a				lda 	IFR0+IM2
.12e6	91 22		sta ($22),y			sta 	(zTemp0),y
.12e8	88		dey				dey
.12e9	a5 09		lda $09				lda 	IFR0+IM1
.12eb	91 22		sta ($22),y			sta 	(zTemp0),y
.12ed	a5 08		lda $08				lda 	IFR0+IM0
.12ef	92 22		sta ($22)			sta 	(zTemp0)
.12f1	7a		ply				ply
.12f2	60		rts				rts
.12f3					AssignString:
.12f3	5a		phy				phy
.12f4	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12f6	b1 22		lda ($22),y			lda 	(zTemp0),y
.12f8	12 22		ora ($22)			ora 	(zTemp0)
.12fa	f0 23		beq $131f			beq 	_CLConcreteString
.12fc	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12fe	85 24		sta $24				sta 	zTemp1
.1300	b1 22		lda ($22),y			lda 	(zTemp0),y
.1302	85 25		sta $25				sta 	zTemp1+1
.1304	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.1306	38		sec				sec 								; we want 3 for slot size, status, string size.
.1307	e9 03		sbc #$03			sbc 	#3
.1309	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.130b	90 12		bcc $131f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.130d	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.130f	1a		inc a				inc 	a
.1310	aa		tax				tax
.1311	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1313					_CLReplaceString:
.1313	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1315	c8		iny				iny
.1316	c8		iny				iny
.1317	91 24		sta ($24),y			sta 	(zTemp1),y
.1319	88		dey				dey
.131a	ca		dex				dex
.131b	d0 f6		bne $1313			bne 	_CLReplaceString
.131d	80 0a		bra $1329			bra 	_CLExit
.131f					_CLConcreteString:
.131f	20 03 28	jsr $2803			jsr 	StringConcrete  			; concreted string in XA.
.1322	a0 01		ldy #$01			ldy 	#1 							; store the address
.1324	92 22		sta ($22)			sta 	(zTemp0)
.1326	8a		txa				txa
.1327	91 22		sta ($22),y			sta 	(zTemp0),y
.1329					_CLExit:
.1329	7a		ply				ply
.132a	60		rts				rts
.132b					CLError:
.132b	4c fe 26	jmp $26fe		jmp	ErrorV_variable
.132e					CLType:
.132e	4c fb 25	jmp $25fb		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1331					Command_LIST:
.1331	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1334	9c 08 05	stz $0508			stz 	CLFrom+1
.1337	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1339	c9 99		cmp #$99			cmp 	#PR_COMMA
.133b	f0 1d		beq $135a			beq 	_CLToLine
.133d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.133f	f0 37		beq $1378			beq 	_CLDefaultTo
.1341	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1344	a5 08		lda $08				lda 	IFR0+IM0
.1346	8d 07 05	sta $0507			sta 	CLFrom
.1349	8d 09 05	sta $0509			sta 	CLTo
.134c	a5 09		lda $09				lda 	IFR0+IM1
.134e	8d 08 05	sta $0508			sta 	CLFrom+1
.1351	8d 0a 05	sta $050a			sta 	CLTo+1
.1354	b1 18		lda ($18),y			lda 	(codePtr),y
.1356	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1358	f0 26		beq $1380			beq 	_CLList
.135a					_CLToLine:
.135a	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.135c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.135e	f0 18		beq $1378			beq 	_CLDefaultTo
.1360	20 88 27	jsr $2788			jsr 	ERRCheckComma 				; sep comma
.1363	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1365	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1367	f0 0f		beq $1378			beq 	_CLDefaultTo
.1369	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; there's a To value.
.136c	a5 08		lda $08				lda 	IFR0+IM0
.136e	8d 09 05	sta $0509			sta 	CLTo
.1371	a5 09		lda $09				lda 	IFR0+IM1
.1373	8d 0a 05	sta $050a			sta 	CLTo+1
.1376	80 08		bra $1380			bra 	_CLList
.1378					_CLDefaultTo:
.1378	a9 ff		lda #$ff			lda 	#$FF
.137a	8d 09 05	sta $0509			sta 	CLTo
.137d	8d 0a 05	sta $050a			sta 	CLTo+1
.1380					_CLList:
.1380	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1383	85 19		sta $19				sta 	codePtr+1
.1385	64 18		stz $18				stz 	codePtr
.1387	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1389	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.138b	20 d5 1d	jsr $1dd5			jsr 	TOKSetDetokeniseOutput
.138e					_CLLoop:
.138e	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1390	f0 4a		beq $13dc			beq 	_CLExit
.1392	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1395	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1398	d0 45		bne $13df			bne 	_CLBreak
.139a	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.139c	20 e2 13	jsr $13e2			jsr 	_CLCompareLine
.139f	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a1	f0 2c		beq $13cf			beq 	_CLNext
.13a3	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13a5	20 e2 13	jsr $13e2			jsr 	_CLCompareLine
.13a8	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13aa	f0 23		beq $13cf			beq 	_CLNext
.13ac	a0 02		ldy #$02			ldy 	#2 							; print line #
.13ae	b1 18		lda ($18),y			lda 	(codePtr),y
.13b0	aa		tax				tax
.13b1	88		dey				dey
.13b2	b1 18		lda ($18),y			lda 	(codePtr),y
.13b4	20 e1 28	jsr $28e1			jsr 	WriteIntXA
.13b7	a9 20		lda #$20			lda 	#32
.13b9	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13bc	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13be	a5 18		lda $18				lda 	codePtr
.13c0	18		clc				clc
.13c1	69 03		adc #$03			adc 	#3
.13c3	aa		tax				tax
.13c4	90 01		bcc $13c7			bcc 	_CLNoCarry2
.13c6	c8		iny				iny
.13c7					_CLNoCarry2:
.13c7	20 90 1d	jsr $1d90			jsr 	TOKDetokenise
.13ca	a9 0d		lda #$0d			lda 	#13	 						; next line
.13cc	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13cf					_CLNext:
.13cf	18		clc				clc 								; advance to next line.
.13d0	b2 18		lda ($18)			lda 	(codePtr)
.13d2	65 18		adc $18				adc 	codePtr
.13d4	85 18		sta $18				sta 	codePtr
.13d6	90 02		bcc $13da			bcc 	_CLNoCarry
.13d8	e6 19		inc $19				inc 	codePtr+1
.13da					_CLNoCarry:
.13da	80 b2		bra $138e			bra 	_CLLoop
.13dc					_CLExit:
.13dc	4c 00 29	jmp $2900			jmp 	WarmStart
.13df					_CLBreak:
.13df	4c 56 27	jmp $2756		jmp	ErrorV_break
.13e2					_CLCompareLine:
.13e2	a0 01		ldy #$01			ldy 	#1
.13e4	38		sec				sec
.13e5	b1 18		lda ($18),y			lda 	(codePtr),y
.13e7	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13ea	85 22		sta $22				sta 	zTemp0
.13ec	c8		iny				iny
.13ed	b1 18		lda ($18),y			lda 	(codePtr),y
.13ef	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13f2	90 0a		bcc $13fe			bcc 	_CLIsNegative
.13f4	d0 05		bne $13fb			bne 	_CLIsPositive
.13f6	a5 22		lda $22				lda 	zTemp0
.13f8	d0 01		bne $13fb			bne 	_CLIsPositive
.13fa	60		rts				rts
.13fb					_CLIsPositive:
.13fb	a9 01		lda #$01			lda 	#1
.13fd	60		rts				rts
.13fe					_CLIsNegative:
.13fe	a9 ff		lda #$ff			lda 	#255
.1400	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1401					Command_NEW:
.1401	20 87 1f	jsr $1f87			jsr 	PGMNewProgram 				; Reset current program
.1404	20 3c 10	jsr $103c			jsr 	ClearCode 					; Run CLR
.1407	4c 29 15	jmp $1529			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.140a					Command_READ:
.140a	20 8c 17	jsr $178c			jsr 	EXPTermR0 					; get term to R0
.140d	90 35		bcc $1444			bcc 	_CRSyntax 					; fail if not a reference.
.140f	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1411	48		pha				pha
.1412	a5 09		lda $09				lda 	IFR0+IM1
.1414	48		pha				pha
.1415	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1417	48		pha				pha
.1418	20 9d 14	jsr $149d			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.141b	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.141e	d0 27		bne $1447			bne 	_CRHaveData  				; forward for the next one.
.1420					_CRNextLine:
.1420	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1422	f0 1a		beq $143e			beq 	_CRNoData
.1424					_CRKeepSearching:
.1424	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1426	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1428	20 db 24	jsr $24db			jsr 	ScanForward
.142b	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.142d	f0 18		beq $1447			beq 	_CRHaveData 				; found it
.142f	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1431	18		clc				clc 								; try the next line, keep going.
.1432	b2 18		lda ($18)			lda 	(codePtr)
.1434	65 18		adc $18				adc 	codePtr
.1436	85 18		sta $18				sta 	codePtr
.1438	90 e6		bcc $1420			bcc 	_CRNextLine
.143a	e6 19		inc $19				inc 	codePtr+1
.143c	80 e2		bra $1420			bra 	_CRNextLine
.143e					_CRNoData:
.143e	4c 83 26	jmp $2683		jmp	ErrorV_data
.1441					_CLType:
.1441	4c fb 25	jmp $25fb		jmp	ErrorV_type
.1444					_CRSyntax:
.1444	4c cb 25	jmp $25cb		jmp	ErrorV_syntax
.1447					_CRHaveData:
.1447	20 c4 16	jsr $16c4			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.144a	68		pla				pla 								; type of l-expr
.144b	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.144d	30 f2		bmi $1441			bmi 	_CLType
.144f	68		pla				pla 								; restore address
.1450	85 23		sta $23				sta 	zTemp0+1
.1452	68		pla				pla
.1453	85 22		sta $22				sta 	zTemp0
.1455	20 d8 12	jsr $12d8			jsr 	AssignData 					; write R0 there.
.1458	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.145b	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.145d	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.145f	d0 04		bne $1465			bne 	_CRSwapBack
.1461	c8		iny				iny 								; consume comma
.1462	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1465					_CRSwapBack:
.1465	20 9d 14	jsr $149d			jsr 	SwapCodeDataPointers		; swap them back.
.1468	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.146a	c8		iny				iny
.146b	c9 99		cmp #$99			cmp 	#PR_COMMA
.146d	f0 9b		beq $140a			beq 	Command_READ 				; if so go round again.
.146f	88		dey				dey 								; unpick get.
.1470	60		rts				rts
.1471					Command_DATA:
.1471	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1473	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1475	20 db 24	jsr $24db			jsr 	ScanForward
.1478	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.147a	d0 01		bne $147d			bne 	_CDNotEOL
.147c	88		dey				dey
.147d					_CDNotEOL:
.147d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.147e					Command_REM:
.147e					Command_REM2:
.147e	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1480	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1482	d0 06		bne $148a			bne 	_CRExit
.1484	c8		iny				iny 								; skip over it, it's a comment.
.1485	98		tya				tya
.1486	38		sec				sec
.1487	71 18		adc ($18),y			adc 	(codePtr),y
.1489	a8		tay				tay
.148a					_CRExit:
.148a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.148b					S
.148b					Command_RESTORE:
.148b	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.148e	8d 0c 05	sta $050c			sta 	dataPtr+1
.1491	9c 0b 05	stz $050b			stz 	dataPtr
.1494	a9 03		lda #$03			lda 	#3 							; position start of line
.1496	8d 0d 05	sta $050d			sta 	dataPos
.1499	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.149c	60		rts				rts
.149d					SwapCodeDataPointers:
.149d	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a0	a6 18		ldx $18				ldx 	codePtr
.14a2	85 18		sta $18				sta 	codePtr
.14a4	8e 0b 05	stx $050b			stx 	dataPtr
.14a7	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14aa	a6 19		ldx $19				ldx 	codePtr+1
.14ac	85 19		sta $19				sta 	codePtr+1
.14ae	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b1	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14b4	8c 0d 05	sty $050d			sty 	dataPos
.14b7	a8		tay				tay
.14b8	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14b9					Command_RUN:
.14b9	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.14bc	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14bf	85 19		sta $19				sta 	codePtr+1
.14c1	64 18		stz $18				stz 	codePtr
.14c3	80 0b		bra $14d0			bra 	RUNNewLine
.14c5					RUNEndOfLine:
.14c5	18		clc				clc 								; advance to next line.
.14c6	b2 18		lda ($18)			lda 	(codePtr)
.14c8	65 18		adc $18				adc 	codePtr
.14ca	85 18		sta $18				sta 	codePtr
.14cc	90 02		bcc $14d0			bcc 	_RELNoCarry
.14ce	e6 19		inc $19				inc 	codePtr+1
.14d0					_RELNoCarry:
.14d0					RUNNewLine:
.14d0	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14d2	9a		txs				txs
.14d3	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14d5	f0 52		beq $1529			beq 	Command_END
.14d7	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14d9	b1 18		lda ($18),y			lda 	(codePtr),y
.14db	8d 26 06	sta $0626			sta 	ERRLine
.14de	c8		iny				iny
.14df	b1 18		lda ($18),y			lda 	(codePtr),y
.14e1	8d 27 06	sta $0627			sta 	ERRLine+1
.14e4	c8		iny				iny 								; offset into codePtr for start of line.
.14e5					RUNNewCommand:
.14e5	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14e8	ce 10 05	dec $0510			dec 	checkCounter
.14eb	d0 0a		bne $14f7			bne 	_RNCNoCheck
.14ed	5a		phy				phy 								; keyboard check.
.14ee	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14f1	7a		ply				ply
.14f2	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14f5	d0 1e		bne $1515			bne 	_RUNBreak
.14f7					_RNCNoCheck:
.14f7	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.14f9	10 1d		bpl $1518			bpl		_RUNNotToken 				; probably an identifier
.14fb	c8		iny				iny 								; consume token
.14fc	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.14fe	f0 e5		beq $14e5			beq 	RUNNewCommand
.1500	c9 a2		cmp #$a2			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1502	b0 0e		bcs $1512			bcs 	_RUNSyntax
.1504	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1506	90 0a		bcc $1512			bcc 	_RUNSyntax
.1508	0a		asl a				asl 	a 							; double into X.
.1509	aa		tax				tax
.150a	20 0f 15	jsr $150f			jsr 	_RUNDispatchMain			; call the main dispatcher
.150d	80 d6		bra $14e5			bra 	RUNNewCommand
.150f					_RUNDispatchMain:
.150f	7c 74 1c	jmp ($1c74,x)			jmp 	(VectorTable,x)
.1512					_RUNSyntax:
.1512	4c cb 25	jmp $25cb		jmp	ErrorV_syntax
.1515					_RUNBreak:
.1515	4c 56 27	jmp $2756		jmp	ErrorV_break
.1518					_RUNNotToken:
.1518	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.151a	90 f6		bcc $1512			bcc 	_RUNSyntax
.151c	20 b7 12	jsr $12b7			jsr 	CommandLET 					; assignment
.151f	80 c4		bra $14e5			bra 	RUNNewCommand 				; loop round.
.1521					Command_Shift_Handler:
.1521	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1523	c8		iny				iny
.1524	0a		asl a				asl 	a 							; double into X
.1525	aa		tax				tax
.1526	7c 74 1d	jmp ($1d74,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1529					Command_END:
.1529	4c 00 29	jmp $2900			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.152c					Command_STOP:
.152c	4c 6f 26	jmp $266f		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.152f					Command_Sys:
.152f	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; execution address
.1532	5a		phy				phy
.1533	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1536	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1539	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.153c	20 41 15	jsr $1541			jsr 	_CSCallIFR0 				; call the code
.153f	7a		ply				ply
.1540	60		rts				rts
.1541					_CSCallIFR0:
.1541	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1544					NoExec01:
.1544					NoExec02:
.1544					NoExec03:
.1544					NoExec04:
.1544					NoExec05:
.1544					NoExec06:
.1544					NoExec07:
.1544					NoExec08:
.1544	4c cb 25	jmp $25cb		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1547					EXPBinAdd:
.1547	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1549	30 6f		bmi $15ba			bmi 	EXPConcatenate
.154b	a2 0c		ldx #$0c			ldx 	#IFR1
.154d	4c 16 2b	jmp $2b16			jmp 	IFloatAdd
.1550					EXPBinSub:
.1550	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1552	30 3f		bmi $1593			bmi 	EXPTypeError
.1554	a2 0c		ldx #$0c			ldx 	#IFR1
.1556	4c 0f 2b	jmp $2b0f			jmp 	IFloatSubtract
.1559					EXPBinMul:
.1559	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.155b	30 36		bmi $1593			bmi 	EXPTypeError
.155d	a2 0c		ldx #$0c			ldx 	#IFR1
.155f	4c c0 2b	jmp $2bc0			jmp 	IFloatMultiply
.1562					EXPBinFDiv:
.1562	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1564	30 2d		bmi $1593			bmi 	EXPTypeError
.1566	a2 0c		ldx #$0c			ldx 	#IFR1
.1568	20 42 2e	jsr $2e42			jsr 	IFloatDivideFloat
.156b	b0 0f		bcs $157c			bcs 	EXPDZero
.156d	60		rts				rts
.156e					EXPBinIDiv:
.156e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1570	30 21		bmi $1593			bmi 	EXPTypeError
.1572	a2 0c		ldx #$0c			ldx 	#IFR1
.1574	20 42 2e	jsr $2e42			jsr 	IFloatDivideFloat
.1577	b0 03		bcs $157c			bcs 	EXPDZero
.1579	4c 1f 2e	jmp $2e1f			jmp 	IFloatIntegerR0
.157c					EXPDZero:
.157c	4c 44 26	jmp $2644		jmp	ErrorV_divzero
.157f					EXPBinIMod:
.157f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1581	30 10		bmi $1593			bmi 	EXPTypeError
.1583	a2 0c		ldx #$0c			ldx 	#IFR1
.1585	5a		phy				phy
.1586	20 55 2d	jsr $2d55			jsr 	IFPreProcessBitwise 		; set up everything.
.1589	d0 05		bne $1590			bne 	EXPDRange
.158b	20 8e 2c	jsr $2c8e			jsr 	IFloatModulusInteger
.158e	7a		ply				ply
.158f	60		rts				rts
.1590					EXPDRange:
.1590	4c dc 25	jmp $25dc		jmp	ErrorV_range
.1593					EXPTypeError:
.1593	4c fb 25	jmp $25fb		jmp	ErrorV_type
.1596					EXPBinAnd:
.1596	24 0b		bit $0b				bit 	IFR0+IExp
.1598	30 f9		bmi $1593			bmi 	EXPTypeError
.159a	a2 0c		ldx #$0c			ldx 	#IFR1
.159c	20 10 2d	jsr $2d10			jsr 	IFloatBitwiseAnd
.159f	b0 ef		bcs $1590			bcs 	EXPDRange
.15a1	60		rts				rts
.15a2					EXPBinOr:
.15a2	24 0b		bit $0b				bit 	IFR0+IExp
.15a4	30 ed		bmi $1593			bmi 	EXPTypeError
.15a6	a2 0c		ldx #$0c			ldx 	#IFR1
.15a8	20 27 2d	jsr $2d27			jsr 	IFloatBitwiseOr
.15ab	b0 e3		bcs $1590			bcs 	EXPDRange
.15ad	60		rts				rts
.15ae					EXPBinXor:
.15ae	24 0b		bit $0b				bit 	IFR0+IExp
.15b0	30 e1		bmi $1593			bmi 	EXPTypeError
.15b2	a2 0c		ldx #$0c			ldx 	#IFR1
.15b4	20 3e 2d	jsr $2d3e			jsr 	IFloatBitwiseXor
.15b7	b0 d7		bcs $1590			bcs 	EXPDRange
.15b9	60		rts				rts
.15ba					EXPConcatenate:
.15ba	18		clc				clc
.15bb	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15bd	72 0c		adc ($0c)			adc 	(IFR1)
.15bf	b0 2d		bcs $15ee			bcs 	_EXPCError 					; far too long.
.15c1	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15c3	da		phx				phx
.15c4	a6 09		ldx $09				ldx 	IFR0+1
.15c6	da		phx				phx
.15c7	20 76 28	jsr $2876			jsr 	StringTempAllocate 			; allocate string, set up return
.15ca	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15cc	a5 0c		lda $0c				lda 	IFR1
.15ce	20 d7 15	jsr $15d7			jsr 	_EXPCCopyXA
.15d1	fa		plx				plx 								; copy second string
.15d2	68		pla				pla
.15d3	20 d7 15	jsr $15d7			jsr 	_EXPCCopyXA
.15d6	60		rts				rts
.15d7					_EXPCCopyXA:
.15d7	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15d9	85 22		sta $22				sta 	zTemp0
.15db	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15dd	f0 0e		beq $15ed			beq 	_EXPCCExit 					; nothing in string
.15df	aa		tax				tax 								; count
.15e0	5a		phy				phy 								; start position
.15e1	a0 01		ldy #$01			ldy 	#1
.15e3					_EXPCCLoop:
.15e3	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15e5	20 ab 28	jsr $28ab			jsr 	StringTempWrite
.15e8	c8		iny				iny
.15e9	ca		dex				dex
.15ea	d0 f7		bne $15e3			bne 	_EXPCCLoop
.15ec	7a		ply				ply
.15ed					_EXPCCExit:
.15ed	60		rts				rts
.15ee					_EXPCError:
.15ee	4c e8 26	jmp $26e8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f1					EXPReturnTrue:
.15f1	a2 08		ldx #$08			ldx 	#IFR0
.15f3	a9 01		lda #$01			lda 	#1
.15f5	20 20 31	jsr $3120			jsr 	IFloatSetByte
.15f8	20 29 31	jsr $3129			jsr 	IFloatNegate
.15fb	60		rts				rts
.15fc					EXPReturnFalse:
.15fc	a2 08		ldx #$08			ldx 	#IFR0
.15fe	4c 1e 31	jmp $311e			jmp 	IFloatSetZero
.1601					EXPCompareEqual:
.1601	20 37 16	jsr $1637			jsr 	EXPCompareBaseCode
.1604	c9 00		cmp #$00			cmp 	#0
.1606	f0 e9		beq $15f1			beq 	EXPReturnTrue
.1608	80 f2		bra $15fc			bra 	EXPReturnFalse
.160a					EXPCompareLess:
.160a	20 37 16	jsr $1637			jsr 	EXPCompareBaseCode
.160d	c9 ff		cmp #$ff			cmp 	#$FF
.160f	f0 e0		beq $15f1			beq 	EXPReturnTrue
.1611	80 e9		bra $15fc			bra 	EXPReturnFalse
.1613					EXPCompareGreater:
.1613	20 37 16	jsr $1637			jsr 	EXPCompareBaseCode
.1616	c9 01		cmp #$01			cmp 	#1
.1618	f0 d7		beq $15f1			beq 	EXPReturnTrue
.161a	80 e0		bra $15fc			bra 	EXPReturnFalse
.161c					EXPCompareNotEqual:
.161c	20 37 16	jsr $1637			jsr 	EXPCompareBaseCode
.161f	c9 00		cmp #$00			cmp 	#0
.1621	d0 ce		bne $15f1			bne 	EXPReturnTrue
.1623	80 d7		bra $15fc			bra 	EXPReturnFalse
.1625					EXPCompareLessEqual:
.1625	20 37 16	jsr $1637			jsr 	EXPCompareBaseCode
.1628	c9 01		cmp #$01			cmp 	#1
.162a	d0 c5		bne $15f1			bne 	EXPReturnTrue
.162c	80 ce		bra $15fc			bra 	EXPReturnFalse
.162e					EXPCompareGreaterEqual:
.162e	20 37 16	jsr $1637			jsr 	EXPCompareBaseCode
.1631	c9 ff		cmp #$ff			cmp 	#$FF
.1633	d0 bc		bne $15f1			bne 	EXPReturnTrue
.1635	80 c5		bra $15fc			bra 	EXPReturnFalse
.1637					EXPCompareBaseCode:
.1637	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1639	30 10		bmi $164b			bmi 	_EXCBCString
.163b	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.163d	20 ed 2d	jsr $2ded			jsr 	IFloatCompare
.1640	a5 08		lda $08				lda 	IFR0+IM0
.1642	f0 06		beq $164a			beq 	_EXCBCExit 					; return 0 if zero
.1644	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1646	50 02		bvc $164a			bvc 	_EXCBCExit
.1648	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.164a					_EXCBCExit:
.164a	60		rts				rts
.164b					_EXCBCString:
.164b	5a		phy				phy
.164c	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.164e	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1650	90 02		bcc $1654			bcc 	_EXCBCSmaller
.1652	b2 0c		lda ($0c)			lda 	(IFR1)
.1654					_EXCBCSmaller:
.1654	aa		tax				tax
.1655	f0 0d		beq $1664			beq 	_EXCBCMatches 				; if zero common length matches
.1657	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1659					_EXCBCCheckSmallerMatches:
.1659	c8		iny				iny 								; compare directly as far as common length
.165a	38		sec				sec
.165b	b1 0c		lda ($0c),y			lda 	(IFR1),y
.165d	f1 08		sbc ($08),y			sbc 	(IFR0),y
.165f	d0 08		bne $1669			bne 	_EXCBCExit2
.1661	ca		dex				dex
.1662	d0 f5		bne $1659			bne 	_EXCBCCheckSmallerMatches
.1664					_EXCBCMatches:
.1664	38		sec				sec
.1665	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1667	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1669					_EXCBCExit2:
.1669	7a		ply				ply
.166a	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.166c	f0 04		beq $1672			beq 	_EXCBCReturn
.166e	30 03		bmi $1673			bmi 	_EXCBCFF 					; return $FF if <
.1670	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1672					_EXCBCReturn:
.1672	60		rts				rts
.1673					_EXCBCFF:
.1673	a9 ff		lda #$ff			lda 	#$FF
.1675	60		rts				rts
.1676					_EXCBCRange:
.1676	4c dc 25	jmp $25dc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1679					EXPBinLeft:
.1679	a9 ff		lda #$ff			lda 	#$FF
.167b	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.167e	4c 84 16	jmp $1684			jmp 	EXPShiftCommon
.1681					EXPBinRight:
.1681	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1684					EXPShiftCommon:
.1684	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1686	05 0f		ora $0f				ora 	IFR1+IExp
.1688	29 7f		and #$7f			and 	#$7F
.168a	d0 35		bne $16c1			bne 	_EXPSRange
.168c	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.168e	29 e0		and #$e0			and 	#$E0
.1690	05 09		ora $09				ora 	IFR0+IM1
.1692	05 0a		ora $0a				ora 	IFR0+IM2
.1694	d0 25		bne $16bb			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1696	5a		phy				phy
.1697	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1699	29 1f		and #$1f			and 	#$1F
.169b	f0 17		beq $16b4			beq 	_EXPSExit 					; exit if zero
.169d	a8		tay				tay
.169e					_EXPSLoop:
.169e	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16a0	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16a3	30 05		bmi $16aa			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16a5	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.16a8	80 07		bra $16b1			bra 	_EXPSContinue
.16aa					_EXPSShiftLeft:
.16aa	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.16ad	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16af	30 10		bmi $16c1			bmi 	_EXPSRange
.16b1					_EXPSContinue:
.16b1	88		dey				dey 								; do it Y times
.16b2	d0 ea		bne $169e			bne 	_EXPSLoop
.16b4					_EXPSExit:
.16b4	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16b6	20 af 30	jsr $30af			jsr 	IFloatCopyFromRegister
.16b9	7a		ply				ply
.16ba	60		rts				rts
.16bb					_EXPSShiftZero:
.16bb	a2 08		ldx #$08			ldx 	#IFR0
.16bd	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.16c0	60		rts				rts
.16c1					_EXPSRange:
.16c1	4c dc 25	jmp $25dc		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16c4					EXPEvaluateExpression:
.16c4	a9 00		lda #$00			lda 	#0 							; current precedence
.16c6					EXPEvaluateExpressionPrecedenceA:
.16c6	48		pha				pha
.16c7	20 41 17	jsr $1741			jsr 	EXPTermValueR0				; do first term.
.16ca					_EELoop:
.16ca	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16cc	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16ce	90 31		bcc $1701			bcc 	_EEExit
.16d0	aa		tax				tax 								; access the precedence of the operator.
.16d1	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d2	dd 9f 19	cmp $199f,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16d5	b0 2b		bcs $1702			bcs 	_EEExit2
.16d7	48		pha				pha 								; save current precedence.
.16d8	da		phx				phx 								; save operator
.16d9	c8		iny				iny 								; consume operator
.16da	da		phx				phx
.16db	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16dd	20 6d 30	jsr $306d			jsr 	IFloatPushRx
.16e0	fa		plx				plx
.16e1	bd 9f 19	lda $199f,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16e4	20 c6 16	jsr $16c6			jsr 	EXPEvaluateExpressionPrecedenceA
.16e7	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16e9	20 8e 30	jsr $308e			jsr 	IFloatPullRx
.16ec	fa		plx				plx 								; operator
.16ed	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16ef	45 0f		eor $0f				eor 	IFR1+IExp
.16f1	30 08		bmi $16fb			bmi 	_EEType
.16f3					_EETypeOkay:
.16f3	8a		txa				txa
.16f4	0a		asl a				asl 	a 							; double -> X
.16f5	aa		tax				tax
.16f6	20 fe 16	jsr $16fe			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.16f9	80 cf		bra $16ca			bra 	_EELoop
.16fb					_EEType:
.16fb	4c fb 25	jmp $25fb		jmp	ErrorV_type
.16fe					_EECallBinary:
.16fe	7c 74 1c	jmp ($1c74,x)			jmp 	(VectorTable,x)
.1701					_EEExit:
.1701	68		pla				pla 								; throw precedence
.1702					_EEExit2:
.1702	18		clc				clc
.1703	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1704					EXPEvalNumber:
.1704	20 c4 16	jsr $16c4			jsr 	EXPEvaluateExpression 		; get a value
.1707	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1709	30 01		bmi $170c			bmi 	EVUType
.170b	60		rts				rts
.170c					EVUType:
.170c	4c fb 25	jmp $25fb		jmp	ErrorV_type
.170f					EXPEvalInteger:
.170f	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1712	20 1f 2e	jsr $2e1f			jsr 	IFloatIntegerR0
.1715	60		rts				rts
.1716					EXPEvalInteger16:
.1716	20 0f 17	jsr $170f			jsr 	EXPEvalInteger 				; get integer
.1719	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.171b	d0 21		bne $173e			bne 	EVURange
.171d	a6 09		ldx $09				ldx 	IFR0+IM1
.171f	a5 08		lda $08				lda 	IFR0+IM0
.1721	60		rts				rts
.1722					EXPEvalInteger8:
.1722	20 0f 17	jsr $170f			jsr 	EXPEvalInteger 				; get integer
.1725	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1727	05 09		ora $09				ora 	IFR0+IM1
.1729	d0 13		bne $173e			bne 	EVURange
.172b	a5 08		lda $08				lda 	IFR0+IM0
.172d	60		rts				rts
.172e					EXPEvalString:
.172e	20 c4 16	jsr $16c4			jsr 	EXPEvaluateExpression 		; get value
.1731	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1733	10 d7		bpl $170c			bpl 	EVUType
.1735	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1737	86 23		stx $23				stx 	zTemp0+1
.1739	a5 08		lda $08				lda 	IFR0+IM0
.173b	85 22		sta $22				sta 	zTemp0
.173d	60		rts				rts
.173e					EVURange:
.173e	4c dc 25	jmp $25dc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1741					EXPTermValueR0:
.1741	20 8c 17	jsr $178c			jsr 	EXPTermR0 					; get term
.1744	90 45		bcc $178b			bcc 	_ETVNotReference 			; exit if value.
.1746	5a		phy				phy
.1747	a0 03		ldy #$03			ldy 	#3 							; get type
.1749	b1 08		lda ($08),y			lda 	(IFR0),y
.174b	30 14		bmi $1761			bmi 	_ETVDereferenceString
.174d	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.174f	88		dey				dey 								; get byte 2
.1750	b1 08		lda ($08),y			lda 	(IFR0),y
.1752	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1754	88		dey				dey 								; get byte 1
.1755	b1 08		lda ($08),y			lda 	(IFR0),y
.1757	aa		tax				tax 								; save in X so we can overwrite it
.1758	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.175a	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.175c	85 08		sta $08				sta 	IFR0+IM0
.175e	7a		ply				ply
.175f	18		clc				clc
.1760	60		rts				rts
.1761					_ETVDereferenceString:
.1761	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1763	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1765	12 08		ora ($08)			ora 	(IFR0)
.1767	f0 11		beq $177a			beq 	_ETVNull 					; if so, return a fake NULL.
.1769	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.176b	aa		tax				tax
.176c	b2 08		lda ($08)			lda 	(IFR0)
.176e	18		clc				clc 								; add two so points to actual string.
.176f	69 02		adc #$02			adc 	#2
.1771	90 01		bcc $1774			bcc 	_EVDSNoCarry
.1773	e8		inx				inx
.1774					_EVDSNoCarry:
.1774	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1776	85 08		sta $08				sta 	IFR0
.1778	80 08		bra $1782			bra 	_ETVFillExit 				; tidy up and exit.
.177a					_ETVNull:
.177a	a9 8a		lda #$8a			lda 	#_EVTNString & $FF
.177c	85 08		sta $08				sta 	IFR0+IM0
.177e	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1780	85 09		sta $09				sta 	IFR0+IM1
.1782					_ETVFillExit:
.1782	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1784	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1786	85 0b		sta $0b				sta 	IFR0+IExp
.1788	7a		ply				ply
.1789	60		rts				rts
.178a					_EVTNString:
>178a	00						.byte 	0
.178b					_ETVNotReference:
.178b	60		rts				rts
.178c					EXPTermR0:
.178c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.178e	30 10		bmi $17a0			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1790	c8		iny				iny 								; consume element
.1791	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1793	b0 08		bcs $179d			bcs 	_ETMIdentifier
.1795	20 cb 17	jsr $17cb			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1798	20 fe 17	jsr $17fe			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.179b	18		clc				clc 								; return value ok
.179c	60		rts				rts
.179d					_ETMIdentifier:
.179d	4c b7 2a	jmp $2ab7			jmp 	VARCheckSimple 				; check variables, seperate module.
.17a0					_ETMIsUnaryOrMinus:
.17a0	c8		iny				iny 								; consume element
.17a1	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17a3	d0 0e		bne $17b3			bne 	_ETMCheckUnary
.17a5	20 41 17	jsr $1741			jsr 	EXPTermValueR0 				; get a term to negate
.17a8	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17aa	20 29 31	jsr $3129			jsr 	IFloatNegate
.17ad	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17af	30 17		bmi $17c8			bmi 	_ETMUnaryType				; if so error.
.17b1	18		clc				clc
.17b2	60		rts				rts
.17b3					_ETMCheckUnary:
.17b3	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17b5	90 0e		bcc $17c5			bcc 	_ETMUnarySyntax
.17b7	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17b9	b0 0a		bcs $17c5			bcs 	_ETMUnarySyntax
.17bb	0a		asl a				asl 	a 							; make it into an index => X
.17bc	aa		tax				tax
.17bd	20 c2 17	jsr $17c2			jsr 	_ETMCallUnaryFunction 		; call the function
.17c0	18		clc				clc 								; and return it.
.17c1	60		rts				rts
.17c2					_ETMCallUnaryFunction:
.17c2	7c 74 1c	jmp ($1c74,x)			jmp 	(VectorTable,x)
.17c5					_ETMUnarySyntax:
.17c5	4c cb 25	jmp $25cb		jmp	ErrorV_syntax
.17c8					_ETMUnaryType:
.17c8	4c fb 25	jmp $25fb		jmp	ErrorV_type
.17cb					EXPExtractTokenisedInteger:
.17cb	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17cd	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17cf	64 09		stz $09				stz 	IFR0+IM1
.17d1	64 0a		stz $0a				stz 	IFR0+IM2
.17d3					_ETMConstant:
.17d3	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17d5	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17d7	b0 24		bcs $17fd			bcs 	_ETMCExit 					; no, exit.
.17d9	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17db	a5 09		lda $09				lda 	IFR0+IM1
.17dd	85 0a		sta $0a				sta 	IFR0+IM2
.17df	a5 08		lda $08				lda 	IFR0+IM0
.17e1	85 09		sta $09				sta 	IFR0+IM1
.17e3	64 08		stz $08				stz 	IFR0+IM0
.17e5	8a		txa				txa
.17e6	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17e7	66 0a		ror $0a				ror 	IFR0+IM2
.17e9	66 09		ror $09				ror 	IFR0+IM1
.17eb	66 08		ror $08				ror 	IFR0+IM0
.17ed	4a		lsr a				lsr 	a
.17ee	66 0a		ror $0a				ror 	IFR0+IM2
.17f0	66 09		ror $09				ror 	IFR0+IM1
.17f2	66 08		ror $08				ror 	IFR0+IM0
.17f4	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17f6	11 18		ora ($18),y			ora 	(codePtr),y
.17f8	85 08		sta $08				sta 	IFR0+IM0
.17fa	c8		iny				iny 								; consume, loop back
.17fb	80 d6		bra $17d3			bra 	_ETMConstant
.17fd					_ETMCExit:
.17fd	60		rts				rts
.17fe					EXPCheckDecimalFollows:
.17fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1800	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1802	d0 19		bne $181d			bne 	_ETMCDExit
.1804	c8		iny				iny 								; consume token.
.1805	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1807	5a		phy				phy									; save current position
.1808	48		pha				pha 								; save count of chars.
.1809	38		sec				sec 								; address into YX : y + codePtr+1
.180a	98		tya				tya
.180b	65 18		adc $18				adc 	codePtr
.180d	aa		tax				tax
.180e	a5 19		lda $19				lda 	codePtr+1
.1810	69 00		adc #$00			adc 	#0
.1812	a8		tay				tay
.1813	68		pla				pla 								; get count.
.1814	20 c2 2f	jsr $2fc2			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1817	7a		ply				ply 								; go to next token.
.1818	98		tya				tya
.1819	38		sec				sec
.181a	71 18		adc ($18),y			adc 	(codePtr),y
.181c	a8		tay				tay
.181d					_ETMCDExit:
.181d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.181e					EXPUnaryAbs:
.181e	20 04 17	jsr $1704			jsr 	EXPEvalNumber 					; number to R0
.1821	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1824	20 61 2d	jsr $2d61			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1827	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1828					EXPUnaryAsc:
.1828	20 2e 17	jsr $172e			jsr 	EXPEvalString 					; string to R0, zTemp0
.182b	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.182e	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1830	f0 06		beq $1838			beq 	_EXAZero 						; if so return 0
.1832	5a		phy				phy 									; otherwise get first character
.1833	a0 01		ldy #$01			ldy 	#1
.1835	b1 22		lda ($22),y			lda 	(zTemp0),y
.1837	7a		ply				ply
.1838					_EXAZero:
.1838	a2 08		ldx #$08			ldx 	#IFR0
.183a	20 20 31	jsr $3120			jsr 	IFloatSetByte
.183d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.183e					EXPUnaryChr:
.183e	20 22 17	jsr $1722			jsr 	EXPEvalInteger8 				; expr
.1841	48		pha				pha 									; push on stack
.1842	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1845	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1847	20 76 28	jsr $2876			jsr 	StringTempAllocate
.184a	68		pla				pla 									; get value back
.184b	20 ab 28	jsr $28ab			jsr 	StringTempWrite 				; write to string.
.184e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.184f					EXPUnaryDec:
.184f	20 2e 17	jsr $172e			jsr 	EXPEvalString 					; string to R0, zTemp0
.1852	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1855	5a		phy				phy 									; save position.
.1856	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1858	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.185b	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.185d	f0 3b		beq $189a			beq 	_EUDError 						; empty string is not legit.
.185f	aa		tax				tax 									; count in X.
.1860	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1862					_EUDLoop:
.1862	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.1864	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1866	90 02		bcc $186a			bcc 	_EUDNoCase
.1868	e9 20		sbc #$20			sbc 	#$20
.186a					_EUDNoCase:
.186a	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.186c	90 2c		bcc $189a			bcc 	_EUDError
.186e	c9 3a		cmp #$3a			cmp 	#'9'+1
.1870	90 0a		bcc $187c			bcc 	_EUDOkay
.1872	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1874	90 24		bcc $189a			bcc 	_EUDError
.1876	c9 47		cmp #$47			cmp 	#'F'+1
.1878	b0 20		bcs $189a			bcs 	_EUDError
.187a	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.187c					_EUDOkay:
.187c	29 0f		and #$0f			and 	#15 							; make constant
.187e	da		phx				phx
.187f	48		pha				pha
.1880	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1882	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1885	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1888	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.188b	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.188e	68		pla				pla 									; pop constant and OR in
.188f	fa		plx				plx
.1890	05 08		ora $08				ora 	IFR0+IM0
.1892	85 08		sta $08				sta 	IFR0+IM0
.1894	c8		iny				iny 									; next char
.1895	ca		dex				dex 									; done all characters ?
.1896	d0 ca		bne $1862			bne 	_EUDLoop
.1898	7a		ply				ply
.1899	60		rts				rts
.189a					_EUDError:
.189a	4c ed 25	jmp $25ed		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.189d					EXPUnaryInlineDec:
.189d	4c cb 25	jmp $25cb		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18a0					EXPUnaryPeek:
.18a0	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 				; number to R0
.18a3	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.18a6	b2 08		lda ($08)			lda 	(IFR0)
.18a8	a2 08		ldx #$08			ldx 	#IFR0
.18aa	20 20 31	jsr $3120			jsr 	IFloatSetByte
.18ad	60		rts				rts
.18ae					EXPUnaryDeek:
.18ae	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 				; number to R0
.18b1	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.18b4	5a		phy				phy
.18b5	a0 01		ldy #$01			ldy 	#1
.18b7	b1 08		lda ($08),y			lda 	(IFR0),y
.18b9	7a		ply				ply
.18ba	48		pha				pha
.18bb	b2 08		lda ($08)			lda 	(IFR0)
.18bd	a2 08		ldx #$08			ldx 	#IFR0
.18bf	20 20 31	jsr $3120			jsr 	IFloatSetByte
.18c2	68		pla				pla
.18c3	85 09		sta $09				sta 	IFR0+IM1
.18c5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18c6					EXPUnaryNull:
.18c6	20 41 17	jsr $1741			jsr 	EXPTermValueR0
.18c9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18ca					EXPUnaryFrac:
.18ca	20 04 17	jsr $1704			jsr 	EXPEvalNumber 					; number to R0
.18cd	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.18d0	20 c9 2d	jsr $2dc9			jsr 	IFloatFractionalR0 				; get fractional bit.
.18d3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18d4					EXPUnaryInkey:
.18d4	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.18d7	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18d9	20 76 28	jsr $2876			jsr 	StringTempAllocate
.18dc	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18df	b0 06		bcs $18e7			bcs 	_EUIExit
.18e1	20 eb ff	jsr $ffeb			jsr 	OSReadKeyboard 					; otherwise get it.
.18e4	20 ab 28	jsr $28ab			jsr 	StringTempWrite
.18e7					_EUIExit:
.18e7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18e8					EXPUnaryInt:
.18e8	20 04 17	jsr $1704			jsr 	EXPEvalNumber 					; number to R0
.18eb	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; check for )
.18ee	20 1f 2e	jsr $2e1f			jsr 	IFloatIntegerR0 				; force to integer.
.18f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18f2					EXPUnaryLen:
.18f2	20 2e 17	jsr $172e			jsr 	EXPEvalString 					; string to R0, zTemp0
.18f5	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.18f8	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.18fa	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.18fc	20 20 31	jsr $3120			jsr 	IFloatSetByte
.18ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1900					EXPUnaryParenthesis:
.1900	20 04 17	jsr $1704			jsr 	EXPEvalNumber 					; number to R0
.1903	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1906	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1907					EXPUnaryRnd:
.1907	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; number to R0
.190a	20 80 27	jsr $2780			jsr 	ERRCheckRParen 				; )
.190d	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.190f	20 26 19	jsr $1926			jsr 	EXPLoadInRandom
.1912	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1914	85 0b		sta $0b				sta 	IFR0+IExp
.1916	60		rts				rts
.1917					ExpUnaryRand:
.1917	20 0f 17	jsr $170f			jsr 	EXPEvalInteger 				; integer to R0
.191a	20 80 27	jsr $2780			jsr 	ERRCheckRParen 				; )
.191d	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.191f	20 26 19	jsr $1926			jsr 	EXPLoadInRandom
.1922	20 8e 2c	jsr $2c8e			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1925	60		rts				rts
.1926					EXPLoadInRandom:
.1926	20 1e 31	jsr $311e			jsr 	IFloatSetZero 				; zero it
.1929	20 3b 19	jsr $193b			jsr 	EXPRandom32 				; do a 23 bit number.
.192c	95 00		sta $00,x			sta 	IM0,x
.192e	20 3b 19	jsr $193b			jsr 	EXPRandom32
.1931	95 01		sta $01,x			sta 	IM1,x
.1933	20 3b 19	jsr $193b			jsr 	EXPRandom32
.1936	29 7f		and #$7f			and 	#$7F
.1938	95 02		sta $02,x			sta 	IM2,x
.193a	60		rts				rts
.193b					EXPRandom32:
.193b	5a		phy				phy
.193c	a0 08		ldy #$08			ldy 	#8
.193e	ad 12 05	lda $0512			lda 	EXPSeed+0
.1941	0d 13 05	ora $0513			ora 	EXPSeed+1
.1944	0d 14 05	ora $0514			ora 	EXPSeed+2
.1947	0d 15 05	ora $0515			ora 	EXPSeed+3
.194a	d0 08		bne $1954			bne 	_EXPRNoReset
.194c	ee 12 05	inc $0512			inc 	EXPSeed+0
.194f	a0 10		ldy #$10			ldy 	#16
.1951	8c 15 05	sty $0515			sty 	EXPSeed+3
.1954					_EXPRNoReset:
.1954	ad 12 05	lda $0512			lda 	EXPSeed+0
.1957					_EXPRLoop:
.1957	0a		asl a				asl		a
.1958	2e 13 05	rol $0513			rol 	EXPSeed+1
.195b	2e 14 05	rol $0514			rol 	EXPSeed+2
.195e	2e 15 05	rol $0515			rol 	EXPSeed+3
.1961	90 02		bcc $1965			bcc 	_EXPRNoEOR
.1963	49 c5		eor #$c5			eor 	#$C5
.1965					_EXPRNoEOR:
.1965	88		dey				dey
.1966	d0 ef		bne $1957			bne 	_EXPRLoop
.1968	8d 12 05	sta $0512			sta 	EXPSeed+0
.196b	7a		ply				ply
.196c	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.196d					EXPUnarySgn:
.196d	20 04 17	jsr $1704			jsr 	EXPEvalNumber 					; number to R0
.1970	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1973	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1975	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister
.1978	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.197a	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.197d	a2 0c		ldx #$0c			ldx 	#IFR1
.197f	20 ed 2d	jsr $2ded			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1982	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1983					EXPUnarySqr:
.1983	20 04 17	jsr $1704			jsr 	EXPEvalNumber 					; number to R0
.1986	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1989	20 69 2d	jsr $2d69			jsr 	IFloatSquareRootR0 				; square root.
.198c	b0 01		bcs $198f			bcs 	_EUSValue 						; error check.
.198e	60		rts				rts
.198f					_EUSValue:
.198f	4c dc 25	jmp $25dc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1992					EXPUnaryHex:
.1992	20 0f 17	jsr $170f			jsr 	EXPEvalInteger 					; expr
.1995	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1998	5a		phy				phy
.1999	a9 10		lda #$10			lda 	#16
.199b	20 c0 2e	jsr $2ec0			jsr 	IFloatIntegerToStringR0
.199e	80 0a		bra $19aa			bra 	EUSMain
.19a0					EXPUnaryStr:
.19a0	20 04 17	jsr $1704			jsr 	EXPEvalNumber 					; expr
.19a3	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.19a6	5a		phy				phy
.19a7	20 1b 2f	jsr $2f1b			jsr 	IFloatFloatToStringR0 			; convert to string
.19aa					EUSMain:
.19aa	b0 19		bcs $19c5			bcs 	_EUSError
.19ac	86 22		stx $22				stx 	zTemp0 							; save string address
.19ae	84 23		sty $23				sty 	zTemp0+1
.19b0	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19b2	20 76 28	jsr $2876			jsr 	StringTempAllocate
.19b5	b2 22		lda ($22)			lda 	(zTemp0) 						; get count
.19b7	aa		tax				tax 									; count in X
.19b8	a0 01		ldy #$01			ldy 	#1
.19ba					_EUSCopy:
.19ba	b1 22		lda ($22),y			lda 	(zTemp0),y
.19bc	c8		iny				iny
.19bd	20 ab 28	jsr $28ab			jsr 	StringTempWrite
.19c0	ca		dex				dex
.19c1	d0 f7		bne $19ba			bne	 	_EUSCopy
.19c3	7a		ply				ply
.19c4	60		rts				rts
.19c5					_EUSError:
.19c5	4c dc 25	jmp $25dc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19c8					EXPUnaryInlineString:
.19c8	18		clc				clc 								; physical address -> IM0,1
.19c9	98		tya				tya 								; put the actual address in IM0
.19ca	65 18		adc $18				adc 	codePtr
.19cc	85 08		sta $08				sta 	IFR0+IM0
.19ce	a5 19		lda $19				lda 	codePtr+1
.19d0	69 00		adc #$00			adc 	#0
.19d2	85 09		sta $09				sta 	IFR0+IM1
.19d4	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19d6	a9 80		lda #$80			lda 	#$80
.19d8	85 0b		sta $0b				sta 	IFR0+IExp
.19da	98		tya				tya	 								; skip over it.
.19db	38		sec				sec
.19dc	71 18		adc ($18),y			adc 	(codePtr),y
.19de	a8		tay				tay
.19df	60		rts				rts
.19e0					_EXPUISRange:
.19e0	4c dc 25	jmp $25dc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19e3					EXPUnaryLeft:
.19e3	20 29 1a	jsr $1a29			jsr 	EXPCommonStart 					; <string>,
.19e6	48		pha				pha 									; save string address on stack
.19e7	da		phx				phx
.19e8	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19ea	48		pha				pha
.19eb	20 22 17	jsr $1722			jsr 	EXPEvalInteger8 				; characters to do
.19ee	80 44		bra $1a34			bra 	EXPSubstringCommon
.19f0					EXPUnaryRight:
.19f0	20 29 1a	jsr $1a29			jsr 	EXPCommonStart 					; <string>,
.19f3	48		pha				pha 									; save string address on stack
.19f4	da		phx				phx
.19f5	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19f7	48		pha				pha
.19f8	20 22 17	jsr $1722			jsr 	EXPEvalInteger8 				; characters to do
.19fb	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.19fd	68		pla				pla
.19fe	38		sec				sec
.19ff	e5 22		sbc $22				sbc 	zTemp0
.1a01	b0 02		bcs $1a05			bcs 	_EUROffLeft
.1a03	a9 00		lda #$00			lda 	#0
.1a05					_EUROffLeft:
.1a05	48		pha				pha 									; start pos
.1a06	a9 ff		lda #$ff			lda 	#255
.1a08	80 2a		bra $1a34			bra 	EXPSubstringCommon
.1a0a					EXPUnaryMid:
.1a0a	20 29 1a	jsr $1a29			jsr 	EXPCommonStart 					; <string>,
.1a0d	48		pha				pha 									; save string address on stack
.1a0e	da		phx				phx
.1a0f	20 22 17	jsr $1722			jsr 	EXPEvalInteger8 				; characters start
.1a12	f0 12		beq $1a26			beq 	_EUSError 						; 1 is left
.1a14	3a		dec a				dec 	a 								; zero based.
.1a15	48		pha				pha
.1a16	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a18	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a1a	f0 04		beq $1a20			beq 	_EUMLength 						; if so m is provided
.1a1c	a9 ff		lda #$ff			lda 	#255 							; default m
.1a1e	80 14		bra $1a34			bra 	EXPSubstringCommon
.1a20					_EUMLength:
.1a20	c8		iny				iny 									; consume comma
.1a21	20 22 17	jsr $1722			jsr 	EXPEvalInteger8 				; characters to do
.1a24	80 0e		bra $1a34			bra 	EXPSubstringCommon
.1a26					_EUSError:
.1a26	4c ed 25	jmp $25ed		jmp	ErrorV_value
.1a29					EXPCommonStart:
.1a29	20 2e 17	jsr $172e			jsr 	EXPEvalString
.1a2c	20 88 27	jsr $2788			jsr 	ERRCheckComma
.1a2f	a5 08		lda $08				lda 	IFR0+IM0
.1a31	a6 09		ldx $09				ldx 	IFR0+IM1
.1a33	60		rts				rts
.1a34					EXPSubstringCommon:
.1a34	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a36	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; check right bracket.
.1a39	68		pla				pla 									; start position
.1a3a	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a3c	fa		plx				plx 									; get string address to zTemp2.
.1a3d	86 27		stx $27				stx 	zTemp2+1
.1a3f	68		pla				pla
.1a40	85 26		sta $26				sta 	zTemp2
.1a42	38		sec				sec 									; length - start is the max count of chars
.1a43	b2 26		lda ($26)			lda 	(zTemp2)
.1a45	e5 25		sbc $25				sbc 	zTemp1+1
.1a47	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a49	b0 02		bcs $1a4d			bcs 	_EXPSSNoTrim
.1a4b	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a4d					_EXPSSNoTrim:
.1a4d	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a4f	20 76 28	jsr $2876			jsr 	StringTempAllocate 				; allocate memory for it.
.1a52	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a54	f0 15		beq $1a6b			beq 	_EXPSSExit
.1a56	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a58	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a5a	b0 0f		bcs $1a6b			bcs 	_EXPSSExit
.1a5c	5a		phy				phy
.1a5d	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a5f	c8		iny				iny 									; +1 for the length byte
.1a60					_EXPSSCopy:
.1a60	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a62	20 ab 28	jsr $28ab			jsr 	StringTempWrite
.1a65	c8		iny				iny
.1a66	c6 24		dec $24				dec 	zTemp1
.1a68	d0 f6		bne $1a60			bne 	_EXPSSCopy
.1a6a	7a		ply				ply
.1a6b					_EXPSSExit:
.1a6b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a6c					EXPUnaryVal:
.1a6c	20 2e 17	jsr $172e			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a6f	20 80 27	jsr $2780			jsr 	ERRCheckRParen 					; )
.1a72	20 76 1a	jsr $1a76			jsr 	VALConversionZTemp0
.1a75	60		rts				rts
.1a76					VALConversionZTemp0:
.1a76	5a		phy				phy
.1a77	18		clc				clc
.1a78	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a7a	69 01		adc #$01			adc 	#1
.1a7c	aa		tax				tax
.1a7d	a5 23		lda $23				lda 	zTemp0+1
.1a7f	69 00		adc #$00			adc 	#0
.1a81	a8		tay				tay
.1a82	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a84	20 82 2f	jsr $2f82			jsr 	IFloatStringToFloatR0 			; do conversion
.1a87	b0 02		bcs $1a8b			bcs 	_EUVError
.1a89	7a		ply				ply
.1a8a	60		rts				rts
.1a8b					_EUVError:
.1a8b	4c ed 25	jmp $25ed		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a8e					BinaryPrecedence:
>1a8e	02					.byte	 2	; $ef =
>1a8f	02					.byte	 2	; $f0 <>
>1a90	02					.byte	 2	; $f1 <=
>1a91	02					.byte	 2	; $f2 <
>1a92	02					.byte	 2	; $f3 >=
>1a93	02					.byte	 2	; $f4 >
>1a94	01					.byte	 1	; $f5 XOR
>1a95	01					.byte	 1	; $f6 OR
>1a96	01					.byte	 1	; $f7 AND
>1a97	04					.byte	 4	; $f8 DIV
>1a98	04					.byte	 4	; $f9 MOD
>1a99	04					.byte	 4	; $fa <<
>1a9a	04					.byte	 4	; $fb >>
>1a9b	04					.byte	 4	; $fc /
>1a9c	04					.byte	 4	; $fd *
>1a9d	03					.byte	 3	; $fe -
>1a9e	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1a9f					StructureOffsets:
>1a9f	01					.byte	1  	; $80 REPEAT
>1aa0	ff					.byte	255	; $81 UNTIL
>1aa1	01					.byte	1  	; $82 WHILE
>1aa2	ff					.byte	255	; $83 WEND
>1aa3	01					.byte	1  	; $84 IF
>1aa4	ff					.byte	255	; $85 ENDIF
>1aa5	01					.byte	1  	; $86 DO
>1aa6	ff					.byte	255	; $87 LOOP
>1aa7	01					.byte	1  	; $88 PROC
>1aa8	ff					.byte	255	; $89 ENDPROC
>1aa9	01					.byte	1  	; $8a FOR
>1aaa	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1aab					StandardTokens:
>1aab	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1ab2	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ab8	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1abe	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1ac3	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ac6	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1acc	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1acf	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1ad4	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ad9	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ae1	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ae5	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1aea	00					.byte	$00                                     	; $8c [[end]]
>1aeb	00					.byte	$00                                     	; $8d [[shift]]
>1aec	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1af1	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1af6	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1af9	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1afe	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b02	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b08	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b0e	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b13	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b17	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b1b	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b20	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b22	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b24	01 3a					.byte	$01,$3a                                 	; $9b :
>1b26	01 27					.byte	$01,$27                                 	; $9c '
>1b28	01 29					.byte	$01,$29                                 	; $9d )
>1b2a	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1b2f	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1b34	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1b39	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1b3e	00					.byte	0											; $a2
>1b3f	00					.byte	0											; $a3
>1b40	00					.byte	0											; $a4
>1b41	00					.byte	0											; $a5
>1b42	00					.byte	0											; $a6
>1b43	00					.byte	0											; $a7
>1b44	00					.byte	0											; $a8
>1b45	00					.byte	0											; $a9
>1b46	00					.byte	0											; $aa
>1b47	00					.byte	0											; $ab
>1b48	00					.byte	0											; $ac
>1b49	00					.byte	0											; $ad
>1b4a	00					.byte	0											; $ae
>1b4b	00					.byte	0											; $af
>1b4c	00					.byte	0											; $b0
>1b4d	00					.byte	0											; $b1
>1b4e	00					.byte	0											; $b2
>1b4f	00					.byte	0											; $b3
>1b50	00					.byte	0											; $b4
>1b51	00					.byte	0											; $b5
>1b52	00					.byte	0											; $b6
>1b53	00					.byte	0											; $b7
>1b54	00					.byte	0											; $b8
>1b55	00					.byte	0											; $b9
>1b56	00					.byte	0											; $ba
>1b57	00					.byte	0											; $bb
>1b58	00					.byte	0											; $bc
>1b59	00					.byte	0											; $bd
>1b5a	00					.byte	0											; $be
>1b5b	00					.byte	0											; $bf
>1b5c	00					.byte	0											; $c0
>1b5d	00					.byte	0											; $c1
>1b5e	00					.byte	0											; $c2
>1b5f	00					.byte	0											; $c3
>1b60	00					.byte	0											; $c4
>1b61	00					.byte	0											; $c5
>1b62	00					.byte	0											; $c6
>1b63	00					.byte	0											; $c7
>1b64	00					.byte	0											; $c8
>1b65	00					.byte	0											; $c9
>1b66	00					.byte	0											; $ca
>1b67	00					.byte	0											; $cb
>1b68	00					.byte	0											; $cc
>1b69	00					.byte	0											; $cd
>1b6a	00					.byte	0											; $ce
>1b6b	00					.byte	0											; $cf
>1b6c	00					.byte	0											; $d0
>1b6d	00					.byte	0											; $d1
>1b6e	00					.byte	0											; $d2
>1b6f	00					.byte	0											; $d3
>1b70	00					.byte	0											; $d4
>1b71	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b77	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b7d	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b85	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b8c	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b92	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1b98	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1b9d	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1ba2	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1ba7	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1bac	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bb1	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bb7	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bbc	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bc4	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bcb	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bd0	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1bd5	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1bdb	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1be0	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1be6	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1beb	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1bf1	01 28					.byte	$01,$28                                 	; $eb (
>1bf3	01 24					.byte	$01,$24                                 	; $ec $
>1bf5	00					.byte	$00                                     	; $ed [[decimal]]
>1bf6	00					.byte	$00                                     	; $ee [[string]]
>1bf7	01 3d					.byte	$01,$3d                                 	; $ef =
>1bf9	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1bfc	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1bff	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c01	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c04	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c06	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c0a	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c0d	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c11	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c15	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c19	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c1c	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c1f	01 2f					.byte	$01,$2f                                 	; $fc /
>1c21	01 2a					.byte	$01,$2a                                 	; $fd *
>1c23	01 2d					.byte	$01,$2d                                 	; $fe -
>1c25	01 2b					.byte	$01,$2b                                 	; $ff +
>1c27	ff					.byte	$FF
.1c28					AlternateTokens:
>1c28	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1c2e	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1c32	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1c36	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1c3b	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1c3f	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1c46	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1c4b	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1c50	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1c55	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1c5b	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1c60	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1c67	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1c6f	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1c73	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c74					VectorTable:
>1c74	bb 24					.word	Command_REPEAT           ; $80 REPEAT
>1c76	c4 24					.word	Command_UNTIL            ; $81 UNTIL
>1c78	9e 25					.word	Command_WHILE            ; $82 WHILE
>1c7a	bf 25					.word	Command_WEND             ; $83 WEND
>1c7c	91 24					.word	IfCommand                ; $84 IF
>1c7e	ba 24					.word	EndIf                    ; $85 ENDIF
>1c80	13 23					.word	Command_DO               ; $86 DO
>1c82	2b 23					.word	Command_LOOP             ; $87 LOOP
>1c84	44 15					.word	NoExec08                 ; $88 PROC
>1c86	07 23					.word	Command_ENDPROC          ; $89 ENDPROC
>1c88	34 23					.word	Command_FOR              ; $8a FOR
>1c8a	c1 23					.word	Command_NEXT             ; $8b NEXT
>1c8c	c5 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c8e	21 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c90	b3 24					.word	ElseCode                 ; $8e ELSE
>1c92	44 15					.word	NoExec01                 ; $8f THEN
>1c94	44 15					.word	NoExec02                 ; $90 TO
>1c96	44 15					.word	NoExec03                 ; $91 STEP
>1c98	b7 12					.word	CommandLET               ; $92 LET
>1c9a	0c 12					.word	Command_Print            ; $93 PRINT
>1c9c	05 12					.word	Command_Input            ; $94 INPUT
>1c9e	cb 22					.word	Command_CALL             ; $95 CALL
>1ca0	2f 15					.word	Command_Sys              ; $96 SYS
>1ca2	7e 14					.word	Command_REM              ; $97 REM
>1ca4	1c 23					.word	Command_EXIT             ; $98 EXIT
>1ca6	44 15					.word	NoExec04                 ; $99 ,
>1ca8	44 15					.word	NoExec05                 ; $9a ;
>1caa	44 15					.word	NoExec06                 ; $9b :
>1cac	7e 14					.word	Command_REM2             ; $9c '
>1cae	44 15					.word	NoExec07                 ; $9d )
>1cb0	ae 11					.word	Command_Poke             ; $9e POKE
>1cb2	ab 11					.word	Command_Doke             ; $9f DOKE
>1cb4	0a 14					.word	Command_READ             ; $a0 READ
>1cb6	71 14					.word	Command_DATA             ; $a1 DATA
>1cb8	fd 28					.word	NotImplemented           ; $a2
>1cba	fd 28					.word	NotImplemented           ; $a3
>1cbc	fd 28					.word	NotImplemented           ; $a4
>1cbe	fd 28					.word	NotImplemented           ; $a5
>1cc0	fd 28					.word	NotImplemented           ; $a6
>1cc2	fd 28					.word	NotImplemented           ; $a7
>1cc4	fd 28					.word	NotImplemented           ; $a8
>1cc6	fd 28					.word	NotImplemented           ; $a9
>1cc8	fd 28					.word	NotImplemented           ; $aa
>1cca	fd 28					.word	NotImplemented           ; $ab
>1ccc	fd 28					.word	NotImplemented           ; $ac
>1cce	fd 28					.word	NotImplemented           ; $ad
>1cd0	fd 28					.word	NotImplemented           ; $ae
>1cd2	fd 28					.word	NotImplemented           ; $af
>1cd4	fd 28					.word	NotImplemented           ; $b0
>1cd6	fd 28					.word	NotImplemented           ; $b1
>1cd8	fd 28					.word	NotImplemented           ; $b2
>1cda	fd 28					.word	NotImplemented           ; $b3
>1cdc	fd 28					.word	NotImplemented           ; $b4
>1cde	fd 28					.word	NotImplemented           ; $b5
>1ce0	fd 28					.word	NotImplemented           ; $b6
>1ce2	fd 28					.word	NotImplemented           ; $b7
>1ce4	fd 28					.word	NotImplemented           ; $b8
>1ce6	fd 28					.word	NotImplemented           ; $b9
>1ce8	fd 28					.word	NotImplemented           ; $ba
>1cea	fd 28					.word	NotImplemented           ; $bb
>1cec	fd 28					.word	NotImplemented           ; $bc
>1cee	fd 28					.word	NotImplemented           ; $bd
>1cf0	fd 28					.word	NotImplemented           ; $be
>1cf2	fd 28					.word	NotImplemented           ; $bf
>1cf4	fd 28					.word	NotImplemented           ; $c0
>1cf6	fd 28					.word	NotImplemented           ; $c1
>1cf8	fd 28					.word	NotImplemented           ; $c2
>1cfa	fd 28					.word	NotImplemented           ; $c3
>1cfc	fd 28					.word	NotImplemented           ; $c4
>1cfe	fd 28					.word	NotImplemented           ; $c5
>1d00	fd 28					.word	NotImplemented           ; $c6
>1d02	fd 28					.word	NotImplemented           ; $c7
>1d04	fd 28					.word	NotImplemented           ; $c8
>1d06	fd 28					.word	NotImplemented           ; $c9
>1d08	fd 28					.word	NotImplemented           ; $ca
>1d0a	fd 28					.word	NotImplemented           ; $cb
>1d0c	fd 28					.word	NotImplemented           ; $cc
>1d0e	fd 28					.word	NotImplemented           ; $cd
>1d10	fd 28					.word	NotImplemented           ; $ce
>1d12	fd 28					.word	NotImplemented           ; $cf
>1d14	fd 28					.word	NotImplemented           ; $d0
>1d16	fd 28					.word	NotImplemented           ; $d1
>1d18	fd 28					.word	NotImplemented           ; $d2
>1d1a	fd 28					.word	NotImplemented           ; $d3
>1d1c	fd 28					.word	NotImplemented           ; $d4
>1d1e	ae 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d20	a0 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d22	f0 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d24	e3 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d26	0a 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d28	a0 19					.word	EXPUnaryStr              ; $da STR$(
>1d2a	6c 1a					.word	EXPUnaryVal              ; $db VAL(
>1d2c	6d 19					.word	EXPUnarySgn              ; $dc SGN(
>1d2e	1e 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d30	f2 18					.word	EXPUnaryLen              ; $de LEN(
>1d32	83 19					.word	EXPUnarySqr              ; $df SQR(
>1d34	3e 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d36	28 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d38	d4 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d3a	fd 28					.word	NotImplemented           ; $e3 EVENT(
>1d3c	fd 28					.word	NotImplemented           ; $e4 TIME
>1d3e	e8 18					.word	EXPUnaryInt              ; $e5 INT(
>1d40	ca 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d42	4f 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d44	92 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d46	07 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d48	17 19					.word	ExpUnaryRand             ; $ea RAND(
>1d4a	00 19					.word	EXPUnaryParenthesis      ; $eb (
>1d4c	c6 18					.word	EXPUnaryNull             ; $ec $
>1d4e	9d 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d50	c8 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d52	01 16					.word	EXPCompareEqual          ; $ef =
>1d54	1c 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d56	25 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d58	0a 16					.word	EXPCompareLess           ; $f2 <
>1d5a	2e 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d5c	13 16					.word	EXPCompareGreater        ; $f4 >
>1d5e	ae 15					.word	EXPBinXor                ; $f5 XOR
>1d60	a2 15					.word	EXPBinOr                 ; $f6 OR
>1d62	96 15					.word	EXPBinAnd                ; $f7 AND
>1d64	6e 15					.word	EXPBinIDiv               ; $f8 DIV
>1d66	7f 15					.word	EXPBinIMod               ; $f9 MOD
>1d68	79 16					.word	EXPBinLeft               ; $fa <<
>1d6a	81 16					.word	EXPBinRight              ; $fb >>
>1d6c	62 15					.word	EXPBinFDiv               ; $fc /
>1d6e	59 15					.word	EXPBinMul                ; $fd *
>1d70	50 15					.word	EXPBinSub                ; $fe -
>1d72	47 15					.word	EXPBinAdd                ; $ff +
.1d74					AlternateVectorTable:
>1d74	1b 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1d76	01 14					.word	Command_NEW              ; $8d81 NEW
>1d78	b9 14					.word	Command_RUN              ; $8d82 RUN
>1d7a	2c 15					.word	Command_STOP             ; $8d83 STOP
>1d7c	29 15					.word	Command_END              ; $8d84 END
>1d7e	0d 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1d80	31 13					.word	Command_LIST             ; $8d86 LIST
>1d82	fd 28					.word	NotImplemented           ; $8d87 SAVE
>1d84	fd 28					.word	NotImplemented           ; $8d88 LOAD
>1d86	77 24					.word	Command_GOSUB            ; $8d89 GOSUB
>1d88	d5 11					.word	Command_GOTO             ; $8d8a GOTO
>1d8a	85 24					.word	Command_RETURN           ; $8d8b RETURN
>1d8c	8b 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1d8e	8f 10					.word	CommandDIM               ; $8d8d DIM

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d90					TOKDetokenise:
.1d90	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d92	84 27		sty $27				sty 	zTemp2+1
.1d94	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d97					_TOKDLoop:
.1d97	20 c6 1d	jsr $1dc6			jsr 	TOKDGet 					; get next
.1d9a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1d9c	f0 26		beq $1dc4			beq 	_TOKDExit
.1d9e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1da0	f0 1d		beq $1dbf			beq 	_TOKDDataItem
.1da2	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1da4	f0 19		beq $1dbf			beq 	_TOKDDataItem
.1da6	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1da8	10 05		bpl $1daf			bpl 	_TOKDNotToken
.1daa	20 90 1e	jsr $1e90			jsr 	TOKDToken 					; token to text.
.1dad	80 e8		bra $1d97			bra 	_TOKDLoop
.1daf					_TOKDNotToken:
.1daf	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1db1	90 05		bcc $1db8			bcc 	_TOKDNotIdentifier
.1db3	20 01 1e	jsr $1e01			jsr 	TOKDIdentifier
.1db6	80 df		bra $1d97			bra 	_TOKDLoop
.1db8					_TOKDNotIdentifier:
.1db8	a0 0a		ldy #$0a			ldy 	#10
.1dba	20 4a 1e	jsr $1e4a			jsr 	TOKDInteger
.1dbd	80 d8		bra $1d97			bra 	_TOKDLoop
.1dbf					_TOKDDataItem:
.1dbf	20 dc 1d	jsr $1ddc			jsr 	TOKDDataItem
.1dc2	80 d3		bra $1d97			bra 	_TOKDLoop
.1dc4					_TOKDExit:
.1dc4	18		clc				clc
.1dc5	60		rts				rts
.1dc6	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1dc8	e6 26		inc $26				inc 	zTemp2
.1dca	d0 02		bne $1dce			bne 	_TKDGExit
.1dcc	e6 27		inc $27				inc 	zTemp2+1
.1dce					_TKDGExit:
.1dce	60		rts				rts
.1dcf					TOKDOutput:
.1dcf	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1dd2	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1dd5					TOKSetDetokeniseOutput:
.1dd5	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1dd8	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1ddb	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1ddc					TOKDDataItem:
.1ddc	a8		tay				tay 								; type in Y
.1ddd	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1ddf	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1de1	f0 02		beq $1de5			beq 	_TOKDDIsString
.1de3	a9 2e		lda #$2e			lda 	#'.'
.1de5					_TOKDDIsString:
.1de5	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput 					; dump it
.1de8	20 c6 1d	jsr $1dc6			jsr 	TOKDGet 					; get length into X
.1deb	aa		tax				tax
.1dec					_TOKDDOutput:
.1dec	ca		dex				dex 								; are we complete
.1ded	30 08		bmi $1df7			bmi 	_TOKDDEnd
.1def	20 c6 1d	jsr $1dc6			jsr 	TOKDGet 					; get character and output it
.1df2	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1df5	80 f5		bra $1dec			bra 	_TOKDDOutput
.1df7					_TOKDDEnd:
.1df7	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1df9	d0 05		bne $1e00			bne 	_TOKDDNotString
.1dfb	a9 22		lda #$22			lda 	#'"'
.1dfd	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1e00					_TOKDDNotString:
.1e00	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1e01					TOKDIdentifier:
.1e01	a0 ff		ldy #$ff			ldy 	#$FF
.1e03	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1e06					_TOKDLoop:
.1e06	a8		tay				tay 								; token in Y
.1e07	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1e09	c0 64		cpy #$64			cpy 	#$64
.1e0b	f0 11		beq $1e1e			beq 	_TOKDIOutput
.1e0d	a9 5f		lda #$5f			lda 	#'_'
.1e0f	c0 65		cpy #$65			cpy 	#$65
.1e11	f0 0b		beq $1e1e			beq 	_TOKDIOutput
.1e13	98		tya				tya 								; handle a-z
.1e14	18		clc				clc
.1e15	69 21		adc #$21			adc	 	#$21
.1e17	c0 5a		cpy #$5a			cpy 	#$5A
.1e19	90 03		bcc $1e1e			bcc 	_TOKDIOutput
.1e1b	38		sec				sec 								; handle 0-9
.1e1c	e9 4b		sbc #$4b			sbc 	#$4B
.1e1e					_TOKDIOutput:
.1e1e	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1e21	10 08		bpl $1e2b			bpl 	_TOKDINoSpacing
.1e23	48		pha				pha
.1e24	20 cd 1e	jsr $1ecd			jsr 	TOKDSpacing
.1e27	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1e2a	68		pla				pla
.1e2b					_TOKDINoSpacing:
.1e2b	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1e2e	20 c6 1d	jsr $1dc6			jsr 	TOKDGet 					; get next token
.1e31	c9 7c		cmp #$7c			cmp 	#$7C
.1e33	90 d1		bcc $1e06			bcc 	_TOKDLoop
.1e35	f0 12		beq $1e49			beq 	_TOKDIExit 					; it's a number, no tail.
.1e37	4a		lsr a				lsr 	a 							; string ?
.1e38	90 07		bcc $1e41			bcc 	_TOKDICheckArray
.1e3a	48		pha				pha
.1e3b	a9 24		lda #$24			lda 	#"$"
.1e3d	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1e40	68		pla				pla
.1e41					_TOKDICheckArray:
.1e41	4a		lsr a				lsr 	a 							; array ?
.1e42	90 05		bcc $1e49			bcc 	_TOKDIExit
.1e44	a9 28		lda #$28			lda 	#"("
.1e46	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1e49					_TOKDIExit:
.1e49	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e4a					TOKDInteger:
.1e4a	5a		phy				phy 								; save base
.1e4b	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e4d	20 20 31	jsr $3120			jsr 	IFloatSetByte
.1e50					_TOKDILoop:
.1e50	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e52	c9 40		cmp #$40			cmp 	#$40
.1e54	b0 1d		bcs $1e73			bcs 	_TOKDIHaveInteger
.1e56	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e58	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1e5b	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1e5e	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1e61	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1e64	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1e67	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.1e6a	20 c6 1d	jsr $1dc6			jsr 	TOKDGet 					; OR byte in.
.1e6d	05 08		ora $08				ora 	IFR0+IM0
.1e6f	85 08		sta $08				sta 	IFR0+IM0
.1e71	80 dd		bra $1e50			bra 	_TOKDILoop
.1e73					_TOKDIHaveInteger:
.1e73	7a		ply				ply 								; restore base
.1e74	98		tya				tya 								; base in A
.1e75	20 c0 2e	jsr $2ec0			jsr 	IFloatIntegerToStringR0
.1e78	86 22		stx $22				stx 	zTemp0
.1e7a	84 23		sty $23				sty 	zTemp0+1
.1e7c	b2 22		lda ($22)			lda 	(zTemp0)
.1e7e	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1e80	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e82	20 cd 1e	jsr $1ecd			jsr 	TOKDSpacing 				; check spacing okay.
.1e85					_TOKDOutput:
.1e85	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e87	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1e8a	c8		iny				iny
.1e8b	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e8d	d0 f6		bne $1e85			bne 	_TOKDOutput
.1e8f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e90					TOKDToken:
.1e90	a2 ab		ldx #$ab			ldx 	#StandardTokens & $FF 		; standard table
.1e92	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e94	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1e96	d0 07		bne $1e9f			bne 	_TOKDSearch
.1e98	20 c6 1d	jsr $1dc6			jsr 	TOKDGet 					; get next
.1e9b	a2 28		ldx #$28			ldx 	#AlternateTokens & $FF 		; alt table
.1e9d	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.1e9f					_TOKDSearch:
.1e9f	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1ea1	84 23		sty $23				sty 	zTemp0+1
.1ea3	aa		tax				tax 								; token ID in X.
.1ea4					_TOKDFind:
.1ea4	ca		dex				dex 								; reached the start
.1ea5	10 0d		bpl $1eb4			bpl 	_TOKDFound
.1ea7	38		sec				sec 								; go to next entry
.1ea8	b2 22		lda ($22)			lda 	(zTemp0)
.1eaa	65 22		adc $22				adc 	zTemp0
.1eac	85 22		sta $22				sta 	zTemp0
.1eae	90 f4		bcc $1ea4			bcc 	_TOKDFind
.1eb0	e6 23		inc $23				inc 	zTemp0+1
.1eb2	80 f0		bra $1ea4			bra 	_TOKDFind
.1eb4					_TOKDFound:
.1eb4	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1eb6	f0 14		beq $1ecc			beq 	_TOKDExit
.1eb8	aa		tax				tax
.1eb9	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ebb	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing first character,
.1ebd	20 cd 1e	jsr $1ecd			jsr 	TOKDSpacing
.1ec0					_TOKDOutput:
.1ec0	b1 22		lda ($22),y			lda 	(zTemp0),y
.1ec2	20 86 22	jsr $2286			jsr 	TOKToLower
.1ec5	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1ec8	c8		iny				iny
.1ec9	ca		dex				dex
.1eca	d0 f4		bne $1ec0			bne 	_TOKDOutput
.1ecc					_TOKDExit:
.1ecc	60		rts				rts
.1ecd					TOKDSpacing:
.1ecd	20 9d 22	jsr $229d			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1ed0	90 0d		bcc $1edf			bcc 	_TOKDSExit
.1ed2	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1ed5	20 9d 22	jsr $229d			jsr 	TOKIsIdentifierElement
.1ed8	90 05		bcc $1edf			bcc 	_TOKDSExit
.1eda	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1edc	20 cf 1d	jsr $1dcf			jsr 	TOKDOutput
.1edf					_TOKDSExit:
.1edf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1ee0					PGMDeleteLine:
.1ee0	20 93 1f	jsr $1f93			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ee3	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1ee5	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ee8	85 25		sta $25				sta 	zTemp1+1
.1eea					_PGMDLoop:
.1eea	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1eec	38		sec				sec
.1eed	f0 3a		beq $1f29			beq 	_PGMDExit
.1eef	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1ef1	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ef3	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1ef6	d0 08		bne $1f00			bne 	_PGMDNext
.1ef8	c8		iny				iny
.1ef9	b1 24		lda ($24),y			lda 	(zTemp1),y
.1efb	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1efe	f0 0d		beq $1f0d			beq 	_PGMDDelete
.1f00					_PGMDNext:
.1f00	18		clc				clc
.1f01	b2 24		lda ($24)			lda 	(zTemp1)
.1f03	65 24		adc $24				adc 	zTemp1
.1f05	85 24		sta $24				sta 	zTemp1
.1f07	90 e1		bcc $1eea			bcc 	_PGMDLoop
.1f09	e6 25		inc $25				inc 	zTemp1+1
.1f0b	80 dd		bra $1eea			bra 	_PGMDLoop
.1f0d					_PGMDDelete:
.1f0d	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1f0f	a8		tay				tay
.1f10					_PGMDCopy:
.1f10	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1f12	92 24		sta ($24)			sta 	(zTemp1)
.1f14	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1f16	c5 22		cmp $22				cmp 	zTemp0
.1f18	d0 07		bne $1f21			bne 	_PGMDNext2
.1f1a	a5 25		lda $25				lda 	zTemp1+1
.1f1c	c5 23		cmp $23				cmp 	zTemp0+1
.1f1e	18		clc				clc
.1f1f	f0 08		beq $1f29			beq 	_PGMDExit
.1f21					_PGMDNext2:
.1f21	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1f23	d0 eb		bne $1f10			bne 	_PGMDCopy
.1f25	e6 25		inc $25				inc 	zTemp1+1
.1f27	80 e7		bra $1f10			bra 	_PGMDCopy
.1f29					_PGMDExit:
.1f29	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1f2a					PGMInsertLine:
.1f2a	20 93 1f	jsr $1f93			jsr 	PGMEndProgram 				; end of program into zTemp0
.1f2d	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1f2f	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f32	85 25		sta $25				sta 	zTemp1+1
.1f34					_PGMILoop:
.1f34	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1f36	f0 1c		beq $1f54			beq 	_PGMIInsert
.1f38	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f3a	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f3c	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f3f	c8		iny				iny
.1f40	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f42	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f45	b0 0d		bcs $1f54			bcs 	_PGMIInsert 				; insert here.
.1f47	18		clc				clc
.1f48	b2 24		lda ($24)			lda 	(zTemp1)
.1f4a	65 24		adc $24				adc 	zTemp1
.1f4c	85 24		sta $24				sta 	zTemp1
.1f4e	90 e4		bcc $1f34			bcc 	_PGMILoop
.1f50	e6 25		inc $25				inc 	zTemp1+1
.1f52	80 e0		bra $1f34			bra 	_PGMILoop
.1f54					_PGMIInsert:
.1f54	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f57					_PGMIInsertLoop:
.1f57	b2 22		lda ($22)			lda 	(zTemp0)
.1f59	91 22		sta ($22),y			sta 	(zTemp0),y
.1f5b	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f5d	c5 22		cmp $22				cmp 	zTemp0
.1f5f	d0 06		bne $1f67			bne 	_PGMINext
.1f61	a5 25		lda $25				lda 	zTemp1+1
.1f63	c5 23		cmp $23				cmp 	zTemp0+1
.1f65	f0 0a		beq $1f71			beq 	_PGMIInserted
.1f67					_PGMINext:
.1f67	a5 22		lda $22				lda 	zTemp0
.1f69	d0 02		bne $1f6d			bne 	_PGMINoBorrow
.1f6b	c6 23		dec $23				dec 	zTemp0+1
.1f6d					_PGMINoBorrow:
.1f6d	c6 22		dec $22				dec 	zTemp0
.1f6f	80 e6		bra $1f57			bra 	_PGMIInsertLoop
.1f71					_PGMIInserted:
.1f71	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f73					_PGMICopyLoop:
.1f73	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f76	91 24		sta ($24),y			sta 	(zTemp1),y
.1f78	c8		iny				iny
.1f79	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f7c	d0 f5		bne $1f73			bne 	_PGMICopyLoop
.1f7e	18		clc				clc
.1f7f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f80					PGMSetBaseAddress:
.1f80	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.1f83	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.1f86	60		rts				rts
.1f87					PGMNewProgram:
.1f87	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f89	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f8c	85 23		sta $23				sta 	zTemp0+1
.1f8e	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.1f90	92 22		sta ($22)			sta 	(zTemp0)
.1f92	60		rts				rts
.1f93					PGMEndProgram:
.1f93	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f95	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f98	85 23		sta $23				sta 	zTemp0+1
.1f9a					_PGMEPLoop:
.1f9a	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.1f9c	f0 0b		beq $1fa9			beq 	_PGMEPExit
.1f9e	18		clc				clc 								; no, advance to next
.1f9f	65 22		adc $22				adc 	zTemp0
.1fa1	85 22		sta $22				sta 	zTemp0
.1fa3	90 f5		bcc $1f9a			bcc 	_PGMEPLoop
.1fa5	e6 23		inc $23				inc 	zTemp0+1
.1fa7	80 f1		bra $1f9a			bra 	_PGMEPLoop
.1fa9					_PGMEPExit:
.1fa9	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1faa					TOKResetElement:
.1faa	9c 1c 05	stz $051c			stz 	TOKElement
.1fad	60		rts				rts
.1fae					TOKWriteElement:
.1fae	da		phx				phx
.1faf	ae 1c 05	ldx $051c			ldx 	TOKElement
.1fb2	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1fb5	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1fb8	fa		plx				plx
.1fb9	ee 1c 05	inc $051c			inc 	TOKElement
.1fbc	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1fbd					TOKTokeniseConstant:
.1fbd	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1fbf	48		pha				pha 								; save on stack
.1fc0	29 c0		and #$c0			and 	#$C0
.1fc2	05 09		ora $09				ora 	IFR0+IM1
.1fc4	05 0a		ora $0a				ora 	IFR0+IM2
.1fc6	f0 10		beq $1fd8			beq 	_TTCLess
.1fc8	da		phx				phx
.1fc9	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1fcb					_TTCShiftRight:
.1fcb	46 0a		lsr $0a				lsr 	IFR0+IM2
.1fcd	66 09		ror $09				ror 	IFR0+IM1
.1fcf	66 08		ror $08				ror 	IFR0+IM0
.1fd1	ca		dex				dex
.1fd2	d0 f7		bne $1fcb			bne 	_TTCShiftRight
.1fd4	fa		plx				plx
.1fd5	20 bd 1f	jsr $1fbd			jsr 	TOKTokeniseConstant
.1fd8					_TTCLess:
.1fd8	68		pla				pla
.1fd9	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fdb	20 7a 20	jsr $207a			jsr 	TOKWriteA
.1fde	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fdf					TOKTokeniseDecimals:
.1fdf	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; consume the .
.1fe2	20 0a 22	jsr $220a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fe5	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fe7	20 7a 20	jsr $207a			jsr 	TOKWriteA
.1fea	20 ef 1f	jsr $1fef			jsr 	TOKOutputElementBuffer 		; then the buffer
.1fed	18		clc				clc
.1fee	60		rts				rts
.1fef					TOKOutputElementBuffer:
.1fef	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1ff2	20 7a 20	jsr $207a			jsr 	TOKWriteA
.1ff5	a8		tay				tay 								; put in Y
.1ff6	f0 0c		beq $2004			beq 	_TOEExit 					; exit if empty which is okay.
.1ff8	a2 01		ldx #$01			ldx 	#1
.1ffa					_TOELoop:
.1ffa	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1ffd	20 7a 20	jsr $207a			jsr 	TOKWriteA
.2000	e8		inx				inx
.2001	88		dey				dey
.2002	d0 f6		bne $1ffa			bne 	_TOELoop
.2004					_TOEExit:
.2004	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2005					TOKTokenise:
.2005	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.2008	8e 1c 06	stx $061c			stx 	TOKDataSource
.200b	a9 01		lda #$01			lda 	#1 							; set first element flag.
.200d	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.2010	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2012	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2015	9c 01 04	stz $0401			stz 	TOKLineNumber
.2018	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.201b					_TOKMainLoop:
.201b	20 89 20	jsr $2089			jsr 	TOKGet 						; what follows.
.201e	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2020	f0 4f		beq $2071			beq 	_TOKExit
.2022	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2024	d0 05		bne $202b			bne 	_TOKElement
.2026	20 8d 20	jsr $208d			jsr 	TOKGetNext
.2029	80 f0		bra $201b			bra 	_TOKMainLoop
.202b					_TOKElement:
.202b	20 91 22	jsr $2291			jsr 	TOKIsDigit 					; is it 0..9
.202e	90 0a		bcc $203a			bcc 	_TOKNotDigit
.2030	20 e1 21	jsr $21e1			jsr 	TOKTokeniseInteger 			; get integer
.2033	b0 43		bcs $2078			bcs 	_TOKFail 					; did it fail ?
.2035	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2038	80 e1		bra $201b			bra 	_TOKMainLoop
.203a					_TOKNotDigit:
.203a	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.203d	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.203f	d0 07		bne $2048			bne 	_TOKNotHex
.2041	20 e3 20	jsr $20e3			jsr 	TOKTokeniseHexadecimal
.2044	b0 32		bcs $2078			bcs 	_TOKFail
.2046	80 d3		bra $201b			bra 	_TOKMainLoop
.2048					_TOKNotHex:
.2048	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.204a	d0 07		bne $2053			bne 	_TOKNotDecimal
.204c	20 df 1f	jsr $1fdf			jsr 	TOKTokeniseDecimals
.204f	b0 27		bcs $2078			bcs 	_TOKFail
.2051	80 c8		bra $201b			bra 	_TOKMainLoop
.2053					_TOKNotDecimal:
.2053	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2055	d0 07		bne $205e			bne 	_TOKNotString
.2057	20 58 22	jsr $2258			jsr 	TOKTokeniseString
.205a	b0 1c		bcs $2078			bcs 	_TOKFail
.205c	80 bd		bra $201b			bra 	_TOKMainLoop
.205e					_TOKNotString:
.205e	20 ae 22	jsr $22ae			jsr 	TOKIsAlpha 					; identifier ?
.2061	b0 07		bcs $206a			bcs 	_TOKIdentifier
.2063	20 1e 22	jsr $221e			jsr 	TOKTokenisePunctuation 		; punctuation
.2066	b0 10		bcs $2078			bcs 	_TOKFail
.2068	80 b1		bra $201b			bra 	_TOKMainLoop
.206a					_TOKIdentifier:
.206a	20 1d 21	jsr $211d			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.206d	b0 09		bcs $2078			bcs 	_TOKFail
.206f	80 aa		bra $201b			bra 	_TOKMainLoop
.2071					_TOKExit:
.2071	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2073	20 7a 20	jsr $207a			jsr 	TOKWriteA
.2076	18		clc				clc									; return with carry set.
.2077	60		rts				rts
.2078					_TOKFail:
.2078	38		sec				sec
.2079	60		rts				rts
.207a					TOKWriteA:
.207a	da		phx				phx
.207b	ae 00 04	ldx $0400			ldx 	TOKLineSize
.207e	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2081	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2084	fa		plx				plx
.2085	ee 00 04	inc $0400			inc 	TOKLineSize
.2088	60		rts				rts
.2089					TOKGet:
.2089	18		clc				clc
.208a	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.208d					TOKGetNext:
.208d	38		sec				sec
.208e	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2091					TOKFindToken:
.2091	a2 ab		ldx #$ab			ldx 	#StandardTokens & $FF 		; do this table
.2093	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.2095	20 ad 20	jsr $20ad			jsr 	TOKFindTokenXY 				; find it, or not
.2098	b0 0d		bcs $20a7			bcs 	_TOKFound1
.209a	a2 28		ldx #$28			ldx 	#AlternateTokens & $FF 		; do the alternate table
.209c	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.209e	20 ad 20	jsr $20ad			jsr 	TOKFindTokenXY 				; find it, or not
.20a1	90 08		bcc $20ab			bcc 	_TOKFTFail 					; not ....
.20a3	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.20a5	38		sec				sec
.20a6	60		rts				rts
.20a7					_TOKFound1:
.20a7	a2 00		ldx #$00			ldx 	#0
.20a9	38		sec				sec
.20aa	60		rts				rts
.20ab					_TOKFTFail
.20ab	18		clc				clc
.20ac	60		rts				rts
.20ad					TOKFindTokenXY:
.20ad	86 22		stx $22				stx 	zTemp0 						; save token table address
.20af	84 23		sty $23				sty 	zTemp0+1
.20b1	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.20b3	8d 1f 06	sta $061f			sta 	TOKCurrent
.20b6					_TOKFindLoop:
.20b6	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.20b8	18		clc				clc 		 						; clear carry in case of fail
.20b9	30 17		bmi $20d2			bmi 	_TOKExit 					; end of table, fail, so return CC.
.20bb	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.20be	d0 13		bne $20d3			bne 	_TOKNext 					; different, try next.
.20c0	aa		tax				tax 								; number of chars to compare.
.20c1	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.20c3					_TOKCompare:
.20c3	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.20c5	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.20c8	d0 09		bne $20d3			bne 	_TOKNext 					; different ? try next
.20ca	c8		iny				iny 								; compare next two
.20cb	ca		dex				dex
.20cc	d0 f5		bne $20c3			bne 	_TOKCompare 				; until done X characters.
.20ce	38		sec				sec
.20cf	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.20d2					_TOKExit:
.20d2	60		rts				rts
.20d3					_TOKNext:
.20d3	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.20d6	38		sec				sec 								; add length+1 to ptr
.20d7	b2 22		lda ($22)			lda 	(zTemp0)
.20d9	65 22		adc $22				adc 	zTemp0
.20db	85 22		sta $22				sta 	zTemp0
.20dd	90 d7		bcc $20b6			bcc 	_TOKFindLoop
.20df	e6 23		inc $23				inc 	zTemp0+1
.20e1	80 d3		bra $20b6			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.20e3					TOKTokeniseHexadecimal:
.20e3	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; consume the $
.20e6	a2 08		ldx #$08			ldx 	#IFR0
.20e8	20 1e 31	jsr $311e			jsr 	IFloatSetZero 				; set R0 = 0
.20eb					_TTHLoop:
.20eb	20 89 20	jsr $2089			jsr 	TOKGet 						; keep getting and copying while numeric.
.20ee	20 bb 22	jsr $22bb			jsr 	TOKIsHexadecimal
.20f1	90 20		bcc $2113			bcc 	_TTHDone
.20f3	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20f5	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.20f8	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.20fb	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.20fe	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.2101	20 8d 20	jsr $208d			jsr 	TOKGetNext
.2104	38		sec				sec 								; convert to decimal.
.2105	e9 30		sbc #$30			sbc 	#48
.2107	c9 0a		cmp #$0a			cmp 	#10
.2109	90 02		bcc $210d			bcc 	_TTHNotAlpha
.210b	e9 07		sbc #$07			sbc 	#7
.210d					_TTHNotAlpha:
.210d	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.210f	85 08		sta $08				sta 	IFR0+IM0
.2111	80 d8		bra $20eb			bra 	_TTHLoop
.2113					_TTHDone:
.2113	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.2115	20 7a 20	jsr $207a			jsr 	TOKWriteA
.2118	20 bd 1f	jsr $1fbd			jsr 	TOKTokeniseConstant 		; write integer out.
.211b	18		clc				clc
.211c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.211d					TOKTokeniseIdentifier:
.211d	20 aa 1f	jsr $1faa			jsr 	TOKResetElement 			; extract an identifier
.2120					_TOKGetIdentifier:
.2120	20 89 20	jsr $2089			jsr 	TOKGet
.2123	20 7b 22	jsr $227b			jsr 	TOKToUpper
.2126	20 9d 22	jsr $229d			jsr 	TOKIsIdentifierElement
.2129	90 08		bcc $2133			bcc 	_TOKEndIdent
.212b	20 ae 1f	jsr $1fae			jsr		TOKWriteElement
.212e	20 8d 20	jsr $208d			jsr 	TOKGetNext
.2131	80 ed		bra $2120			bra 	_TOKGetIdentifier
.2133					_TOKEndIdent:
.2133	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2135	d0 06		bne $213d			bne 	_TOKNotString
.2137	20 ae 1f	jsr $1fae			jsr 	TOKWriteElement 			; add it
.213a	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; consume it
.213d					_TOKNotString:
.213d	20 89 20	jsr $2089			jsr 	TOKGet 						; finally check for (
.2140	c9 28		cmp #$28			cmp 	#"("
.2142	d0 06		bne $214a			bne 	_TOKNoArray
.2144	20 ae 1f	jsr $1fae			jsr 	TOKWriteElement 			; add it
.2147	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; consume it
.214a					_TOKNoArray:
.214a	20 91 20	jsr $2091			jsr 	TOKFindToken 				; find it
.214d	90 18		bcc $2167			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.214f	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2151	f0 0f		beq $2162			beq 	_TOKComment 				; yes, do comment code.
.2153	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2155	d0 06		bne $215d			bne 	_TOKNoShift
.2157	48		pha				pha 								; write the shift.
.2158	8a		txa				txa
.2159	20 7a 20	jsr $207a			jsr 	TOKWriteA
.215c	68		pla				pla
.215d					_TOKNoShift:
.215d	20 7a 20	jsr $207a			jsr 	TOKWriteA 					; write the main token.
.2160	18		clc				clc
.2161	60		rts				rts
.2162					_TOKComment:
.2162	20 ae 21	jsr $21ae			jsr 	TOKDoComment
.2165	18		clc				clc
.2166	60		rts				rts
.2167					_TOKIsVariable:
.2167	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2169					_TOKOutputBuffer:
.2169	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.216c	20 95 21	jsr $2195			jsr 	TOKTranslateIdentifier
.216f	20 7a 20	jsr $207a			jsr 	TOKWriteA
.2172	e8		inx				inx
.2173	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.2176	20 9d 22	jsr $229d			jsr 	TOKIsIdentifierElement
.2179	b0 ee		bcs $2169			bcs 	_TOKOutputBuffer
.217b	a8		tay				tay 								; last char in Y
.217c	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.217e	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2180	f0 0e		beq $2190			beq 	_TOKIVExit
.2182	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2184	d0 04		bne $218a			bne 	_TOKIVCheckArray 			; no, check for (
.2186	1a		inc a				inc 	a 							; token is $7D
.2187	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.218a					_TOKIVCheckArray:
.218a	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.218c	d0 02		bne $2190			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.218e	1a		inc a				inc 	a
.218f	1a		inc a				inc 	a
.2190					_TOKIVExit:
.2190	20 7a 20	jsr $207a			jsr 	TOKWriteA 					; ending token
.2193	18		clc				clc
.2194	60		rts				rts
.2195					TOKTranslateIdentifier:
.2195	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.2197	f0 0f		beq $21a8			beq 	_TTI64
.2199	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.219b	f0 0e		beq $21ab			beq 	_TTI65
.219d	38		sec				sec
.219e	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.21a0	10 03		bpl $21a5			bpl 	_TTIExit
.21a2	18		clc				clc 								; map 09 onto 26-35
.21a3	69 2b		adc #$2b			adc 	#"A"-"0"+26
.21a5					_TTIExit:
.21a5	09 40		ora #$40			ora 	#$40 						; correct range.
.21a7	60		rts				rts
.21a8	a9 64		lda #$64	_TTI64:	lda 	#$64
.21aa	60		rts				rts
.21ab	a9 65		lda #$65	_TTI65:	lda 	#$65
.21ad	60		rts				rts
.21ae					TOKDoComment:
.21ae	20 7a 20	jsr $207a			jsr 	TOKWriteA					; output the token.
.21b1					_TOKSkipSpaces:
.21b1	20 89 20	jsr $2089			jsr 	TOKGet 						; skip over spaces
.21b4	c9 20		cmp #$20			cmp 	#' '
.21b6	d0 05		bne $21bd			bne 	_TOKEndSpaces
.21b8	20 8d 20	jsr $208d			jsr 	TOKGetNext
.21bb	80 f4		bra $21b1			bra 	_TOKSkipSpaces
.21bd					_TOKEndSpaces:
.21bd	48		pha				pha 								; save it
.21be	68		pla				pla
.21bf	f0 04		beq $21c5			beq 	_TOKDCExit 					; end of line.
.21c1	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.21c3	d0 01		bne $21c6			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.21c5					_TOKDCExit:
.21c5	60		rts				rts
.21c6					_TOKDCDoLine:
.21c6	20 aa 1f	jsr $1faa			jsr 	TOKResetElement 			; start getting the string
.21c9					_TOKDCLoop:
.21c9	20 89 20	jsr $2089			jsr 	TOKGet 						; check EOL
.21cc	c9 00		cmp #$00			cmp 	#0
.21ce	f0 08		beq $21d8			beq 	_TOKDCEndComment
.21d0	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; get and consume
.21d3	20 ae 1f	jsr $1fae			jsr 	TOKWriteElement
.21d6	80 f1		bra $21c9			bra 	_TOKDCLoop
.21d8					_TOKDCEndComment:
.21d8	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21da	20 7a 20	jsr $207a			jsr 	TOKWriteA
.21dd	20 ef 1f	jsr $1fef			jsr 	TOKOutputElementBuffer
.21e0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.21e1					TOKTokeniseInteger:
.21e1	20 0a 22	jsr $220a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.21e4	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.21e6	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.21e8	ad 1c 05	lda $051c			lda		TOKElement
.21eb	20 82 2f	jsr $2f82			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.21ee	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21f1	f0 12		beq $2205			beq 	_TOKNotLineNumber
.21f3	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21f5	d0 0c		bne $2203			bne 	_TOKBadLineNumeber
.21f7	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.21f9	8d 01 04	sta $0401			sta 	TOKLineNumber
.21fc	a5 09		lda $09				lda 	IFR0+IM1
.21fe	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2201	18		clc				clc
.2202	60		rts				rts
.2203					_TOKBadLineNumeber:
.2203	38		sec				sec
.2204	60		rts				rts
.2205					_TOKNotLineNumber:
.2205	20 bd 1f	jsr $1fbd			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2208	18		clc				clc
.2209	60		rts				rts
.220a					TOKExtractInteger:
.220a	20 aa 1f	jsr $1faa			jsr 	TOKResetElement 			; restart
.220d					_TTILoop:
.220d	20 89 20	jsr $2089			jsr 	TOKGet 						; keep getting and copying while numeric.
.2210	20 91 22	jsr $2291			jsr 	TOKIsDigit
.2213	90 08		bcc $221d			bcc 	_TOKEIExit
.2215	20 ae 1f	jsr $1fae			jsr 	TOKWriteElement
.2218	20 8d 20	jsr $208d			jsr 	TOKGetNext
.221b	80 f0		bra $220d			bra 	_TTILoop
.221d					_TOKEIExit:
.221d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.221e					TOKTokenisePunctuation:
.221e	20 aa 1f	jsr $1faa			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2221	20 8d 20	jsr $208d			jsr 	TOKGetNext
.2224	20 ae 1f	jsr $1fae			jsr 	TOKWriteElement
.2227	20 89 20	jsr $2089			jsr 	TOKGet 						; what follows ?
.222a	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.222c	f0 10		beq $223e			beq 	_TTPOne
.222e	20 a5 22	jsr $22a5			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2231	b0 0b		bcs $223e			bcs 	_TTPOne 					; these speed things up a bit.
.2233	20 ae 1f	jsr $1fae			jsr 	TOKWriteElement 			; this is what we will search for.
.2236	20 91 20	jsr $2091			jsr 	TOKFindToken
.2239	b0 0a		bcs $2245			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.223b	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.223e					_TTPOne:
.223e	20 91 20	jsr $2091			jsr 	TOKFindToken 				; look for one character punctuation
.2241	b0 07		bcs $224a			bcs 	_TTPOutputExit 				; we found it
.2243	38		sec				sec 								; not recognised.
.2244	60		rts				rts
.2245					_TTPConsumeExit:
.2245	48		pha				pha
.2246	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; get the 2nd char out.
.2249	68		pla				pla
.224a					_TTPOutputExit:
.224a	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.224c	f0 05		beq $2253			beq 	_TTPComment
.224e	20 7a 20	jsr $207a			jsr  	TOKWriteA 					; write token out
.2251	18		clc				clc
.2252	60		rts				rts
.2253					_TTPComment:
.2253	20 ae 21	jsr $21ae			jsr 	TOKDoComment
.2256	18		clc				clc
.2257	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2258					TOKTokeniseString:
.2258	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; consume the "
.225b	20 aa 1f	jsr $1faa			jsr 	TOKResetElement 			; start getting the string
.225e					_TOKTSLoop:
.225e	20 89 20	jsr $2089			jsr 	TOKGet 						; check EOL
.2261	c9 00		cmp #$00			cmp 	#0
.2263	f0 0c		beq $2271			beq 	_TOKTSExit
.2265	20 8d 20	jsr $208d			jsr 	TOKGetNext 					; get and consume
.2268	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.226a	f0 05		beq $2271			beq 	_TOKTSExit
.226c	20 ae 1f	jsr $1fae			jsr 	TOKWriteElement
.226f	80 ed		bra $225e			bra 	_TOKTSLoop
.2271					_TOKTSExit:
.2271	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2273	20 7a 20	jsr $207a			jsr 	TOKWriteA
.2276	20 ef 1f	jsr $1fef			jsr 	TOKOutputElementBuffer
.2279	18		clc				clc
.227a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.227b					TOKToUpper:
.227b	c9 61		cmp #$61			cmp 	#"a"
.227d	90 06		bcc $2285			bcc 	_TTUNotLower
.227f	c9 7b		cmp #$7b			cmp 	#"z"+1
.2281	b0 02		bcs $2285			bcs 	_TTUNotLower
.2283	49 20		eor #$20			eor 	#$20
.2285					_TTUNotLower:
.2285	60		rts				rts
.2286					TOKToLower:
.2286	c9 41		cmp #$41			cmp 	#"A"
.2288	90 06		bcc $2290			bcc 	_TTUNotUpper
.228a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.228c	b0 02		bcs $2290			bcs 	_TTUNotUpper
.228e	49 20		eor #$20			eor 	#$20
.2290					_TTUNotUpper:
.2290	60		rts				rts
.2291					TOKIsDigit:
.2291	c9 30		cmp #$30			cmp 	#"0"
.2293	90 06		bcc $229b			bcc 	TOKFail
.2295	c9 3a		cmp #$3a			cmp 	#"9"+1
.2297	b0 02		bcs $229b			bcs 	TOKFail
.2299					TOKSucceed:
.2299	38		sec				sec
.229a	60		rts				rts
.229b					TOKFail:
.229b	18		clc				clc
.229c	60		rts				rts
.229d					TOKIsIdentifierElement:
.229d	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.229f	f0 f8		beq $2299			beq 	TOKSucceed
.22a1	c9 5f		cmp #$5f			cmp 	#"_"
.22a3	f0 f4		beq $2299			beq 	TOKSucceed 					; else fall through to alphanumeric
.22a5					TOKIsAlphaNumeric:
.22a5	20 ae 22	jsr $22ae			jsr 	TOKIsAlpha
.22a8	b0 ef		bcs $2299			bcs 	TOKSucceed
.22aa	20 91 22	jsr $2291			jsr 	TOKIsDigit
.22ad	60		rts				rts
.22ae					TOKIsAlpha:
.22ae	20 7b 22	jsr $227b			jsr 	TOKToUpper
.22b1	c9 41		cmp #$41			cmp 	#"A"
.22b3	90 e6		bcc $229b			bcc 	TOKFail
.22b5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.22b7	b0 e2		bcs $229b			bcs 	TOKFail
.22b9	80 de		bra $2299			bra 	TOKSucceed
.22bb					TOKIsHexadecimal:
.22bb	20 91 22	jsr $2291			jsr		TOKIsDigit
.22be	b0 d9		bcs $2299			bcs 	TOKSucceed
.22c0	20 ae 22	jsr $22ae			jsr 	TOKIsAlpha
.22c3	90 d6		bcc $229b			bcc 	TOKFail
.22c5	c9 47		cmp #$47			cmp 	#"F"+1
.22c7	b0 d2		bcs $229b			bcs 	TOKFail
.22c9	80 ce		bra $2299			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.22cb					Command_CALL:
.22cb	a9 42		lda #$42			lda 	#STK_CALL
.22cd	20 99 27	jsr $2799			jsr 	StackOpen
.22d0	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.22d2	29 c0		and #$c0			and 	#$C0
.22d4	c9 40		cmp #$40			cmp 	#$40
.22d6	d0 29		bne $2301			bne 	_CCSyntax
.22d8	20 61 2a	jsr $2a61			jsr 	VARGetInfo 					; get the information
.22db	20 80 27	jsr $2780			jsr 	ERRCheckRParen 				; check right bracket follows.
.22de	20 13 2a	jsr $2a13			jsr 	VARFind 					; exists ?
.22e1	90 21		bcc $2304			bcc 	_CCUnknown
.22e3	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.22e5	85 22		sta $22				sta 	zTemp0
.22e7	20 cd 27	jsr $27cd			jsr 	STKSaveCodePosition 		; save return address on stack.
.22ea	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.22ec	b1 22		lda ($22),y			lda 	(zTemp0),y
.22ee	c9 ff		cmp #$ff			cmp 	#$FF
.22f0	d0 12		bne $2304			bne 	_CCUnknown
.22f2	88		dey				dey 								; get Y offset to stack
.22f3	b1 22		lda ($22),y			lda 	(zTemp0),y
.22f5	48		pha				pha
.22f6	88		dey				dey 								; get address
.22f7	b1 22		lda ($22),y			lda 	(zTemp0),y
.22f9	85 19		sta $19				sta 	codePtr+1
.22fb	b2 22		lda ($22)			lda 	(zTemp0)
.22fd	85 18		sta $18				sta 	codePtr
.22ff	7a		ply				ply 								; restore Y
.2300	60		rts				rts
.2301					_CCSyntax:
.2301	4c cb 25	jmp $25cb		jmp	ErrorV_syntax
.2304					_CCUnknown:
.2304	4c 40 27	jmp $2740		jmp	ErrorV_unknown
.2307					Command_ENDPROC:
.2307	a9 42		lda #$42			lda 	#STK_CALL
.2309	20 c5 27	jsr $27c5			jsr 	StackCheckFrame
.230c	20 df 27	jsr $27df			jsr 	STKLoadCodePosition 		; return
.230f	20 b7 27	jsr $27b7			jsr 	StackClose
.2312	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2313					Command_DO:
.2313	a9 22		lda #$22			lda 	#STK_DO
.2315	20 99 27	jsr $2799			jsr 	StackOpen
.2318	20 cd 27	jsr $27cd			jsr 	STKSaveCodePosition 		; save loop position
.231b	60		rts				rts
.231c					Command_EXIT:
.231c	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.231e	20 c5 27	jsr $27c5			jsr 	StackCheckFrame
.2321	20 b7 27	jsr $27b7			jsr 	StackClose 					; close it
.2324	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2326	aa		tax				tax
.2327	20 db 24	jsr $24db			jsr 	ScanForward
.232a	60		rts				rts
.232b					Command_LOOP:
.232b	a9 22		lda #$22			lda 	#STK_DO
.232d	20 c5 27	jsr $27c5			jsr 	StackCheckFrame
.2330	20 df 27	jsr $27df			jsr 	STKLoadCodePosition 		; loop back
.2333	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2334					Command_FOR:
.2334	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2336	20 99 27	jsr $2799			jsr 	StackOpen
.2339	20 b7 12	jsr $12b7			jsr 	CommandLET 					; do "I = 1" bit
.233c	5a		phy				phy 								; save variable address to +4,+5
.233d	a0 04		ldy #$04			ldy 	#4
.233f	a5 22		lda $22				lda 	zTemp0
.2341	91 2a		sta ($2a),y			sta 	(basicStack),y
.2343	c8		iny				iny
.2344	a5 23		lda $23				lda 	zTemp0+1
.2346	91 2a		sta ($2a),y			sta 	(basicStack),y
.2348	7a		ply				ply
.2349	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.234b	20 90 27	jsr $2790			jsr 	ERRCheckA
.234e	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2351	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2353	a2 08		ldx #$08			ldx 	#IFR0
.2355	20 aa 23	jsr $23aa			jsr 	CFSaveR0X
.2358	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.235a	c9 91		cmp #$91			cmp 	#PR_STEP
.235c	d0 06		bne $2364			bne 	_CFStep1
.235e	c8		iny				iny 								; consume step
.235f	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; evaluate STEP
.2362	80 24		bra $2388			bra 	_CFWriteStep
.2364					_CFStep1:
.2364	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2366	a9 01		lda #$01			lda 	#1
.2368	20 20 31	jsr $3120			jsr 	IFloatSetByte
.236b	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.236c	a0 04		ldy #$04			ldy 	#4 							; get variable address
.236e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2370	85 22		sta $22				sta 	zTemp0
.2372	c8		iny				iny
.2373	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2375	85 23		sta $23				sta 	zTemp0+1
.2377	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2379	b1 22		lda ($22),y			lda 	(zTemp0),y
.237b	d0 0a		bne $2387			bne 	_CFNotOptimised
.237d	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.237f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2381	d0 04		bne $2387			bne 	_CFNotOptimised
.2383	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2385	85 0b		sta $0b				sta 	IFR0+IExp
.2387					_CFNotOptimised:
.2387	7a		ply				ply
.2388					_CFWriteStep:
.2388	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.238a	a9 06		lda #$06			lda 	#6
.238c	20 aa 23	jsr $23aa			jsr 	CFSaveR0X
.238f	20 cd 27	jsr $27cd			jsr 	STKSaveCodePosition 		; save loop position
.2392	60		rts				rts
.2393					CFLoadR0X:
.2393	5a		phy				phy
.2394	a8		tay				tay
.2395	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2397	95 00		sta $00,x			sta 	IM0,x
.2399	c8		iny				iny
.239a	b1 2a		lda ($2a),y			lda 	(basicStack),y
.239c	95 01		sta $01,x			sta 	IM1,x
.239e	c8		iny				iny
.239f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a1	95 02		sta $02,x			sta 	IM2,x
.23a3	c8		iny				iny
.23a4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a6	95 03		sta $03,x			sta 	IExp,x
.23a8	7a		ply				ply
.23a9	60		rts				rts
.23aa					CFSaveR0X:
.23aa	5a		phy				phy
.23ab	a8		tay				tay
.23ac	b5 00		lda $00,x			lda 	IM0,x
.23ae	91 2a		sta ($2a),y			sta 	(basicStack),y
.23b0	c8		iny				iny
.23b1	b5 01		lda $01,x			lda 	IM1,x
.23b3	91 2a		sta ($2a),y			sta 	(basicStack),y
.23b5	c8		iny				iny
.23b6	b5 02		lda $02,x			lda 	IM2,x
.23b8	91 2a		sta ($2a),y			sta 	(basicStack),y
.23ba	c8		iny				iny
.23bb	b5 03		lda $03,x			lda 	IExp,x
.23bd	91 2a		sta ($2a),y			sta 	(basicStack),y
.23bf	7a		ply				ply
.23c0	60		rts				rts
.23c1					Command_NEXT:
.23c1	a9 37		lda #$37			lda 	#STK_FOR
.23c3	20 c5 27	jsr $27c5			jsr 	StackCheckFrame
.23c6	5a		phy				phy 								; check optimised loop
.23c7	a0 09		ldy #$09			ldy 	#9
.23c9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23cb	7a		ply				ply
.23cc	0a		asl a				asl 	a
.23cd	b0 35		bcs $2404			bcs 	_CNOptimised
.23cf	20 3c 24	jsr $243c			jsr 	_CNLoadValue 				; load index value to R0.
.23d2	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.23d4	a9 06		lda #$06			lda 	#6
.23d6	20 93 23	jsr $2393			jsr 	CFLoadR0X
.23d9	20 16 2b	jsr $2b16			jsr 	IFloatAdd 					; add them together and write back.
.23dc	20 5f 24	jsr $245f			jsr 	_CNSaveValue
.23df	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.23e1	a2 0c		ldx #$0c			ldx 	#IFR1
.23e3	20 93 23	jsr $2393			jsr 	CFLoadR0X
.23e6	20 ed 2d	jsr $2ded			jsr 	IFloatCompare 				; compare terminal vs current
.23e9	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.23eb	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.23ee	f0 10		beq $2400			beq 	_CNLoopBack
.23f0	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.23f2	5a		phy				phy
.23f3	a0 09		ldy #$09			ldy 	#6+IExp
.23f5	51 2a		eor ($2a),y			eor 	(basicStack),y
.23f7	7a		ply				ply
.23f8	29 40		and #$40			and 	#IFSign
.23fa	f0 04		beq $2400			beq 	_CNLoopBack
.23fc					_CNExitLoop:
.23fc	20 b7 27	jsr $27b7			jsr 	StackClose		 			; return
.23ff	60		rts				rts
.2400					_CNLoopBack:
.2400	20 df 27	jsr $27df			jsr 	STKLoadCodePosition 		; loop back
.2403	60		rts				rts
.2404					_CNOptimised:
.2404	5a		phy				phy
.2405	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2407	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2409	85 26		sta $26				sta 	zTemp2
.240b	c8		iny				iny
.240c	b1 2a		lda ($2a),y			lda 	(basicStack),y
.240e	85 27		sta $27				sta 	zTemp2+1
.2410	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2412					_CNIncrement:
.2412	c8		iny				iny
.2413	b1 26		lda ($26),y			lda 	(zTemp2),y
.2415	1a		inc a				inc 	a
.2416	91 26		sta ($26),y			sta 	(zTemp2),y
.2418	f0 f8		beq $2412			beq 	_CNIncrement
.241a	18		clc				clc 								; point zTemp0 to terminal value
.241b	a5 2a		lda $2a				lda 	basicStack
.241d	69 0a		adc #$0a			adc 	#10
.241f	85 22		sta $22				sta 	zTemp0
.2421	a5 2b		lda $2b				lda 	basicStack+1
.2423	69 00		adc #$00			adc 	#0
.2425	85 23		sta $23				sta 	zTemp0+1
.2427	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2429	18		clc				clc 								; borrow 1, we want > not >=
.242a	b2 26		lda ($26)			lda 	(zTemp2)
.242c	f2 22		sbc ($22)			sbc 	(zTemp0)
.242e	b1 26		lda ($26),y			lda 	(zTemp2),y
.2430	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2432	c8		iny				iny
.2433	b1 26		lda ($26),y			lda 	(zTemp2),y
.2435	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2437	7a		ply				ply
.2438	b0 c2		bcs $23fc			bcs 	_CNExitLoop
.243a	80 c4		bra $2400			bra 	_CNLoopBack
.243c					_CNLoadValue:
.243c	5a		phy				phy
.243d	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.243f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2441	85 26		sta $26				sta 	zTemp2
.2443	c8		iny				iny
.2444	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2446	85 27		sta $27				sta 	zTemp2+1
.2448	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.244a	b1 26		lda ($26),y			lda 	(zTemp2),y
.244c	85 08		sta $08				sta 	IFR0+IM0
.244e	c8		iny				iny
.244f	b1 26		lda ($26),y			lda 	(zTemp2),y
.2451	85 09		sta $09				sta 	IFR0+IM1
.2453	c8		iny				iny
.2454	b1 26		lda ($26),y			lda 	(zTemp2),y
.2456	85 0a		sta $0a				sta 	IFR0+IM2
.2458	c8		iny				iny
.2459	b1 26		lda ($26),y			lda 	(zTemp2),y
.245b	85 0b		sta $0b				sta 	IFR0+IExp
.245d	7a		ply				ply
.245e	60		rts				rts
.245f					_CNSaveValue:
.245f	5a		phy				phy
.2460	a0 00		ldy #$00			ldy 	#0
.2462	a5 08		lda $08				lda 	IFR0+IM0
.2464	91 26		sta ($26),y			sta 	(zTemp2),y
.2466	c8		iny				iny
.2467	a5 09		lda $09				lda 	IFR0+IM1
.2469	91 26		sta ($26),y			sta 	(zTemp2),y
.246b	c8		iny				iny
.246c	a5 0a		lda $0a				lda 	IFR0+IM2
.246e	91 26		sta ($26),y			sta 	(zTemp2),y
.2470	c8		iny				iny
.2471	a5 0b		lda $0b				lda 	IFR0+IExp
.2473	91 26		sta ($26),y			sta 	(zTemp2),y
.2475	7a		ply				ply
.2476	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2477					Command_GOSUB:
.2477	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; get line number
.247a	a9 52		lda #$52			lda 	#STK_GOSUB
.247c	20 99 27	jsr $2799			jsr 	StackOpen
.247f	20 cd 27	jsr $27cd			jsr 	STKSaveCodePosition 		; save return address on stack.
.2482	4c d8 11	jmp $11d8			jmp 	GotoR0
.2485					Command_RETURN:
.2485	a9 52		lda #$52			lda 	#STK_GOSUB
.2487	20 c5 27	jsr $27c5			jsr 	StackCheckFrame
.248a	20 df 27	jsr $27df			jsr 	STKLoadCodePosition 		; return
.248d	20 b7 27	jsr $27b7			jsr 	StackClose
.2490	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2491					IfCommand:
.2491	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; Get the if test.
.2494	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2496	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2498	d0 0c		bne $24a6			bne 	_IfStructured 				; we still support it.
.249a	c8		iny				iny 								; consume THEN
.249b	a2 08		ldx #$08			ldx 	#IFR0
.249d	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; is it zero
.24a0	f0 01		beq $24a3			beq 	_IfFail 					; if fail, go to next line
.24a2	60		rts				rts 								; if THEN just continue
.24a3					_IfFail:
.24a3	4c c5 14	jmp $14c5			jmp 	RUNEndOfLine
.24a6					_IfStructured:
.24a6	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; is it zero
.24a9	d0 07		bne $24b2			bne 	_IfExit 					; if not, then continue normally.
.24ab	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.24ad	a2 85		ldx #$85			ldx 	#PR_ENDIF
.24af	20 db 24	jsr $24db			jsr 	ScanForward 				; and run from there
.24b2					_IfExit:
.24b2	60		rts				rts
.24b3					ElseCode:
.24b3	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.24b5	aa		tax				tax 								; so just go to the structure exit
.24b6	20 db 24	jsr $24db			jsr 	ScanForward
.24b9	60		rts				rts
.24ba					EndIf:
.24ba	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.24bb					Command_REPEAT:
.24bb	a9 02		lda #$02			lda 	#STK_REPEAT
.24bd	20 99 27	jsr $2799			jsr 	StackOpen
.24c0	20 cd 27	jsr $27cd			jsr 	STKSaveCodePosition 		; save loop position
.24c3	60		rts				rts
.24c4					Command_UNTIL:
.24c4	a9 02		lda #$02			lda 	#STK_REPEAT
.24c6	20 c5 27	jsr $27c5			jsr 	StackCheckFrame
.24c9	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; work out the test
.24cc	a2 08		ldx #$08			ldx 	#IFR0
.24ce	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; check if zero
.24d1	f0 04		beq $24d7			beq 	_CULoopBack 				; if so keep looping
.24d3	20 b7 27	jsr $27b7			jsr 	StackClose		 			; return
.24d6	60		rts				rts
.24d7					_CULoopBack:
.24d7	20 df 27	jsr $27df			jsr 	STKLoadCodePosition 		; loop back
.24da	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.24db					ScanForward:
.24db	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.24dd	86 23		stx $23				stx 	zTemp0+1
.24df	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.24e1					_ScanForwardLoop:
.24e1	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.24e3	d0 0a		bne $24ef			bne 	_ScanNoCheck
.24e5	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.24e7	c5 22		cmp $22				cmp 	zTemp0
.24e9	f0 49		beq $2534			beq 	_ScanExit
.24eb	c5 23		cmp $23				cmp 	zTemp0+1
.24ed	f0 45		beq $2534			beq 	_ScanExit
.24ef					_ScanNoCheck:
.24ef	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.24f1	c8		iny				iny
.24f2	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.24f4	f0 37		beq $252d			beq		_ScanDataItem
.24f6	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.24f8	f0 33		beq $252d			beq 	_ScanDataItem
.24fa	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.24fc	f0 1b		beq $2519			beq 	_ScanNextLine
.24fe	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2500	d0 01		bne $2503			bne 	_ScanNoShift
.2502	c8		iny				iny
.2503					_ScanNoShift:
.2503	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2505	b0 da		bcs $24e1			bcs 	_ScanForwardLoop
.2507	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2509	90 d6		bcc $24e1			bcc 	_ScanForwardLoop
.250b	aa		tax				tax 								; access the table to get the adjustment.
.250c	18		clc				clc
.250d	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.250f	7d 1f 1a	adc $1a1f,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2512	85 24		sta $24				sta 	zTemp1
.2514	10 cb		bpl $24e1			bpl		_ScanForwardLoop 			; error if -ve ?
.2516	4c 57 26	jmp $2657		jmp	ErrorV_structure
.2519					_ScanNextLine:
.2519	18		clc				clc	 								; forward to next line.
.251a	b2 18		lda ($18)			lda 	(codePtr)
.251c	65 18		adc $18				adc 	codePtr
.251e	85 18		sta $18				sta 	codePtr
.2520	90 02		bcc $2524			bcc 	_ScanNoCarry
.2522	e6 19		inc $19				inc 	codePtr+1
.2524					_ScanNoCarry:
.2524	a0 03		ldy #$03			ldy 	#3
.2526	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2528	d0 b7		bne $24e1			bne 	_ScanForwardLoop
.252a	4c 57 26	jmp $2657		jmp	ErrorV_structure
.252d					_ScanDataItem:
.252d	98		tya				tya
.252e	38		sec				sec
.252f	71 18		adc ($18),y			adc 	(codePtr),y
.2531	a8		tay				tay
.2532	80 ad		bra $24e1			bra 	_ScanForwardLoop
.2534					_ScanExit:
.2534	c8		iny				iny 								; consume final token.
.2535	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2536					ScanProcedures:
.2536	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2538	48		pha				pha
.2539	a5 19		lda $19				lda 	codePtr+1
.253b	48		pha				pha
.253c	5a		phy				phy
.253d	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2540	85 19		sta $19				sta 	codePtr+1
.2542	64 18		stz $18				stz 	codePtr
.2544					_SPLoop:
.2544	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2546	f0 18		beq $2560			beq 	_SPExit
.2548	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.254a	b1 18		lda ($18),y			lda 	(codePtr),y
.254c	c9 88		cmp #$88			cmp 	#PR_PROC
.254e	d0 03		bne $2553			bne 	_SPNext
.2550	20 68 25	jsr $2568			jsr 	_SPSetupRecord
.2553					_SPNext:
.2553	18		clc				clc 								; forward to next
.2554	b2 18		lda ($18)			lda 	(codePtr)
.2556	65 18		adc $18				adc 	codePtr
.2558	85 18		sta $18				sta 	codePtr
.255a	90 e8		bcc $2544			bcc 	_SPLoop
.255c	e6 19		inc $19				inc 	codePtr+1
.255e	80 e4		bra $2544			bra 	_SPLoop
.2560					_SPExit:
.2560	7a		ply				ply
.2561	68		pla				pla
.2562	85 19		sta $19				sta 	codePtr+1
.2564	68		pla				pla
.2565	85 18		sta $18				sta 	codePtr
.2567	60		rts				rts
.2568					_SPSetupRecord:
.2568	c8		iny				iny 								; check identifier follows
.2569	b1 18		lda ($18),y			lda 	(codePtr),y
.256b	29 c0		and #$c0			and 	#$C0
.256d	c9 40		cmp #$40			cmp 	#$40
.256f	d0 27		bne $2598			bne 	_SPSyntax
.2571	20 61 2a	jsr $2a61			jsr 	VARGetInfo 					; get the information
.2574	20 80 27	jsr $2780			jsr 	ERRCheckRParen 				; check right bracket follows.
.2577	20 13 2a	jsr $2a13			jsr 	VARFind 					; already exists ?
.257a	b0 1f		bcs $259b			bcs 	_SPUsed 					; error !
.257c	20 bf 29	jsr $29bf			jsr 	VARCreate 					; create, XA points to the data.
.257f	85 22		sta $22				sta 	zTemp0
.2581	86 23		stx $23				stx 	zTemp0+1
.2583	5a		phy				phy 								; save Y pos on stack
.2584	a0 01		ldy #$01			ldy 	#1
.2586	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2588	92 22		sta ($22)			sta 	(zTemp0)
.258a	a5 19		lda $19				lda 	codePtr+1
.258c	91 22		sta ($22),y			sta 	(zTemp0),y
.258e	c8		iny				iny
.258f	68		pla				pla
.2590	91 22		sta ($22),y			sta 	(zTemp0),y
.2592	c8		iny				iny
.2593	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2595	91 22		sta ($22),y			sta 	(zTemp0),y
.2597	60		rts				rts
.2598					_SPSyntax:
.2598	4c cb 25	jmp $25cb		jmp	ErrorV_syntax
.259b					_SPUsed:
.259b	4c 22 27	jmp $2722		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.259e					Command_WHILE:
.259e	5a		phy				phy 								; save position of the test
.259f	20 04 17	jsr $1704			jsr 	EXPEvalNumber 				; work out the while test.
.25a2	a2 08		ldx #$08			ldx 	#IFR0
.25a4	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; check if zero
.25a7	f0 0e		beq $25b7			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.25a9	98		tya				tya 								; position *after* test.
.25aa	7a		ply				ply 								; restore position before test, at WHILE
.25ab	88		dey				dey 								; so we execute the WHILE command again.
.25ac	48		pha				pha 								; push after test on the stack
.25ad	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.25af	20 99 27	jsr $2799			jsr 	StackOpen
.25b2	20 cd 27	jsr $27cd			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.25b5	7a		ply				ply 								; restore the position *after* the test
.25b6	60		rts				rts
.25b7					_WHExitLoop:
.25b7	68		pla				pla 								; throw post loop position
.25b8	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.25ba	aa		tax				tax
.25bb	20 db 24	jsr $24db			jsr 	ScanForward
.25be	60		rts				rts
.25bf					Command_WEND:
.25bf	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.25c1	20 c5 27	jsr $27c5			jsr 	StackCheckFrame
.25c4	20 df 27	jsr $27df			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.25c7	20 b7 27	jsr $27b7			jsr 	StackClose		 			; erase the frame
.25ca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.25cb					ErrorV_syntax:
.25cb	20 b8 28	jsr $28b8		jsr	ErrorHandler
>25ce	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>25d6	45 72 72 6f 72 00
.25dc					ErrorV_range:
.25dc	20 b8 28	jsr $28b8		jsr	ErrorHandler
>25df	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>25e7	52 61 6e 67 65 00
.25ed					ErrorV_value:
.25ed	20 b8 28	jsr $28b8		jsr	ErrorHandler
>25f0	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>25f8	75 65 00
.25fb					ErrorV_type:
.25fb	20 b8 28	jsr $28b8		jsr	ErrorHandler
>25fe	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2606	73 6d 61 74 63 68 00
.260d					ErrorV_unimplemented:
.260d	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2610	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2618	6c 65 6d 65 6e 74 65 64 00
.2621					ErrorV_assert:
.2621	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2624	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>262c	46 61 69 6c 00
.2631					ErrorV_internal:
.2631	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2634	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>263c	6c 20 45 72 72 6f 72 00
.2644					ErrorV_divzero:
.2644	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2647	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>264f	42 79 20 5a 65 72 6f 00
.2657					ErrorV_structure:
.2657	20 b8 28	jsr $28b8		jsr	ErrorHandler
>265a	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2662	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.266f					ErrorV_stop:
.266f	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2672	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>267a	20 53 74 6f 70 70 65 64 00
.2683					ErrorV_data:
.2683	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2686	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>268e	44 61 74 61 00
.2693					ErrorV_redefine:
.2693	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2696	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>269e	65 64 65 66 69 6e 65 64 00
.26a7					ErrorV_index:
.26a7	20 b8 28	jsr $28b8		jsr	ErrorHandler
>26aa	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>26b2	61 79 20 49 6e 64 65 78 00
.26bb					ErrorV_memory:
.26bb	20 b8 28	jsr $28b8		jsr	ErrorHandler
>26be	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>26c6	4d 65 6d 6f 72 79 00
.26cd					ErrorV_uninitialised:
.26cd	20 b8 28	jsr $28b8		jsr	ErrorHandler
>26d0	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>26d8	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.26e8					ErrorV_string:
.26e8	20 b8 28	jsr $28b8		jsr	ErrorHandler
>26eb	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>26f3	69 6e 67 20 4c 65 6e 67 74 68 00
.26fe					ErrorV_variable:
.26fe	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2701	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2709	65 20 4d 69 73 73 69 6e 67 00
.2713					ErrorV_stack:
.2713	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2716	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>271e	75 6c 6c 00
.2722					ErrorV_dupproc:
.2722	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2725	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>272d	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>273d	65 64 00
.2740					ErrorV_unknown:
.2740	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2743	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>274b	20 50 72 6f 63 65 64 75 72 65 00
.2756					ErrorV_break:
.2756	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2759	05 42 72 65 61 6b 00			.text	5,"Break",0
.2760					ErrorV_line:
.2760	20 b8 28	jsr $28b8		jsr	ErrorHandler
>2763	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>276b	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2778					ERRCheckLParen:
.2778	b1 18		lda ($18),y			lda 	(codePtr),y
.277a	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.277c	d0 18		bne $2796			bne 	ERRSyntaxError
.277e	c8		iny				iny
.277f	60		rts				rts
.2780					ERRCheckRParen:
.2780	b1 18		lda ($18),y			lda 	(codePtr),y
.2782	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2784	d0 10		bne $2796			bne 	ERRSyntaxError
.2786	c8		iny				iny
.2787	60		rts				rts
.2788					ERRCheckComma:
.2788	b1 18		lda ($18),y			lda 	(codePtr),y
.278a	c9 99		cmp #$99			cmp 	#PR_COMMA
.278c	d0 08		bne $2796			bne 	ERRSyntaxError
.278e	c8		iny				iny
.278f	60		rts				rts
.2790					ERRCheckA:
.2790	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2792	d0 02		bne $2796			bne 	ERRSyntaxError
.2794	c8		iny				iny
.2795	60		rts				rts
.2796					ERRSyntaxError:
.2796	4c cb 25	jmp $25cb		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2799					StackOpen:
.2799	48		pha				pha 								; save frame byte
.279a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.279c	0a		asl a				asl 	a 							; claim twice this for storage
.279d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.279f	38		sec				sec 								; so basically subtracting from
.27a0	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.27a2	85 2a		sta $2a				sta 	basicStack
.27a4	b0 0a		bcs $27b0			bcs 	_SONoBorrow
>27a6	db						.byte 	$DB
.27a7	c6 2b		dec $2b				dec 	basicStack+1
.27a9	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.27ab	cd 20 06	cmp $0620			cmp 	basicStackEnd
.27ae	f0 04		beq $27b4			beq 	_SOMemory
.27b0					_SONoBorrow:
.27b0	68		pla				pla 								; get marker back and write at TOS
.27b1	92 2a		sta ($2a)			sta 	(basicStack)
.27b3	60		rts				rts
.27b4					_SOMemory:
.27b4	4c 13 27	jmp $2713		jmp	ErrorV_stack
.27b7					StackClose:
.27b7	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.27b9	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.27bb	0a		asl a				asl 	a 							; claim twice this.
.27bc	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.27be	85 2a		sta $2a				sta 	basicStack
.27c0	90 02		bcc $27c4			bcc 	_SCExit
.27c2	e6 2b		inc $2b				inc 	basicStack+1
.27c4					_SCExit:
.27c4	60		rts				rts
.27c5					StackCheckFrame:
.27c5	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.27c7	d0 01		bne $27ca			bne 	_SCFError 					; different, we have structures mixed up
.27c9	60		rts				rts
.27ca					_SCFError:
.27ca	4c 57 26	jmp $2657		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.27cd					STKSaveCodePosition:
.27cd	5a		phy				phy
.27ce	98		tya				tya 								; save Y at offset 1.
.27cf	a0 01		ldy #$01			ldy 	#1
.27d1	91 2a		sta ($2a),y			sta 	(basicStack),y
.27d3	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.27d5	c8		iny				iny
.27d6	91 2a		sta ($2a),y			sta 	(basicStack),y
.27d8	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.27da	c8		iny				iny
.27db	91 2a		sta ($2a),y			sta 	(basicStack),y
.27dd	7a		ply				ply
.27de	60		rts				rts
.27df					STKLoadCodePosition:
.27df	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.27e1	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27e3	85 19		sta $19				sta 	codePtr+1
.27e5	88		dey				dey
.27e6	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27e8	85 18		sta $18				sta 	codePtr
.27ea	88		dey				dey
.27eb	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.27ed	a8		tay				tay
.27ee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.27ef					StackReset:
.27ef	48		pha				pha 								; save top of memory
.27f0	3a		dec a				dec 	a  							; end of stack = previous byte
.27f1	85 2b		sta $2b				sta 	basicStack+1
.27f3	a9 ff		lda #$ff			lda 	#$FF
.27f5	85 2a		sta $2a				sta 	basicStack
.27f7	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.27f9	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.27fb	68		pla				pla 								; allocate pages for stack.
.27fc	38		sec				sec
.27fd	e9 02		sbc #$02			sbc 	#STACKPAGES
.27ff	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2802	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2803					StringConcrete:
.2803	5a		phy				phy 								; save position on stack
.2804	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2806	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2808	b0 41		bcs $284b			bcs 	_SALengthError
.280a	18		clc				clc 								; length of the new string
.280b	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.280d	90 02		bcc $2811			bcc 	_SAHaveLength
.280f	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2811					_SAHaveLength:
.2811	48		pha				pha 								; save length to be allocated for concreting.
.2812	38		sec				sec
.2813	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2815	6d 22 06	adc $0622			adc 	stringMemory
.2818	8d 22 06	sta $0622			sta 	stringMemory
.281b	85 26		sta $26				sta 	zTemp2 						; update storage address
.281d	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.281f	6d 23 06	adc $0623			adc 	stringMemory+1
.2822	8d 23 06	sta $0623			sta 	stringMemory+1
.2825	85 27		sta $27				sta 	zTemp2+1
.2827	68		pla				pla 								; save length allocated in +0
.2828	92 26		sta ($26)			sta 	(zTemp2)
.282a	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.282c	a0 01		ldy #$01			ldy 	#1
.282e	91 26		sta ($26),y			sta 	(zTemp2),y
.2830					_SACopyNewString:
.2830	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2832	a0 02		ldy #$02			ldy 	#2
.2834	91 26		sta ($26),y			sta 	(zTemp2),y
.2836	aa		tax				tax 								; bytes to copy
.2837	f0 0c		beq $2845			beq 	_SACopyExit
.2839	a0 01		ldy #$01			ldy 	#1 							; first character from here
.283b					_SACopyNSLoop:
.283b	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.283d	c8		iny				iny 								; write two on in string storage
.283e	c8		iny				iny
.283f	91 26		sta ($26),y			sta 	(zTemp2),y
.2841	88		dey				dey
.2842	ca		dex				dex									; until copied all the string lengths.
.2843	d0 f6		bne $283b			bne 	_SACopyNSLoop
.2845					_SACopyExit:
.2845	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2847	a5 26		lda $26				lda 	zTemp2
.2849	7a		ply				ply
.284a	60		rts				rts
.284b					_SALengthError:
.284b	4c e8 26	jmp $26e8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.284e					StringSystemInitialise:
.284e	3a		dec a				dec 	a 							; make last byte of previous page.
.284f	8d 23 06	sta $0623			sta 	stringMemory+1
.2852	85 23		sta $23				sta 	zTemp0+1
.2854	a9 ff		lda #$ff			lda 	#$FF
.2856	8d 22 06	sta $0622			sta 	stringMemory
.2859	85 22		sta $22				sta 	zTemp0
.285b	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.285d	92 22		sta ($22)			sta 	(zTemp0)
.285f	60		rts				rts
.2860					StringSpaceInitialise:
.2860	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2862	8d 21 06	sta $0621			sta 	stringInitialised
.2865	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2868	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.286b	ad 23 06	lda $0623			lda 	stringMemory+1
.286e	3a		dec a				dec 	a
.286f	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2872	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.2875	60		rts				rts
.2876					StringTempAllocate:
.2876	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2878	b0 2e		bcs $28a8			bcs 	_STALength
.287a	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.287d	30 05		bmi $2884			bmi 	_STAAllocate
.287f	48		pha				pha 								; save value to subtract.
.2880	20 60 28	jsr $2860			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2883	68		pla				pla 								; restore it
.2884					_STAAllocate:
.2884	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2886	18		clc				clc  								; deliberate allows one more
.2887	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.288a	8d 24 06	sta $0624			sta 	stringTempPointer
.288d	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.288f	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2891	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2894	69 ff		adc #$ff			adc 	#$FF
.2896	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2899	85 2d		sta $2d				sta 	zsTemp+1
.289b	85 09		sta $09				sta 	IFR0+IM1
.289d	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.289f	a9 80		lda #$80			lda 	#$80
.28a1	85 0b		sta $0b				sta 	IFR0+IExp
.28a3	a9 00		lda #$00			lda 	#0 							; clear the target string
.28a5	92 2c		sta ($2c)			sta 	(zsTemp)
.28a7	60		rts				rts
.28a8					_STALength:
.28a8	4c e8 26	jmp $26e8		jmp	ErrorV_string
.28ab					StringTempWrite:
.28ab	5a		phy				phy
.28ac	48		pha				pha
.28ad	b2 2c		lda ($2c)			lda 	(zsTemp)
.28af	1a		inc a				inc 	a
.28b0	92 2c		sta ($2c)			sta 	(zsTemp)
.28b2	a8		tay				tay
.28b3	68		pla				pla
.28b4	91 2c		sta ($2c),y			sta 	(zsTemp),y
.28b6	7a		ply				ply
.28b7	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.28b8					ErrorHandler:
.28b8	fa		plx				plx 								; get address of msg
.28b9	7a		ply				ply
.28ba	e8		inx				inx 								; bump past RTS
.28bb	d0 01		bne $28be			bne 	_EHNoInc
.28bd	c8		iny				iny
.28be					_EHNoInc:
.28be	20 f4 ff	jsr $fff4			jsr	 	OSWriteString 				; print it.
.28c1	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.28c4	0d 27 06	ora $0627			ora 	ERRLine+1
.28c7	f0 10		beq $28d9			beq 	_EHNoNumber
.28c9	a2 dc		ldx #$dc			ldx 	#_EHAtMsg & $FF
.28cb	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.28cd	20 f4 ff	jsr $fff4			jsr 	OSWriteString
.28d0	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.28d3	ae 27 06	ldx $0627			ldx 	ERRLine+1
.28d6	20 e1 28	jsr $28e1			jsr 	WriteIntXA
.28d9					_EHNoNumber:
.28d9	4c 0a 29	jmp $290a			jmp 	WarmStartNewLine
.28dc					_EHAtMsg:
>28dc	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.28e1					_EHAtMsg1:
.28e1					WriteIntXA:
.28e1	da		phx				phx
.28e2	48		pha				pha
.28e3	a2 08		ldx #$08			ldx 	#IFR0
.28e5	20 6d 30	jsr $306d			jsr 	IFloatPushRx
.28e8	68		pla				pla
.28e9	20 20 31	jsr $3120			jsr 	IFloatSetByte
.28ec	68		pla				pla
.28ed	85 09		sta $09				sta 	IFR0+IM1
.28ef	a9 0a		lda #$0a			lda 	#10 						; decimal
.28f1	20 c0 2e	jsr $2ec0			jsr 	IFloatIntegerToStringR0	 	; convert
.28f4	20 f4 ff	jsr $fff4			jsr 	OSWriteString 				; print
.28f7	a2 08		ldx #$08			ldx 	#IFR0
.28f9	20 8e 30	jsr $308e			jsr 	IFloatPullRx
.28fc	60		rts				rts
.28fd					NotImplemented:
.28fd	4c 0d 26	jmp $260d		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2900					WarmStart:
.2900	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2902	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2905	a9 6b		lda #$6b			lda 	#"k"
.2907	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.290a					WarmStartNewLine:
.290a	a9 0d		lda #$0d			lda 	#13
.290c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.290f					WarmStartNoPrompt:
.290f	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2911	9a		txs				txs
.2912	20 df ff	jsr $ffdf			jsr 	OSEnterLine 				; edit
.2915	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2916	d0 01		bne $2919			bne 	_WSSkip
.2918	c8		iny				iny
.2919					_WSSkip:
.2919	86 26		stx $26				stx 	zTemp2 						; save address
.291b	84 27		sty $27				sty 	zTemp2+1
.291d	a2 4a		ldx #$4a			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.291f	a0 29		ldy #$29			ldy 	#TOKGetCharacter >> 8
.2921	38		sec				sec
.2922	20 05 20	jsr $2005			jsr 	TOKTokenise
.2925	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2928	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.292b	d0 0b		bne $2938			bne 	_WSLineEdit
.292d	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.292f	85 18		sta $18				sta 	codePtr
.2931	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2933	85 19		sta $19				sta 	codePtr+1
.2935	4c d0 14	jmp $14d0			jmp 	RUNNewLine
.2938					_WSLineEdit:
.2938	20 e0 1e	jsr $1ee0			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.293b	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.293e	c9 04		cmp #$04			cmp 	#4
.2940	f0 03		beq $2945			beq 	_WSNoInsert
.2942	20 2a 1f	jsr $1f2a			jsr 	PGMInsertLine				; if not, maybe insert
.2945					_WSNoInsert:
.2945	20 3c 10	jsr $103c			jsr 	ClearCode 					; clear variables etc.
.2948	80 c5		bra $290f			bra 	WarmStartNoPrompt
.294a					TOKGetCharacter:
.294a	b2 26		lda ($26)			lda 	(zTemp2)
.294c	90 06		bcc $2954			bcc 	_GSNoIncrement
.294e	e6 26		inc $26				inc 	zTemp2
.2950	d0 02		bne $2954			bne 	_GSNoIncrement
.2952	e6 27		inc $27				inc 	zTemp2+1
.2954					_GSNoIncrement:
.2954	c9 00		cmp #$00			cmp 	#0
.2956	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2957					VARArrayLookup:
.2957	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2959	86 23		stx $23				stx 	zTemp0+1
.295b	b2 22		lda ($22)			lda 	(zTemp0)
.295d	48		pha				pha
.295e	5a		phy				phy
.295f	a0 01		ldy #$01			ldy 	#1
.2961	b1 22		lda ($22),y			lda 	(zTemp0),y
.2963	7a		ply				ply
.2964	48		pha				pha
.2965	20 16 17	jsr $1716			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2968	68		pla				pla 								; array address to zTemp0
.2969	85 23		sta $23				sta 	zTemp0+1
.296b	68		pla				pla
.296c	85 22		sta $22				sta 	zTemp0
.296e	5a		phy				phy 								; save codePtr position.
.296f	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2971	b1 22		lda ($22),y			lda 	(zTemp0),y
.2973	48		pha				pha 								; save bit 15 on stack.
.2974	29 7f		and #$7f			and 	#$7F
.2976	85 24		sta $24				sta 	zTemp1
.2978	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.297a	d2 22		cmp ($22)			cmp 	(zTemp0)
.297c	a5 09		lda $09				lda 	IFR0+IM1
.297e	e5 24		sbc $24				sbc 	zTemp1
.2980	b0 3a		bcs $29bc			bcs 	_VALIndex
.2982	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2984	c9 40		cmp #$40			cmp 	#$40
.2986	b0 34		bcs $29bc			bcs 	_VALIndex
.2988	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.298a	26 09		rol $09				rol 	IFR0+IM1
.298c	fa		plx				plx 								; get msb of size -> X
.298d	30 04		bmi $2993			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.298f	06 08		asl $08				asl 	IFR0+IM0
.2991	26 09		rol $09				rol 	IFR0+IM1
.2993					_VARNotX4:
.2993	18		clc				clc 								; add the two for the size bytes
.2994	a5 08		lda $08				lda 	IFR0+IM0
.2996	69 02		adc #$02			adc 	#2
.2998	85 08		sta $08				sta 	IFR0+IM0
.299a	90 02		bcc $299e			bcc 	_VARNoCarry1
.299c	e6 09		inc $09				inc 	IFR0+IM1
.299e					_VARNoCarry1:
.299e	18		clc				clc 								; calculate the element address and push to stack.
.299f	a5 08		lda $08				lda 	IFR0+IM0
.29a1	65 22		adc $22				adc 	zTemp0
.29a3	48		pha				pha
.29a4	a5 09		lda $09				lda 	IFR0+IM1
.29a6	65 23		adc $23				adc 	zTemp0+1
.29a8	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.29aa	30 04		bmi $29b0			bmi 	_VARHasSubLevel
.29ac	aa		tax				tax 								; address in XA
.29ad	68		pla				pla
.29ae	7a		ply				ply 								; restore Y and exit
.29af	60		rts				rts
.29b0					_VARHasSubLevel:
.29b0	aa		tax				tax 								; get link address in XA
.29b1	68		pla				pla
.29b2	7a		ply				ply 								; restore code position.
.29b3	48		pha				pha
.29b4	20 88 27	jsr $2788			jsr 	ERRCheckComma 				; comma required.
.29b7	68		pla				pla
.29b8	20 57 29	jsr $2957			jsr 	VARArrayLookup 				; call it recursively
.29bb	60		rts				rts
.29bc					_VALIndex:
.29bc	4c a7 26	jmp $26a7		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.29bf					VARCreate:
.29bf	5a		phy				phy
.29c0	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.29c2	a2 00		ldx #$00			ldx 	#0
.29c4	20 59 10	jsr $1059			jsr 	AllocateMemory
.29c7	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.29c9	86 25		stx $25				stx 	zTemp1+1
.29cb	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.29cd	ad 2a 06	lda $062a			lda 	VARHash
.29d0	91 24		sta ($24),y			sta 	(zTemp1),y
.29d2	c8		iny				iny 								; put address of name into +3,+4
.29d3	ad 28 06	lda $0628			lda 	VARNameAddress
.29d6	91 24		sta ($24),y			sta 	(zTemp1),y
.29d8	c8		iny				iny
.29d9	ad 29 06	lda $0629			lda 	VARNameAddress+1
.29dc	91 24		sta ($24),y			sta 	(zTemp1),y
.29de	ad 2b 06	lda $062b			lda 	VARType
.29e1	29 01		and #$01			and 	#1
.29e3	f0 06		beq $29eb			beq 	_CVNotString
.29e5	a0 08		ldy #$08			ldy 	#5+3
.29e7	a9 80		lda #$80			lda 	#$80
.29e9	91 24		sta ($24),y			sta 	(zTemp1),y
.29eb					_CVNotString:
.29eb	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.29ee	85 22		sta $22				sta 	zTemp0
.29f0	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.29f3	85 23		sta $23				sta 	zTemp0+1
.29f5	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.29f7	b2 22		lda ($22)			lda 	(zTemp0)
.29f9	92 24		sta ($24)			sta 	(zTemp1)
.29fb	b1 22		lda ($22),y			lda 	(zTemp0),y
.29fd	91 24		sta ($24),y			sta 	(zTemp1),y
.29ff	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2a01	92 22		sta ($22)			sta 	(zTemp0)
.2a03	a5 25		lda $25				lda 	zTemp1+1
.2a05	91 22		sta ($22),y			sta 	(zTemp0),y
.2a07	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2a09	a6 25		ldx $25				ldx 	zTemp1+1
.2a0b	18		clc				clc 								; add 5 to point to the data.
.2a0c	69 05		adc #$05			adc 	#5
.2a0e	90 01		bcc $2a11			bcc 	_VCNoCarry
.2a10	e8		inx				inx
.2a11					_VCNoCarry:
.2a11	7a		ply				ply
.2a12	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2a13					VARFind:
.2a13	5a		phy				phy
.2a14	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2a16	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a18	85 25		sta $25				sta 	zTemp1+1
.2a1a	f0 1c		beq $2a38			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2a1c	b2 22		lda ($22)			lda 	(zTemp0)
.2a1e	85 24		sta $24				sta 	zTemp1
.2a20					_VFLoop:
.2a20	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2a22	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a24	cd 2a 06	cmp $062a			cmp 	VARHash
.2a27	f0 12		beq $2a3b			beq 	_VFHashesMatch 				; if so, check the name.
.2a29					_VFNext:
.2a29	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2a2b	aa		tax				tax
.2a2c	a0 01		ldy #$01			ldy 	#1
.2a2e	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a30	85 25		sta $25				sta 	zTemp1+1
.2a32	86 24		stx $24				stx 	zTemp1
.2a34	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2a36	d0 e8		bne $2a20			bne 	_VFLoop
.2a38					_VFExitFail:
.2a38	7a		ply				ply
.2a39	18		clc				clc
.2a3a	60		rts				rts
.2a3b					_VFHashesMatch:
.2a3b	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2a3d	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a3f	85 26		sta $26				sta 	zTemp2
.2a41	c8		iny				iny
.2a42	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a44	85 27		sta $27				sta 	zTemp2+1
.2a46	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2a48					_VFNameCompLoop:
.2a48	c8		iny				iny 								; char at a time
.2a49	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2a4c	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2a4e	d0 d9		bne $2a29			bne 	_VFNext						; next entry if different.
.2a50	c9 7c		cmp #$7c			cmp 	#$7C
.2a52	90 f4		bcc $2a48			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2a54	18		clc				clc
.2a55	a5 24		lda $24				lda 	zTemp1
.2a57	a6 25		ldx $25				ldx 	zTemp1+1
.2a59	69 05		adc #$05			adc 	#5
.2a5b	90 01		bcc $2a5e			bcc 	_VFNNoCarry
.2a5d	e8		inx				inx
.2a5e					_VFNNoCarry:
.2a5e	7a		ply				ply
.2a5f	38		sec				sec
.2a60	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a61					VARGetInfo:
.2a61	98		tya				tya 								; calculate the address of the identifier start.
.2a62	18		clc				clc
.2a63	65 18		adc $18				adc 	codePtr
.2a65	8d 28 06	sta $0628			sta 	VARNameAddress
.2a68	a5 19		lda $19				lda 	codePtr+1
.2a6a	69 00		adc #$00			adc 	#0
.2a6c	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a6f	9c 2a 06	stz $062a			stz 	VARHash
.2a72	a2 00		ldx #$00			ldx 	#0
.2a74					_VARCopyName:
.2a74	18		clc				clc 								; update the sum hash.
.2a75	ad 2a 06	lda $062a			lda 	VARHash
.2a78	71 18		adc ($18),y			adc 	(codePtr),y
.2a7a	8d 2a 06	sta $062a			sta 	VARHash
.2a7d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a7f	c8		iny				iny
.2a80	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a83	e8		inx				inx
.2a84	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a86	90 ec		bcc $2a74			bcc 	_VARCopyName
.2a88	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a8b	29 03		and #$03			and 	#3 							; type is 0-3
.2a8d	0a		asl a				asl 	a
.2a8e	0a		asl a				asl 	a
.2a8f	85 22		sta $22				sta 	zTemp0
.2a91	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2a94	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2a96	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2a98	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2a99	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2a9b	85 22		sta $22				sta 	zTemp0
.2a9d	8d 4c 06	sta $064c			sta 	VARHashEntry
.2aa0	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2aa2	69 00		adc #$00			adc 	#0
.2aa4	85 23		sta $23				sta 	zTemp0+1
.2aa6	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2aa9	60		rts				rts
.2aaa					VARClearHashTables:
.2aaa	a2 00		ldx #$00			ldx 	#0
.2aac					_VCHRLoop:
.2aac	a9 00		lda #$00			lda 	#0
.2aae	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2ab1	e8		inx				inx
.2ab2	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2ab4	d0 f6		bne $2aac			bne 	_VCHRLoop
.2ab6	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2ab7					VARCheckSimple:
.2ab7	aa		tax				tax 								; save in X
.2ab8	b1 18		lda ($18),y			lda 	(codePtr),y
.2aba	c9 7c		cmp #$7c			cmp 	#$7C
.2abc	d0 15		bne $2ad3			bne 	_VCSComplex
.2abe	c8		iny				iny 								; consume the second byte, the type.
.2abf	8a		txa				txa  								; character (40-7F) x 4
.2ac0	0a		asl a				asl 	a
.2ac1	0a		asl a				asl  	a
.2ac2	18		clc				clc
.2ac3	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2ac5	85 08		sta $08				sta 	IFR0+IM0
.2ac7	a9 06		lda #$06			lda 	#FastVariables >> 8
.2ac9	69 00		adc #$00			adc 	#0
.2acb	85 09		sta $09				sta 	IFR0+IM1
.2acd	64 0a		stz $0a				stz 	IFR0+IM2
.2acf	64 0b		stz $0b				stz 	IFR0+IExp
.2ad1	38		sec				sec 								; it's a reference
.2ad2	60		rts				rts
.2ad3					_VCSComplex:
.2ad3	88		dey				dey	 								; extract information.
.2ad4	20 61 2a	jsr $2a61			jsr 	VARGetInfo
.2ad7	20 13 2a	jsr $2a13			jsr 	VARFind 					; search for variable
.2ada	b0 0a		bcs $2ae6			bcs 	_VCSHaveVariable
.2adc	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2adf	29 02		and #$02			and 	#2
.2ae1	d0 25		bne $2b08			bne 	_VCNoCreate
.2ae3	20 bf 29	jsr $29bf			jsr 	VARCreate 					; create variable
.2ae6					_VCSHaveVariable:
.2ae6	48		pha				pha 								; save LSB on the stack
.2ae7	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2aea	6a		ror a				ror 	a
.2aeb	6a		ror a				ror 	a
.2aec	68		pla				pla 								; restore LSB
.2aed	90 08		bcc $2af7			bcc 	_VCSNotArray 				; skip if not an array
.2aef	20 57 29	jsr $2957			jsr 	VARArrayLookup 				; look for subscripts.
.2af2	48		pha				pha 								; check )
.2af3	20 80 27	jsr $2780			jsr 	ERRCheckRParen
.2af6	68		pla				pla
.2af7					_VCSNotArray:
.2af7	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2af9	85 08		sta $08				sta 	IFR0+IM0
.2afb	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2afd	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2b00	6a		ror a				ror 	a
.2b01	a9 00		lda #$00			lda 	#0
.2b03	6a		ror a				ror 	a 							; now $00 or $80
.2b04	85 0b		sta $0b				sta 	IFR0+IExp
.2b06	38		sec				sec 								; it's a reference
.2b07	60		rts				rts
.2b08					_VCNoCreate:
.2b08	4c cd 26	jmp $26cd		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2b0b					IFInitialise:
.2b0b	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2b0e	60		rts				rts
.2b0f					IFloatSubtract:
.2b0f	da		phx				phx
.2b10	a2 08		ldx #$08			ldx 	#IFR0
.2b12	20 29 31	jsr $3129			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2b15	fa		plx				plx
.2b16					IFloatAdd:
.2b16	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2b18	05 0b		ora $0b				ora 	IFR0+IExp
.2b1a	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2b1c	d0 4e		bne $2b6c			bne 	_IFloatAddDecimals 			; floating point version.
.2b1e					_IFAddSubMantissa:
.2b1e	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2b20	45 0b		eor $0b				eor 	IFR0+IExp
.2b22	29 40		and #$40			and 	#IFSign
.2b24	d0 21		bne $2b47			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2b26	18		clc				clc 								; do the actual addition
.2b27	a5 08		lda $08				lda 	IFR0+IM0
.2b29	75 00		adc $00,x			adc 		IM0,x
.2b2b	85 08		sta $08				sta 	IFR0+IM0
.2b2d	a5 09		lda $09				lda 	IFR0+IM1
.2b2f	75 01		adc $01,x			adc 		IM1,x
.2b31	85 09		sta $09				sta 	IFR0+IM1
.2b33	a5 0a		lda $0a				lda 	IFR0+IM2
.2b35	75 02		adc $02,x			adc 		IM2,x
.2b37	85 0a		sta $0a				sta 	IFR0+IM2
.2b39	10 29		bpl $2b64			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2b3b	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2b3d	20 4d 31	jsr $314d			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2b40	20 77 31	jsr $3177			jsr 	IFloatIncExponent
.2b43	d0 1f		bne $2b64			bne 	_IFloatAddExit
.2b45	38		sec				sec 								; overflowed numerically.
.2b46	60		rts				rts
.2b47					_IFloatSubMantissa:
.2b47	38		sec				sec 								; do the subtraction R0-Rx
.2b48	a5 08		lda $08				lda 	IFR0+IM0
.2b4a	f5 00		sbc $00,x			sbc 		IM0,x
.2b4c	85 08		sta $08				sta 	IFR0+IM0
.2b4e	a5 09		lda $09				lda 	IFR0+IM1
.2b50	f5 01		sbc $01,x			sbc 		IM1,x
.2b52	85 09		sta $09				sta 	IFR0+IM1
.2b54	a5 0a		lda $0a				lda 	IFR0+IM2
.2b56	f5 02		sbc $02,x			sbc 		IM2,x
.2b58	85 0a		sta $0a				sta 	IFR0+IM2
.2b5a	b0 08		bcs $2b64			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b5c	a2 08		ldx #$08			ldx 	#IFR0
.2b5e	20 31 31	jsr $3131			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b61	20 29 31	jsr $3129			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b64					_IFloatAddExit:
.2b64	18		clc				clc
.2b65	60		rts				rts
.2b66					_IFloatZeroAdd:
.2b66	fa		plx				plx 								; return this value in R0
.2b67	20 af 30	jsr $30af			jsr 	IFloatCopyFromRegister
.2b6a	18		clc				clc
.2b6b	60		rts				rts
.2b6c					_IFloatAddDecimals:
.2b6c	20 17 31	jsr $3117			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b6f	f0 f3		beq $2b64			beq 	_IFloatAddExit
.2b71	20 55 31	jsr $3155			jsr 	IFloatNormalise 			; normalise RX
.2b74	da		phx				phx 								; normalise R0
.2b75	a2 08		ldx #$08			ldx 	#IFR0
.2b77	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.2b7a	f0 ea		beq $2b66			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b7c	20 55 31	jsr $3155			jsr 	IFloatNormalise
.2b7f	fa		plx				plx
.2b80	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b82	29 3f		and #$3f			and 	#IFXMask
.2b84	38		sec				sec
.2b85	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b87	85 20		sta $20				sta 	iTemp0
.2b89	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b8b	29 3f		and #$3f			and 	#IFXMask
.2b8d	38		sec				sec
.2b8e	e9 20		sbc #$20			sbc 	#$20
.2b90	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b92	b0 02		bcs $2b96			bcs 	_IFloatHaveLarger
.2b94	a5 20		lda $20				lda 	iTemp0
.2b96					_IFloatHaveLarger:
.2b96	18		clc				clc 								; get the actual one back.
.2b97	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2b99	20 a6 2b	jsr $2ba6			jsr 	_IFShiftXToA
.2b9c	da		phx				phx
.2b9d	a2 08		ldx #$08			ldx 	#IFR0
.2b9f	20 a6 2b	jsr $2ba6			jsr 	_IFShiftXToA
.2ba2	fa		plx				plx
.2ba3	4c 1e 2b	jmp $2b1e			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2ba6					_IFShiftXToA:
.2ba6	8d d6 06	sta $06d6			sta 	IFTarget
.2ba9	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; check adding zero ?
.2bac	f0 11		beq $2bbf			beq 	_IFSXExit
.2bae					_IFSXLoop:
.2bae	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2bb0	29 3f		and #$3f			and 	#IFXMask
.2bb2	cd d6 06	cmp $06d6			cmp 	IFTarget
.2bb5	f0 08		beq $2bbf			beq 	_IFSXExit
.2bb7	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.2bba	20 77 31	jsr $3177			jsr 	IFloatIncExponent
.2bbd	80 ef		bra $2bae			bra 	_IFSXLoop
.2bbf					_IFSXExit:
.2bbf	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2bc0					IFloatMultiply:
.2bc0	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2bc3	20 78 2c	jsr $2c78			jsr 	IFCalculateNewSign
.2bc6	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2bc8	05 0b		ora $0b				ora 	IFR0+IExp
.2bca	29 3f		and #$3f			and 	#IFXMask
.2bcc	15 01		ora $01,x			ora 	IM1,x
.2bce	05 09		ora $09				ora 	IFR0+IM1
.2bd0	15 02		ora $02,x			ora 	IM2,x
.2bd2	05 0a		ora $0a				ora 	IFR0+IM2
.2bd4	d0 0a		bne $2be0			bne 	_IFMStandard
.2bd6	20 fa 30	jsr $30fa			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2bd9	ad d8 06	lda $06d8			lda 	IFNewSign
.2bdc	85 0b		sta $0b				sta 	IFR0+IExp
.2bde	18		clc				clc
.2bdf	60		rts				rts
.2be0					_IFMStandard:
.2be0	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2be2	20 6f 2c	jsr $2c6f			jsr 	IFMSignExtend
.2be5	8d d7 06	sta $06d7			sta 	IFNewExponent
.2be8	a5 0b		lda $0b				lda 	IFR0+IExp
.2bea	20 6f 2c	jsr $2c6f			jsr 	IFMSignExtend
.2bed	18		clc				clc
.2bee	6d d7 06	adc $06d7			adc 	IFNewExponent
.2bf1	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bf4	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2bf6	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister
.2bf9	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2bfb	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2bfe					_IFMLoop:
.2bfe	a2 14		ldx #$14			ldx 	#IFRTemp
.2c00	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.2c03	f0 3a		beq $2c3f			beq 	_IFMExit
.2c05	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2c08	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2c0a	10 03		bpl $2c0f			bpl	 	_IFMTargetOkay
.2c0c	20 60 2c	jsr $2c60			jsr 	_IFMShiftAll
.2c0f					_IFMTargetOkay:
.2c0f	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2c11	29 01		and #$01			and 	#1
.2c13	f0 16		beq $2c2b			beq 	_IFMNoAdd
.2c15	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2c18	18		clc				clc
.2c19	a5 08		lda $08				lda 	IFR0+IM0
.2c1b	75 00		adc $00,x			adc 		IM0,x
.2c1d	85 08		sta $08				sta 	IFR0+IM0
.2c1f	a5 09		lda $09				lda 	IFR0+IM1
.2c21	75 01		adc $01,x			adc 		IM1,x
.2c23	85 09		sta $09				sta 	IFR0+IM1
.2c25	a5 0a		lda $0a				lda 	IFR0+IM2
.2c27	75 02		adc $02,x			adc 		IM2,x
.2c29	85 0a		sta $0a				sta 	IFR0+IM2
.2c2b					_IFMNoAdd:
.2c2b	a5 0a		lda $0a				lda 	IFR0+IM2
.2c2d	10 03		bpl $2c32			bpl 	_IFMResultOkay
.2c2f	20 60 2c	jsr $2c60			jsr 	_IFMShiftAll
.2c32					_IFMResultOkay:
.2c32	a2 14		ldx #$14			ldx 	#IFRTemp
.2c34	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.2c37	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c3a	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.2c3d	80 bf		bra $2bfe			bra 	_IFMLoop
.2c3f					_IFMExit:
.2c3f	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2c42	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2c44	90 0f		bcc $2c55			bcc 	_IFMOkay
.2c46	c9 e0		cmp #$e0			cmp 	#$E0
.2c48	b0 0b		bcs $2c55			bcs 	_IFMOkay
.2c4a	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2c4c	f0 10		beq $2c5e			beq 	_IFMError
.2c4e	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2c50	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2c53	18		clc				clc
.2c54	60		rts				rts
.2c55					_IFMOkay:
.2c55	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c57	0d d8 06	ora $06d8			ora 	IFNewSign
.2c5a	85 0b		sta $0b				sta 	IFR0+IExp
.2c5c	18		clc				clc
.2c5d	60		rts				rts
.2c5e					_IFMError:
.2c5e	38		sec				sec
.2c5f	60		rts				rts
.2c60					_IFMShiftAll:
.2c60	a2 08		ldx #$08			ldx 	#IFR0
.2c62	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.2c65	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c68	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.2c6b	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c6e	60		rts				rts
.2c6f					IFMSignExtend:
.2c6f	29 3f		and #$3f			and 	#IFXMask
.2c71	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c73	90 02		bcc $2c77			bcc 	_IFMNoSXX
.2c75	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c77					_IFMNoSXX:
.2c77	60		rts				rts
.2c78					IFCalculateNewSign:
.2c78	b5 03		lda $03,x			lda 	IExp,x
.2c7a	45 0b		eor $0b				eor 	IFR0+IExp
.2c7c	29 40		and #$40			and 	#IFSign
.2c7e	8d d8 06	sta $06d8			sta 	IFNewSign
.2c81	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c82					IFloatDivideInteger:
.2c82	20 9b 2c	jsr $2c9b			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c85	b0 06		bcs $2c8d			bcs 	_IFDIExit
.2c87	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c89	20 af 30	jsr $30af			jsr 	IFloatCopyFromRegister
.2c8c	18		clc				clc
.2c8d					_IFDIExit:
.2c8d	60		rts				rts
.2c8e					IFloatModulusInteger:
.2c8e	20 9b 2c	jsr $2c9b			jsr 	IFloatDivideIntegerCommon
.2c91	b0 07		bcs $2c9a			bcs 	_IFMIExit
.2c93	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c96	20 af 30	jsr $30af			jsr 	IFloatCopyFromRegister
.2c99	18		clc				clc
.2c9a					_IFMIExit:
.2c9a	60		rts				rts
.2c9b					IFloatDivideIntegerCommon:
.2c9b	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2c9e	20 78 2c	jsr $2c78			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ca1	20 c9 2c	jsr $2cc9			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2ca4	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2ca6	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.2ca9	f0 1c		beq $2cc7			beq 	_IFDIDivZero
.2cab	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2cae	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2cb1	5a		phy				phy
.2cb2	a0 18		ldy #$18			ldy 	#24
.2cb4					_IFDILoop:
.2cb4	20 da 2c	jsr $2cda			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cb7	20 e6 2c	jsr $2ce6			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cba	88		dey				dey
.2cbb	d0 f7		bne $2cb4			bne 	_IFDILoop 					; do it 24 times
.2cbd	7a		ply				ply
.2cbe	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2cc1	29 40		and #$40			and 	#IFSign
.2cc3	85 17		sta $17				sta 	IFRTemp+IExp
.2cc5	18		clc				clc 								; is okay.
.2cc6	60		rts				rts
.2cc7					_IFDIDivZero:
.2cc7	38		sec				sec
.2cc8	60		rts				rts
.2cc9					IFDCopyRXToRTemp:
.2cc9	b5 00		lda $00,x			lda 	IM0,x
.2ccb	85 14		sta $14				sta 	IFRTemp+IM0
.2ccd	b5 01		lda $01,x			lda 	IM1,x
.2ccf	85 15		sta $15				sta 	IFRTemp+IM1
.2cd1	b5 02		lda $02,x			lda 	IM2,x
.2cd3	85 16		sta $16				sta 	IFRTemp+IM2
.2cd5	b5 03		lda $03,x			lda 	IExp,x
.2cd7	85 17		sta $17				sta 	IFRTemp+IExp
.2cd9	60		rts				rts
.2cda					IFDShiftSTempS1Left:
.2cda	a2 14		ldx #$14			ldx 	#IFRTemp
.2cdc	20 45 31	jsr $3145			jsr 	IFloatShiftLeft
.2cdf	ae d6 06	ldx $06d6			ldx 	IFTarget
.2ce2	20 46 31	jsr $3146			jsr 	IFloatRotateLeft
.2ce5	60		rts				rts
.2ce6					IFDTrySubtract:
.2ce6	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2ce9	38		sec				sec 								; subtract, saving the results on the stack.
.2cea	b5 00		lda $00,x			lda 	IM0,x
.2cec	e5 08		sbc $08				sbc 	IFR0+IM0
.2cee	48		pha				pha
.2cef	b5 01		lda $01,x			lda 	IM1,x
.2cf1	e5 09		sbc $09				sbc 	IFR0+IM1
.2cf3	48		pha				pha
.2cf4	b5 02		lda $02,x			lda 	IM2,x
.2cf6	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2cf8	b0 03		bcs $2cfd			bcs 	_IFDCanSubtract
.2cfa	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2cfb	68		pla				pla
.2cfc	60		rts				rts
.2cfd					_IFDCanSubtract:
.2cfd	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2cff	68		pla				pla
.2d00	95 01		sta $01,x			sta 	IM1,x
.2d02	68		pla				pla
.2d03	95 00		sta $00,x			sta 	IM0,x
.2d05	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2d07	d0 06		bne $2d0f			bne 	_IFDCSExit
.2d09	e6 15		inc $15				inc 	IFRTemp+IM1
.2d0b	d0 02		bne $2d0f			bne 	_IFDCSExit
.2d0d	e6 16		inc $16				inc 	IFRTemp+IM2
.2d0f					_IFDCSExit:
.2d0f	60		rts				rts
.2d10					IFloatBitwiseAnd:
.2d10	5a		phy				phy
.2d11	20 55 2d	jsr $2d55			jsr 	IFPreProcessBitwise 		; set up everything.
.2d14	d0 0f		bne $2d25			bne 	_IFBAExit
.2d16					_IFBALoop:
.2d16	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d19	35 00		and $00,x			and 	IM0,x
.2d1b	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d1e	e8		inx				inx
.2d1f	c8		iny				iny
.2d20	c0 03		cpy #$03			cpy 	#3
.2d22	d0 f2		bne $2d16			bne 	_IFBALoop
.2d24	18		clc				clc
.2d25					_IFBAExit:
.2d25	7a		ply				ply
.2d26	60		rts				rts
.2d27					IFloatBitwiseOr:
.2d27	5a		phy				phy
.2d28	20 55 2d	jsr $2d55			jsr 	IFPreProcessBitwise 		; set up everything.
.2d2b	d0 0f		bne $2d3c			bne 	_IFBAExit
.2d2d					_IFBALoop:
.2d2d	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d30	15 00		ora $00,x			ora 	IM0,x
.2d32	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d35	e8		inx				inx
.2d36	c8		iny				iny
.2d37	c0 03		cpy #$03			cpy 	#3
.2d39	d0 f2		bne $2d2d			bne 	_IFBALoop
.2d3b	18		clc				clc
.2d3c					_IFBAExit:
.2d3c	7a		ply				ply
.2d3d	60		rts				rts
.2d3e					IFloatBitwiseXor:
.2d3e	5a		phy				phy
.2d3f	20 55 2d	jsr $2d55			jsr 	IFPreProcessBitwise 		; set up everything.
.2d42	d0 0f		bne $2d53			bne 	_IFBAExit
.2d44					_IFBALoop:
.2d44	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d47	55 00		eor $00,x			eor 	IM0,x
.2d49	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d4c	e8		inx				inx
.2d4d	c8		iny				iny
.2d4e	c0 03		cpy #$03			cpy 	#3
.2d50	d0 f2		bne $2d44			bne 	_IFBALoop
.2d52	18		clc				clc
.2d53					_IFBAExit:
.2d53	7a		ply				ply
.2d54	60		rts				rts
.2d55					IFPreProcessBitwise:
.2d55	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d57	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d59	15 03		ora $03,x			ora 	IExp,x
.2d5b	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d5d	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d5f	38		sec				sec 								; carry set just in cases.
.2d60	60		rts				rts
.2d61					IFloatAbsoluteR0:
.2d61	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d63	29 bf		and #$bf			and 	#IFSign ^ 255
.2d65	85 0b		sta $0b				sta 	IFR0+IExp
.2d67	18		clc				clc
.2d68	60		rts				rts
.2d69					IFloatSquareRootR0:
.2d69	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d6b	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.2d6e	f0 2e		beq $2d9e			beq 	_IFSRZero
.2d70	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d72	29 40		and #$40			and 	#IFSign
.2d74	d0 2f		bne $2da5			bne 	_IFSRFail
.2d76	20 55 31	jsr $3155			jsr 	IFloatNormalise 			; it will work better !
.2d79	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d7b	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister
.2d7e	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d80	20 6f 2c	jsr $2c6f			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d83	18		clc				clc
.2d84	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d86	85 0b		sta $0b				sta 	IFR0+IExp
.2d88	4a		lsr a				lsr 	a 							; which we can halve.
.2d89	38		sec				sec 								; convert back
.2d8a	e9 17		sbc #$17			sbc 	#23
.2d8c	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d8e	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d90	20 a7 2d	jsr $2da7			jsr 	_IFSRNewton
.2d93	20 a7 2d	jsr $2da7			jsr 	_IFSRNewton
.2d96	20 a7 2d	jsr $2da7			jsr 	_IFSRNewton
.2d99	20 a7 2d	jsr $2da7			jsr 	_IFSRNewton
.2d9c	18		clc				clc
.2d9d	60		rts				rts
.2d9e					_IFSRZero:
.2d9e	a2 08		ldx #$08			ldx 	#IFR0
.2da0	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2da3	18		clc				clc
.2da4	60		rts				rts
.2da5					_IFSRFail:
.2da5	38		sec				sec
.2da6	60		rts				rts
.2da7					_IFSRNewton:
.2da7	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2da9	20 6d 30	jsr $306d			jsr 	IFloatPushRx
.2dac	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2dae	20 6d 30	jsr $306d			jsr 	IFloatPushRx
.2db1	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2db3	20 42 2e	jsr $2e42			jsr 	IFloatDivideFloat
.2db6	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2db8	20 8e 30	jsr $308e			jsr 	IFloatPullRx
.2dbb	20 16 2b	jsr $2b16			jsr 	IFloatAdd 					; now guess + original/guess
.2dbe	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2dc0	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.2dc3	a2 0c		ldx #$0c			ldx 	#IFR1
.2dc5	20 8e 30	jsr $308e			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2dc8	60		rts				rts
.2dc9					IFloatFractionalR0:
.2dc9	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2dcb	29 3f		and #$3f			and 	#IFXMask
.2dcd	f0 17		beq $2de6			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2dcf	20 61 2d	jsr $2d61			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2dd2	a2 08		ldx #$08			ldx 	#IFR0
.2dd4	20 55 31	jsr $3155			jsr 	IFloatNormalise 			; normalise R0
.2dd7	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2dd9	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister
.2ddc	20 1f 2e	jsr $2e1f			jsr 	IFloatIntegerR0 			; take integer part of R0
.2ddf	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2de1	20 0f 2b	jsr $2b0f			jsr 	IFloatSubtract
.2de4	80 05		bra $2deb			bra 	_FIPExit
.2de6					_FIPZero:
.2de6	a2 08		ldx #$08			ldx 	#IFR0
.2de8	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2deb					_FIPExit:
.2deb	18		clc				clc
.2dec	60		rts				rts
.2ded					IFloatCompare:
.2ded	20 0f 2b	jsr $2b0f			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2df0	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2df2	05 0b		ora $0b				ora 	IFR0+IExp
.2df4	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2df6	29 3f		and #$3f			and 	#IFXMask
.2df8	d0 19		bne $2e13			bne 	_IFCNonInteger
.2dfa	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; check if zero
.2dfd	f0 0f		beq $2e0e			beq 	_IFCZero
.2dff					_IFCReturnSign:
.2dff	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2e01	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2e03	48		pha				pha
.2e04	a9 01		lda #$01			lda 	#1
.2e06	20 20 31	jsr $3120			jsr 	IFloatSetByte 				; return to +1
.2e09	68		pla				pla 								; sign bit back
.2e0a	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2e0c	18		clc				clc
.2e0d	60		rts				rts
.2e0e					_IFCZero:
.2e0e	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2e11	18		clc				clc
.2e12	60		rts				rts
.2e13					_IFCNonInteger:
.2e13	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2e15	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2e17	05 09		ora $09				ora 	IFR0+IM1
.2e19	05 0a		ora $0a				ora 	IFR0+IM2
.2e1b	f0 f1		beq $2e0e			beq 	_IFCZero 					; near enough !
.2e1d	80 e0		bra $2dff			bra 	_IFCReturnSign 				; return the sign of the difference.
.2e1f					IFloatIntegerR0:
.2e1f	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2e21	29 3f		and #$3f			and 	#IFXMask
.2e23	f0 1b		beq $2e40			beq 	_FIPExit 					; if so do nothing
.2e25	a2 08		ldx #$08			ldx 	#IFR0
.2e27	20 55 31	jsr $3155			jsr 	IFloatNormalise 			; normalise
.2e2a	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; is it zero ?
.2e2d	f0 0e		beq $2e3d			beq 	_FIPZero 					; if so return zero.
.2e2f					_FIPShift:
.2e2f	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2e31	29 20		and #$20			and 	#$20 						; still -ve
.2e33	f0 0b		beq $2e40			beq 	_FIPExit
.2e35	20 4d 31	jsr $314d			jsr 	IFloatShiftRight 			; shift mantissa right
.2e38	20 77 31	jsr $3177			jsr 	IFloatIncExponent 			; bump exponent
.2e3b	80 f2		bra $2e2f			bra 	_FIPShift
.2e3d					_FIPZero:
.2e3d	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2e40					_FIPExit:
.2e40	18		clc				clc
.2e41	60		rts				rts
.2e42					IFloatDivideFloat:
.2e42	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2e45	20 78 2c	jsr $2c78			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e48	20 55 31	jsr $3155			jsr 	IFloatNormalise 			; normalise RX
.2e4b	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2e4d	20 55 31	jsr $3155			jsr 	IFloatNormalise
.2e50	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.2e53	f0 56		beq $2eab			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e55	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e57	20 6f 2c	jsr $2c6f			jsr 	IFMSignExtend
.2e5a	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e5d	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e60	b5 03		lda $03,x			lda 	IExp,x
.2e62	20 6f 2c	jsr $2c6f			jsr 	IFMSignExtend
.2e65	38		sec				sec
.2e66	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e69	38		sec				sec
.2e6a	e9 17		sbc #$17			sbc 	#23
.2e6c	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e6f	20 ad 2e	jsr $2ead			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e72	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e74	10 08		bpl $2e7e			bpl 	_IFDFNoShiftResult
.2e76	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e78	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.2e7b	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e7e					_IFDFNoShiftResult:
.2e7e	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e81	30 06		bmi $2e89			bmi 	_IFDFCheckUnderflow
.2e83	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e85	b0 24		bcs $2eab			bcs 	_IFDFDivZero
.2e87	80 11		bra $2e9a			bra		_IFDFExit
.2e89					_IFDFCheckUnderflow:
.2e89	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e8c	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e8e	b0 0a		bcs $2e9a			bcs 	_IFDFExit
.2e90	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e93	a2 14		ldx #$14			ldx 	#IFRTemp
.2e95	20 4d 31	jsr $314d			jsr 	IFloatShiftRight
.2e98	80 ef		bra $2e89			bra 	_IFDFCheckUnderflow
.2e9a					_IFDFExit:
.2e9a	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2e9d	29 3f		and #$3f			and 	#IFXMask
.2e9f	0d d8 06	ora $06d8			ora 	IFNewSign
.2ea2	85 17		sta $17				sta 	IFRTemp+IExp
.2ea4	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2ea6	20 af 30	jsr $30af			jsr 	IFloatCopyFromRegister
.2ea9	18		clc				clc
.2eaa	60		rts				rts
.2eab					_IFDFDivZero:
.2eab	38		sec				sec
.2eac	60		rts				rts
.2ead					IFloatDivideSupport:
.2ead	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2eaf	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2eb2	5a		phy				phy 								; main division loop x 23
.2eb3	a0 17		ldy #$17			ldy 	#23
.2eb5					_IFDSLoop:
.2eb5	20 e6 2c	jsr $2ce6			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2eb8	20 da 2c	jsr $2cda			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2ebb	88		dey				dey
.2ebc	d0 f7		bne $2eb5			bne 	_IFDSLoop 					; do it 24 times
.2ebe	7a		ply				ply
.2ebf	60		rts				rts
.2ec0					IFloatIntegerToStringR0:
.2ec0	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2ec3	20 9f 31	jsr $319f			jsr 	IFloatBufferReset			; empty buffer
.2ec6	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2ec8	29 3f		and #$3f			and 	#IFXMask
.2eca	d0 1d		bne $2ee9			bne 	_IFIFail
.2ecc	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2ece	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.2ed1	f0 0e		beq $2ee1			beq 	_IFINotNegative
.2ed3	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2ed5	29 40		and #$40			and 	#IFSign
.2ed7	f0 08		beq $2ee1			beq 	_IFINotNegative
.2ed9	a9 2d		lda #$2d			lda 	#"-"						; output -
.2edb	20 ae 31	jsr $31ae			jsr 	IFloatBufferWrite
.2ede	20 29 31	jsr $3129			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2ee1					_IFINotNegative:
.2ee1	20 eb 2e	jsr $2eeb			jsr 	_IFIRecursiveConvert 		; start converting
.2ee4	20 a6 31	jsr $31a6			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2ee7	18		clc				clc
.2ee8	60		rts				rts
.2ee9					_IFIFail:
.2ee9	38		sec				sec
.2eea	60		rts				rts
.2eeb					_IFIRecursiveConvert:
.2eeb	a2 0c		ldx #$0c			ldx 	#IFR1
.2eed	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister 		; R0->R1
.2ef0	a2 08		ldx #$08			ldx 	#IFR0
.2ef2	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2ef5	20 20 31	jsr $3120			jsr 	IFloatSetByte
.2ef8	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2efa	20 82 2c	jsr $2c82			jsr 	IFloatDivideInteger
.2efd	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2eff	20 17 31	jsr $3117			jsr 	IFloatCheckZero
.2f02	f0 09		beq $2f0d			beq 	_IFIOutDigit
.2f04	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2f06	48		pha				pha
.2f07	20 eb 2e	jsr $2eeb			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2f0a	68		pla				pla
.2f0b	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2f0d					_IFIOutDigit:
.2f0d	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2f0f	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2f11	90 02		bcc $2f15			bcc 	_IFINotHex
.2f13	69 06		adc #$06			adc 	#6
.2f15					_IFINotHex:
.2f15	69 30		adc #$30			adc 	#48
.2f17	20 ae 31	jsr $31ae			jsr 	IFloatBufferWrite 			; write character to buffer.
.2f1a	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2f1b					IFloatFloatToStringR0:
.2f1b	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2f1d	20 6d 30	jsr $306d			jsr 	IFloatPushRx
.2f20	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister
.2f23	20 1f 2e	jsr $2e1f			jsr 	IFloatIntegerR0				; make R0 integer
.2f26	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2f28	20 c0 2e	jsr $2ec0			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2f2b	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2f2e	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2f30	29 3f		and #$3f			and 	#IFXMask
.2f32	f0 44		beq $2f78			beq 	_IFFSExit
.2f34					_IFloatFracLoop:
.2f34	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2f36	20 af 30	jsr $30af			jsr 	IFloatCopyFromRegister
.2f39	20 c9 2d	jsr $2dc9			jsr 	IFloatFractionalR0
.2f3c	20 55 31	jsr $3155			jsr 	IFloatNormalise
.2f3f	a2 10		ldx #$10			ldx 	#IFR2
.2f41	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister 		; copy to back R2
.2f44	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2f46	a9 0a		lda #$0a			lda 	#10
.2f48	20 20 31	jsr $3120			jsr 	IFloatSetByte
.2f4b	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2f4d	20 c0 2b	jsr $2bc0			jsr 	IFloatMultiply
.2f50	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2f52	20 c0 30	jsr $30c0			jsr 	IFloatCopyToRegister
.2f55	20 1f 2e	jsr $2e1f			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f58	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f5b	c9 03		cmp #$03			cmp 	#3
.2f5d	f0 16		beq $2f75			beq 	_IFFSExitStripZero
.2f5f	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f62	d0 05		bne $2f69			bne 	_IFloatNotFirst
.2f64	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f66	20 ae 31	jsr $31ae			jsr 	IFloatBufferWrite
.2f69					_IFloatNotFirst:
.2f69	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f6c	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f6e	09 30		ora #$30			ora 	#"0"						; ASCII
.2f70	20 ae 31	jsr $31ae			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f73	80 bf		bra $2f34			bra 	_IFloatFracLoop
.2f75					_IFFSExitStripZero:
.2f75	20 bd 31	jsr $31bd			jsr 	IFloatStripTrailingZeros
.2f78					_IFFSExit:
.2f78	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f7a	20 8e 30	jsr $308e			jsr 	IFloatPullRx
.2f7d	20 a6 31	jsr $31a6			jsr 	IFloatGetBufferAddress
.2f80	18		clc				clc
.2f81	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f82					IFloatStringToFloatR0:
.2f82	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f85	86 20		stx $20				stx 	iTemp0
.2f87	84 21		sty $21				sty 	iTemp0+1
.2f89	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f8b	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2f8e	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f91	20 1e 30	jsr $301e			jsr 	IFSTFGetNext 				; get first
.2f94	f0 1b		beq $2fb1			beq 	_IFSTFFail 					; no character, fail.
.2f96	90 10		bcc $2fa8			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2f98	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2f9a	d0 15		bne $2fb1			bne 	_IFSTFFail
.2f9c	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2f9e	8d dc 06	sta $06dc			sta 	IFSignFlag
.2fa1					_IFSTFLoop:
.2fa1	20 1e 30	jsr $301e			jsr 	IFSTFGetNext 				; get next character
.2fa4	b0 0b		bcs $2fb1			bcs 	_IFSTFFail 					; bad character.
.2fa6	f0 11		beq $2fb9			beq 	_IFSTFExit 					; end of data
.2fa8					_IFSTFHaveChar:
.2fa8	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2faa	f0 08		beq $2fb4			beq 	_IFSTFDecimal
.2fac	20 42 30	jsr $3042			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2faf	80 f0		bra $2fa1			bra 	_IFSTFLoop 					; keep going until . or end.
.2fb1					_IFSTFFail:
.2fb1	38		sec				sec
.2fb2	80 0d		bra $2fc1			bra 	_IFSTFReturn
.2fb4					_IFSTFDecimal:
.2fb4	20 c9 2f	jsr $2fc9			jsr 	IFSTFDecimal 				; call the decimal places code.
.2fb7	b0 08		bcs $2fc1			bcs 	_IFSTFReturn 				; error
.2fb9					_IFSTFExit:
.2fb9	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2fbb	0d dc 06	ora $06dc			ora 	IFSignFlag
.2fbe	85 0b		sta $0b				sta 	IFR0+IExp
.2fc0	18		clc				clc
.2fc1					_IFSTFReturn:
.2fc1	60		rts				rts
.2fc2					IFloatAddDecimalToR0:
.2fc2	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2fc5	86 20		stx $20				stx 	iTemp0
.2fc7	84 21		sty $21				sty 	iTemp0+1
.2fc9					IFSTFDecimal:
.2fc9	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2fcb	20 6d 30	jsr $306d			jsr 	IFloatPushRx
.2fce	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2fd0	20 1e 31	jsr $311e			jsr 	IFloatSetZero
.2fd3	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2fd6					_IFSTDLoop:
.2fd6	20 1e 30	jsr $301e			jsr 	IFSTFGetNext 				; get next
.2fd9	b0 41		bcs $301c			bcs 	_IFSTFFail2 				; bad character.
.2fdb	f0 11		beq $2fee			beq 	_IFSTFComplete 				; end of data, work out the result.
.2fdd	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2fdf	f0 39		beq $301a			beq 	_IFSTFExit2
.2fe1	20 42 30	jsr $3042			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2fe4	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2fe7	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2fea	c9 03		cmp #$03			cmp 	#3
.2fec	90 e8		bcc $2fd6			bcc 	_IFSTDLoop
.2fee					_IFSTFComplete:
.2fee	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2ff1	f0 27		beq $301a			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2ff3	3a		dec a				dec 	a 							; table indexed from 1.
.2ff4	0a		asl a				asl 	a
.2ff5	0a		asl a				asl 	a
.2ff6	aa		tax				tax
.2ff7	bd 59 30	lda $3059,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2ffa	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2ffc	bd 5a 30	lda $305a,x			lda 	TableTen+1,x
.2fff	85 0d		sta $0d				sta  	IFR1+IM1
.3001	bd 5b 30	lda $305b,x			lda 	TableTen+2,x
.3004	85 0e		sta $0e				sta  	IFR1+IM2
.3006	bd 5c 30	lda $305c,x			lda 	TableTen+3,x
.3009	85 0f		sta $0f				sta  	IFR1+IExp
.300b	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.300d	20 c0 2b	jsr $2bc0			jsr 	IFloatMultiply
.3010	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3012	20 8e 30	jsr $308e			jsr 	IFloatPullRx
.3015	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3017	20 16 2b	jsr $2b16			jsr 	IFloatAdd
.301a					_IFSTFExit2:
.301a	18		clc				clc
.301b	60		rts				rts
.301c					_IFSTFFail2:
.301c	38		sec				sec
.301d	60		rts				rts
.301e					IFSTFGetNext:
.301e	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.3021	f0 19		beq $303c			beq 	_IFSTFReturnOk
.3023	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3025	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3027	d0 02		bne $302b			bne 	_IFSTFGNNoCarry
.3029	e6 21		inc $21				inc 	iTemp0+1
.302b					_IFSTFGNNoCarry:
.302b	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.302e	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3030	f0 08		beq $303a			beq 	_IFSTFGOkay
.3032	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3034	90 08		bcc $303e			bcc 	_IFSTFGFail
.3036	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3038	b0 04		bcs $303e			bcs 	_IFSTFGFail
.303a					_IFSTFGOkay:
.303a	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.303c					_IFSTFReturnOk:
.303c	18		clc				clc
.303d	60		rts				rts
.303e					_IFSTFGFail:
.303e	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3040	38		sec				sec
.3041	60		rts				rts
.3042					IFSTFAddR0:
.3042	29 0f		and #$0f			and 	#15 						; to int value
.3044	48		pha				pha 								; save it.
.3045	a9 0a		lda #$0a			lda 	#10
.3047	a2 0c		ldx #$0c			ldx 	#IFR1
.3049	20 20 31	jsr $3120			jsr 	IFloatSetByte
.304c	20 c0 2b	jsr $2bc0			jsr 	IFloatMultiply
.304f	68		pla				pla
.3050	a2 0c		ldx #$0c			ldx 	#IFR1
.3052	20 20 31	jsr $3120			jsr 	IFloatSetByte
.3055	20 16 2b	jsr $2b16			jsr 	IFloatAdd
.3058	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3059					TableTen:
>3059	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>305d	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3061	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3065	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3069	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.306d					IFloatPushRx:
.306d	5a		phy				phy
.306e	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3071	b5 00		lda $00,x			lda 	IM0,x
.3073	99 df 06	sta $06df,y			sta 	IFStack,y
.3076	b5 01		lda $01,x			lda 	IM1,x
.3078	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.307b	b5 02		lda $02,x			lda 	IM2,x
.307d	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.3080	b5 03		lda $03,x			lda 	IExp,x
.3082	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.3085	c8		iny				iny
.3086	c8		iny				iny
.3087	c8		iny				iny
.3088	c8		iny				iny
.3089	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.308c	7a		ply				ply
.308d	60		rts				rts
.308e					IFloatPullRx:
.308e	5a		phy				phy
.308f	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.3092	88		dey				dey
.3093	88		dey				dey
.3094	88		dey				dey
.3095	88		dey				dey
.3096	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3099	95 00		sta $00,x			sta 	IM0,x
.309b	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.309e	95 01		sta $01,x			sta 	IM1,x
.30a0	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.30a3	95 02		sta $02,x			sta 	IM2,x
.30a5	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.30a8	95 03		sta $03,x			sta 	IExp,x
.30aa	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.30ad	7a		ply				ply
.30ae	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.30af					IFloatCopyFromRegister:
.30af	b5 00		lda $00,x			lda 	0,x
.30b1	85 08		sta $08				sta 	IFR0
.30b3	b5 01		lda $01,x			lda 	1,x
.30b5	85 09		sta $09				sta 	IFR0+1
.30b7	b5 02		lda $02,x			lda 	2,x
.30b9	85 0a		sta $0a				sta 	IFR0+2
.30bb	b5 03		lda $03,x			lda 	3,x
.30bd	85 0b		sta $0b				sta 	IFR0+3
.30bf	60		rts				rts
.30c0					IFloatCopyToRegister:
.30c0	a5 08		lda $08				lda 	IFR0
.30c2	95 00		sta $00,x			sta 	0,x
.30c4	a5 09		lda $09				lda 	IFR0+1
.30c6	95 01		sta $01,x			sta 	1,x
.30c8	a5 0a		lda $0a				lda 	IFR0+2
.30ca	95 02		sta $02,x			sta 	2,x
.30cc	a5 0b		lda $0b				lda 	IFR0+3
.30ce	95 03		sta $03,x			sta 	3,x
.30d0	60		rts				rts
.30d1					IFloatLoadInline:
.30d1	68		pla				pla 								; pop address off to iTemp0
.30d2	85 20		sta $20				sta 	iTemp0
.30d4	68		pla				pla
.30d5	85 21		sta $21				sta 	iTemp0+1
.30d7	a0 01		ldy #$01			ldy 	#1
.30d9	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.30db	95 00		sta $00,x			sta 	0,x
.30dd	c8		iny				iny
.30de	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.30e0	95 01		sta $01,x			sta 	1,x
.30e2	c8		iny				iny
.30e3	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.30e5	95 02		sta $02,x			sta 	2,x
.30e7	c8		iny				iny
.30e8	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.30ea	95 03		sta $03,x			sta 	3,x
.30ec	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.30ed	a5 20		lda $20				lda 	iTemp0
.30ef	69 05		adc #$05			adc 	#5
.30f1	85 20		sta $20				sta 	iTemp0
.30f3	90 02		bcc $30f7			bcc 	_IFLINoCarry
.30f5	e6 21		inc $21				inc 	iTemp0+1
.30f7					_IFLINoCarry:
.30f7	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.30fa					IFloatMultiply8BitRx:
.30fa	5a		phy		        phy
.30fb	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.30fd	a4 08		ldy $08		        ldy     IFR0+IM0
.30ff	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3100	85 08		sta $08		        sta     IFR0+IM0
.3102	84 09		sty $09		        sty     IFR0+IM1
.3104	a9 00		lda #$00	        lda     #0
.3106	a0 08		ldy #$08	        ldy     #8
.3108					_IFMLoop:
.3108	90 03		bcc $310d	        bcc     _IFMNoAdd
.310a	18		clc		        clc
.310b	65 09		adc $09		        adc     IFR0+IM1
.310d					_IFMNoAdd:
.310d	6a		ror a		        ror     a
.310e	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3110	88		dey		        dey
.3111	d0 f5		bne $3108	        bne     _IFMLoop
.3113	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3115	7a		ply		        ply
.3116	60		rts		        rts
.3117					IFloatCheckZero:
.3117	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3119	15 01		ora $01,x			ora 	IM1,x
.311b	15 02		ora $02,x			ora 	IM2,x
.311d	60		rts				rts
.311e					IFloatSetZero:
.311e	a9 00		lda #$00			lda 	#0
.3120					IFloatSetByte:
.3120	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3122	74 01		stz $01,x			stz 	IM1,x
.3124	74 02		stz $02,x			stz 	IM2,x
.3126	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3128	60		rts				rts
.3129					IFloatNegate:
.3129	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.312b	49 40		eor #$40			eor 	#IFSign
.312d	95 03		sta $03,x			sta 	IExp,x
.312f	18		clc				clc
.3130	60		rts				rts
.3131					IFloatMantissaNegate:
.3131	38		sec				sec 								; when you want a real 2's complement negative value.
.3132	a9 00		lda #$00			lda 	#0
.3134	f5 00		sbc $00,x			sbc 	IM0,x
.3136	95 00		sta $00,x			sta 	IM0,x
.3138	a9 00		lda #$00			lda 	#0
.313a	f5 01		sbc $01,x			sbc 	IM1,x
.313c	95 01		sta $01,x			sta 	IM1,x
.313e	a9 00		lda #$00			lda 	#0
.3140	f5 02		sbc $02,x			sbc 	IM2,x
.3142	95 02		sta $02,x			sta 	IM2,x
.3144	60		rts				rts
.3145					IFloatShiftLeft:
.3145	18		clc				clc
.3146					IFloatRotateLeft:
.3146	36 00		rol $00,x			rol 	IM0,x
.3148	36 01		rol $01,x			rol 	IM1,x
.314a	36 02		rol $02,x			rol 	IM2,x
.314c	60		rts				rts
.314d					IFloatShiftRight:
.314d	18		clc				clc
.314e					IFloatRotateRight:
.314e	76 02		ror $02,x			ror 	IM2,x
.3150	76 01		ror $01,x			ror 	IM1,x
.3152	76 00		ror $00,x			ror 	IM0,x
.3154	60		rts				rts
.3155					IFloatNormalise:
.3155	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; is it zero
.3158	f0 18		beq $3172			beq 	_IFNExitZero 				; if so exit
.315a					_IFNLoop:
.315a	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.315c	29 c0		and #$c0			and 	#$C0
.315e	c9 40		cmp #$40			cmp 	#$40
.3160	f0 13		beq $3175			beq 	_IFNExitOkay 				; if so , then we are done.
.3162	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3164	29 3f		and #$3f			and 	#$3F
.3166	c9 20		cmp #$20			cmp 	#$20
.3168	f0 0b		beq $3175			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.316a	20 8b 31	jsr $318b			jsr 	IFloatDecExponent
.316d	20 45 31	jsr $3145			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3170	80 e8		bra $315a			bra 	_IFNLoop
.3172					_IFNExitZero:
.3172	20 1e 31	jsr $311e			jsr 	IFloatSetZero 				; set the result to zero
.3175					_IFNExitOkay:
.3175	18		clc				clc  								; return with CC.
.3176	60		rts				rts
.3177					IFloatIncExponent:
.3177	b5 03		lda $03,x			lda 	IExp,x
.3179	48		pha				pha
.317a	29 c0		and #$c0			and 	#$C0
.317c	8d 1f 07	sta $071f			sta 	IFXTemp
.317f	68		pla				pla
.3180	1a		inc a				inc 	a
.3181	29 3f		and #$3f			and 	#$3F
.3183	48		pha				pha
.3184	0d 1f 07	ora $071f			ora 	IFXTemp
.3187	95 03		sta $03,x			sta 	IExp,x
.3189	68		pla				pla
.318a	60		rts				rts
.318b					IFloatDecExponent:
.318b	b5 03		lda $03,x			lda 	IExp,x
.318d	48		pha				pha
.318e	29 c0		and #$c0			and 	#$C0
.3190	8d 1f 07	sta $071f			sta 	IFXTemp
.3193	68		pla				pla
.3194	3a		dec a				dec 	a
.3195	29 3f		and #$3f			and 	#$3F
.3197	48		pha				pha
.3198	0d 1f 07	ora $071f			ora 	IFXTemp
.319b	95 03		sta $03,x			sta 	IExp,x
.319d	68		pla				pla
.319e	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.319f					IFloatBufferReset:
.319f	9c 20 07	stz $0720			stz 	IFBufferCount
.31a2	9c 21 07	stz $0721			stz 	IFBuffer
.31a5	60		rts				rts
.31a6					IFloatGetBufferAddress:
.31a6	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.31a8	a2 20		ldx #$20			ldx 	#(IFBufferCount & $FF)
.31aa	ad 20 07	lda $0720			lda 	IFBufferCount
.31ad	60		rts				rts
.31ae					IFloatBufferWrite:
.31ae	da		phx				phx
.31af	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31b2	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.31b5	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.31b8	ee 20 07	inc $0720			inc 	IFBufferCount
.31bb	fa		plx				plx
.31bc	60		rts				rts
.31bd					IFloatStripTrailingZeros:
.31bd	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31c0	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.31c3	c9 30		cmp #$30			cmp		#"0"
.31c5	d0 0f		bne $31d6			bne 	_IFSTExit
.31c7	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.31ca	c9 2e		cmp #$2e			cmp 	#"."
.31cc	f0 08		beq $31d6			beq 	_IFSTExit
.31ce	ce 20 07	dec $0720			dec 	IFBufferCount
.31d1	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.31d4	80 e7		bra $31bd			bra 	IFloatStripTrailingZeros
.31d6					_IFSTExit:
.31d6	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.31d7					IFloatCheckRange:
.31d7	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.31d9	09 40		ora #$40			ora 	#IFSign
.31db	85 0b		sta $0b				sta 	IFR0+IExp
.31dd	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.31df	20 16 2b	jsr $2b16			jsr 	IFloatAdd 					; add allowed to error.
.31e2	a2 08		ldx #$08			ldx 	#IFR0
.31e4	20 17 31	jsr $3117			jsr 	IFloatCheckZero 			; error if < 0
.31e7	f0 06		beq $31ef			beq 	_IFAOkay
.31e9	a5 0b		lda $0b				lda 	IFR0+IExp
.31eb	29 40		and #$40			and 	#IFSign
.31ed	d0 01		bne $31f0			bne 	_IFAFail
.31ef					_IFAOkay:
.31ef	60		rts				rts
.31f0					_IFAFail:
.31f0	38		sec				sec
.31f1	68		pla				pla 								; get address - 2
.31f2	e9 02		sbc #$02			sbc 	#2
.31f4	aa		tax				tax
.31f5	68		pla				pla
.31f6	e9 00		sbc #$00			sbc 	#0
.31f8	a8		tay				tay
.31f9	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.31fb					_IFAStop:
>31fb	db						.byte 	$DB 						; display an error AA ADR ADR
.31fc	80 fd		bra $31fb			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
