
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Tue May 30 06:52:39 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 f6 1b	jsr $1bf6			jsr 	PGMSetBaseAddress
.1007	20 66 1f	jsr $1f66			jsr 	IFInitialise
.100a	4c e0 10	jmp $10e0			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 48 14	jsr $1448			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 84 11	jmp $1184		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 df 1e	jsr $1edf			jsr 	StringSystemInitialise
.101e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.101f					NoExec01:
.101f					NoExec02:
.101f					NoExec03:
.101f					NoExec04:
.101f					NoExec05:
.101f					NoExec06:
.101f					NoExec07:
.101f	4c 33 11	jmp $1133		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1022					Command_Print:
.1022					Command_IP_Main:
.1022	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1023					_CPLoop:
.1023	08		php				php 								; save last action flag
.1024	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1026	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1028	f0 3e		beq $1068			beq 	_CPExit 					; without consuming
.102a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.102c	f0 3a		beq $1068			beq 	_CPExit
.102e	68		pla				pla 								; throw last action flag
.102f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1031	c8		iny				iny
.1032	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1034	f0 2f		beq $1065			beq 	_CPContinueWithSameLine
.1036	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1038	f0 26		beq $1060			beq 	_CPTab
.103a	88		dey				dey 								; undo the get.
.103b	20 08 14	jsr $1408			jsr 	EXPEvaluateExpression 		; evaluate expression.
.103e	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1040	10 14		bpl $1056			bpl 	_CPNumber
.1042	5a		phy				phy
.1043	18		clc				clc 								; string address to YX
.1044	a5 0c		lda $0c				lda 	IFR0+IM0
.1046	aa		tax				tax
.1047	a5 0d		lda $0d				lda 	IFR0+IM1
.1049	a8		tay				tay
.104a	e8		inx				inx 								; point to 1st character
.104b	d0 01		bne $104e			bne 	_CPNoCarry
.104d	c8		iny				iny
.104e					_CPNoCarry:
.104e	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1050	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.1053	7a		ply				ply
.1054	80 cc		bra $1022			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1056					_CPNumber:
.1056	5a		phy				phy
.1057	20 78 23	jsr $2378			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.105a	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.105d	7a		ply				ply
.105e	80 c2		bra $1022			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1060					_CPTab:
.1060	a9 09		lda #$09			lda 	#9 							; print TAB
.1062	20 84 10	jsr $1084			jsr 	CPPrintA
.1065					_CPContinueWithSameLine:
.1065	38		sec				sec 								; loop round with carry set, which
.1066	80 bb		bra $1023			bra 	_CPLoop 					; will inhibit final CR
.1068					_CPExit:
.1068	28		plp				plp 								; get last action flag
.1069	b0 05		bcs $1070			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.106b	a9 0d		lda #$0d			lda 	#13 						; print new line
.106d	20 84 10	jsr $1084			jsr 	CPPrintA
.1070					_CPExit2:
.1070	60		rts				rts
.1071					CPPrintAYX:
.1071	86 1e		stx $1e				stx 	zTemp0
.1073	84 1f		sty $1f				sty 	zTemp0+1
.1075	aa		tax				tax
.1076	f0 0b		beq $1083			beq 	_CPPrintExit
.1078	a0 00		ldy #$00			ldy 	#0
.107a					_CPPrintAYXLoop:
.107a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.107c	20 84 10	jsr $1084			jsr 	CPPrintA
.107f	c8		iny				iny
.1080	ca		dex				dex
.1081	d0 f7		bne $107a			bne 	_CPPrintAYXLoop
.1083					_CPPrintExit:
.1083	60		rts				rts
.1084					CPPrintA:
.1084	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1087					CommandLET:
.1087	20 aa 14	jsr $14aa			jsr 	EXPTermR0 					; get term
.108a	90 38		bcc $10c4			bcc 	_CLError 					; must be a reference term.
.108c	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.108e	48		pha				pha
.108f	a5 0d		lda $0d				lda 	IFR0+IM1
.1091	48		pha				pha
.1092	a5 0f		lda $0f				lda 	IFR0+IExp
.1094	48		pha				pha
.1095	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1097	20 82 12	jsr $1282			jsr 	ERRCheckA
.109a	20 08 14	jsr $1408			jsr 	EXPEvaluateExpression 		; right hand side.
.109d	68		pla				pla 								; type of l-expr
.109e	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.10a0	30 25		bmi $10c7			bmi 	_CLType
.10a2	fa		plx				plx 	 							; pop target address to zTemp0
.10a3	86 1f		stx $1f				stx 	zTemp0+1
.10a5	fa		plx				plx
.10a6	86 1e		stx $1e				stx 	zTemp0
.10a8	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.10aa	30 15		bmi $10c1			bmi 	_CLStringAssign
.10ac	5a		phy				phy
.10ad	a0 03		ldy #$03			ldy 	#3
.10af	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10b1	88		dey				dey
.10b2	a5 0e		lda $0e				lda 	IFR0+IM2
.10b4	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10b6	88		dey				dey
.10b7	a5 0d		lda $0d				lda 	IFR0+IM1
.10b9	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10bb	a5 0c		lda $0c				lda 	IFR0+IM0
.10bd	92 1e		sta ($1e)			sta 	(zTemp0)
.10bf	7a		ply				ply
.10c0	60		rts				rts
.10c1					_CLStringAssign:
.10c1	4c 71 11	jmp $1171		jmp	ErrorV_unimplemented
.10c4					_CLError:
.10c4	4c 56 12	jmp $1256		jmp	ErrorV_variable
.10c7					_CLType:
.10c7	4c 60 11	jmp $1160		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.10ca					Command_NEW:
.10ca	20 fd 1b	jsr $1bfd			jsr 	PGMNewProgram
.10cd	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.10d0	4c 2d 11	jmp $112d			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.10d3					Command_REM:
.10d3					Command_REM2:
.10d3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.10d5	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.10d7	d0 06		bne $10df			bne 	_CRExit
.10d9	c8		iny				iny 								; skip over it, it's a comment.
.10da	98		tya				tya
.10db	38		sec				sec
.10dc	71 1c		adc ($1c),y			adc 	(codePtr),y
.10de	a8		tay				tay
.10df					_CRExit:
.10df	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.10e0					Command_RUN:
.10e0	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.10e3	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.10e6	85 1d		sta $1d				sta 	codePtr+1
.10e8	64 1c		stz $1c				stz 	codePtr
.10ea	80 0b		bra $10f7			bra 	RUNNewLine
.10ec					RUNEndOfLine:
.10ec	18		clc				clc 								; advance to next line.
.10ed	b2 1c		lda ($1c)			lda 	(codePtr)
.10ef	65 1c		adc $1c				adc 	codePtr
.10f1	85 1c		sta $1c				sta 	codePtr
.10f3	90 02		bcc $10f7			bcc 	_RELNoCarry
.10f5	e6 1d		inc $1d				inc 	codePtr+1
.10f7					_RELNoCarry:
.10f7					RUNNewLine:
.10f7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.10f9	9a		txs				txs
.10fa	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.10fc	f0 2f		beq $112d			beq 	Command_END
.10fe	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1100					RUNNewCommand:
.1100	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.1103	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.1105	10 1a		bpl $1121			bpl		_RUNNotToken 				; probably an identifier
.1107	c8		iny				iny 								; consume token
.1108	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.110a	f0 f4		beq $1100			beq 	RUNNewCommand
.110c	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.110e	b0 0e		bcs $111e			bcs 	_RUNSyntax
.1110	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1112	90 0a		bcc $111e			bcc 	_RUNSyntax
.1114	0a		asl a				asl 	a 							; double into X.
.1115	aa		tax				tax
.1116	20 1b 11	jsr $111b			jsr 	_RUNDispatchMain			; call the main dispatcher
.1119	80 e5		bra $1100			bra 	RUNNewCommand
.111b					_RUNDispatchMain:
.111b	7c 13 19	jmp ($1913,x)			jmp 	(VectorTable,x)
.111e					_RUNSyntax:
.111e	4c 33 11	jmp $1133		jmp	ErrorV_syntax
.1121					_RUNNotToken:
.1121	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1123	90 f9		bcc $111e			bcc 	_RUNSyntax
.1125	20 87 10	jsr $1087			jsr 	CommandLET 					; assignment
.1128	80 d6		bra $1100			bra 	RUNNewCommand 				; loop round.
.112a					Command_Shift_Handler:
.112a	4c 71 11	jmp $1171		jmp	ErrorV_unimplemented
.112d					Command_END:
.112d	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1130					Command_STOP:
.1130	4c ce 11	jmp $11ce		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.1133					ErrorV_syntax:
.1133	20 5d 26	jsr $265d		jsr	ErrorHandler
>1136	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>113e	72 72 6f 72 00
.1143					ErrorV_range:
.1143	20 5d 26	jsr $265d		jsr	ErrorHandler
>1146	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>114e	61 6e 67 65 00
.1153					ErrorV_value:
.1153	20 5d 26	jsr $265d		jsr	ErrorHandler
>1156	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>115e	65 00
.1160					ErrorV_type:
.1160	20 5d 26	jsr $265d		jsr	ErrorHandler
>1163	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>116b	6d 61 74 63 68 00
.1171					ErrorV_unimplemented:
.1171	20 5d 26	jsr $265d		jsr	ErrorHandler
>1174	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>117c	65 6d 65 6e 74 65 64 00
.1184					ErrorV_assert:
.1184	20 5d 26	jsr $265d		jsr	ErrorHandler
>1187	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>118f	61 69 6c 00
.1193					ErrorV_internal:
.1193	20 5d 26	jsr $265d		jsr	ErrorHandler
>1196	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>119e	20 45 72 72 6f 72 00
.11a5					ErrorV_divzero:
.11a5	20 5d 26	jsr $265d		jsr	ErrorHandler
>11a8	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>11b0	79 20 5a 65 72 6f 00
.11b7					ErrorV_structure:
.11b7	20 5d 26	jsr $265d		jsr	ErrorHandler
>11ba	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>11c2	65 20 49 6d 62 61 6c 61 6e 63 65 00
.11ce					ErrorV_stop:
.11ce	20 5d 26	jsr $265d		jsr	ErrorHandler
>11d1	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>11d9	53 74 6f 70 70 65 64 00
.11e1					ErrorV_data:
.11e1	20 5d 26	jsr $265d		jsr	ErrorHandler
>11e4	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11ec	61 74 61 00
.11f0					ErrorV_redefine:
.11f0	20 5d 26	jsr $265d		jsr	ErrorHandler
>11f3	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>11fb	64 65 66 69 6e 65 64 00
.1203					ErrorV_index:
.1203	20 5d 26	jsr $265d		jsr	ErrorHandler
>1206	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>120e	79 20 49 6e 64 65 78 00
.1216					ErrorV_memory:
.1216	20 5d 26	jsr $265d		jsr	ErrorHandler
>1219	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>1221	65 6d 6f 72 79 00
.1227					ErrorV_uninitialised:
.1227	20 5d 26	jsr $265d		jsr	ErrorHandler
>122a	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>1232	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.1241					ErrorV_string:
.1241	20 5d 26	jsr $265d		jsr	ErrorHandler
>1244	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>124c	6e 67 20 4c 65 6e 67 74 68 00
.1256					ErrorV_variable:
.1256	20 5d 26	jsr $265d		jsr	ErrorHandler
>1259	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>1261	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.126a					ERRCheckLParen:
.126a	b1 1c		lda ($1c),y			lda 	(codePtr),y
.126c	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.126e	d0 18		bne $1288			bne 	ERRSyntaxError
.1270	c8		iny				iny
.1271	60		rts				rts
.1272					ERRCheckRParen:
.1272	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1274	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.1276	d0 10		bne $1288			bne 	ERRSyntaxError
.1278	c8		iny				iny
.1279	60		rts				rts
.127a					ERRCheckComma:
.127a	b1 1c		lda ($1c),y			lda 	(codePtr),y
.127c	c9 99		cmp #$99			cmp 	#PR_COMMA
.127e	d0 08		bne $1288			bne 	ERRSyntaxError
.1280	c8		iny				iny
.1281	60		rts				rts
.1282					ERRCheckA:
.1282	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.1284	d0 02		bne $1288			bne 	ERRSyntaxError
.1286	c8		iny				iny
.1287	60		rts				rts
.1288					ERRSyntaxError:
.1288	4c 33 11	jmp $1133		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.128b					EXPBinAdd:
.128b	24 0f		bit $0f				bit 	IFR0+IExp
.128d	30 6f		bmi $12fe			bmi 	EXPConcatenate
.128f	a2 10		ldx #$10			ldx 	#IFR1
.1291	4c 71 1f	jmp $1f71			jmp 	IFloatAdd
.1294					EXPBinSub:
.1294	24 0f		bit $0f				bit 	IFR0+IExp
.1296	30 3f		bmi $12d7			bmi 	EXPTypeError
.1298	a2 10		ldx #$10			ldx 	#IFR1
.129a	4c 6a 1f	jmp $1f6a			jmp 	IFloatSubtract
.129d					EXPBinMul:
.129d	24 0f		bit $0f				bit 	IFR0+IExp
.129f	30 36		bmi $12d7			bmi 	EXPTypeError
.12a1	a2 10		ldx #$10			ldx 	#IFR1
.12a3	4c 1b 20	jmp $201b			jmp 	IFloatMultiply
.12a6					EXPBinFDiv:
.12a6	24 0f		bit $0f				bit 	IFR0+IExp
.12a8	30 2d		bmi $12d7			bmi 	EXPTypeError
.12aa	a2 10		ldx #$10			ldx 	#IFR1
.12ac	20 9e 22	jsr $229e			jsr 	IFloatDivideFloat
.12af	b0 0f		bcs $12c0			bcs 	EXPDZero
.12b1	60		rts				rts
.12b2					EXPBinIDiv:
.12b2	24 0f		bit $0f				bit 	IFR0+IExp
.12b4	30 21		bmi $12d7			bmi 	EXPTypeError
.12b6	a2 10		ldx #$10			ldx 	#IFR1
.12b8	20 9e 22	jsr $229e			jsr 	IFloatDivideFloat
.12bb	b0 03		bcs $12c0			bcs 	EXPDZero
.12bd	4c 7b 22	jmp $227b			jmp 	IFloatIntegerR0
.12c0					EXPDZero:
.12c0	4c a5 11	jmp $11a5		jmp	ErrorV_divzero
.12c3					EXPBinIMod:
.12c3	24 0f		bit $0f				bit 	IFR0+IExp
.12c5	30 10		bmi $12d7			bmi 	EXPTypeError
.12c7	a2 10		ldx #$10			ldx 	#IFR1
.12c9	5a		phy				phy
.12ca	20 b3 21	jsr $21b3			jsr 	IFPreProcessBitwise 		; set up everything.
.12cd	d0 05		bne $12d4			bne 	EXPDRange
.12cf	20 ec 20	jsr $20ec			jsr 	IFloatModulusInteger
.12d2	7a		ply				ply
.12d3	60		rts				rts
.12d4					EXPDRange:
.12d4	4c 43 11	jmp $1143		jmp	ErrorV_range
.12d7					EXPTypeError:
.12d7	4c 60 11	jmp $1160		jmp	ErrorV_type
.12da					EXPBinAnd:
.12da	24 0f		bit $0f				bit 	IFR0+IExp
.12dc	30 f9		bmi $12d7			bmi 	EXPTypeError
.12de	a2 10		ldx #$10			ldx 	#IFR1
.12e0	20 6e 21	jsr $216e			jsr 	IFloatBitwiseAnd
.12e3	b0 ef		bcs $12d4			bcs 	EXPDRange
.12e5	60		rts				rts
.12e6					EXPBinOr:
.12e6	24 0f		bit $0f				bit 	IFR0+IExp
.12e8	30 ed		bmi $12d7			bmi 	EXPTypeError
.12ea	a2 10		ldx #$10			ldx 	#IFR1
.12ec	20 85 21	jsr $2185			jsr 	IFloatBitwiseOr
.12ef	b0 e3		bcs $12d4			bcs 	EXPDRange
.12f1	60		rts				rts
.12f2					EXPBinXor:
.12f2	24 0f		bit $0f				bit 	IFR0+IExp
.12f4	30 e1		bmi $12d7			bmi 	EXPTypeError
.12f6	a2 10		ldx #$10			ldx 	#IFR1
.12f8	20 9c 21	jsr $219c			jsr 	IFloatBitwiseXor
.12fb	b0 d7		bcs $12d4			bcs 	EXPDRange
.12fd	60		rts				rts
.12fe					EXPConcatenate:
.12fe	18		clc				clc
.12ff	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1301	72 10		adc ($10)			adc 	(IFR1)
.1303	b0 2d		bcs $1332			bcs 	_EXPCError
.1305	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1307	da		phx				phx
.1308	a6 0d		ldx $0d				ldx 	IFR0+1
.130a	da		phx				phx
.130b	20 07 1f	jsr $1f07			jsr 	StringTempAllocate 			; allocate string, set up return
.130e	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1310	a5 10		lda $10				lda 	IFR1
.1312	20 1b 13	jsr $131b			jsr 	_EXPCCopyXA
.1315	fa		plx				plx 								; copy second string
.1316	68		pla				pla
.1317	20 1b 13	jsr $131b			jsr 	_EXPCCopyXA
.131a	60		rts				rts
.131b					_EXPCCopyXA:
.131b	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.131d	85 1e		sta $1e				sta 	zTemp0
.131f	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1321	f0 0e		beq $1331			beq 	_EXPCCExit 					; nothing.
.1323	aa		tax				tax 								; count
.1324	5a		phy				phy 								; start positioin
.1325	a0 01		ldy #$01			ldy 	#1
.1327					_EXPCCLoop:
.1327	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.1329	20 3c 1f	jsr $1f3c			jsr 	StringTempWrite
.132c	c8		iny				iny
.132d	ca		dex				dex
.132e	d0 f7		bne $1327			bne 	_EXPCCLoop
.1330	7a		ply				ply
.1331					_EXPCCExit:
.1331	60		rts				rts
.1332					_EXPCError:
.1332	4c 41 12	jmp $1241		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1335					EXPReturnTrue:
.1335	a2 0c		ldx #$0c			ldx 	#IFR0
.1337	a9 01		lda #$01			lda 	#1
.1339	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.133c	20 86 25	jsr $2586			jsr 	IFloatNegate
.133f	60		rts				rts
.1340					EXPReturnFalse:
.1340	a2 0c		ldx #$0c			ldx 	#IFR0
.1342	4c 7b 25	jmp $257b			jmp 	IFloatSetZero
.1345					EXPCompareEqual:
.1345	20 7b 13	jsr $137b			jsr 	EXPCompareBaseCode
.1348	c9 00		cmp #$00			cmp 	#0
.134a	f0 e9		beq $1335			beq 	EXPReturnTrue
.134c	80 f2		bra $1340			bra 	EXPReturnFalse
.134e					EXPCompareLess:
.134e	20 7b 13	jsr $137b			jsr 	EXPCompareBaseCode
.1351	c9 ff		cmp #$ff			cmp 	#$FF
.1353	f0 e0		beq $1335			beq 	EXPReturnTrue
.1355	80 e9		bra $1340			bra 	EXPReturnFalse
.1357					EXPCompareGreater:
.1357	20 7b 13	jsr $137b			jsr 	EXPCompareBaseCode
.135a	c9 01		cmp #$01			cmp 	#1
.135c	f0 d7		beq $1335			beq 	EXPReturnTrue
.135e	80 e0		bra $1340			bra 	EXPReturnFalse
.1360					EXPCompareNotEqual:
.1360	20 7b 13	jsr $137b			jsr 	EXPCompareBaseCode
.1363	c9 00		cmp #$00			cmp 	#0
.1365	d0 ce		bne $1335			bne 	EXPReturnTrue
.1367	80 d7		bra $1340			bra 	EXPReturnFalse
.1369					EXPCompareLessEqual:
.1369	20 7b 13	jsr $137b			jsr 	EXPCompareBaseCode
.136c	c9 01		cmp #$01			cmp 	#1
.136e	d0 c5		bne $1335			bne 	EXPReturnTrue
.1370	80 ce		bra $1340			bra 	EXPReturnFalse
.1372					EXPCompareGreaterEqual:
.1372	20 7b 13	jsr $137b			jsr 	EXPCompareBaseCode
.1375	c9 ff		cmp #$ff			cmp 	#$FF
.1377	d0 bc		bne $1335			bne 	EXPReturnTrue
.1379	80 c5		bra $1340			bra 	EXPReturnFalse
.137b					EXPCompareBaseCode:
.137b	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.137d	30 10		bmi $138f			bmi 	_EXCBCString
.137f	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1381	20 49 22	jsr $2249			jsr 	IFloatCompare
.1384	a5 0c		lda $0c				lda 	IFR0+IM0
.1386	f0 06		beq $138e			beq 	_EXCBCExit 					; return 0 if zero
.1388	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.138a	50 02		bvc $138e			bvc 	_EXCBCExit
.138c	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.138e					_EXCBCExit:
.138e	60		rts				rts
.138f					_EXCBCString:
.138f	5a		phy				phy
.1390	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1392	d2 10		cmp ($10)			cmp 	(IFR1)
.1394	90 02		bcc $1398			bcc 	_EXCBCSmaller
.1396	b2 10		lda ($10)			lda 	(IFR1)
.1398					_EXCBCSmaller:
.1398	aa		tax				tax
.1399	f0 0d		beq $13a8			beq 	_EXCBCMatches 				; if zero common length matches
.139b	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.139d					_EXCBCCheckSmallerMatches:
.139d	c8		iny				iny 								; compare directly as far as common length
.139e	38		sec				sec
.139f	b1 10		lda ($10),y			lda 	(IFR1),y
.13a1	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13a3	d0 08		bne $13ad			bne 	_EXCBCExit2
.13a5	ca		dex				dex
.13a6	d0 f5		bne $139d			bne 	_EXCBCCheckSmallerMatches
.13a8					_EXCBCMatches:
.13a8	38		sec				sec
.13a9	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13ab	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13ad					_EXCBCExit2:
.13ad	7a		ply				ply
.13ae	c9 00		cmp #$00			cmp 	#0
.13b0	f0 04		beq $13b6			beq 	_EXCBCReturn
.13b2	30 03		bmi $13b7			bmi 	_EXCBCFF
.13b4	a9 01		lda #$01			lda 	#1
.13b6					_EXCBCReturn:
.13b6	60		rts				rts
.13b7					_EXCBCFF:
.13b7	a9 ff		lda #$ff			lda 	#$FF
.13b9	60		rts				rts
.13ba					_EXCBCRange:
.13ba	4c 43 11	jmp $1143		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13bd					EXPBinLeft:
.13bd	a9 ff		lda #$ff			lda 	#$FF
.13bf	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.13c2	4c c8 13	jmp $13c8			jmp 	EXPShiftCommon
.13c5					EXPBinRight:
.13c5	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.13c8					EXPShiftCommon:
.13c8	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.13ca	05 13		ora $13				ora 	IFR1+IExp
.13cc	29 7f		and #$7f			and 	#$7F
.13ce	d0 35		bne $1405			bne 	_EXPSRange
.13d0	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.13d2	29 e0		and #$e0			and 	#$E0
.13d4	05 0d		ora $0d				ora 	IFR0+IM1
.13d6	05 0e		ora $0e				ora 	IFR0+IM2
.13d8	d0 25		bne $13ff			bne 	_EXPSShiftZero 				; if so return zero
.13da	5a		phy				phy
.13db	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.13dd	29 1f		and #$1f			and 	#$1F
.13df	f0 17		beq $13f8			beq 	_EXPSExit 					; exit if zero
.13e1	a8		tay				tay
.13e2					_EXPSLoop:
.13e2	a2 10		ldx #$10			ldx 	#IFR1
.13e4	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.13e7	30 05		bmi $13ee			bmi 	_EXPSShiftLeft
.13e9	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.13ec	80 07		bra $13f5			bra 	_EXPSContinue
.13ee					_EXPSShiftLeft:
.13ee	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.13f1	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.13f3	30 10		bmi $1405			bmi 	_EXPSRange
.13f5					_EXPSContinue:
.13f5	88		dey				dey
.13f6	d0 ea		bne $13e2			bne 	_EXPSLoop
.13f8					_EXPSExit:
.13f8	a2 10		ldx #$10			ldx 	#IFR1
.13fa	20 0c 25	jsr $250c			jsr 	IFloatCopyFromRegister
.13fd	7a		ply				ply
.13fe	60		rts				rts
.13ff					_EXPSShiftZero:
.13ff	a2 0c		ldx #$0c			ldx 	#IFR0
.1401	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.1404	60		rts				rts
.1405					_EXPSRange:
.1405	4c 43 11	jmp $1143		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1408					EXPEvaluateExpression:
.1408	a9 00		lda #$00			lda 	#0 							; current precedence
.140a					EXPEvaluateExpressionPrecedenceA:
.140a	48		pha				pha
.140b	20 85 14	jsr $1485			jsr 	EXPTermValueR0				; do first term.
.140e					_EELoop:
.140e	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1410	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1412	90 31		bcc $1445			bcc 	_EEExit
.1414	aa		tax				tax 								; access the precedence of the operator.
.1415	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1416	dd 77 16	cmp $1677,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1419	b0 2b		bcs $1446			bcs 	_EEExit2
.141b	48		pha				pha 								; save current precedence.
.141c	da		phx				phx 								; save operator
.141d	c8		iny				iny 								; consume operator
.141e	da		phx				phx
.141f	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1421	20 ca 24	jsr $24ca			jsr 	IFloatPushRx
.1424	fa		plx				plx
.1425	bd 77 16	lda $1677,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1428	20 0a 14	jsr $140a			jsr 	EXPEvaluateExpressionPrecedenceA
.142b	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.142d	20 eb 24	jsr $24eb			jsr 	IFloatPullRx
.1430	fa		plx				plx 								; operator
.1431	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1433	45 13		eor $13				eor 	IFR1+IExp
.1435	30 08		bmi $143f			bmi 	_EEType
.1437					_EETypeOkay:
.1437	8a		txa				txa
.1438	0a		asl a				asl 	a 							; double -> X
.1439	aa		tax				tax
.143a	20 42 14	jsr $1442			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.143d	80 cf		bra $140e			bra 	_EELoop
.143f					_EEType:
.143f	4c 60 11	jmp $1160		jmp	ErrorV_type
.1442					_EECallBinary:
.1442	7c 13 19	jmp ($1913,x)			jmp 	(VectorTable,x)
.1445					_EEExit:
.1445	68		pla				pla 								; throw precedence
.1446					_EEExit2:
.1446	18		clc				clc
.1447	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1448					EXPEvalNumber:
.1448	20 08 14	jsr $1408			jsr 	EXPEvaluateExpression
.144b	24 0f		bit $0f				bit 	IFR0+IExp
.144d	30 01		bmi $1450			bmi 	EVUType
.144f	60		rts				rts
.1450					EVUType:
.1450	4c 60 11	jmp $1160		jmp	ErrorV_type
.1453					EXPEvalInteger:
.1453	20 48 14	jsr $1448			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1456	20 7b 22	jsr $227b			jsr 	IFloatIntegerR0
.1459	60		rts				rts
.145a					EXPEvalInteger16:
.145a	20 53 14	jsr $1453			jsr 	EXPEvalInteger
.145d	a5 0e		lda $0e				lda 	IFR0+IM2
.145f	d0 21		bne $1482			bne 	EVURange
.1461	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1463	a5 0c		lda $0c				lda 	IFR0+IM0
.1465	60		rts				rts
.1466					EXPEvalInteger8:
.1466	20 53 14	jsr $1453			jsr 	EXPEvalInteger
.1469	a5 0e		lda $0e				lda 	IFR0+IM2
.146b	05 0d		ora $0d				ora 	IFR0+IM1
.146d	d0 13		bne $1482			bne 	EVURange
.146f	a5 0c		lda $0c				lda 	IFR0+IM0
.1471	60		rts				rts
.1472					EXPEvalString:
.1472	20 08 14	jsr $1408			jsr 	EXPEvaluateExpression
.1475	24 0f		bit $0f				bit 	IFR0+IExp
.1477	10 d7		bpl $1450			bpl 	EVUType
.1479	a6 0d		ldx $0d				ldx 	IFR0+IM1
.147b	86 1f		stx $1f				stx 	zTemp0+1
.147d	a5 0c		lda $0c				lda 	IFR0+IM0
.147f	85 1e		sta $1e				sta 	zTemp0
.1481	60		rts				rts
.1482					EVURange:
.1482	4c 43 11	jmp $1143		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1485					EXPTermValueR0:
.1485	20 aa 14	jsr $14aa			jsr 	EXPTermR0 					; get term
.1488	90 1f		bcc $14a9			bcc 	_ETVNotReference 			; exit if value.
.148a	5a		phy				phy
.148b	a0 03		ldy #$03			ldy 	#3 							; get type
.148d	b1 0c		lda ($0c),y			lda 	(IFR0),y
.148f	30 14		bmi $14a5			bmi 	_ETVDereferenceString
.1491	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.1493	88		dey				dey
.1494	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1496	85 0e		sta $0e				sta 	IFR0+IM2
.1498	88		dey				dey
.1499	b1 0c		lda ($0c),y			lda 	(IFR0),y
.149b	aa		tax				tax
.149c	b2 0c		lda ($0c)			lda 	(IFR0)
.149e	86 0d		stx $0d				stx 	IFR0+IM1
.14a0	85 0c		sta $0c				sta 	IFR0+IM0
.14a2	7a		ply				ply
.14a3	18		clc				clc
.14a4	60		rts				rts
.14a5					_ETVDereferenceString:
>14a5	db						.byte 	$DB
.14a6	4c 71 11	jmp $1171		jmp	ErrorV_unimplemented
.14a9					_ETVNotReference:
.14a9	60		rts				rts
.14aa					EXPTermR0:
.14aa	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.14ac	30 10		bmi $14be			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.14ae	c8		iny				iny 								; consume element
.14af	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.14b1	b0 08		bcs $14bb			bcs 	_ETMIdentifier
.14b3	20 e2 14	jsr $14e2			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.14b6	20 15 15	jsr $1515			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.14b9	18		clc				clc 								; return value
.14ba	60		rts				rts
.14bb					_ETMIdentifier:
.14bb	4c 49 1f	jmp $1f49			jmp 	VARCheckSimple 				; check simple variables A-Z
.14be					_ETMIsUnaryOrMinus:
.14be	c8		iny				iny 								; consume element
.14bf	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.14c1	d0 0a		bne $14cd			bne 	_ETMCheckUnary
.14c3	20 85 14	jsr $1485			jsr 	EXPTermValueR0 				; get a term to negate
.14c6	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.14c8	20 86 25	jsr $2586			jsr 	IFloatNegate
.14cb	18		clc				clc
.14cc	60		rts				rts
.14cd					_ETMCheckUnary:
.14cd	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.14cf	90 0e		bcc $14df			bcc 	_ETMUnarySyntax
.14d1	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.14d3	b0 0a		bcs $14df			bcs 	_ETMUnarySyntax
.14d5	0a		asl a				asl 	a
.14d6	aa		tax				tax
.14d7	20 dc 14	jsr $14dc			jsr 	_ETMCallUnaryFunction
.14da	18		clc				clc
.14db	60		rts				rts
.14dc					_ETMCallUnaryFunction:
.14dc	7c 13 19	jmp ($1913,x)			jmp 	(VectorTable,x)
.14df					_ETMUnarySyntax:
.14df	4c 33 11	jmp $1133		jmp	ErrorV_syntax
.14e2					EXPExtractTokenisedInteger:
.14e2	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.14e4	64 0f		stz $0f				stz 	IFR0+IExp
.14e6	64 0d		stz $0d				stz 	IFR0+IM1
.14e8	64 0e		stz $0e				stz 	IFR0+IM2
.14ea					_ETMConstant:
.14ea	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.14ec	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.14ee	b0 24		bcs $1514			bcs 	_ETMCExit 					; no.
.14f0	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.14f2	a5 0d		lda $0d				lda 	IFR0+IM1
.14f4	85 0e		sta $0e				sta 	IFR0+IM2
.14f6	a5 0c		lda $0c				lda 	IFR0+IM0
.14f8	85 0d		sta $0d				sta 	IFR0+IM1
.14fa	64 0c		stz $0c				stz 	IFR0+IM0
.14fc	8a		txa				txa
.14fd	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.14fe	66 0e		ror $0e				ror 	IFR0+IM2
.1500	66 0d		ror $0d				ror 	IFR0+IM1
.1502	66 0c		ror $0c				ror 	IFR0+IM0
.1504	4a		lsr a				lsr 	a
.1505	66 0e		ror $0e				ror 	IFR0+IM2
.1507	66 0d		ror $0d				ror 	IFR0+IM1
.1509	66 0c		ror $0c				ror 	IFR0+IM0
.150b	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.150d	11 1c		ora ($1c),y			ora 	(codePtr),y
.150f	85 0c		sta $0c				sta 	IFR0+IM0
.1511	c8		iny				iny 								; consume, loop back
.1512	80 d6		bra $14ea			bra 	_ETMConstant
.1514					_ETMCExit:
.1514	60		rts				rts
.1515					EXPCheckDecimalFollows:
.1515	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.1517	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1519	d0 19		bne $1534			bne 	_ETMCDExit
.151b	c8		iny				iny 								; consume token.
.151c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.151e	5a		phy				phy									; save current position
.151f	48		pha				pha 								; save count of chars.
.1520	38		sec				sec 								; address into YX : y + codePtr+1
.1521	98		tya				tya
.1522	65 1c		adc $1c				adc 	codePtr
.1524	aa		tax				tax
.1525	a5 1d		lda $1d				lda 	codePtr+1
.1527	69 00		adc #$00			adc 	#0
.1529	a8		tay				tay
.152a	68		pla				pla 								; get count.
.152b	20 1f 24	jsr $241f			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.152e	7a		ply				ply 								; go to next token.
.152f	98		tya				tya
.1530	38		sec				sec
.1531	71 1c		adc ($1c),y			adc 	(codePtr),y
.1533	a8		tay				tay
.1534					_ETMCDExit:
.1534	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1535					EXPUnaryAbs:
.1535	20 48 14	jsr $1448			jsr 	EXPEvalNumber 					; number to R0
.1538	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.153b	20 bf 21	jsr $21bf			jsr 	IFloatAbsoluteR0
.153e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.153f					EXPUnaryAsc:
.153f	20 72 14	jsr $1472			jsr 	EXPEvalString 					; string to R0, zTemp0
.1542	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.1545	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.1547	f0 06		beq $154f			beq 	_EXAZero 						; if so return 0
.1549	5a		phy				phy 									; otherwise get first character
.154a	a0 01		ldy #$01			ldy 	#1
.154c	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.154e	7a		ply				ply
.154f					_EXAZero:
.154f	a2 0c		ldx #$0c			ldx 	#IFR0
.1551	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.1554	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1555					EXPUnaryChr:
.1555	20 66 14	jsr $1466			jsr 	EXPEvalInteger8 				; expr
.1558	48		pha				pha 									; push on stack
.1559	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.155c	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.155e	20 07 1f	jsr $1f07			jsr 	StringTempAllocate
.1561	68		pla				pla
.1562	20 3c 1f	jsr $1f3c			jsr 	StringTempWrite
.1565	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1566					EXPUnaryDec:
.1566	20 72 14	jsr $1472			jsr 	EXPEvalString 					; string to R0, zTemp0
.1569	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.156c	5a		phy				phy
.156d	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.156f	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.1572	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.1574	f0 3b		beq $15b1			beq 	_EUDError 						; empty string
.1576	aa		tax				tax
.1577	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1579					_EUDLoop:
.1579	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.157b	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.157d	90 02		bcc $1581			bcc 	_EUDNoCase
.157f	e9 20		sbc #$20			sbc 	#$20
.1581					_EUDNoCase:
.1581	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1583	90 2c		bcc $15b1			bcc 	_EUDError
.1585	c9 3a		cmp #$3a			cmp 	#'9'+1
.1587	90 0a		bcc $1593			bcc 	_EUDOkay
.1589	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.158b	90 24		bcc $15b1			bcc 	_EUDError
.158d	c9 47		cmp #$47			cmp 	#'F'+1
.158f	b0 20		bcs $15b1			bcs 	_EUDError
.1591	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1593					_EUDOkay:
.1593	29 0f		and #$0f			and 	#15 							; make constant
.1595	da		phx				phx
.1596	48		pha				pha
.1597	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1599	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.159c	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.159f	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.15a2	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.15a5	68		pla				pla 									; pop constant and OR in
.15a6	fa		plx				plx
.15a7	05 0c		ora $0c				ora 	IFR0+IM0
.15a9	85 0c		sta $0c				sta 	IFR0+IM0
.15ab	c8		iny				iny 									; next
.15ac	ca		dex				dex
.15ad	d0 ca		bne $1579			bne 	_EUDLoop
.15af	7a		ply				ply
.15b0	60		rts				rts
.15b1					_EUDError:
.15b1	4c 53 11	jmp $1153		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.15b4					EXPUnaryInlineDec:
.15b4	4c 33 11	jmp $1133		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.15b7					EXPUnaryNull:
.15b7	20 85 14	jsr $1485			jsr 	EXPTermValueR0
.15ba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.15bb					EXPUnaryFrac:
.15bb	20 48 14	jsr $1448			jsr 	EXPEvalNumber 					; number to R0
.15be	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.15c1	20 25 22	jsr $2225			jsr 	IFloatFractionalR0
.15c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.15c5					EXPUnaryInt:
.15c5	20 48 14	jsr $1448			jsr 	EXPEvalNumber 					; number to R0
.15c8	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.15cb	20 7b 22	jsr $227b			jsr 	IFloatIntegerR0
.15ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.15cf					EXPUnaryLen:
.15cf	20 72 14	jsr $1472			jsr 	EXPEvalString 					; string to R0, zTemp0
.15d2	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.15d5	b2 1e		lda ($1e)			lda 	(zTemp0)
.15d7	a2 0c		ldx #$0c			ldx 	#IFR0
.15d9	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.15dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.15dd					EXPUnaryParenthesis:
.15dd	20 48 14	jsr $1448			jsr 	EXPEvalNumber 					; number to R0
.15e0	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.15e3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.15e4					EXPUnaryRnd:
.15e4	20 48 14	jsr $1448			jsr 	EXPEvalNumber 				; number to R0
.15e7	20 72 12	jsr $1272			jsr 	ERRCheckRParen 				; )
.15ea	a2 0c		ldx #$0c			ldx 	#IFR0
.15ec	20 03 16	jsr $1603			jsr 	EXPLoadInRandom
.15ef	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.15f1	85 0f		sta $0f				sta 	IFR0+IExp
.15f3	60		rts				rts
.15f4					ExpUnaryRand:
.15f4	20 53 14	jsr $1453			jsr 	EXPEvalInteger 				; integer to R0
.15f7	20 72 12	jsr $1272			jsr 	ERRCheckRParen 				; )
.15fa	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.15fc	20 03 16	jsr $1603			jsr 	EXPLoadInRandom
.15ff	20 ec 20	jsr $20ec			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1602	60		rts				rts
.1603					EXPLoadInRandom:
.1603	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.1606	20 18 16	jsr $1618			jsr 	EXPRandom32
.1609	95 00		sta $00,x			sta 	IM0,x
.160b	20 18 16	jsr $1618			jsr 	EXPRandom32
.160e	95 01		sta $01,x			sta 	IM1,x
.1610	20 18 16	jsr $1618			jsr 	EXPRandom32
.1613	29 7f		and #$7f			and 	#$7F
.1615	95 02		sta $02,x			sta 	IM2,x
.1617	60		rts				rts
.1618					EXPRandom32:
.1618	5a		phy				phy
.1619	a0 08		ldy #$08			ldy 	#8
.161b	ad 3c 03	lda $033c			lda 	EXPSeed+0
.161e	0d 3d 03	ora $033d			ora 	EXPSeed+1
.1621	0d 3e 03	ora $033e			ora 	EXPSeed+2
.1624	0d 3f 03	ora $033f			ora 	EXPSeed+3
.1627	d0 08		bne $1631			bne 	_EXPRNoReset
.1629	ee 3c 03	inc $033c			inc 	EXPSeed+0
.162c	a0 10		ldy #$10			ldy 	#16
.162e	8c 3f 03	sty $033f			sty 	EXPSeed+3
.1631					_EXPRNoReset:
.1631	ad 3c 03	lda $033c			lda 	EXPSeed+0
.1634					_EXPRLoop:
.1634	0a		asl a				asl		a
.1635	2e 3d 03	rol $033d			rol 	EXPSeed+1
.1638	2e 3e 03	rol $033e			rol 	EXPSeed+2
.163b	2e 3f 03	rol $033f			rol 	EXPSeed+3
.163e	90 02		bcc $1642			bcc 	_EXPRNoEOR
.1640	49 c5		eor #$c5			eor 	#$C5
.1642					_EXPRNoEOR:
.1642	88		dey				dey
.1643	d0 ef		bne $1634			bne 	_EXPRLoop
.1645	8d 3c 03	sta $033c			sta 	EXPSeed+0
.1648	7a		ply				ply
.1649	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.164a					EXPUnarySgn:
.164a	20 48 14	jsr $1448			jsr 	EXPEvalNumber 					; number to R0
.164d	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.1650	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.1652	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister
.1655	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1657	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.165a	a2 10		ldx #$10			ldx 	#IFR1
.165c	20 49 22	jsr $2249			jsr 	IFloatCompare 					; compare R1 vs 0.
.165f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1660					EXPUnarySqr:
.1660	20 48 14	jsr $1448			jsr 	EXPEvalNumber 					; number to R0
.1663	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.1666	20 c7 21	jsr $21c7			jsr 	IFloatSquareRootR0 				; square root.
.1669	b0 01		bcs $166c			bcs 	_EUSValue
.166b	60		rts				rts
.166c					_EUSValue:
.166c	4c 43 11	jmp $1143		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.166f					EXPUnaryHex:
.166f	20 53 14	jsr $1453			jsr 	EXPEvalInteger 					; expr
.1672	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.1675	5a		phy				phy
.1676	a9 10		lda #$10			lda 	#16
.1678	20 1c 23	jsr $231c			jsr 	IFloatIntegerToStringR0
.167b	80 0a		bra $1687			bra 	EUSMain
.167d					EXPUnaryStr:
.167d	20 48 14	jsr $1448			jsr 	EXPEvalNumber 					; expr
.1680	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.1683	5a		phy				phy
.1684	20 78 23	jsr $2378			jsr 	IFloatFloatToStringR0 			; convert to string
.1687					EUSMain:
.1687	b0 18		bcs $16a1			bcs 	_EUSError
.1689	86 1e		stx $1e				stx 	zTemp0 							; save string address
.168b	84 1f		sty $1f				sty 	zTemp0+1
.168d	48		pha				pha 									; save count
.168e	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1690	20 07 1f	jsr $1f07			jsr 	StringTempAllocate
.1693	fa		plx				plx 									; count in X
.1694	a0 00		ldy #$00			ldy 	#0
.1696					_EUSCopy:
.1696	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1698	c8		iny				iny
.1699	20 3c 1f	jsr $1f3c			jsr 	StringTempWrite
.169c	ca		dex				dex
.169d	d0 f7		bne $1696			bne	 	_EUSCopy
.169f	7a		ply				ply
.16a0	60		rts				rts
.16a1					_EUSError:
.16a1	4c 43 11	jmp $1143		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.16a4					EXPUnaryInlineString:
.16a4	18		clc				clc 								; physical address -> IM0,1
.16a5	98		tya				tya
.16a6	65 1c		adc $1c				adc 	codePtr
.16a8	85 0c		sta $0c				sta 	IFR0+IM0
.16aa	a5 1d		lda $1d				lda 	codePtr+1
.16ac	69 00		adc #$00			adc 	#0
.16ae	85 0d		sta $0d				sta 	IFR0+IM1
.16b0	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.16b2	a9 80		lda #$80			lda 	#$80
.16b4	85 0f		sta $0f				sta 	IFR0+IExp
.16b6	98		tya				tya	 								; skip over it.
.16b7	38		sec				sec
.16b8	71 1c		adc ($1c),y			adc 	(codePtr),y
.16ba	a8		tay				tay
.16bb	60		rts				rts
.16bc					_EXPUISRange:
.16bc	4c 43 11	jmp $1143		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.16bf					EXPUnaryLeft:
.16bf	20 05 17	jsr $1705			jsr 	EXPCommonStart 					; <string>,
.16c2	48		pha				pha 									; save string address on stack
.16c3	da		phx				phx
.16c4	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.16c6	48		pha				pha
.16c7	20 66 14	jsr $1466			jsr 	EXPEvalInteger8 				; characters to do
.16ca	80 44		bra $1710			bra 	EXPSubstringCommon
.16cc					EXPUnaryRight:
.16cc	20 05 17	jsr $1705			jsr 	EXPCommonStart 					; <string>,
.16cf	48		pha				pha 									; save string address on stack
.16d0	da		phx				phx
.16d1	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.16d3	48		pha				pha
.16d4	20 66 14	jsr $1466			jsr 	EXPEvalInteger8 				; characters to do
.16d7	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.16d9	68		pla				pla
.16da	38		sec				sec
.16db	e5 1e		sbc $1e				sbc 	zTemp0
.16dd	b0 02		bcs $16e1			bcs 	_EUROffLeft
.16df	a9 00		lda #$00			lda 	#0
.16e1					_EUROffLeft:
.16e1	48		pha				pha 									; start pos
.16e2	a9 ff		lda #$ff			lda 	#255
.16e4	80 2a		bra $1710			bra 	EXPSubstringCommon
.16e6					EXPUnaryMid:
.16e6	20 05 17	jsr $1705			jsr 	EXPCommonStart 					; <string>,
.16e9	48		pha				pha 									; save string address on stack
.16ea	da		phx				phx
.16eb	20 66 14	jsr $1466			jsr 	EXPEvalInteger8 				; characters start
.16ee	f0 12		beq $1702			beq 	_EUSError 						; 1 is left
.16f0	3a		dec a				dec 	a 								; zero based.
.16f1	48		pha				pha
.16f2	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.16f4	c9 99		cmp #$99			cmp 	#PR_COMMA
.16f6	f0 04		beq $16fc			beq 	_EUMLength 						; if so m is provided
.16f8	a9 ff		lda #$ff			lda 	#255 							; default m
.16fa	80 14		bra $1710			bra 	EXPSubstringCommon
.16fc					_EUMLength:
.16fc	c8		iny				iny 									; consume comma
.16fd	20 66 14	jsr $1466			jsr 	EXPEvalInteger8 				; characters to do
.1700	80 0e		bra $1710			bra 	EXPSubstringCommon
.1702					_EUSError:
.1702	4c 53 11	jmp $1153		jmp	ErrorV_value
.1705					EXPCommonStart:
.1705	20 72 14	jsr $1472			jsr 	EXPEvalString
.1708	20 7a 12	jsr $127a			jsr 	ERRCheckComma
.170b	a5 0c		lda $0c				lda 	IFR0+IM0
.170d	a6 0d		ldx $0d				ldx 	IFR0+IM1
.170f	60		rts				rts
.1710					EXPSubstringCommon:
.1710	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.1712	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; check right bracket.
.1715	68		pla				pla 									; start position
.1716	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1718	fa		plx				plx 									; get string address to zTemp2.
.1719	86 23		stx $23				stx 	zTemp2+1
.171b	68		pla				pla
.171c	85 22		sta $22				sta 	zTemp2
.171e	38		sec				sec 									; length - start is the max count of chars
.171f	b2 22		lda ($22)			lda 	(zTemp2)
.1721	e5 21		sbc $21				sbc 	zTemp1+1
.1723	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.1725	b0 02		bcs $1729			bcs 	_EXPSSNoTrim
.1727	85 20		sta $20				sta 	zTemp1 							; update count with available
.1729					_EXPSSNoTrim:
.1729	a5 20		lda $20				lda 	zTemp1 							; chars required.
.172b	20 07 1f	jsr $1f07			jsr 	StringTempAllocate 				; allocate memory for it.
.172e	a5 20		lda $20				lda 	zTemp1 							; zero length string
.1730	f0 15		beq $1747			beq 	_EXPSSExit
.1732	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1734	d2 22		cmp ($22)			cmp 	(zTemp2)
.1736	b0 0f		bcs $1747			bcs 	_EXPSSExit
.1738	5a		phy				phy
.1739	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.173b	c8		iny				iny 									; +1 for the length byte
.173c					_EXPSSCopy:
.173c	b1 22		lda ($22),y			lda 	(zTemp2),y
.173e	20 3c 1f	jsr $1f3c			jsr 	StringTempWrite
.1741	c8		iny				iny
.1742	c6 20		dec $20				dec 	zTemp1
.1744	d0 f6		bne $173c			bne 	_EXPSSCopy
.1746	7a		ply				ply
.1747					_EXPSSExit:
.1747	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1748					EXPUnaryVal:
.1748	20 72 14	jsr $1472			jsr 	EXPEvalString 					; string to R0, zTemp0
.174b	20 72 12	jsr $1272			jsr 	ERRCheckRParen 					; )
.174e	5a		phy				phy
.174f	18		clc				clc
.1750	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1752	69 01		adc #$01			adc 	#1
.1754	aa		tax				tax
.1755	a5 1f		lda $1f				lda 	zTemp0+1
.1757	69 00		adc #$00			adc 	#0
.1759	a8		tay				tay
.175a	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.175c	20 df 23	jsr $23df			jsr 	IFloatStringToFloatR0 			; do conversion
.175f	b0 02		bcs $1763			bcs 	_EUVError
.1761	7a		ply				ply
.1762	60		rts				rts
.1763					_EUVError:
.1763	4c 53 11	jmp $1153		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1766					BinaryPrecedence:
>1766	02					.byte	 2	; $ef =
>1767	02					.byte	 2	; $f0 <>
>1768	02					.byte	 2	; $f1 <=
>1769	02					.byte	 2	; $f2 <
>176a	02					.byte	 2	; $f3 >=
>176b	02					.byte	 2	; $f4 >
>176c	01					.byte	 1	; $f5 XOR
>176d	01					.byte	 1	; $f6 OR
>176e	01					.byte	 1	; $f7 AND
>176f	04					.byte	 4	; $f8 DIV
>1770	04					.byte	 4	; $f9 MOD
>1771	04					.byte	 4	; $fa <<
>1772	04					.byte	 4	; $fb >>
>1773	04					.byte	 4	; $fc /
>1774	04					.byte	 4	; $fd *
>1775	03					.byte	 3	; $fe -
>1776	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1777					StandardTokens:
>1777	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>177e	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1784	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>178a	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>178f	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1792	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1798	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>179b	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>17a0	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>17a5	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>17ad	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>17b1	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>17b6	00					.byte	$00                                     	; $8c [[end]]
>17b7	00					.byte	$00                                     	; $8d [[shift]]
>17b8	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>17bd	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>17c2	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>17c5	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>17ca	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>17ce	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>17d4	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>17da	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>17df	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>17e3	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>17e7	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>17ec	01 2c					.byte	$01,$2c                                 	; $99 ,
>17ee	01 3b					.byte	$01,$3b                                 	; $9a ;
>17f0	01 3a					.byte	$01,$3a                                 	; $9b :
>17f2	01 27					.byte	$01,$27                                 	; $9c '
>17f4	01 29					.byte	$01,$29                                 	; $9d )
>17f6	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>17fa	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1800	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1804	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1808	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>180d	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1811	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1818	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>181d	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1822	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1827	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>182c	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1831	00					.byte	0											; $aa
>1832	00					.byte	0											; $ab
>1833	00					.byte	0											; $ac
>1834	00					.byte	0											; $ad
>1835	00					.byte	0											; $ae
>1836	00					.byte	0											; $af
>1837	00					.byte	0											; $b0
>1838	00					.byte	0											; $b1
>1839	00					.byte	0											; $b2
>183a	00					.byte	0											; $b3
>183b	00					.byte	0											; $b4
>183c	00					.byte	0											; $b5
>183d	00					.byte	0											; $b6
>183e	00					.byte	0											; $b7
>183f	00					.byte	0											; $b8
>1840	00					.byte	0											; $b9
>1841	00					.byte	0											; $ba
>1842	00					.byte	0											; $bb
>1843	00					.byte	0											; $bc
>1844	00					.byte	0											; $bd
>1845	00					.byte	0											; $be
>1846	00					.byte	0											; $bf
>1847	00					.byte	0											; $c0
>1848	00					.byte	0											; $c1
>1849	00					.byte	0											; $c2
>184a	00					.byte	0											; $c3
>184b	00					.byte	0											; $c4
>184c	00					.byte	0											; $c5
>184d	00					.byte	0											; $c6
>184e	00					.byte	0											; $c7
>184f	00					.byte	0											; $c8
>1850	00					.byte	0											; $c9
>1851	00					.byte	0											; $ca
>1852	00					.byte	0											; $cb
>1853	00					.byte	0											; $cc
>1854	00					.byte	0											; $cd
>1855	00					.byte	0											; $ce
>1856	00					.byte	0											; $cf
>1857	00					.byte	0											; $d0
>1858	00					.byte	0											; $d1
>1859	00					.byte	0											; $d2
>185a	00					.byte	0											; $d3
>185b	00					.byte	0											; $d4
>185c	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1862	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1868	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1870	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1877	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>187d	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1883	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1888	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>188d	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1892	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1897	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>189c	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>18a2	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>18a7	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>18af	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>18b6	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>18bb	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>18c0	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>18c6	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>18cb	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>18d1	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>18d6	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>18dc	01 28					.byte	$01,$28                                 	; $eb (
>18de	01 24					.byte	$01,$24                                 	; $ec $
>18e0	00					.byte	$00                                     	; $ed [[decimal]]
>18e1	00					.byte	$00                                     	; $ee [[string]]
>18e2	01 3d					.byte	$01,$3d                                 	; $ef =
>18e4	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>18e7	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>18ea	01 3c					.byte	$01,$3c                                 	; $f2 <
>18ec	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>18ef	01 3e					.byte	$01,$3e                                 	; $f4 >
>18f1	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>18f5	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>18f8	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>18fc	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1900	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1904	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1907	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>190a	01 2f					.byte	$01,$2f                                 	; $fc /
>190c	01 2a					.byte	$01,$2a                                 	; $fd *
>190e	01 2d					.byte	$01,$2d                                 	; $fe -
>1910	01 2b					.byte	$01,$2b                                 	; $ff +
>1912	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1913					VectorTable:
>1913	59 26					.word	NotImplemented           ; $80 REPEAT
>1915	59 26					.word	NotImplemented           ; $81 UNTIL
>1917	59 26					.word	NotImplemented           ; $82 WHILE
>1919	59 26					.word	NotImplemented           ; $83 WEND
>191b	59 26					.word	NotImplemented           ; $84 IF
>191d	59 26					.word	NotImplemented           ; $85 ENDIF
>191f	59 26					.word	NotImplemented           ; $86 DO
>1921	59 26					.word	NotImplemented           ; $87 LOOP
>1923	59 26					.word	NotImplemented           ; $88 PROC
>1925	59 26					.word	NotImplemented           ; $89 ENDPROC
>1927	59 26					.word	NotImplemented           ; $8a FOR
>1929	59 26					.word	NotImplemented           ; $8b NEXT
>192b	ec 10					.word	RUNEndOfLine             ; $8c [[END]]
>192d	2a 11					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>192f	59 26					.word	NotImplemented           ; $8e ELSE
>1931	1f 10					.word	NoExec01                 ; $8f THEN
>1933	1f 10					.word	NoExec02                 ; $90 TO
>1935	1f 10					.word	NoExec03                 ; $91 STEP
>1937	87 10					.word	CommandLET               ; $92 LET
>1939	22 10					.word	Command_Print            ; $93 PRINT
>193b	59 26					.word	NotImplemented           ; $94 INPUT
>193d	59 26					.word	NotImplemented           ; $95 CALL
>193f	59 26					.word	NotImplemented           ; $96 SYS
>1941	d3 10					.word	Command_REM              ; $97 REM
>1943	59 26					.word	NotImplemented           ; $98 EXIT
>1945	1f 10					.word	NoExec04                 ; $99 ,
>1947	1f 10					.word	NoExec05                 ; $9a ;
>1949	1f 10					.word	NoExec06                 ; $9b :
>194b	d3 10					.word	Command_REM2             ; $9c '
>194d	1f 10					.word	NoExec07                 ; $9d )
>194f	59 26					.word	NotImplemented           ; $9e DIM
>1951	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1953	ca 10					.word	Command_NEW              ; $a0 NEW
>1955	e0 10					.word	Command_RUN              ; $a1 RUN
>1957	30 11					.word	Command_STOP             ; $a2 STOP
>1959	2d 11					.word	Command_END              ; $a3 END
>195b	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>195d	59 26					.word	NotImplemented           ; $a5 LIST
>195f	59 26					.word	NotImplemented           ; $a6 SAVE
>1961	59 26					.word	NotImplemented           ; $a7 LOAD
>1963	59 26					.word	NotImplemented           ; $a8 POKE
>1965	59 26					.word	NotImplemented           ; $a9 DOKE
>1967	59 26					.word	NotImplemented           ; $aa
>1969	59 26					.word	NotImplemented           ; $ab
>196b	59 26					.word	NotImplemented           ; $ac
>196d	59 26					.word	NotImplemented           ; $ad
>196f	59 26					.word	NotImplemented           ; $ae
>1971	59 26					.word	NotImplemented           ; $af
>1973	59 26					.word	NotImplemented           ; $b0
>1975	59 26					.word	NotImplemented           ; $b1
>1977	59 26					.word	NotImplemented           ; $b2
>1979	59 26					.word	NotImplemented           ; $b3
>197b	59 26					.word	NotImplemented           ; $b4
>197d	59 26					.word	NotImplemented           ; $b5
>197f	59 26					.word	NotImplemented           ; $b6
>1981	59 26					.word	NotImplemented           ; $b7
>1983	59 26					.word	NotImplemented           ; $b8
>1985	59 26					.word	NotImplemented           ; $b9
>1987	59 26					.word	NotImplemented           ; $ba
>1989	59 26					.word	NotImplemented           ; $bb
>198b	59 26					.word	NotImplemented           ; $bc
>198d	59 26					.word	NotImplemented           ; $bd
>198f	59 26					.word	NotImplemented           ; $be
>1991	59 26					.word	NotImplemented           ; $bf
>1993	59 26					.word	NotImplemented           ; $c0
>1995	59 26					.word	NotImplemented           ; $c1
>1997	59 26					.word	NotImplemented           ; $c2
>1999	59 26					.word	NotImplemented           ; $c3
>199b	59 26					.word	NotImplemented           ; $c4
>199d	59 26					.word	NotImplemented           ; $c5
>199f	59 26					.word	NotImplemented           ; $c6
>19a1	59 26					.word	NotImplemented           ; $c7
>19a3	59 26					.word	NotImplemented           ; $c8
>19a5	59 26					.word	NotImplemented           ; $c9
>19a7	59 26					.word	NotImplemented           ; $ca
>19a9	59 26					.word	NotImplemented           ; $cb
>19ab	59 26					.word	NotImplemented           ; $cc
>19ad	59 26					.word	NotImplemented           ; $cd
>19af	59 26					.word	NotImplemented           ; $ce
>19b1	59 26					.word	NotImplemented           ; $cf
>19b3	59 26					.word	NotImplemented           ; $d0
>19b5	59 26					.word	NotImplemented           ; $d1
>19b7	59 26					.word	NotImplemented           ; $d2
>19b9	59 26					.word	NotImplemented           ; $d3
>19bb	59 26					.word	NotImplemented           ; $d4
>19bd	59 26					.word	NotImplemented           ; $d5 DEEK(
>19bf	59 26					.word	NotImplemented           ; $d6 PEEK(
>19c1	cc 16					.word	EXPUnaryRight            ; $d7 RIGHT$(
>19c3	bf 16					.word	EXPUnaryLeft             ; $d8 LEFT$(
>19c5	e6 16					.word	EXPUnaryMid              ; $d9 MID$(
>19c7	7d 16					.word	EXPUnaryStr              ; $da STR$(
>19c9	48 17					.word	EXPUnaryVal              ; $db VAL(
>19cb	4a 16					.word	EXPUnarySgn              ; $dc SGN(
>19cd	35 15					.word	EXPUnaryAbs              ; $dd ABS(
>19cf	cf 15					.word	EXPUnaryLen              ; $de LEN(
>19d1	60 16					.word	EXPUnarySqr              ; $df SQR(
>19d3	55 15					.word	EXPUnaryChr              ; $e0 CHR$(
>19d5	3f 15					.word	EXPUnaryAsc              ; $e1 ASC(
>19d7	59 26					.word	NotImplemented           ; $e2 INKEY$(
>19d9	59 26					.word	NotImplemented           ; $e3 EVENT(
>19db	59 26					.word	NotImplemented           ; $e4 TIME
>19dd	c5 15					.word	EXPUnaryInt              ; $e5 INT(
>19df	bb 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>19e1	66 15					.word	EXPUnaryDec              ; $e7 DEC(
>19e3	6f 16					.word	EXPUnaryHex              ; $e8 HEX$(
>19e5	e4 15					.word	EXPUnaryRnd              ; $e9 RND(
>19e7	f4 15					.word	ExpUnaryRand             ; $ea RAND(
>19e9	dd 15					.word	EXPUnaryParenthesis      ; $eb (
>19eb	b7 15					.word	EXPUnaryNull             ; $ec $
>19ed	b4 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>19ef	a4 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>19f1	45 13					.word	EXPCompareEqual          ; $ef =
>19f3	60 13					.word	EXPCompareNotEqual       ; $f0 <>
>19f5	69 13					.word	EXPCompareLessEqual      ; $f1 <=
>19f7	4e 13					.word	EXPCompareLess           ; $f2 <
>19f9	72 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>19fb	57 13					.word	EXPCompareGreater        ; $f4 >
>19fd	f2 12					.word	EXPBinXor                ; $f5 XOR
>19ff	e6 12					.word	EXPBinOr                 ; $f6 OR
>1a01	da 12					.word	EXPBinAnd                ; $f7 AND
>1a03	b2 12					.word	EXPBinIDiv               ; $f8 DIV
>1a05	c3 12					.word	EXPBinIMod               ; $f9 MOD
>1a07	bd 13					.word	EXPBinLeft               ; $fa <<
>1a09	c5 13					.word	EXPBinRight              ; $fb >>
>1a0b	a6 12					.word	EXPBinFDiv               ; $fc /
>1a0d	9d 12					.word	EXPBinMul                ; $fd *
>1a0f	94 12					.word	EXPBinSub                ; $fe -
>1a11	8b 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a13					TOKDetokenise:
.1a13	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a15	84 23		sty $23				sty 	zTemp2+1
.1a17	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1a1a					_TOKDLoop:
.1a1a	20 49 1a	jsr $1a49			jsr 	TOKDGet 					; get next
.1a1d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a1f	f0 26		beq $1a47			beq 	_TOKDExit
.1a21	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a23	f0 1d		beq $1a42			beq 	_TOKDDataItem
.1a25	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a27	f0 19		beq $1a42			beq 	_TOKDDataItem
.1a29	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a2b	10 05		bpl $1a32			bpl 	_TOKDNotToken
.1a2d	20 11 1b	jsr $1b11			jsr 	TOKDToken 					; token to text.
.1a30	80 e8		bra $1a1a			bra 	_TOKDLoop
.1a32					_TOKDNotToken:
.1a32	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1a34	90 05		bcc $1a3b			bcc 	_TOKDNotIdentifier
.1a36	20 84 1a	jsr $1a84			jsr 	TOKDIdentifier
.1a39	80 df		bra $1a1a			bra 	_TOKDLoop
.1a3b					_TOKDNotIdentifier:
.1a3b	a0 0a		ldy #$0a			ldy 	#10
.1a3d	20 cd 1a	jsr $1acd			jsr 	TOKDInteger
.1a40	80 d8		bra $1a1a			bra 	_TOKDLoop
.1a42					_TOKDDataItem:
.1a42	20 5f 1a	jsr $1a5f			jsr 	TOKDDataItem
.1a45	80 d3		bra $1a1a			bra 	_TOKDLoop
.1a47					_TOKDExit:
.1a47	18		clc				clc
.1a48	60		rts				rts
.1a49	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1a4b	e6 22		inc $22				inc 	zTemp2
.1a4d	d0 02		bne $1a51			bne 	_TKDGExit
.1a4f	e6 23		inc $23				inc 	zTemp2+1
.1a51					_TKDGExit:
.1a51	60		rts				rts
.1a52					TOKDOutput:
.1a52	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1a55	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1a58					TOKSetDetokeniseOutput:
.1a58	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1a5b	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.1a5e	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1a5f					TOKDDataItem:
.1a5f	a8		tay				tay 								; type in Y
.1a60	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1a62	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1a64	f0 02		beq $1a68			beq 	_TOKDDIsString
.1a66	a9 2e		lda #$2e			lda 	#'.'
.1a68					_TOKDDIsString:
.1a68	20 52 1a	jsr $1a52			jsr 	TOKDOutput 					; dump it
.1a6b	20 49 1a	jsr $1a49			jsr 	TOKDGet 					; get length into X
.1a6e	aa		tax				tax
.1a6f					_TOKDDOutput:
.1a6f	ca		dex				dex 								; are we complete
.1a70	30 08		bmi $1a7a			bmi 	_TOKDDEnd
.1a72	20 49 1a	jsr $1a49			jsr 	TOKDGet 					; get character and output it
.1a75	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1a78	80 f5		bra $1a6f			bra 	_TOKDDOutput
.1a7a					_TOKDDEnd:
.1a7a	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1a7c	d0 05		bne $1a83			bne 	_TOKDDNotString
.1a7e	a9 22		lda #$22			lda 	#'"'
.1a80	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1a83					_TOKDDNotString:
.1a83	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1a84					TOKDIdentifier:
.1a84	a0 ff		ldy #$ff			ldy 	#$FF
.1a86	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1a89					_TOKDLoop:
.1a89	a8		tay				tay 								; token in Y
.1a8a	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1a8c	c0 64		cpy #$64			cpy 	#$64
.1a8e	f0 11		beq $1aa1			beq 	_TOKDIOutput
.1a90	a9 5f		lda #$5f			lda 	#'_'
.1a92	c0 65		cpy #$65			cpy 	#$65
.1a94	f0 0b		beq $1aa1			beq 	_TOKDIOutput
.1a96	98		tya				tya 								; handle a-z
.1a97	18		clc				clc
.1a98	69 21		adc #$21			adc	 	#$21
.1a9a	c0 5a		cpy #$5a			cpy 	#$5A
.1a9c	90 03		bcc $1aa1			bcc 	_TOKDIOutput
.1a9e	38		sec				sec 								; handle 0-9
.1a9f	e9 4b		sbc #$4b			sbc 	#$4B
.1aa1					_TOKDIOutput:
.1aa1	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1aa4	10 08		bpl $1aae			bpl 	_TOKDINoSpacing
.1aa6	48		pha				pha
.1aa7	20 43 1b	jsr $1b43			jsr 	TOKDSpacing
.1aaa	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1aad	68		pla				pla
.1aae					_TOKDINoSpacing:
.1aae	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1ab1	20 49 1a	jsr $1a49			jsr 	TOKDGet 					; get next token
.1ab4	c9 7c		cmp #$7c			cmp 	#$7C
.1ab6	90 d1		bcc $1a89			bcc 	_TOKDLoop
.1ab8	f0 12		beq $1acc			beq 	_TOKDIExit 					; it's a number, no tail.
.1aba	4a		lsr a				lsr 	a 							; string ?
.1abb	90 07		bcc $1ac4			bcc 	_TOKDICheckArray
.1abd	48		pha				pha
.1abe	a9 24		lda #$24			lda 	#"$"
.1ac0	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1ac3	68		pla				pla
.1ac4					_TOKDICheckArray:
.1ac4	4a		lsr a				lsr 	a 							; array ?
.1ac5	90 05		bcc $1acc			bcc 	_TOKDIExit
.1ac7	a9 28		lda #$28			lda 	#"("
.1ac9	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1acc					_TOKDIExit:
.1acc	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1acd					TOKDInteger:
.1acd	5a		phy				phy 								; save base
.1ace	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1ad0	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.1ad3					_TOKDILoop:
.1ad3	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1ad5	c9 40		cmp #$40			cmp 	#$40
.1ad7	b0 1d		bcs $1af6			bcs 	_TOKDIHaveInteger
.1ad9	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1adb	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1ade	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1ae1	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1ae4	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1ae7	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1aea	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1aed	20 49 1a	jsr $1a49			jsr 	TOKDGet 					; OR byte in.
.1af0	05 0c		ora $0c				ora 	IFR0+IM0
.1af2	85 0c		sta $0c				sta 	IFR0+IM0
.1af4	80 dd		bra $1ad3			bra 	_TOKDILoop
.1af6					_TOKDIHaveInteger:
.1af6	7a		ply				ply 								; restore base
.1af7	98		tya				tya 								; base in A
.1af8	20 1c 23	jsr $231c			jsr 	IFloatIntegerToStringR0
.1afb	86 1e		stx $1e				stx 	zTemp0
.1afd	84 1f		sty $1f				sty 	zTemp0+1
.1aff	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b01	20 43 1b	jsr $1b43			jsr 	TOKDSpacing 				; check spacing okay.
.1b04	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b06					_TOKDOutput:
.1b06	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b08	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1b0b	c8		iny				iny
.1b0c	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b0e	d0 f6		bne $1b06			bne 	_TOKDOutput
.1b10	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b11					TOKDToken:
.1b11	a2 77		ldx #$77			ldx 	#StandardTokens & $FF
.1b13	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b15					_TOKDSearch:
.1b15	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b17	84 1f		sty $1f				sty 	zTemp0+1
.1b19	aa		tax				tax 								; token ID in X.
.1b1a					_TOKDFind:
.1b1a	ca		dex				dex 								; reached the start
.1b1b	10 0d		bpl $1b2a			bpl 	_TOKDFound
.1b1d	38		sec				sec 								; go to next entry
.1b1e	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b20	65 1e		adc $1e				adc 	zTemp0
.1b22	85 1e		sta $1e				sta 	zTemp0
.1b24	90 f4		bcc $1b1a			bcc 	_TOKDFind
.1b26	e6 1f		inc $1f				inc 	zTemp0+1
.1b28	80 f0		bra $1b1a			bra 	_TOKDFind
.1b2a					_TOKDFound:
.1b2a	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1b2c	f0 14		beq $1b42			beq 	_TOKDExit
.1b2e	aa		tax				tax
.1b2f	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1b31	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1b33	20 43 1b	jsr $1b43			jsr 	TOKDSpacing
.1b36					_TOKDOutput:
.1b36	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b38	20 9a 1e	jsr $1e9a			jsr 	TOKToLower
.1b3b	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1b3e	c8		iny				iny
.1b3f	ca		dex				dex
.1b40	d0 f4		bne $1b36			bne 	_TOKDOutput
.1b42					_TOKDExit:
.1b42	60		rts				rts
.1b43					TOKDSpacing:
.1b43	20 b1 1e	jsr $1eb1			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1b46	90 0d		bcc $1b55			bcc 	_TOKDSExit
.1b48	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1b4b	20 b1 1e	jsr $1eb1			jsr 	TOKIsIdentifierElement
.1b4e	90 05		bcc $1b55			bcc 	_TOKDSExit
.1b50	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1b52	20 52 1a	jsr $1a52			jsr 	TOKDOutput
.1b55					_TOKDSExit:
.1b55	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1b56					PGMDeleteLine:
.1b56	20 09 1c	jsr $1c09			jsr 	PGMEndProgram 				; end of program into zTemp0
.1b59	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1b5b	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b5e	85 21		sta $21				sta 	zTemp1+1
.1b60					_PGMDLoop:
.1b60	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1b62	38		sec				sec
.1b63	f0 3a		beq $1b9f			beq 	_PGMDExit
.1b65	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1b67	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b69	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1b6c	d0 08		bne $1b76			bne 	_PGMDNext
.1b6e	c8		iny				iny
.1b6f	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b71	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1b74	f0 0d		beq $1b83			beq 	_PGMDDelete
.1b76					_PGMDNext:
.1b76	18		clc				clc
.1b77	b2 20		lda ($20)			lda 	(zTemp1)
.1b79	65 20		adc $20				adc 	zTemp1
.1b7b	85 20		sta $20				sta 	zTemp1
.1b7d	90 e1		bcc $1b60			bcc 	_PGMDLoop
.1b7f	e6 21		inc $21				inc 	zTemp1+1
.1b81	80 dd		bra $1b60			bra 	_PGMDLoop
.1b83					_PGMDDelete:
.1b83	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1b85	a8		tay				tay
.1b86					_PGMDCopy:
.1b86	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1b88	92 20		sta ($20)			sta 	(zTemp1)
.1b8a	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1b8c	c5 1e		cmp $1e				cmp 	zTemp0
.1b8e	d0 07		bne $1b97			bne 	_PGMDNext2
.1b90	a5 21		lda $21				lda 	zTemp1+1
.1b92	c5 1f		cmp $1f				cmp 	zTemp0+1
.1b94	18		clc				clc
.1b95	f0 08		beq $1b9f			beq 	_PGMDExit
.1b97					_PGMDNext2:
.1b97	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1b99	d0 eb		bne $1b86			bne 	_PGMDCopy
.1b9b	e6 21		inc $21				inc 	zTemp1+1
.1b9d	80 e7		bra $1b86			bra 	_PGMDCopy
.1b9f					_PGMDExit:
.1b9f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1ba0					PGMInsertLine:
.1ba0	20 09 1c	jsr $1c09			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ba3	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1ba5	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1ba8	85 21		sta $21				sta 	zTemp1+1
.1baa					_PGMILoop:
.1baa	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1bac	f0 1c		beq $1bca			beq 	_PGMIInsert
.1bae	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1bb0	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bb2	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1bb5	c8		iny				iny
.1bb6	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bb8	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1bbb	b0 0d		bcs $1bca			bcs 	_PGMIInsert 				; insert here.
.1bbd	18		clc				clc
.1bbe	b2 20		lda ($20)			lda 	(zTemp1)
.1bc0	65 20		adc $20				adc 	zTemp1
.1bc2	85 20		sta $20				sta 	zTemp1
.1bc4	90 e4		bcc $1baa			bcc 	_PGMILoop
.1bc6	e6 21		inc $21				inc 	zTemp1+1
.1bc8	80 e0		bra $1baa			bra 	_PGMILoop
.1bca					_PGMIInsert:
.1bca	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1bcd					_PGMIInsertLoop:
.1bcd	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bcf	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1bd1	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1bd3	c5 1e		cmp $1e				cmp 	zTemp0
.1bd5	d0 06		bne $1bdd			bne 	_PGMINext
.1bd7	a5 21		lda $21				lda 	zTemp1+1
.1bd9	c5 1f		cmp $1f				cmp 	zTemp0+1
.1bdb	f0 0a		beq $1be7			beq 	_PGMIInserted
.1bdd					_PGMINext:
.1bdd	a5 1e		lda $1e				lda 	zTemp0
.1bdf	d0 02		bne $1be3			bne 	_PGMINoBorrow
.1be1	c6 1f		dec $1f				dec 	zTemp0+1
.1be3					_PGMINoBorrow:
.1be3	c6 1e		dec $1e				dec 	zTemp0
.1be5	80 e6		bra $1bcd			bra 	_PGMIInsertLoop
.1be7					_PGMIInserted:
.1be7	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1be9					_PGMICopyLoop:
.1be9	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1bec	91 20		sta ($20),y			sta 	(zTemp1),y
.1bee	c8		iny				iny
.1bef	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1bf2	d0 f5		bne $1be9			bne 	_PGMICopyLoop
.1bf4	18		clc				clc
.1bf5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1bf6					PGMSetBaseAddress:
.1bf6	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1bf9	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1bfc	60		rts				rts
.1bfd					PGMNewProgram:
.1bfd	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1bff	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c02	85 1f		sta $1f				sta 	zTemp0+1
.1c04	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c06	92 1e		sta ($1e)			sta 	(zTemp0)
.1c08	60		rts				rts
.1c09					PGMEndProgram:
.1c09	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c0b	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c0e	85 1f		sta $1f				sta 	zTemp0+1
.1c10					_PGMEPLoop:
.1c10	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c12	f0 0b		beq $1c1f			beq 	_PGMEPExit
.1c14	18		clc				clc
.1c15	65 1e		adc $1e				adc 	zTemp0
.1c17	85 1e		sta $1e				sta 	zTemp0
.1c19	90 f5		bcc $1c10			bcc 	_PGMEPLoop
.1c1b	e6 1f		inc $1f				inc 	zTemp0+1
.1c1d	80 f1		bra $1c10			bra 	_PGMEPLoop
.1c1f					_PGMEPExit:
.1c1f	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c20					TOKResetElement:
.1c20	9c 46 03	stz $0346			stz 	TOKElement
.1c23	60		rts				rts
.1c24					TOKWriteElement:
.1c24	da		phx				phx
.1c25	ae 46 03	ldx $0346			ldx 	TOKElement
.1c28	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1c2b	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1c2e	fa		plx				plx
.1c2f	ee 46 03	inc $0346			inc 	TOKElement
.1c32	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1c33					TOKTokeniseConstant:
.1c33	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1c35	48		pha				pha 								; save on stack
.1c36	29 c0		and #$c0			and 	#$C0
.1c38	05 0d		ora $0d				ora 	IFR0+IM1
.1c3a	05 0e		ora $0e				ora 	IFR0+IM2
.1c3c	f0 10		beq $1c4e			beq 	_TTCLess
.1c3e	da		phx				phx
.1c3f	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1c41					_TTCShiftRight:
.1c41	46 0e		lsr $0e				lsr 	IFR0+IM2
.1c43	66 0d		ror $0d				ror 	IFR0+IM1
.1c45	66 0c		ror $0c				ror 	IFR0+IM0
.1c47	ca		dex				dex
.1c48	d0 f7		bne $1c41			bne 	_TTCShiftRight
.1c4a	fa		plx				plx
.1c4b	20 33 1c	jsr $1c33			jsr 	TOKTokeniseConstant
.1c4e					_TTCLess:
.1c4e	68		pla				pla
.1c4f	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1c51	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1c54	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1c55					TOKTokeniseDecimals:
.1c55	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext 					; consume the .
.1c58	20 27 1e	jsr $1e27			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1c5b	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1c5d	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1c60	20 65 1c	jsr $1c65			jsr 	TOKOutputElementBuffer 		; then the buffer
.1c63	18		clc				clc
.1c64	60		rts				rts
.1c65					TOKOutputElementBuffer:
.1c65	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1c68	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1c6b	a8		tay				tay 								; put in Y
.1c6c	f0 0c		beq $1c7a			beq 	_TOEExit 					; exit if empty which is okay.
.1c6e	a2 01		ldx #$01			ldx 	#1
.1c70					_TOELoop:
.1c70	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1c73	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1c76	e8		inx				inx
.1c77	88		dey				dey
.1c78	d0 f6		bne $1c70			bne 	_TOELoop
.1c7a					_TOEExit:
.1c7a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1c7b					TOKTokenise:
.1c7b	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1c7e	8e 46 04	stx $0446			stx 	TOKDataSource
.1c81	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1c83	2a		rol a				rol  	a
.1c84	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1c87	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1c89	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1c8c					_TOKMainLoop:
.1c8c	20 f9 1c	jsr $1cf9			jsr 	TOKGet 						; what follows.
.1c8f	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1c91	f0 51		beq $1ce4			beq 	_TOKExit
.1c93	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1c95	d0 05		bne $1c9c			bne 	_TOKElement
.1c97	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext
.1c9a	80 f0		bra $1c8c			bra 	_TOKMainLoop
.1c9c					_TOKElement:
.1c9c	20 a5 1e	jsr $1ea5			jsr 	TOKIsDigit 					; is it 0..9
.1c9f	90 0a		bcc $1cab			bcc 	_TOKNotDigit
.1ca1	20 fe 1d	jsr $1dfe			jsr 	TOKTokeniseInteger 			; get integer
.1ca4	b0 45		bcs $1ceb			bcs 	_TOKFail 					; did it fail ?
.1ca6	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1ca9	80 e1		bra $1c8c			bra 	_TOKMainLoop
.1cab					_TOKNotDigit:
.1cab	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1cae	d0 3b		bne $1ceb			bne 	_TOKFail 					; if so, we've a problem.
.1cb0	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1cb2	d0 07		bne $1cbb			bne 	_TOKNotHex
.1cb4	20 46 1d	jsr $1d46			jsr 	TOKTokeniseHexadecimal
.1cb7	b0 32		bcs $1ceb			bcs 	_TOKFail
.1cb9	80 d1		bra $1c8c			bra 	_TOKMainLoop
.1cbb					_TOKNotHex:
.1cbb	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1cbd	d0 07		bne $1cc6			bne 	_TOKNotDecimal
.1cbf	20 55 1c	jsr $1c55			jsr 	TOKTokeniseDecimals
.1cc2	b0 27		bcs $1ceb			bcs 	_TOKFail
.1cc4	80 c6		bra $1c8c			bra 	_TOKMainLoop
.1cc6					_TOKNotDecimal:
.1cc6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1cc8	d0 07		bne $1cd1			bne 	_TOKNotString
.1cca	20 6c 1e	jsr $1e6c			jsr 	TOKTokeniseString
.1ccd	b0 1c		bcs $1ceb			bcs 	_TOKFail
.1ccf	80 bb		bra $1c8c			bra 	_TOKMainLoop
.1cd1					_TOKNotString:
.1cd1	20 c2 1e	jsr $1ec2			jsr 	TOKIsAlpha 					; identifier ?
.1cd4	b0 07		bcs $1cdd			bcs 	_TOKIdentifier
.1cd6	20 3b 1e	jsr $1e3b			jsr 	TOKTokenisePunctuation 		; punctuation
.1cd9	b0 10		bcs $1ceb			bcs 	_TOKFail
.1cdb	80 af		bra $1c8c			bra 	_TOKMainLoop
.1cdd					_TOKIdentifier:
.1cdd	20 80 1d	jsr $1d80			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1ce0	b0 09		bcs $1ceb			bcs 	_TOKFail
.1ce2	80 a8		bra $1c8c			bra 	_TOKMainLoop
.1ce4					_TOKExit:
.1ce4	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1ce6	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1ce9	18		clc				clc									; return with carry set.
.1cea	60		rts				rts
.1ceb					_TOKFail:
.1ceb	38		sec				sec
.1cec	60		rts				rts
.1ced					TOKWriteA:
.1ced	da		phx				phx
.1cee	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1cf1	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1cf4	fa		plx				plx
.1cf5	ee 37 02	inc $0237			inc 	TOKLineSize
.1cf8	60		rts				rts
.1cf9					TOKGet:
.1cf9	18		clc				clc
.1cfa	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1cfd					TOKGetNext:
.1cfd	38		sec				sec
.1cfe	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d01					TOKFindToken:
.1d01	a2 77		ldx #$77			ldx 	#StandardTokens & $FF 		; do this table
.1d03	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d05	20 10 1d	jsr $1d10			jsr 	TOKFindTokenXY 				; find it, or not
.1d08	90 04		bcc $1d0e			bcc 	_TOKFTFail
.1d0a	a2 00		ldx #$00			ldx 	#0
.1d0c	38		sec				sec
.1d0d	60		rts				rts
.1d0e					_TOKFTFail
.1d0e	18		clc				clc
.1d0f	60		rts				rts
.1d10					TOKFindTokenXY:
.1d10	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d12	84 1f		sty $1f				sty 	zTemp0+1
.1d14	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d16	8d 48 04	sta $0448			sta 	TOKCurrent
.1d19					_TOKFindLoop:
.1d19	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d1b	18		clc				clc 		 						; clear carry in case of fail
.1d1c	30 17		bmi $1d35			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d1e	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1d21	d0 13		bne $1d36			bne 	_TOKNext 					; different, try next.
.1d23	aa		tax				tax 								; number of chars to compare.
.1d24	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d26					_TOKCompare:
.1d26	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d28	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1d2b	d0 09		bne $1d36			bne 	_TOKNext 					; different ? try next
.1d2d	c8		iny				iny 								; compare next two
.1d2e	ca		dex				dex
.1d2f	d0 f5		bne $1d26			bne 	_TOKCompare 				; until done X characters.
.1d31	38		sec				sec
.1d32	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1d35					_TOKExit:
.1d35	60		rts				rts
.1d36					_TOKNext:
.1d36	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1d39	38		sec				sec 								; add length+1 to ptr
.1d3a	b2 1e		lda ($1e)			lda 	(zTemp0)
.1d3c	65 1e		adc $1e				adc 	zTemp0
.1d3e	85 1e		sta $1e				sta 	zTemp0
.1d40	90 d7		bcc $1d19			bcc 	_TOKFindLoop
.1d42	e6 1f		inc $1f				inc 	zTemp0+1
.1d44	80 d3		bra $1d19			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1d46					TOKTokeniseHexadecimal:
.1d46	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext 					; consume the $
.1d49	a2 0c		ldx #$0c			ldx 	#IFR0
.1d4b	20 7b 25	jsr $257b			jsr 	IFloatSetZero 				; set R0 = 0
.1d4e					_TTHLoop:
.1d4e	20 f9 1c	jsr $1cf9			jsr 	TOKGet 						; keep getting and copying while numeric.
.1d51	20 cf 1e	jsr $1ecf			jsr 	TOKIsHexadecimal
.1d54	90 20		bcc $1d76			bcc 	_TTHDone
.1d56	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1d58	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1d5b	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1d5e	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1d61	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.1d64	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext
.1d67	38		sec				sec 								; convert to decimal.
.1d68	e9 30		sbc #$30			sbc 	#48
.1d6a	c9 0a		cmp #$0a			cmp 	#10
.1d6c	90 02		bcc $1d70			bcc 	_TTHNotAlpha
.1d6e	e9 07		sbc #$07			sbc 	#7
.1d70					_TTHNotAlpha:
.1d70	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1d72	85 0c		sta $0c				sta 	IFR0+IM0
.1d74	80 d8		bra $1d4e			bra 	_TTHLoop
.1d76					_TTHDone:
.1d76	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1d78	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1d7b	20 33 1c	jsr $1c33			jsr 	TOKTokeniseConstant 		; write integer out.
.1d7e	18		clc				clc
.1d7f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1d80					TOKTokeniseIdentifier:
.1d80	20 20 1c	jsr $1c20			jsr 	TOKResetElement 			; extract an identifier
.1d83					_TOKGetIdentifier:
.1d83	20 f9 1c	jsr $1cf9			jsr 	TOKGet
.1d86	20 8f 1e	jsr $1e8f			jsr 	TOKToUpper
.1d89	20 b1 1e	jsr $1eb1			jsr 	TOKIsIdentifierElement
.1d8c	90 08		bcc $1d96			bcc 	_TOKEndIdent
.1d8e	20 24 1c	jsr $1c24			jsr		TOKWriteElement
.1d91	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext
.1d94	80 ed		bra $1d83			bra 	_TOKGetIdentifier
.1d96					_TOKEndIdent:
.1d96	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1d98	d0 06		bne $1da0			bne 	_TOKNotString
.1d9a	20 24 1c	jsr $1c24			jsr 	TOKWriteElement 			; add it
.1d9d	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext 					; consume it
.1da0					_TOKNotString:
.1da0	20 f9 1c	jsr $1cf9			jsr 	TOKGet 						; finally check for (
.1da3	c9 28		cmp #$28			cmp 	#"("
.1da5	d0 06		bne $1dad			bne 	_TOKNoArray
.1da7	20 24 1c	jsr $1c24			jsr 	TOKWriteElement 			; add it
.1daa	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext 					; consume it
.1dad					_TOKNoArray:
.1dad	20 01 1d	jsr $1d01			jsr 	TOKFindToken 				; find it
.1db0	90 05		bcc $1db7			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1db2	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1db5	18		clc				clc
.1db6	60		rts				rts
.1db7					_TOKIsVariable:
.1db7	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1db9					_TOKOutputBuffer:
.1db9	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1dbc	20 e5 1d	jsr $1de5			jsr 	TOKTranslateIdentifier
.1dbf	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1dc2	e8		inx				inx
.1dc3	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1dc6	20 b1 1e	jsr $1eb1			jsr 	TOKIsIdentifierElement
.1dc9	b0 ee		bcs $1db9			bcs 	_TOKOutputBuffer
.1dcb	a8		tay				tay 								; last char in Y
.1dcc	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1dce	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1dd0	f0 0e		beq $1de0			beq 	_TOKIVExit
.1dd2	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1dd4	d0 04		bne $1dda			bne 	_TOKIVCheckArray 			; no, check for (
.1dd6	1a		inc a				inc 	a 							; token is $7D
.1dd7	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1dda					_TOKIVCheckArray:
.1dda	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1ddc	d0 02		bne $1de0			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1dde	1a		inc a				inc 	a
.1ddf	1a		inc a				inc 	a
.1de0					_TOKIVExit:
.1de0	20 ed 1c	jsr $1ced			jsr 	TOKWriteA 					; ending token
.1de3	18		clc				clc
.1de4	60		rts				rts
.1de5					TOKTranslateIdentifier:
.1de5	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1de7	f0 0f		beq $1df8			beq 	_TTI64
.1de9	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1deb	f0 0e		beq $1dfb			beq 	_TTI65
.1ded	38		sec				sec
.1dee	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1df0	10 03		bpl $1df5			bpl 	_TTIExit
.1df2	18		clc				clc 								; map 09 onto 26-35
.1df3	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1df5					_TTIExit:
.1df5	09 40		ora #$40			ora 	#$40 						; correct range.
.1df7	60		rts				rts
.1df8	a9 64		lda #$64	_TTI64:	lda 	#$64
.1dfa	60		rts				rts
.1dfb	a9 65		lda #$65	_TTI65:	lda 	#$65
.1dfd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1dfe					TOKTokeniseInteger:
.1dfe	20 27 1e	jsr $1e27			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e01	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1e03	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e05	ad 46 03	lda $0346			lda		TOKElement
.1e08	20 df 23	jsr $23df			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e0b	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1e0e	f0 12		beq $1e22			beq 	_TOKNotLineNumber
.1e10	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e12	d0 0c		bne $1e20			bne 	_TOKBadLineNumeber
.1e14	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e16	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e19	a5 0d		lda $0d				lda 	IFR0+IM1
.1e1b	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e1e	18		clc				clc
.1e1f	60		rts				rts
.1e20					_TOKBadLineNumeber:
.1e20	38		sec				sec
.1e21	60		rts				rts
.1e22					_TOKNotLineNumber:
.1e22	20 33 1c	jsr $1c33			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e25	18		clc				clc
.1e26	60		rts				rts
.1e27					TOKExtractInteger:
.1e27	20 20 1c	jsr $1c20			jsr 	TOKResetElement 			; restart
.1e2a					_TTILoop:
.1e2a	20 f9 1c	jsr $1cf9			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e2d	20 a5 1e	jsr $1ea5			jsr 	TOKIsDigit
.1e30	90 08		bcc $1e3a			bcc 	_TOKEIExit
.1e32	20 24 1c	jsr $1c24			jsr 	TOKWriteElement
.1e35	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext
.1e38	80 f0		bra $1e2a			bra 	_TTILoop
.1e3a					_TOKEIExit:
.1e3a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1e3b					TOKTokenisePunctuation:
.1e3b	20 20 1c	jsr $1c20			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1e3e	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext
.1e41	20 24 1c	jsr $1c24			jsr 	TOKWriteElement
.1e44	20 f9 1c	jsr $1cf9			jsr 	TOKGet 						; what follows ?
.1e47	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1e49	f0 10		beq $1e5b			beq 	_TTPOne
.1e4b	20 b9 1e	jsr $1eb9			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1e4e	b0 0b		bcs $1e5b			bcs 	_TTPOne 					; these speed things up a bit.
.1e50	20 24 1c	jsr $1c24			jsr 	TOKWriteElement 			; this is what we will search for.
.1e53	20 01 1d	jsr $1d01			jsr 	TOKFindToken
.1e56	b0 0a		bcs $1e62			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1e58	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1e5b					_TTPOne:
.1e5b	20 01 1d	jsr $1d01			jsr 	TOKFindToken 				; look for one character punctuation
.1e5e	b0 07		bcs $1e67			bcs 	_TTPOutputExit 				; we found it
.1e60	38		sec				sec 								; not recognised.
.1e61	60		rts				rts
.1e62					_TTPConsumeExit:
.1e62	48		pha				pha
.1e63	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext 					; get the 2nd char out.
.1e66	68		pla				pla
.1e67					_TTPOutputExit:
.1e67	20 ed 1c	jsr $1ced			jsr  	TOKWriteA 					; write token out
.1e6a	18		clc				clc
.1e6b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1e6c					TOKTokeniseString:
.1e6c	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext 					; consume the "
.1e6f	20 20 1c	jsr $1c20			jsr 	TOKResetElement 			; start getting the string
.1e72					_TOKTSLoop:
.1e72	20 f9 1c	jsr $1cf9			jsr 	TOKGet 						; check EOL
.1e75	c9 00		cmp #$00			cmp 	#0
.1e77	f0 0c		beq $1e85			beq 	_TOKTSExit
.1e79	20 fd 1c	jsr $1cfd			jsr 	TOKGetNext 					; get and consume
.1e7c	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1e7e	f0 05		beq $1e85			beq 	_TOKTSExit
.1e80	20 24 1c	jsr $1c24			jsr 	TOKWriteElement
.1e83	80 ed		bra $1e72			bra 	_TOKTSLoop
.1e85					_TOKTSExit:
.1e85	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1e87	20 ed 1c	jsr $1ced			jsr 	TOKWriteA
.1e8a	20 65 1c	jsr $1c65			jsr 	TOKOutputElementBuffer
.1e8d	18		clc				clc
.1e8e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1e8f					TOKToUpper:
.1e8f	c9 61		cmp #$61			cmp 	#"a"
.1e91	90 06		bcc $1e99			bcc 	_TTUNotLower
.1e93	c9 7b		cmp #$7b			cmp 	#"z"+1
.1e95	b0 02		bcs $1e99			bcs 	_TTUNotLower
.1e97	49 20		eor #$20			eor 	#$20
.1e99					_TTUNotLower:
.1e99	60		rts				rts
.1e9a					TOKToLower:
.1e9a	c9 41		cmp #$41			cmp 	#"A"
.1e9c	90 06		bcc $1ea4			bcc 	_TTUNotUpper
.1e9e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ea0	b0 02		bcs $1ea4			bcs 	_TTUNotUpper
.1ea2	49 20		eor #$20			eor 	#$20
.1ea4					_TTUNotUpper:
.1ea4	60		rts				rts
.1ea5					TOKIsDigit:
.1ea5	c9 30		cmp #$30			cmp 	#"0"
.1ea7	90 06		bcc $1eaf			bcc 	TOKFail
.1ea9	c9 3a		cmp #$3a			cmp 	#"9"+1
.1eab	b0 02		bcs $1eaf			bcs 	TOKFail
.1ead					TOKSucceed:
.1ead	38		sec				sec
.1eae	60		rts				rts
.1eaf					TOKFail:
.1eaf	18		clc				clc
.1eb0	60		rts				rts
.1eb1					TOKIsIdentifierElement:
.1eb1	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1eb3	f0 f8		beq $1ead			beq 	TOKSucceed
.1eb5	c9 5f		cmp #$5f			cmp 	#"_"
.1eb7	f0 f4		beq $1ead			beq 	TOKSucceed 					; else fall through to alphanumeric
.1eb9					TOKIsAlphaNumeric:
.1eb9	20 c2 1e	jsr $1ec2			jsr 	TOKIsAlpha
.1ebc	b0 ef		bcs $1ead			bcs 	TOKSucceed
.1ebe	20 a5 1e	jsr $1ea5			jsr 	TOKIsDigit
.1ec1	60		rts				rts
.1ec2					TOKIsAlpha:
.1ec2	20 8f 1e	jsr $1e8f			jsr 	TOKToUpper
.1ec5	c9 41		cmp #$41			cmp 	#"A"
.1ec7	90 e6		bcc $1eaf			bcc 	TOKFail
.1ec9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ecb	b0 e2		bcs $1eaf			bcs 	TOKFail
.1ecd	80 de		bra $1ead			bra 	TOKSucceed
.1ecf					TOKIsHexadecimal:
.1ecf	20 a5 1e	jsr $1ea5			jsr		TOKIsDigit
.1ed2	b0 d9		bcs $1ead			bcs 	TOKSucceed
.1ed4	20 c2 1e	jsr $1ec2			jsr 	TOKIsAlpha
.1ed7	90 d6		bcc $1eaf			bcc 	TOKFail
.1ed9	c9 47		cmp #$47			cmp 	#"F"+1
.1edb	b0 d2		bcs $1eaf			bcs 	TOKFail
.1edd	80 ce		bra $1ead			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1edf					StringSystemInitialise:
.1edf	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1ee2	3a		dec a				dec 	a
.1ee3	8d 4b 04	sta $044b			sta 	stringMemory+1
.1ee6	85 1f		sta $1f				sta 	zTemp0+1
.1ee8	a9 ff		lda #$ff			lda 	#$FF
.1eea	8d 4a 04	sta $044a			sta 	stringMemory
.1eed	85 1e		sta $1e				sta 	zTemp0
.1eef	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1ef1	92 1e		sta ($1e)			sta 	(zTemp0)
.1ef3	60		rts				rts
.1ef4					StringSpaceInitialise:
.1ef4	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1ef6	8d 49 04	sta $0449			sta 	stringInitialised
.1ef9	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1efc	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1eff	ad 4b 04	lda $044b			lda 	stringMemory+1
.1f02	3a		dec a				dec 	a
.1f03	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1f06	60		rts				rts
.1f07					StringTempAllocate:
.1f07	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1f09	b0 2e		bcs $1f39			bcs 	_STALength
.1f0b	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1f0e	30 05		bmi $1f15			bmi 	_STAAllocate
.1f10	48		pha				pha 								; save value to subtract.
.1f11	20 f4 1e	jsr $1ef4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1f14	68		pla				pla 								; restore it
.1f15					_STAAllocate:
.1f15	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1f17	18		clc				clc  								; deliberate allows one more
.1f18	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1f1b	8d 4c 04	sta $044c			sta 	stringTempPointer
.1f1e	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1f20	85 24		sta $24				sta 	zsTemp 						; and zsTemp
.1f22	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1f25	69 ff		adc #$ff			adc 	#$FF
.1f27	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1f2a	85 25		sta $25				sta 	zsTemp+1
.1f2c	85 0d		sta $0d				sta 	IFR0+IM1
.1f2e	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1f30	a9 80		lda #$80			lda 	#$80
.1f32	85 0f		sta $0f				sta 	IFR0+IExp
.1f34	a9 00		lda #$00			lda 	#0 							; clear the target string
.1f36	92 24		sta ($24)			sta 	(zsTemp)
.1f38	60		rts				rts
.1f39					_STALength:
.1f39	4c 41 12	jmp $1241		jmp	ErrorV_string
.1f3c					StringTempWrite:
.1f3c	5a		phy				phy
.1f3d	48		pha				pha
.1f3e	b2 24		lda ($24)			lda 	(zsTemp)
.1f40	1a		inc a				inc 	a
.1f41	92 24		sta ($24)			sta 	(zsTemp)
.1f43	a8		tay				tay
.1f44	68		pla				pla
.1f45	91 24		sta ($24),y			sta 	(zsTemp),y
.1f47	7a		ply				ply
.1f48	60		rts				rts
.0024					zsTemp:
>0024							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/simple.asm

.1f49					VARCheckSimple:
.1f49	aa		tax				tax 								; save in X
.1f4a	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1f4c	c9 7c		cmp #$7c			cmp 	#$7C
.1f4e	d0 15		bne $1f65			bne 	_VCSComplex
.1f50	c8		iny				iny 								; consume the second byte, the type.
.1f51	8a		txa				txa  								; character (40-7F) x 4
.1f52	0a		asl a				asl 	a
.1f53	0a		asl a				asl  	a
.1f54	18		clc				clc
.1f55	69 4e		adc #$4e			adc 	#FastVariables & $FF
.1f57	85 0c		sta $0c				sta 	IFR0+IM0
.1f59	a9 04		lda #$04			lda 	#FastVariables >> 8
.1f5b	69 00		adc #$00			adc 	#0
.1f5d	85 0d		sta $0d				sta 	IFR0+IM1
.1f5f	64 0e		stz $0e				stz 	IFR0+IM2
.1f61	64 0f		stz $0f				stz 	IFR0+IExp
.1f63	38		sec				sec 								; it's a reference
.1f64	60		rts				rts
.1f65					_VCSComplex:
>1f65	db						.byte 	$DB
.044e					FastVariables:
>044e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.1f66					IFInitialise:
.1f66	9c be 04	stz $04be			stz 	IFStackIndex
.1f69	60		rts				rts
.1f6a					IFloatSubtract:
.1f6a	da		phx				phx
.1f6b	a2 0c		ldx #$0c			ldx 	#IFR0
.1f6d	20 86 25	jsr $2586			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.1f70	fa		plx				plx
.1f71					IFloatAdd:
.1f71	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.1f73	05 0f		ora $0f				ora 	IFR0+IExp
.1f75	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.1f77	d0 4e		bne $1fc7			bne 	_IFloatAddDecimals 			; decimal version.
.1f79					_IFAddSubMantissa:
.1f79	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.1f7b	45 0f		eor $0f				eor 	IFR0+IExp
.1f7d	29 40		and #$40			and 	#IFSign
.1f7f	d0 21		bne $1fa2			bne 	_IFloatSubMantissa
.1f81	18		clc				clc 								; do the actual addition
.1f82	a5 0c		lda $0c			lda 	IFR0+IM0
.1f84	75 00		adc $00,x		adc 		IM0,x
.1f86	85 0c		sta $0c			sta 	IFR0+IM0
.1f88	a5 0d		lda $0d			lda 	IFR0+IM1
.1f8a	75 01		adc $01,x		adc 		IM1,x
.1f8c	85 0d		sta $0d			sta 	IFR0+IM1
.1f8e	a5 0e		lda $0e			lda 	IFR0+IM2
.1f90	75 02		adc $02,x		adc 		IM2,x
.1f92	85 0e		sta $0e			sta 	IFR0+IM2
.1f94	10 29		bpl $1fbf			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.1f96	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.1f98	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.1f9b	20 d4 25	jsr $25d4			jsr 	IFloatIncExponent
.1f9e	d0 1f		bne $1fbf			bne 	_IFloatAddExit
.1fa0	38		sec				sec 								; overflowed numerically.
.1fa1	60		rts				rts
.1fa2					_IFloatSubMantissa:
.1fa2	38		sec				sec 								; do the subtraction R0-Rx
.1fa3	a5 0c		lda $0c			lda 	IFR0+IM0
.1fa5	f5 00		sbc $00,x		sbc 		IM0,x
.1fa7	85 0c		sta $0c			sta 	IFR0+IM0
.1fa9	a5 0d		lda $0d			lda 	IFR0+IM1
.1fab	f5 01		sbc $01,x		sbc 		IM1,x
.1fad	85 0d		sta $0d			sta 	IFR0+IM1
.1faf	a5 0e		lda $0e			lda 	IFR0+IM2
.1fb1	f5 02		sbc $02,x		sbc 		IM2,x
.1fb3	85 0e		sta $0e			sta 	IFR0+IM2
.1fb5	b0 08		bcs $1fbf			bcs 	_IFloatAddExit 				; no borrow so we are done.
.1fb7	a2 0c		ldx #$0c			ldx 	#IFR0
.1fb9	20 8e 25	jsr $258e			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.1fbc	20 86 25	jsr $2586			jsr 	IFloatNegate 				; negate
.1fbf					_IFloatAddExit:
.1fbf	18		clc				clc
.1fc0	60		rts				rts
.1fc1					_IFloatZeroAdd:
.1fc1	fa		plx				plx 								; return this value in R0
.1fc2	20 0c 25	jsr $250c			jsr 	IFloatCopyFromRegister
.1fc5	18		clc				clc
.1fc6	60		rts				rts
.1fc7					_IFloatAddDecimals:
.1fc7	20 74 25	jsr $2574			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.1fca	f0 f3		beq $1fbf			beq 	_IFloatAddExit
.1fcc	20 b2 25	jsr $25b2			jsr 	IFloatNormalise 			; normalise RX
.1fcf	da		phx				phx 								; normalise R0
.1fd0	a2 0c		ldx #$0c			ldx 	#IFR0
.1fd2	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.1fd5	f0 ea		beq $1fc1			beq 	_IFloatZeroAdd
.1fd7	20 b2 25	jsr $25b2			jsr 	IFloatNormalise
.1fda	fa		plx				plx
.1fdb	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.1fdd	29 3f		and #$3f			and 	#IFXMask
.1fdf	38		sec				sec
.1fe0	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.1fe2	85 0a		sta $0a				sta 	iTemp0
.1fe4	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.1fe6	29 3f		and #$3f			and 	#IFXMask
.1fe8	38		sec				sec
.1fe9	e9 20		sbc #$20			sbc 	#$20
.1feb	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.1fed	b0 02		bcs $1ff1			bcs 	_IFloatHaveLarger
.1fef	a5 0a		lda $0a				lda 	iTemp0
.1ff1					_IFloatHaveLarger:
.1ff1	18		clc				clc 								; get the actual one back.
.1ff2	69 20		adc #$20			adc 	#$20 						; shift both to that.
.1ff4	20 01 20	jsr $2001			jsr 	_IFShiftXToA
.1ff7	da		phx				phx
.1ff8	a2 0c		ldx #$0c			ldx 	#IFR0
.1ffa	20 01 20	jsr $2001			jsr 	_IFShiftXToA
.1ffd	fa		plx				plx
.1ffe	4c 79 1f	jmp $1f79			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2001					_IFShiftXToA:
.2001	8d b6 04	sta $04b6			sta 	IFTarget
.2004	20 74 25	jsr $2574			jsr 	IFloatCheckZero 			; check adding zero ?
.2007	f0 11		beq $201a			beq 	_IFSXExit
.2009					_IFSXLoop:
.2009	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.200b	29 3f		and #$3f			and 	#IFXMask
.200d	cd b6 04	cmp $04b6			cmp 	IFTarget
.2010	f0 08		beq $201a			beq 	_IFSXExit
.2012	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.2015	20 d4 25	jsr $25d4			jsr 	IFloatIncExponent
.2018	80 ef		bra $2009			bra 	_IFSXLoop
.201a					_IFSXExit:
.201a	60		rts				rts
.04b6					IFTarget:
>04b6							.fill 	1
.201b					IFloatMultiply:
.201b	8e b6 04	stx $04b6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.201e	20 d6 20	jsr $20d6			jsr 	IFCalculateNewSign
.2021	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2023	05 0f		ora $0f				ora 	IFR0+IExp
.2025	29 3f		and #$3f			and 	#IFXMask
.2027	15 01		ora $01,x			ora 	IM1,x
.2029	05 0d		ora $0d				ora 	IFR0+IM1
.202b	15 02		ora $02,x			ora 	IM2,x
.202d	05 0e		ora $0e				ora 	IFR0+IM2
.202f	d0 0a		bne $203b			bne 	_IFMStandard
.2031	20 57 25	jsr $2557			jsr 	IFloatMultiply8BitRx
.2034	ad b8 04	lda $04b8			lda 	IFNewSign
.2037	85 0f		sta $0f				sta 	IFR0+IExp
.2039	18		clc				clc
.203a	60		rts				rts
.203b					_IFMStandard:
.203b	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.203d	20 cd 20	jsr $20cd			jsr 	IFMSignExtend
.2040	8d b7 04	sta $04b7			sta 	IFNewExponent
.2043	a5 0f		lda $0f				lda 	IFR0+IExp
.2045	20 cd 20	jsr $20cd			jsr 	IFMSignExtend
.2048	18		clc				clc
.2049	6d b7 04	adc $04b7			adc 	IFNewExponent
.204c	8d b7 04	sta $04b7			sta 	IFNewExponent
.204f	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2051	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister
.2054	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.2056	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.2059					_IFMLoop:
.2059	a2 18		ldx #$18			ldx 	#IFRTemp
.205b	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.205e	f0 3a		beq $209a			beq 	_IFMExit
.2060	ae b6 04	ldx $04b6			ldx 	IFTarget 					; look at adder MSB
.2063	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2065	10 03		bpl $206a			bpl	 	_IFMTargetOkay
.2067	20 be 20	jsr $20be			jsr 	_IFMShiftAll
.206a					_IFMTargetOkay:
.206a	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.206c	29 01		and #$01			and 	#1
.206e	f0 16		beq $2086			beq 	_IFMNoAdd
.2070	ae b6 04	ldx $04b6			ldx 	IFTarget 					; add adder
.2073	18		clc				clc
.2074	a5 0c		lda $0c			lda 	IFR0+IM0
.2076	75 00		adc $00,x		adc 		IM0,x
.2078	85 0c		sta $0c			sta 	IFR0+IM0
.207a	a5 0d		lda $0d			lda 	IFR0+IM1
.207c	75 01		adc $01,x		adc 		IM1,x
.207e	85 0d		sta $0d			sta 	IFR0+IM1
.2080	a5 0e		lda $0e			lda 	IFR0+IM2
.2082	75 02		adc $02,x		adc 		IM2,x
.2084	85 0e		sta $0e			sta 	IFR0+IM2
.2086					_IFMNoAdd:
.2086	a5 0e		lda $0e				lda 	IFR0+IM2
.2088	10 03		bpl $208d			bpl 	_IFMResultOkay
.208a	20 be 20	jsr $20be			jsr 	_IFMShiftAll
.208d					_IFMResultOkay:
.208d	a2 18		ldx #$18			ldx 	#IFRTemp
.208f	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.2092	ae b6 04	ldx $04b6			ldx 	IFTarget
.2095	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.2098	80 bf		bra $2059			bra 	_IFMLoop
.209a					_IFMExit:
.209a	ad b7 04	lda $04b7			lda 	IFNewExponent 				; validate new exponent.
.209d	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.209f	90 0f		bcc $20b0			bcc 	_IFMOkay
.20a1	c9 e0		cmp #$e0			cmp 	#$E0
.20a3	b0 0b		bcs $20b0			bcs 	_IFMOkay
.20a5	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.20a7	f0 13		beq $20bc			beq 	_IFMError
.20a9	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.20ab	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.20ae	18		clc				clc
.20af	60		rts				rts
.20b0					_IFMOkay:
.20b0	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.20b2	0d b8 04	ora $04b8			ora 	IFNewSign
.20b5	85 0f		sta $0f				sta 	IFR0+IExp
.20b7	18		clc				clc
.20b8	60		rts				rts
.20b9	4c ff ff	jmp $ffff			jmp 	$FFFF
.20bc					_IFMError:
.20bc	38		sec				sec
.20bd	60		rts				rts
.20be					_IFMShiftAll:
.20be	a2 0c		ldx #$0c			ldx 	#IFR0
.20c0	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.20c3	ae b6 04	ldx $04b6			ldx 	IFTarget
.20c6	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.20c9	ee b7 04	inc $04b7			inc 	IFNewExponent
.20cc	60		rts				rts
.20cd					IFMSignExtend:
.20cd	29 3f		and #$3f			and 	#IFXMask
.20cf	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.20d1	90 02		bcc $20d5			bcc 	_IFMNoSXX
.20d3	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.20d5					_IFMNoSXX:
.20d5	60		rts				rts
.20d6					IFCalculateNewSign:
.20d6	b5 03		lda $03,x			lda 	IExp,x
.20d8	45 0f		eor $0f				eor 	IFR0+IExp
.20da	29 40		and #$40			and 	#IFSign
.20dc	8d b8 04	sta $04b8			sta 	IFNewSign
.20df	60		rts				rts
.04b7					IFNewExponent:
>04b7							.fill 	1
.04b8					IFNewSign:
>04b8							.fill 	1
.20e0					IFloatDivideInteger:
.20e0	20 f9 20	jsr $20f9			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.20e3	b0 06		bcs $20eb			bcs 	_IFDIExit
.20e5	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.20e7	20 0c 25	jsr $250c			jsr 	IFloatCopyFromRegister
.20ea	18		clc				clc
.20eb					_IFDIExit:
.20eb	60		rts				rts
.20ec					IFloatModulusInteger:
.20ec	20 f9 20	jsr $20f9			jsr 	IFloatDivideIntegerCommon
.20ef	b0 07		bcs $20f8			bcs 	_IFMIExit
.20f1	ae b6 04	ldx $04b6			ldx 	IFTarget
.20f4	20 0c 25	jsr $250c			jsr 	IFloatCopyFromRegister
.20f7	18		clc				clc
.20f8					_IFMIExit:
.20f8	60		rts				rts
.20f9					IFloatDivideIntegerCommon:
.20f9	8e b6 04	stx $04b6			stx 	IFTarget  					; this is s1, s0 = R0
.20fc	20 d6 20	jsr $20d6			jsr 	IFCalculateNewSign 			; calculate sign of result
.20ff	20 27 21	jsr $2127			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2102	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.2104	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.2107	f0 1c		beq $2125			beq 	_IFDIDivZero
.2109	ae b6 04	ldx $04b6			ldx 	IFTarget 					; zero Rx (S1)
.210c	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.210f	5a		phy				phy
.2110	a0 18		ldy #$18			ldy 	#24
.2112					_IFDILoop:
.2112	20 38 21	jsr $2138			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2115	20 44 21	jsr $2144			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2118	88		dey				dey
.2119	d0 f7		bne $2112			bne 	_IFDILoop 					; do it 24 times
.211b	7a		ply				ply
.211c	ad b8 04	lda $04b8			lda 	IFNewSign 					; set sign of result.
.211f	29 40		and #$40			and 	#IFSign
.2121	85 1b		sta $1b				sta 	IFRTemp+IExp
.2123	18		clc				clc 								; is okay.
.2124	60		rts				rts
.2125					_IFDIDivZero:
.2125	38		sec				sec
.2126	60		rts				rts
.2127					IFDCopyRXToRTemp:
.2127	b5 00		lda $00,x			lda 	IM0,x
.2129	85 18		sta $18				sta 	IFRTemp+IM0
.212b	b5 01		lda $01,x			lda 	IM1,x
.212d	85 19		sta $19				sta 	IFRTemp+IM1
.212f	b5 02		lda $02,x			lda 	IM2,x
.2131	85 1a		sta $1a				sta 	IFRTemp+IM2
.2133	b5 03		lda $03,x			lda 	IExp,x
.2135	85 1b		sta $1b				sta 	IFRTemp+IExp
.2137	60		rts				rts
.2138					IFDShiftSTempS1Left:
.2138	a2 18		ldx #$18			ldx 	#IFRTemp
.213a	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft
.213d	ae b6 04	ldx $04b6			ldx 	IFTarget
.2140	20 a3 25	jsr $25a3			jsr 	IFloatRotateLeft
.2143	60		rts				rts
.2144					IFDTrySubtract:
.2144	ae b6 04	ldx $04b6			ldx 	IFTarget 					; s1 = Rx
.2147	38		sec				sec 								; subtract, saving the results on the stack.
.2148	b5 00		lda $00,x			lda 	IM0,x
.214a	e5 0c		sbc $0c				sbc 	IFR0+IM0
.214c	48		pha				pha
.214d	b5 01		lda $01,x			lda 	IM1,x
.214f	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2151	48		pha				pha
.2152	b5 02		lda $02,x			lda 	IM2,x
.2154	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2156	b0 03		bcs $215b			bcs 	_IFDCanSubtract
.2158	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2159	68		pla				pla
.215a	60		rts				rts
.215b					_IFDCanSubtract:
.215b	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.215d	68		pla				pla
.215e	95 01		sta $01,x			sta 	IM1,x
.2160	68		pla				pla
.2161	95 00		sta $00,x			sta 	IM0,x
.2163	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2165	d0 06		bne $216d			bne 	_IFDCSExit
.2167	e6 19		inc $19				inc 	IFRTemp+IM1
.2169	d0 02		bne $216d			bne 	_IFDCSExit
.216b	e6 1a		inc $1a				inc 	IFRTemp+IM2
.216d					_IFDCSExit:
.216d	60		rts				rts
.216e					IFloatBitwiseAnd:
.216e	5a		phy				phy
.216f	20 b3 21	jsr $21b3			jsr 	IFPreProcessBitwise 		; set up everything.
.2172	d0 0f		bne $2183			bne 	_IFBAExit
.2174					_IFBALoop:
.2174	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2177	35 00		and $00,x			and 	IM0,x
.2179	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.217c	e8		inx				inx
.217d	c8		iny				iny
.217e	c0 03		cpy #$03			cpy 	#3
.2180	d0 f2		bne $2174			bne 	_IFBALoop
.2182	18		clc				clc
.2183					_IFBAExit:
.2183	7a		ply				ply
.2184	60		rts				rts
.2185					IFloatBitwiseOr:
.2185	5a		phy				phy
.2186	20 b3 21	jsr $21b3			jsr 	IFPreProcessBitwise 		; set up everything.
.2189	d0 0f		bne $219a			bne 	_IFBAExit
.218b					_IFBALoop:
.218b	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.218e	15 00		ora $00,x			ora 	IM0,x
.2190	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2193	e8		inx				inx
.2194	c8		iny				iny
.2195	c0 03		cpy #$03			cpy 	#3
.2197	d0 f2		bne $218b			bne 	_IFBALoop
.2199	18		clc				clc
.219a					_IFBAExit:
.219a	7a		ply				ply
.219b	60		rts				rts
.219c					IFloatBitwiseXor:
.219c	5a		phy				phy
.219d	20 b3 21	jsr $21b3			jsr 	IFPreProcessBitwise 		; set up everything.
.21a0	d0 0f		bne $21b1			bne 	_IFBAExit
.21a2					_IFBALoop:
.21a2	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.21a5	55 00		eor $00,x			eor 	IM0,x
.21a7	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.21aa	e8		inx				inx
.21ab	c8		iny				iny
.21ac	c0 03		cpy #$03			cpy 	#3
.21ae	d0 f2		bne $21a2			bne 	_IFBALoop
.21b0	18		clc				clc
.21b1					_IFBAExit:
.21b1	7a		ply				ply
.21b2	60		rts				rts
.21b3					IFPreProcessBitwise:
.21b3	a0 00		ldy #$00			ldy 	#0 							; set index.
.21b5	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.21b7	15 03		ora $03,x			ora 	IExp,x
.21b9	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.21bb	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.21bd	38		sec				sec 								; carry set just in cases.
.21be	60		rts				rts
.21bf					IFloatAbsoluteR0:
.21bf	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.21c1	29 bf		and #$bf			and 	#IFSign ^ 255
.21c3	85 0f		sta $0f				sta 	IFR0+IExp
.21c5	18		clc				clc
.21c6	60		rts				rts
.21c7					IFloatSquareRootR0:
.21c7	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.21c9	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.21cc	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.21ce	29 40		and #$40			and 	#IFSign
.21d0	d0 2f		bne $2201			bne 	_IFSRFail
.21d2	20 b2 25	jsr $25b2			jsr 	IFloatNormalise 			; it will work better !
.21d5	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.21d7	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister
.21da	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.21dc	20 cd 20	jsr $20cd			jsr 	IFMSignExtend 				; sign extended version of the exponent
.21df	18		clc				clc
.21e0	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.21e2	85 0f		sta $0f				sta 	IFR0+IExp
.21e4	4a		lsr a				lsr 	a 							; which we can halve.
.21e5	38		sec				sec 								; convert back
.21e6	e9 17		sbc #$17			sbc 	#23
.21e8	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.21ea	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.21ec	20 03 22	jsr $2203			jsr 	_IFSRNewton
.21ef	20 03 22	jsr $2203			jsr 	_IFSRNewton
.21f2	20 03 22	jsr $2203			jsr 	_IFSRNewton
.21f5	20 03 22	jsr $2203			jsr 	_IFSRNewton
.21f8	18		clc				clc
.21f9	60		rts				rts
.21fa					_IFSRZero:
.21fa	a2 0c		ldx #$0c			ldx 	#IFR0
.21fc	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.21ff	18		clc				clc
.2200	60		rts				rts
.2201					_IFSRFail:
.2201	38		sec				sec
.2202	60		rts				rts
.2203					_IFSRNewton:
.2203	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.2205	20 ca 24	jsr $24ca			jsr 	IFloatPushRx
.2208	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.220a	20 ca 24	jsr $24ca			jsr 	IFloatPushRx
.220d	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.220f	20 9e 22	jsr $229e			jsr 	IFloatDivideFloat
.2212	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2214	20 eb 24	jsr $24eb			jsr 	IFloatPullRx
.2217	20 71 1f	jsr $1f71			jsr 	IFloatAdd 					; now guess + original/guess
.221a	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.221c	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.221f	a2 10		ldx #$10			ldx 	#IFR1
.2221	20 eb 24	jsr $24eb			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2224	60		rts				rts
.2225					IFloatFractionalR0:
.2225	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2227	29 3f		and #$3f			and 	#IFXMask
.2229	f0 17		beq $2242			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.222b	20 bf 21	jsr $21bf			jsr 	IFloatAbsoluteR0 			; absolute value R9
.222e	a2 0c		ldx #$0c			ldx 	#IFR0
.2230	20 b2 25	jsr $25b2			jsr 	IFloatNormalise 			; normalise R0
.2233	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2235	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister
.2238	20 7b 22	jsr $227b			jsr 	IFloatIntegerR0 			; take integer part of R0
.223b	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.223d	20 6a 1f	jsr $1f6a			jsr 	IFloatSubtract
.2240	80 05		bra $2247			bra 	_FIPExit
.2242					_FIPZero:
.2242	a2 0c		ldx #$0c			ldx 	#IFR0
.2244	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.2247					_FIPExit:
.2247	18		clc				clc
.2248	60		rts				rts
.2249					IFloatCompare:
.2249	20 6a 1f	jsr $1f6a			jsr 	IFloatSubtract 				; subtract R0 from RX.
.224c	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.224e	05 0f		ora $0f				ora 	IFR0+IExp
.2250	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2252	29 3f		and #$3f			and 	#IFXMask
.2254	d0 19		bne $226f			bne 	_IFCNonInteger
.2256	20 74 25	jsr $2574			jsr 	IFloatCheckZero 			; check if zero
.2259	f0 0f		beq $226a			beq 	_IFCZero
.225b					_IFCReturnSign:
.225b	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.225d	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.225f	48		pha				pha
.2260	a9 01		lda #$01			lda 	#1
.2262	20 7d 25	jsr $257d			jsr 	IFloatSetByte 				; return to +1
.2265	68		pla				pla 								; sign bit back
.2266	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2268	18		clc				clc
.2269	60		rts				rts
.226a					_IFCZero:
.226a	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.226d	18		clc				clc
.226e	60		rts				rts
.226f					_IFCNonInteger:
.226f	a5 0c		lda $0c				lda 	IFR0+IM0
.2271	29 00		and #$00			and		#$00
.2273	05 0d		ora $0d				ora 	IFR0+IM1
.2275	05 0e		ora $0e				ora 	IFR0+IM2
.2277	f0 f1		beq $226a			beq 	_IFCZero 					; near enough !
.2279	80 e0		bra $225b			bra 	_IFCReturnSign 				; return the sign of the difference.
.227b					IFloatIntegerR0:
.227b	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.227d	29 3f		and #$3f			and 	#IFXMask
.227f	f0 1b		beq $229c			beq 	_FIPExit 					; if so do nothing
.2281	a2 0c		ldx #$0c			ldx 	#IFR0
.2283	20 b2 25	jsr $25b2			jsr 	IFloatNormalise 			; normalise
.2286	20 74 25	jsr $2574			jsr 	IFloatCheckZero 			; is it zero ?
.2289	f0 0e		beq $2299			beq 	_FIPZero 					; if so return zero.
.228b					_FIPShift:
.228b	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.228d	29 20		and #$20			and 	#$20 						; still -ve
.228f	f0 0b		beq $229c			beq 	_FIPExit
.2291	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight 			; shift mantissa right
.2294	20 d4 25	jsr $25d4			jsr 	IFloatIncExponent 			; bump exponent
.2297	80 f2		bra $228b			bra 	_FIPShift
.2299					_FIPZero:
.2299	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.229c					_FIPExit:
.229c	18		clc				clc
.229d	60		rts				rts
.229e					IFloatDivideFloat:
.229e	8e b6 04	stx $04b6			stx 	IFTarget  					; this is s1, s0 = R0
.22a1	20 d6 20	jsr $20d6			jsr 	IFCalculateNewSign 			; calculate sign of result
.22a4	20 b2 25	jsr $25b2			jsr 	IFloatNormalise 			; normalise RX
.22a7	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.22a9	20 b2 25	jsr $25b2			jsr 	IFloatNormalise
.22ac	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.22af	f0 56		beq $2307			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.22b1	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.22b3	20 cd 20	jsr $20cd			jsr 	IFMSignExtend
.22b6	8d b7 04	sta $04b7			sta 	IFNewExponent
.22b9	ae b6 04	ldx $04b6			ldx 	IFTarget 					; calculate s1.exponent
.22bc	b5 03		lda $03,x			lda 	IExp,x
.22be	20 cd 20	jsr $20cd			jsr 	IFMSignExtend
.22c1	38		sec				sec
.22c2	ed b7 04	sbc $04b7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.22c5	38		sec				sec
.22c6	e9 17		sbc #$17			sbc 	#23
.22c8	8d b7 04	sta $04b7			sta 	IFNewExponent
.22cb	20 09 23	jsr $2309			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.22ce	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.22d0	10 08		bpl $22da			bpl 	_IFDFNoShiftResult
.22d2	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.22d4	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.22d7	ee b7 04	inc $04b7			inc 	IFNewExponent
.22da					_IFDFNoShiftResult:
.22da	ad b7 04	lda $04b7			lda 	IFNewExponent 				; underflow/overflow check.
.22dd	30 06		bmi $22e5			bmi 	_IFDFCheckUnderflow
.22df	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.22e1	b0 24		bcs $2307			bcs 	_IFDFDivZero
.22e3	80 11		bra $22f6			bra		_IFDFExit
.22e5					_IFDFCheckUnderflow:
.22e5	ad b7 04	lda $04b7			lda 	IFNewExponent 				; shift into a legal exponent.
.22e8	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.22ea	b0 0a		bcs $22f6			bcs 	_IFDFExit
.22ec	ee b7 04	inc $04b7			inc 	IFNewExponent
.22ef	a2 18		ldx #$18			ldx 	#IFRTemp
.22f1	20 aa 25	jsr $25aa			jsr 	IFloatShiftRight
.22f4	80 ef		bra $22e5			bra 	_IFDFCheckUnderflow
.22f6					_IFDFExit:
.22f6	ad b7 04	lda $04b7			lda 	IFNewExponent 				; combine exponent and sign.
.22f9	29 3f		and #$3f			and 	#IFXMask
.22fb	0d b8 04	ora $04b8			ora 	IFNewSign
.22fe	85 1b		sta $1b				sta 	IFRTemp+IExp
.2300	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.2302	20 0c 25	jsr $250c			jsr 	IFloatCopyFromRegister
.2305	18		clc				clc
.2306	60		rts				rts
.2307					_IFDFDivZero:
.2307	38		sec				sec
.2308	60		rts				rts
.2309					IFloatDivideSupport:
.2309	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.230b	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.230e	5a		phy				phy 								; main division loop x 23
.230f	a0 17		ldy #$17			ldy 	#23
.2311					_IFDSLoop:
.2311	20 44 21	jsr $2144			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2314	20 38 21	jsr $2138			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2317	88		dey				dey
.2318	d0 f7		bne $2311			bne 	_IFDSLoop 					; do it 24 times
.231a	7a		ply				ply
.231b	60		rts				rts
.231c					IFloatIntegerToStringR0:
.231c	8d b9 04	sta $04b9			sta 	IFBase 						; save base to use.
.231f	20 fc 25	jsr $25fc			jsr 	IFloatBufferReset			; empty buffer
.2322	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2324	29 3f		and #$3f			and 	#IFXMask
.2326	d0 1e		bne $2346			bne 	_IFIFail
.2328	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.232a	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.232d	f0 0e		beq $233d			beq 	_IFINotNegative
.232f	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2331	29 40		and #$40			and 	#IFSign
.2333	f0 08		beq $233d			beq 	_IFINotNegative
.2335	a9 2d		lda #$2d			lda 	#"-"						; output -
.2337	20 0b 26	jsr $260b			jsr 	IFloatBufferWrite
.233a	20 86 25	jsr $2586			jsr 	IFloatNegate 				; tidy up !
.233d					_IFINotNegative:
.233d	20 48 23	jsr $2348			jsr 	_IFIRecursiveConvert 		; start converting
.2340	20 03 26	jsr $2603			jsr 	IFloatGetBufferAddress
.2343	18		clc				clc
.2344	80 01		bra $2347			bra 	_IFIExit
.2346					_IFIFail:
.2346	38		sec				sec
.2347					_IFIExit:
.2347	60		rts				rts
.2348					_IFIRecursiveConvert:
.2348	a2 10		ldx #$10			ldx 	#IFR1
.234a	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister 		; R0->R1
.234d	a2 0c		ldx #$0c			ldx 	#IFR0
.234f	ad b9 04	lda $04b9			lda 	IFBase 						; Base -> R0
.2352	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.2355	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2357	20 e0 20	jsr $20e0			jsr 	IFloatDivideInteger
.235a	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.235c	20 74 25	jsr $2574			jsr 	IFloatCheckZero
.235f	f0 09		beq $236a			beq 	_IFIOutDigit
.2361	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2363	48		pha				pha
.2364	20 48 23	jsr $2348			jsr 	_IFIRecursiveConvert 		; convert the divider
.2367	68		pla				pla
.2368	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.236a					_IFIOutDigit:
.236a	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.236c	c9 0a		cmp #$0a			cmp	 	#10
.236e	90 02		bcc $2372			bcc 	_IFINotHex
.2370	69 06		adc #$06			adc 	#6
.2372					_IFINotHex:
.2372	69 30		adc #$30			adc 	#48
.2374	20 0b 26	jsr $260b			jsr 	IFloatBufferWrite
.2377	60		rts				rts
.04b9					IFBase:
>04b9							.fill 	1
.2378					IFloatFloatToStringR0:
.2378	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.237a	20 ca 24	jsr $24ca			jsr 	IFloatPushRx
.237d	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister
.2380	20 7b 22	jsr $227b			jsr 	IFloatIntegerR0				; make R0 integer
.2383	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2385	20 1c 23	jsr $231c			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2388	9c ba 04	stz $04ba			stz 	IFloatDecimalCount 			; zero the decimal count.
.238b	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.238d	29 3f		and #$3f			and 	#IFXMask
.238f	f0 44		beq $23d5			beq 	_IFFSExit
.2391					_IFloatFracLoop:
.2391	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2393	20 0c 25	jsr $250c			jsr 	IFloatCopyFromRegister
.2396	20 25 22	jsr $2225			jsr 	IFloatFractionalR0
.2399	20 b2 25	jsr $25b2			jsr 	IFloatNormalise
.239c	a2 14		ldx #$14			ldx 	#IFR2
.239e	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister 		; copy to R2
.23a1	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.23a3	a9 0a		lda #$0a			lda 	#10
.23a5	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.23a8	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.23aa	20 1b 20	jsr $201b			jsr 	IFloatMultiply
.23ad	a2 14		ldx #$14			ldx 	#IFR2
.23af	20 1d 25	jsr $251d			jsr 	IFloatCopyToRegister
.23b2	20 7b 22	jsr $227b			jsr 	IFloatIntegerR0 			; get integer part of R0
.23b5	ad ba 04	lda $04ba			lda 	IFloatDecimalCount 			; done 5 dp, no more
.23b8	c9 03		cmp #$03			cmp 	#3
.23ba	f0 16		beq $23d2			beq 	_IFFSExitStripZero
.23bc	ad ba 04	lda $04ba			lda 	IFloatDecimalCount 			; written the DP yet ?
.23bf	d0 05		bne $23c6			bne 	_IFloatNotFirst
.23c1	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.23c3	20 0b 26	jsr $260b			jsr 	IFloatBufferWrite
.23c6					_IFloatNotFirst:
.23c6	ee ba 04	inc $04ba			inc 	IFloatDecimalCount
.23c9	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.23cb	09 30		ora #$30			ora 	#"0"						; ASCII
.23cd	20 0b 26	jsr $260b			jsr 	IFloatBufferWrite 			; write to the buffer.
.23d0	80 bf		bra $2391			bra 	_IFloatFracLoop
.23d2					_IFFSExitStripZero:
.23d2	20 1a 26	jsr $261a			jsr 	IFloatStripTrailingZeros
.23d5					_IFFSExit:
.23d5	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.23d7	20 eb 24	jsr $24eb			jsr 	IFloatPullRx
.23da	20 03 26	jsr $2603			jsr 	IFloatGetBufferAddress
.23dd	18		clc				clc
.23de	60		rts				rts
.04ba					IFloatDecimalCount:
>04ba							.fill 	1
.23df					IFloatStringToFloatR0:
.23df	8d bb 04	sta $04bb			sta 	IFCount 					; save it out.
.23e2	86 0a		stx $0a				stx 	iTemp0
.23e4	84 0b		sty $0b				sty 	iTemp0+1
.23e6	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.23e8	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.23eb	9c bc 04	stz $04bc			stz 	IFSignFlag 					; clear the sign flag
.23ee	20 7b 24	jsr $247b			jsr 	IFSTFGetNext 				; get first
.23f1	f0 1b		beq $240e			beq 	_IFSTFFail 					; no character
.23f3	90 10		bcc $2405			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.23f5	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.23f7	d0 15		bne $240e			bne 	_IFSTFFail
.23f9	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.23fb	8d bc 04	sta $04bc			sta 	IFSignFlag
.23fe					_IFSTFLoop:
.23fe	20 7b 24	jsr $247b			jsr 	IFSTFGetNext 				; get next
.2401	b0 0b		bcs $240e			bcs 	_IFSTFFail 					; bad character.
.2403	f0 11		beq $2416			beq 	_IFSTFExit 					; end of data
.2405					_IFSTFHaveChar:
.2405	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2407	f0 08		beq $2411			beq 	_IFSTFDecimal
.2409	20 9f 24	jsr $249f			jsr 	IFSTFAddR0 					; add number in
.240c	80 f0		bra $23fe			bra 	_IFSTFLoop 					; keep going until . or end.
.240e					_IFSTFFail:
.240e	38		sec				sec
.240f	80 0d		bra $241e			bra 	_IFSTFReturn
.2411					_IFSTFDecimal:
.2411	20 26 24	jsr $2426			jsr 	IFSTFDecimal 				; call the decimal places code.
.2414	b0 08		bcs $241e			bcs 	_IFSTFReturn 				; error
.2416					_IFSTFExit:
.2416	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2418	0d bc 04	ora $04bc			ora 	IFSignFlag
.241b	85 0f		sta $0f				sta 	IFR0+IExp
.241d	18		clc				clc
.241e					_IFSTFReturn:
.241e	60		rts				rts
.241f					IFloatAddDecimalToR0:
.241f	8d bb 04	sta $04bb			sta 	IFCount 					; save it out.
.2422	86 0a		stx $0a				stx 	iTemp0
.2424	84 0b		sty $0b				sty 	iTemp0+1
.2426					IFSTFDecimal:
.2426	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2428	20 ca 24	jsr $24ca			jsr 	IFloatPushRx
.242b	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.242d	20 7b 25	jsr $257b			jsr 	IFloatSetZero
.2430	9c bd 04	stz $04bd			stz 	IFDecimalPlaces
.2433					_IFSTDLoop:
.2433	20 7b 24	jsr $247b			jsr 	IFSTFGetNext 				; get next
.2436	b0 41		bcs $2479			bcs 	_IFSTFFail2 				; bad character.
.2438	f0 11		beq $244b			beq 	_IFSTFComplete 				; end of data, work out the result.
.243a	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.243c	f0 39		beq $2477			beq 	_IFSTFExit2
.243e	20 9f 24	jsr $249f			jsr 	IFSTFAddR0 					; add number in
.2441	ee bd 04	inc $04bd			inc 	IFDecimalPlaces 			; count decimals
.2444	ad bd 04	lda $04bd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2447	c9 03		cmp #$03			cmp 	#3
.2449	90 e8		bcc $2433			bcc 	_IFSTDLoop
.244b					_IFSTFComplete:
.244b	ad bd 04	lda $04bd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.244e	f0 27		beq $2477			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2450	3a		dec a				dec 	a 							; table indexed from 1.
.2451	0a		asl a				asl 	a
.2452	0a		asl a				asl 	a
.2453	aa		tax				tax
.2454	bd b6 24	lda $24b6,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2457	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2459	bd b7 24	lda $24b7,x			lda 	TableTen+1,x
.245c	85 11		sta $11				sta  	IFR1+IM1
.245e	bd b8 24	lda $24b8,x			lda 	TableTen+2,x
.2461	85 12		sta $12				sta  	IFR1+IM2
.2463	bd b9 24	lda $24b9,x			lda 	TableTen+3,x
.2466	85 13		sta $13				sta  	IFR1+IExp
.2468	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.246a	20 1b 20	jsr $201b			jsr 	IFloatMultiply
.246d	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.246f	20 eb 24	jsr $24eb			jsr 	IFloatPullRx
.2472	a2 10		ldx #$10			ldx 	#IFR1
.2474	20 71 1f	jsr $1f71			jsr 	IFloatAdd
.2477					_IFSTFExit2:
.2477	18		clc				clc
.2478	60		rts				rts
.2479					_IFSTFFail2:
.2479	38		sec				sec
.247a	60		rts				rts
.247b					IFSTFGetNext:
.247b	ad bb 04	lda $04bb			lda 	IFCount  					; if count is zero, return with Z set.
.247e	f0 19		beq $2499			beq 	_IFSTFReturnOk
.2480	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2482	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2484	d0 02		bne $2488			bne 	_IFSTFGNNoCarry
.2486	e6 0b		inc $0b				inc 	iTemp0+1
.2488					_IFSTFGNNoCarry:
.2488	ce bb 04	dec $04bb			dec 	IFCount 					; dec count.
.248b	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.248d	f0 08		beq $2497			beq 	_IFSTFGOkay
.248f	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2491	90 08		bcc $249b			bcc 	_IFSTFGFail
.2493	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2495	b0 04		bcs $249b			bcs 	_IFSTFGFail
.2497					_IFSTFGOkay:
.2497	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2499					_IFSTFReturnOk:
.2499	18		clc				clc
.249a	60		rts				rts
.249b					_IFSTFGFail:
.249b	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.249d	38		sec				sec
.249e	60		rts				rts
.249f					IFSTFAddR0:
.249f	29 0f		and #$0f			and 	#15 						; to int value
.24a1	48		pha				pha 								; save it.
.24a2	a9 0a		lda #$0a			lda 	#10
.24a4	a2 10		ldx #$10			ldx 	#IFR1
.24a6	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.24a9	20 1b 20	jsr $201b			jsr 	IFloatMultiply
.24ac	68		pla				pla
.24ad	a2 10		ldx #$10			ldx 	#IFR1
.24af	20 7d 25	jsr $257d			jsr 	IFloatSetByte
.24b2	20 71 1f	jsr $1f71			jsr 	IFloatAdd
.24b5	60		rts				rts
.04bb					IFCount:
>04bb							.fill 	1
.04bc					IFSignFlag:
>04bc							.fill 	1
.04bd					IFDecimalPlaces:
>04bd							.fill 	1
.24b6					TableTen:
>24b6	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>24ba	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>24be	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>24c2	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>24c6	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.24ca					IFloatPushRx:
.24ca	5a		phy				phy
.24cb	ac be 04	ldy $04be			ldy 	IFStackIndex
.24ce	b5 00		lda $00,x			lda 	IM0,x
.24d0	99 bf 04	sta $04bf,y			sta 	IFStack,y
.24d3	b5 01		lda $01,x			lda 	IM1,x
.24d5	99 c0 04	sta $04c0,y			sta 	IFStack+1,y
.24d8	b5 02		lda $02,x			lda 	IM2,x
.24da	99 c1 04	sta $04c1,y			sta 	IFStack+2,y
.24dd	b5 03		lda $03,x			lda 	IExp,x
.24df	99 c2 04	sta $04c2,y			sta 	IFStack+3,y
.24e2	c8		iny				iny
.24e3	c8		iny				iny
.24e4	c8		iny				iny
.24e5	c8		iny				iny
.24e6	8c be 04	sty $04be			sty 	IFStackIndex
.24e9	7a		ply				ply
.24ea	60		rts				rts
.24eb					IFloatPullRx:
.24eb	5a		phy				phy
.24ec	ac be 04	ldy $04be			ldy 	IFStackIndex
.24ef	88		dey				dey
.24f0	88		dey				dey
.24f1	88		dey				dey
.24f2	88		dey				dey
.24f3	b9 bf 04	lda $04bf,y			lda 	IFStack,y
.24f6	95 00		sta $00,x			sta 	IM0,x
.24f8	b9 c0 04	lda $04c0,y			lda 	IFStack+1,y
.24fb	95 01		sta $01,x			sta 	IM1,x
.24fd	b9 c1 04	lda $04c1,y			lda 	IFStack+2,y
.2500	95 02		sta $02,x			sta 	IM2,x
.2502	b9 c2 04	lda $04c2,y			lda 	IFStack+3,y
.2505	95 03		sta $03,x			sta 	IExp,x
.2507	8c be 04	sty $04be			sty 	IFStackIndex
.250a	7a		ply				ply
.250b	60		rts				rts
.04be					IFStackIndex:
>04be							.fill 	1
.04bf					IFStack:
>04bf							.fill 	16*4
.250c					IFloatCopyFromRegister:
.250c	b5 00		lda $00,x			lda 	0,x
.250e	85 0c		sta $0c				sta 	IFR0
.2510	b5 01		lda $01,x			lda 	1,x
.2512	85 0d		sta $0d				sta 	IFR0+1
.2514	b5 02		lda $02,x			lda 	2,x
.2516	85 0e		sta $0e				sta 	IFR0+2
.2518	b5 03		lda $03,x			lda 	3,x
.251a	85 0f		sta $0f				sta 	IFR0+3
.251c	60		rts				rts
.251d					IFloatCopyToRegister:
.251d	a5 0c		lda $0c				lda 	IFR0
.251f	95 00		sta $00,x			sta 	0,x
.2521	a5 0d		lda $0d				lda 	IFR0+1
.2523	95 01		sta $01,x			sta 	1,x
.2525	a5 0e		lda $0e				lda 	IFR0+2
.2527	95 02		sta $02,x			sta 	2,x
.2529	a5 0f		lda $0f				lda 	IFR0+3
.252b	95 03		sta $03,x			sta 	3,x
.252d	60		rts				rts
.252e					IFloatLoadInline:
.252e	68		pla				pla 								; pop address off to iTemp0
.252f	85 0a		sta $0a				sta 	iTemp0
.2531	68		pla				pla
.2532	85 0b		sta $0b				sta 	iTemp0+1
.2534	a0 01		ldy #$01			ldy 	#1
.2536	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2538	95 00		sta $00,x			sta 	0,x
.253a	c8		iny				iny
.253b	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.253d	95 01		sta $01,x			sta 	1,x
.253f	c8		iny				iny
.2540	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2542	95 02		sta $02,x			sta 	2,x
.2544	c8		iny				iny
.2545	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2547	95 03		sta $03,x			sta 	3,x
.2549	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.254a	a5 0a		lda $0a				lda 	iTemp0
.254c	69 05		adc #$05			adc 	#5
.254e	85 0a		sta $0a				sta 	iTemp0
.2550	90 02		bcc $2554			bcc 	_IFLINoCarry
.2552	e6 0b		inc $0b				inc 	iTemp0+1
.2554					_IFLINoCarry:
.2554	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2557					IFloatMultiply8BitRx:
.2557	5a		phy		        phy
.2558	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.255a	a4 0c		ldy $0c		        ldy     IFR0+IM0
.255c	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.255d	85 0c		sta $0c		        sta     IFR0+IM0
.255f	84 0d		sty $0d		        sty     IFR0+IM1
.2561	a9 00		lda #$00	        lda     #0
.2563	a0 08		ldy #$08	        ldy     #8
.2565					_IFMLoop:
.2565	90 03		bcc $256a	        bcc     _IFMNoAdd
.2567	18		clc		        clc
.2568	65 0d		adc $0d		        adc     IFR0+IM1
.256a					_IFMNoAdd:
.256a	6a		ror a		        ror     a
.256b	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.256d	88		dey		        dey
.256e	d0 f5		bne $2565	        bne     _IFMLoop
.2570	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2572	7a		ply		        ply
.2573	60		rts		        rts
.2574					IFloatCheckZero:
.2574	b5 00		lda $00,x			lda 	IM0,x
.2576	15 01		ora $01,x			ora 	IM1,x
.2578	15 02		ora $02,x			ora 	IM2,x
.257a	60		rts				rts
.257b					IFloatSetZero:
.257b	a9 00		lda #$00			lda 	#0
.257d					IFloatSetByte:
.257d	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.257f	74 01		stz $01,x			stz 	IM1,x
.2581	74 02		stz $02,x			stz 	IM2,x
.2583	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2585	60		rts				rts
.2586					IFloatNegate:
.2586	b5 03		lda $03,x			lda 	IExp,x
.2588	49 40		eor #$40			eor 	#IFSign
.258a	95 03		sta $03,x			sta 	IExp,x
.258c	18		clc				clc
.258d	60		rts				rts
.258e					IFloatMantissaNegate:
.258e	38		sec				sec
.258f	a9 00		lda #$00			lda 	#0
.2591	f5 00		sbc $00,x			sbc 	IM0,x
.2593	95 00		sta $00,x			sta 	IM0,x
.2595	a9 00		lda #$00			lda 	#0
.2597	f5 01		sbc $01,x			sbc 	IM1,x
.2599	95 01		sta $01,x			sta 	IM1,x
.259b	a9 00		lda #$00			lda 	#0
.259d	f5 02		sbc $02,x			sbc 	IM2,x
.259f	95 02		sta $02,x			sta 	IM2,x
.25a1	60		rts				rts
.25a2					IFloatShiftLeft:
.25a2	18		clc				clc
.25a3					IFloatRotateLeft:
.25a3	36 00		rol $00,x			rol 	IM0,x
.25a5	36 01		rol $01,x			rol 	IM1,x
.25a7	36 02		rol $02,x			rol 	IM2,x
.25a9	60		rts				rts
.25aa					IFloatShiftRight:
.25aa	18		clc				clc
.25ab					IFloatRotateRight:
.25ab	76 02		ror $02,x			ror 	IM2,x
.25ad	76 01		ror $01,x			ror 	IM1,x
.25af	76 00		ror $00,x			ror 	IM0,x
.25b1	60		rts				rts
.25b2					IFloatNormalise:
.25b2	20 74 25	jsr $2574			jsr 	IFloatCheckZero 			; is it zero
.25b5	f0 18		beq $25cf			beq 	_IFNExitZero 				; if so exit
.25b7					_IFNLoop:
.25b7	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.25b9	29 c0		and #$c0			and 	#$C0
.25bb	c9 40		cmp #$40			cmp 	#$40
.25bd	f0 13		beq $25d2			beq 	_IFNExitOkay 				; if so , then we are done.
.25bf	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.25c1	29 3f		and #$3f			and 	#$3F
.25c3	c9 20		cmp #$20			cmp 	#$20
.25c5	f0 0b		beq $25d2			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.25c7	20 e8 25	jsr $25e8			jsr 	IFloatDecExponent
.25ca	20 a2 25	jsr $25a2			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.25cd	80 e8		bra $25b7			bra 	_IFNLoop
.25cf					_IFNExitZero:
.25cf	20 7b 25	jsr $257b			jsr 	IFloatSetZero 				; set the result to zero
.25d2					_IFNExitOkay:
.25d2	18		clc				clc  								; return with CC.
.25d3	60		rts				rts
.25d4					IFloatIncExponent:
.25d4	b5 03		lda $03,x			lda 	IExp,x
.25d6	48		pha				pha
.25d7	29 c0		and #$c0			and 	#$C0
.25d9	8d ff 04	sta $04ff			sta 	IFXTemp
.25dc	68		pla				pla
.25dd	1a		inc a				inc 	a
.25de	29 3f		and #$3f			and 	#$3F
.25e0	48		pha				pha
.25e1	0d ff 04	ora $04ff			ora 	IFXTemp
.25e4	95 03		sta $03,x			sta 	IExp,x
.25e6	68		pla				pla
.25e7	60		rts				rts
.25e8					IFloatDecExponent:
.25e8	b5 03		lda $03,x			lda 	IExp,x
.25ea	48		pha				pha
.25eb	29 c0		and #$c0			and 	#$C0
.25ed	8d ff 04	sta $04ff			sta 	IFXTemp
.25f0	68		pla				pla
.25f1	3a		dec a				dec 	a
.25f2	29 3f		and #$3f			and 	#$3F
.25f4	48		pha				pha
.25f5	0d ff 04	ora $04ff			ora 	IFXTemp
.25f8	95 03		sta $03,x			sta 	IExp,x
.25fa	68		pla				pla
.25fb	60		rts				rts
.04ff					IFXTemp:
>04ff							.fill 	1
.25fc					IFloatBufferReset:
.25fc	9c 00 05	stz $0500			stz 	IFBufferCount
.25ff	9c 01 05	stz $0501			stz 	IFBuffer
.2602	60		rts				rts
.2603					IFloatGetBufferAddress:
.2603	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2605	a2 01		ldx #$01			ldx 	#(IFBuffer & $FF)
.2607	ad 00 05	lda $0500			lda 	IFBufferCount
.260a	60		rts				rts
.260b					IFloatBufferWrite:
.260b	da		phx				phx
.260c	ae 00 05	ldx $0500			ldx 	IFBufferCount
.260f	9d 01 05	sta $0501,x			sta 	IFBuffer,x
.2612	9e 02 05	stz $0502,x			stz 	IFBuffer+1,x
.2615	ee 00 05	inc $0500			inc 	IFBufferCount
.2618	fa		plx				plx
.2619	60		rts				rts
.261a					IFloatStripTrailingZeros:
.261a	ae 00 05	ldx $0500			ldx 	IFBufferCount
.261d	bd 00 05	lda $0500,x			lda 	IFBuffer-1,x
.2620	c9 30		cmp #$30			cmp		#"0"
.2622	d0 0f		bne $2633			bne 	_IFSTExit
.2624	bd ff 04	lda $04ff,x			lda 	IFBuffer-2,x
.2627	c9 2e		cmp #$2e			cmp 	#"."
.2629	f0 08		beq $2633			beq 	_IFSTExit
.262b	ce 00 05	dec $0500			dec 	IFBufferCount
.262e	9e 00 05	stz $0500,x			stz 	IFBuffer-1,x
.2631	80 e7		bra $261a			bra 	IFloatStripTrailingZeros
.2633					_IFSTExit:
.2633	60		rts				rts
.0500					IFBufferCount:
>0500							.fill 	1
.0501					IFBuffer:
>0501							.fill 	25
.2634					IFloatCheck:
.2634	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2636	09 40		ora #$40			ora 	#IFSign
.2638	85 0f		sta $0f				sta 	IFR0+IExp
.263a	20 71 1f	jsr $1f71			jsr 	IFloatAdd 					; add allowed to error.
.263d	a2 0c		ldx #$0c			ldx 	#IFR0
.263f	20 74 25	jsr $2574			jsr 	IFloatCheckZero 			; error if < 0
.2642	f0 06		beq $264a			beq 	_IFAOkay
.2644	a5 0f		lda $0f				lda 	IFR0+IExp
.2646	29 40		and #$40			and 	#IFSign
.2648	d0 01		bne $264b			bne 	_IFAFail
.264a					_IFAOkay:
.264a	60		rts				rts
.264b					_IFAFail:
.264b	38		sec				sec
.264c	68		pla				pla 								; get address - 2
.264d	e9 02		sbc #$02			sbc 	#2
.264f	aa		tax				tax
.2650	68		pla				pla
.2651	e9 00		sbc #$00			sbc 	#0
.2653	a8		tay				tay
.2654	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2656					_IFAStop:
>2656	db						.byte 	$DB 						; display an error AA ADR ADR
.2657	80 fd		bra $2656			bra 	_IFAStop

;******  Return to file: basic.asm

.2659					NotImplemented:
.2659	a9 ff		lda #$ff			lda 	#$FF
.265b	80 04		bra $2661			bra 	EnterDbg
.265d					ErrorHandler:
.265d	fa		plx				plx
.265e	7a		ply				ply
.265f	a9 ee		lda #$ee			lda 	#$EE
.2661					EnterDbg:
>2661	db						.byte 	$DB
.2662	4c 61 26	jmp $2661			jmp 	EnterDbg

;******  End of listing
