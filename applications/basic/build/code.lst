
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3400" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Fri Jun  9 18:43:48 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3400					BASICCODE=$3400
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 34		ldx #$34			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 70 1e	jsr $1e70			jsr 	PGMSetBaseAddress
.1007	20 af 29	jsr $29af			jsr 	IFInitialise 				; setup math library
.100a	4c d5 13	jmp $13d5			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$aa					PR_READ = $aa
=$ab					PR_DATA = $ab
=$ac					PR_RESTORE = $ac
=$ac					PR_STANDARD_LAST = $ac
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 43 16	jsr $1643			jsr 	EXPEvalNumber
.1010	a2 08		ldx #$08			ldx 	#IFR0
.1012	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c d5 24	jmp $24d5		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 35		cmp #$35			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c 6f 25	jmp $256f		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 83 1e	jsr $1e83			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 4e 29	jsr $294e			jsr 	VARClearHashTables
.1049	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104c	20 8b 26	jsr $268b			jsr 	StackReset
.104f	20 ea 26	jsr $26ea			jsr 	StringSystemInitialise
.1052	20 ea 23	jsr $23ea			jsr 	ScanProcedures
.1055	20 eb 13	jsr $13eb			jsr 	Command_RESTORE
.1058	60		rts				rts
.1059					AllocateMemory:
.1059	5a		phy				phy 								; save Y
.105a	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.105c	5a		phy				phy
.105d	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105f	5a		phy				phy
.1060	a8		tay				tay 								; count is now in XY
.1061					_AllocateLoop:
.1061	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1063	d0 04		bne $1069			bne 	_AllocateOne
.1065	c0 00		cpy #$00			cpy 	#0
.1067	f0 15		beq $107e			beq 	_AllocateExit
.1069					_AllocateOne:
.1069	a9 00		lda #$00			lda 	#0 							; zero byte
.106b	92 28		sta ($28)			sta 	(freeMemory)
.106d	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106f	d0 05		bne $1076			bne 	_AllocateSkipCarry
.1071	e6 29		inc $29				inc 	freeMemory+1
.1073	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.1076					_AllocateSkipCarry:
.1076	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1078	d0 01		bne $107b			bne 	_AllocateSkipBorrow
.107a	ca		dex				dex
.107b					_AllocateSkipBorrow:
.107b	88		dey				dey
.107c	80 e3		bra $1061			bra 	_AllocateLoop
.107e					_AllocateExit:
.107e	fa		plx				plx 								; restore address
.107f	68		pla				pla
.1080	7a		ply				ply 								; restore Y
.1081	60		rts				rts
.1082					ClearCheckMemory:
.1082	a5 29		lda $29				lda 	freeMemory+1
.1084	1a		inc a				inc 	a
.1085	1a		inc a				inc 	a
.1086	cd 23 06	cmp $0623			cmp 	stringMemory+1
.1089	b0 01		bcs $108c			bcs  	_CCMError
.108b	60		rts				rts
.108c					_CCMError:
.108c	4c 6f 25	jmp $256f		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108f					CommandDIM:
.108f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1091	29 c0		and #$c0			and 	#$C0
.1093	c9 40		cmp #$40			cmp 	#$40
.1095	d0 39		bne $10d0			bne 	_CDSyntax
.1097	20 05 29	jsr $2905			jsr 	VARGetInfo 					; get information
.109a	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.109d	29 02		and #$02			and 	#2
.109f	f0 2f		beq $10d0			beq 	_CDSyntax
.10a1	20 b7 28	jsr $28b7			jsr 	VARFind 					; does it already exist
.10a4	b0 2d		bcs $10d3			bcs 	_CDExists
.10a6	20 63 28	jsr $2863			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a9	da		phx				phx 								; save target address
.10aa	48		pha				pha
.10ab	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10ae	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b0	20 d6 10	jsr $10d6			jsr 	CreateArray 				; create array to XA
.10b3	84 24		sty $24				sty 	zTemp1 						; save Y
.10b5	7a		ply				ply 								; restore target to zTemp0
.10b6	84 22		sty $22				sty 	zTemp0
.10b8	7a		ply				ply
.10b9	84 23		sty $23				sty 	zTemp0+1
.10bb	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10bd	a0 01		ldy #$01			ldy 	#1
.10bf	8a		txa				txa
.10c0	91 22		sta ($22),y			sta 	(zTemp0),y
.10c2	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c4	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 				; check )
.10c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c9	c8		iny				iny
.10ca	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cc	f0 c1		beq $108f			beq 	CommandDIM
.10ce	88		dey				dey
.10cf	60		rts				rts
.10d0					_CDSyntax:
.10d0	4c 7f 24	jmp $247f		jmp	ErrorV_syntax
.10d3					_CDExists:
.10d3	4c 47 25	jmp $2547		jmp	ErrorV_redefine
.10d6					CreateArray:
.10d6	8d 03 05	sta $0503			sta 	CAType						; save type
.10d9	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	f0 04		beq $10e6			beq 	_CATwoDimensions
.10e2	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e5	60		rts				rts
.10e6					_CATwoDimensions:
.10e6	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e8	8d 05 05	sta $0505			sta 	CADim1+1
.10eb	a5 08		lda $08				lda 	IFR0+IM0
.10ed	8d 04 05	sta $0504			sta 	CADim1+0
.10f0	20 24 26	jsr $2624			jsr 	ERRCheckComma 				; check comma
.10f3	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f6	5a		phy				phy 								; save Y position
.10f7	18		clc				clc 								; allocate the outer array of pointers.
.10f8	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fb	ad 04 05	lda $0504			lda 	CADim1
.10fe	20 71 11	jsr $1171			jsr 	CSAAllocate 				; allocate the outer array
.1101	da		phx				phx									; save this address on the stack
.1102	48		pha				pha
.1103	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1105	85 26		sta $26				sta 	zTemp2
.1107					_CACreateSubLoop:
.1107	38		sec				sec
.1108	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create data array of required size.
.110b	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110d	91 26		sta ($26),y			sta 	(zTemp2),y
.110f	8a		txa				txa
.1110	c8		iny				iny
.1111	91 26		sta ($26),y			sta 	(zTemp2),y
.1113	18		clc				clc  								; next slot.
.1114	a5 26		lda $26				lda 	zTemp2
.1116	69 02		adc #$02			adc 	#2
.1118	85 26		sta $26				sta 	zTemp2
.111a	90 02		bcc $111e			bcc 	_CACNoCarry
.111c	e6 27		inc $27				inc 	zTemp2+1
.111e					_CACNoCarry:
.111e	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1121	d0 03		bne $1126			bne 	_CACNoBorrow
.1123	ce 05 05	dec $0505			dec 	CADim1+1
.1126					_CACNoBorrow:
.1126	ce 04 05	dec $0504			dec 	CADim1
.1129	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112c	10 d9		bpl $1107			bpl 	_CACreateSubLoop
.112e	68		pla				pla
.112f	fa		plx				plx
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					CreateSingleArray:
.1132	5a		phy				phy
.1133	38		sec				sec 								; allocate memory block all zeros.
.1134	a5 08		lda $08				lda 	IFR0+IM0
.1136	a6 09		ldx $09				ldx 	IFR0+IM1
.1138	20 71 11	jsr $1171			jsr 	CSAAllocate
.113b	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113e	f0 2f		beq $116f			beq 	_CSANoInit
.1140	da		phx				phx 								; save address of new array
.1141	48		pha				pha
.1142	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1144	86 23		stx $23				stx 	zTemp0+1
.1146	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1148	b1 22		lda ($22),y			lda 	(zTemp0),y
.114a	a8		tay				tay
.114b	b2 22		lda ($22)			lda 	(zTemp0)
.114d	aa		tax				tax
.114e					_CSAEraseString:
.114e	5a		phy				phy
.114f	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1151	a9 80		lda #$80			lda 	#$80
.1153	91 22		sta ($22),y			sta 	(zTemp0),y
.1155	7a		ply				ply
.1156	18		clc				clc 								; add 4 to next slot.
.1157	a5 22		lda $22				lda 	zTemp0
.1159	69 04		adc #$04			adc 	#4
.115b	85 22		sta $22				sta 	zTemp0
.115d	90 02		bcc $1161			bcc 	_CSAENoCarry
.115f	e6 23		inc $23				inc 	zTemp0+1
.1161					_CSAENoCarry:
.1161	e0 00		cpx #$00			cpx 	#0
.1163	d0 01		bne $1166			bne 	_CSANoBorrow
.1165	88		dey				dey
.1166					_CSANoBorrow:
.1166	ca		dex				dex
.1167	d0 e5		bne $114e			bne 	_CSAEraseString
.1169	c0 00		cpy #$00			cpy 	#0
.116b	d0 e1		bne $114e			bne 	_CSAEraseString
.116d	68		pla				pla
.116e	fa		plx				plx
.116f					_CSANoInit:
.116f	7a		ply				ply
.1170	60		rts				rts
.1171					CSAAllocate:
.1171	08		php				php 								; save type flag.
.1172	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1173	d0 01		bne $1176			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1175	e8		inx				inx
.1176					_CSAANoCarry:
.1176	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1178	b0 2e		bcs $11a8			bcs 	_CSARange
.117a	28		plp				plp 								; restore type flag
.117b	08		php				php 								; save it back again.
.117c	da		phx				phx 								; save size.
.117d	48		pha				pha
.117e	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1180	90 03		bcc $1185			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185					_CSAATimes2:
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188	18		clc				clc
.1189	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118b	90 02		bcc $118f			bcc 	_CSAANoCarry2
.118d	e6 23		inc $23				inc 	zTemp0+1
.118f					_CSAANoCarry2:
.118f	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1191	20 59 10	jsr $1059			jsr 	AllocateMemory 				; allocate memory to XA
.1194	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1196	85 22		sta $22				sta 	zTemp0
.1198	68		pla				pla  								; write element count to first 2 bytes
.1199	92 22		sta ($22)			sta 	(zTemp0)
.119b	68		pla				pla 								; msb of element count
.119c	28		plp				plp 								; CC if pointer array
.119d	b0 02		bcs $11a1			bcs 	_CSAAIsData
.119f	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a1					_CSAAIsData:
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 22		sta ($22),y			sta 	(zTemp0),y
.11a5	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a7	60		rts				rts
.11a8					_CSARange:
.11a8	4c 90 24	jmp $2490		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ab					Command_Doke:
.11ab	38		sec				sec
.11ac	80 01		bra $11af			bra 	DPCommon
.11ae					Command_Poke:
.11ae	18		clc				clc
.11af					DPCommon:
.11af	08		php				php 								; CS if DOKE
.11b0	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; address
.11b3	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b5	48		pha				pha
.11b6	a5 09		lda $09				lda 	IFR0+IM1
.11b8	48		pha				pha
.11b9	20 24 26	jsr $2624			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bc	20 55 16	jsr $1655			jsr 	EXPEvalInteger16
.11bf	68		pla				pla 								; get address back
.11c0	85 23		sta $23				sta 	zTemp0+1
.11c2	68		pla				pla
.11c3	85 22		sta $22				sta 	zTemp0
.11c5	a5 08		lda $08				lda 	IFR0+IM0
.11c7	92 22		sta ($22)			sta 	(zTemp0)
.11c9	28		plp				plp
.11ca	90 08		bcc $11d4			bcc 	_DPExit
.11cc	5a		phy				phy
.11cd	a5 09		lda $09				lda 	IFR0+IM1
.11cf	a0 01		ldy #$01			ldy 	#1
.11d1	91 22		sta ($22),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4					_DPExit:
.11d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11d5					Command_Input:
.11d5	a9 ff		lda #$ff			lda 	#$FF
.11d7	8d 06 05	sta $0506			sta 	InputFlag
.11da	80 03		bra $11df			bra 	Command_IP_Main
.11dc					Command_Print:
.11dc	9c 06 05	stz $0506			stz 	InputFlag
.11df					Command_IP_Main:
.11df	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11e0					_CPLoop:
.11e0	08		php				php 								; save last action flag
.11e1	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.11e3	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11e5	f0 4e		beq $1235			beq 	_CPExit 					; without consuming
.11e7	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11e9	f0 4a		beq $1235			beq 	_CPExit
.11eb	68		pla				pla 								; throw last action flag
.11ec	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.11ee	c8		iny				iny
.11ef	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11f1	f0 3f		beq $1232			beq 	_CPContinueWithSameLine
.11f3	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11f5	f0 36		beq $122d			beq 	_CPTab
.11f7	88		dey				dey 								; undo the get.
.11f8	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.11fb	10 0b		bpl $1208			bpl	 	_CPNotInput
.11fd	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.11ff	c9 40		cmp #$40			cmp 	#$40
.1201	d0 05		bne $1208			bne 	_CPNotInput
.1203	20 3e 12	jsr $123e			jsr 	_CPInputCode 				; input code
.1206	80 d7		bra $11df			bra 	Command_IP_Main 			; and go round again.
.1208					_CPNotInput:
.1208	20 03 16	jsr $1603			jsr 	EXPEvaluateExpression 		; evaluate expression.
.120b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.120d	10 14		bpl $1223			bpl 	_CPNumber
.120f	5a		phy				phy
.1210	18		clc				clc 								; string address to YX
.1211	a5 08		lda $08				lda 	IFR0+IM0
.1213	aa		tax				tax
.1214	a5 09		lda $09				lda 	IFR0+IM1
.1216	a8		tay				tay
.1217	e8		inx				inx 								; point to 1st character
.1218	d0 01		bne $121b			bne 	_CPNoCarry
.121a	c8		iny				iny
.121b					_CPNoCarry:
.121b	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.121d	20 72 12	jsr $1272			jsr 	CPPrintAYX 					; print AYX
.1220	7a		ply				ply
.1221	80 bc		bra $11df			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1223					_CPNumber:
.1223	5a		phy				phy
.1224	20 c1 2d	jsr $2dc1			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1227	20 72 12	jsr $1272			jsr 	CPPrintAYX 					; print AYX
.122a	7a		ply				ply
.122b	80 b2		bra $11df			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.122d					_CPTab:
.122d	a9 09		lda #$09			lda 	#9 							; print TAB
.122f	20 88 12	jsr $1288			jsr 	CPPrintA
.1232					_CPContinueWithSameLine:
.1232	38		sec				sec 								; loop round with carry set, which
.1233	80 ab		bra $11e0			bra 	_CPLoop 					; will inhibit final CR
.1235					_CPExit:
.1235	28		plp				plp 								; get last action flag
.1236	b0 05		bcs $123d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1238	a9 0d		lda #$0d			lda 	#13 						; print new line
.123a	20 88 12	jsr $1288			jsr 	CPPrintA
.123d					_CPExit2:
.123d	60		rts				rts
.123e					_CPInputCode:
.123e	20 cb 16	jsr $16cb			jsr 	EXPTermR0 					; get the term.
.1241	5a		phy				phy 								; save position
.1242	20 85 12	jsr $1285			jsr 	CPInputA					; input a line to YX
.1245	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1247	30 18		bmi $1261			bmi 	_CPInputString
.1249	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.124b	48		pha				pha
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	48		pha				pha
.124f	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1251	84 23		sty $23				sty 	zTemp0+1
.1253	20 ad 19	jsr $19ad			jsr 	VALConversionZTemp0
.1256	68		pla				pla 								; do the assign.
.1257	85 23		sta $23				sta 	zTemp0+1
.1259	68		pla				pla
.125a	85 22		sta $22				sta 	zTemp0
.125c	20 b0 12	jsr $12b0			jsr 	AssignNumber
.125f	7a		ply				ply
.1260	60		rts				rts
.1261					_CPInputString:
.1261	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1263	85 22		sta $22				sta 	zTemp0
.1265	a5 09		lda $09				lda 	IFR0+IM1
.1267	85 23		sta $23				sta 	zTemp0+1
.1269	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.126b	84 09		sty $09				sty 	IFR0+IM1
.126d	20 c7 12	jsr $12c7			jsr 	AssignString 				; assign the string
.1270	7a		ply				ply 								; exit
.1271	60		rts				rts
.1272					CPPrintAYX:
.1272	86 22		stx $22				stx 	zTemp0
.1274	84 23		sty $23				sty 	zTemp0+1
.1276	aa		tax				tax
.1277	f0 0b		beq $1284			beq 	_CPPrintExit
.1279	a0 00		ldy #$00			ldy 	#0
.127b					_CPPrintAYXLoop:
.127b	b1 22		lda ($22),y			lda 	(zTemp0),y
.127d	20 88 12	jsr $1288			jsr 	CPPrintA
.1280	c8		iny				iny
.1281	ca		dex				dex
.1282	d0 f7		bne $127b			bne 	_CPPrintAYXLoop
.1284					_CPPrintExit:
.1284	60		rts				rts
.1285					CPInputA:
.1285	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.1288					CPPrintA:
.1288	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.128b					CommandLET:
.128b	20 cb 16	jsr $16cb			jsr 	EXPTermR0 					; get term
.128e	90 6f		bcc $12ff			bcc 	CLError 					; must be a reference term.
.1290	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.1292	48		pha				pha
.1293	a5 09		lda $09				lda 	IFR0+IM1
.1295	48		pha				pha
.1296	a5 0b		lda $0b				lda 	IFR0+IExp
.1298	48		pha				pha
.1299	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.129b	20 2c 26	jsr $262c			jsr 	ERRCheckA
.129e	20 03 16	jsr $1603			jsr 	EXPEvaluateExpression 		; right hand side.
.12a1	68		pla				pla 								; type of l-expr
.12a2	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12a4	30 5c		bmi $1302			bmi 	CLType
.12a6	fa		plx				plx 	 							; pop target address to zTemp0
.12a7	86 23		stx $23				stx 	zTemp0+1
.12a9	fa		plx				plx
.12aa	86 22		stx $22				stx 	zTemp0
.12ac					AssignData:
.12ac	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12ae	30 17		bmi $12c7			bmi 	AssignString
.12b0					AssignNumber:
.12b0	5a		phy				phy
.12b1	a0 03		ldy #$03			ldy 	#3
.12b3	a5 0b		lda $0b				lda 	IFR0+IExp
.12b5	91 22		sta ($22),y			sta 	(zTemp0),y
.12b7	88		dey				dey
.12b8	a5 0a		lda $0a				lda 	IFR0+IM2
.12ba	91 22		sta ($22),y			sta 	(zTemp0),y
.12bc	88		dey				dey
.12bd	a5 09		lda $09				lda 	IFR0+IM1
.12bf	91 22		sta ($22),y			sta 	(zTemp0),y
.12c1	a5 08		lda $08				lda 	IFR0+IM0
.12c3	92 22		sta ($22)			sta 	(zTemp0)
.12c5	7a		ply				ply
.12c6	60		rts				rts
.12c7					AssignString:
.12c7	5a		phy				phy
.12c8	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12ca	b1 22		lda ($22),y			lda 	(zTemp0),y
.12cc	12 22		ora ($22)			ora 	(zTemp0)
.12ce	f0 23		beq $12f3			beq 	_CLConcreteString
.12d0	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12d2	85 24		sta $24				sta 	zTemp1
.12d4	b1 22		lda ($22),y			lda 	(zTemp0),y
.12d6	85 25		sta $25				sta 	zTemp1+1
.12d8	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.12da	38		sec				sec 								; we want 3 for slot size, status, string size.
.12db	e9 03		sbc #$03			sbc 	#3
.12dd	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.12df	90 12		bcc $12f3			bcc 	_CLConcreteString 			; if so, concrete the string again.
.12e1	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.12e3	1a		inc a				inc 	a
.12e4	aa		tax				tax
.12e5	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.12e7					_CLReplaceString:
.12e7	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.12e9	c8		iny				iny
.12ea	c8		iny				iny
.12eb	91 24		sta ($24),y			sta 	(zTemp1),y
.12ed	88		dey				dey
.12ee	ca		dex				dex
.12ef	d0 f6		bne $12e7			bne 	_CLReplaceString
.12f1	80 0a		bra $12fd			bra 	_CLExit
.12f3					_CLConcreteString:
.12f3	20 9f 26	jsr $269f			jsr 	StringConcrete  			; concreted string in XA.
.12f6	a0 01		ldy #$01			ldy 	#1 							; store the address
.12f8	92 22		sta ($22)			sta 	(zTemp0)
.12fa	8a		txa				txa
.12fb	91 22		sta ($22),y			sta 	(zTemp0),y
.12fd					_CLExit:
.12fd	7a		ply				ply
.12fe	60		rts				rts
.12ff					CLError:
.12ff	4c b2 25	jmp $25b2		jmp	ErrorV_variable
.1302					CLType:
.1302	4c af 24	jmp $24af		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1305					Command_LIST:
.1305	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1308	9c 08 05	stz $0508			stz 	CLFrom+1
.130b	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.130d	c9 99		cmp #$99			cmp 	#PR_COMMA
.130f	f0 1d		beq $132e			beq 	_CLToLine
.1311	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1313	f0 37		beq $134c			beq 	_CLDefaultTo
.1315	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1318	a5 08		lda $08				lda 	IFR0+IM0
.131a	8d 07 05	sta $0507			sta 	CLFrom
.131d	8d 09 05	sta $0509			sta 	CLTo
.1320	a5 09		lda $09				lda 	IFR0+IM1
.1322	8d 08 05	sta $0508			sta 	CLFrom+1
.1325	8d 0a 05	sta $050a			sta 	CLTo+1
.1328	b1 18		lda ($18),y			lda 	(codePtr),y
.132a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.132c	f0 26		beq $1354			beq 	_CLList
.132e					_CLToLine:
.132e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1330	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1332	f0 18		beq $134c			beq 	_CLDefaultTo
.1334	20 24 26	jsr $2624			jsr 	ERRCheckComma 				; sep comma
.1337	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1339	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.133b	f0 0f		beq $134c			beq 	_CLDefaultTo
.133d	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; there's a To value.
.1340	a5 08		lda $08				lda 	IFR0+IM0
.1342	8d 09 05	sta $0509			sta 	CLTo
.1345	a5 09		lda $09				lda 	IFR0+IM1
.1347	8d 0a 05	sta $050a			sta 	CLTo+1
.134a	80 08		bra $1354			bra 	_CLList
.134c					_CLDefaultTo:
.134c	a9 ff		lda #$ff			lda 	#$FF
.134e	8d 09 05	sta $0509			sta 	CLTo
.1351	8d 0a 05	sta $050a			sta 	CLTo+1
.1354					_CLList:
.1354	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1357	85 19		sta $19				sta 	codePtr+1
.1359	64 18		stz $18				stz 	codePtr
.135b	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.135d	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.135f	20 d2 1c	jsr $1cd2			jsr 	TOKSetDetokeniseOutput
.1362					_CLLoop:
.1362	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1364	f0 4a		beq $13b0			beq 	_CLExit
.1366	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1369	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.136c	d0 45		bne $13b3			bne 	_CLBreak
.136e	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1370	20 b6 13	jsr $13b6			jsr 	_CLCompareLine
.1373	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1375	f0 2c		beq $13a3			beq 	_CLNext
.1377	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1379	20 b6 13	jsr $13b6			jsr 	_CLCompareLine
.137c	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.137e	f0 23		beq $13a3			beq 	_CLNext
.1380	a0 02		ldy #$02			ldy 	#2 							; print line #
.1382	b1 18		lda ($18),y			lda 	(codePtr),y
.1384	aa		tax				tax
.1385	88		dey				dey
.1386	b1 18		lda ($18),y			lda 	(codePtr),y
.1388	20 7d 27	jsr $277d			jsr 	WriteIntXA
.138b	a9 20		lda #$20			lda 	#32
.138d	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1390	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.1392	a5 18		lda $18				lda 	codePtr
.1394	18		clc				clc
.1395	69 03		adc #$03			adc 	#3
.1397	aa		tax				tax
.1398	90 01		bcc $139b			bcc 	_CLNoCarry2
.139a	c8		iny				iny
.139b					_CLNoCarry2:
.139b	20 8d 1c	jsr $1c8d			jsr 	TOKDetokenise
.139e	a9 0d		lda #$0d			lda 	#13	 						; next line
.13a0	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13a3					_CLNext:
.13a3	18		clc				clc 								; advance to next line.
.13a4	b2 18		lda ($18)			lda 	(codePtr)
.13a6	65 18		adc $18				adc 	codePtr
.13a8	85 18		sta $18				sta 	codePtr
.13aa	90 02		bcc $13ae			bcc 	_CLNoCarry
.13ac	e6 19		inc $19				inc 	codePtr+1
.13ae					_CLNoCarry:
.13ae	80 b2		bra $1362			bra 	_CLLoop
.13b0					_CLExit:
.13b0	4c 9c 27	jmp $279c			jmp 	WarmStart
.13b3					_CLBreak:
.13b3	4c 0a 26	jmp $260a		jmp	ErrorV_break
.13b6					_CLCompareLine:
.13b6	a0 01		ldy #$01			ldy 	#1
.13b8	38		sec				sec
.13b9	b1 18		lda ($18),y			lda 	(codePtr),y
.13bb	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13be	85 22		sta $22				sta 	zTemp0
.13c0	c8		iny				iny
.13c1	b1 18		lda ($18),y			lda 	(codePtr),y
.13c3	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13c6	90 0a		bcc $13d2			bcc 	_CLIsNegative
.13c8	d0 05		bne $13cf			bne 	_CLIsPositive
.13ca	a5 22		lda $22				lda 	zTemp0
.13cc	d0 01		bne $13cf			bne 	_CLIsPositive
.13ce	60		rts				rts
.13cf					_CLIsPositive:
.13cf	a9 01		lda #$01			lda 	#1
.13d1	60		rts				rts
.13d2					_CLIsNegative:
.13d2	a9 ff		lda #$ff			lda 	#255
.13d4	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.13d5					Command_NEW:
.13d5	20 77 1e	jsr $1e77			jsr 	PGMNewProgram
.13d8	20 3c 10	jsr $103c			jsr 	ClearCode
.13db	4c 68 14	jmp $1468			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.13de					Command_REM:
.13de					Command_REM2:
.13de	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.13e0	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.13e2	d0 06		bne $13ea			bne 	_CRExit
.13e4	c8		iny				iny 								; skip over it, it's a comment.
.13e5	98		tya				tya
.13e6	38		sec				sec
.13e7	71 18		adc ($18),y			adc 	(codePtr),y
.13e9	a8		tay				tay
.13ea					_CRExit:
.13ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.13eb					S
.13eb					Command_RESTORE:
.13eb	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.13ee	8d 0c 05	sta $050c			sta 	dataPtr+1
.13f1	9c 0b 05	stz $050b			stz 	dataPtr
.13f4	a9 03		lda #$03			lda 	#3 							; position start of line
.13f6	8d 0d 05	sta $050d			sta 	dataPos
.13f9	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.13fc	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.13fd					Command_RUN:
.13fd	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.1400	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1403	85 19		sta $19				sta 	codePtr+1
.1405	64 18		stz $18				stz 	codePtr
.1407	80 0b		bra $1414			bra 	RUNNewLine
.1409					RUNEndOfLine:
.1409	18		clc				clc 								; advance to next line.
.140a	b2 18		lda ($18)			lda 	(codePtr)
.140c	65 18		adc $18				adc 	codePtr
.140e	85 18		sta $18				sta 	codePtr
.1410	90 02		bcc $1414			bcc 	_RELNoCarry
.1412	e6 19		inc $19				inc 	codePtr+1
.1414					_RELNoCarry:
.1414					RUNNewLine:
.1414	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1416	9a		txs				txs
.1417	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1419	f0 4d		beq $1468			beq 	Command_END
.141b	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.141d	b1 18		lda ($18),y			lda 	(codePtr),y
.141f	8d 26 06	sta $0626			sta 	ERRLine
.1422	c8		iny				iny
.1423	b1 18		lda ($18),y			lda 	(codePtr),y
.1425	8d 27 06	sta $0627			sta 	ERRLine+1
.1428	c8		iny				iny 								; offset into codePtr for start of line.
.1429					RUNNewCommand:
.1429	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.142c	ce 10 05	dec $0510			dec 	checkCounter
.142f	d0 0a		bne $143b			bne 	_RNCNoCheck
.1431	5a		phy				phy 								; keyboard check.
.1432	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1435	7a		ply				ply
.1436	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1439	d0 1e		bne $1459			bne 	_RUNBreak
.143b					_RNCNoCheck:
.143b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.143d	10 1d		bpl $145c			bpl		_RUNNotToken 				; probably an identifier
.143f	c8		iny				iny 								; consume token
.1440	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1442	f0 e5		beq $1429			beq 	RUNNewCommand
.1444	c9 ad		cmp #$ad			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1446	b0 0e		bcs $1456			bcs 	_RUNSyntax
.1448	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.144a	90 0a		bcc $1456			bcc 	_RUNSyntax
.144c	0a		asl a				asl 	a 							; double into X.
.144d	aa		tax				tax
.144e	20 53 14	jsr $1453			jsr 	_RUNDispatchMain			; call the main dispatcher
.1451	80 d6		bra $1429			bra 	RUNNewCommand
.1453					_RUNDispatchMain:
.1453	7c 8d 1b	jmp ($1b8d,x)			jmp 	(VectorTable,x)
.1456					_RUNSyntax:
.1456	4c 7f 24	jmp $247f		jmp	ErrorV_syntax
.1459					_RUNBreak:
.1459	4c 0a 26	jmp $260a		jmp	ErrorV_break
.145c					_RUNNotToken:
.145c	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.145e	90 f6		bcc $1456			bcc 	_RUNSyntax
.1460	20 8b 12	jsr $128b			jsr 	CommandLET 					; assignment
.1463	80 c4		bra $1429			bra 	RUNNewCommand 				; loop round.
.1465					Command_Shift_Handler:
.1465	4c c1 24	jmp $24c1		jmp	ErrorV_unimplemented
.1468					Command_END:
.1468	4c 9c 27	jmp $279c			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.146b					Command_STOP:
.146b	4c 23 25	jmp $2523		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.146e					Command_Sys:
.146e	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; execution address
.1471	5a		phy				phy
.1472	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1475	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1478	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.147b	20 80 14	jsr $1480			jsr 	_CSCallIFR0 				; call the code
.147e	7a		ply				ply
.147f	60		rts				rts
.1480					_CSCallIFR0:
.1480	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1483					NoExec01:
.1483					NoExec02:
.1483					NoExec03:
.1483					NoExec04:
.1483					NoExec05:
.1483					NoExec06:
.1483					NoExec07:
.1483					NoExec08:
.1483	4c 7f 24	jmp $247f		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1486					EXPBinAdd:
.1486	24 0b		bit $0b				bit 	IFR0+IExp
.1488	30 6f		bmi $14f9			bmi 	EXPConcatenate
.148a	a2 0c		ldx #$0c			ldx 	#IFR1
.148c	4c ba 29	jmp $29ba			jmp 	IFloatAdd
.148f					EXPBinSub:
.148f	24 0b		bit $0b				bit 	IFR0+IExp
.1491	30 3f		bmi $14d2			bmi 	EXPTypeError
.1493	a2 0c		ldx #$0c			ldx 	#IFR1
.1495	4c b3 29	jmp $29b3			jmp 	IFloatSubtract
.1498					EXPBinMul:
.1498	24 0b		bit $0b				bit 	IFR0+IExp
.149a	30 36		bmi $14d2			bmi 	EXPTypeError
.149c	a2 0c		ldx #$0c			ldx 	#IFR1
.149e	4c 64 2a	jmp $2a64			jmp 	IFloatMultiply
.14a1					EXPBinFDiv:
.14a1	24 0b		bit $0b				bit 	IFR0+IExp
.14a3	30 2d		bmi $14d2			bmi 	EXPTypeError
.14a5	a2 0c		ldx #$0c			ldx 	#IFR1
.14a7	20 e7 2c	jsr $2ce7			jsr 	IFloatDivideFloat
.14aa	b0 0f		bcs $14bb			bcs 	EXPDZero
.14ac	60		rts				rts
.14ad					EXPBinIDiv:
.14ad	24 0b		bit $0b				bit 	IFR0+IExp
.14af	30 21		bmi $14d2			bmi 	EXPTypeError
.14b1	a2 0c		ldx #$0c			ldx 	#IFR1
.14b3	20 e7 2c	jsr $2ce7			jsr 	IFloatDivideFloat
.14b6	b0 03		bcs $14bb			bcs 	EXPDZero
.14b8	4c c4 2c	jmp $2cc4			jmp 	IFloatIntegerR0
.14bb					EXPDZero:
.14bb	4c f8 24	jmp $24f8		jmp	ErrorV_divzero
.14be					EXPBinIMod:
.14be	24 0b		bit $0b				bit 	IFR0+IExp
.14c0	30 10		bmi $14d2			bmi 	EXPTypeError
.14c2	a2 0c		ldx #$0c			ldx 	#IFR1
.14c4	5a		phy				phy
.14c5	20 fc 2b	jsr $2bfc			jsr 	IFPreProcessBitwise 		; set up everything.
.14c8	d0 05		bne $14cf			bne 	EXPDRange
.14ca	20 35 2b	jsr $2b35			jsr 	IFloatModulusInteger
.14cd	7a		ply				ply
.14ce	60		rts				rts
.14cf					EXPDRange:
.14cf	4c 90 24	jmp $2490		jmp	ErrorV_range
.14d2					EXPTypeError:
.14d2	4c af 24	jmp $24af		jmp	ErrorV_type
.14d5					EXPBinAnd:
.14d5	24 0b		bit $0b				bit 	IFR0+IExp
.14d7	30 f9		bmi $14d2			bmi 	EXPTypeError
.14d9	a2 0c		ldx #$0c			ldx 	#IFR1
.14db	20 b7 2b	jsr $2bb7			jsr 	IFloatBitwiseAnd
.14de	b0 ef		bcs $14cf			bcs 	EXPDRange
.14e0	60		rts				rts
.14e1					EXPBinOr:
.14e1	24 0b		bit $0b				bit 	IFR0+IExp
.14e3	30 ed		bmi $14d2			bmi 	EXPTypeError
.14e5	a2 0c		ldx #$0c			ldx 	#IFR1
.14e7	20 ce 2b	jsr $2bce			jsr 	IFloatBitwiseOr
.14ea	b0 e3		bcs $14cf			bcs 	EXPDRange
.14ec	60		rts				rts
.14ed					EXPBinXor:
.14ed	24 0b		bit $0b				bit 	IFR0+IExp
.14ef	30 e1		bmi $14d2			bmi 	EXPTypeError
.14f1	a2 0c		ldx #$0c			ldx 	#IFR1
.14f3	20 e5 2b	jsr $2be5			jsr 	IFloatBitwiseXor
.14f6	b0 d7		bcs $14cf			bcs 	EXPDRange
.14f8	60		rts				rts
.14f9					EXPConcatenate:
.14f9	18		clc				clc
.14fa	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.14fc	72 0c		adc ($0c)			adc 	(IFR1)
.14fe	b0 2d		bcs $152d			bcs 	_EXPCError
.1500	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1502	da		phx				phx
.1503	a6 09		ldx $09				ldx 	IFR0+1
.1505	da		phx				phx
.1506	20 12 27	jsr $2712			jsr 	StringTempAllocate 			; allocate string, set up return
.1509	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.150b	a5 0c		lda $0c				lda 	IFR1
.150d	20 16 15	jsr $1516			jsr 	_EXPCCopyXA
.1510	fa		plx				plx 								; copy second string
.1511	68		pla				pla
.1512	20 16 15	jsr $1516			jsr 	_EXPCCopyXA
.1515	60		rts				rts
.1516					_EXPCCopyXA:
.1516	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.1518	85 22		sta $22				sta 	zTemp0
.151a	b2 22		lda ($22)			lda 	(zTemp0)					; length
.151c	f0 0e		beq $152c			beq 	_EXPCCExit 					; nothing.
.151e	aa		tax				tax 								; count
.151f	5a		phy				phy 								; start positioin
.1520	a0 01		ldy #$01			ldy 	#1
.1522					_EXPCCLoop:
.1522	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.1524	20 47 27	jsr $2747			jsr 	StringTempWrite
.1527	c8		iny				iny
.1528	ca		dex				dex
.1529	d0 f7		bne $1522			bne 	_EXPCCLoop
.152b	7a		ply				ply
.152c					_EXPCCExit:
.152c	60		rts				rts
.152d					_EXPCError:
.152d	4c 9c 25	jmp $259c		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1530					EXPReturnTrue:
.1530	a2 08		ldx #$08			ldx 	#IFR0
.1532	a9 01		lda #$01			lda 	#1
.1534	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.1537	20 cf 2f	jsr $2fcf			jsr 	IFloatNegate
.153a	60		rts				rts
.153b					EXPReturnFalse:
.153b	a2 08		ldx #$08			ldx 	#IFR0
.153d	4c c4 2f	jmp $2fc4			jmp 	IFloatSetZero
.1540					EXPCompareEqual:
.1540	20 76 15	jsr $1576			jsr 	EXPCompareBaseCode
.1543	c9 00		cmp #$00			cmp 	#0
.1545	f0 e9		beq $1530			beq 	EXPReturnTrue
.1547	80 f2		bra $153b			bra 	EXPReturnFalse
.1549					EXPCompareLess:
.1549	20 76 15	jsr $1576			jsr 	EXPCompareBaseCode
.154c	c9 ff		cmp #$ff			cmp 	#$FF
.154e	f0 e0		beq $1530			beq 	EXPReturnTrue
.1550	80 e9		bra $153b			bra 	EXPReturnFalse
.1552					EXPCompareGreater:
.1552	20 76 15	jsr $1576			jsr 	EXPCompareBaseCode
.1555	c9 01		cmp #$01			cmp 	#1
.1557	f0 d7		beq $1530			beq 	EXPReturnTrue
.1559	80 e0		bra $153b			bra 	EXPReturnFalse
.155b					EXPCompareNotEqual:
.155b	20 76 15	jsr $1576			jsr 	EXPCompareBaseCode
.155e	c9 00		cmp #$00			cmp 	#0
.1560	d0 ce		bne $1530			bne 	EXPReturnTrue
.1562	80 d7		bra $153b			bra 	EXPReturnFalse
.1564					EXPCompareLessEqual:
.1564	20 76 15	jsr $1576			jsr 	EXPCompareBaseCode
.1567	c9 01		cmp #$01			cmp 	#1
.1569	d0 c5		bne $1530			bne 	EXPReturnTrue
.156b	80 ce		bra $153b			bra 	EXPReturnFalse
.156d					EXPCompareGreaterEqual:
.156d	20 76 15	jsr $1576			jsr 	EXPCompareBaseCode
.1570	c9 ff		cmp #$ff			cmp 	#$FF
.1572	d0 bc		bne $1530			bne 	EXPReturnTrue
.1574	80 c5		bra $153b			bra 	EXPReturnFalse
.1576					EXPCompareBaseCode:
.1576	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1578	30 10		bmi $158a			bmi 	_EXCBCString
.157a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.157c	20 92 2c	jsr $2c92			jsr 	IFloatCompare
.157f	a5 08		lda $08				lda 	IFR0+IM0
.1581	f0 06		beq $1589			beq 	_EXCBCExit 					; return 0 if zero
.1583	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1585	50 02		bvc $1589			bvc 	_EXCBCExit
.1587	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1589					_EXCBCExit:
.1589	60		rts				rts
.158a					_EXCBCString:
.158a	5a		phy				phy
.158b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.158d	d2 0c		cmp ($0c)			cmp 	(IFR1)
.158f	90 02		bcc $1593			bcc 	_EXCBCSmaller
.1591	b2 0c		lda ($0c)			lda 	(IFR1)
.1593					_EXCBCSmaller:
.1593	aa		tax				tax
.1594	f0 0d		beq $15a3			beq 	_EXCBCMatches 				; if zero common length matches
.1596	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1598					_EXCBCCheckSmallerMatches:
.1598	c8		iny				iny 								; compare directly as far as common length
.1599	38		sec				sec
.159a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.159c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.159e	d0 08		bne $15a8			bne 	_EXCBCExit2
.15a0	ca		dex				dex
.15a1	d0 f5		bne $1598			bne 	_EXCBCCheckSmallerMatches
.15a3					_EXCBCMatches:
.15a3	38		sec				sec
.15a4	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.15a6	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.15a8					_EXCBCExit2:
.15a8	7a		ply				ply
.15a9	c9 00		cmp #$00			cmp 	#0
.15ab	f0 04		beq $15b1			beq 	_EXCBCReturn
.15ad	30 03		bmi $15b2			bmi 	_EXCBCFF
.15af	a9 01		lda #$01			lda 	#1
.15b1					_EXCBCReturn:
.15b1	60		rts				rts
.15b2					_EXCBCFF:
.15b2	a9 ff		lda #$ff			lda 	#$FF
.15b4	60		rts				rts
.15b5					_EXCBCRange:
.15b5	4c 90 24	jmp $2490		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.15b8					EXPBinLeft:
.15b8	a9 ff		lda #$ff			lda 	#$FF
.15ba	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.15bd	4c c3 15	jmp $15c3			jmp 	EXPShiftCommon
.15c0					EXPBinRight:
.15c0	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.15c3					EXPShiftCommon:
.15c3	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.15c5	05 0f		ora $0f				ora 	IFR1+IExp
.15c7	29 7f		and #$7f			and 	#$7F
.15c9	d0 35		bne $1600			bne 	_EXPSRange
.15cb	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.15cd	29 e0		and #$e0			and 	#$E0
.15cf	05 09		ora $09				ora 	IFR0+IM1
.15d1	05 0a		ora $0a				ora 	IFR0+IM2
.15d3	d0 25		bne $15fa			bne 	_EXPSShiftZero 				; if so return zero
.15d5	5a		phy				phy
.15d6	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.15d8	29 1f		and #$1f			and 	#$1F
.15da	f0 17		beq $15f3			beq 	_EXPSExit 					; exit if zero
.15dc	a8		tay				tay
.15dd					_EXPSLoop:
.15dd	a2 0c		ldx #$0c			ldx 	#IFR1
.15df	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.15e2	30 05		bmi $15e9			bmi 	_EXPSShiftLeft
.15e4	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.15e7	80 07		bra $15f0			bra 	_EXPSContinue
.15e9					_EXPSShiftLeft:
.15e9	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.15ec	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.15ee	30 10		bmi $1600			bmi 	_EXPSRange
.15f0					_EXPSContinue:
.15f0	88		dey				dey
.15f1	d0 ea		bne $15dd			bne 	_EXPSLoop
.15f3					_EXPSExit:
.15f3	a2 0c		ldx #$0c			ldx 	#IFR1
.15f5	20 55 2f	jsr $2f55			jsr 	IFloatCopyFromRegister
.15f8	7a		ply				ply
.15f9	60		rts				rts
.15fa					_EXPSShiftZero:
.15fa	a2 08		ldx #$08			ldx 	#IFR0
.15fc	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.15ff	60		rts				rts
.1600					_EXPSRange:
.1600	4c 90 24	jmp $2490		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1603					EXPEvaluateExpression:
.1603	a9 00		lda #$00			lda 	#0 							; current precedence
.1605					EXPEvaluateExpressionPrecedenceA:
.1605	48		pha				pha
.1606	20 80 16	jsr $1680			jsr 	EXPTermValueR0				; do first term.
.1609					_EELoop:
.1609	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.160b	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.160d	90 31		bcc $1640			bcc 	_EEExit
.160f	aa		tax				tax 								; access the precedence of the operator.
.1610	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1611	dd d6 18	cmp $18d6,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1614	b0 2b		bcs $1641			bcs 	_EEExit2
.1616	48		pha				pha 								; save current precedence.
.1617	da		phx				phx 								; save operator
.1618	c8		iny				iny 								; consume operator
.1619	da		phx				phx
.161a	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.161c	20 13 2f	jsr $2f13			jsr 	IFloatPushRx
.161f	fa		plx				plx
.1620	bd d6 18	lda $18d6,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1623	20 05 16	jsr $1605			jsr 	EXPEvaluateExpressionPrecedenceA
.1626	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1628	20 34 2f	jsr $2f34			jsr 	IFloatPullRx
.162b	fa		plx				plx 								; operator
.162c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.162e	45 0f		eor $0f				eor 	IFR1+IExp
.1630	30 08		bmi $163a			bmi 	_EEType
.1632					_EETypeOkay:
.1632	8a		txa				txa
.1633	0a		asl a				asl 	a 							; double -> X
.1634	aa		tax				tax
.1635	20 3d 16	jsr $163d			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1638	80 cf		bra $1609			bra 	_EELoop
.163a					_EEType:
.163a	4c af 24	jmp $24af		jmp	ErrorV_type
.163d					_EECallBinary:
.163d	7c 8d 1b	jmp ($1b8d,x)			jmp 	(VectorTable,x)
.1640					_EEExit:
.1640	68		pla				pla 								; throw precedence
.1641					_EEExit2:
.1641	18		clc				clc
.1642	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1643					EXPEvalNumber:
.1643	20 03 16	jsr $1603			jsr 	EXPEvaluateExpression
.1646	24 0b		bit $0b				bit 	IFR0+IExp
.1648	30 01		bmi $164b			bmi 	EVUType
.164a	60		rts				rts
.164b					EVUType:
.164b	4c af 24	jmp $24af		jmp	ErrorV_type
.164e					EXPEvalInteger:
.164e	20 43 16	jsr $1643			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1651	20 c4 2c	jsr $2cc4			jsr 	IFloatIntegerR0
.1654	60		rts				rts
.1655					EXPEvalInteger16:
.1655	20 4e 16	jsr $164e			jsr 	EXPEvalInteger
.1658	a5 0a		lda $0a				lda 	IFR0+IM2
.165a	d0 21		bne $167d			bne 	EVURange
.165c	a6 09		ldx $09				ldx 	IFR0+IM1
.165e	a5 08		lda $08				lda 	IFR0+IM0
.1660	60		rts				rts
.1661					EXPEvalInteger8:
.1661	20 4e 16	jsr $164e			jsr 	EXPEvalInteger
.1664	a5 0a		lda $0a				lda 	IFR0+IM2
.1666	05 09		ora $09				ora 	IFR0+IM1
.1668	d0 13		bne $167d			bne 	EVURange
.166a	a5 08		lda $08				lda 	IFR0+IM0
.166c	60		rts				rts
.166d					EXPEvalString:
.166d	20 03 16	jsr $1603			jsr 	EXPEvaluateExpression
.1670	24 0b		bit $0b				bit 	IFR0+IExp
.1672	10 d7		bpl $164b			bpl 	EVUType
.1674	a6 09		ldx $09				ldx 	IFR0+IM1
.1676	86 23		stx $23				stx 	zTemp0+1
.1678	a5 08		lda $08				lda 	IFR0+IM0
.167a	85 22		sta $22				sta 	zTemp0
.167c	60		rts				rts
.167d					EVURange:
.167d	4c 90 24	jmp $2490		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1680					EXPTermValueR0:
.1680	20 cb 16	jsr $16cb			jsr 	EXPTermR0 					; get term
.1683	90 45		bcc $16ca			bcc 	_ETVNotReference 			; exit if value.
.1685	5a		phy				phy
.1686	a0 03		ldy #$03			ldy 	#3 							; get type
.1688	b1 08		lda ($08),y			lda 	(IFR0),y
.168a	30 14		bmi $16a0			bmi 	_ETVDereferenceString
.168c	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.168e	88		dey				dey
.168f	b1 08		lda ($08),y			lda 	(IFR0),y
.1691	85 0a		sta $0a				sta 	IFR0+IM2
.1693	88		dey				dey
.1694	b1 08		lda ($08),y			lda 	(IFR0),y
.1696	aa		tax				tax
.1697	b2 08		lda ($08)			lda 	(IFR0)
.1699	86 09		stx $09				stx 	IFR0+IM1
.169b	85 08		sta $08				sta 	IFR0+IM0
.169d	7a		ply				ply
.169e	18		clc				clc
.169f	60		rts				rts
.16a0					_ETVDereferenceString:
.16a0	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.16a2	b1 08		lda ($08),y			lda 	(IFR0),y
.16a4	12 08		ora ($08)			ora 	(IFR0)
.16a6	f0 11		beq $16b9			beq 	_ETVNull
.16a8	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.16aa	aa		tax				tax
.16ab	b2 08		lda ($08)			lda 	(IFR0)
.16ad	18		clc				clc 								; add two so points to actual string.
.16ae	69 02		adc #$02			adc 	#2
.16b0	90 01		bcc $16b3			bcc 	_EVDSNoCarry
.16b2	e8		inx				inx
.16b3					_EVDSNoCarry:
.16b3	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.16b5	85 08		sta $08				sta 	IFR0
.16b7	80 08		bra $16c1			bra 	_ETVFillExit 				; tidy up and exit.
.16b9					_ETVNull:
.16b9	a9 c9		lda #$c9			lda 	#_EVTNString & $FF
.16bb	85 08		sta $08				sta 	IFR0+IM0
.16bd	a9 16		lda #$16			lda 	#_EVTNString >> 8
.16bf	85 09		sta $09				sta 	IFR0+IM1
.16c1					_ETVFillExit:
.16c1	64 0a		stz $0a				stz 	IFR0+IM2
.16c3	a9 80		lda #$80			lda 	#$80
.16c5	85 0b		sta $0b				sta 	IFR0+IExp
.16c7	7a		ply				ply
.16c8	60		rts				rts
.16c9					_EVTNString:
>16c9	00						.byte 	0
.16ca					_ETVNotReference:
.16ca	60		rts				rts
.16cb					EXPTermR0:
.16cb	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.16cd	30 10		bmi $16df			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.16cf	c8		iny				iny 								; consume element
.16d0	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.16d2	b0 08		bcs $16dc			bcs 	_ETMIdentifier
.16d4	20 03 17	jsr $1703			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.16d7	20 36 17	jsr $1736			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.16da	18		clc				clc 								; return value
.16db	60		rts				rts
.16dc					_ETMIdentifier:
.16dc	4c 5b 29	jmp $295b			jmp 	VARCheckSimple 				; check simple variables A-Z
.16df					_ETMIsUnaryOrMinus:
.16df	c8		iny				iny 								; consume element
.16e0	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.16e2	d0 0a		bne $16ee			bne 	_ETMCheckUnary
.16e4	20 80 16	jsr $1680			jsr 	EXPTermValueR0 				; get a term to negate
.16e7	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.16e9	20 cf 2f	jsr $2fcf			jsr 	IFloatNegate
.16ec	18		clc				clc
.16ed	60		rts				rts
.16ee					_ETMCheckUnary:
.16ee	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.16f0	90 0e		bcc $1700			bcc 	_ETMUnarySyntax
.16f2	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.16f4	b0 0a		bcs $1700			bcs 	_ETMUnarySyntax
.16f6	0a		asl a				asl 	a
.16f7	aa		tax				tax
.16f8	20 fd 16	jsr $16fd			jsr 	_ETMCallUnaryFunction
.16fb	18		clc				clc
.16fc	60		rts				rts
.16fd					_ETMCallUnaryFunction:
.16fd	7c 8d 1b	jmp ($1b8d,x)			jmp 	(VectorTable,x)
.1700					_ETMUnarySyntax:
.1700	4c 7f 24	jmp $247f		jmp	ErrorV_syntax
.1703					EXPExtractTokenisedInteger:
.1703	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1705	64 0b		stz $0b				stz 	IFR0+IExp
.1707	64 09		stz $09				stz 	IFR0+IM1
.1709	64 0a		stz $0a				stz 	IFR0+IM2
.170b					_ETMConstant:
.170b	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.170d	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.170f	b0 24		bcs $1735			bcs 	_ETMCExit 					; no.
.1711	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1713	a5 09		lda $09				lda 	IFR0+IM1
.1715	85 0a		sta $0a				sta 	IFR0+IM2
.1717	a5 08		lda $08				lda 	IFR0+IM0
.1719	85 09		sta $09				sta 	IFR0+IM1
.171b	64 08		stz $08				stz 	IFR0+IM0
.171d	8a		txa				txa
.171e	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.171f	66 0a		ror $0a				ror 	IFR0+IM2
.1721	66 09		ror $09				ror 	IFR0+IM1
.1723	66 08		ror $08				ror 	IFR0+IM0
.1725	4a		lsr a				lsr 	a
.1726	66 0a		ror $0a				ror 	IFR0+IM2
.1728	66 09		ror $09				ror 	IFR0+IM1
.172a	66 08		ror $08				ror 	IFR0+IM0
.172c	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.172e	11 18		ora ($18),y			ora 	(codePtr),y
.1730	85 08		sta $08				sta 	IFR0+IM0
.1732	c8		iny				iny 								; consume, loop back
.1733	80 d6		bra $170b			bra 	_ETMConstant
.1735					_ETMCExit:
.1735	60		rts				rts
.1736					EXPCheckDecimalFollows:
.1736	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1738	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.173a	d0 19		bne $1755			bne 	_ETMCDExit
.173c	c8		iny				iny 								; consume token.
.173d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.173f	5a		phy				phy									; save current position
.1740	48		pha				pha 								; save count of chars.
.1741	38		sec				sec 								; address into YX : y + codePtr+1
.1742	98		tya				tya
.1743	65 18		adc $18				adc 	codePtr
.1745	aa		tax				tax
.1746	a5 19		lda $19				lda 	codePtr+1
.1748	69 00		adc #$00			adc 	#0
.174a	a8		tay				tay
.174b	68		pla				pla 								; get count.
.174c	20 68 2e	jsr $2e68			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.174f	7a		ply				ply 								; go to next token.
.1750	98		tya				tya
.1751	38		sec				sec
.1752	71 18		adc ($18),y			adc 	(codePtr),y
.1754	a8		tay				tay
.1755					_ETMCDExit:
.1755	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1756					EXPUnaryAbs:
.1756	20 43 16	jsr $1643			jsr 	EXPEvalNumber 					; number to R0
.1759	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.175c	20 08 2c	jsr $2c08			jsr 	IFloatAbsoluteR0
.175f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1760					EXPUnaryAsc:
.1760	20 6d 16	jsr $166d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1763	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.1766	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1768	f0 06		beq $1770			beq 	_EXAZero 						; if so return 0
.176a	5a		phy				phy 									; otherwise get first character
.176b	a0 01		ldy #$01			ldy 	#1
.176d	b1 22		lda ($22),y			lda 	(zTemp0),y
.176f	7a		ply				ply
.1770					_EXAZero:
.1770	a2 08		ldx #$08			ldx 	#IFR0
.1772	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.1775	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1776					EXPUnaryChr:
.1776	20 61 16	jsr $1661			jsr 	EXPEvalInteger8 				; expr
.1779	48		pha				pha 									; push on stack
.177a	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.177d	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.177f	20 12 27	jsr $2712			jsr 	StringTempAllocate
.1782	68		pla				pla
.1783	20 47 27	jsr $2747			jsr 	StringTempWrite
.1786	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1787					EXPUnaryDec:
.1787	20 6d 16	jsr $166d			jsr 	EXPEvalString 					; string to R0, zTemp0
.178a	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.178d	5a		phy				phy
.178e	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1790	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.1793	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1795	f0 3b		beq $17d2			beq 	_EUDError 						; empty string
.1797	aa		tax				tax
.1798	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.179a					_EUDLoop:
.179a	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.179c	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.179e	90 02		bcc $17a2			bcc 	_EUDNoCase
.17a0	e9 20		sbc #$20			sbc 	#$20
.17a2					_EUDNoCase:
.17a2	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.17a4	90 2c		bcc $17d2			bcc 	_EUDError
.17a6	c9 3a		cmp #$3a			cmp 	#'9'+1
.17a8	90 0a		bcc $17b4			bcc 	_EUDOkay
.17aa	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.17ac	90 24		bcc $17d2			bcc 	_EUDError
.17ae	c9 47		cmp #$47			cmp 	#'F'+1
.17b0	b0 20		bcs $17d2			bcs 	_EUDError
.17b2	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.17b4					_EUDOkay:
.17b4	29 0f		and #$0f			and 	#15 							; make constant
.17b6	da		phx				phx
.17b7	48		pha				pha
.17b8	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.17ba	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.17bd	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.17c0	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.17c3	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.17c6	68		pla				pla 									; pop constant and OR in
.17c7	fa		plx				plx
.17c8	05 08		ora $08				ora 	IFR0+IM0
.17ca	85 08		sta $08				sta 	IFR0+IM0
.17cc	c8		iny				iny 									; next
.17cd	ca		dex				dex
.17ce	d0 ca		bne $179a			bne 	_EUDLoop
.17d0	7a		ply				ply
.17d1	60		rts				rts
.17d2					_EUDError:
.17d2	4c a1 24	jmp $24a1		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.17d5					EXPUnaryInlineDec:
.17d5	4c 7f 24	jmp $247f		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.17d8					EXPUnaryPeek:
.17d8	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 				; number to R0
.17db	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.17de	b2 08		lda ($08)			lda 	(IFR0)
.17e0	a2 08		ldx #$08			ldx 	#IFR0
.17e2	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.17e5	60		rts				rts
.17e6					EXPUnaryDeek:
.17e6	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 				; number to R0
.17e9	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.17ec	5a		phy				phy
.17ed	a0 01		ldy #$01			ldy 	#1
.17ef	b1 08		lda ($08),y			lda 	(IFR0),y
.17f1	7a		ply				ply
.17f2	48		pha				pha
.17f3	b2 08		lda ($08)			lda 	(IFR0)
.17f5	a2 08		ldx #$08			ldx 	#IFR0
.17f7	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.17fa	68		pla				pla
.17fb	85 09		sta $09				sta 	IFR0+IM1
.17fd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.17fe					EXPUnaryNull:
.17fe	20 80 16	jsr $1680			jsr 	EXPTermValueR0
.1801	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1802					EXPUnaryFrac:
.1802	20 43 16	jsr $1643			jsr 	EXPEvalNumber 					; number to R0
.1805	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.1808	20 6e 2c	jsr $2c6e			jsr 	IFloatFractionalR0
.180b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.180c					EXPUnaryInkey:
.180c	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.180f	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1811	20 12 27	jsr $2712			jsr 	StringTempAllocate
.1814	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.1817	b0 06		bcs $181f			bcs 	_EUIExit
.1819	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.181c	20 47 27	jsr $2747			jsr 	StringTempWrite
.181f					_EUIExit:
.181f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1820					EXPUnaryInt:
.1820	20 43 16	jsr $1643			jsr 	EXPEvalNumber 					; number to R0
.1823	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.1826	20 c4 2c	jsr $2cc4			jsr 	IFloatIntegerR0
.1829	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.182a					EXPUnaryLen:
.182a	20 6d 16	jsr $166d			jsr 	EXPEvalString 					; string to R0, zTemp0
.182d	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.1830	b2 22		lda ($22)			lda 	(zTemp0)
.1832	a2 08		ldx #$08			ldx 	#IFR0
.1834	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.1837	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1838					EXPUnaryParenthesis:
.1838	20 43 16	jsr $1643			jsr 	EXPEvalNumber 					; number to R0
.183b	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.183e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.183f					EXPUnaryRnd:
.183f	20 43 16	jsr $1643			jsr 	EXPEvalNumber 				; number to R0
.1842	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 				; )
.1845	a2 08		ldx #$08			ldx 	#IFR0
.1847	20 5e 18	jsr $185e			jsr 	EXPLoadInRandom
.184a	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.184c	85 0b		sta $0b				sta 	IFR0+IExp
.184e	60		rts				rts
.184f					ExpUnaryRand:
.184f	20 4e 16	jsr $164e			jsr 	EXPEvalInteger 				; integer to R0
.1852	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 				; )
.1855	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1857	20 5e 18	jsr $185e			jsr 	EXPLoadInRandom
.185a	20 35 2b	jsr $2b35			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.185d	60		rts				rts
.185e					EXPLoadInRandom:
.185e	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.1861	20 73 18	jsr $1873			jsr 	EXPRandom32
.1864	95 00		sta $00,x			sta 	IM0,x
.1866	20 73 18	jsr $1873			jsr 	EXPRandom32
.1869	95 01		sta $01,x			sta 	IM1,x
.186b	20 73 18	jsr $1873			jsr 	EXPRandom32
.186e	29 7f		and #$7f			and 	#$7F
.1870	95 02		sta $02,x			sta 	IM2,x
.1872	60		rts				rts
.1873					EXPRandom32:
.1873	5a		phy				phy
.1874	a0 08		ldy #$08			ldy 	#8
.1876	ad 12 05	lda $0512			lda 	EXPSeed+0
.1879	0d 13 05	ora $0513			ora 	EXPSeed+1
.187c	0d 14 05	ora $0514			ora 	EXPSeed+2
.187f	0d 15 05	ora $0515			ora 	EXPSeed+3
.1882	d0 08		bne $188c			bne 	_EXPRNoReset
.1884	ee 12 05	inc $0512			inc 	EXPSeed+0
.1887	a0 10		ldy #$10			ldy 	#16
.1889	8c 15 05	sty $0515			sty 	EXPSeed+3
.188c					_EXPRNoReset:
.188c	ad 12 05	lda $0512			lda 	EXPSeed+0
.188f					_EXPRLoop:
.188f	0a		asl a				asl		a
.1890	2e 13 05	rol $0513			rol 	EXPSeed+1
.1893	2e 14 05	rol $0514			rol 	EXPSeed+2
.1896	2e 15 05	rol $0515			rol 	EXPSeed+3
.1899	90 02		bcc $189d			bcc 	_EXPRNoEOR
.189b	49 c5		eor #$c5			eor 	#$C5
.189d					_EXPRNoEOR:
.189d	88		dey				dey
.189e	d0 ef		bne $188f			bne 	_EXPRLoop
.18a0	8d 12 05	sta $0512			sta 	EXPSeed+0
.18a3	7a		ply				ply
.18a4	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.18a5					EXPUnarySgn:
.18a5	20 43 16	jsr $1643			jsr 	EXPEvalNumber 					; number to R0
.18a8	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.18ab	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.18ad	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister
.18b0	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.18b2	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.18b5	a2 0c		ldx #$0c			ldx 	#IFR1
.18b7	20 92 2c	jsr $2c92			jsr 	IFloatCompare 					; compare R1 vs 0.
.18ba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.18bb					EXPUnarySqr:
.18bb	20 43 16	jsr $1643			jsr 	EXPEvalNumber 					; number to R0
.18be	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.18c1	20 10 2c	jsr $2c10			jsr 	IFloatSquareRootR0 				; square root.
.18c4	b0 01		bcs $18c7			bcs 	_EUSValue
.18c6	60		rts				rts
.18c7					_EUSValue:
.18c7	4c 90 24	jmp $2490		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.18ca					EXPUnaryHex:
.18ca	20 4e 16	jsr $164e			jsr 	EXPEvalInteger 					; expr
.18cd	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.18d0	5a		phy				phy
.18d1	a9 10		lda #$10			lda 	#16
.18d3	20 65 2d	jsr $2d65			jsr 	IFloatIntegerToStringR0
.18d6	80 0a		bra $18e2			bra 	EUSMain
.18d8					EXPUnaryStr:
.18d8	20 43 16	jsr $1643			jsr 	EXPEvalNumber 					; expr
.18db	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.18de	5a		phy				phy
.18df	20 c1 2d	jsr $2dc1			jsr 	IFloatFloatToStringR0 			; convert to string
.18e2					EUSMain:
.18e2	b0 18		bcs $18fc			bcs 	_EUSError
.18e4	86 22		stx $22				stx 	zTemp0 							; save string address
.18e6	84 23		sty $23				sty 	zTemp0+1
.18e8	48		pha				pha 									; save count
.18e9	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.18eb	20 12 27	jsr $2712			jsr 	StringTempAllocate
.18ee	fa		plx				plx 									; count in X
.18ef	a0 00		ldy #$00			ldy 	#0
.18f1					_EUSCopy:
.18f1	b1 22		lda ($22),y			lda 	(zTemp0),y
.18f3	c8		iny				iny
.18f4	20 47 27	jsr $2747			jsr 	StringTempWrite
.18f7	ca		dex				dex
.18f8	d0 f7		bne $18f1			bne	 	_EUSCopy
.18fa	7a		ply				ply
.18fb	60		rts				rts
.18fc					_EUSError:
.18fc	4c 90 24	jmp $2490		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.18ff					EXPUnaryInlineString:
.18ff	18		clc				clc 								; physical address -> IM0,1
.1900	98		tya				tya
.1901	65 18		adc $18				adc 	codePtr
.1903	85 08		sta $08				sta 	IFR0+IM0
.1905	a5 19		lda $19				lda 	codePtr+1
.1907	69 00		adc #$00			adc 	#0
.1909	85 09		sta $09				sta 	IFR0+IM1
.190b	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.190d	a9 80		lda #$80			lda 	#$80
.190f	85 0b		sta $0b				sta 	IFR0+IExp
.1911	98		tya				tya	 								; skip over it.
.1912	38		sec				sec
.1913	71 18		adc ($18),y			adc 	(codePtr),y
.1915	a8		tay				tay
.1916	60		rts				rts
.1917					_EXPUISRange:
.1917	4c 90 24	jmp $2490		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.191a					EXPUnaryLeft:
.191a	20 60 19	jsr $1960			jsr 	EXPCommonStart 					; <string>,
.191d	48		pha				pha 									; save string address on stack
.191e	da		phx				phx
.191f	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1921	48		pha				pha
.1922	20 61 16	jsr $1661			jsr 	EXPEvalInteger8 				; characters to do
.1925	80 44		bra $196b			bra 	EXPSubstringCommon
.1927					EXPUnaryRight:
.1927	20 60 19	jsr $1960			jsr 	EXPCommonStart 					; <string>,
.192a	48		pha				pha 									; save string address on stack
.192b	da		phx				phx
.192c	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.192e	48		pha				pha
.192f	20 61 16	jsr $1661			jsr 	EXPEvalInteger8 				; characters to do
.1932	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1934	68		pla				pla
.1935	38		sec				sec
.1936	e5 22		sbc $22				sbc 	zTemp0
.1938	b0 02		bcs $193c			bcs 	_EUROffLeft
.193a	a9 00		lda #$00			lda 	#0
.193c					_EUROffLeft:
.193c	48		pha				pha 									; start pos
.193d	a9 ff		lda #$ff			lda 	#255
.193f	80 2a		bra $196b			bra 	EXPSubstringCommon
.1941					EXPUnaryMid:
.1941	20 60 19	jsr $1960			jsr 	EXPCommonStart 					; <string>,
.1944	48		pha				pha 									; save string address on stack
.1945	da		phx				phx
.1946	20 61 16	jsr $1661			jsr 	EXPEvalInteger8 				; characters start
.1949	f0 12		beq $195d			beq 	_EUSError 						; 1 is left
.194b	3a		dec a				dec 	a 								; zero based.
.194c	48		pha				pha
.194d	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.194f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1951	f0 04		beq $1957			beq 	_EUMLength 						; if so m is provided
.1953	a9 ff		lda #$ff			lda 	#255 							; default m
.1955	80 14		bra $196b			bra 	EXPSubstringCommon
.1957					_EUMLength:
.1957	c8		iny				iny 									; consume comma
.1958	20 61 16	jsr $1661			jsr 	EXPEvalInteger8 				; characters to do
.195b	80 0e		bra $196b			bra 	EXPSubstringCommon
.195d					_EUSError:
.195d	4c a1 24	jmp $24a1		jmp	ErrorV_value
.1960					EXPCommonStart:
.1960	20 6d 16	jsr $166d			jsr 	EXPEvalString
.1963	20 24 26	jsr $2624			jsr 	ERRCheckComma
.1966	a5 08		lda $08				lda 	IFR0+IM0
.1968	a6 09		ldx $09				ldx 	IFR0+IM1
.196a	60		rts				rts
.196b					EXPSubstringCommon:
.196b	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.196d	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; check right bracket.
.1970	68		pla				pla 									; start position
.1971	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1973	fa		plx				plx 									; get string address to zTemp2.
.1974	86 27		stx $27				stx 	zTemp2+1
.1976	68		pla				pla
.1977	85 26		sta $26				sta 	zTemp2
.1979	38		sec				sec 									; length - start is the max count of chars
.197a	b2 26		lda ($26)			lda 	(zTemp2)
.197c	e5 25		sbc $25				sbc 	zTemp1+1
.197e	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1980	b0 02		bcs $1984			bcs 	_EXPSSNoTrim
.1982	85 24		sta $24				sta 	zTemp1 							; update count with available
.1984					_EXPSSNoTrim:
.1984	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1986	20 12 27	jsr $2712			jsr 	StringTempAllocate 				; allocate memory for it.
.1989	a5 24		lda $24				lda 	zTemp1 							; zero length string
.198b	f0 15		beq $19a2			beq 	_EXPSSExit
.198d	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.198f	d2 26		cmp ($26)			cmp 	(zTemp2)
.1991	b0 0f		bcs $19a2			bcs 	_EXPSSExit
.1993	5a		phy				phy
.1994	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1996	c8		iny				iny 									; +1 for the length byte
.1997					_EXPSSCopy:
.1997	b1 26		lda ($26),y			lda 	(zTemp2),y
.1999	20 47 27	jsr $2747			jsr 	StringTempWrite
.199c	c8		iny				iny
.199d	c6 24		dec $24				dec 	zTemp1
.199f	d0 f6		bne $1997			bne 	_EXPSSCopy
.19a1	7a		ply				ply
.19a2					_EXPSSExit:
.19a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.19a3					EXPUnaryVal:
.19a3	20 6d 16	jsr $166d			jsr 	EXPEvalString 					; string to R0, zTemp0
.19a6	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 					; )
.19a9	20 ad 19	jsr $19ad			jsr 	VALConversionZTemp0
.19ac	60		rts				rts
.19ad					VALConversionZTemp0:
.19ad	5a		phy				phy
.19ae	18		clc				clc
.19af	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.19b1	69 01		adc #$01			adc 	#1
.19b3	aa		tax				tax
.19b4	a5 23		lda $23				lda 	zTemp0+1
.19b6	69 00		adc #$00			adc 	#0
.19b8	a8		tay				tay
.19b9	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.19bb	20 28 2e	jsr $2e28			jsr 	IFloatStringToFloatR0 			; do conversion
.19be	b0 02		bcs $19c2			bcs 	_EUVError
.19c0	7a		ply				ply
.19c1	60		rts				rts
.19c2					_EUVError:
.19c2	4c a1 24	jmp $24a1		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.19c5					BinaryPrecedence:
>19c5	02					.byte	 2	; $ef =
>19c6	02					.byte	 2	; $f0 <>
>19c7	02					.byte	 2	; $f1 <=
>19c8	02					.byte	 2	; $f2 <
>19c9	02					.byte	 2	; $f3 >=
>19ca	02					.byte	 2	; $f4 >
>19cb	01					.byte	 1	; $f5 XOR
>19cc	01					.byte	 1	; $f6 OR
>19cd	01					.byte	 1	; $f7 AND
>19ce	04					.byte	 4	; $f8 DIV
>19cf	04					.byte	 4	; $f9 MOD
>19d0	04					.byte	 4	; $fa <<
>19d1	04					.byte	 4	; $fb >>
>19d2	04					.byte	 4	; $fc /
>19d3	04					.byte	 4	; $fd *
>19d4	03					.byte	 3	; $fe -
>19d5	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.19d6					StructureOffsets:
>19d6	01					.byte	1  	; $80 REPEAT
>19d7	ff					.byte	255	; $81 UNTIL
>19d8	01					.byte	1  	; $82 WHILE
>19d9	ff					.byte	255	; $83 WEND
>19da	01					.byte	1  	; $84 IF
>19db	ff					.byte	255	; $85 ENDIF
>19dc	01					.byte	1  	; $86 DO
>19dd	ff					.byte	255	; $87 LOOP
>19de	01					.byte	1  	; $88 PROC
>19df	ff					.byte	255	; $89 ENDPROC
>19e0	01					.byte	1  	; $8a FOR
>19e1	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.19e2					StandardTokens:
>19e2	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>19e9	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>19ef	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>19f5	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>19fa	02 49 46				.byte	$02,$49,$46                             	; $84 if
>19fd	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1a03	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1a06	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1a0b	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1a10	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1a18	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1a1c	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1a21	00					.byte	$00                                     	; $8c [[end]]
>1a22	00					.byte	$00                                     	; $8d [[shift]]
>1a23	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1a28	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1a2d	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1a30	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1a35	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1a39	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1a3f	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1a45	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1a4a	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1a4e	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1a52	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1a57	01 2c					.byte	$01,$2c                                 	; $99 ,
>1a59	01 3b					.byte	$01,$3b                                 	; $9a ;
>1a5b	01 3a					.byte	$01,$3a                                 	; $9b :
>1a5d	01 27					.byte	$01,$27                                 	; $9c '
>1a5f	01 29					.byte	$01,$29                                 	; $9d )
>1a61	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1a65	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1a6b	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1a6f	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1a73	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1a78	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1a7c	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1a83	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1a88	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1a8d	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1a92	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1a97	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1a9c	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $aa read
>1aa1	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $ab data
>1aa6	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $ac restore
>1aae	00					.byte	0											; $ad
>1aaf	00					.byte	0											; $ae
>1ab0	00					.byte	0											; $af
>1ab1	00					.byte	0											; $b0
>1ab2	00					.byte	0											; $b1
>1ab3	00					.byte	0											; $b2
>1ab4	00					.byte	0											; $b3
>1ab5	00					.byte	0											; $b4
>1ab6	00					.byte	0											; $b5
>1ab7	00					.byte	0											; $b6
>1ab8	00					.byte	0											; $b7
>1ab9	00					.byte	0											; $b8
>1aba	00					.byte	0											; $b9
>1abb	00					.byte	0											; $ba
>1abc	00					.byte	0											; $bb
>1abd	00					.byte	0											; $bc
>1abe	00					.byte	0											; $bd
>1abf	00					.byte	0											; $be
>1ac0	00					.byte	0											; $bf
>1ac1	00					.byte	0											; $c0
>1ac2	00					.byte	0											; $c1
>1ac3	00					.byte	0											; $c2
>1ac4	00					.byte	0											; $c3
>1ac5	00					.byte	0											; $c4
>1ac6	00					.byte	0											; $c5
>1ac7	00					.byte	0											; $c6
>1ac8	00					.byte	0											; $c7
>1ac9	00					.byte	0											; $c8
>1aca	00					.byte	0											; $c9
>1acb	00					.byte	0											; $ca
>1acc	00					.byte	0											; $cb
>1acd	00					.byte	0											; $cc
>1ace	00					.byte	0											; $cd
>1acf	00					.byte	0											; $ce
>1ad0	00					.byte	0											; $cf
>1ad1	00					.byte	0											; $d0
>1ad2	00					.byte	0											; $d1
>1ad3	00					.byte	0											; $d2
>1ad4	00					.byte	0											; $d3
>1ad5	00					.byte	0											; $d4
>1ad6	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1adc	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1ae2	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1aea	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1af1	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1af7	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1afd	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1b02	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1b07	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1b0c	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1b11	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1b16	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1b1c	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1b21	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1b29	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1b30	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1b35	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1b3a	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1b40	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1b45	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1b4b	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1b50	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1b56	01 28					.byte	$01,$28                                 	; $eb (
>1b58	01 24					.byte	$01,$24                                 	; $ec $
>1b5a	00					.byte	$00                                     	; $ed [[decimal]]
>1b5b	00					.byte	$00                                     	; $ee [[string]]
>1b5c	01 3d					.byte	$01,$3d                                 	; $ef =
>1b5e	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1b61	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1b64	01 3c					.byte	$01,$3c                                 	; $f2 <
>1b66	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1b69	01 3e					.byte	$01,$3e                                 	; $f4 >
>1b6b	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1b6f	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1b72	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1b76	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1b7a	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1b7e	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1b81	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1b84	01 2f					.byte	$01,$2f                                 	; $fc /
>1b86	01 2a					.byte	$01,$2a                                 	; $fd *
>1b88	01 2d					.byte	$01,$2d                                 	; $fe -
>1b8a	01 2b					.byte	$01,$2b                                 	; $ff +
>1b8c	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1b8d					VectorTable:
>1b8d	6f 23					.word	Command_REPEAT           ; $80 REPEAT
>1b8f	78 23					.word	Command_UNTIL            ; $81 UNTIL
>1b91	52 24					.word	Command_WHILE            ; $82 WHILE
>1b93	73 24					.word	Command_WEND             ; $83 WEND
>1b95	45 23					.word	IfCommand                ; $84 IF
>1b97	6e 23					.word	EndIf                    ; $85 ENDIF
>1b99	e2 21					.word	Command_DO               ; $86 DO
>1b9b	fa 21					.word	Command_LOOP             ; $87 LOOP
>1b9d	83 14					.word	NoExec08                 ; $88 PROC
>1b9f	d6 21					.word	Command_ENDPROC          ; $89 ENDPROC
>1ba1	03 22					.word	Command_FOR              ; $8a FOR
>1ba3	90 22					.word	Command_NEXT             ; $8b NEXT
>1ba5	09 14					.word	RUNEndOfLine             ; $8c [[END]]
>1ba7	65 14					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1ba9	67 23					.word	ElseCode                 ; $8e ELSE
>1bab	83 14					.word	NoExec01                 ; $8f THEN
>1bad	83 14					.word	NoExec02                 ; $90 TO
>1baf	83 14					.word	NoExec03                 ; $91 STEP
>1bb1	8b 12					.word	CommandLET               ; $92 LET
>1bb3	dc 11					.word	Command_Print            ; $93 PRINT
>1bb5	d5 11					.word	Command_Input            ; $94 INPUT
>1bb7	9a 21					.word	Command_CALL             ; $95 CALL
>1bb9	6e 14					.word	Command_Sys              ; $96 SYS
>1bbb	de 13					.word	Command_REM              ; $97 REM
>1bbd	eb 21					.word	Command_EXIT             ; $98 EXIT
>1bbf	83 14					.word	NoExec04                 ; $99 ,
>1bc1	83 14					.word	NoExec05                 ; $9a ;
>1bc3	83 14					.word	NoExec06                 ; $9b :
>1bc5	de 13					.word	Command_REM2             ; $9c '
>1bc7	83 14					.word	NoExec07                 ; $9d )
>1bc9	8f 10					.word	CommandDIM               ; $9e DIM
>1bcb	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1bcd	d5 13					.word	Command_NEW              ; $a0 NEW
>1bcf	fd 13					.word	Command_RUN              ; $a1 RUN
>1bd1	6b 14					.word	Command_STOP             ; $a2 STOP
>1bd3	68 14					.word	Command_END              ; $a3 END
>1bd5	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1bd7	05 13					.word	Command_LIST             ; $a5 LIST
>1bd9	99 27					.word	NotImplemented           ; $a6 SAVE
>1bdb	99 27					.word	NotImplemented           ; $a7 LOAD
>1bdd	ae 11					.word	Command_Poke             ; $a8 POKE
>1bdf	ab 11					.word	Command_Doke             ; $a9 DOKE
>1be1	99 27					.word	NotImplemented           ; $aa READ
>1be3	99 27					.word	NotImplemented           ; $ab DATA
>1be5	eb 13					.word	Command_RESTORE          ; $ac RESTORE
>1be7	99 27					.word	NotImplemented           ; $ad
>1be9	99 27					.word	NotImplemented           ; $ae
>1beb	99 27					.word	NotImplemented           ; $af
>1bed	99 27					.word	NotImplemented           ; $b0
>1bef	99 27					.word	NotImplemented           ; $b1
>1bf1	99 27					.word	NotImplemented           ; $b2
>1bf3	99 27					.word	NotImplemented           ; $b3
>1bf5	99 27					.word	NotImplemented           ; $b4
>1bf7	99 27					.word	NotImplemented           ; $b5
>1bf9	99 27					.word	NotImplemented           ; $b6
>1bfb	99 27					.word	NotImplemented           ; $b7
>1bfd	99 27					.word	NotImplemented           ; $b8
>1bff	99 27					.word	NotImplemented           ; $b9
>1c01	99 27					.word	NotImplemented           ; $ba
>1c03	99 27					.word	NotImplemented           ; $bb
>1c05	99 27					.word	NotImplemented           ; $bc
>1c07	99 27					.word	NotImplemented           ; $bd
>1c09	99 27					.word	NotImplemented           ; $be
>1c0b	99 27					.word	NotImplemented           ; $bf
>1c0d	99 27					.word	NotImplemented           ; $c0
>1c0f	99 27					.word	NotImplemented           ; $c1
>1c11	99 27					.word	NotImplemented           ; $c2
>1c13	99 27					.word	NotImplemented           ; $c3
>1c15	99 27					.word	NotImplemented           ; $c4
>1c17	99 27					.word	NotImplemented           ; $c5
>1c19	99 27					.word	NotImplemented           ; $c6
>1c1b	99 27					.word	NotImplemented           ; $c7
>1c1d	99 27					.word	NotImplemented           ; $c8
>1c1f	99 27					.word	NotImplemented           ; $c9
>1c21	99 27					.word	NotImplemented           ; $ca
>1c23	99 27					.word	NotImplemented           ; $cb
>1c25	99 27					.word	NotImplemented           ; $cc
>1c27	99 27					.word	NotImplemented           ; $cd
>1c29	99 27					.word	NotImplemented           ; $ce
>1c2b	99 27					.word	NotImplemented           ; $cf
>1c2d	99 27					.word	NotImplemented           ; $d0
>1c2f	99 27					.word	NotImplemented           ; $d1
>1c31	99 27					.word	NotImplemented           ; $d2
>1c33	99 27					.word	NotImplemented           ; $d3
>1c35	99 27					.word	NotImplemented           ; $d4
>1c37	e6 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1c39	d8 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1c3b	27 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1c3d	1a 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1c3f	41 19					.word	EXPUnaryMid              ; $d9 MID$(
>1c41	d8 18					.word	EXPUnaryStr              ; $da STR$(
>1c43	a3 19					.word	EXPUnaryVal              ; $db VAL(
>1c45	a5 18					.word	EXPUnarySgn              ; $dc SGN(
>1c47	56 17					.word	EXPUnaryAbs              ; $dd ABS(
>1c49	2a 18					.word	EXPUnaryLen              ; $de LEN(
>1c4b	bb 18					.word	EXPUnarySqr              ; $df SQR(
>1c4d	76 17					.word	EXPUnaryChr              ; $e0 CHR$(
>1c4f	60 17					.word	EXPUnaryAsc              ; $e1 ASC(
>1c51	0c 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1c53	99 27					.word	NotImplemented           ; $e3 EVENT(
>1c55	99 27					.word	NotImplemented           ; $e4 TIME
>1c57	20 18					.word	EXPUnaryInt              ; $e5 INT(
>1c59	02 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1c5b	87 17					.word	EXPUnaryDec              ; $e7 DEC(
>1c5d	ca 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1c5f	3f 18					.word	EXPUnaryRnd              ; $e9 RND(
>1c61	4f 18					.word	ExpUnaryRand             ; $ea RAND(
>1c63	38 18					.word	EXPUnaryParenthesis      ; $eb (
>1c65	fe 17					.word	EXPUnaryNull             ; $ec $
>1c67	d5 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1c69	ff 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1c6b	40 15					.word	EXPCompareEqual          ; $ef =
>1c6d	5b 15					.word	EXPCompareNotEqual       ; $f0 <>
>1c6f	64 15					.word	EXPCompareLessEqual      ; $f1 <=
>1c71	49 15					.word	EXPCompareLess           ; $f2 <
>1c73	6d 15					.word	EXPCompareGreaterEqual   ; $f3 >=
>1c75	52 15					.word	EXPCompareGreater        ; $f4 >
>1c77	ed 14					.word	EXPBinXor                ; $f5 XOR
>1c79	e1 14					.word	EXPBinOr                 ; $f6 OR
>1c7b	d5 14					.word	EXPBinAnd                ; $f7 AND
>1c7d	ad 14					.word	EXPBinIDiv               ; $f8 DIV
>1c7f	be 14					.word	EXPBinIMod               ; $f9 MOD
>1c81	b8 15					.word	EXPBinLeft               ; $fa <<
>1c83	c0 15					.word	EXPBinRight              ; $fb >>
>1c85	a1 14					.word	EXPBinFDiv               ; $fc /
>1c87	98 14					.word	EXPBinMul                ; $fd *
>1c89	8f 14					.word	EXPBinSub                ; $fe -
>1c8b	86 14					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1c8d					TOKDetokenise:
.1c8d	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1c8f	84 27		sty $27				sty 	zTemp2+1
.1c91	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1c94					_TOKDLoop:
.1c94	20 c3 1c	jsr $1cc3			jsr 	TOKDGet 					; get next
.1c97	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1c99	f0 26		beq $1cc1			beq 	_TOKDExit
.1c9b	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1c9d	f0 1d		beq $1cbc			beq 	_TOKDDataItem
.1c9f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1ca1	f0 19		beq $1cbc			beq 	_TOKDDataItem
.1ca3	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1ca5	10 05		bpl $1cac			bpl 	_TOKDNotToken
.1ca7	20 8b 1d	jsr $1d8b			jsr 	TOKDToken 					; token to text.
.1caa	80 e8		bra $1c94			bra 	_TOKDLoop
.1cac					_TOKDNotToken:
.1cac	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1cae	90 05		bcc $1cb5			bcc 	_TOKDNotIdentifier
.1cb0	20 fe 1c	jsr $1cfe			jsr 	TOKDIdentifier
.1cb3	80 df		bra $1c94			bra 	_TOKDLoop
.1cb5					_TOKDNotIdentifier:
.1cb5	a0 0a		ldy #$0a			ldy 	#10
.1cb7	20 47 1d	jsr $1d47			jsr 	TOKDInteger
.1cba	80 d8		bra $1c94			bra 	_TOKDLoop
.1cbc					_TOKDDataItem:
.1cbc	20 d9 1c	jsr $1cd9			jsr 	TOKDDataItem
.1cbf	80 d3		bra $1c94			bra 	_TOKDLoop
.1cc1					_TOKDExit:
.1cc1	18		clc				clc
.1cc2	60		rts				rts
.1cc3	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1cc5	e6 26		inc $26				inc 	zTemp2
.1cc7	d0 02		bne $1ccb			bne 	_TKDGExit
.1cc9	e6 27		inc $27				inc 	zTemp2+1
.1ccb					_TKDGExit:
.1ccb	60		rts				rts
.1ccc					TOKDOutput:
.1ccc	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1ccf	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1cd2					TOKSetDetokeniseOutput:
.1cd2	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1cd5	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1cd8	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1cd9					TOKDDataItem:
.1cd9	a8		tay				tay 								; type in Y
.1cda	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1cdc	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1cde	f0 02		beq $1ce2			beq 	_TOKDDIsString
.1ce0	a9 2e		lda #$2e			lda 	#'.'
.1ce2					_TOKDDIsString:
.1ce2	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput 					; dump it
.1ce5	20 c3 1c	jsr $1cc3			jsr 	TOKDGet 					; get length into X
.1ce8	aa		tax				tax
.1ce9					_TOKDDOutput:
.1ce9	ca		dex				dex 								; are we complete
.1cea	30 08		bmi $1cf4			bmi 	_TOKDDEnd
.1cec	20 c3 1c	jsr $1cc3			jsr 	TOKDGet 					; get character and output it
.1cef	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1cf2	80 f5		bra $1ce9			bra 	_TOKDDOutput
.1cf4					_TOKDDEnd:
.1cf4	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1cf6	d0 05		bne $1cfd			bne 	_TOKDDNotString
.1cf8	a9 22		lda #$22			lda 	#'"'
.1cfa	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1cfd					_TOKDDNotString:
.1cfd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1cfe					TOKDIdentifier:
.1cfe	a0 ff		ldy #$ff			ldy 	#$FF
.1d00	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1d03					_TOKDLoop:
.1d03	a8		tay				tay 								; token in Y
.1d04	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1d06	c0 64		cpy #$64			cpy 	#$64
.1d08	f0 11		beq $1d1b			beq 	_TOKDIOutput
.1d0a	a9 5f		lda #$5f			lda 	#'_'
.1d0c	c0 65		cpy #$65			cpy 	#$65
.1d0e	f0 0b		beq $1d1b			beq 	_TOKDIOutput
.1d10	98		tya				tya 								; handle a-z
.1d11	18		clc				clc
.1d12	69 21		adc #$21			adc	 	#$21
.1d14	c0 5a		cpy #$5a			cpy 	#$5A
.1d16	90 03		bcc $1d1b			bcc 	_TOKDIOutput
.1d18	38		sec				sec 								; handle 0-9
.1d19	e9 4b		sbc #$4b			sbc 	#$4B
.1d1b					_TOKDIOutput:
.1d1b	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1d1e	10 08		bpl $1d28			bpl 	_TOKDINoSpacing
.1d20	48		pha				pha
.1d21	20 bd 1d	jsr $1dbd			jsr 	TOKDSpacing
.1d24	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1d27	68		pla				pla
.1d28					_TOKDINoSpacing:
.1d28	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1d2b	20 c3 1c	jsr $1cc3			jsr 	TOKDGet 					; get next token
.1d2e	c9 7c		cmp #$7c			cmp 	#$7C
.1d30	90 d1		bcc $1d03			bcc 	_TOKDLoop
.1d32	f0 12		beq $1d46			beq 	_TOKDIExit 					; it's a number, no tail.
.1d34	4a		lsr a				lsr 	a 							; string ?
.1d35	90 07		bcc $1d3e			bcc 	_TOKDICheckArray
.1d37	48		pha				pha
.1d38	a9 24		lda #$24			lda 	#"$"
.1d3a	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1d3d	68		pla				pla
.1d3e					_TOKDICheckArray:
.1d3e	4a		lsr a				lsr 	a 							; array ?
.1d3f	90 05		bcc $1d46			bcc 	_TOKDIExit
.1d41	a9 28		lda #$28			lda 	#"("
.1d43	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1d46					_TOKDIExit:
.1d46	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1d47					TOKDInteger:
.1d47	5a		phy				phy 								; save base
.1d48	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1d4a	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.1d4d					_TOKDILoop:
.1d4d	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1d4f	c9 40		cmp #$40			cmp 	#$40
.1d51	b0 1d		bcs $1d70			bcs 	_TOKDIHaveInteger
.1d53	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1d55	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1d58	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1d5b	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1d5e	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1d61	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1d64	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1d67	20 c3 1c	jsr $1cc3			jsr 	TOKDGet 					; OR byte in.
.1d6a	05 08		ora $08				ora 	IFR0+IM0
.1d6c	85 08		sta $08				sta 	IFR0+IM0
.1d6e	80 dd		bra $1d4d			bra 	_TOKDILoop
.1d70					_TOKDIHaveInteger:
.1d70	7a		ply				ply 								; restore base
.1d71	98		tya				tya 								; base in A
.1d72	20 65 2d	jsr $2d65			jsr 	IFloatIntegerToStringR0
.1d75	86 22		stx $22				stx 	zTemp0
.1d77	84 23		sty $23				sty 	zTemp0+1
.1d79	b2 22		lda ($22)			lda 	(zTemp0)
.1d7b	20 bd 1d	jsr $1dbd			jsr 	TOKDSpacing 				; check spacing okay.
.1d7e	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1d80					_TOKDOutput:
.1d80	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d82	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1d85	c8		iny				iny
.1d86	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d88	d0 f6		bne $1d80			bne 	_TOKDOutput
.1d8a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1d8b					TOKDToken:
.1d8b	a2 e2		ldx #$e2			ldx 	#StandardTokens & $FF
.1d8d	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1d8f					_TOKDSearch:
.1d8f	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1d91	84 23		sty $23				sty 	zTemp0+1
.1d93	aa		tax				tax 								; token ID in X.
.1d94					_TOKDFind:
.1d94	ca		dex				dex 								; reached the start
.1d95	10 0d		bpl $1da4			bpl 	_TOKDFound
.1d97	38		sec				sec 								; go to next entry
.1d98	b2 22		lda ($22)			lda 	(zTemp0)
.1d9a	65 22		adc $22				adc 	zTemp0
.1d9c	85 22		sta $22				sta 	zTemp0
.1d9e	90 f4		bcc $1d94			bcc 	_TOKDFind
.1da0	e6 23		inc $23				inc 	zTemp0+1
.1da2	80 f0		bra $1d94			bra 	_TOKDFind
.1da4					_TOKDFound:
.1da4	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1da6	f0 14		beq $1dbc			beq 	_TOKDExit
.1da8	aa		tax				tax
.1da9	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1dab	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1dad	20 bd 1d	jsr $1dbd			jsr 	TOKDSpacing
.1db0					_TOKDOutput:
.1db0	b1 22		lda ($22),y			lda 	(zTemp0),y
.1db2	20 55 21	jsr $2155			jsr 	TOKToLower
.1db5	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1db8	c8		iny				iny
.1db9	ca		dex				dex
.1dba	d0 f4		bne $1db0			bne 	_TOKDOutput
.1dbc					_TOKDExit:
.1dbc	60		rts				rts
.1dbd					TOKDSpacing:
.1dbd	20 6c 21	jsr $216c			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1dc0	90 0d		bcc $1dcf			bcc 	_TOKDSExit
.1dc2	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1dc5	20 6c 21	jsr $216c			jsr 	TOKIsIdentifierElement
.1dc8	90 05		bcc $1dcf			bcc 	_TOKDSExit
.1dca	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1dcc	20 cc 1c	jsr $1ccc			jsr 	TOKDOutput
.1dcf					_TOKDSExit:
.1dcf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1dd0					PGMDeleteLine:
.1dd0	20 83 1e	jsr $1e83			jsr 	PGMEndProgram 				; end of program into zTemp0
.1dd3	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1dd5	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1dd8	85 25		sta $25				sta 	zTemp1+1
.1dda					_PGMDLoop:
.1dda	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1ddc	38		sec				sec
.1ddd	f0 3a		beq $1e19			beq 	_PGMDExit
.1ddf	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1de1	b1 24		lda ($24),y			lda 	(zTemp1),y
.1de3	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1de6	d0 08		bne $1df0			bne 	_PGMDNext
.1de8	c8		iny				iny
.1de9	b1 24		lda ($24),y			lda 	(zTemp1),y
.1deb	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1dee	f0 0d		beq $1dfd			beq 	_PGMDDelete
.1df0					_PGMDNext:
.1df0	18		clc				clc
.1df1	b2 24		lda ($24)			lda 	(zTemp1)
.1df3	65 24		adc $24				adc 	zTemp1
.1df5	85 24		sta $24				sta 	zTemp1
.1df7	90 e1		bcc $1dda			bcc 	_PGMDLoop
.1df9	e6 25		inc $25				inc 	zTemp1+1
.1dfb	80 dd		bra $1dda			bra 	_PGMDLoop
.1dfd					_PGMDDelete:
.1dfd	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1dff	a8		tay				tay
.1e00					_PGMDCopy:
.1e00	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1e02	92 24		sta ($24)			sta 	(zTemp1)
.1e04	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1e06	c5 22		cmp $22				cmp 	zTemp0
.1e08	d0 07		bne $1e11			bne 	_PGMDNext2
.1e0a	a5 25		lda $25				lda 	zTemp1+1
.1e0c	c5 23		cmp $23				cmp 	zTemp0+1
.1e0e	18		clc				clc
.1e0f	f0 08		beq $1e19			beq 	_PGMDExit
.1e11					_PGMDNext2:
.1e11	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1e13	d0 eb		bne $1e00			bne 	_PGMDCopy
.1e15	e6 25		inc $25				inc 	zTemp1+1
.1e17	80 e7		bra $1e00			bra 	_PGMDCopy
.1e19					_PGMDExit:
.1e19	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1e1a					PGMInsertLine:
.1e1a	20 83 1e	jsr $1e83			jsr 	PGMEndProgram 				; end of program into zTemp0
.1e1d	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1e1f	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1e22	85 25		sta $25				sta 	zTemp1+1
.1e24					_PGMILoop:
.1e24	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1e26	f0 1c		beq $1e44			beq 	_PGMIInsert
.1e28	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1e2a	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e2c	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1e2f	c8		iny				iny
.1e30	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e32	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1e35	b0 0d		bcs $1e44			bcs 	_PGMIInsert 				; insert here.
.1e37	18		clc				clc
.1e38	b2 24		lda ($24)			lda 	(zTemp1)
.1e3a	65 24		adc $24				adc 	zTemp1
.1e3c	85 24		sta $24				sta 	zTemp1
.1e3e	90 e4		bcc $1e24			bcc 	_PGMILoop
.1e40	e6 25		inc $25				inc 	zTemp1+1
.1e42	80 e0		bra $1e24			bra 	_PGMILoop
.1e44					_PGMIInsert:
.1e44	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1e47					_PGMIInsertLoop:
.1e47	b2 22		lda ($22)			lda 	(zTemp0)
.1e49	91 22		sta ($22),y			sta 	(zTemp0),y
.1e4b	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1e4d	c5 22		cmp $22				cmp 	zTemp0
.1e4f	d0 06		bne $1e57			bne 	_PGMINext
.1e51	a5 25		lda $25				lda 	zTemp1+1
.1e53	c5 23		cmp $23				cmp 	zTemp0+1
.1e55	f0 0a		beq $1e61			beq 	_PGMIInserted
.1e57					_PGMINext:
.1e57	a5 22		lda $22				lda 	zTemp0
.1e59	d0 02		bne $1e5d			bne 	_PGMINoBorrow
.1e5b	c6 23		dec $23				dec 	zTemp0+1
.1e5d					_PGMINoBorrow:
.1e5d	c6 22		dec $22				dec 	zTemp0
.1e5f	80 e6		bra $1e47			bra 	_PGMIInsertLoop
.1e61					_PGMIInserted:
.1e61	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1e63					_PGMICopyLoop:
.1e63	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1e66	91 24		sta ($24),y			sta 	(zTemp1),y
.1e68	c8		iny				iny
.1e69	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1e6c	d0 f5		bne $1e63			bne 	_PGMICopyLoop
.1e6e	18		clc				clc
.1e6f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1e70					PGMSetBaseAddress:
.1e70	8e 1a 05	stx $051a			stx 	PGMBaseHigh
.1e73	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh
.1e76	60		rts				rts
.1e77					PGMNewProgram:
.1e77	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1e79	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1e7c	85 23		sta $23				sta 	zTemp0+1
.1e7e	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1e80	92 22		sta ($22)			sta 	(zTemp0)
.1e82	60		rts				rts
.1e83					PGMEndProgram:
.1e83	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1e85	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1e88	85 23		sta $23				sta 	zTemp0+1
.1e8a					_PGMEPLoop:
.1e8a	b2 22		lda ($22)			lda 	(zTemp0)
.1e8c	f0 0b		beq $1e99			beq 	_PGMEPExit
.1e8e	18		clc				clc
.1e8f	65 22		adc $22				adc 	zTemp0
.1e91	85 22		sta $22				sta 	zTemp0
.1e93	90 f5		bcc $1e8a			bcc 	_PGMEPLoop
.1e95	e6 23		inc $23				inc 	zTemp0+1
.1e97	80 f1		bra $1e8a			bra 	_PGMEPLoop
.1e99					_PGMEPExit:
.1e99	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1e9a					TOKResetElement:
.1e9a	9c 1c 05	stz $051c			stz 	TOKElement
.1e9d	60		rts				rts
.1e9e					TOKWriteElement:
.1e9e	da		phx				phx
.1e9f	ae 1c 05	ldx $051c			ldx 	TOKElement
.1ea2	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1ea5	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1ea8	fa		plx				plx
.1ea9	ee 1c 05	inc $051c			inc 	TOKElement
.1eac	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1ead					TOKTokeniseConstant:
.1ead	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1eaf	48		pha				pha 								; save on stack
.1eb0	29 c0		and #$c0			and 	#$C0
.1eb2	05 09		ora $09				ora 	IFR0+IM1
.1eb4	05 0a		ora $0a				ora 	IFR0+IM2
.1eb6	f0 10		beq $1ec8			beq 	_TTCLess
.1eb8	da		phx				phx
.1eb9	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1ebb					_TTCShiftRight:
.1ebb	46 0a		lsr $0a				lsr 	IFR0+IM2
.1ebd	66 09		ror $09				ror 	IFR0+IM1
.1ebf	66 08		ror $08				ror 	IFR0+IM0
.1ec1	ca		dex				dex
.1ec2	d0 f7		bne $1ebb			bne 	_TTCShiftRight
.1ec4	fa		plx				plx
.1ec5	20 ad 1e	jsr $1ead			jsr 	TOKTokeniseConstant
.1ec8					_TTCLess:
.1ec8	68		pla				pla
.1ec9	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1ecb	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.1ece	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1ecf					TOKTokeniseDecimals:
.1ecf	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; consume the .
.1ed2	20 e2 20	jsr $20e2			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ed5	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1ed7	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.1eda	20 df 1e	jsr $1edf			jsr 	TOKOutputElementBuffer 		; then the buffer
.1edd	18		clc				clc
.1ede	60		rts				rts
.1edf					TOKOutputElementBuffer:
.1edf	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1ee2	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.1ee5	a8		tay				tay 								; put in Y
.1ee6	f0 0c		beq $1ef4			beq 	_TOEExit 					; exit if empty which is okay.
.1ee8	a2 01		ldx #$01			ldx 	#1
.1eea					_TOELoop:
.1eea	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1eed	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.1ef0	e8		inx				inx
.1ef1	88		dey				dey
.1ef2	d0 f6		bne $1eea			bne 	_TOELoop
.1ef4					_TOEExit:
.1ef4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1ef5					TOKTokenise:
.1ef5	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.1ef8	8e 1c 06	stx $061c			stx 	TOKDataSource
.1efb	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1efd	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.1f00	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1f02	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1f05	9c 01 04	stz $0401			stz 	TOKLineNumber
.1f08	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1f0b					_TOKMainLoop:
.1f0b	20 76 1f	jsr $1f76			jsr 	TOKGet 						; what follows.
.1f0e	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1f10	f0 4f		beq $1f61			beq 	_TOKExit
.1f12	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1f14	d0 05		bne $1f1b			bne 	_TOKElement
.1f16	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext
.1f19	80 f0		bra $1f0b			bra 	_TOKMainLoop
.1f1b					_TOKElement:
.1f1b	20 60 21	jsr $2160			jsr 	TOKIsDigit 					; is it 0..9
.1f1e	90 0a		bcc $1f2a			bcc 	_TOKNotDigit
.1f20	20 b9 20	jsr $20b9			jsr 	TOKTokeniseInteger 			; get integer
.1f23	b0 43		bcs $1f68			bcs 	_TOKFail 					; did it fail ?
.1f25	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1f28	80 e1		bra $1f0b			bra 	_TOKMainLoop
.1f2a					_TOKNotDigit:
.1f2a	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1f2d	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1f2f	d0 07		bne $1f38			bne 	_TOKNotHex
.1f31	20 c3 1f	jsr $1fc3			jsr 	TOKTokeniseHexadecimal
.1f34	b0 32		bcs $1f68			bcs 	_TOKFail
.1f36	80 d3		bra $1f0b			bra 	_TOKMainLoop
.1f38					_TOKNotHex:
.1f38	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1f3a	d0 07		bne $1f43			bne 	_TOKNotDecimal
.1f3c	20 cf 1e	jsr $1ecf			jsr 	TOKTokeniseDecimals
.1f3f	b0 27		bcs $1f68			bcs 	_TOKFail
.1f41	80 c8		bra $1f0b			bra 	_TOKMainLoop
.1f43					_TOKNotDecimal:
.1f43	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1f45	d0 07		bne $1f4e			bne 	_TOKNotString
.1f47	20 27 21	jsr $2127			jsr 	TOKTokeniseString
.1f4a	b0 1c		bcs $1f68			bcs 	_TOKFail
.1f4c	80 bd		bra $1f0b			bra 	_TOKMainLoop
.1f4e					_TOKNotString:
.1f4e	20 7d 21	jsr $217d			jsr 	TOKIsAlpha 					; identifier ?
.1f51	b0 07		bcs $1f5a			bcs 	_TOKIdentifier
.1f53	20 f6 20	jsr $20f6			jsr 	TOKTokenisePunctuation 		; punctuation
.1f56	b0 10		bcs $1f68			bcs 	_TOKFail
.1f58	80 b1		bra $1f0b			bra 	_TOKMainLoop
.1f5a					_TOKIdentifier:
.1f5a	20 fd 1f	jsr $1ffd			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1f5d	b0 09		bcs $1f68			bcs 	_TOKFail
.1f5f	80 aa		bra $1f0b			bra 	_TOKMainLoop
.1f61					_TOKExit:
.1f61	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1f63	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.1f66	18		clc				clc									; return with carry set.
.1f67	60		rts				rts
.1f68					_TOKFail:
.1f68	38		sec				sec
.1f69	60		rts				rts
.1f6a					TOKWriteA:
.1f6a	da		phx				phx
.1f6b	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1f6e	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1f71	fa		plx				plx
.1f72	ee 00 04	inc $0400			inc 	TOKLineSize
.1f75	60		rts				rts
.1f76					TOKGet:
.1f76	18		clc				clc
.1f77	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.1f7a					TOKGetNext:
.1f7a	38		sec				sec
.1f7b	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1f7e					TOKFindToken:
.1f7e	a2 e2		ldx #$e2			ldx 	#StandardTokens & $FF 		; do this table
.1f80	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1f82	20 8d 1f	jsr $1f8d			jsr 	TOKFindTokenXY 				; find it, or not
.1f85	90 04		bcc $1f8b			bcc 	_TOKFTFail
.1f87	a2 00		ldx #$00			ldx 	#0
.1f89	38		sec				sec
.1f8a	60		rts				rts
.1f8b					_TOKFTFail
.1f8b	18		clc				clc
.1f8c	60		rts				rts
.1f8d					TOKFindTokenXY:
.1f8d	86 22		stx $22				stx 	zTemp0 						; save token table address
.1f8f	84 23		sty $23				sty 	zTemp0+1
.1f91	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1f93	8d 1f 06	sta $061f			sta 	TOKCurrent
.1f96					_TOKFindLoop:
.1f96	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.1f98	18		clc				clc 		 						; clear carry in case of fail
.1f99	30 17		bmi $1fb2			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1f9b	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.1f9e	d0 13		bne $1fb3			bne 	_TOKNext 					; different, try next.
.1fa0	aa		tax				tax 								; number of chars to compare.
.1fa1	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1fa3					_TOKCompare:
.1fa3	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.1fa5	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.1fa8	d0 09		bne $1fb3			bne 	_TOKNext 					; different ? try next
.1faa	c8		iny				iny 								; compare next two
.1fab	ca		dex				dex
.1fac	d0 f5		bne $1fa3			bne 	_TOKCompare 				; until done X characters.
.1fae	38		sec				sec
.1faf	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.1fb2					_TOKExit:
.1fb2	60		rts				rts
.1fb3					_TOKNext:
.1fb3	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.1fb6	38		sec				sec 								; add length+1 to ptr
.1fb7	b2 22		lda ($22)			lda 	(zTemp0)
.1fb9	65 22		adc $22				adc 	zTemp0
.1fbb	85 22		sta $22				sta 	zTemp0
.1fbd	90 d7		bcc $1f96			bcc 	_TOKFindLoop
.1fbf	e6 23		inc $23				inc 	zTemp0+1
.1fc1	80 d3		bra $1f96			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1fc3					TOKTokeniseHexadecimal:
.1fc3	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; consume the $
.1fc6	a2 08		ldx #$08			ldx 	#IFR0
.1fc8	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero 				; set R0 = 0
.1fcb					_TTHLoop:
.1fcb	20 76 1f	jsr $1f76			jsr 	TOKGet 						; keep getting and copying while numeric.
.1fce	20 8a 21	jsr $218a			jsr 	TOKIsHexadecimal
.1fd1	90 20		bcc $1ff3			bcc 	_TTHDone
.1fd3	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.1fd5	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1fd8	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1fdb	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1fde	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.1fe1	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext
.1fe4	38		sec				sec 								; convert to decimal.
.1fe5	e9 30		sbc #$30			sbc 	#48
.1fe7	c9 0a		cmp #$0a			cmp 	#10
.1fe9	90 02		bcc $1fed			bcc 	_TTHNotAlpha
.1feb	e9 07		sbc #$07			sbc 	#7
.1fed					_TTHNotAlpha:
.1fed	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.1fef	85 08		sta $08				sta 	IFR0+IM0
.1ff1	80 d8		bra $1fcb			bra 	_TTHLoop
.1ff3					_TTHDone:
.1ff3	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1ff5	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.1ff8	20 ad 1e	jsr $1ead			jsr 	TOKTokeniseConstant 		; write integer out.
.1ffb	18		clc				clc
.1ffc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1ffd					TOKTokeniseIdentifier:
.1ffd	20 9a 1e	jsr $1e9a			jsr 	TOKResetElement 			; extract an identifier
.2000					_TOKGetIdentifier:
.2000	20 76 1f	jsr $1f76			jsr 	TOKGet
.2003	20 4a 21	jsr $214a			jsr 	TOKToUpper
.2006	20 6c 21	jsr $216c			jsr 	TOKIsIdentifierElement
.2009	90 08		bcc $2013			bcc 	_TOKEndIdent
.200b	20 9e 1e	jsr $1e9e			jsr		TOKWriteElement
.200e	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext
.2011	80 ed		bra $2000			bra 	_TOKGetIdentifier
.2013					_TOKEndIdent:
.2013	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2015	d0 06		bne $201d			bne 	_TOKNotString
.2017	20 9e 1e	jsr $1e9e			jsr 	TOKWriteElement 			; add it
.201a	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; consume it
.201d					_TOKNotString:
.201d	20 76 1f	jsr $1f76			jsr 	TOKGet 						; finally check for (
.2020	c9 28		cmp #$28			cmp 	#"("
.2022	d0 06		bne $202a			bne 	_TOKNoArray
.2024	20 9e 1e	jsr $1e9e			jsr 	TOKWriteElement 			; add it
.2027	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; consume it
.202a					_TOKNoArray:
.202a	20 7e 1f	jsr $1f7e			jsr 	TOKFindToken 				; find it
.202d	90 0e		bcc $203d			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.202f	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2031	f0 05		beq $2038			beq 	_TOKComment 				; yes, do comment code.
.2033	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.2036	18		clc				clc
.2037	60		rts				rts
.2038					_TOKComment:
.2038	20 84 20	jsr $2084			jsr 	TOKDoComment
.203b	18		clc				clc
.203c	60		rts				rts
.203d					_TOKIsVariable:
.203d	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.203f					_TOKOutputBuffer:
.203f	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2042	20 6b 20	jsr $206b			jsr 	TOKTranslateIdentifier
.2045	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.2048	e8		inx				inx
.2049	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.204c	20 6c 21	jsr $216c			jsr 	TOKIsIdentifierElement
.204f	b0 ee		bcs $203f			bcs 	_TOKOutputBuffer
.2051	a8		tay				tay 								; last char in Y
.2052	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2054	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2056	f0 0e		beq $2066			beq 	_TOKIVExit
.2058	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.205a	d0 04		bne $2060			bne 	_TOKIVCheckArray 			; no, check for (
.205c	1a		inc a				inc 	a 							; token is $7D
.205d	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2060					_TOKIVCheckArray:
.2060	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2062	d0 02		bne $2066			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2064	1a		inc a				inc 	a
.2065	1a		inc a				inc 	a
.2066					_TOKIVExit:
.2066	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA 					; ending token
.2069	18		clc				clc
.206a	60		rts				rts
.206b					TOKTranslateIdentifier:
.206b	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.206d	f0 0f		beq $207e			beq 	_TTI64
.206f	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.2071	f0 0e		beq $2081			beq 	_TTI65
.2073	38		sec				sec
.2074	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2076	10 03		bpl $207b			bpl 	_TTIExit
.2078	18		clc				clc 								; map 09 onto 26-35
.2079	69 2b		adc #$2b			adc 	#"A"-"0"+26
.207b					_TTIExit:
.207b	09 40		ora #$40			ora 	#$40 						; correct range.
.207d	60		rts				rts
.207e	a9 64		lda #$64	_TTI64:	lda 	#$64
.2080	60		rts				rts
.2081	a9 65		lda #$65	_TTI65:	lda 	#$65
.2083	60		rts				rts
.2084					TOKDoComment:
.2084	20 76 1f	jsr $1f76			jsr 	TOKGet 						; skip over spaces
.2087	c9 20		cmp #$20			cmp 	#' '
.2089	d0 05		bne $2090			bne 	_TOKEndSpaces
.208b	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext
.208e	80 f4		bra $2084			bra 	TOKDoComment
.2090					_TOKEndSpaces:
.2090	48		pha				pha 								; save it
.2091	a9 97		lda #$97			lda 	#PR_REM 					; output the comment token.
.2093	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.2096	68		pla				pla
.2097	f0 04		beq $209d			beq 	_TOKDCExit 					; end of line.
.2099	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.209b	d0 01		bne $209e			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.209d					_TOKDCExit:
.209d	60		rts				rts
.209e					_TOKDCDoLine:
.209e	20 9a 1e	jsr $1e9a			jsr 	TOKResetElement 			; start getting the string
.20a1					_TOKDCLoop:
.20a1	20 76 1f	jsr $1f76			jsr 	TOKGet 						; check EOL
.20a4	c9 00		cmp #$00			cmp 	#0
.20a6	f0 08		beq $20b0			beq 	_TOKDCEndComment
.20a8	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; get and consume
.20ab	20 9e 1e	jsr $1e9e			jsr 	TOKWriteElement
.20ae	80 f1		bra $20a1			bra 	_TOKDCLoop
.20b0					_TOKDCEndComment:
.20b0	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.20b2	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.20b5	20 df 1e	jsr $1edf			jsr 	TOKOutputElementBuffer
.20b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.20b9					TOKTokeniseInteger:
.20b9	20 e2 20	jsr $20e2			jsr 	TOKExtractInteger 			; pull an integer out as text.
.20bc	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.20be	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.20c0	ad 1c 05	lda $051c			lda		TOKElement
.20c3	20 28 2e	jsr $2e28			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.20c6	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.20c9	f0 12		beq $20dd			beq 	_TOKNotLineNumber
.20cb	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.20cd	d0 0c		bne $20db			bne 	_TOKBadLineNumeber
.20cf	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.20d1	8d 01 04	sta $0401			sta 	TOKLineNumber
.20d4	a5 09		lda $09				lda 	IFR0+IM1
.20d6	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.20d9	18		clc				clc
.20da	60		rts				rts
.20db					_TOKBadLineNumeber:
.20db	38		sec				sec
.20dc	60		rts				rts
.20dd					_TOKNotLineNumber:
.20dd	20 ad 1e	jsr $1ead			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.20e0	18		clc				clc
.20e1	60		rts				rts
.20e2					TOKExtractInteger:
.20e2	20 9a 1e	jsr $1e9a			jsr 	TOKResetElement 			; restart
.20e5					_TTILoop:
.20e5	20 76 1f	jsr $1f76			jsr 	TOKGet 						; keep getting and copying while numeric.
.20e8	20 60 21	jsr $2160			jsr 	TOKIsDigit
.20eb	90 08		bcc $20f5			bcc 	_TOKEIExit
.20ed	20 9e 1e	jsr $1e9e			jsr 	TOKWriteElement
.20f0	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext
.20f3	80 f0		bra $20e5			bra 	_TTILoop
.20f5					_TOKEIExit:
.20f5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.20f6					TOKTokenisePunctuation:
.20f6	20 9a 1e	jsr $1e9a			jsr 	TOKResetElement 			; copy first punctuation character into element.
.20f9	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext
.20fc	20 9e 1e	jsr $1e9e			jsr 	TOKWriteElement
.20ff	20 76 1f	jsr $1f76			jsr 	TOKGet 						; what follows ?
.2102	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2104	f0 10		beq $2116			beq 	_TTPOne
.2106	20 74 21	jsr $2174			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2109	b0 0b		bcs $2116			bcs 	_TTPOne 					; these speed things up a bit.
.210b	20 9e 1e	jsr $1e9e			jsr 	TOKWriteElement 			; this is what we will search for.
.210e	20 7e 1f	jsr $1f7e			jsr 	TOKFindToken
.2111	b0 0a		bcs $211d			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2113	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2116					_TTPOne:
.2116	20 7e 1f	jsr $1f7e			jsr 	TOKFindToken 				; look for one character punctuation
.2119	b0 07		bcs $2122			bcs 	_TTPOutputExit 				; we found it
.211b	38		sec				sec 								; not recognised.
.211c	60		rts				rts
.211d					_TTPConsumeExit:
.211d	48		pha				pha
.211e	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; get the 2nd char out.
.2121	68		pla				pla
.2122					_TTPOutputExit:
.2122	20 6a 1f	jsr $1f6a			jsr  	TOKWriteA 					; write token out
.2125	18		clc				clc
.2126	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2127					TOKTokeniseString:
.2127	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; consume the "
.212a	20 9a 1e	jsr $1e9a			jsr 	TOKResetElement 			; start getting the string
.212d					_TOKTSLoop:
.212d	20 76 1f	jsr $1f76			jsr 	TOKGet 						; check EOL
.2130	c9 00		cmp #$00			cmp 	#0
.2132	f0 0c		beq $2140			beq 	_TOKTSExit
.2134	20 7a 1f	jsr $1f7a			jsr 	TOKGetNext 					; get and consume
.2137	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2139	f0 05		beq $2140			beq 	_TOKTSExit
.213b	20 9e 1e	jsr $1e9e			jsr 	TOKWriteElement
.213e	80 ed		bra $212d			bra 	_TOKTSLoop
.2140					_TOKTSExit:
.2140	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2142	20 6a 1f	jsr $1f6a			jsr 	TOKWriteA
.2145	20 df 1e	jsr $1edf			jsr 	TOKOutputElementBuffer
.2148	18		clc				clc
.2149	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.214a					TOKToUpper:
.214a	c9 61		cmp #$61			cmp 	#"a"
.214c	90 06		bcc $2154			bcc 	_TTUNotLower
.214e	c9 7b		cmp #$7b			cmp 	#"z"+1
.2150	b0 02		bcs $2154			bcs 	_TTUNotLower
.2152	49 20		eor #$20			eor 	#$20
.2154					_TTUNotLower:
.2154	60		rts				rts
.2155					TOKToLower:
.2155	c9 41		cmp #$41			cmp 	#"A"
.2157	90 06		bcc $215f			bcc 	_TTUNotUpper
.2159	c9 5b		cmp #$5b			cmp 	#"Z"+1
.215b	b0 02		bcs $215f			bcs 	_TTUNotUpper
.215d	49 20		eor #$20			eor 	#$20
.215f					_TTUNotUpper:
.215f	60		rts				rts
.2160					TOKIsDigit:
.2160	c9 30		cmp #$30			cmp 	#"0"
.2162	90 06		bcc $216a			bcc 	TOKFail
.2164	c9 3a		cmp #$3a			cmp 	#"9"+1
.2166	b0 02		bcs $216a			bcs 	TOKFail
.2168					TOKSucceed:
.2168	38		sec				sec
.2169	60		rts				rts
.216a					TOKFail:
.216a	18		clc				clc
.216b	60		rts				rts
.216c					TOKIsIdentifierElement:
.216c	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.216e	f0 f8		beq $2168			beq 	TOKSucceed
.2170	c9 5f		cmp #$5f			cmp 	#"_"
.2172	f0 f4		beq $2168			beq 	TOKSucceed 					; else fall through to alphanumeric
.2174					TOKIsAlphaNumeric:
.2174	20 7d 21	jsr $217d			jsr 	TOKIsAlpha
.2177	b0 ef		bcs $2168			bcs 	TOKSucceed
.2179	20 60 21	jsr $2160			jsr 	TOKIsDigit
.217c	60		rts				rts
.217d					TOKIsAlpha:
.217d	20 4a 21	jsr $214a			jsr 	TOKToUpper
.2180	c9 41		cmp #$41			cmp 	#"A"
.2182	90 e6		bcc $216a			bcc 	TOKFail
.2184	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2186	b0 e2		bcs $216a			bcs 	TOKFail
.2188	80 de		bra $2168			bra 	TOKSucceed
.218a					TOKIsHexadecimal:
.218a	20 60 21	jsr $2160			jsr		TOKIsDigit
.218d	b0 d9		bcs $2168			bcs 	TOKSucceed
.218f	20 7d 21	jsr $217d			jsr 	TOKIsAlpha
.2192	90 d6		bcc $216a			bcc 	TOKFail
.2194	c9 47		cmp #$47			cmp 	#"F"+1
.2196	b0 d2		bcs $216a			bcs 	TOKFail
.2198	80 ce		bra $2168			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.219a					Command_CALL:
.219a	a9 42		lda #$42			lda 	#STK_CALL
.219c	20 35 26	jsr $2635			jsr 	StackOpen
.219f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.21a1	29 c0		and #$c0			and 	#$C0
.21a3	c9 40		cmp #$40			cmp 	#$40
.21a5	d0 29		bne $21d0			bne 	_CCSyntax
.21a7	20 05 29	jsr $2905			jsr 	VARGetInfo 					; get the information
.21aa	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 				; check right bracket follows.
.21ad	20 b7 28	jsr $28b7			jsr 	VARFind 					; exists ?
.21b0	90 21		bcc $21d3			bcc 	_CCUnknown
.21b2	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.21b4	85 22		sta $22				sta 	zTemp0
.21b6	20 69 26	jsr $2669			jsr 	STKSaveCodePosition 		; save return address on stack.
.21b9	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.21bb	b1 22		lda ($22),y			lda 	(zTemp0),y
.21bd	c9 ff		cmp #$ff			cmp 	#$FF
.21bf	d0 12		bne $21d3			bne 	_CCUnknown
.21c1	88		dey				dey 								; get Y offset to stack
.21c2	b1 22		lda ($22),y			lda 	(zTemp0),y
.21c4	48		pha				pha
.21c5	88		dey				dey 								; get address
.21c6	b1 22		lda ($22),y			lda 	(zTemp0),y
.21c8	85 19		sta $19				sta 	codePtr+1
.21ca	b2 22		lda ($22)			lda 	(zTemp0)
.21cc	85 18		sta $18				sta 	codePtr
.21ce	7a		ply				ply 								; restore Y
.21cf	60		rts				rts
.21d0					_CCSyntax:
.21d0	4c 7f 24	jmp $247f		jmp	ErrorV_syntax
.21d3					_CCUnknown:
.21d3	4c f4 25	jmp $25f4		jmp	ErrorV_unknown
.21d6					Command_ENDPROC:
.21d6	a9 42		lda #$42			lda 	#STK_CALL
.21d8	20 61 26	jsr $2661			jsr 	StackCheckFrame
.21db	20 7b 26	jsr $267b			jsr 	STKLoadCodePosition 		; return
.21de	20 53 26	jsr $2653			jsr 	StackClose
.21e1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.21e2					Command_DO:
.21e2	a9 22		lda #$22			lda 	#STK_DO
.21e4	20 35 26	jsr $2635			jsr 	StackOpen
.21e7	20 69 26	jsr $2669			jsr 	STKSaveCodePosition 		; save loop position
.21ea	60		rts				rts
.21eb					Command_EXIT:
.21eb	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.21ed	20 61 26	jsr $2661			jsr 	StackCheckFrame
.21f0	20 53 26	jsr $2653			jsr 	StackClose 					; close it
.21f3	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.21f5	aa		tax				tax
.21f6	20 8f 23	jsr $238f			jsr 	ScanForward
.21f9	60		rts				rts
.21fa					Command_LOOP:
.21fa	a9 22		lda #$22			lda 	#STK_DO
.21fc	20 61 26	jsr $2661			jsr 	StackCheckFrame
.21ff	20 7b 26	jsr $267b			jsr 	STKLoadCodePosition 		; loop back
.2202	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2203					Command_FOR:
.2203	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2205	20 35 26	jsr $2635			jsr 	StackOpen
.2208	20 8b 12	jsr $128b			jsr 	CommandLET 					; do "I = 1" bit
.220b	5a		phy				phy 								; save variable address to +4,+5
.220c	a0 04		ldy #$04			ldy 	#4
.220e	a5 22		lda $22				lda 	zTemp0
.2210	91 2a		sta ($2a),y			sta 	(basicStack),y
.2212	c8		iny				iny
.2213	a5 23		lda $23				lda 	zTemp0+1
.2215	91 2a		sta ($2a),y			sta 	(basicStack),y
.2217	7a		ply				ply
.2218	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.221a	20 2c 26	jsr $262c			jsr 	ERRCheckA
.221d	20 43 16	jsr $1643			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2220	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2222	a2 08		ldx #$08			ldx 	#IFR0
.2224	20 79 22	jsr $2279			jsr 	CFSaveR0X
.2227	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2229	c9 91		cmp #$91			cmp 	#PR_STEP
.222b	d0 06		bne $2233			bne 	_CFStep1
.222d	c8		iny				iny 								; consume step
.222e	20 43 16	jsr $1643			jsr 	EXPEvalNumber 				; evaluate STEP
.2231	80 24		bra $2257			bra 	_CFWriteStep
.2233					_CFStep1:
.2233	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2235	a9 01		lda #$01			lda 	#1
.2237	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.223a	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.223b	a0 04		ldy #$04			ldy 	#4 							; get variable address
.223d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.223f	85 22		sta $22				sta 	zTemp0
.2241	c8		iny				iny
.2242	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2244	85 23		sta $23				sta 	zTemp0+1
.2246	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2248	b1 22		lda ($22),y			lda 	(zTemp0),y
.224a	d0 0a		bne $2256			bne 	_CFNotOptimised
.224c	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.224e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2250	d0 04		bne $2256			bne 	_CFNotOptimised
.2252	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2254	85 0b		sta $0b				sta 	IFR0+IExp
.2256					_CFNotOptimised:
.2256	7a		ply				ply
.2257					_CFWriteStep:
.2257	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2259	a9 06		lda #$06			lda 	#6
.225b	20 79 22	jsr $2279			jsr 	CFSaveR0X
.225e	20 69 26	jsr $2669			jsr 	STKSaveCodePosition 		; save loop position
.2261	60		rts				rts
.2262					CFLoadR0X:
.2262	5a		phy				phy
.2263	a8		tay				tay
.2264	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2266	95 00		sta $00,x			sta 	IM0,x
.2268	c8		iny				iny
.2269	b1 2a		lda ($2a),y			lda 	(basicStack),y
.226b	95 01		sta $01,x			sta 	IM1,x
.226d	c8		iny				iny
.226e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2270	95 02		sta $02,x			sta 	IM2,x
.2272	c8		iny				iny
.2273	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2275	95 03		sta $03,x			sta 	IExp,x
.2277	7a		ply				ply
.2278	60		rts				rts
.2279					CFSaveR0X:
.2279	5a		phy				phy
.227a	a8		tay				tay
.227b	b5 00		lda $00,x			lda 	IM0,x
.227d	91 2a		sta ($2a),y			sta 	(basicStack),y
.227f	c8		iny				iny
.2280	b5 01		lda $01,x			lda 	IM1,x
.2282	91 2a		sta ($2a),y			sta 	(basicStack),y
.2284	c8		iny				iny
.2285	b5 02		lda $02,x			lda 	IM2,x
.2287	91 2a		sta ($2a),y			sta 	(basicStack),y
.2289	c8		iny				iny
.228a	b5 03		lda $03,x			lda 	IExp,x
.228c	91 2a		sta ($2a),y			sta 	(basicStack),y
.228e	7a		ply				ply
.228f	60		rts				rts
.2290					Command_NEXT:
.2290	a9 37		lda #$37			lda 	#STK_FOR
.2292	20 61 26	jsr $2661			jsr 	StackCheckFrame
.2295	5a		phy				phy 								; check optimised loop
.2296	a0 09		ldy #$09			ldy 	#9
.2298	b1 2a		lda ($2a),y			lda 	(basicStack),y
.229a	7a		ply				ply
.229b	0a		asl a				asl 	a
.229c	b0 35		bcs $22d3			bcs 	_CNOptimised
.229e	20 0a 23	jsr $230a			jsr 	_CNLoadValue 				; load index value to R0.
.22a1	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.22a3	a9 06		lda #$06			lda 	#6
.22a5	20 62 22	jsr $2262			jsr 	CFLoadR0X
.22a8	20 ba 29	jsr $29ba			jsr 	IFloatAdd 					; add them together and write back.
.22ab	20 2d 23	jsr $232d			jsr 	_CNSaveValue
.22ae	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.22b0	a2 0c		ldx #$0c			ldx 	#IFR1
.22b2	20 62 22	jsr $2262			jsr 	CFLoadR0X
.22b5	20 92 2c	jsr $2c92			jsr 	IFloatCompare 				; compare terminal vs current
.22b8	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.22ba	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.22bd	f0 10		beq $22cf			beq 	_CNLoopBack
.22bf	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.22c1	5a		phy				phy
.22c2	a0 09		ldy #$09			ldy 	#6+IExp
.22c4	51 2a		eor ($2a),y			eor 	(basicStack),y
.22c6	7a		ply				ply
.22c7	29 40		and #$40			and 	#IFSign
.22c9	f0 04		beq $22cf			beq 	_CNLoopBack
.22cb					_CNExitLoop:
.22cb	20 53 26	jsr $2653			jsr 	StackClose		 			; return
.22ce	60		rts				rts
.22cf					_CNLoopBack:
.22cf	20 7b 26	jsr $267b			jsr 	STKLoadCodePosition 		; loop back
.22d2	60		rts				rts
.22d3					_CNOptimised:
.22d3	5a		phy				phy
.22d4	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.22d6	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22d8	85 26		sta $26				sta 	zTemp2
.22da	c8		iny				iny
.22db	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22dd	85 27		sta $27				sta 	zTemp2+1
.22df	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.22e1					_CNIncrement:
.22e1	c8		iny				iny
.22e2	b1 26		lda ($26),y			lda 	(zTemp2),y
.22e4	1a		inc a				inc 	a
.22e5	91 26		sta ($26),y			sta 	(zTemp2),y
.22e7	f0 f8		beq $22e1			beq 	_CNIncrement
.22e9	18		clc				clc 								; point zTemp0 to terminal value
.22ea	a5 2a		lda $2a				lda 	basicStack
.22ec	69 0a		adc #$0a			adc 	#10
.22ee	85 22		sta $22				sta 	zTemp0
.22f0	a5 2b		lda $2b				lda 	basicStack+1
.22f2	69 00		adc #$00			adc 	#0
.22f4	85 23		sta $23				sta 	zTemp0+1
.22f6	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.22f8	b2 26		lda ($26)			lda 	(zTemp2)
.22fa	d2 22		cmp ($22)			cmp 	(zTemp0)
.22fc	b1 26		lda ($26),y			lda 	(zTemp2),y
.22fe	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2300	c8		iny				iny
.2301	b1 26		lda ($26),y			lda 	(zTemp2),y
.2303	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2305	7a		ply				ply
.2306	b0 c3		bcs $22cb			bcs 	_CNExitLoop
.2308	80 c5		bra $22cf			bra 	_CNLoopBack
.230a					_CNLoadValue:
.230a	5a		phy				phy
.230b	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.230d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.230f	85 26		sta $26				sta 	zTemp2
.2311	c8		iny				iny
.2312	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2314	85 27		sta $27				sta 	zTemp2+1
.2316	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2318	b1 26		lda ($26),y			lda 	(zTemp2),y
.231a	85 08		sta $08				sta 	IFR0+IM0
.231c	c8		iny				iny
.231d	b1 26		lda ($26),y			lda 	(zTemp2),y
.231f	85 09		sta $09				sta 	IFR0+IM1
.2321	c8		iny				iny
.2322	b1 26		lda ($26),y			lda 	(zTemp2),y
.2324	85 0a		sta $0a				sta 	IFR0+IM2
.2326	c8		iny				iny
.2327	b1 26		lda ($26),y			lda 	(zTemp2),y
.2329	85 0b		sta $0b				sta 	IFR0+IExp
.232b	7a		ply				ply
.232c	60		rts				rts
.232d					_CNSaveValue:
.232d	5a		phy				phy
.232e	a0 00		ldy #$00			ldy 	#0
.2330	a5 08		lda $08				lda 	IFR0+IM0
.2332	91 26		sta ($26),y			sta 	(zTemp2),y
.2334	c8		iny				iny
.2335	a5 09		lda $09				lda 	IFR0+IM1
.2337	91 26		sta ($26),y			sta 	(zTemp2),y
.2339	c8		iny				iny
.233a	a5 0a		lda $0a				lda 	IFR0+IM2
.233c	91 26		sta ($26),y			sta 	(zTemp2),y
.233e	c8		iny				iny
.233f	a5 0b		lda $0b				lda 	IFR0+IExp
.2341	91 26		sta ($26),y			sta 	(zTemp2),y
.2343	7a		ply				ply
.2344	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2345					IfCommand:
.2345	20 43 16	jsr $1643			jsr 	EXPEvalNumber 				; Get the if test.
.2348	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.234a	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.234c	d0 0c		bne $235a			bne 	_IfStructured 				; we still support it.
.234e	c8		iny				iny 								; consume THEN
.234f	a2 08		ldx #$08			ldx 	#IFR0
.2351	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; is it zero
.2354	f0 01		beq $2357			beq 	_IfFail 					; if fail, go to next line
.2356	60		rts				rts 								; if THEN just continue
.2357					_IfFail:
.2357	4c 09 14	jmp $1409			jmp 	RUNEndOfLine
.235a					_IfStructured:
.235a	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; is it zero
.235d	d0 07		bne $2366			bne 	_IfExit 					; if not, then continue normally.
.235f	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2361	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2363	20 8f 23	jsr $238f			jsr 	ScanForward 				; and run from there
.2366					_IfExit:
.2366	60		rts				rts
.2367					ElseCode:
.2367	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2369	aa		tax				tax 								; so just go to the structure exit
.236a	20 8f 23	jsr $238f			jsr 	ScanForward
.236d	60		rts				rts
.236e					EndIf:
.236e	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.236f					Command_REPEAT:
.236f	a9 02		lda #$02			lda 	#STK_REPEAT
.2371	20 35 26	jsr $2635			jsr 	StackOpen
.2374	20 69 26	jsr $2669			jsr 	STKSaveCodePosition 		; save loop position
.2377	60		rts				rts
.2378					Command_UNTIL:
.2378	a9 02		lda #$02			lda 	#STK_REPEAT
.237a	20 61 26	jsr $2661			jsr 	StackCheckFrame
.237d	20 43 16	jsr $1643			jsr 	EXPEvalNumber 				; work out the test
.2380	a2 08		ldx #$08			ldx 	#IFR0
.2382	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; check if zero
.2385	f0 04		beq $238b			beq 	_CULoopBack 				; if so keep looping
.2387	20 53 26	jsr $2653			jsr 	StackClose		 			; return
.238a	60		rts				rts
.238b					_CULoopBack:
.238b	20 7b 26	jsr $267b			jsr 	STKLoadCodePosition 		; loop back
.238e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.238f					ScanForward:
.238f	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.2391	86 23		stx $23				stx 	zTemp0+1
.2393	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.2395					_ScanForwardLoop:
.2395	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2397	d0 0a		bne $23a3			bne 	_ScanNoCheck
.2399	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.239b	c5 22		cmp $22				cmp 	zTemp0
.239d	f0 49		beq $23e8			beq 	_ScanExit
.239f	c5 23		cmp $23				cmp 	zTemp0+1
.23a1	f0 45		beq $23e8			beq 	_ScanExit
.23a3					_ScanNoCheck:
.23a3	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.23a5	c8		iny				iny
.23a6	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.23a8	f0 37		beq $23e1			beq		_ScanDataItem
.23aa	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.23ac	f0 33		beq $23e1			beq 	_ScanDataItem
.23ae	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.23b0	f0 1b		beq $23cd			beq 	_ScanNextLine
.23b2	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.23b4	d0 01		bne $23b7			bne 	_ScanNoShift
.23b6	c8		iny				iny
.23b7					_ScanNoShift:
.23b7	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.23b9	b0 da		bcs $2395			bcs 	_ScanForwardLoop
.23bb	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.23bd	90 d6		bcc $2395			bcc 	_ScanForwardLoop
.23bf	aa		tax				tax 								; access the table to get the adjustment.
.23c0	18		clc				clc
.23c1	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.23c3	7d 56 19	adc $1956,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.23c6	85 24		sta $24				sta 	zTemp1
.23c8	10 cb		bpl $2395			bpl		_ScanForwardLoop 			; error if -ve ?
.23ca	4c 0b 25	jmp $250b		jmp	ErrorV_structure
.23cd					_ScanNextLine:
.23cd	18		clc				clc	 								; forward to next line.
.23ce	b2 18		lda ($18)			lda 	(codePtr)
.23d0	65 18		adc $18				adc 	codePtr
.23d2	85 18		sta $18				sta 	codePtr
.23d4	90 02		bcc $23d8			bcc 	_ScanNoCarry
.23d6	e6 19		inc $19				inc 	codePtr+1
.23d8					_ScanNoCarry:
.23d8	a0 03		ldy #$03			ldy 	#3
.23da	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.23dc	d0 b7		bne $2395			bne 	_ScanForwardLoop
.23de	4c 0b 25	jmp $250b		jmp	ErrorV_structure
.23e1					_ScanDataItem:
.23e1	98		tya				tya
.23e2	38		sec				sec
.23e3	71 18		adc ($18),y			adc 	(codePtr),y
.23e5	a8		tay				tay
.23e6	80 ad		bra $2395			bra 	_ScanForwardLoop
.23e8					_ScanExit:
.23e8	c8		iny				iny 								; consume final token.
.23e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.23ea					ScanProcedures:
.23ea	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.23ec	48		pha				pha
.23ed	a5 19		lda $19				lda 	codePtr+1
.23ef	48		pha				pha
.23f0	5a		phy				phy
.23f1	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.23f4	85 19		sta $19				sta 	codePtr+1
.23f6	64 18		stz $18				stz 	codePtr
.23f8					_SPLoop:
.23f8	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.23fa	f0 18		beq $2414			beq 	_SPExit
.23fc	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.23fe	b1 18		lda ($18),y			lda 	(codePtr),y
.2400	c9 88		cmp #$88			cmp 	#PR_PROC
.2402	d0 03		bne $2407			bne 	_SPNext
.2404	20 1c 24	jsr $241c			jsr 	_SPSetupRecord
.2407					_SPNext:
.2407	18		clc				clc 								; forward to next
.2408	b2 18		lda ($18)			lda 	(codePtr)
.240a	65 18		adc $18				adc 	codePtr
.240c	85 18		sta $18				sta 	codePtr
.240e	90 e8		bcc $23f8			bcc 	_SPLoop
.2410	e6 19		inc $19				inc 	codePtr+1
.2412	80 e4		bra $23f8			bra 	_SPLoop
.2414					_SPExit:
.2414	7a		ply				ply
.2415	68		pla				pla
.2416	85 19		sta $19				sta 	codePtr+1
.2418	68		pla				pla
.2419	85 18		sta $18				sta 	codePtr
.241b	60		rts				rts
.241c					_SPSetupRecord:
.241c	c8		iny				iny 								; check identifier follows
.241d	b1 18		lda ($18),y			lda 	(codePtr),y
.241f	29 c0		and #$c0			and 	#$C0
.2421	c9 40		cmp #$40			cmp 	#$40
.2423	d0 27		bne $244c			bne 	_SPSyntax
.2425	20 05 29	jsr $2905			jsr 	VARGetInfo 					; get the information
.2428	20 1c 26	jsr $261c			jsr 	ERRCheckRParen 				; check right bracket follows.
.242b	20 b7 28	jsr $28b7			jsr 	VARFind 					; already exists ?
.242e	b0 1f		bcs $244f			bcs 	_SPUsed 					; error !
.2430	20 63 28	jsr $2863			jsr 	VARCreate 					; create, XA points to the data.
.2433	85 22		sta $22				sta 	zTemp0
.2435	86 23		stx $23				stx 	zTemp0+1
.2437	5a		phy				phy 								; save Y pos on stack
.2438	a0 01		ldy #$01			ldy 	#1
.243a	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.243c	92 22		sta ($22)			sta 	(zTemp0)
.243e	a5 19		lda $19				lda 	codePtr+1
.2440	91 22		sta ($22),y			sta 	(zTemp0),y
.2442	c8		iny				iny
.2443	68		pla				pla
.2444	91 22		sta ($22),y			sta 	(zTemp0),y
.2446	c8		iny				iny
.2447	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2449	91 22		sta ($22),y			sta 	(zTemp0),y
.244b	60		rts				rts
.244c					_SPSyntax:
.244c	4c 7f 24	jmp $247f		jmp	ErrorV_syntax
.244f					_SPUsed:
.244f	4c d6 25	jmp $25d6		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2452					Command_WHILE:
.2452	5a		phy				phy 								; save position of the test
.2453	20 43 16	jsr $1643			jsr 	EXPEvalNumber 				; work out the while test.
.2456	a2 08		ldx #$08			ldx 	#IFR0
.2458	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; check if zero
.245b	f0 0e		beq $246b			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.245d	98		tya				tya 								; position *after* test.
.245e	7a		ply				ply 								; restore position before test, at WHILE
.245f	88		dey				dey 								; so we execute the WHILE command again.
.2460	48		pha				pha 								; push after test on the stack
.2461	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2463	20 35 26	jsr $2635			jsr 	StackOpen
.2466	20 69 26	jsr $2669			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2469	7a		ply				ply 								; restore the position *after* the test
.246a	60		rts				rts
.246b					_WHExitLoop:
.246b	68		pla				pla 								; throw post loop position
.246c	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.246e	aa		tax				tax
.246f	20 8f 23	jsr $238f			jsr 	ScanForward
.2472	60		rts				rts
.2473					Command_WEND:
.2473	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2475	20 61 26	jsr $2661			jsr 	StackCheckFrame
.2478	20 7b 26	jsr $267b			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.247b	20 53 26	jsr $2653			jsr 	StackClose		 			; erase the frame
.247e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.247f					ErrorV_syntax:
.247f	20 54 27	jsr $2754		jsr	ErrorHandler
>2482	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>248a	45 72 72 6f 72 00
.2490					ErrorV_range:
.2490	20 54 27	jsr $2754		jsr	ErrorHandler
>2493	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>249b	52 61 6e 67 65 00
.24a1					ErrorV_value:
.24a1	20 54 27	jsr $2754		jsr	ErrorHandler
>24a4	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>24ac	75 65 00
.24af					ErrorV_type:
.24af	20 54 27	jsr $2754		jsr	ErrorHandler
>24b2	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>24ba	73 6d 61 74 63 68 00
.24c1					ErrorV_unimplemented:
.24c1	20 54 27	jsr $2754		jsr	ErrorHandler
>24c4	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>24cc	6c 65 6d 65 6e 74 65 64 00
.24d5					ErrorV_assert:
.24d5	20 54 27	jsr $2754		jsr	ErrorHandler
>24d8	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>24e0	46 61 69 6c 00
.24e5					ErrorV_internal:
.24e5	20 54 27	jsr $2754		jsr	ErrorHandler
>24e8	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>24f0	6c 20 45 72 72 6f 72 00
.24f8					ErrorV_divzero:
.24f8	20 54 27	jsr $2754		jsr	ErrorHandler
>24fb	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2503	42 79 20 5a 65 72 6f 00
.250b					ErrorV_structure:
.250b	20 54 27	jsr $2754		jsr	ErrorHandler
>250e	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2516	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2523					ErrorV_stop:
.2523	20 54 27	jsr $2754		jsr	ErrorHandler
>2526	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>252e	20 53 74 6f 70 70 65 64 00
.2537					ErrorV_data:
.2537	20 54 27	jsr $2754		jsr	ErrorHandler
>253a	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2542	44 61 74 61 00
.2547					ErrorV_redefine:
.2547	20 54 27	jsr $2754		jsr	ErrorHandler
>254a	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2552	65 64 65 66 69 6e 65 64 00
.255b					ErrorV_index:
.255b	20 54 27	jsr $2754		jsr	ErrorHandler
>255e	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2566	61 79 20 49 6e 64 65 78 00
.256f					ErrorV_memory:
.256f	20 54 27	jsr $2754		jsr	ErrorHandler
>2572	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>257a	4d 65 6d 6f 72 79 00
.2581					ErrorV_uninitialised:
.2581	20 54 27	jsr $2754		jsr	ErrorHandler
>2584	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>258c	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.259c					ErrorV_string:
.259c	20 54 27	jsr $2754		jsr	ErrorHandler
>259f	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>25a7	69 6e 67 20 4c 65 6e 67 74 68 00
.25b2					ErrorV_variable:
.25b2	20 54 27	jsr $2754		jsr	ErrorHandler
>25b5	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>25bd	65 20 4d 69 73 73 69 6e 67 00
.25c7					ErrorV_stack:
.25c7	20 54 27	jsr $2754		jsr	ErrorHandler
>25ca	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>25d2	75 6c 6c 00
.25d6					ErrorV_dupproc:
.25d6	20 54 27	jsr $2754		jsr	ErrorHandler
>25d9	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>25e1	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>25f1	65 64 00
.25f4					ErrorV_unknown:
.25f4	20 54 27	jsr $2754		jsr	ErrorHandler
>25f7	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>25ff	20 50 72 6f 63 65 64 75 72 65 00
.260a					ErrorV_break:
.260a	20 54 27	jsr $2754		jsr	ErrorHandler
>260d	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2614					ERRCheckLParen:
.2614	b1 18		lda ($18),y			lda 	(codePtr),y
.2616	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2618	d0 18		bne $2632			bne 	ERRSyntaxError
.261a	c8		iny				iny
.261b	60		rts				rts
.261c					ERRCheckRParen:
.261c	b1 18		lda ($18),y			lda 	(codePtr),y
.261e	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2620	d0 10		bne $2632			bne 	ERRSyntaxError
.2622	c8		iny				iny
.2623	60		rts				rts
.2624					ERRCheckComma:
.2624	b1 18		lda ($18),y			lda 	(codePtr),y
.2626	c9 99		cmp #$99			cmp 	#PR_COMMA
.2628	d0 08		bne $2632			bne 	ERRSyntaxError
.262a	c8		iny				iny
.262b	60		rts				rts
.262c					ERRCheckA:
.262c	d1 18		cmp ($18),y			cmp 	(codePtr),y
.262e	d0 02		bne $2632			bne 	ERRSyntaxError
.2630	c8		iny				iny
.2631	60		rts				rts
.2632					ERRSyntaxError:
.2632	4c 7f 24	jmp $247f		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2635					StackOpen:
.2635	48		pha				pha 								; save frame byte
.2636	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2638	0a		asl a				asl 	a 							; claim twice this for storage
.2639	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.263b	38		sec				sec 								; so basically subtracting from
.263c	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.263e	85 2a		sta $2a				sta 	basicStack
.2640	b0 0a		bcs $264c			bcs 	_SONoBorrow
>2642	db						.byte 	$DB
.2643	c6 2b		dec $2b				dec 	basicStack+1
.2645	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.2647	cd 20 06	cmp $0620			cmp 	basicStackEnd
.264a	f0 04		beq $2650			beq 	_SOMemory
.264c					_SONoBorrow:
.264c	68		pla				pla 								; get marker back and write at TOS
.264d	92 2a		sta ($2a)			sta 	(basicStack)
.264f	60		rts				rts
.2650					_SOMemory:
.2650	4c c7 25	jmp $25c7		jmp	ErrorV_stack
.2653					StackClose:
.2653	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.2655	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2657	0a		asl a				asl 	a 							; claim twice this.
.2658	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.265a	85 2a		sta $2a				sta 	basicStack
.265c	90 02		bcc $2660			bcc 	_SCExit
.265e	e6 2b		inc $2b				inc 	basicStack+1
.2660					_SCExit:
.2660	60		rts				rts
.2661					StackCheckFrame:
.2661	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.2663	d0 01		bne $2666			bne 	_SCFError 					; different, we have structures mixed up
.2665	60		rts				rts
.2666					_SCFError:
.2666	4c 0b 25	jmp $250b		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2669					STKSaveCodePosition:
.2669	5a		phy				phy
.266a	98		tya				tya 								; save Y at offset 1.
.266b	a0 01		ldy #$01			ldy 	#1
.266d	91 2a		sta ($2a),y			sta 	(basicStack),y
.266f	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2671	c8		iny				iny
.2672	91 2a		sta ($2a),y			sta 	(basicStack),y
.2674	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2676	c8		iny				iny
.2677	91 2a		sta ($2a),y			sta 	(basicStack),y
.2679	7a		ply				ply
.267a	60		rts				rts
.267b					STKLoadCodePosition:
.267b	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.267d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.267f	85 19		sta $19				sta 	codePtr+1
.2681	88		dey				dey
.2682	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2684	85 18		sta $18				sta 	codePtr
.2686	88		dey				dey
.2687	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2689	a8		tay				tay
.268a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.268b					StackReset:
.268b	48		pha				pha 								; save top of memory
.268c	3a		dec a				dec 	a  							; end of stack = previous byte
.268d	85 2b		sta $2b				sta 	basicStack+1
.268f	a9 ff		lda #$ff			lda 	#$FF
.2691	85 2a		sta $2a				sta 	basicStack
.2693	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2695	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2697	68		pla				pla 								; allocate pages for stack.
.2698	38		sec				sec
.2699	e9 02		sbc #$02			sbc 	#STACKPAGES
.269b	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.269e	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.269f					StringConcrete:
.269f	5a		phy				phy 								; save position on stack
.26a0	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.26a2	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.26a4	b0 41		bcs $26e7			bcs 	_SALengthError
.26a6	18		clc				clc 								; length of the new string
.26a7	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.26a9	90 02		bcc $26ad			bcc 	_SAHaveLength
.26ab	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.26ad					_SAHaveLength:
.26ad	48		pha				pha 								; save length to be allocated for concreting.
.26ae	38		sec				sec
.26af	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.26b1	6d 22 06	adc $0622			adc 	stringMemory
.26b4	8d 22 06	sta $0622			sta 	stringMemory
.26b7	85 26		sta $26				sta 	zTemp2 						; update storage address
.26b9	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.26bb	6d 23 06	adc $0623			adc 	stringMemory+1
.26be	8d 23 06	sta $0623			sta 	stringMemory+1
.26c1	85 27		sta $27				sta 	zTemp2+1
.26c3	68		pla				pla 								; save length allocated in +0
.26c4	92 26		sta ($26)			sta 	(zTemp2)
.26c6	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.26c8	a0 01		ldy #$01			ldy 	#1
.26ca	91 26		sta ($26),y			sta 	(zTemp2),y
.26cc					_SACopyNewString:
.26cc	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.26ce	a0 02		ldy #$02			ldy 	#2
.26d0	91 26		sta ($26),y			sta 	(zTemp2),y
.26d2	aa		tax				tax 								; bytes to copy
.26d3	f0 0c		beq $26e1			beq 	_SACopyExit
.26d5	a0 01		ldy #$01			ldy 	#1 							; first character from here
.26d7					_SACopyNSLoop:
.26d7	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.26d9	c8		iny				iny 								; write two on in string storage
.26da	c8		iny				iny
.26db	91 26		sta ($26),y			sta 	(zTemp2),y
.26dd	88		dey				dey
.26de	ca		dex				dex									; until copied all the string lengths.
.26df	d0 f6		bne $26d7			bne 	_SACopyNSLoop
.26e1					_SACopyExit:
.26e1	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.26e3	a5 26		lda $26				lda 	zTemp2
.26e5	7a		ply				ply
.26e6	60		rts				rts
.26e7					_SALengthError:
.26e7	4c 9c 25	jmp $259c		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.26ea					StringSystemInitialise:
.26ea	3a		dec a				dec 	a 							; make last byte of previous page.
.26eb	8d 23 06	sta $0623			sta 	stringMemory+1
.26ee	85 23		sta $23				sta 	zTemp0+1
.26f0	a9 ff		lda #$ff			lda 	#$FF
.26f2	8d 22 06	sta $0622			sta 	stringMemory
.26f5	85 22		sta $22				sta 	zTemp0
.26f7	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.26f9	92 22		sta ($22)			sta 	(zTemp0)
.26fb	60		rts				rts
.26fc					StringSpaceInitialise:
.26fc	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.26fe	8d 21 06	sta $0621			sta 	stringInitialised
.2701	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2704	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2707	ad 23 06	lda $0623			lda 	stringMemory+1
.270a	3a		dec a				dec 	a
.270b	8d 25 06	sta $0625			sta 	stringTempPointer+1
.270e	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.2711	60		rts				rts
.2712					StringTempAllocate:
.2712	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2714	b0 2e		bcs $2744			bcs 	_STALength
.2716	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2719	30 05		bmi $2720			bmi 	_STAAllocate
.271b	48		pha				pha 								; save value to subtract.
.271c	20 fc 26	jsr $26fc			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.271f	68		pla				pla 								; restore it
.2720					_STAAllocate:
.2720	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2722	18		clc				clc  								; deliberate allows one more
.2723	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.2726	8d 24 06	sta $0624			sta 	stringTempPointer
.2729	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.272b	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.272d	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2730	69 ff		adc #$ff			adc 	#$FF
.2732	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2735	85 2d		sta $2d				sta 	zsTemp+1
.2737	85 09		sta $09				sta 	IFR0+IM1
.2739	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.273b	a9 80		lda #$80			lda 	#$80
.273d	85 0b		sta $0b				sta 	IFR0+IExp
.273f	a9 00		lda #$00			lda 	#0 							; clear the target string
.2741	92 2c		sta ($2c)			sta 	(zsTemp)
.2743	60		rts				rts
.2744					_STALength:
.2744	4c 9c 25	jmp $259c		jmp	ErrorV_string
.2747					StringTempWrite:
.2747	5a		phy				phy
.2748	48		pha				pha
.2749	b2 2c		lda ($2c)			lda 	(zsTemp)
.274b	1a		inc a				inc 	a
.274c	92 2c		sta ($2c)			sta 	(zsTemp)
.274e	a8		tay				tay
.274f	68		pla				pla
.2750	91 2c		sta ($2c),y			sta 	(zsTemp),y
.2752	7a		ply				ply
.2753	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2754					ErrorHandler:
.2754	fa		plx				plx 								; get address of msg
.2755	7a		ply				ply
.2756	e8		inx				inx 								; bump past RTS
.2757	d0 01		bne $275a			bne 	_EHNoInc
.2759	c8		iny				iny
.275a					_EHNoInc:
.275a	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.275d	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.2760	0d 27 06	ora $0627			ora 	ERRLine+1
.2763	f0 10		beq $2775			beq 	_EHNoNumber
.2765	a2 78		ldx #$78			ldx 	#_EHAtMsg & $FF
.2767	a0 27		ldy #$27			ldy 	#_EHAtMsg >> 8
.2769	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.276c	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.276f	ae 27 06	ldx $0627			ldx 	ERRLine+1
.2772	20 7d 27	jsr $277d			jsr 	WriteIntXA
.2775					_EHNoNumber:
.2775	4c a6 27	jmp $27a6			jmp 	WarmStartNewLine
.2778					_EHAtMsg:
>2778	20 61 74 20 00					.text 	" at ",0
.277d					WriteIntXA:
.277d	da		phx				phx
.277e	48		pha				pha
.277f	a2 08		ldx #$08			ldx 	#IFR0
.2781	20 13 2f	jsr $2f13			jsr 	IFloatPushRx
.2784	68		pla				pla
.2785	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.2788	68		pla				pla
.2789	85 09		sta $09				sta 	IFR0+IM1
.278b	a9 0a		lda #$0a			lda 	#10 						; decimal
.278d	20 65 2d	jsr $2d65			jsr 	IFloatIntegerToStringR0	 	; convert
.2790	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.2793	a2 08		ldx #$08			ldx 	#IFR0
.2795	20 34 2f	jsr $2f34			jsr 	IFloatPullRx
.2798	60		rts				rts
.2799					NotImplemented:
.2799	4c c1 24	jmp $24c1		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.279c					WarmStart:
.279c	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.279e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.27a1	a9 6b		lda #$6b			lda 	#"k"
.27a3	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.27a6					WarmStartNewLine:
.27a6	a9 0d		lda #$0d			lda 	#13
.27a8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.27ab					WarmStartNoPrompt:
.27ab	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.27ad	9a		txs				txs
.27ae	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.27b1	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.27b3	f0 f1		beq $27a6			beq 	WarmStartNewLine
.27b5	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.27b7	d0 f2		bne $27ab			bne 	WarmStartNoPrompt
.27b9	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.27bc	e8		inx				inx 								; skip length byte to make it ASCIIZ
.27bd	d0 01		bne $27c0			bne 	_WSSkip
.27bf	c8		iny				iny
.27c0					_WSSkip:
.27c0	86 26		stx $26				stx 	zTemp2 						; save address
.27c2	84 27		sty $27				sty 	zTemp2+1
.27c4	a2 ee		ldx #$ee			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.27c6	a0 27		ldy #$27			ldy 	#TOKGetCharacter >> 8
.27c8	38		sec				sec
.27c9	20 f5 1e	jsr $1ef5			jsr 	TOKTokenise
.27cc	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.27cf	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.27d2	d0 0b		bne $27df			bne 	_WSLineEdit
.27d4	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.27d6	85 18		sta $18				sta 	codePtr
.27d8	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.27da	85 19		sta $19				sta 	codePtr+1
.27dc	4c 14 14	jmp $1414			jmp 	RUNNewLine
.27df					_WSLineEdit:
.27df	20 d0 1d	jsr $1dd0			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.27e2	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.27e5	c9 04		cmp #$04			cmp 	#4
.27e7	f0 03		beq $27ec			beq 	_WSNoInsert
.27e9	20 1a 1e	jsr $1e1a			jsr 	PGMInsertLine				; if not, maybe insert
.27ec					_WSNoInsert:
.27ec	80 bd		bra $27ab			bra 	WarmStartNoPrompt
.27ee					TOKGetCharacter:
.27ee	b2 26		lda ($26)			lda 	(zTemp2)
.27f0	90 06		bcc $27f8			bcc 	_GSNoIncrement
.27f2	e6 26		inc $26				inc 	zTemp2
.27f4	d0 02		bne $27f8			bne 	_GSNoIncrement
.27f6	e6 27		inc $27				inc 	zTemp2+1
.27f8					_GSNoIncrement:
.27f8	c9 00		cmp #$00			cmp 	#0
.27fa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.27fb					VARArrayLookup:
.27fb	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.27fd	86 23		stx $23				stx 	zTemp0+1
.27ff	b2 22		lda ($22)			lda 	(zTemp0)
.2801	48		pha				pha
.2802	5a		phy				phy
.2803	a0 01		ldy #$01			ldy 	#1
.2805	b1 22		lda ($22),y			lda 	(zTemp0),y
.2807	7a		ply				ply
.2808	48		pha				pha
.2809	20 55 16	jsr $1655			jsr 	EXPEvalInteger16 			; R0 now contains the index
.280c	68		pla				pla 								; array address to zTemp0
.280d	85 23		sta $23				sta 	zTemp0+1
.280f	68		pla				pla
.2810	85 22		sta $22				sta 	zTemp0
.2812	5a		phy				phy 								; save codePtr position.
.2813	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2815	b1 22		lda ($22),y			lda 	(zTemp0),y
.2817	48		pha				pha 								; save bit 15 on stack.
.2818	29 7f		and #$7f			and 	#$7F
.281a	85 24		sta $24				sta 	zTemp1
.281c	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.281e	d2 22		cmp ($22)			cmp 	(zTemp0)
.2820	a5 09		lda $09				lda 	IFR0+IM1
.2822	e5 24		sbc $24				sbc 	zTemp1
.2824	b0 3a		bcs $2860			bcs 	_VALIndex
.2826	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2828	c9 40		cmp #$40			cmp 	#$40
.282a	b0 34		bcs $2860			bcs 	_VALIndex
.282c	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.282e	26 09		rol $09				rol 	IFR0+IM1
.2830	fa		plx				plx 								; get msb of size -> X
.2831	30 04		bmi $2837			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2833	06 08		asl $08				asl 	IFR0+IM0
.2835	26 09		rol $09				rol 	IFR0+IM1
.2837					_VARNotX4:
.2837	18		clc				clc 								; add the two for the size bytes
.2838	a5 08		lda $08				lda 	IFR0+IM0
.283a	69 02		adc #$02			adc 	#2
.283c	85 08		sta $08				sta 	IFR0+IM0
.283e	90 02		bcc $2842			bcc 	_VARNoCarry1
.2840	e6 09		inc $09				inc 	IFR0+IM1
.2842					_VARNoCarry1:
.2842	18		clc				clc 								; calculate the element address and push to stack.
.2843	a5 08		lda $08				lda 	IFR0+IM0
.2845	65 22		adc $22				adc 	zTemp0
.2847	48		pha				pha
.2848	a5 09		lda $09				lda 	IFR0+IM1
.284a	65 23		adc $23				adc 	zTemp0+1
.284c	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.284e	30 04		bmi $2854			bmi 	_VARHasSubLevel
.2850	aa		tax				tax 								; address in XA
.2851	68		pla				pla
.2852	7a		ply				ply 								; restore Y and exit
.2853	60		rts				rts
.2854					_VARHasSubLevel:
.2854	aa		tax				tax 								; get link address in XA
.2855	68		pla				pla
.2856	7a		ply				ply 								; restore code position.
.2857	48		pha				pha
.2858	20 24 26	jsr $2624			jsr 	ERRCheckComma 				; comma required.
.285b	68		pla				pla
.285c	20 fb 27	jsr $27fb			jsr 	VARArrayLookup 				; call it recursively
.285f	60		rts				rts
.2860					_VALIndex:
.2860	4c 5b 25	jmp $255b		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2863					VARCreate:
.2863	5a		phy				phy
.2864	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2866	a2 00		ldx #$00			ldx 	#0
.2868	20 59 10	jsr $1059			jsr 	AllocateMemory
.286b	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.286d	86 25		stx $25				stx 	zTemp1+1
.286f	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2871	ad 2a 06	lda $062a			lda 	VARHash
.2874	91 24		sta ($24),y			sta 	(zTemp1),y
.2876	c8		iny				iny 								; put address of name into +3,+4
.2877	ad 28 06	lda $0628			lda 	VARNameAddress
.287a	91 24		sta ($24),y			sta 	(zTemp1),y
.287c	c8		iny				iny
.287d	ad 29 06	lda $0629			lda 	VARNameAddress+1
.2880	91 24		sta ($24),y			sta 	(zTemp1),y
.2882	ad 2b 06	lda $062b			lda 	VARType
.2885	29 01		and #$01			and 	#1
.2887	f0 06		beq $288f			beq 	_CVNotString
.2889	a0 08		ldy #$08			ldy 	#5+3
.288b	a9 80		lda #$80			lda 	#$80
.288d	91 24		sta ($24),y			sta 	(zTemp1),y
.288f					_CVNotString:
.288f	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2892	85 22		sta $22				sta 	zTemp0
.2894	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.2897	85 23		sta $23				sta 	zTemp0+1
.2899	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.289b	b2 22		lda ($22)			lda 	(zTemp0)
.289d	92 24		sta ($24)			sta 	(zTemp1)
.289f	b1 22		lda ($22),y			lda 	(zTemp0),y
.28a1	91 24		sta ($24),y			sta 	(zTemp1),y
.28a3	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.28a5	92 22		sta ($22)			sta 	(zTemp0)
.28a7	a5 25		lda $25				lda 	zTemp1+1
.28a9	91 22		sta ($22),y			sta 	(zTemp0),y
.28ab	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.28ad	a6 25		ldx $25				ldx 	zTemp1+1
.28af	18		clc				clc 								; add 5 to point to the data.
.28b0	69 05		adc #$05			adc 	#5
.28b2	90 01		bcc $28b5			bcc 	_VCNoCarry
.28b4	e8		inx				inx
.28b5					_VCNoCarry:
.28b5	7a		ply				ply
.28b6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.28b7					VARFind:
.28b7	5a		phy				phy
.28b8	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.28ba	b1 22		lda ($22),y			lda 	(zTemp0),y
.28bc	85 25		sta $25				sta 	zTemp1+1
.28be	f0 1c		beq $28dc			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.28c0	b2 22		lda ($22)			lda 	(zTemp0)
.28c2	85 24		sta $24				sta 	zTemp1
.28c4					_VFLoop:
.28c4	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.28c6	b1 24		lda ($24),y			lda 	(zTemp1),y
.28c8	cd 2a 06	cmp $062a			cmp 	VARHash
.28cb	f0 12		beq $28df			beq 	_VFHashesMatch 				; if so, check the name.
.28cd					_VFNext:
.28cd	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.28cf	aa		tax				tax
.28d0	a0 01		ldy #$01			ldy 	#1
.28d2	b1 24		lda ($24),y			lda 	(zTemp1),y
.28d4	85 25		sta $25				sta 	zTemp1+1
.28d6	86 24		stx $24				stx 	zTemp1
.28d8	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.28da	d0 e8		bne $28c4			bne 	_VFLoop
.28dc					_VFExitFail:
.28dc	7a		ply				ply
.28dd	18		clc				clc
.28de	60		rts				rts
.28df					_VFHashesMatch:
.28df	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.28e1	b1 24		lda ($24),y			lda 	(zTemp1),y
.28e3	85 26		sta $26				sta 	zTemp2
.28e5	c8		iny				iny
.28e6	b1 24		lda ($24),y			lda 	(zTemp1),y
.28e8	85 27		sta $27				sta 	zTemp2+1
.28ea	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.28ec					_VFNameCompLoop:
.28ec	c8		iny				iny 								; char at a time
.28ed	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.28f0	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.28f2	d0 d9		bne $28cd			bne 	_VFNext						; next entry if different.
.28f4	c9 7c		cmp #$7c			cmp 	#$7C
.28f6	90 f4		bcc $28ec			bcc 	_VFNameCompLoop 			; until done the whole lot.
.28f8	18		clc				clc
.28f9	a5 24		lda $24				lda 	zTemp1
.28fb	a6 25		ldx $25				ldx 	zTemp1+1
.28fd	69 05		adc #$05			adc 	#5
.28ff	90 01		bcc $2902			bcc 	_VFNNoCarry
.2901	e8		inx				inx
.2902					_VFNNoCarry:
.2902	7a		ply				ply
.2903	38		sec				sec
.2904	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2905					VARGetInfo:
.2905	98		tya				tya 								; calculate the address of the identifier start.
.2906	18		clc				clc
.2907	65 18		adc $18				adc 	codePtr
.2909	8d 28 06	sta $0628			sta 	VARNameAddress
.290c	a5 19		lda $19				lda 	codePtr+1
.290e	69 00		adc #$00			adc 	#0
.2910	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2913	9c 2a 06	stz $062a			stz 	VARHash
.2916	a2 00		ldx #$00			ldx 	#0
.2918					_VARCopyName:
.2918	18		clc				clc 								; update the sum hash.
.2919	ad 2a 06	lda $062a			lda 	VARHash
.291c	71 18		adc ($18),y			adc 	(codePtr),y
.291e	8d 2a 06	sta $062a			sta 	VARHash
.2921	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2923	c8		iny				iny
.2924	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2927	e8		inx				inx
.2928	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.292a	90 ec		bcc $2918			bcc 	_VARCopyName
.292c	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.292f	29 03		and #$03			and 	#3 							; type is 0-3
.2931	0a		asl a				asl 	a
.2932	0a		asl a				asl 	a
.2933	85 22		sta $22				sta 	zTemp0
.2935	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2938	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.293a	65 22		adc $22				adc 	zTemp0 						; index of hash table
.293c	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.293d	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.293f	85 22		sta $22				sta 	zTemp0
.2941	8d 4c 06	sta $064c			sta 	VARHashEntry
.2944	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2946	69 00		adc #$00			adc 	#0
.2948	85 23		sta $23				sta 	zTemp0+1
.294a	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.294d	60		rts				rts
.294e					VARClearHashTables:
.294e	a2 00		ldx #$00			ldx 	#0
.2950					_VCHRLoop:
.2950	a9 00		lda #$00			lda 	#0
.2952	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2955	e8		inx				inx
.2956	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2958	d0 f6		bne $2950			bne 	_VCHRLoop
.295a	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.295b					VARCheckSimple:
.295b	aa		tax				tax 								; save in X
.295c	b1 18		lda ($18),y			lda 	(codePtr),y
.295e	c9 7c		cmp #$7c			cmp 	#$7C
.2960	d0 15		bne $2977			bne 	_VCSComplex
.2962	c8		iny				iny 								; consume the second byte, the type.
.2963	8a		txa				txa  								; character (40-7F) x 4
.2964	0a		asl a				asl 	a
.2965	0a		asl a				asl  	a
.2966	18		clc				clc
.2967	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2969	85 08		sta $08				sta 	IFR0+IM0
.296b	a9 06		lda #$06			lda 	#FastVariables >> 8
.296d	69 00		adc #$00			adc 	#0
.296f	85 09		sta $09				sta 	IFR0+IM1
.2971	64 0a		stz $0a				stz 	IFR0+IM2
.2973	64 0b		stz $0b				stz 	IFR0+IExp
.2975	38		sec				sec 								; it's a reference
.2976	60		rts				rts
.2977					_VCSComplex:
.2977	88		dey				dey	 								; extract information.
.2978	20 05 29	jsr $2905			jsr 	VARGetInfo
.297b	20 b7 28	jsr $28b7			jsr 	VARFind 					; search for variable
.297e	b0 0a		bcs $298a			bcs 	_VCSHaveVariable
.2980	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2983	29 02		and #$02			and 	#2
.2985	d0 25		bne $29ac			bne 	_VCNoCreate
.2987	20 63 28	jsr $2863			jsr 	VARCreate 					; create variable
.298a					_VCSHaveVariable:
.298a	48		pha				pha 								; save LSB on the stack
.298b	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.298e	6a		ror a				ror 	a
.298f	6a		ror a				ror 	a
.2990	68		pla				pla 								; restore LSB
.2991	90 08		bcc $299b			bcc 	_VCSNotArray 				; skip if not an array
.2993	20 fb 27	jsr $27fb			jsr 	VARArrayLookup 				; look for subscripts.
.2996	48		pha				pha 								; check )
.2997	20 1c 26	jsr $261c			jsr 	ERRCheckRParen
.299a	68		pla				pla
.299b					_VCSNotArray:
.299b	86 09		stx $09				stx 	IFR0+IM1 					; save address
.299d	85 08		sta $08				sta 	IFR0+IM0
.299f	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.29a1	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.29a4	6a		ror a				ror 	a
.29a5	a9 00		lda #$00			lda 	#0
.29a7	6a		ror a				ror 	a 							; now $00 or $80
.29a8	85 0b		sta $0b				sta 	IFR0+IExp
.29aa	38		sec				sec 								; it's a reference
.29ab	60		rts				rts
.29ac					_VCNoCreate:
.29ac	4c 81 25	jmp $2581		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.29af					IFInitialise:
.29af	9c de 06	stz $06de			stz 	IFStackIndex
.29b2	60		rts				rts
.29b3					IFloatSubtract:
.29b3	da		phx				phx
.29b4	a2 08		ldx #$08			ldx 	#IFR0
.29b6	20 cf 2f	jsr $2fcf			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.29b9	fa		plx				plx
.29ba					IFloatAdd:
.29ba	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.29bc	05 0b		ora $0b				ora 	IFR0+IExp
.29be	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.29c0	d0 4e		bne $2a10			bne 	_IFloatAddDecimals 			; decimal version.
.29c2					_IFAddSubMantissa:
.29c2	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.29c4	45 0b		eor $0b				eor 	IFR0+IExp
.29c6	29 40		and #$40			and 	#IFSign
.29c8	d0 21		bne $29eb			bne 	_IFloatSubMantissa
.29ca	18		clc				clc 								; do the actual addition
.29cb	a5 08		lda $08			lda 	IFR0+IM0
.29cd	75 00		adc $00,x		adc 		IM0,x
.29cf	85 08		sta $08			sta 	IFR0+IM0
.29d1	a5 09		lda $09			lda 	IFR0+IM1
.29d3	75 01		adc $01,x		adc 		IM1,x
.29d5	85 09		sta $09			sta 	IFR0+IM1
.29d7	a5 0a		lda $0a			lda 	IFR0+IM2
.29d9	75 02		adc $02,x		adc 		IM2,x
.29db	85 0a		sta $0a			sta 	IFR0+IM2
.29dd	10 29		bpl $2a08			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.29df	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.29e1	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.29e4	20 1d 30	jsr $301d			jsr 	IFloatIncExponent
.29e7	d0 1f		bne $2a08			bne 	_IFloatAddExit
.29e9	38		sec				sec 								; overflowed numerically.
.29ea	60		rts				rts
.29eb					_IFloatSubMantissa:
.29eb	38		sec				sec 								; do the subtraction R0-Rx
.29ec	a5 08		lda $08			lda 	IFR0+IM0
.29ee	f5 00		sbc $00,x		sbc 		IM0,x
.29f0	85 08		sta $08			sta 	IFR0+IM0
.29f2	a5 09		lda $09			lda 	IFR0+IM1
.29f4	f5 01		sbc $01,x		sbc 		IM1,x
.29f6	85 09		sta $09			sta 	IFR0+IM1
.29f8	a5 0a		lda $0a			lda 	IFR0+IM2
.29fa	f5 02		sbc $02,x		sbc 		IM2,x
.29fc	85 0a		sta $0a			sta 	IFR0+IM2
.29fe	b0 08		bcs $2a08			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2a00	a2 08		ldx #$08			ldx 	#IFR0
.2a02	20 d7 2f	jsr $2fd7			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2a05	20 cf 2f	jsr $2fcf			jsr 	IFloatNegate 				; negate
.2a08					_IFloatAddExit:
.2a08	18		clc				clc
.2a09	60		rts				rts
.2a0a					_IFloatZeroAdd:
.2a0a	fa		plx				plx 								; return this value in R0
.2a0b	20 55 2f	jsr $2f55			jsr 	IFloatCopyFromRegister
.2a0e	18		clc				clc
.2a0f	60		rts				rts
.2a10					_IFloatAddDecimals:
.2a10	20 bd 2f	jsr $2fbd			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2a13	f0 f3		beq $2a08			beq 	_IFloatAddExit
.2a15	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise 			; normalise RX
.2a18	da		phx				phx 								; normalise R0
.2a19	a2 08		ldx #$08			ldx 	#IFR0
.2a1b	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.2a1e	f0 ea		beq $2a0a			beq 	_IFloatZeroAdd
.2a20	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise
.2a23	fa		plx				plx
.2a24	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2a26	29 3f		and #$3f			and 	#IFXMask
.2a28	38		sec				sec
.2a29	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2a2b	85 20		sta $20				sta 	iTemp0
.2a2d	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2a2f	29 3f		and #$3f			and 	#IFXMask
.2a31	38		sec				sec
.2a32	e9 20		sbc #$20			sbc 	#$20
.2a34	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2a36	b0 02		bcs $2a3a			bcs 	_IFloatHaveLarger
.2a38	a5 20		lda $20				lda 	iTemp0
.2a3a					_IFloatHaveLarger:
.2a3a	18		clc				clc 								; get the actual one back.
.2a3b	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2a3d	20 4a 2a	jsr $2a4a			jsr 	_IFShiftXToA
.2a40	da		phx				phx
.2a41	a2 08		ldx #$08			ldx 	#IFR0
.2a43	20 4a 2a	jsr $2a4a			jsr 	_IFShiftXToA
.2a46	fa		plx				plx
.2a47	4c c2 29	jmp $29c2			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2a4a					_IFShiftXToA:
.2a4a	8d d6 06	sta $06d6			sta 	IFTarget
.2a4d	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; check adding zero ?
.2a50	f0 11		beq $2a63			beq 	_IFSXExit
.2a52					_IFSXLoop:
.2a52	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2a54	29 3f		and #$3f			and 	#IFXMask
.2a56	cd d6 06	cmp $06d6			cmp 	IFTarget
.2a59	f0 08		beq $2a63			beq 	_IFSXExit
.2a5b	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.2a5e	20 1d 30	jsr $301d			jsr 	IFloatIncExponent
.2a61	80 ef		bra $2a52			bra 	_IFSXLoop
.2a63					_IFSXExit:
.2a63	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2a64					IFloatMultiply:
.2a64	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2a67	20 1f 2b	jsr $2b1f			jsr 	IFCalculateNewSign
.2a6a	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2a6c	05 0b		ora $0b				ora 	IFR0+IExp
.2a6e	29 3f		and #$3f			and 	#IFXMask
.2a70	15 01		ora $01,x			ora 	IM1,x
.2a72	05 09		ora $09				ora 	IFR0+IM1
.2a74	15 02		ora $02,x			ora 	IM2,x
.2a76	05 0a		ora $0a				ora 	IFR0+IM2
.2a78	d0 0a		bne $2a84			bne 	_IFMStandard
.2a7a	20 a0 2f	jsr $2fa0			jsr 	IFloatMultiply8BitRx
.2a7d	ad d8 06	lda $06d8			lda 	IFNewSign
.2a80	85 0b		sta $0b				sta 	IFR0+IExp
.2a82	18		clc				clc
.2a83	60		rts				rts
.2a84					_IFMStandard:
.2a84	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2a86	20 16 2b	jsr $2b16			jsr 	IFMSignExtend
.2a89	8d d7 06	sta $06d7			sta 	IFNewExponent
.2a8c	a5 0b		lda $0b				lda 	IFR0+IExp
.2a8e	20 16 2b	jsr $2b16			jsr 	IFMSignExtend
.2a91	18		clc				clc
.2a92	6d d7 06	adc $06d7			adc 	IFNewExponent
.2a95	8d d7 06	sta $06d7			sta 	IFNewExponent
.2a98	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2a9a	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister
.2a9d	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2a9f	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2aa2					_IFMLoop:
.2aa2	a2 14		ldx #$14			ldx 	#IFRTemp
.2aa4	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.2aa7	f0 3a		beq $2ae3			beq 	_IFMExit
.2aa9	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2aac	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2aae	10 03		bpl $2ab3			bpl	 	_IFMTargetOkay
.2ab0	20 07 2b	jsr $2b07			jsr 	_IFMShiftAll
.2ab3					_IFMTargetOkay:
.2ab3	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2ab5	29 01		and #$01			and 	#1
.2ab7	f0 16		beq $2acf			beq 	_IFMNoAdd
.2ab9	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2abc	18		clc				clc
.2abd	a5 08		lda $08			lda 	IFR0+IM0
.2abf	75 00		adc $00,x		adc 		IM0,x
.2ac1	85 08		sta $08			sta 	IFR0+IM0
.2ac3	a5 09		lda $09			lda 	IFR0+IM1
.2ac5	75 01		adc $01,x		adc 		IM1,x
.2ac7	85 09		sta $09			sta 	IFR0+IM1
.2ac9	a5 0a		lda $0a			lda 	IFR0+IM2
.2acb	75 02		adc $02,x		adc 		IM2,x
.2acd	85 0a		sta $0a			sta 	IFR0+IM2
.2acf					_IFMNoAdd:
.2acf	a5 0a		lda $0a				lda 	IFR0+IM2
.2ad1	10 03		bpl $2ad6			bpl 	_IFMResultOkay
.2ad3	20 07 2b	jsr $2b07			jsr 	_IFMShiftAll
.2ad6					_IFMResultOkay:
.2ad6	a2 14		ldx #$14			ldx 	#IFRTemp
.2ad8	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.2adb	ae d6 06	ldx $06d6			ldx 	IFTarget
.2ade	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.2ae1	80 bf		bra $2aa2			bra 	_IFMLoop
.2ae3					_IFMExit:
.2ae3	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2ae6	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2ae8	90 0f		bcc $2af9			bcc 	_IFMOkay
.2aea	c9 e0		cmp #$e0			cmp 	#$E0
.2aec	b0 0b		bcs $2af9			bcs 	_IFMOkay
.2aee	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2af0	f0 13		beq $2b05			beq 	_IFMError
.2af2	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2af4	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2af7	18		clc				clc
.2af8	60		rts				rts
.2af9					_IFMOkay:
.2af9	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2afb	0d d8 06	ora $06d8			ora 	IFNewSign
.2afe	85 0b		sta $0b				sta 	IFR0+IExp
.2b00	18		clc				clc
.2b01	60		rts				rts
.2b02	4c ff ff	jmp $ffff			jmp 	$FFFF
.2b05					_IFMError:
.2b05	38		sec				sec
.2b06	60		rts				rts
.2b07					_IFMShiftAll:
.2b07	a2 08		ldx #$08			ldx 	#IFR0
.2b09	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.2b0c	ae d6 06	ldx $06d6			ldx 	IFTarget
.2b0f	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.2b12	ee d7 06	inc $06d7			inc 	IFNewExponent
.2b15	60		rts				rts
.2b16					IFMSignExtend:
.2b16	29 3f		and #$3f			and 	#IFXMask
.2b18	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2b1a	90 02		bcc $2b1e			bcc 	_IFMNoSXX
.2b1c	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2b1e					_IFMNoSXX:
.2b1e	60		rts				rts
.2b1f					IFCalculateNewSign:
.2b1f	b5 03		lda $03,x			lda 	IExp,x
.2b21	45 0b		eor $0b				eor 	IFR0+IExp
.2b23	29 40		and #$40			and 	#IFSign
.2b25	8d d8 06	sta $06d8			sta 	IFNewSign
.2b28	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2b29					IFloatDivideInteger:
.2b29	20 42 2b	jsr $2b42			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2b2c	b0 06		bcs $2b34			bcs 	_IFDIExit
.2b2e	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2b30	20 55 2f	jsr $2f55			jsr 	IFloatCopyFromRegister
.2b33	18		clc				clc
.2b34					_IFDIExit:
.2b34	60		rts				rts
.2b35					IFloatModulusInteger:
.2b35	20 42 2b	jsr $2b42			jsr 	IFloatDivideIntegerCommon
.2b38	b0 07		bcs $2b41			bcs 	_IFMIExit
.2b3a	ae d6 06	ldx $06d6			ldx 	IFTarget
.2b3d	20 55 2f	jsr $2f55			jsr 	IFloatCopyFromRegister
.2b40	18		clc				clc
.2b41					_IFMIExit:
.2b41	60		rts				rts
.2b42					IFloatDivideIntegerCommon:
.2b42	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2b45	20 1f 2b	jsr $2b1f			jsr 	IFCalculateNewSign 			; calculate sign of result
.2b48	20 70 2b	jsr $2b70			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2b4b	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2b4d	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.2b50	f0 1c		beq $2b6e			beq 	_IFDIDivZero
.2b52	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2b55	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2b58	5a		phy				phy
.2b59	a0 18		ldy #$18			ldy 	#24
.2b5b					_IFDILoop:
.2b5b	20 81 2b	jsr $2b81			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2b5e	20 8d 2b	jsr $2b8d			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2b61	88		dey				dey
.2b62	d0 f7		bne $2b5b			bne 	_IFDILoop 					; do it 24 times
.2b64	7a		ply				ply
.2b65	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2b68	29 40		and #$40			and 	#IFSign
.2b6a	85 17		sta $17				sta 	IFRTemp+IExp
.2b6c	18		clc				clc 								; is okay.
.2b6d	60		rts				rts
.2b6e					_IFDIDivZero:
.2b6e	38		sec				sec
.2b6f	60		rts				rts
.2b70					IFDCopyRXToRTemp:
.2b70	b5 00		lda $00,x			lda 	IM0,x
.2b72	85 14		sta $14				sta 	IFRTemp+IM0
.2b74	b5 01		lda $01,x			lda 	IM1,x
.2b76	85 15		sta $15				sta 	IFRTemp+IM1
.2b78	b5 02		lda $02,x			lda 	IM2,x
.2b7a	85 16		sta $16				sta 	IFRTemp+IM2
.2b7c	b5 03		lda $03,x			lda 	IExp,x
.2b7e	85 17		sta $17				sta 	IFRTemp+IExp
.2b80	60		rts				rts
.2b81					IFDShiftSTempS1Left:
.2b81	a2 14		ldx #$14			ldx 	#IFRTemp
.2b83	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft
.2b86	ae d6 06	ldx $06d6			ldx 	IFTarget
.2b89	20 ec 2f	jsr $2fec			jsr 	IFloatRotateLeft
.2b8c	60		rts				rts
.2b8d					IFDTrySubtract:
.2b8d	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2b90	38		sec				sec 								; subtract, saving the results on the stack.
.2b91	b5 00		lda $00,x			lda 	IM0,x
.2b93	e5 08		sbc $08				sbc 	IFR0+IM0
.2b95	48		pha				pha
.2b96	b5 01		lda $01,x			lda 	IM1,x
.2b98	e5 09		sbc $09				sbc 	IFR0+IM1
.2b9a	48		pha				pha
.2b9b	b5 02		lda $02,x			lda 	IM2,x
.2b9d	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2b9f	b0 03		bcs $2ba4			bcs 	_IFDCanSubtract
.2ba1	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2ba2	68		pla				pla
.2ba3	60		rts				rts
.2ba4					_IFDCanSubtract:
.2ba4	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2ba6	68		pla				pla
.2ba7	95 01		sta $01,x			sta 	IM1,x
.2ba9	68		pla				pla
.2baa	95 00		sta $00,x			sta 	IM0,x
.2bac	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2bae	d0 06		bne $2bb6			bne 	_IFDCSExit
.2bb0	e6 15		inc $15				inc 	IFRTemp+IM1
.2bb2	d0 02		bne $2bb6			bne 	_IFDCSExit
.2bb4	e6 16		inc $16				inc 	IFRTemp+IM2
.2bb6					_IFDCSExit:
.2bb6	60		rts				rts
.2bb7					IFloatBitwiseAnd:
.2bb7	5a		phy				phy
.2bb8	20 fc 2b	jsr $2bfc			jsr 	IFPreProcessBitwise 		; set up everything.
.2bbb	d0 0f		bne $2bcc			bne 	_IFBAExit
.2bbd					_IFBALoop:
.2bbd	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2bc0	35 00		and $00,x			and 	IM0,x
.2bc2	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2bc5	e8		inx				inx
.2bc6	c8		iny				iny
.2bc7	c0 03		cpy #$03			cpy 	#3
.2bc9	d0 f2		bne $2bbd			bne 	_IFBALoop
.2bcb	18		clc				clc
.2bcc					_IFBAExit:
.2bcc	7a		ply				ply
.2bcd	60		rts				rts
.2bce					IFloatBitwiseOr:
.2bce	5a		phy				phy
.2bcf	20 fc 2b	jsr $2bfc			jsr 	IFPreProcessBitwise 		; set up everything.
.2bd2	d0 0f		bne $2be3			bne 	_IFBAExit
.2bd4					_IFBALoop:
.2bd4	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2bd7	15 00		ora $00,x			ora 	IM0,x
.2bd9	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2bdc	e8		inx				inx
.2bdd	c8		iny				iny
.2bde	c0 03		cpy #$03			cpy 	#3
.2be0	d0 f2		bne $2bd4			bne 	_IFBALoop
.2be2	18		clc				clc
.2be3					_IFBAExit:
.2be3	7a		ply				ply
.2be4	60		rts				rts
.2be5					IFloatBitwiseXor:
.2be5	5a		phy				phy
.2be6	20 fc 2b	jsr $2bfc			jsr 	IFPreProcessBitwise 		; set up everything.
.2be9	d0 0f		bne $2bfa			bne 	_IFBAExit
.2beb					_IFBALoop:
.2beb	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2bee	55 00		eor $00,x			eor 	IM0,x
.2bf0	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2bf3	e8		inx				inx
.2bf4	c8		iny				iny
.2bf5	c0 03		cpy #$03			cpy 	#3
.2bf7	d0 f2		bne $2beb			bne 	_IFBALoop
.2bf9	18		clc				clc
.2bfa					_IFBAExit:
.2bfa	7a		ply				ply
.2bfb	60		rts				rts
.2bfc					IFPreProcessBitwise:
.2bfc	a0 00		ldy #$00			ldy 	#0 							; set index.
.2bfe	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2c00	15 03		ora $03,x			ora 	IExp,x
.2c02	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2c04	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2c06	38		sec				sec 								; carry set just in cases.
.2c07	60		rts				rts
.2c08					IFloatAbsoluteR0:
.2c08	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2c0a	29 bf		and #$bf			and 	#IFSign ^ 255
.2c0c	85 0b		sta $0b				sta 	IFR0+IExp
.2c0e	18		clc				clc
.2c0f	60		rts				rts
.2c10					IFloatSquareRootR0:
.2c10	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2c12	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.2c15	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2c17	29 40		and #$40			and 	#IFSign
.2c19	d0 2f		bne $2c4a			bne 	_IFSRFail
.2c1b	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise 			; it will work better !
.2c1e	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2c20	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister
.2c23	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2c25	20 16 2b	jsr $2b16			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2c28	18		clc				clc
.2c29	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2c2b	85 0b		sta $0b				sta 	IFR0+IExp
.2c2d	4a		lsr a				lsr 	a 							; which we can halve.
.2c2e	38		sec				sec 								; convert back
.2c2f	e9 17		sbc #$17			sbc 	#23
.2c31	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2c33	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2c35	20 4c 2c	jsr $2c4c			jsr 	_IFSRNewton
.2c38	20 4c 2c	jsr $2c4c			jsr 	_IFSRNewton
.2c3b	20 4c 2c	jsr $2c4c			jsr 	_IFSRNewton
.2c3e	20 4c 2c	jsr $2c4c			jsr 	_IFSRNewton
.2c41	18		clc				clc
.2c42	60		rts				rts
.2c43					_IFSRZero:
.2c43	a2 08		ldx #$08			ldx 	#IFR0
.2c45	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2c48	18		clc				clc
.2c49	60		rts				rts
.2c4a					_IFSRFail:
.2c4a	38		sec				sec
.2c4b	60		rts				rts
.2c4c					_IFSRNewton:
.2c4c	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2c4e	20 13 2f	jsr $2f13			jsr 	IFloatPushRx
.2c51	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2c53	20 13 2f	jsr $2f13			jsr 	IFloatPushRx
.2c56	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2c58	20 e7 2c	jsr $2ce7			jsr 	IFloatDivideFloat
.2c5b	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2c5d	20 34 2f	jsr $2f34			jsr 	IFloatPullRx
.2c60	20 ba 29	jsr $29ba			jsr 	IFloatAdd 					; now guess + original/guess
.2c63	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2c65	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.2c68	a2 0c		ldx #$0c			ldx 	#IFR1
.2c6a	20 34 2f	jsr $2f34			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2c6d	60		rts				rts
.2c6e					IFloatFractionalR0:
.2c6e	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2c70	29 3f		and #$3f			and 	#IFXMask
.2c72	f0 17		beq $2c8b			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2c74	20 08 2c	jsr $2c08			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2c77	a2 08		ldx #$08			ldx 	#IFR0
.2c79	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise 			; normalise R0
.2c7c	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2c7e	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister
.2c81	20 c4 2c	jsr $2cc4			jsr 	IFloatIntegerR0 			; take integer part of R0
.2c84	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2c86	20 b3 29	jsr $29b3			jsr 	IFloatSubtract
.2c89	80 05		bra $2c90			bra 	_FIPExit
.2c8b					_FIPZero:
.2c8b	a2 08		ldx #$08			ldx 	#IFR0
.2c8d	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2c90					_FIPExit:
.2c90	18		clc				clc
.2c91	60		rts				rts
.2c92					IFloatCompare:
.2c92	20 b3 29	jsr $29b3			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2c95	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2c97	05 0b		ora $0b				ora 	IFR0+IExp
.2c99	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2c9b	29 3f		and #$3f			and 	#IFXMask
.2c9d	d0 19		bne $2cb8			bne 	_IFCNonInteger
.2c9f	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; check if zero
.2ca2	f0 0f		beq $2cb3			beq 	_IFCZero
.2ca4					_IFCReturnSign:
.2ca4	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2ca6	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2ca8	48		pha				pha
.2ca9	a9 01		lda #$01			lda 	#1
.2cab	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte 				; return to +1
.2cae	68		pla				pla 								; sign bit back
.2caf	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2cb1	18		clc				clc
.2cb2	60		rts				rts
.2cb3					_IFCZero:
.2cb3	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2cb6	18		clc				clc
.2cb7	60		rts				rts
.2cb8					_IFCNonInteger:
.2cb8	a5 08		lda $08				lda 	IFR0+IM0
.2cba	29 00		and #$00			and		#$00
.2cbc	05 09		ora $09				ora 	IFR0+IM1
.2cbe	05 0a		ora $0a				ora 	IFR0+IM2
.2cc0	f0 f1		beq $2cb3			beq 	_IFCZero 					; near enough !
.2cc2	80 e0		bra $2ca4			bra 	_IFCReturnSign 				; return the sign of the difference.
.2cc4					IFloatIntegerR0:
.2cc4	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2cc6	29 3f		and #$3f			and 	#IFXMask
.2cc8	f0 1b		beq $2ce5			beq 	_FIPExit 					; if so do nothing
.2cca	a2 08		ldx #$08			ldx 	#IFR0
.2ccc	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise 			; normalise
.2ccf	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; is it zero ?
.2cd2	f0 0e		beq $2ce2			beq 	_FIPZero 					; if so return zero.
.2cd4					_FIPShift:
.2cd4	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2cd6	29 20		and #$20			and 	#$20 						; still -ve
.2cd8	f0 0b		beq $2ce5			beq 	_FIPExit
.2cda	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight 			; shift mantissa right
.2cdd	20 1d 30	jsr $301d			jsr 	IFloatIncExponent 			; bump exponent
.2ce0	80 f2		bra $2cd4			bra 	_FIPShift
.2ce2					_FIPZero:
.2ce2	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2ce5					_FIPExit:
.2ce5	18		clc				clc
.2ce6	60		rts				rts
.2ce7					IFloatDivideFloat:
.2ce7	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2cea	20 1f 2b	jsr $2b1f			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ced	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise 			; normalise RX
.2cf0	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2cf2	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise
.2cf5	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.2cf8	f0 56		beq $2d50			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2cfa	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2cfc	20 16 2b	jsr $2b16			jsr 	IFMSignExtend
.2cff	8d d7 06	sta $06d7			sta 	IFNewExponent
.2d02	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2d05	b5 03		lda $03,x			lda 	IExp,x
.2d07	20 16 2b	jsr $2b16			jsr 	IFMSignExtend
.2d0a	38		sec				sec
.2d0b	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2d0e	38		sec				sec
.2d0f	e9 17		sbc #$17			sbc 	#23
.2d11	8d d7 06	sta $06d7			sta 	IFNewExponent
.2d14	20 52 2d	jsr $2d52			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2d17	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2d19	10 08		bpl $2d23			bpl 	_IFDFNoShiftResult
.2d1b	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2d1d	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.2d20	ee d7 06	inc $06d7			inc 	IFNewExponent
.2d23					_IFDFNoShiftResult:
.2d23	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2d26	30 06		bmi $2d2e			bmi 	_IFDFCheckUnderflow
.2d28	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2d2a	b0 24		bcs $2d50			bcs 	_IFDFDivZero
.2d2c	80 11		bra $2d3f			bra		_IFDFExit
.2d2e					_IFDFCheckUnderflow:
.2d2e	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2d31	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2d33	b0 0a		bcs $2d3f			bcs 	_IFDFExit
.2d35	ee d7 06	inc $06d7			inc 	IFNewExponent
.2d38	a2 14		ldx #$14			ldx 	#IFRTemp
.2d3a	20 f3 2f	jsr $2ff3			jsr 	IFloatShiftRight
.2d3d	80 ef		bra $2d2e			bra 	_IFDFCheckUnderflow
.2d3f					_IFDFExit:
.2d3f	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2d42	29 3f		and #$3f			and 	#IFXMask
.2d44	0d d8 06	ora $06d8			ora 	IFNewSign
.2d47	85 17		sta $17				sta 	IFRTemp+IExp
.2d49	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2d4b	20 55 2f	jsr $2f55			jsr 	IFloatCopyFromRegister
.2d4e	18		clc				clc
.2d4f	60		rts				rts
.2d50					_IFDFDivZero:
.2d50	38		sec				sec
.2d51	60		rts				rts
.2d52					IFloatDivideSupport:
.2d52	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2d54	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2d57	5a		phy				phy 								; main division loop x 23
.2d58	a0 17		ldy #$17			ldy 	#23
.2d5a					_IFDSLoop:
.2d5a	20 8d 2b	jsr $2b8d			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2d5d	20 81 2b	jsr $2b81			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2d60	88		dey				dey
.2d61	d0 f7		bne $2d5a			bne 	_IFDSLoop 					; do it 24 times
.2d63	7a		ply				ply
.2d64	60		rts				rts
.2d65					IFloatIntegerToStringR0:
.2d65	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2d68	20 45 30	jsr $3045			jsr 	IFloatBufferReset			; empty buffer
.2d6b	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2d6d	29 3f		and #$3f			and 	#IFXMask
.2d6f	d0 1e		bne $2d8f			bne 	_IFIFail
.2d71	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2d73	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.2d76	f0 0e		beq $2d86			beq 	_IFINotNegative
.2d78	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2d7a	29 40		and #$40			and 	#IFSign
.2d7c	f0 08		beq $2d86			beq 	_IFINotNegative
.2d7e	a9 2d		lda #$2d			lda 	#"-"						; output -
.2d80	20 54 30	jsr $3054			jsr 	IFloatBufferWrite
.2d83	20 cf 2f	jsr $2fcf			jsr 	IFloatNegate 				; tidy up !
.2d86					_IFINotNegative:
.2d86	20 91 2d	jsr $2d91			jsr 	_IFIRecursiveConvert 		; start converting
.2d89	20 4c 30	jsr $304c			jsr 	IFloatGetBufferAddress
.2d8c	18		clc				clc
.2d8d	80 01		bra $2d90			bra 	_IFIExit
.2d8f					_IFIFail:
.2d8f	38		sec				sec
.2d90					_IFIExit:
.2d90	60		rts				rts
.2d91					_IFIRecursiveConvert:
.2d91	a2 0c		ldx #$0c			ldx 	#IFR1
.2d93	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister 		; R0->R1
.2d96	a2 08		ldx #$08			ldx 	#IFR0
.2d98	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2d9b	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.2d9e	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2da0	20 29 2b	jsr $2b29			jsr 	IFloatDivideInteger
.2da3	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2da5	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero
.2da8	f0 09		beq $2db3			beq 	_IFIOutDigit
.2daa	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2dac	48		pha				pha
.2dad	20 91 2d	jsr $2d91			jsr 	_IFIRecursiveConvert 		; convert the divider
.2db0	68		pla				pla
.2db1	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2db3					_IFIOutDigit:
.2db3	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2db5	c9 0a		cmp #$0a			cmp	 	#10
.2db7	90 02		bcc $2dbb			bcc 	_IFINotHex
.2db9	69 06		adc #$06			adc 	#6
.2dbb					_IFINotHex:
.2dbb	69 30		adc #$30			adc 	#48
.2dbd	20 54 30	jsr $3054			jsr 	IFloatBufferWrite
.2dc0	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2dc1					IFloatFloatToStringR0:
.2dc1	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2dc3	20 13 2f	jsr $2f13			jsr 	IFloatPushRx
.2dc6	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister
.2dc9	20 c4 2c	jsr $2cc4			jsr 	IFloatIntegerR0				; make R0 integer
.2dcc	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2dce	20 65 2d	jsr $2d65			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2dd1	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2dd4	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2dd6	29 3f		and #$3f			and 	#IFXMask
.2dd8	f0 44		beq $2e1e			beq 	_IFFSExit
.2dda					_IFloatFracLoop:
.2dda	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2ddc	20 55 2f	jsr $2f55			jsr 	IFloatCopyFromRegister
.2ddf	20 6e 2c	jsr $2c6e			jsr 	IFloatFractionalR0
.2de2	20 fb 2f	jsr $2ffb			jsr 	IFloatNormalise
.2de5	a2 10		ldx #$10			ldx 	#IFR2
.2de7	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister 		; copy to R2
.2dea	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2dec	a9 0a		lda #$0a			lda 	#10
.2dee	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.2df1	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2df3	20 64 2a	jsr $2a64			jsr 	IFloatMultiply
.2df6	a2 10		ldx #$10			ldx 	#IFR2
.2df8	20 66 2f	jsr $2f66			jsr 	IFloatCopyToRegister
.2dfb	20 c4 2c	jsr $2cc4			jsr 	IFloatIntegerR0 			; get integer part of R0
.2dfe	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2e01	c9 03		cmp #$03			cmp 	#3
.2e03	f0 16		beq $2e1b			beq 	_IFFSExitStripZero
.2e05	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet ?
.2e08	d0 05		bne $2e0f			bne 	_IFloatNotFirst
.2e0a	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2e0c	20 54 30	jsr $3054			jsr 	IFloatBufferWrite
.2e0f					_IFloatNotFirst:
.2e0f	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2e12	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2e14	09 30		ora #$30			ora 	#"0"						; ASCII
.2e16	20 54 30	jsr $3054			jsr 	IFloatBufferWrite 			; write to the buffer.
.2e19	80 bf		bra $2dda			bra 	_IFloatFracLoop
.2e1b					_IFFSExitStripZero:
.2e1b	20 63 30	jsr $3063			jsr 	IFloatStripTrailingZeros
.2e1e					_IFFSExit:
.2e1e	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2e20	20 34 2f	jsr $2f34			jsr 	IFloatPullRx
.2e23	20 4c 30	jsr $304c			jsr 	IFloatGetBufferAddress
.2e26	18		clc				clc
.2e27	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2e28					IFloatStringToFloatR0:
.2e28	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2e2b	86 20		stx $20				stx 	iTemp0
.2e2d	84 21		sty $21				sty 	iTemp0+1
.2e2f	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2e31	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2e34	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2e37	20 c4 2e	jsr $2ec4			jsr 	IFSTFGetNext 				; get first
.2e3a	f0 1b		beq $2e57			beq 	_IFSTFFail 					; no character
.2e3c	90 10		bcc $2e4e			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2e3e	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2e40	d0 15		bne $2e57			bne 	_IFSTFFail
.2e42	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2e44	8d dc 06	sta $06dc			sta 	IFSignFlag
.2e47					_IFSTFLoop:
.2e47	20 c4 2e	jsr $2ec4			jsr 	IFSTFGetNext 				; get next
.2e4a	b0 0b		bcs $2e57			bcs 	_IFSTFFail 					; bad character.
.2e4c	f0 11		beq $2e5f			beq 	_IFSTFExit 					; end of data
.2e4e					_IFSTFHaveChar:
.2e4e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2e50	f0 08		beq $2e5a			beq 	_IFSTFDecimal
.2e52	20 e8 2e	jsr $2ee8			jsr 	IFSTFAddR0 					; add number in
.2e55	80 f0		bra $2e47			bra 	_IFSTFLoop 					; keep going until . or end.
.2e57					_IFSTFFail:
.2e57	38		sec				sec
.2e58	80 0d		bra $2e67			bra 	_IFSTFReturn
.2e5a					_IFSTFDecimal:
.2e5a	20 6f 2e	jsr $2e6f			jsr 	IFSTFDecimal 				; call the decimal places code.
.2e5d	b0 08		bcs $2e67			bcs 	_IFSTFReturn 				; error
.2e5f					_IFSTFExit:
.2e5f	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2e61	0d dc 06	ora $06dc			ora 	IFSignFlag
.2e64	85 0b		sta $0b				sta 	IFR0+IExp
.2e66	18		clc				clc
.2e67					_IFSTFReturn:
.2e67	60		rts				rts
.2e68					IFloatAddDecimalToR0:
.2e68	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2e6b	86 20		stx $20				stx 	iTemp0
.2e6d	84 21		sty $21				sty 	iTemp0+1
.2e6f					IFSTFDecimal:
.2e6f	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2e71	20 13 2f	jsr $2f13			jsr 	IFloatPushRx
.2e74	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2e76	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero
.2e79	9c dd 06	stz $06dd			stz 	IFDecimalPlaces
.2e7c					_IFSTDLoop:
.2e7c	20 c4 2e	jsr $2ec4			jsr 	IFSTFGetNext 				; get next
.2e7f	b0 41		bcs $2ec2			bcs 	_IFSTFFail2 				; bad character.
.2e81	f0 11		beq $2e94			beq 	_IFSTFComplete 				; end of data, work out the result.
.2e83	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2e85	f0 39		beq $2ec0			beq 	_IFSTFExit2
.2e87	20 e8 2e	jsr $2ee8			jsr 	IFSTFAddR0 					; add number in
.2e8a	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2e8d	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2e90	c9 03		cmp #$03			cmp 	#3
.2e92	90 e8		bcc $2e7c			bcc 	_IFSTDLoop
.2e94					_IFSTFComplete:
.2e94	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2e97	f0 27		beq $2ec0			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2e99	3a		dec a				dec 	a 							; table indexed from 1.
.2e9a	0a		asl a				asl 	a
.2e9b	0a		asl a				asl 	a
.2e9c	aa		tax				tax
.2e9d	bd ff 2e	lda $2eff,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2ea0	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2ea2	bd 00 2f	lda $2f00,x			lda 	TableTen+1,x
.2ea5	85 0d		sta $0d				sta  	IFR1+IM1
.2ea7	bd 01 2f	lda $2f01,x			lda 	TableTen+2,x
.2eaa	85 0e		sta $0e				sta  	IFR1+IM2
.2eac	bd 02 2f	lda $2f02,x			lda 	TableTen+3,x
.2eaf	85 0f		sta $0f				sta  	IFR1+IExp
.2eb1	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2eb3	20 64 2a	jsr $2a64			jsr 	IFloatMultiply
.2eb6	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2eb8	20 34 2f	jsr $2f34			jsr 	IFloatPullRx
.2ebb	a2 0c		ldx #$0c			ldx 	#IFR1
.2ebd	20 ba 29	jsr $29ba			jsr 	IFloatAdd
.2ec0					_IFSTFExit2:
.2ec0	18		clc				clc
.2ec1	60		rts				rts
.2ec2					_IFSTFFail2:
.2ec2	38		sec				sec
.2ec3	60		rts				rts
.2ec4					IFSTFGetNext:
.2ec4	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.2ec7	f0 19		beq $2ee2			beq 	_IFSTFReturnOk
.2ec9	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2ecb	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2ecd	d0 02		bne $2ed1			bne 	_IFSTFGNNoCarry
.2ecf	e6 21		inc $21				inc 	iTemp0+1
.2ed1					_IFSTFGNNoCarry:
.2ed1	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.2ed4	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2ed6	f0 08		beq $2ee0			beq 	_IFSTFGOkay
.2ed8	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2eda	90 08		bcc $2ee4			bcc 	_IFSTFGFail
.2edc	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2ede	b0 04		bcs $2ee4			bcs 	_IFSTFGFail
.2ee0					_IFSTFGOkay:
.2ee0	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ee2					_IFSTFReturnOk:
.2ee2	18		clc				clc
.2ee3	60		rts				rts
.2ee4					_IFSTFGFail:
.2ee4	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ee6	38		sec				sec
.2ee7	60		rts				rts
.2ee8					IFSTFAddR0:
.2ee8	29 0f		and #$0f			and 	#15 						; to int value
.2eea	48		pha				pha 								; save it.
.2eeb	a9 0a		lda #$0a			lda 	#10
.2eed	a2 0c		ldx #$0c			ldx 	#IFR1
.2eef	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.2ef2	20 64 2a	jsr $2a64			jsr 	IFloatMultiply
.2ef5	68		pla				pla
.2ef6	a2 0c		ldx #$0c			ldx 	#IFR1
.2ef8	20 c6 2f	jsr $2fc6			jsr 	IFloatSetByte
.2efb	20 ba 29	jsr $29ba			jsr 	IFloatAdd
.2efe	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.2eff					TableTen:
>2eff	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2f03	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2f07	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2f0b	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2f0f	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2f13					IFloatPushRx:
.2f13	5a		phy				phy
.2f14	ac de 06	ldy $06de			ldy 	IFStackIndex
.2f17	b5 00		lda $00,x			lda 	IM0,x
.2f19	99 df 06	sta $06df,y			sta 	IFStack,y
.2f1c	b5 01		lda $01,x			lda 	IM1,x
.2f1e	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.2f21	b5 02		lda $02,x			lda 	IM2,x
.2f23	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.2f26	b5 03		lda $03,x			lda 	IExp,x
.2f28	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.2f2b	c8		iny				iny
.2f2c	c8		iny				iny
.2f2d	c8		iny				iny
.2f2e	c8		iny				iny
.2f2f	8c de 06	sty $06de			sty 	IFStackIndex
.2f32	7a		ply				ply
.2f33	60		rts				rts
.2f34					IFloatPullRx:
.2f34	5a		phy				phy
.2f35	ac de 06	ldy $06de			ldy 	IFStackIndex
.2f38	88		dey				dey
.2f39	88		dey				dey
.2f3a	88		dey				dey
.2f3b	88		dey				dey
.2f3c	b9 df 06	lda $06df,y			lda 	IFStack,y
.2f3f	95 00		sta $00,x			sta 	IM0,x
.2f41	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.2f44	95 01		sta $01,x			sta 	IM1,x
.2f46	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.2f49	95 02		sta $02,x			sta 	IM2,x
.2f4b	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.2f4e	95 03		sta $03,x			sta 	IExp,x
.2f50	8c de 06	sty $06de			sty 	IFStackIndex
.2f53	7a		ply				ply
.2f54	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.2f55					IFloatCopyFromRegister:
.2f55	b5 00		lda $00,x			lda 	0,x
.2f57	85 08		sta $08				sta 	IFR0
.2f59	b5 01		lda $01,x			lda 	1,x
.2f5b	85 09		sta $09				sta 	IFR0+1
.2f5d	b5 02		lda $02,x			lda 	2,x
.2f5f	85 0a		sta $0a				sta 	IFR0+2
.2f61	b5 03		lda $03,x			lda 	3,x
.2f63	85 0b		sta $0b				sta 	IFR0+3
.2f65	60		rts				rts
.2f66					IFloatCopyToRegister:
.2f66	a5 08		lda $08				lda 	IFR0
.2f68	95 00		sta $00,x			sta 	0,x
.2f6a	a5 09		lda $09				lda 	IFR0+1
.2f6c	95 01		sta $01,x			sta 	1,x
.2f6e	a5 0a		lda $0a				lda 	IFR0+2
.2f70	95 02		sta $02,x			sta 	2,x
.2f72	a5 0b		lda $0b				lda 	IFR0+3
.2f74	95 03		sta $03,x			sta 	3,x
.2f76	60		rts				rts
.2f77					IFloatLoadInline:
.2f77	68		pla				pla 								; pop address off to iTemp0
.2f78	85 20		sta $20				sta 	iTemp0
.2f7a	68		pla				pla
.2f7b	85 21		sta $21				sta 	iTemp0+1
.2f7d	a0 01		ldy #$01			ldy 	#1
.2f7f	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.2f81	95 00		sta $00,x			sta 	0,x
.2f83	c8		iny				iny
.2f84	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.2f86	95 01		sta $01,x			sta 	1,x
.2f88	c8		iny				iny
.2f89	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.2f8b	95 02		sta $02,x			sta 	2,x
.2f8d	c8		iny				iny
.2f8e	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.2f90	95 03		sta $03,x			sta 	3,x
.2f92	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2f93	a5 20		lda $20				lda 	iTemp0
.2f95	69 05		adc #$05			adc 	#5
.2f97	85 20		sta $20				sta 	iTemp0
.2f99	90 02		bcc $2f9d			bcc 	_IFLINoCarry
.2f9b	e6 21		inc $21				inc 	iTemp0+1
.2f9d					_IFLINoCarry:
.2f9d	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.2fa0					IFloatMultiply8BitRx:
.2fa0	5a		phy		        phy
.2fa1	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2fa3	a4 08		ldy $08		        ldy     IFR0+IM0
.2fa5	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2fa6	85 08		sta $08		        sta     IFR0+IM0
.2fa8	84 09		sty $09		        sty     IFR0+IM1
.2faa	a9 00		lda #$00	        lda     #0
.2fac	a0 08		ldy #$08	        ldy     #8
.2fae					_IFMLoop:
.2fae	90 03		bcc $2fb3	        bcc     _IFMNoAdd
.2fb0	18		clc		        clc
.2fb1	65 09		adc $09		        adc     IFR0+IM1
.2fb3					_IFMNoAdd:
.2fb3	6a		ror a		        ror     a
.2fb4	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2fb6	88		dey		        dey
.2fb7	d0 f5		bne $2fae	        bne     _IFMLoop
.2fb9	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.2fbb	7a		ply		        ply
.2fbc	60		rts		        rts
.2fbd					IFloatCheckZero:
.2fbd	b5 00		lda $00,x			lda 	IM0,x
.2fbf	15 01		ora $01,x			ora 	IM1,x
.2fc1	15 02		ora $02,x			ora 	IM2,x
.2fc3	60		rts				rts
.2fc4					IFloatSetZero:
.2fc4	a9 00		lda #$00			lda 	#0
.2fc6					IFloatSetByte:
.2fc6	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2fc8	74 01		stz $01,x			stz 	IM1,x
.2fca	74 02		stz $02,x			stz 	IM2,x
.2fcc	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2fce	60		rts				rts
.2fcf					IFloatNegate:
.2fcf	b5 03		lda $03,x			lda 	IExp,x
.2fd1	49 40		eor #$40			eor 	#IFSign
.2fd3	95 03		sta $03,x			sta 	IExp,x
.2fd5	18		clc				clc
.2fd6	60		rts				rts
.2fd7					IFloatMantissaNegate:
.2fd7	38		sec				sec
.2fd8	a9 00		lda #$00			lda 	#0
.2fda	f5 00		sbc $00,x			sbc 	IM0,x
.2fdc	95 00		sta $00,x			sta 	IM0,x
.2fde	a9 00		lda #$00			lda 	#0
.2fe0	f5 01		sbc $01,x			sbc 	IM1,x
.2fe2	95 01		sta $01,x			sta 	IM1,x
.2fe4	a9 00		lda #$00			lda 	#0
.2fe6	f5 02		sbc $02,x			sbc 	IM2,x
.2fe8	95 02		sta $02,x			sta 	IM2,x
.2fea	60		rts				rts
.2feb					IFloatShiftLeft:
.2feb	18		clc				clc
.2fec					IFloatRotateLeft:
.2fec	36 00		rol $00,x			rol 	IM0,x
.2fee	36 01		rol $01,x			rol 	IM1,x
.2ff0	36 02		rol $02,x			rol 	IM2,x
.2ff2	60		rts				rts
.2ff3					IFloatShiftRight:
.2ff3	18		clc				clc
.2ff4					IFloatRotateRight:
.2ff4	76 02		ror $02,x			ror 	IM2,x
.2ff6	76 01		ror $01,x			ror 	IM1,x
.2ff8	76 00		ror $00,x			ror 	IM0,x
.2ffa	60		rts				rts
.2ffb					IFloatNormalise:
.2ffb	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; is it zero
.2ffe	f0 18		beq $3018			beq 	_IFNExitZero 				; if so exit
.3000					_IFNLoop:
.3000	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3002	29 c0		and #$c0			and 	#$C0
.3004	c9 40		cmp #$40			cmp 	#$40
.3006	f0 13		beq $301b			beq 	_IFNExitOkay 				; if so , then we are done.
.3008	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.300a	29 3f		and #$3f			and 	#$3F
.300c	c9 20		cmp #$20			cmp 	#$20
.300e	f0 0b		beq $301b			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3010	20 31 30	jsr $3031			jsr 	IFloatDecExponent
.3013	20 eb 2f	jsr $2feb			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3016	80 e8		bra $3000			bra 	_IFNLoop
.3018					_IFNExitZero:
.3018	20 c4 2f	jsr $2fc4			jsr 	IFloatSetZero 				; set the result to zero
.301b					_IFNExitOkay:
.301b	18		clc				clc  								; return with CC.
.301c	60		rts				rts
.301d					IFloatIncExponent:
.301d	b5 03		lda $03,x			lda 	IExp,x
.301f	48		pha				pha
.3020	29 c0		and #$c0			and 	#$C0
.3022	8d 1f 07	sta $071f			sta 	IFXTemp
.3025	68		pla				pla
.3026	1a		inc a				inc 	a
.3027	29 3f		and #$3f			and 	#$3F
.3029	48		pha				pha
.302a	0d 1f 07	ora $071f			ora 	IFXTemp
.302d	95 03		sta $03,x			sta 	IExp,x
.302f	68		pla				pla
.3030	60		rts				rts
.3031					IFloatDecExponent:
.3031	b5 03		lda $03,x			lda 	IExp,x
.3033	48		pha				pha
.3034	29 c0		and #$c0			and 	#$C0
.3036	8d 1f 07	sta $071f			sta 	IFXTemp
.3039	68		pla				pla
.303a	3a		dec a				dec 	a
.303b	29 3f		and #$3f			and 	#$3F
.303d	48		pha				pha
.303e	0d 1f 07	ora $071f			ora 	IFXTemp
.3041	95 03		sta $03,x			sta 	IExp,x
.3043	68		pla				pla
.3044	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.3045					IFloatBufferReset:
.3045	9c 20 07	stz $0720			stz 	IFBufferCount
.3048	9c 21 07	stz $0721			stz 	IFBuffer
.304b	60		rts				rts
.304c					IFloatGetBufferAddress:
.304c	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.304e	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.3050	ad 20 07	lda $0720			lda 	IFBufferCount
.3053	60		rts				rts
.3054					IFloatBufferWrite:
.3054	da		phx				phx
.3055	ae 20 07	ldx $0720			ldx 	IFBufferCount
.3058	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.305b	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.305e	ee 20 07	inc $0720			inc 	IFBufferCount
.3061	fa		plx				plx
.3062	60		rts				rts
.3063					IFloatStripTrailingZeros:
.3063	ae 20 07	ldx $0720			ldx 	IFBufferCount
.3066	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.3069	c9 30		cmp #$30			cmp		#"0"
.306b	d0 0f		bne $307c			bne 	_IFSTExit
.306d	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.3070	c9 2e		cmp #$2e			cmp 	#"."
.3072	f0 08		beq $307c			beq 	_IFSTExit
.3074	ce 20 07	dec $0720			dec 	IFBufferCount
.3077	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.307a	80 e7		bra $3063			bra 	IFloatStripTrailingZeros
.307c					_IFSTExit:
.307c	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.307d					IFloatCheck:
.307d	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.307f	09 40		ora #$40			ora 	#IFSign
.3081	85 0b		sta $0b				sta 	IFR0+IExp
.3083	20 ba 29	jsr $29ba			jsr 	IFloatAdd 					; add allowed to error.
.3086	a2 08		ldx #$08			ldx 	#IFR0
.3088	20 bd 2f	jsr $2fbd			jsr 	IFloatCheckZero 			; error if < 0
.308b	f0 06		beq $3093			beq 	_IFAOkay
.308d	a5 0b		lda $0b				lda 	IFR0+IExp
.308f	29 40		and #$40			and 	#IFSign
.3091	d0 01		bne $3094			bne 	_IFAFail
.3093					_IFAOkay:
.3093	60		rts				rts
.3094					_IFAFail:
.3094	38		sec				sec
.3095	68		pla				pla 								; get address - 2
.3096	e9 02		sbc #$02			sbc 	#2
.3098	aa		tax				tax
.3099	68		pla				pla
.309a	e9 00		sbc #$00			sbc 	#0
.309c	a8		tay				tay
.309d	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.309f					_IFAStop:
>309f	db						.byte 	$DB 						; display an error AA ADR ADR
.30a0	80 fd		bra $309f			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
