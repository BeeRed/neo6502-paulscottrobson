
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Fri May 26 14:38:43 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

.1000					boot:
.1000	a2 40		ldx #$40			ldx 	#$40
.1002	a0 c0		ldy #$c0			ldy 	#$C0
.1004	20 16 16	jsr $1616			jsr 	PGMSetBaseAddress
.1007	20 40 16	jsr $1640			jsr 	IFInitialise
.100a	4c 9d 10	jmp $109d			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$89					PR_PROC = $89
=$8a					PR_ENDPROC = $8a
=$8b					PR_FOR = $8b
=$8c					PR_NEXT = $8c
=$8c					PR_STRUCTURE_LAST = $8c
=$8d					PR_STANDARD_FIRST = $8d
=$8d					PR_LSQLSQENDRSQRSQ = $8d
=$8e					PR_LSQLSQSHIFTRSQRSQ = $8e
=$8f					PR_ELSE = $8f
=$90					PR_THEN = $90
=$91					PR_TO = $91
=$92					PR_STEP = $92
=$93					PR_LET = $93
=$94					PR_PRINT = $94
=$95					PR_INPUT = $95
=$96					PR_CALL = $96
=$97					PR_SYS = $97
=$98					PR_REM = $98
=$99					PR_EXIT = $99
=$9a					PR_COMMA = $9a
=$9b					PR_SEMICOLON = $9b
=$9c					PR_COLON = $9c
=$9d					PR_SQUOTE = $9d
=$9e					PR_RPAREN = $9e
=$9f					PR_DIM = $9f
=$a0					PR_CLEAR = $a0
=$a1					PR_NEW = $a1
=$a2					PR_RUN = $a2
=$a3					PR_STOP = $a3
=$a4					PR_END = $a4
=$a5					PR_ASSERT = $a5
=$a6					PR_LIST = $a6
=$a7					PR_SAVE = $a7
=$a8					PR_LOAD = $a8
=$a8					PR_STANDARD_LAST = $a8
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d7					PR_UNARY_FIRST = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 31 12	jsr $1231			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 3e 11	jmp $113e		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 aa 15	jsr $15aa			jsr 	StringSystemInitialise
.101e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.101f					NoExec01:
.101f					NoExec02:
.101f					NoExec03:
.101f					NoExec04:
.101f					NoExec05:
.101f					NoExec06:
.101f					NoExec07:
.101f	4c ed 10	jmp $10ed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1022					Command_Print:
.1022					Command_IP_Main:
.1022	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1023					_CPLoop:
.1023	08		php				php 								; save last action flag
.1024	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1026	c9 8d		cmp #$8d			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1028	f0 3e		beq $1068			beq 	_CPExit 					; without consuming
.102a	c9 9c		cmp #$9c			cmp 	#PR_COLON
.102c	f0 3a		beq $1068			beq 	_CPExit
.102e	68		pla				pla 								; throw last action flag
.102f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1031	c8		iny				iny
.1032	c9 9b		cmp #$9b			cmp 	#PR_SEMICOLON				; is it a semicolon
.1034	f0 2f		beq $1065			beq 	_CPContinueWithSameLine
.1036	c9 9a		cmp #$9a			cmp 	#PR_COMMA 					; comma
.1038	f0 26		beq $1060			beq 	_CPTab
.103a	88		dey				dey 								; undo the get.
.103b	20 5b 12	jsr $125b			jsr 	EXPEvaluateExpression 		; evaluate expression.
.103e	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1040	10 14		bpl $1056			bpl 	_CPNumber
.1042	5a		phy				phy
.1043	18		clc				clc 								; string address to YX
.1044	a5 0c		lda $0c				lda 	IFR0+IM0
.1046	aa		tax				tax
.1047	a5 0d		lda $0d				lda 	IFR0+IM1
.1049	a8		tay				tay
.104a	e8		inx				inx 								; point to 1st character
.104b	d0 01		bne $104e			bne 	_CPNoCarry
.104d	c8		iny				iny
.104e					_CPNoCarry:
.104e	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1050	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.1053	7a		ply				ply
.1054	80 cc		bra $1022			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1056					_CPNumber:
.1056	5a		phy				phy
.1057	20 52 1a	jsr $1a52			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.105a	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.105d	7a		ply				ply
.105e	80 c2		bra $1022			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1060					_CPTab:
.1060	a9 09		lda #$09			lda 	#9 							; print TAB
.1062	20 84 10	jsr $1084			jsr 	CPPrintA
.1065					_CPContinueWithSameLine:
.1065	38		sec				sec 								; loop round with carry set, which
.1066	80 bb		bra $1023			bra 	_CPLoop 					; will inhibit final CR
.1068					_CPExit:
.1068	28		plp				plp 								; get last action flag
.1069	b0 05		bcs $1070			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.106b	a9 0d		lda #$0d			lda 	#13 						; print new line
.106d	20 84 10	jsr $1084			jsr 	CPPrintA
.1070					_CPExit2:
.1070	60		rts				rts
.1071					CPPrintAYX:
.1071	86 1e		stx $1e				stx 	zTemp0
.1073	84 1f		sty $1f				sty 	zTemp0+1
.1075	aa		tax				tax
.1076	f0 0b		beq $1083			beq 	_CPPrintExit
.1078	a0 00		ldy #$00			ldy 	#0
.107a					_CPPrintAYXLoop:
.107a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.107c	20 84 10	jsr $1084			jsr 	CPPrintA
.107f	c8		iny				iny
.1080	ca		dex				dex
.1081	d0 f7		bne $107a			bne 	_CPPrintAYXLoop
.1083					_CPPrintExit:
.1083	60		rts				rts
.1084					CPPrintA:
.1084	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1087					Command_NEW:
.1087	20 1d 16	jsr $161d			jsr 	PGMNewProgram
.108a	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.108d	4c e4 10	jmp $10e4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1090					Command_REM:
.1090					Command_REM2:
.1090	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1092	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1094	d0 06		bne $109c			bne 	_CRExit
.1096	c8		iny				iny 								; skip over it, it's a comment.
.1097	98		tya				tya
.1098	38		sec				sec
.1099	71 1c		adc ($1c),y			adc 	(codePtr),y
.109b	a8		tay				tay
.109c					_CRExit:
.109c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.109d					Command_RUN:
.109d	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.10a0	ad 40 02	lda $0240			lda 	PGMBaseHigh 				; back to the program start
.10a3	85 1d		sta $1d				sta 	codePtr+1
.10a5	64 1c		stz $1c				stz 	codePtr
.10a7	80 0b		bra $10b4			bra 	RUNNewLine
.10a9					RUNEndOfLine:
.10a9	18		clc				clc 								; advance to next line.
.10aa	b2 1c		lda ($1c)			lda 	(codePtr)
.10ac	65 1c		adc $1c				adc 	codePtr
.10ae	85 1c		sta $1c				sta 	codePtr
.10b0	90 02		bcc $10b4			bcc 	_RELNoCarry
.10b2	e6 1d		inc $1d				inc 	codePtr+1
.10b4					_RELNoCarry:
.10b4					RUNNewLine:
.10b4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.10b6	9a		txs				txs
.10b7	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.10b9	f0 29		beq $10e4			beq 	Command_END
.10bb	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.10bd					RUNNewCommand:
.10bd	9c 3b 02	stz $023b			stz 	stringInitialised 			; reset string system.
.10c0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.10c2	10 1a		bpl $10de			bpl		_RUNNotToken 				; probably an identifier
.10c4	c8		iny				iny 								; consume token
.10c5	c9 9c		cmp #$9c			cmp 	#PR_COLON 					; fast skip colon
.10c7	f0 f4		beq $10bd			beq 	RUNNewCommand
.10c9	c9 a9		cmp #$a9			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.10cb	b0 0e		bcs $10db			bcs 	_RUNSyntax
.10cd	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.10cf	90 0a		bcc $10db			bcc 	_RUNSyntax
.10d1	0a		asl a				asl 	a 							; double into X.
.10d2	aa		tax				tax
.10d3	20 d8 10	jsr $10d8			jsr 	_RUNDispatchMain			; call the main dispatcher
.10d6	80 e5		bra $10bd			bra 	RUNNewCommand
.10d8					_RUNDispatchMain:
.10d8	7c aa 14	jmp ($14aa,x)			jmp 	(VectorTable,x)
.10db					_RUNSyntax:
.10db	4c ed 10	jmp $10ed		jmp	ErrorV_syntax
.10de					_RUNNotToken:
.10de	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.10e1					Command_Shift_Handler:
.10e1	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.10e4					Command_END:
.10e4	4c e4 10	jmp $10e4			jmp 	Command_END
.10e7	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.10ea					Command_STOP:
.10ea	4c 88 11	jmp $1188		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.10ed					ErrorV_syntax:
.10ed	20 35 1d	jsr $1d35		jsr	ErrorHandler
>10f0	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>10f8	72 72 6f 72 00
.10fd					ErrorV_range:
.10fd	20 35 1d	jsr $1d35		jsr	ErrorHandler
>1100	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1108	61 6e 67 65 00
.110d					ErrorV_value:
.110d	20 35 1d	jsr $1d35		jsr	ErrorHandler
>1110	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1118	65 00
.111a					ErrorV_type:
.111a	20 35 1d	jsr $1d35		jsr	ErrorHandler
>111d	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1125	6d 61 74 63 68 00
.112b					ErrorV_unimplemented:
.112b	20 35 1d	jsr $1d35		jsr	ErrorHandler
>112e	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1136	65 6d 65 6e 74 65 64 00
.113e					ErrorV_assert:
.113e	20 35 1d	jsr $1d35		jsr	ErrorHandler
>1141	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1149	61 69 6c 00
.114d					ErrorV_internal:
.114d	20 35 1d	jsr $1d35		jsr	ErrorHandler
>1150	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1158	20 45 72 72 6f 72 00
.115f					ErrorV_divzero:
.115f	20 35 1d	jsr $1d35		jsr	ErrorHandler
>1162	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>116a	79 20 5a 65 72 6f 00
.1171					ErrorV_structure:
.1171	20 35 1d	jsr $1d35		jsr	ErrorHandler
>1174	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>117c	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1188					ErrorV_stop:
.1188	20 35 1d	jsr $1d35		jsr	ErrorHandler
>118b	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1193	53 74 6f 70 70 65 64 00
.119b					ErrorV_data:
.119b	20 35 1d	jsr $1d35		jsr	ErrorHandler
>119e	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11a6	61 74 61 00
.11aa					ErrorV_redefine:
.11aa	20 35 1d	jsr $1d35		jsr	ErrorHandler
>11ad	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>11b5	64 65 66 69 6e 65 64 00
.11bd					ErrorV_index:
.11bd	20 35 1d	jsr $1d35		jsr	ErrorHandler
>11c0	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>11c8	79 20 49 6e 64 65 78 00
.11d0					ErrorV_memory:
.11d0	20 35 1d	jsr $1d35		jsr	ErrorHandler
>11d3	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>11db	65 6d 6f 72 79 00
.11e1					ErrorV_uninitialised:
.11e1	20 35 1d	jsr $1d35		jsr	ErrorHandler
>11e4	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>11ec	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.11fb					ErrorV_string:
.11fb	20 35 1d	jsr $1d35		jsr	ErrorHandler
>11fe	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1206	6e 67 20 4c 65 6e 67 74 68 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.1210					ERRCheckLParen:
.1210	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1212	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.1214	d0 18		bne $122e			bne 	ERRSyntaxError
.1216	c8		iny				iny
.1217	60		rts				rts
.1218					ERRCheckRParen:
.1218	b1 1c		lda ($1c),y			lda 	(codePtr),y
.121a	c9 9e		cmp #$9e			cmp 	#PR_RPAREN
.121c	d0 10		bne $122e			bne 	ERRSyntaxError
.121e	c8		iny				iny
.121f	60		rts				rts
.1220					ERRCheckComma:
.1220	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1222	c9 9a		cmp #$9a			cmp 	#PR_COMMA
.1224	d0 08		bne $122e			bne 	ERRSyntaxError
.1226	c8		iny				iny
.1227	60		rts				rts
.1228					ERRCheckA:
.1228	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.122a	d0 02		bne $122e			bne 	ERRSyntaxError
.122c	c8		iny				iny
.122d	60		rts				rts
.122e					ERRSyntaxError:
.122e	4c ed 10	jmp $10ed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1231					EXPEvalNumber:
.1231	20 5b 12	jsr $125b			jsr 	EXPEvaluateExpression
.1234	24 0f		bit $0f				bit 	IFR0+IExp
.1236	30 01		bmi $1239			bmi 	EVUType
.1238	60		rts				rts
.1239					EVUType:
.1239	4c 1a 11	jmp $111a		jmp	ErrorV_type
.123c					EXPEvalInteger:
.123c	20 31 12	jsr $1231			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.123f	20 55 19	jsr $1955			jsr 	IFloatIntegerR0
.1242	60		rts				rts
.1243					EXPEvalInteger16:
.1243	20 3c 12	jsr $123c			jsr 	EXPEvalInteger
.1246	a5 0e		lda $0e				lda 	IFR0+IM2
.1248	d0 25		bne $126f			bne 	EVURange
.124a	a6 0d		ldx $0d				ldx 	IFR0+IM1
.124c	a5 0c		lda $0c				lda 	IFR0+IM0
.124e	60		rts				rts
.124f					EXPEvalInteger8:
.124f	20 3c 12	jsr $123c			jsr 	EXPEvalInteger
.1252	a5 0e		lda $0e				lda 	IFR0+IM2
.1254	05 0d		ora $0d				ora 	IFR0+IM1
.1256	d0 17		bne $126f			bne 	EVURange
.1258	a5 0c		lda $0c				lda 	IFR0+IM0
.125a	60		rts				rts
.125b					EXPEvaluateExpression:
.125b	20 72 12	jsr $1272			jsr 	EXPTermValueR0
.125e	60		rts				rts
.125f					EXPEvalString:
.125f	20 5b 12	jsr $125b			jsr 	EXPEvaluateExpression
.1262	24 0f		bit $0f				bit 	IFR0+IExp
.1264	10 d3		bpl $1239			bpl 	EVUType
.1266	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1268	86 1f		stx $1f				stx 	zTemp0+1
.126a	a5 0c		lda $0c				lda 	IFR0+IM0
.126c	85 1e		sta $1e				sta 	zTemp0
.126e	60		rts				rts
.126f					EVURange:
.126f	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1272					EXPTermValueR0:
.1272	20 7b 12	jsr $127b			jsr 	EXPTermR0
.1275	90 03		bcc $127a			bcc 	_ETVNotReference
.1277	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.127a					_ETVNotReference:
.127a	60		rts				rts
.127b					EXPTermR0:
.127b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.127d	30 3f		bmi $12be			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.127f	c8		iny				iny 								; consume element
.1280	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1282	b0 37		bcs $12bb			bcs 	_ETMIdentifier
.1284	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1286	64 0f		stz $0f				stz 	IFR0+IExp
.1288	64 0d		stz $0d				stz 	IFR0+IM1
.128a	64 0e		stz $0e				stz 	IFR0+IM2
.128c					_ETMConstant:
.128c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.128e	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1290	b0 24		bcs $12b6			bcs 	_ETMCExit 					; no.
.1292	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1294	a5 0d		lda $0d				lda 	IFR0+IM1
.1296	85 0e		sta $0e				sta 	IFR0+IM2
.1298	a5 0c		lda $0c				lda 	IFR0+IM0
.129a	85 0d		sta $0d				sta 	IFR0+IM1
.129c	64 0c		stz $0c				stz 	IFR0+IM0
.129e	8a		txa				txa
.129f	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.12a0	66 0e		ror $0e				ror 	IFR0+IM2
.12a2	66 0d		ror $0d				ror 	IFR0+IM1
.12a4	66 0c		ror $0c				ror 	IFR0+IM0
.12a6	4a		lsr a				lsr 	a
.12a7	66 0e		ror $0e				ror 	IFR0+IM2
.12a9	66 0d		ror $0d				ror 	IFR0+IM1
.12ab	66 0c		ror $0c				ror 	IFR0+IM0
.12ad	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.12af	11 1c		ora ($1c),y			ora 	(codePtr),y
.12b1	85 0c		sta $0c				sta 	IFR0+IM0
.12b3	c8		iny				iny 								; consume, loop back
.12b4	80 d6		bra $128c			bra 	_ETMConstant
.12b6					_ETMCExit:
.12b6	20 e2 12	jsr $12e2			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.12b9	18		clc				clc 								; return value
.12ba	60		rts				rts
.12bb					_ETMIdentifier:
.12bb	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.12be					_ETMIsUnaryOrMinus:
.12be	c8		iny				iny 								; consume element
.12bf	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.12c1	d0 0a		bne $12cd			bne 	_ETMCheckUnary
.12c3	20 72 12	jsr $1272			jsr 	EXPTermValueR0 				; get a term to negate
.12c6	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.12c8	20 60 1c	jsr $1c60			jsr 	IFloatNegate
.12cb	18		clc				clc
.12cc	60		rts				rts
.12cd					_ETMCheckUnary:
.12cd	c9 d7		cmp #$d7			cmp 	#PR_UNARY_FIRST 			; check unary function.
.12cf	90 0e		bcc $12df			bcc 	_ETMUnarySyntax
.12d1	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.12d3	b0 0a		bcs $12df			bcs 	_ETMUnarySyntax
.12d5	0a		asl a				asl 	a
.12d6	aa		tax				tax
.12d7	20 dc 12	jsr $12dc			jsr 	_ETMCallUnaryFunction
.12da	18		clc				clc
.12db	60		rts				rts
.12dc					_ETMCallUnaryFunction:
.12dc	7c aa 14	jmp ($14aa,x)			jmp 	(VectorTable,x)
.12df					_ETMUnarySyntax:
.12df	4c ed 10	jmp $10ed		jmp	ErrorV_syntax
.12e2					EXPCheckDecimalFollows:
.12e2	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.12e4	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.12e6	d0 19		bne $1301			bne 	_ETMCDExit
.12e8	c8		iny				iny 								; consume token.
.12e9	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.12eb	5a		phy				phy									; save current position
.12ec	48		pha				pha 								; save count of chars.
.12ed	38		sec				sec 								; address into YX : y + codePtr+1
.12ee	98		tya				tya
.12ef	65 1c		adc $1c				adc 	codePtr
.12f1	aa		tax				tax
.12f2	a5 1d		lda $1d				lda 	codePtr+1
.12f4	69 00		adc #$00			adc 	#0
.12f6	a8		tay				tay
.12f7	68		pla				pla 								; get count.
.12f8	20 f9 1a	jsr $1af9			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.12fb	7a		ply				ply 								; go to next token.
.12fc	98		tya				tya
.12fd	38		sec				sec
.12fe	71 1c		adc ($1c),y			adc 	(codePtr),y
.1300	a8		tay				tay
.1301					_ETMCDExit:
.1301	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1302					EXPUnaryAbs:
.1302	20 31 12	jsr $1231			jsr 	EXPEvalNumber 					; number to R0
.1305	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1308	20 99 18	jsr $1899			jsr 	IFloatAbsoluteR0
.130b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.130c					EXPUnaryAsc:
.130c	20 5f 12	jsr $125f			jsr 	EXPEvalString 					; string to R0, zTemp0
.130f	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1312	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.1314	f0 06		beq $131c			beq 	_EXAZero 						; if so return 0
.1316	5a		phy				phy 									; otherwise get first character
.1317	a0 01		ldy #$01			ldy 	#1
.1319	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.131b	7a		ply				ply
.131c					_EXAZero:
.131c	a2 0c		ldx #$0c			ldx 	#IFR0
.131e	20 57 1c	jsr $1c57			jsr 	IFloatSetByte
.1321	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1322					EXPUnaryChr:
.1322	20 4f 12	jsr $124f			jsr 	EXPEvalInteger8 				; expr
.1325	48		pha				pha 									; push on stack
.1326	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1329	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.132b	20 d2 15	jsr $15d2			jsr 	StringTempAllocate
.132e	68		pla				pla
.132f	20 07 16	jsr $1607			jsr 	StringTempWrite
.1332	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1333					EXPUnaryDec:
.1333	20 5f 12	jsr $125f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1336	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1339	5a		phy				phy
.133a	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.133c	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.133f	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.1341	f0 3b		beq $137e			beq 	_EUDError 						; empty string
.1343	aa		tax				tax
.1344	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1346					_EUDLoop:
.1346	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1348	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.134a	90 02		bcc $134e			bcc 	_EUDNoCase
.134c	e9 20		sbc #$20			sbc 	#$20
.134e					_EUDNoCase:
.134e	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1350	90 2c		bcc $137e			bcc 	_EUDError
.1352	c9 3a		cmp #$3a			cmp 	#'9'+1
.1354	90 0a		bcc $1360			bcc 	_EUDOkay
.1356	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1358	90 24		bcc $137e			bcc 	_EUDError
.135a	c9 47		cmp #$47			cmp 	#'F'+1
.135c	b0 20		bcs $137e			bcs 	_EUDError
.135e	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1360					_EUDOkay:
.1360	29 0f		and #$0f			and 	#15 							; make constant
.1362	da		phx				phx
.1363	48		pha				pha
.1364	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1366	20 7c 1c	jsr $1c7c			jsr 	IFloatShiftLeft
.1369	20 7c 1c	jsr $1c7c			jsr 	IFloatShiftLeft
.136c	20 7c 1c	jsr $1c7c			jsr 	IFloatShiftLeft
.136f	20 7c 1c	jsr $1c7c			jsr 	IFloatShiftLeft
.1372	68		pla				pla 									; pop constant and OR in
.1373	fa		plx				plx
.1374	05 0c		ora $0c				ora 	IFR0+IM0
.1376	85 0c		sta $0c				sta 	IFR0+IM0
.1378	c8		iny				iny 									; next
.1379	ca		dex				dex
.137a	d0 ca		bne $1346			bne 	_EUDLoop
.137c	7a		ply				ply
.137d	60		rts				rts
.137e					_EUDError:
.137e	4c 0d 11	jmp $110d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1381					EXPUnaryInlineDec:
.1381	4c ed 10	jmp $10ed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1384					EXPUnaryNull:
.1384	20 72 12	jsr $1272			jsr 	EXPTermValueR0
.1387	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1388					EXPUnaryFrac:
.1388	20 31 12	jsr $1231			jsr 	EXPEvalNumber 					; number to R0
.138b	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.138e	20 ff 18	jsr $18ff			jsr 	IFloatFractionalR0
.1391	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1392					EXPUnaryInt:
.1392	20 31 12	jsr $1231			jsr 	EXPEvalNumber 					; number to R0
.1395	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1398	20 55 19	jsr $1955			jsr 	IFloatIntegerR0
.139b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.139c					EXPUnaryLen:
.139c	20 5f 12	jsr $125f			jsr 	EXPEvalString 					; string to R0, zTemp0
.139f	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.13a2	b2 1e		lda ($1e)			lda 	(zTemp0)
.13a4	a2 0c		ldx #$0c			ldx 	#IFR0
.13a6	20 57 1c	jsr $1c57			jsr 	IFloatSetByte
.13a9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.13aa					EXPUnaryParenthesis:
.13aa	20 31 12	jsr $1231			jsr 	EXPEvalNumber 					; number to R0
.13ad	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.13b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.13b1					EXPUnaryRnd:
.13b1	20 31 12	jsr $1231			jsr 	EXPEvalNumber 				; number to R0
.13b4	20 18 12	jsr $1218			jsr 	ERRCheckRParen 				; )
.13b7	a2 0c		ldx #$0c			ldx 	#IFR0
.13b9	20 d0 13	jsr $13d0			jsr 	EXPLoadInRandom
.13bc	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.13be	85 0f		sta $0f				sta 	IFR0+IExp
.13c0	60		rts				rts
.13c1					ExpUnaryRand:
.13c1	20 3c 12	jsr $123c			jsr 	EXPEvalInteger 				; integer to R0
.13c4	20 18 12	jsr $1218			jsr 	ERRCheckRParen 				; )
.13c7	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.13c9	20 d0 13	jsr $13d0			jsr 	EXPLoadInRandom
.13cc	20 c6 17	jsr $17c6			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.13cf	60		rts				rts
.13d0					EXPLoadInRandom:
.13d0	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.13d3	20 e5 13	jsr $13e5			jsr 	EXPRandom32
.13d6	95 00		sta $00,x			sta 	IM0,x
.13d8	20 e5 13	jsr $13e5			jsr 	EXPRandom32
.13db	95 01		sta $01,x			sta 	IM1,x
.13dd	20 e5 13	jsr $13e5			jsr 	EXPRandom32
.13e0	29 7f		and #$7f			and 	#$7F
.13e2	95 02		sta $02,x			sta 	IM2,x
.13e4	60		rts				rts
.13e5					EXPRandom32:
.13e5	5a		phy				phy
.13e6	a0 08		ldy #$08			ldy 	#8
.13e8	ad 37 02	lda $0237			lda 	EXPSeed+0
.13eb	0d 38 02	ora $0238			ora 	EXPSeed+1
.13ee	0d 39 02	ora $0239			ora 	EXPSeed+2
.13f1	0d 3a 02	ora $023a			ora 	EXPSeed+3
.13f4	d0 08		bne $13fe			bne 	_EXPRNoReset
.13f6	ee 37 02	inc $0237			inc 	EXPSeed+0
.13f9	a0 10		ldy #$10			ldy 	#16
.13fb	8c 3a 02	sty $023a			sty 	EXPSeed+3
.13fe					_EXPRNoReset:
.13fe	ad 37 02	lda $0237			lda 	EXPSeed+0
.1401					_EXPRLoop:
.1401	0a		asl a				asl		a
.1402	2e 38 02	rol $0238			rol 	EXPSeed+1
.1405	2e 39 02	rol $0239			rol 	EXPSeed+2
.1408	2e 3a 02	rol $023a			rol 	EXPSeed+3
.140b	90 02		bcc $140f			bcc 	_EXPRNoEOR
.140d	49 c5		eor #$c5			eor 	#$C5
.140f					_EXPRNoEOR:
.140f	88		dey				dey
.1410	d0 ef		bne $1401			bne 	_EXPRLoop
.1412	8d 37 02	sta $0237			sta 	EXPSeed+0
.1415	7a		ply				ply
.1416	60		rts				rts
.0237					EXPSeed:
>0237							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1417					EXPUnarySgn:
.1417	20 31 12	jsr $1231			jsr 	EXPEvalNumber 					; number to R0
.141a	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.141d	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.141f	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister
.1422	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1424	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1427	a2 10		ldx #$10			ldx 	#IFR1
.1429	20 23 19	jsr $1923			jsr 	IFloatCompare 					; compare R1 vs 0.
.142c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.142d					EXPUnarySqr:
.142d	20 31 12	jsr $1231			jsr 	EXPEvalNumber 					; number to R0
.1430	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1433	20 a1 18	jsr $18a1			jsr 	IFloatSquareRootR0 				; square root.
.1436	b0 01		bcs $1439			bcs 	_EUSValue
.1438	60		rts				rts
.1439					_EUSValue:
.1439	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.143c					EXPUnaryHex:
.143c	20 3c 12	jsr $123c			jsr 	EXPEvalInteger 					; expr
.143f	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1442	5a		phy				phy
.1443	a9 10		lda #$10			lda 	#16
.1445	20 f6 19	jsr $19f6			jsr 	IFloatIntegerToStringR0
.1448	80 0a		bra $1454			bra 	EUSMain
.144a					EXPUnaryStr:
.144a	20 31 12	jsr $1231			jsr 	EXPEvalNumber 					; expr
.144d	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1450	5a		phy				phy
.1451	20 52 1a	jsr $1a52			jsr 	IFloatFloatToStringR0 			; convert to string
.1454					EUSMain:
.1454	b0 18		bcs $146e			bcs 	_EUSError
.1456	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1458	84 1f		sty $1f				sty 	zTemp0+1
.145a	48		pha				pha 									; save count
.145b	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.145d	20 d2 15	jsr $15d2			jsr 	StringTempAllocate
.1460	fa		plx				plx 									; count in X
.1461	a0 00		ldy #$00			ldy 	#0
.1463					_EUSCopy:
.1463	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1465	c8		iny				iny
.1466	20 07 16	jsr $1607			jsr 	StringTempWrite
.1469	ca		dex				dex
.146a	d0 f7		bne $1463			bne	 	_EUSCopy
.146c	7a		ply				ply
.146d	60		rts				rts
.146e					_EUSError:
.146e	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1471					EXPUnaryInlineString:
.1471	18		clc				clc 								; physical address -> IM0,1
.1472	98		tya				tya
.1473	65 1c		adc $1c				adc 	codePtr
.1475	85 0c		sta $0c				sta 	IFR0+IM0
.1477	a5 1d		lda $1d				lda 	codePtr+1
.1479	69 00		adc #$00			adc 	#0
.147b	85 0d		sta $0d				sta 	IFR0+IM1
.147d	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.147f	a9 80		lda #$80			lda 	#$80
.1481	85 0f		sta $0f				sta 	IFR0+IExp
.1483	98		tya				tya	 								; skip over it.
.1484	38		sec				sec
.1485	71 1c		adc ($1c),y			adc 	(codePtr),y
.1487	a8		tay				tay
.1488	60		rts				rts
.1489					_EXPUISRange:
.1489	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.148c					EXPUnaryVal:
.148c	20 5f 12	jsr $125f			jsr 	EXPEvalString 					; string to R0, zTemp0
.148f	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1492	5a		phy				phy
.1493	18		clc				clc
.1494	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1496	69 01		adc #$01			adc 	#1
.1498	aa		tax				tax
.1499	a5 1f		lda $1f				lda 	zTemp0+1
.149b	69 00		adc #$00			adc 	#0
.149d	a8		tay				tay
.149e	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.14a0	20 b9 1a	jsr $1ab9			jsr 	IFloatStringToFloatR0 			; do conversion
.14a3	b0 02		bcs $14a7			bcs 	_EUVError
.14a5	7a		ply				ply
.14a6	60		rts				rts
.14a7					_EUVError:
.14a7	4c 0d 11	jmp $110d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.14aa					VectorTable:
>14aa	33 1d					.word	NotImplemented           ; $80 REPEAT
>14ac	33 1d					.word	NotImplemented           ; $81 UNTIL
>14ae	33 1d					.word	NotImplemented           ; $82 WHILE
>14b0	33 1d					.word	NotImplemented           ; $83 WEND
>14b2	33 1d					.word	NotImplemented           ; $84 IF
>14b4	33 1d					.word	NotImplemented           ; $85 ENDIF
>14b6	33 1d					.word	NotImplemented           ; $86 DO
>14b8	33 1d					.word	NotImplemented           ; $87 LOOP
>14ba	33 1d					.word	NotImplemented           ; $88
>14bc	33 1d					.word	NotImplemented           ; $89 PROC
>14be	33 1d					.word	NotImplemented           ; $8a ENDPROC
>14c0	33 1d					.word	NotImplemented           ; $8b FOR
>14c2	33 1d					.word	NotImplemented           ; $8c NEXT
>14c4	a9 10					.word	RUNEndOfLine             ; $8d [[END]]
>14c6	e1 10					.word	Command_Shift_Handler    ; $8e [[SHIFT]]
>14c8	33 1d					.word	NotImplemented           ; $8f ELSE
>14ca	1f 10					.word	NoExec01                 ; $90 THEN
>14cc	1f 10					.word	NoExec02                 ; $91 TO
>14ce	1f 10					.word	NoExec03                 ; $92 STEP
>14d0	33 1d					.word	NotImplemented           ; $93 LET
>14d2	22 10					.word	Command_Print            ; $94 PRINT
>14d4	33 1d					.word	NotImplemented           ; $95 INPUT
>14d6	33 1d					.word	NotImplemented           ; $96 CALL
>14d8	33 1d					.word	NotImplemented           ; $97 SYS
>14da	90 10					.word	Command_REM              ; $98 REM
>14dc	33 1d					.word	NotImplemented           ; $99 EXIT
>14de	1f 10					.word	NoExec04                 ; $9a ,
>14e0	1f 10					.word	NoExec05                 ; $9b ;
>14e2	1f 10					.word	NoExec06                 ; $9c :
>14e4	90 10					.word	Command_REM2             ; $9d '
>14e6	1f 10					.word	NoExec07                 ; $9e )
>14e8	33 1d					.word	NotImplemented           ; $9f DIM
>14ea	1b 10					.word	Command_CLEAR            ; $a0 CLEAR
>14ec	87 10					.word	Command_NEW              ; $a1 NEW
>14ee	9d 10					.word	Command_RUN              ; $a2 RUN
>14f0	ea 10					.word	Command_STOP             ; $a3 STOP
>14f2	e4 10					.word	Command_END              ; $a4 END
>14f4	0d 10					.word	Command_ASSERT           ; $a5 ASSERT
>14f6	33 1d					.word	NotImplemented           ; $a6 LIST
>14f8	33 1d					.word	NotImplemented           ; $a7 SAVE
>14fa	33 1d					.word	NotImplemented           ; $a8 LOAD
>14fc	33 1d					.word	NotImplemented           ; $a9
>14fe	33 1d					.word	NotImplemented           ; $aa
>1500	33 1d					.word	NotImplemented           ; $ab
>1502	33 1d					.word	NotImplemented           ; $ac
>1504	33 1d					.word	NotImplemented           ; $ad
>1506	33 1d					.word	NotImplemented           ; $ae
>1508	33 1d					.word	NotImplemented           ; $af
>150a	33 1d					.word	NotImplemented           ; $b0
>150c	33 1d					.word	NotImplemented           ; $b1
>150e	33 1d					.word	NotImplemented           ; $b2
>1510	33 1d					.word	NotImplemented           ; $b3
>1512	33 1d					.word	NotImplemented           ; $b4
>1514	33 1d					.word	NotImplemented           ; $b5
>1516	33 1d					.word	NotImplemented           ; $b6
>1518	33 1d					.word	NotImplemented           ; $b7
>151a	33 1d					.word	NotImplemented           ; $b8
>151c	33 1d					.word	NotImplemented           ; $b9
>151e	33 1d					.word	NotImplemented           ; $ba
>1520	33 1d					.word	NotImplemented           ; $bb
>1522	33 1d					.word	NotImplemented           ; $bc
>1524	33 1d					.word	NotImplemented           ; $bd
>1526	33 1d					.word	NotImplemented           ; $be
>1528	33 1d					.word	NotImplemented           ; $bf
>152a	33 1d					.word	NotImplemented           ; $c0
>152c	33 1d					.word	NotImplemented           ; $c1
>152e	33 1d					.word	NotImplemented           ; $c2
>1530	33 1d					.word	NotImplemented           ; $c3
>1532	33 1d					.word	NotImplemented           ; $c4
>1534	33 1d					.word	NotImplemented           ; $c5
>1536	33 1d					.word	NotImplemented           ; $c6
>1538	33 1d					.word	NotImplemented           ; $c7
>153a	33 1d					.word	NotImplemented           ; $c8
>153c	33 1d					.word	NotImplemented           ; $c9
>153e	33 1d					.word	NotImplemented           ; $ca
>1540	33 1d					.word	NotImplemented           ; $cb
>1542	33 1d					.word	NotImplemented           ; $cc
>1544	33 1d					.word	NotImplemented           ; $cd
>1546	33 1d					.word	NotImplemented           ; $ce
>1548	33 1d					.word	NotImplemented           ; $cf
>154a	33 1d					.word	NotImplemented           ; $d0
>154c	33 1d					.word	NotImplemented           ; $d1
>154e	33 1d					.word	NotImplemented           ; $d2
>1550	33 1d					.word	NotImplemented           ; $d3
>1552	33 1d					.word	NotImplemented           ; $d4
>1554	33 1d					.word	NotImplemented           ; $d5
>1556	33 1d					.word	NotImplemented           ; $d6
>1558	33 1d					.word	NotImplemented           ; $d7 RIGHT$(
>155a	33 1d					.word	NotImplemented           ; $d8 LEFT$(
>155c	33 1d					.word	NotImplemented           ; $d9 MID$(
>155e	4a 14					.word	EXPUnaryStr              ; $da STR$(
>1560	8c 14					.word	EXPUnaryVal              ; $db VAL(
>1562	17 14					.word	EXPUnarySgn              ; $dc SGN(
>1564	02 13					.word	EXPUnaryAbs              ; $dd ABS(
>1566	9c 13					.word	EXPUnaryLen              ; $de LEN(
>1568	2d 14					.word	EXPUnarySqr              ; $df SQR(
>156a	22 13					.word	EXPUnaryChr              ; $e0 CHR$(
>156c	0c 13					.word	EXPUnaryAsc              ; $e1 ASC(
>156e	33 1d					.word	NotImplemented           ; $e2 INKEY$(
>1570	33 1d					.word	NotImplemented           ; $e3 EVENT(
>1572	33 1d					.word	NotImplemented           ; $e4 TIME
>1574	92 13					.word	EXPUnaryInt              ; $e5 INT(
>1576	88 13					.word	EXPUnaryFrac             ; $e6 FRAC(
>1578	33 13					.word	EXPUnaryDec              ; $e7 DEC(
>157a	3c 14					.word	EXPUnaryHex              ; $e8 HEX$(
>157c	b1 13					.word	EXPUnaryRnd              ; $e9 RND(
>157e	c1 13					.word	ExpUnaryRand             ; $ea RAND(
>1580	aa 13					.word	EXPUnaryParenthesis      ; $eb (
>1582	84 13					.word	EXPUnaryNull             ; $ec $
>1584	81 13					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1586	71 14					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1588	33 1d					.word	NotImplemented           ; $ef =
>158a	33 1d					.word	NotImplemented           ; $f0 <>
>158c	33 1d					.word	NotImplemented           ; $f1 <=
>158e	33 1d					.word	NotImplemented           ; $f2 <
>1590	33 1d					.word	NotImplemented           ; $f3 >=
>1592	33 1d					.word	NotImplemented           ; $f4 >
>1594	33 1d					.word	NotImplemented           ; $f5 XOR
>1596	33 1d					.word	NotImplemented           ; $f6 OR
>1598	33 1d					.word	NotImplemented           ; $f7 AND
>159a	33 1d					.word	NotImplemented           ; $f8 DIV
>159c	33 1d					.word	NotImplemented           ; $f9 MOD
>159e	33 1d					.word	NotImplemented           ; $fa <<
>15a0	33 1d					.word	NotImplemented           ; $fb >>
>15a2	33 1d					.word	NotImplemented           ; $fc /
>15a4	33 1d					.word	NotImplemented           ; $fd *
>15a6	33 1d					.word	NotImplemented           ; $fe -
>15a8	33 1d					.word	NotImplemented           ; $ff +

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.15aa					StringSystemInitialise:
.15aa	ad 41 02	lda $0241			lda 	PGMEndMemoryHigh 			; last byte of memory
.15ad	3a		dec a				dec 	a
.15ae	8d 3d 02	sta $023d			sta 	stringMemory+1
.15b1	85 1f		sta $1f				sta 	zTemp0+1
.15b3	a9 ff		lda #$ff			lda 	#$FF
.15b5	8d 3c 02	sta $023c			sta 	stringMemory
.15b8	85 1e		sta $1e				sta 	zTemp0
.15ba	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.15bc	92 1e		sta ($1e)			sta 	(zTemp0)
.15be	60		rts				rts
.15bf					StringSpaceInitialise:
.15bf	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.15c1	8d 3b 02	sta $023b			sta 	stringInitialised
.15c4	ad 3c 02	lda $023c			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.15c7	8d 3e 02	sta $023e			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.15ca	ad 3d 02	lda $023d			lda 	stringMemory+1
.15cd	3a		dec a				dec 	a
.15ce	8d 3f 02	sta $023f			sta 	stringTempPointer+1
.15d1	60		rts				rts
.15d2					StringTempAllocate:
.15d2	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.15d4	b0 2e		bcs $1604			bcs 	_STALength
.15d6	2c 3b 02	bit $023b			bit 	stringInitialised 			; already initialised
.15d9	30 05		bmi $15e0			bmi 	_STAAllocate
.15db	48		pha				pha 								; save value to subtract.
.15dc	20 bf 15	jsr $15bf			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.15df	68		pla				pla 								; restore it
.15e0					_STAAllocate:
.15e0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.15e2	18		clc				clc  								; deliberate allows one more
.15e3	6d 3e 02	adc $023e			adc 	stringTempPointer 			; subtract from temp pointer
.15e6	8d 3e 02	sta $023e			sta 	stringTempPointer
.15e9	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.15eb	85 20		sta $20				sta 	zsTemp 						; and zsTemp
.15ed	ad 3f 02	lda $023f			lda 	stringTempPointer+1
.15f0	69 ff		adc #$ff			adc 	#$FF
.15f2	8d 3f 02	sta $023f			sta 	stringTempPointer+1
.15f5	85 21		sta $21				sta 	zsTemp+1
.15f7	85 0d		sta $0d				sta 	IFR0+IM1
.15f9	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.15fb	a9 80		lda #$80			lda 	#$80
.15fd	85 0f		sta $0f				sta 	IFR0+IExp
.15ff	a9 00		lda #$00			lda 	#0 							; clear the target string
.1601	92 20		sta ($20)			sta 	(zsTemp)
.1603	60		rts				rts
.1604					_STALength:
.1604	4c fb 11	jmp $11fb		jmp	ErrorV_string
.1607					StringTempWrite:
.1607	48		pha				pha
.1608	92 20		sta ($20)			sta 	(zsTemp) 					; write byte
.160a	e6 20		inc $20				inc 	zsTemp 						; bump pointer
.160c	d0 02		bne $1610			bne 	_STWNoCarry
.160e	e6 21		inc $21				inc 	zsTemp+1
.1610					_STWNoCarry:
.1610	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1612	92 20		sta ($20)			sta 	(zsTemp)
.1614	68		pla				pla
.1615	60		rts				rts
.0020					zsTemp:
>0020							.fill 	2
.023b					stringInitialised:
>023b							.fill 	1
.023c					stringMemory:
>023c							.fill 	2
.023e					stringTempPointer:
>023e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/support/utilities/setup.asm

.1616					PGMSetBaseAddress:
.1616	8e 40 02	stx $0240			stx 	PGMBaseHigh
.1619	8c 41 02	sty $0241			sty 	PGMEndMemoryHigh
.161c	60		rts				rts
.161d					PGMNewProgram:
.161d	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.161f	ad 40 02	lda $0240			lda 	PGMBaseHigh
.1622	85 1f		sta $1f				sta 	zTemp0+1
.1624	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1626	92 1e		sta ($1e)			sta 	(zTemp0)
.1628	60		rts				rts
.1629					PGMEndProgram:
.1629	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.162b	ad 40 02	lda $0240			lda 	PGMBaseHigh
.162e	85 1f		sta $1f				sta 	zTemp0+1
.1630					_PGMEPLoop:
.1630	b2 1e		lda ($1e)			lda 	(zTemp0)
.1632	f0 0b		beq $163f			beq 	_PGMEPExit
.1634	18		clc				clc
.1635	65 1e		adc $1e				adc 	zTemp0
.1637	85 1e		sta $1e				sta 	zTemp0
.1639	90 f5		bcc $1630			bcc 	_PGMEPLoop
.163b	e6 1f		inc $1f				inc 	zTemp0+1
.163d	80 f1		bra $1630			bra 	_PGMEPLoop
.163f					_PGMEPExit:
.163f	60		rts				rts
.0240					PGMBaseHigh:
>0240							.fill 	1
.0241					PGMEndMemoryHigh:
>0241							.fill 	1

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.1640					IFInitialise:
.1640	9c 4a 02	stz $024a			stz 	IFStackIndex
.1643	60		rts				rts
.1644					IFloatSubtract:
.1644	da		phx				phx
.1645	a2 0c		ldx #$0c			ldx 	#IFR0
.1647	20 60 1c	jsr $1c60			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.164a	fa		plx				plx
.164b					IFloatAdd:
.164b	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.164d	05 0f		ora $0f				ora 	IFR0+IExp
.164f	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.1651	d0 4e		bne $16a1			bne 	_IFloatAddDecimals 			; decimal version.
.1653					_IFAddSubMantissa:
.1653	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.1655	45 0f		eor $0f				eor 	IFR0+IExp
.1657	29 40		and #$40			and 	#IFSign
.1659	d0 21		bne $167c			bne 	_IFloatSubMantissa
.165b	18		clc				clc 								; do the actual addition
.165c	a5 0c		lda $0c			lda 	IFR0+IM0
.165e	75 00		adc $00,x		adc 		IM0,x
.1660	85 0c		sta $0c			sta 	IFR0+IM0
.1662	a5 0d		lda $0d			lda 	IFR0+IM1
.1664	75 01		adc $01,x		adc 		IM1,x
.1666	85 0d		sta $0d			sta 	IFR0+IM1
.1668	a5 0e		lda $0e			lda 	IFR0+IM2
.166a	75 02		adc $02,x		adc 		IM2,x
.166c	85 0e		sta $0e			sta 	IFR0+IM2
.166e	10 29		bpl $1699			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.1670	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.1672	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.1675	20 ae 1c	jsr $1cae			jsr 	IFloatIncExponent
.1678	d0 1f		bne $1699			bne 	_IFloatAddExit
.167a	38		sec				sec 								; overflowed numerically.
.167b	60		rts				rts
.167c					_IFloatSubMantissa:
.167c	38		sec				sec 								; do the subtraction R0-Rx
.167d	a5 0c		lda $0c			lda 	IFR0+IM0
.167f	f5 00		sbc $00,x		sbc 		IM0,x
.1681	85 0c		sta $0c			sta 	IFR0+IM0
.1683	a5 0d		lda $0d			lda 	IFR0+IM1
.1685	f5 01		sbc $01,x		sbc 		IM1,x
.1687	85 0d		sta $0d			sta 	IFR0+IM1
.1689	a5 0e		lda $0e			lda 	IFR0+IM2
.168b	f5 02		sbc $02,x		sbc 		IM2,x
.168d	85 0e		sta $0e			sta 	IFR0+IM2
.168f	b0 08		bcs $1699			bcs 	_IFloatAddExit 				; no borrow so we are done.
.1691	a2 0c		ldx #$0c			ldx 	#IFR0
.1693	20 68 1c	jsr $1c68			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.1696	20 60 1c	jsr $1c60			jsr 	IFloatNegate 				; negate
.1699					_IFloatAddExit:
.1699	18		clc				clc
.169a	60		rts				rts
.169b					_IFloatZeroAdd:
.169b	fa		plx				plx 								; return this value in R0
.169c	20 e6 1b	jsr $1be6			jsr 	IFloatCopyFromRegister
.169f	18		clc				clc
.16a0	60		rts				rts
.16a1					_IFloatAddDecimals:
.16a1	20 4e 1c	jsr $1c4e			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.16a4	f0 f3		beq $1699			beq 	_IFloatAddExit
.16a6	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise 			; normalise RX
.16a9	da		phx				phx 								; normalise R0
.16aa	a2 0c		ldx #$0c			ldx 	#IFR0
.16ac	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.16af	f0 ea		beq $169b			beq 	_IFloatZeroAdd
.16b1	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise
.16b4	fa		plx				plx
.16b5	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.16b7	29 3f		and #$3f			and 	#IFXMask
.16b9	38		sec				sec
.16ba	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.16bc	85 0a		sta $0a				sta 	iTemp0
.16be	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.16c0	29 3f		and #$3f			and 	#IFXMask
.16c2	38		sec				sec
.16c3	e9 20		sbc #$20			sbc 	#$20
.16c5	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.16c7	b0 02		bcs $16cb			bcs 	_IFloatHaveLarger
.16c9	a5 0a		lda $0a				lda 	iTemp0
.16cb					_IFloatHaveLarger:
.16cb	18		clc				clc 								; get the actual one back.
.16cc	69 20		adc #$20			adc 	#$20 						; shift both to that.
.16ce	20 db 16	jsr $16db			jsr 	_IFShiftXToA
.16d1	da		phx				phx
.16d2	a2 0c		ldx #$0c			ldx 	#IFR0
.16d4	20 db 16	jsr $16db			jsr 	_IFShiftXToA
.16d7	fa		plx				plx
.16d8	4c 53 16	jmp $1653			jmp 	_IFAddSubMantissa 			; do the adding bit.
.16db					_IFShiftXToA:
.16db	8d 42 02	sta $0242			sta 	IFTarget
.16de	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero 			; check adding zero ?
.16e1	f0 11		beq $16f4			beq 	_IFSXExit
.16e3					_IFSXLoop:
.16e3	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.16e5	29 3f		and #$3f			and 	#IFXMask
.16e7	cd 42 02	cmp $0242			cmp 	IFTarget
.16ea	f0 08		beq $16f4			beq 	_IFSXExit
.16ec	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.16ef	20 ae 1c	jsr $1cae			jsr 	IFloatIncExponent
.16f2	80 ef		bra $16e3			bra 	_IFSXLoop
.16f4					_IFSXExit:
.16f4	60		rts				rts
.0242					IFTarget:
>0242							.fill 	1
.16f5					IFloatMultiply:
.16f5	8e 42 02	stx $0242			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.16f8	20 b0 17	jsr $17b0			jsr 	IFCalculateNewSign
.16fb	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.16fd	05 0f		ora $0f				ora 	IFR0+IExp
.16ff	29 3f		and #$3f			and 	#IFXMask
.1701	15 01		ora $01,x			ora 	IM1,x
.1703	05 0d		ora $0d				ora 	IFR0+IM1
.1705	15 02		ora $02,x			ora 	IM2,x
.1707	05 0e		ora $0e				ora 	IFR0+IM2
.1709	d0 0a		bne $1715			bne 	_IFMStandard
.170b	20 31 1c	jsr $1c31			jsr 	IFloatMultiply8BitRx
.170e	ad 44 02	lda $0244			lda 	IFNewSign
.1711	85 0f		sta $0f				sta 	IFR0+IExp
.1713	18		clc				clc
.1714	60		rts				rts
.1715					_IFMStandard:
.1715	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.1717	20 a7 17	jsr $17a7			jsr 	IFMSignExtend
.171a	8d 43 02	sta $0243			sta 	IFNewExponent
.171d	a5 0f		lda $0f				lda 	IFR0+IExp
.171f	20 a7 17	jsr $17a7			jsr 	IFMSignExtend
.1722	18		clc				clc
.1723	6d 43 02	adc $0243			adc 	IFNewExponent
.1726	8d 43 02	sta $0243			sta 	IFNewExponent
.1729	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.172b	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister
.172e	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.1730	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1733					_IFMLoop:
.1733	a2 18		ldx #$18			ldx 	#IFRTemp
.1735	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.1738	f0 3a		beq $1774			beq 	_IFMExit
.173a	ae 42 02	ldx $0242			ldx 	IFTarget 					; look at adder MSB
.173d	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.173f	10 03		bpl $1744			bpl	 	_IFMTargetOkay
.1741	20 98 17	jsr $1798			jsr 	_IFMShiftAll
.1744					_IFMTargetOkay:
.1744	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.1746	29 01		and #$01			and 	#1
.1748	f0 16		beq $1760			beq 	_IFMNoAdd
.174a	ae 42 02	ldx $0242			ldx 	IFTarget 					; add adder
.174d	18		clc				clc
.174e	a5 0c		lda $0c			lda 	IFR0+IM0
.1750	75 00		adc $00,x		adc 		IM0,x
.1752	85 0c		sta $0c			sta 	IFR0+IM0
.1754	a5 0d		lda $0d			lda 	IFR0+IM1
.1756	75 01		adc $01,x		adc 		IM1,x
.1758	85 0d		sta $0d			sta 	IFR0+IM1
.175a	a5 0e		lda $0e			lda 	IFR0+IM2
.175c	75 02		adc $02,x		adc 		IM2,x
.175e	85 0e		sta $0e			sta 	IFR0+IM2
.1760					_IFMNoAdd:
.1760	a5 0e		lda $0e				lda 	IFR0+IM2
.1762	10 03		bpl $1767			bpl 	_IFMResultOkay
.1764	20 98 17	jsr $1798			jsr 	_IFMShiftAll
.1767					_IFMResultOkay:
.1767	a2 18		ldx #$18			ldx 	#IFRTemp
.1769	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.176c	ae 42 02	ldx $0242			ldx 	IFTarget
.176f	20 7c 1c	jsr $1c7c			jsr 	IFloatShiftLeft
.1772	80 bf		bra $1733			bra 	_IFMLoop
.1774					_IFMExit:
.1774	ad 43 02	lda $0243			lda 	IFNewExponent 				; validate new exponent.
.1777	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.1779	90 0f		bcc $178a			bcc 	_IFMOkay
.177b	c9 e0		cmp #$e0			cmp 	#$E0
.177d	b0 0b		bcs $178a			bcs 	_IFMOkay
.177f	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.1781	f0 13		beq $1796			beq 	_IFMError
.1783	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.1785	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1788	18		clc				clc
.1789	60		rts				rts
.178a					_IFMOkay:
.178a	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.178c	0d 44 02	ora $0244			ora 	IFNewSign
.178f	85 0f		sta $0f				sta 	IFR0+IExp
.1791	18		clc				clc
.1792	60		rts				rts
.1793	4c ff ff	jmp $ffff			jmp 	$FFFF
.1796					_IFMError:
.1796	38		sec				sec
.1797	60		rts				rts
.1798					_IFMShiftAll:
.1798	a2 0c		ldx #$0c			ldx 	#IFR0
.179a	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.179d	ae 42 02	ldx $0242			ldx 	IFTarget
.17a0	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.17a3	ee 43 02	inc $0243			inc 	IFNewExponent
.17a6	60		rts				rts
.17a7					IFMSignExtend:
.17a7	29 3f		and #$3f			and 	#IFXMask
.17a9	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.17ab	90 02		bcc $17af			bcc 	_IFMNoSXX
.17ad	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.17af					_IFMNoSXX:
.17af	60		rts				rts
.17b0					IFCalculateNewSign:
.17b0	b5 03		lda $03,x			lda 	IExp,x
.17b2	45 0f		eor $0f				eor 	IFR0+IExp
.17b4	29 40		and #$40			and 	#IFSign
.17b6	8d 44 02	sta $0244			sta 	IFNewSign
.17b9	60		rts				rts
.0243					IFNewExponent:
>0243							.fill 	1
.0244					IFNewSign:
>0244							.fill 	1
.17ba					IFloatDivideInteger:
.17ba	20 d3 17	jsr $17d3			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.17bd	b0 06		bcs $17c5			bcs 	_IFDIExit
.17bf	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.17c1	20 e6 1b	jsr $1be6			jsr 	IFloatCopyFromRegister
.17c4	18		clc				clc
.17c5					_IFDIExit:
.17c5	60		rts				rts
.17c6					IFloatModulusInteger:
.17c6	20 d3 17	jsr $17d3			jsr 	IFloatDivideIntegerCommon
.17c9	b0 07		bcs $17d2			bcs 	_IFMIExit
.17cb	ae 42 02	ldx $0242			ldx 	IFTarget
.17ce	20 e6 1b	jsr $1be6			jsr 	IFloatCopyFromRegister
.17d1	18		clc				clc
.17d2					_IFMIExit:
.17d2	60		rts				rts
.17d3					IFloatDivideIntegerCommon:
.17d3	8e 42 02	stx $0242			stx 	IFTarget  					; this is s1, s0 = R0
.17d6	20 b0 17	jsr $17b0			jsr 	IFCalculateNewSign 			; calculate sign of result
.17d9	20 01 18	jsr $1801			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.17dc	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.17de	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.17e1	f0 1c		beq $17ff			beq 	_IFDIDivZero
.17e3	ae 42 02	ldx $0242			ldx 	IFTarget 					; zero Rx (S1)
.17e6	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.17e9	5a		phy				phy
.17ea	a0 18		ldy #$18			ldy 	#24
.17ec					_IFDILoop:
.17ec	20 12 18	jsr $1812			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.17ef	20 1e 18	jsr $181e			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.17f2	88		dey				dey
.17f3	d0 f7		bne $17ec			bne 	_IFDILoop 					; do it 24 times
.17f5	7a		ply				ply
.17f6	ad 44 02	lda $0244			lda 	IFNewSign 					; set sign of result.
.17f9	29 40		and #$40			and 	#IFSign
.17fb	85 1b		sta $1b				sta 	IFRTemp+IExp
.17fd	18		clc				clc 								; is okay.
.17fe	60		rts				rts
.17ff					_IFDIDivZero:
.17ff	38		sec				sec
.1800	60		rts				rts
.1801					IFDCopyRXToRTemp:
.1801	b5 00		lda $00,x			lda 	IM0,x
.1803	85 18		sta $18				sta 	IFRTemp+IM0
.1805	b5 01		lda $01,x			lda 	IM1,x
.1807	85 19		sta $19				sta 	IFRTemp+IM1
.1809	b5 02		lda $02,x			lda 	IM2,x
.180b	85 1a		sta $1a				sta 	IFRTemp+IM2
.180d	b5 03		lda $03,x			lda 	IExp,x
.180f	85 1b		sta $1b				sta 	IFRTemp+IExp
.1811	60		rts				rts
.1812					IFDShiftSTempS1Left:
.1812	a2 18		ldx #$18			ldx 	#IFRTemp
.1814	20 7c 1c	jsr $1c7c			jsr 	IFloatShiftLeft
.1817	ae 42 02	ldx $0242			ldx 	IFTarget
.181a	20 7d 1c	jsr $1c7d			jsr 	IFloatRotateLeft
.181d	60		rts				rts
.181e					IFDTrySubtract:
.181e	ae 42 02	ldx $0242			ldx 	IFTarget 					; s1 = Rx
.1821	38		sec				sec 								; subtract, saving the results on the stack.
.1822	b5 00		lda $00,x			lda 	IM0,x
.1824	e5 0c		sbc $0c				sbc 	IFR0+IM0
.1826	48		pha				pha
.1827	b5 01		lda $01,x			lda 	IM1,x
.1829	e5 0d		sbc $0d				sbc 	IFR0+IM1
.182b	48		pha				pha
.182c	b5 02		lda $02,x			lda 	IM2,x
.182e	e5 0e		sbc $0e				sbc 	IFR0+IM2
.1830	b0 03		bcs $1835			bcs 	_IFDCanSubtract
.1832	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.1833	68		pla				pla
.1834	60		rts				rts
.1835					_IFDCanSubtract:
.1835	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.1837	68		pla				pla
.1838	95 01		sta $01,x			sta 	IM1,x
.183a	68		pla				pla
.183b	95 00		sta $00,x			sta 	IM0,x
.183d	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.183f	d0 06		bne $1847			bne 	_IFDCSExit
.1841	e6 19		inc $19				inc 	IFRTemp+IM1
.1843	d0 02		bne $1847			bne 	_IFDCSExit
.1845	e6 1a		inc $1a				inc 	IFRTemp+IM2
.1847					_IFDCSExit:
.1847	60		rts				rts
.1848					IFloatBitwiseAnd:
.1848	5a		phy				phy
.1849	20 8d 18	jsr $188d			jsr 	IFPreProcessBitwise 		; set up everything.
.184c	d0 0f		bne $185d			bne 	_IFBAExit
.184e					_IFBALoop:
.184e	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.1851	35 00		and $00,x			and 	IM0,x
.1853	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.1856	e8		inx				inx
.1857	c8		iny				iny
.1858	c0 03		cpy #$03			cpy 	#3
.185a	d0 f2		bne $184e			bne 	_IFBALoop
.185c	18		clc				clc
.185d					_IFBAExit:
.185d	7a		ply				ply
.185e	60		rts				rts
.185f					IFloatBitwiseOr:
.185f	5a		phy				phy
.1860	20 8d 18	jsr $188d			jsr 	IFPreProcessBitwise 		; set up everything.
.1863	d0 0f		bne $1874			bne 	_IFBAExit
.1865					_IFBALoop:
.1865	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.1868	15 00		ora $00,x			ora 	IM0,x
.186a	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.186d	e8		inx				inx
.186e	c8		iny				iny
.186f	c0 03		cpy #$03			cpy 	#3
.1871	d0 f2		bne $1865			bne 	_IFBALoop
.1873	18		clc				clc
.1874					_IFBAExit:
.1874	7a		ply				ply
.1875	60		rts				rts
.1876					IFloatBitwiseXor:
.1876	5a		phy				phy
.1877	20 8d 18	jsr $188d			jsr 	IFPreProcessBitwise 		; set up everything.
.187a	d0 0f		bne $188b			bne 	_IFBAExit
.187c					_IFBALoop:
.187c	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.187f	55 00		eor $00,x			eor 	IM0,x
.1881	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.1884	e8		inx				inx
.1885	c8		iny				iny
.1886	c0 03		cpy #$03			cpy 	#3
.1888	d0 f2		bne $187c			bne 	_IFBALoop
.188a	18		clc				clc
.188b					_IFBAExit:
.188b	7a		ply				ply
.188c	60		rts				rts
.188d					IFPreProcessBitwise:
.188d	a0 00		ldy #$00			ldy 	#0 							; set index.
.188f	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.1891	15 03		ora $03,x			ora 	IExp,x
.1893	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.1895	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.1897	38		sec				sec 								; carry set just in cases.
.1898	60		rts				rts
.1899					IFloatAbsoluteR0:
.1899	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.189b	29 bf		and #$bf			and 	#IFSign ^ 255
.189d	85 0f		sta $0f				sta 	IFR0+IExp
.189f	18		clc				clc
.18a0	60		rts				rts
.18a1					IFloatSquareRootR0:
.18a1	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.18a3	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.18a6	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.18a8	29 40		and #$40			and 	#IFSign
.18aa	d0 2f		bne $18db			bne 	_IFSRFail
.18ac	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise 			; it will work better !
.18af	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.18b1	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister
.18b4	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.18b6	20 a7 17	jsr $17a7			jsr 	IFMSignExtend 				; sign extended version of the exponent
.18b9	18		clc				clc
.18ba	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.18bc	85 0f		sta $0f				sta 	IFR0+IExp
.18be	4a		lsr a				lsr 	a 							; which we can halve.
.18bf	38		sec				sec 								; convert back
.18c0	e9 17		sbc #$17			sbc 	#23
.18c2	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.18c4	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.18c6	20 dd 18	jsr $18dd			jsr 	_IFSRNewton
.18c9	20 dd 18	jsr $18dd			jsr 	_IFSRNewton
.18cc	20 dd 18	jsr $18dd			jsr 	_IFSRNewton
.18cf	20 dd 18	jsr $18dd			jsr 	_IFSRNewton
.18d2	18		clc				clc
.18d3	60		rts				rts
.18d4					_IFSRZero:
.18d4	a2 0c		ldx #$0c			ldx 	#IFR0
.18d6	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.18d9	18		clc				clc
.18da	60		rts				rts
.18db					_IFSRFail:
.18db	38		sec				sec
.18dc	60		rts				rts
.18dd					_IFSRNewton:
.18dd	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.18df	20 a4 1b	jsr $1ba4			jsr 	IFloatPushRx
.18e2	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.18e4	20 a4 1b	jsr $1ba4			jsr 	IFloatPushRx
.18e7	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.18e9	20 78 19	jsr $1978			jsr 	IFloatDivideFloat
.18ec	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.18ee	20 c5 1b	jsr $1bc5			jsr 	IFloatPullRx
.18f1	20 4b 16	jsr $164b			jsr 	IFloatAdd 					; now guess + original/guess
.18f4	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.18f6	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.18f9	a2 10		ldx #$10			ldx 	#IFR1
.18fb	20 c5 1b	jsr $1bc5			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.18fe	60		rts				rts
.18ff					IFloatFractionalR0:
.18ff	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.1901	29 3f		and #$3f			and 	#IFXMask
.1903	f0 17		beq $191c			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.1905	20 99 18	jsr $1899			jsr 	IFloatAbsoluteR0 			; absolute value R9
.1908	a2 0c		ldx #$0c			ldx 	#IFR0
.190a	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise 			; normalise R0
.190d	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.190f	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister
.1912	20 55 19	jsr $1955			jsr 	IFloatIntegerR0 			; take integer part of R0
.1915	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.1917	20 44 16	jsr $1644			jsr 	IFloatSubtract
.191a	80 05		bra $1921			bra 	_FIPExit
.191c					_FIPZero:
.191c	a2 0c		ldx #$0c			ldx 	#IFR0
.191e	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1921					_FIPExit:
.1921	18		clc				clc
.1922	60		rts				rts
.1923					IFloatCompare:
.1923	20 44 16	jsr $1644			jsr 	IFloatSubtract 				; subtract R0 from RX.
.1926	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.1928	05 0f		ora $0f				ora 	IFR0+IExp
.192a	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.192c	29 3f		and #$3f			and 	#IFXMask
.192e	d0 19		bne $1949			bne 	_IFCNonInteger
.1930	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero 			; check if zero
.1933	f0 0f		beq $1944			beq 	_IFCZero
.1935					_IFCReturnSign:
.1935	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.1937	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.1939	48		pha				pha
.193a	a9 01		lda #$01			lda 	#1
.193c	20 57 1c	jsr $1c57			jsr 	IFloatSetByte 				; return to +1
.193f	68		pla				pla 								; sign bit back
.1940	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.1942	18		clc				clc
.1943	60		rts				rts
.1944					_IFCZero:
.1944	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1947	18		clc				clc
.1948	60		rts				rts
.1949					_IFCNonInteger:
.1949	a5 0c		lda $0c				lda 	IFR0+IM0
.194b	29 00		and #$00			and		#$00
.194d	05 0d		ora $0d				ora 	IFR0+IM1
.194f	05 0e		ora $0e				ora 	IFR0+IM2
.1951	f0 f1		beq $1944			beq 	_IFCZero 					; near enough !
.1953	80 e0		bra $1935			bra 	_IFCReturnSign 				; return the sign of the difference.
.1955					IFloatIntegerR0:
.1955	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.1957	29 3f		and #$3f			and 	#IFXMask
.1959	f0 1b		beq $1976			beq 	_FIPExit 					; if so do nothing
.195b	a2 0c		ldx #$0c			ldx 	#IFR0
.195d	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise 			; normalise
.1960	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero 			; is it zero ?
.1963	f0 0e		beq $1973			beq 	_FIPZero 					; if so return zero.
.1965					_FIPShift:
.1965	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.1967	29 20		and #$20			and 	#$20 						; still -ve
.1969	f0 0b		beq $1976			beq 	_FIPExit
.196b	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight 			; shift mantissa right
.196e	20 ae 1c	jsr $1cae			jsr 	IFloatIncExponent 			; bump exponent
.1971	80 f2		bra $1965			bra 	_FIPShift
.1973					_FIPZero:
.1973	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1976					_FIPExit:
.1976	18		clc				clc
.1977	60		rts				rts
.1978					IFloatDivideFloat:
.1978	8e 42 02	stx $0242			stx 	IFTarget  					; this is s1, s0 = R0
.197b	20 b0 17	jsr $17b0			jsr 	IFCalculateNewSign 			; calculate sign of result
.197e	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise 			; normalise RX
.1981	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.1983	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise
.1986	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.1989	f0 56		beq $19e1			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.198b	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.198d	20 a7 17	jsr $17a7			jsr 	IFMSignExtend
.1990	8d 43 02	sta $0243			sta 	IFNewExponent
.1993	ae 42 02	ldx $0242			ldx 	IFTarget 					; calculate s1.exponent
.1996	b5 03		lda $03,x			lda 	IExp,x
.1998	20 a7 17	jsr $17a7			jsr 	IFMSignExtend
.199b	38		sec				sec
.199c	ed 43 02	sbc $0243			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.199f	38		sec				sec
.19a0	e9 17		sbc #$17			sbc 	#23
.19a2	8d 43 02	sta $0243			sta 	IFNewExponent
.19a5	20 e3 19	jsr $19e3			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.19a8	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.19aa	10 08		bpl $19b4			bpl 	_IFDFNoShiftResult
.19ac	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.19ae	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.19b1	ee 43 02	inc $0243			inc 	IFNewExponent
.19b4					_IFDFNoShiftResult:
.19b4	ad 43 02	lda $0243			lda 	IFNewExponent 				; underflow/overflow check.
.19b7	30 06		bmi $19bf			bmi 	_IFDFCheckUnderflow
.19b9	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.19bb	b0 24		bcs $19e1			bcs 	_IFDFDivZero
.19bd	80 11		bra $19d0			bra		_IFDFExit
.19bf					_IFDFCheckUnderflow:
.19bf	ad 43 02	lda $0243			lda 	IFNewExponent 				; shift into a legal exponent.
.19c2	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.19c4	b0 0a		bcs $19d0			bcs 	_IFDFExit
.19c6	ee 43 02	inc $0243			inc 	IFNewExponent
.19c9	a2 18		ldx #$18			ldx 	#IFRTemp
.19cb	20 84 1c	jsr $1c84			jsr 	IFloatShiftRight
.19ce	80 ef		bra $19bf			bra 	_IFDFCheckUnderflow
.19d0					_IFDFExit:
.19d0	ad 43 02	lda $0243			lda 	IFNewExponent 				; combine exponent and sign.
.19d3	29 3f		and #$3f			and 	#IFXMask
.19d5	0d 44 02	ora $0244			ora 	IFNewSign
.19d8	85 1b		sta $1b				sta 	IFRTemp+IExp
.19da	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.19dc	20 e6 1b	jsr $1be6			jsr 	IFloatCopyFromRegister
.19df	18		clc				clc
.19e0	60		rts				rts
.19e1					_IFDFDivZero:
.19e1	38		sec				sec
.19e2	60		rts				rts
.19e3					IFloatDivideSupport:
.19e3	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.19e5	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.19e8	5a		phy				phy 								; main division loop x 23
.19e9	a0 17		ldy #$17			ldy 	#23
.19eb					_IFDSLoop:
.19eb	20 1e 18	jsr $181e			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.19ee	20 12 18	jsr $1812			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.19f1	88		dey				dey
.19f2	d0 f7		bne $19eb			bne 	_IFDSLoop 					; do it 24 times
.19f4	7a		ply				ply
.19f5	60		rts				rts
.19f6					IFloatIntegerToStringR0:
.19f6	8d 45 02	sta $0245			sta 	IFBase 						; save base to use.
.19f9	20 d6 1c	jsr $1cd6			jsr 	IFloatBufferReset			; empty buffer
.19fc	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.19fe	29 3f		and #$3f			and 	#IFXMask
.1a00	d0 1e		bne $1a20			bne 	_IFIFail
.1a02	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.1a04	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.1a07	f0 0e		beq $1a17			beq 	_IFINotNegative
.1a09	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.1a0b	29 40		and #$40			and 	#IFSign
.1a0d	f0 08		beq $1a17			beq 	_IFINotNegative
.1a0f	a9 2d		lda #$2d			lda 	#"-"						; output -
.1a11	20 e5 1c	jsr $1ce5			jsr 	IFloatBufferWrite
.1a14	20 60 1c	jsr $1c60			jsr 	IFloatNegate 				; tidy up !
.1a17					_IFINotNegative:
.1a17	20 22 1a	jsr $1a22			jsr 	_IFIRecursiveConvert 		; start converting
.1a1a	20 dd 1c	jsr $1cdd			jsr 	IFloatGetBufferAddress
.1a1d	18		clc				clc
.1a1e	80 01		bra $1a21			bra 	_IFIExit
.1a20					_IFIFail:
.1a20	38		sec				sec
.1a21					_IFIExit:
.1a21	60		rts				rts
.1a22					_IFIRecursiveConvert:
.1a22	a2 10		ldx #$10			ldx 	#IFR1
.1a24	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister 		; R0->R1
.1a27	a2 0c		ldx #$0c			ldx 	#IFR0
.1a29	ad 45 02	lda $0245			lda 	IFBase 						; Base -> R0
.1a2c	20 57 1c	jsr $1c57			jsr 	IFloatSetByte
.1a2f	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.1a31	20 ba 17	jsr $17ba			jsr 	IFloatDivideInteger
.1a34	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.1a36	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero
.1a39	f0 09		beq $1a44			beq 	_IFIOutDigit
.1a3b	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.1a3d	48		pha				pha
.1a3e	20 22 1a	jsr $1a22			jsr 	_IFIRecursiveConvert 		; convert the divider
.1a41	68		pla				pla
.1a42	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.1a44					_IFIOutDigit:
.1a44	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.1a46	c9 0a		cmp #$0a			cmp	 	#10
.1a48	90 02		bcc $1a4c			bcc 	_IFINotHex
.1a4a	69 06		adc #$06			adc 	#6
.1a4c					_IFINotHex:
.1a4c	69 30		adc #$30			adc 	#48
.1a4e	20 e5 1c	jsr $1ce5			jsr 	IFloatBufferWrite
.1a51	60		rts				rts
.0245					IFBase:
>0245							.fill 	1
.1a52					IFloatFloatToStringR0:
.1a52	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.1a54	20 a4 1b	jsr $1ba4			jsr 	IFloatPushRx
.1a57	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister
.1a5a	20 55 19	jsr $1955			jsr 	IFloatIntegerR0				; make R0 integer
.1a5d	a9 0a		lda #$0a			lda 	#10 						; base 10.
.1a5f	20 f6 19	jsr $19f6			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.1a62	9c 46 02	stz $0246			stz 	IFloatDecimalCount 			; zero the decimal count.
.1a65	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.1a67	29 3f		and #$3f			and 	#IFXMask
.1a69	f0 44		beq $1aaf			beq 	_IFFSExit
.1a6b					_IFloatFracLoop:
.1a6b	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.1a6d	20 e6 1b	jsr $1be6			jsr 	IFloatCopyFromRegister
.1a70	20 ff 18	jsr $18ff			jsr 	IFloatFractionalR0
.1a73	20 8c 1c	jsr $1c8c			jsr 	IFloatNormalise
.1a76	a2 14		ldx #$14			ldx 	#IFR2
.1a78	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister 		; copy to R2
.1a7b	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.1a7d	a9 0a		lda #$0a			lda 	#10
.1a7f	20 57 1c	jsr $1c57			jsr 	IFloatSetByte
.1a82	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.1a84	20 f5 16	jsr $16f5			jsr 	IFloatMultiply
.1a87	a2 14		ldx #$14			ldx 	#IFR2
.1a89	20 f7 1b	jsr $1bf7			jsr 	IFloatCopyToRegister
.1a8c	20 55 19	jsr $1955			jsr 	IFloatIntegerR0 			; get integer part of R0
.1a8f	ad 46 02	lda $0246			lda 	IFloatDecimalCount 			; done 5 dp, no more
.1a92	c9 03		cmp #$03			cmp 	#3
.1a94	f0 16		beq $1aac			beq 	_IFFSExitStripZero
.1a96	ad 46 02	lda $0246			lda 	IFloatDecimalCount 			; written the DP yet ?
.1a99	d0 05		bne $1aa0			bne 	_IFloatNotFirst
.1a9b	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.1a9d	20 e5 1c	jsr $1ce5			jsr 	IFloatBufferWrite
.1aa0					_IFloatNotFirst:
.1aa0	ee 46 02	inc $0246			inc 	IFloatDecimalCount
.1aa3	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.1aa5	09 30		ora #$30			ora 	#"0"						; ASCII
.1aa7	20 e5 1c	jsr $1ce5			jsr 	IFloatBufferWrite 			; write to the buffer.
.1aaa	80 bf		bra $1a6b			bra 	_IFloatFracLoop
.1aac					_IFFSExitStripZero:
.1aac	20 f4 1c	jsr $1cf4			jsr 	IFloatStripTrailingZeros
.1aaf					_IFFSExit:
.1aaf	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.1ab1	20 c5 1b	jsr $1bc5			jsr 	IFloatPullRx
.1ab4	20 dd 1c	jsr $1cdd			jsr 	IFloatGetBufferAddress
.1ab7	18		clc				clc
.1ab8	60		rts				rts
.0246					IFloatDecimalCount:
>0246							.fill 	1
.1ab9					IFloatStringToFloatR0:
.1ab9	8d 47 02	sta $0247			sta 	IFCount 					; save it out.
.1abc	86 0a		stx $0a				stx 	iTemp0
.1abe	84 0b		sty $0b				sty 	iTemp0+1
.1ac0	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.1ac2	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1ac5	9c 48 02	stz $0248			stz 	IFSignFlag 					; clear the sign flag
.1ac8	20 55 1b	jsr $1b55			jsr 	IFSTFGetNext 				; get first
.1acb	f0 1b		beq $1ae8			beq 	_IFSTFFail 					; no character
.1acd	90 10		bcc $1adf			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.1acf	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.1ad1	d0 15		bne $1ae8			bne 	_IFSTFFail
.1ad3	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.1ad5	8d 48 02	sta $0248			sta 	IFSignFlag
.1ad8					_IFSTFLoop:
.1ad8	20 55 1b	jsr $1b55			jsr 	IFSTFGetNext 				; get next
.1adb	b0 0b		bcs $1ae8			bcs 	_IFSTFFail 					; bad character.
.1add	f0 11		beq $1af0			beq 	_IFSTFExit 					; end of data
.1adf					_IFSTFHaveChar:
.1adf	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.1ae1	f0 08		beq $1aeb			beq 	_IFSTFDecimal
.1ae3	20 79 1b	jsr $1b79			jsr 	IFSTFAddR0 					; add number in
.1ae6	80 f0		bra $1ad8			bra 	_IFSTFLoop 					; keep going until . or end.
.1ae8					_IFSTFFail:
.1ae8	38		sec				sec
.1ae9	80 0d		bra $1af8			bra 	_IFSTFReturn
.1aeb					_IFSTFDecimal:
.1aeb	20 00 1b	jsr $1b00			jsr 	IFSTFDecimal 				; call the decimal places code.
.1aee	b0 08		bcs $1af8			bcs 	_IFSTFReturn 				; error
.1af0					_IFSTFExit:
.1af0	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.1af2	0d 48 02	ora $0248			ora 	IFSignFlag
.1af5	85 0f		sta $0f				sta 	IFR0+IExp
.1af7	18		clc				clc
.1af8					_IFSTFReturn:
.1af8	60		rts				rts
.1af9					IFloatAddDecimalToR0:
.1af9	8d 47 02	sta $0247			sta 	IFCount 					; save it out.
.1afc	86 0a		stx $0a				stx 	iTemp0
.1afe	84 0b		sty $0b				sty 	iTemp0+1
.1b00					IFSTFDecimal:
.1b00	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.1b02	20 a4 1b	jsr $1ba4			jsr 	IFloatPushRx
.1b05	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.1b07	20 55 1c	jsr $1c55			jsr 	IFloatSetZero
.1b0a	9c 49 02	stz $0249			stz 	IFDecimalPlaces
.1b0d					_IFSTDLoop:
.1b0d	20 55 1b	jsr $1b55			jsr 	IFSTFGetNext 				; get next
.1b10	b0 41		bcs $1b53			bcs 	_IFSTFFail2 				; bad character.
.1b12	f0 11		beq $1b25			beq 	_IFSTFComplete 				; end of data, work out the result.
.1b14	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.1b16	f0 39		beq $1b51			beq 	_IFSTFExit2
.1b18	20 79 1b	jsr $1b79			jsr 	IFSTFAddR0 					; add number in
.1b1b	ee 49 02	inc $0249			inc 	IFDecimalPlaces 			; count decimals
.1b1e	ad 49 02	lda $0249			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.1b21	c9 03		cmp #$03			cmp 	#3
.1b23	90 e8		bcc $1b0d			bcc 	_IFSTDLoop
.1b25					_IFSTFComplete:
.1b25	ad 49 02	lda $0249			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.1b28	f0 27		beq $1b51			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.1b2a	3a		dec a				dec 	a 							; table indexed from 1.
.1b2b	0a		asl a				asl 	a
.1b2c	0a		asl a				asl 	a
.1b2d	aa		tax				tax
.1b2e	bd 90 1b	lda $1b90,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.1b31	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.1b33	bd 91 1b	lda $1b91,x			lda 	TableTen+1,x
.1b36	85 11		sta $11				sta  	IFR1+IM1
.1b38	bd 92 1b	lda $1b92,x			lda 	TableTen+2,x
.1b3b	85 12		sta $12				sta  	IFR1+IM2
.1b3d	bd 93 1b	lda $1b93,x			lda 	TableTen+3,x
.1b40	85 13		sta $13				sta  	IFR1+IExp
.1b42	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.1b44	20 f5 16	jsr $16f5			jsr 	IFloatMultiply
.1b47	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.1b49	20 c5 1b	jsr $1bc5			jsr 	IFloatPullRx
.1b4c	a2 10		ldx #$10			ldx 	#IFR1
.1b4e	20 4b 16	jsr $164b			jsr 	IFloatAdd
.1b51					_IFSTFExit2:
.1b51	18		clc				clc
.1b52	60		rts				rts
.1b53					_IFSTFFail2:
.1b53	38		sec				sec
.1b54	60		rts				rts
.1b55					IFSTFGetNext:
.1b55	ad 47 02	lda $0247			lda 	IFCount  					; if count is zero, return with Z set.
.1b58	f0 19		beq $1b73			beq 	_IFSTFReturnOk
.1b5a	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.1b5c	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.1b5e	d0 02		bne $1b62			bne 	_IFSTFGNNoCarry
.1b60	e6 0b		inc $0b				inc 	iTemp0+1
.1b62					_IFSTFGNNoCarry:
.1b62	ce 47 02	dec $0247			dec 	IFCount 					; dec count.
.1b65	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.1b67	f0 08		beq $1b71			beq 	_IFSTFGOkay
.1b69	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.1b6b	90 08		bcc $1b75			bcc 	_IFSTFGFail
.1b6d	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.1b6f	b0 04		bcs $1b75			bcs 	_IFSTFGFail
.1b71					_IFSTFGOkay:
.1b71	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.1b73					_IFSTFReturnOk:
.1b73	18		clc				clc
.1b74	60		rts				rts
.1b75					_IFSTFGFail:
.1b75	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.1b77	38		sec				sec
.1b78	60		rts				rts
.1b79					IFSTFAddR0:
.1b79	29 0f		and #$0f			and 	#15 						; to int value
.1b7b	48		pha				pha 								; save it.
.1b7c	a9 0a		lda #$0a			lda 	#10
.1b7e	a2 10		ldx #$10			ldx 	#IFR1
.1b80	20 57 1c	jsr $1c57			jsr 	IFloatSetByte
.1b83	20 f5 16	jsr $16f5			jsr 	IFloatMultiply
.1b86	68		pla				pla
.1b87	a2 10		ldx #$10			ldx 	#IFR1
.1b89	20 57 1c	jsr $1c57			jsr 	IFloatSetByte
.1b8c	20 4b 16	jsr $164b			jsr 	IFloatAdd
.1b8f	60		rts				rts
.0247					IFCount:
>0247							.fill 	1
.0248					IFSignFlag:
>0248							.fill 	1
.0249					IFDecimalPlaces:
>0249							.fill 	1
.1b90					TableTen:
>1b90	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>1b94	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>1b98	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>1b9c	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>1ba0	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.1ba4					IFloatPushRx:
.1ba4	5a		phy				phy
.1ba5	ac 4a 02	ldy $024a			ldy 	IFStackIndex
.1ba8	b5 00		lda $00,x			lda 	IM0,x
.1baa	99 4b 02	sta $024b,y			sta 	IFStack,y
.1bad	b5 01		lda $01,x			lda 	IM1,x
.1baf	99 4c 02	sta $024c,y			sta 	IFStack+1,y
.1bb2	b5 02		lda $02,x			lda 	IM2,x
.1bb4	99 4d 02	sta $024d,y			sta 	IFStack+2,y
.1bb7	b5 03		lda $03,x			lda 	IExp,x
.1bb9	99 4e 02	sta $024e,y			sta 	IFStack+3,y
.1bbc	c8		iny				iny
.1bbd	c8		iny				iny
.1bbe	c8		iny				iny
.1bbf	c8		iny				iny
.1bc0	8c 4a 02	sty $024a			sty 	IFStackIndex
.1bc3	7a		ply				ply
.1bc4	60		rts				rts
.1bc5					IFloatPullRx:
.1bc5	5a		phy				phy
.1bc6	ac 4a 02	ldy $024a			ldy 	IFStackIndex
.1bc9	88		dey				dey
.1bca	88		dey				dey
.1bcb	88		dey				dey
.1bcc	88		dey				dey
.1bcd	b9 4b 02	lda $024b,y			lda 	IFStack,y
.1bd0	95 00		sta $00,x			sta 	IM0,x
.1bd2	b9 4c 02	lda $024c,y			lda 	IFStack+1,y
.1bd5	95 01		sta $01,x			sta 	IM1,x
.1bd7	b9 4d 02	lda $024d,y			lda 	IFStack+2,y
.1bda	95 02		sta $02,x			sta 	IM2,x
.1bdc	b9 4e 02	lda $024e,y			lda 	IFStack+3,y
.1bdf	95 03		sta $03,x			sta 	IExp,x
.1be1	8c 4a 02	sty $024a			sty 	IFStackIndex
.1be4	7a		ply				ply
.1be5	60		rts				rts
.024a					IFStackIndex:
>024a							.fill 	1
.024b					IFStack:
>024b							.fill 	16*4
.1be6					IFloatCopyFromRegister:
.1be6	b5 00		lda $00,x			lda 	0,x
.1be8	85 0c		sta $0c				sta 	IFR0
.1bea	b5 01		lda $01,x			lda 	1,x
.1bec	85 0d		sta $0d				sta 	IFR0+1
.1bee	b5 02		lda $02,x			lda 	2,x
.1bf0	85 0e		sta $0e				sta 	IFR0+2
.1bf2	b5 03		lda $03,x			lda 	3,x
.1bf4	85 0f		sta $0f				sta 	IFR0+3
.1bf6	60		rts				rts
.1bf7					IFloatCopyToRegister:
.1bf7	a5 0c		lda $0c				lda 	IFR0
.1bf9	95 00		sta $00,x			sta 	0,x
.1bfb	a5 0d		lda $0d				lda 	IFR0+1
.1bfd	95 01		sta $01,x			sta 	1,x
.1bff	a5 0e		lda $0e				lda 	IFR0+2
.1c01	95 02		sta $02,x			sta 	2,x
.1c03	a5 0f		lda $0f				lda 	IFR0+3
.1c05	95 03		sta $03,x			sta 	3,x
.1c07	60		rts				rts
.1c08					IFloatLoadInline:
.1c08	68		pla				pla 								; pop address off to iTemp0
.1c09	85 0a		sta $0a				sta 	iTemp0
.1c0b	68		pla				pla
.1c0c	85 0b		sta $0b				sta 	iTemp0+1
.1c0e	a0 01		ldy #$01			ldy 	#1
.1c10	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.1c12	95 00		sta $00,x			sta 	0,x
.1c14	c8		iny				iny
.1c15	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.1c17	95 01		sta $01,x			sta 	1,x
.1c19	c8		iny				iny
.1c1a	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.1c1c	95 02		sta $02,x			sta 	2,x
.1c1e	c8		iny				iny
.1c1f	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.1c21	95 03		sta $03,x			sta 	3,x
.1c23	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.1c24	a5 0a		lda $0a				lda 	iTemp0
.1c26	69 05		adc #$05			adc 	#5
.1c28	85 0a		sta $0a				sta 	iTemp0
.1c2a	90 02		bcc $1c2e			bcc 	_IFLINoCarry
.1c2c	e6 0b		inc $0b				inc 	iTemp0+1
.1c2e					_IFLINoCarry:
.1c2e	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.1c31					IFloatMultiply8BitRx:
.1c31	5a		phy		        phy
.1c32	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.1c34	a4 0c		ldy $0c		        ldy     IFR0+IM0
.1c36	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.1c37	85 0c		sta $0c		        sta     IFR0+IM0
.1c39	84 0d		sty $0d		        sty     IFR0+IM1
.1c3b	a9 00		lda #$00	        lda     #0
.1c3d	a0 08		ldy #$08	        ldy     #8
.1c3f					_IFMLoop:
.1c3f	90 03		bcc $1c44	        bcc     _IFMNoAdd
.1c41	18		clc		        clc
.1c42	65 0d		adc $0d		        adc     IFR0+IM1
.1c44					_IFMNoAdd:
.1c44	6a		ror a		        ror     a
.1c45	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.1c47	88		dey		        dey
.1c48	d0 f5		bne $1c3f	        bne     _IFMLoop
.1c4a	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.1c4c	7a		ply		        ply
.1c4d	60		rts		        rts
.1c4e					IFloatCheckZero:
.1c4e	b5 00		lda $00,x			lda 	IM0,x
.1c50	15 01		ora $01,x			ora 	IM1,x
.1c52	15 02		ora $02,x			ora 	IM2,x
.1c54	60		rts				rts
.1c55					IFloatSetZero:
.1c55	a9 00		lda #$00			lda 	#0
.1c57					IFloatSetByte:
.1c57	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.1c59	74 01		stz $01,x			stz 	IM1,x
.1c5b	74 02		stz $02,x			stz 	IM2,x
.1c5d	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.1c5f	60		rts				rts
.1c60					IFloatNegate:
.1c60	b5 03		lda $03,x			lda 	IExp,x
.1c62	49 40		eor #$40			eor 	#IFSign
.1c64	95 03		sta $03,x			sta 	IExp,x
.1c66	18		clc				clc
.1c67	60		rts				rts
.1c68					IFloatMantissaNegate:
.1c68	38		sec				sec
.1c69	a9 00		lda #$00			lda 	#0
.1c6b	f5 00		sbc $00,x			sbc 	IM0,x
.1c6d	95 00		sta $00,x			sta 	IM0,x
.1c6f	a9 00		lda #$00			lda 	#0
.1c71	f5 01		sbc $01,x			sbc 	IM1,x
.1c73	95 01		sta $01,x			sta 	IM1,x
.1c75	a9 00		lda #$00			lda 	#0
.1c77	f5 02		sbc $02,x			sbc 	IM2,x
.1c79	95 02		sta $02,x			sta 	IM2,x
.1c7b	60		rts				rts
.1c7c					IFloatShiftLeft:
.1c7c	18		clc				clc
.1c7d					IFloatRotateLeft:
.1c7d	36 00		rol $00,x			rol 	IM0,x
.1c7f	36 01		rol $01,x			rol 	IM1,x
.1c81	36 02		rol $02,x			rol 	IM2,x
.1c83	60		rts				rts
.1c84					IFloatShiftRight:
.1c84	18		clc				clc
.1c85					IFloatRotateRight:
.1c85	76 02		ror $02,x			ror 	IM2,x
.1c87	76 01		ror $01,x			ror 	IM1,x
.1c89	76 00		ror $00,x			ror 	IM0,x
.1c8b	60		rts				rts
.1c8c					IFloatNormalise:
.1c8c	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero 			; is it zero
.1c8f	f0 18		beq $1ca9			beq 	_IFNExitZero 				; if so exit
.1c91					_IFNLoop:
.1c91	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.1c93	29 c0		and #$c0			and 	#$C0
.1c95	c9 40		cmp #$40			cmp 	#$40
.1c97	f0 13		beq $1cac			beq 	_IFNExitOkay 				; if so , then we are done.
.1c99	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.1c9b	29 3f		and #$3f			and 	#$3F
.1c9d	c9 20		cmp #$20			cmp 	#$20
.1c9f	f0 0b		beq $1cac			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.1ca1	20 c2 1c	jsr $1cc2			jsr 	IFloatDecExponent
.1ca4	20 7c 1c	jsr $1c7c			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.1ca7	80 e8		bra $1c91			bra 	_IFNLoop
.1ca9					_IFNExitZero:
.1ca9	20 55 1c	jsr $1c55			jsr 	IFloatSetZero 				; set the result to zero
.1cac					_IFNExitOkay:
.1cac	18		clc				clc  								; return with CC.
.1cad	60		rts				rts
.1cae					IFloatIncExponent:
.1cae	b5 03		lda $03,x			lda 	IExp,x
.1cb0	48		pha				pha
.1cb1	29 c0		and #$c0			and 	#$C0
.1cb3	8d 8b 02	sta $028b			sta 	IFXTemp
.1cb6	68		pla				pla
.1cb7	1a		inc a				inc 	a
.1cb8	29 3f		and #$3f			and 	#$3F
.1cba	48		pha				pha
.1cbb	0d 8b 02	ora $028b			ora 	IFXTemp
.1cbe	95 03		sta $03,x			sta 	IExp,x
.1cc0	68		pla				pla
.1cc1	60		rts				rts
.1cc2					IFloatDecExponent:
.1cc2	b5 03		lda $03,x			lda 	IExp,x
.1cc4	48		pha				pha
.1cc5	29 c0		and #$c0			and 	#$C0
.1cc7	8d 8b 02	sta $028b			sta 	IFXTemp
.1cca	68		pla				pla
.1ccb	3a		dec a				dec 	a
.1ccc	29 3f		and #$3f			and 	#$3F
.1cce	48		pha				pha
.1ccf	0d 8b 02	ora $028b			ora 	IFXTemp
.1cd2	95 03		sta $03,x			sta 	IExp,x
.1cd4	68		pla				pla
.1cd5	60		rts				rts
.028b					IFXTemp:
>028b							.fill 	1
.1cd6					IFloatBufferReset:
.1cd6	9c 8c 02	stz $028c			stz 	IFBufferCount
.1cd9	9c 8d 02	stz $028d			stz 	IFBuffer
.1cdc	60		rts				rts
.1cdd					IFloatGetBufferAddress:
.1cdd	a0 02		ldy #$02			ldy 	#(IFBuffer >> 8)
.1cdf	a2 8d		ldx #$8d			ldx 	#(IFBuffer & $FF)
.1ce1	ad 8c 02	lda $028c			lda 	IFBufferCount
.1ce4	60		rts				rts
.1ce5					IFloatBufferWrite:
.1ce5	da		phx				phx
.1ce6	ae 8c 02	ldx $028c			ldx 	IFBufferCount
.1ce9	9d 8d 02	sta $028d,x			sta 	IFBuffer,x
.1cec	9e 8e 02	stz $028e,x			stz 	IFBuffer+1,x
.1cef	ee 8c 02	inc $028c			inc 	IFBufferCount
.1cf2	fa		plx				plx
.1cf3	60		rts				rts
.1cf4					IFloatStripTrailingZeros:
.1cf4	ae 8c 02	ldx $028c			ldx 	IFBufferCount
.1cf7	bd 8c 02	lda $028c,x			lda 	IFBuffer-1,x
.1cfa	c9 30		cmp #$30			cmp		#"0"
.1cfc	d0 0f		bne $1d0d			bne 	_IFSTExit
.1cfe	bd 8b 02	lda $028b,x			lda 	IFBuffer-2,x
.1d01	c9 2e		cmp #$2e			cmp 	#"."
.1d03	f0 08		beq $1d0d			beq 	_IFSTExit
.1d05	ce 8c 02	dec $028c			dec 	IFBufferCount
.1d08	9e 8c 02	stz $028c,x			stz 	IFBuffer-1,x
.1d0b	80 e7		bra $1cf4			bra 	IFloatStripTrailingZeros
.1d0d					_IFSTExit:
.1d0d	60		rts				rts
.028c					IFBufferCount:
>028c							.fill 	1
.028d					IFBuffer:
>028d							.fill 	25
.1d0e					IFloatCheck:
.1d0e	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.1d10	09 40		ora #$40			ora 	#IFSign
.1d12	85 0f		sta $0f				sta 	IFR0+IExp
.1d14	20 4b 16	jsr $164b			jsr 	IFloatAdd 					; add allowed to error.
.1d17	a2 0c		ldx #$0c			ldx 	#IFR0
.1d19	20 4e 1c	jsr $1c4e			jsr 	IFloatCheckZero 			; error if < 0
.1d1c	f0 06		beq $1d24			beq 	_IFAOkay
.1d1e	a5 0f		lda $0f				lda 	IFR0+IExp
.1d20	29 40		and #$40			and 	#IFSign
.1d22	d0 01		bne $1d25			bne 	_IFAFail
.1d24					_IFAOkay:
.1d24	60		rts				rts
.1d25					_IFAFail:
.1d25	38		sec				sec
.1d26	68		pla				pla 								; get address - 2
.1d27	e9 02		sbc #$02			sbc 	#2
.1d29	aa		tax				tax
.1d2a	68		pla				pla
.1d2b	e9 00		sbc #$00			sbc 	#0
.1d2d	a8		tay				tay
.1d2e	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.1d30					_IFAStop:
>1d30	db						.byte 	$DB 						; display an error AA ADR ADR
.1d31	80 fd		bra $1d30			bra 	_IFAStop

;******  Return to file: basic.asm

.1d33					NotImplemented:
.1d33	a9 ff		lda #$ff			lda 	#$FF
.1d35					ErrorHandler:
>1d35	db						.byte 	$DB
.1d36	a9 ee		lda #$ee			lda 	#$EE
.1d38	4c 35 1d	jmp $1d35			jmp 	ErrorHandler

;******  End of listing
