
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Thu Jun  1 09:18:32 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 04 1c	jsr $1c04			jsr 	PGMSetBaseAddress
.1007	20 86 22	jsr $2286			jsr 	IFInitialise
.100a	4c 1d 12	jmp $121d			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc


;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 30 14	jsr $1430			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 3e 1f	jmp $1f3e		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 17 1c	jsr $1c17			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 36 22	jsr $2236			jsr 	VARClearHashTables
.1028	ad 46 03	lda $0346			lda 	PGMEndMemoryHigh
.102b	20 88 20	jsr $2088			jsr 	StackReset
.102e	20 e4 20	jsr $20e4			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 12		beq $1054			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 02		bne $104c			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c					_AllocateSkipCarry:
.104c	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.104e	d0 01		bne $1051			bne 	_AllocateSkipBorrow
.1050	ca		dex				dex
.1051					_AllocateSkipBorrow:
.1051	88		dey				dey
.1052	80 e6		bra $103a			bra 	_AllocateLoop
.1054					_AllocateExit:
.1054	fa		plx				plx 								; restore address
.1055	68		pla				pla
.1056	7a		ply				ply 								; restore Y
.1057	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1058					CommandDIM:
.1058	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.105a	29 c0		and #$c0			and 	#$C0
.105c	c9 40		cmp #$40			cmp 	#$40
.105e	d0 39		bne $1099			bne 	_CDSyntax
.1060	20 ed 21	jsr $21ed			jsr 	VARGetInfo 					; get information
.1063	ad 52 04	lda $0452			lda 	VARType 					; check array.
.1066	29 02		and #$02			and 	#2
.1068	f0 2f		beq $1099			beq 	_CDSyntax
.106a	20 9f 21	jsr $219f			jsr 	VARFind 					; does it already exist
.106d	b0 2d		bcs $109c			bcs 	_CDExists
.106f	20 4b 21	jsr $214b			jsr 	VARCreate 					; create it - returns data ptr in XA
.1072	da		phx				phx 								; save target address
.1073	48		pha				pha
.1074	ad 52 04	lda $0452			lda 	VARType 					; type ID.
.1077	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1079	20 9f 10	jsr $109f			jsr 	CreateArray 				; create array to XA
.107c	84 20		sty $20				sty 	zTemp1 						; save Y
.107e	7a		ply				ply 								; restore target to zTemp0
.107f	84 1e		sty $1e				sty 	zTemp0
.1081	7a		ply				ply
.1082	84 1f		sty $1f				sty 	zTemp0+1
.1084	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1086	a0 01		ldy #$01			ldy 	#1
.1088	8a		txa				txa
.1089	91 1e		sta ($1e),y			sta 	(zTemp0),y
.108b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.108d	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 				; check )
.1090	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.1092	c8		iny				iny
.1093	c0 99		cpy #$99			cpy 	#PR_COMMA
.1095	f0 c1		beq $1058			beq 	CommandDIM
.1097	88		dey				dey
.1098	60		rts				rts
.1099					_CDSyntax:
.1099	4c ed 1e	jmp $1eed		jmp	ErrorV_syntax
.109c					_CDExists:
.109c	4c aa 1f	jmp $1faa		jmp	ErrorV_redefine
.109f					CreateArray:
.109f	8d 3b 03	sta $033b			sta 	CAType						; save type
.10a2	20 42 14	jsr $1442			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10a5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10a7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a9	f0 04		beq $10af			beq 	_CATwoDimensions
.10ab	20 b0 10	jsr $10b0			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ae	60		rts				rts
.10af					_CATwoDimensions:
>10af	db						.byte 	$DB
.10b0					CreateSingleArray:
>10b0	db						.byte 	$DB
.10b1	5a		phy				phy
.10b2	38		sec				sec 								; allocate memory block all zeros.
.10b3	a5 0c		lda $0c				lda 	IFR0+IM0
.10b5	a6 0d		ldx $0d				ldx 	IFR0+IM1
.10b7	20 f0 10	jsr $10f0			jsr 	CSAAllocate
.10ba	ac 3b 03	ldy $033b			ldy 	CAType 						; if numbers, we don't need to initialise.
.10bd	f0 2f		beq $10ee			beq 	_CSANoInit
.10bf	da		phx				phx 								; save address of new array
.10c0	48		pha				pha
.10c1	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.10c3	86 1f		stx $1f				stx 	zTemp0+1
.10c5	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.10c7	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10c9	a8		tay				tay
.10ca	b2 1e		lda ($1e)			lda 	(zTemp0)
.10cc	aa		tax				tax
.10cd					_CSAEraseString:
.10cd	5a		phy				phy
.10ce	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.10d0	a9 80		lda #$80			lda 	#$80
.10d2	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10d4	7a		ply				ply
.10d5	18		clc				clc 								; add 4 to next slot.
.10d6	a5 1e		lda $1e				lda 	zTemp0
.10d8	69 04		adc #$04			adc 	#4
.10da	85 1e		sta $1e				sta 	zTemp0
.10dc	90 02		bcc $10e0			bcc 	_CSAENoCarry
.10de	e6 1f		inc $1f				inc 	zTemp0+1
.10e0					_CSAENoCarry:
.10e0	e0 00		cpx #$00			cpx 	#0
.10e2	d0 01		bne $10e5			bne 	_CSANoBorrow
.10e4	88		dey				dey
.10e5					_CSANoBorrow:
.10e5	ca		dex				dex
.10e6	d0 e5		bne $10cd			bne 	_CSAEraseString
.10e8	c0 00		cpy #$00			cpy 	#0
.10ea	d0 e1		bne $10cd			bne 	_CSAEraseString
.10ec	68		pla				pla
.10ed	fa		plx				plx
.10ee					_CSANoInit:
.10ee	7a		ply				ply
.10ef	60		rts				rts
.10f0					CSAAllocate:
.10f0	08		php				php 								; save type flag.
.10f1	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.10f2	d0 01		bne $10f5			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.10f4	e8		inx				inx
.10f5					_CSAANoCarry:
.10f5	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.10f7	b0 2e		bcs $1127			bcs 	_CSARange
.10f9	28		plp				plp 								; restore type flag
.10fa	08		php				php 								; save it back again.
.10fb	da		phx				phx 								; save size.
.10fc	48		pha				pha
.10fd	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.10ff	90 03		bcc $1104			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1101	0a		asl a				asl 	a
.1102	26 1f		rol $1f				rol 	zTemp0+1
.1104					_CSAATimes2:
.1104	0a		asl a				asl 	a
.1105	26 1f		rol $1f				rol 	zTemp0+1
.1107	18		clc				clc
.1108	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.110a	90 02		bcc $110e			bcc 	_CSAANoCarry2
.110c	e6 1f		inc $1f				inc 	zTemp0+1
.110e					_CSAANoCarry2:
.110e	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.1110	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.1113	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.1115	85 1e		sta $1e				sta 	zTemp0
.1117	68		pla				pla  								; write element count to first 2 bytes
.1118	92 1e		sta ($1e)			sta 	(zTemp0)
.111a	68		pla				pla 								; msb of element count
.111b	28		plp				plp 								; CC if pointer array
.111c	b0 02		bcs $1120			bcs 	_CSAAIsData
.111e	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1120					_CSAAIsData:
.1120	a0 01		ldy #$01			ldy 	#1
.1122	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1124	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1126	60		rts				rts
.1127					_CSARange:
.1127	4c fd 1e	jmp $1efd		jmp	ErrorV_range
.033b					CAType:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.112a					Command_Print:
.112a					Command_IP_Main:
.112a	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.112b					_CPLoop:
.112b	08		php				php 								; save last action flag
.112c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.112e	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1130	f0 3e		beq $1170			beq 	_CPExit 					; without consuming
.1132	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1134	f0 3a		beq $1170			beq 	_CPExit
.1136	68		pla				pla 								; throw last action flag
.1137	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1139	c8		iny				iny
.113a	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.113c	f0 2f		beq $116d			beq 	_CPContinueWithSameLine
.113e	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1140	f0 26		beq $1168			beq 	_CPTab
.1142	88		dey				dey 								; undo the get.
.1143	20 f0 13	jsr $13f0			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1146	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1148	10 14		bpl $115e			bpl 	_CPNumber
.114a	5a		phy				phy
.114b	18		clc				clc 								; string address to YX
.114c	a5 0c		lda $0c				lda 	IFR0+IM0
.114e	aa		tax				tax
.114f	a5 0d		lda $0d				lda 	IFR0+IM1
.1151	a8		tay				tay
.1152	e8		inx				inx 								; point to 1st character
.1153	d0 01		bne $1156			bne 	_CPNoCarry
.1155	c8		iny				iny
.1156					_CPNoCarry:
.1156	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1158	20 79 11	jsr $1179			jsr 	CPPrintAYX 					; print AYX
.115b	7a		ply				ply
.115c	80 cc		bra $112a			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.115e					_CPNumber:
.115e	5a		phy				phy
.115f	20 98 26	jsr $2698			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1162	20 79 11	jsr $1179			jsr 	CPPrintAYX 					; print AYX
.1165	7a		ply				ply
.1166	80 c2		bra $112a			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1168					_CPTab:
.1168	a9 09		lda #$09			lda 	#9 							; print TAB
.116a	20 8c 11	jsr $118c			jsr 	CPPrintA
.116d					_CPContinueWithSameLine:
.116d	38		sec				sec 								; loop round with carry set, which
.116e	80 bb		bra $112b			bra 	_CPLoop 					; will inhibit final CR
.1170					_CPExit:
.1170	28		plp				plp 								; get last action flag
.1171	b0 05		bcs $1178			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1173	a9 0d		lda #$0d			lda 	#13 						; print new line
.1175	20 8c 11	jsr $118c			jsr 	CPPrintA
.1178					_CPExit2:
.1178	60		rts				rts
.1179					CPPrintAYX:
.1179	86 1e		stx $1e				stx 	zTemp0
.117b	84 1f		sty $1f				sty 	zTemp0+1
.117d	aa		tax				tax
.117e	f0 0b		beq $118b			beq 	_CPPrintExit
.1180	a0 00		ldy #$00			ldy 	#0
.1182					_CPPrintAYXLoop:
.1182	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1184	20 8c 11	jsr $118c			jsr 	CPPrintA
.1187	c8		iny				iny
.1188	ca		dex				dex
.1189	d0 f7		bne $1182			bne 	_CPPrintAYXLoop
.118b					_CPPrintExit:
.118b	60		rts				rts
.118c					CPPrintA:
.118c	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.118f					CommandLET:
.118f	20 b8 14	jsr $14b8			jsr 	EXPTermR0 					; get term
.1192	90 6d		bcc $1201			bcc 	_CLError 					; must be a reference term.
.1194	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.1196	48		pha				pha
.1197	a5 0d		lda $0d				lda 	IFR0+IM1
.1199	48		pha				pha
.119a	a5 0f		lda $0f				lda 	IFR0+IExp
.119c	48		pha				pha
.119d	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.119f	20 3c 20	jsr $203c			jsr 	ERRCheckA
.11a2	20 f0 13	jsr $13f0			jsr 	EXPEvaluateExpression 		; right hand side.
.11a5	68		pla				pla 								; type of l-expr
.11a6	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.11a8	30 5a		bmi $1204			bmi 	_CLType
.11aa	fa		plx				plx 	 							; pop target address to zTemp0
.11ab	86 1f		stx $1f				stx 	zTemp0+1
.11ad	fa		plx				plx
.11ae	86 1e		stx $1e				stx 	zTemp0
.11b0	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.11b2	30 15		bmi $11c9			bmi 	_CLStringAssign
.11b4	5a		phy				phy
.11b5	a0 03		ldy #$03			ldy 	#3
.11b7	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11b9	88		dey				dey
.11ba	a5 0e		lda $0e				lda 	IFR0+IM2
.11bc	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11be	88		dey				dey
.11bf	a5 0d		lda $0d				lda 	IFR0+IM1
.11c1	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11c3	a5 0c		lda $0c				lda 	IFR0+IM0
.11c5	92 1e		sta ($1e)			sta 	(zTemp0)
.11c7	7a		ply				ply
.11c8	60		rts				rts
.11c9					_CLStringAssign:
.11c9	5a		phy				phy
.11ca	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.11cc	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.11ce	12 1e		ora ($1e)			ora 	(zTemp0)
.11d0	f0 23		beq $11f5			beq 	_CLConcreteString
.11d2	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.11d4	85 20		sta $20				sta 	zTemp1
.11d6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.11d8	85 21		sta $21				sta 	zTemp1+1
.11da	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.11dc	38		sec				sec 								; we want 3 for slot size, status, string size.
.11dd	e9 03		sbc #$03			sbc 	#3
.11df	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.11e1	90 12		bcc $11f5			bcc 	_CLConcreteString 			; if so, concrete the string again.
.11e3	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.11e5	1a		inc a				inc 	a
.11e6	aa		tax				tax
.11e7	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.11e9					_CLReplaceString:
.11e9	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.11eb	c8		iny				iny
.11ec	c8		iny				iny
.11ed	91 20		sta ($20),y			sta 	(zTemp1),y
.11ef	88		dey				dey
.11f0	ca		dex				dex
.11f1	d0 f6		bne $11e9			bne 	_CLReplaceString
.11f3	80 0a		bra $11ff			bra 	_CLExit
.11f5					_CLConcreteString:
.11f5	20 99 20	jsr $2099			jsr 	StringConcrete  			; concreted string in XA.
.11f8	a0 01		ldy #$01			ldy 	#1 							; store the address
.11fa	92 1e		sta ($1e)			sta 	(zTemp0)
.11fc	8a		txa				txa
.11fd	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11ff					_CLExit:
.11ff	7a		ply				ply
.1200	60		rts				rts
.1201					_CLError:
.1201	4c 10 20	jmp $2010		jmp	ErrorV_variable
.1204					_CLType:
.1204	4c 1a 1f	jmp $1f1a		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1207					Command_NEW:
.1207	20 0b 1c	jsr $1c0b			jsr 	PGMNewProgram
.120a	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.120d	4c 6a 12	jmp $126a			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1210					Command_REM:
.1210					Command_REM2:
.1210	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1212	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1214	d0 06		bne $121c			bne 	_CRExit
.1216	c8		iny				iny 								; skip over it, it's a comment.
.1217	98		tya				tya
.1218	38		sec				sec
.1219	71 1c		adc ($1c),y			adc 	(codePtr),y
.121b	a8		tay				tay
.121c					_CRExit:
.121c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.121d					Command_RUN:
.121d	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.1220	ad 45 03	lda $0345			lda 	PGMBaseHigh 				; back to the program start
.1223	85 1d		sta $1d				sta 	codePtr+1
.1225	64 1c		stz $1c				stz 	codePtr
.1227	80 0b		bra $1234			bra 	RUNNewLine
.1229					RUNEndOfLine:
.1229	18		clc				clc 								; advance to next line.
.122a	b2 1c		lda ($1c)			lda 	(codePtr)
.122c	65 1c		adc $1c				adc 	codePtr
.122e	85 1c		sta $1c				sta 	codePtr
.1230	90 02		bcc $1234			bcc 	_RELNoCarry
.1232	e6 1d		inc $1d				inc 	codePtr+1
.1234					_RELNoCarry:
.1234					RUNNewLine:
.1234	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1236	9a		txs				txs
.1237	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1239	f0 2f		beq $126a			beq 	Command_END
.123b	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.123d					RUNNewCommand:
.123d	9c 4a 04	stz $044a			stz 	stringInitialised 			; reset string system.
.1240	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.1242	10 1a		bpl $125e			bpl		_RUNNotToken 				; probably an identifier
.1244	c8		iny				iny 								; consume token
.1245	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1247	f0 f4		beq $123d			beq 	RUNNewCommand
.1249	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.124b	b0 0e		bcs $125b			bcs 	_RUNSyntax
.124d	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.124f	90 0a		bcc $125b			bcc 	_RUNSyntax
.1251	0a		asl a				asl 	a 							; double into X.
.1252	aa		tax				tax
.1253	20 58 12	jsr $1258			jsr 	_RUNDispatchMain			; call the main dispatcher
.1256	80 e5		bra $123d			bra 	RUNNewCommand
.1258					_RUNDispatchMain:
.1258	7c 21 19	jmp ($1921,x)			jmp 	(VectorTable,x)
.125b					_RUNSyntax:
.125b	4c ed 1e	jmp $1eed		jmp	ErrorV_syntax
.125e					_RUNNotToken:
.125e	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1260	90 f9		bcc $125b			bcc 	_RUNSyntax
.1262	20 8f 11	jsr $118f			jsr 	CommandLET 					; assignment
.1265	80 d6		bra $123d			bra 	RUNNewCommand 				; loop round.
.1267					Command_Shift_Handler:
.1267	4c 2b 1f	jmp $1f2b		jmp	ErrorV_unimplemented
.126a					Command_END:
.126a	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.126d					Command_STOP:
.126d	4c 88 1f	jmp $1f88		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1270					NoExec01:
.1270					NoExec02:
.1270					NoExec03:
.1270					NoExec04:
.1270					NoExec05:
.1270					NoExec06:
.1270					NoExec07:
.1270	4c ed 1e	jmp $1eed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1273					EXPBinAdd:
.1273	24 0f		bit $0f				bit 	IFR0+IExp
.1275	30 6f		bmi $12e6			bmi 	EXPConcatenate
.1277	a2 10		ldx #$10			ldx 	#IFR1
.1279	4c 91 22	jmp $2291			jmp 	IFloatAdd
.127c					EXPBinSub:
.127c	24 0f		bit $0f				bit 	IFR0+IExp
.127e	30 3f		bmi $12bf			bmi 	EXPTypeError
.1280	a2 10		ldx #$10			ldx 	#IFR1
.1282	4c 8a 22	jmp $228a			jmp 	IFloatSubtract
.1285					EXPBinMul:
.1285	24 0f		bit $0f				bit 	IFR0+IExp
.1287	30 36		bmi $12bf			bmi 	EXPTypeError
.1289	a2 10		ldx #$10			ldx 	#IFR1
.128b	4c 3b 23	jmp $233b			jmp 	IFloatMultiply
.128e					EXPBinFDiv:
.128e	24 0f		bit $0f				bit 	IFR0+IExp
.1290	30 2d		bmi $12bf			bmi 	EXPTypeError
.1292	a2 10		ldx #$10			ldx 	#IFR1
.1294	20 be 25	jsr $25be			jsr 	IFloatDivideFloat
.1297	b0 0f		bcs $12a8			bcs 	EXPDZero
.1299	60		rts				rts
.129a					EXPBinIDiv:
.129a	24 0f		bit $0f				bit 	IFR0+IExp
.129c	30 21		bmi $12bf			bmi 	EXPTypeError
.129e	a2 10		ldx #$10			ldx 	#IFR1
.12a0	20 be 25	jsr $25be			jsr 	IFloatDivideFloat
.12a3	b0 03		bcs $12a8			bcs 	EXPDZero
.12a5	4c 9b 25	jmp $259b			jmp 	IFloatIntegerR0
.12a8					EXPDZero:
.12a8	4c 5f 1f	jmp $1f5f		jmp	ErrorV_divzero
.12ab					EXPBinIMod:
.12ab	24 0f		bit $0f				bit 	IFR0+IExp
.12ad	30 10		bmi $12bf			bmi 	EXPTypeError
.12af	a2 10		ldx #$10			ldx 	#IFR1
.12b1	5a		phy				phy
.12b2	20 d3 24	jsr $24d3			jsr 	IFPreProcessBitwise 		; set up everything.
.12b5	d0 05		bne $12bc			bne 	EXPDRange
.12b7	20 0c 24	jsr $240c			jsr 	IFloatModulusInteger
.12ba	7a		ply				ply
.12bb	60		rts				rts
.12bc					EXPDRange:
.12bc	4c fd 1e	jmp $1efd		jmp	ErrorV_range
.12bf					EXPTypeError:
.12bf	4c 1a 1f	jmp $1f1a		jmp	ErrorV_type
.12c2					EXPBinAnd:
.12c2	24 0f		bit $0f				bit 	IFR0+IExp
.12c4	30 f9		bmi $12bf			bmi 	EXPTypeError
.12c6	a2 10		ldx #$10			ldx 	#IFR1
.12c8	20 8e 24	jsr $248e			jsr 	IFloatBitwiseAnd
.12cb	b0 ef		bcs $12bc			bcs 	EXPDRange
.12cd	60		rts				rts
.12ce					EXPBinOr:
.12ce	24 0f		bit $0f				bit 	IFR0+IExp
.12d0	30 ed		bmi $12bf			bmi 	EXPTypeError
.12d2	a2 10		ldx #$10			ldx 	#IFR1
.12d4	20 a5 24	jsr $24a5			jsr 	IFloatBitwiseOr
.12d7	b0 e3		bcs $12bc			bcs 	EXPDRange
.12d9	60		rts				rts
.12da					EXPBinXor:
.12da	24 0f		bit $0f				bit 	IFR0+IExp
.12dc	30 e1		bmi $12bf			bmi 	EXPTypeError
.12de	a2 10		ldx #$10			ldx 	#IFR1
.12e0	20 bc 24	jsr $24bc			jsr 	IFloatBitwiseXor
.12e3	b0 d7		bcs $12bc			bcs 	EXPDRange
.12e5	60		rts				rts
.12e6					EXPConcatenate:
.12e6	18		clc				clc
.12e7	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.12e9	72 10		adc ($10)			adc 	(IFR1)
.12eb	b0 2d		bcs $131a			bcs 	_EXPCError
.12ed	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.12ef	da		phx				phx
.12f0	a6 0d		ldx $0d				ldx 	IFR0+1
.12f2	da		phx				phx
.12f3	20 09 21	jsr $2109			jsr 	StringTempAllocate 			; allocate string, set up return
.12f6	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.12f8	a5 10		lda $10				lda 	IFR1
.12fa	20 03 13	jsr $1303			jsr 	_EXPCCopyXA
.12fd	fa		plx				plx 								; copy second string
.12fe	68		pla				pla
.12ff	20 03 13	jsr $1303			jsr 	_EXPCCopyXA
.1302	60		rts				rts
.1303					_EXPCCopyXA:
.1303	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.1305	85 1e		sta $1e				sta 	zTemp0
.1307	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1309	f0 0e		beq $1319			beq 	_EXPCCExit 					; nothing.
.130b	aa		tax				tax 								; count
.130c	5a		phy				phy 								; start positioin
.130d	a0 01		ldy #$01			ldy 	#1
.130f					_EXPCCLoop:
.130f	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.1311	20 3e 21	jsr $213e			jsr 	StringTempWrite
.1314	c8		iny				iny
.1315	ca		dex				dex
.1316	d0 f7		bne $130f			bne 	_EXPCCLoop
.1318	7a		ply				ply
.1319					_EXPCCExit:
.1319	60		rts				rts
.131a					_EXPCError:
.131a	4c fb 1f	jmp $1ffb		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.131d					EXPReturnTrue:
.131d	a2 0c		ldx #$0c			ldx 	#IFR0
.131f	a9 01		lda #$01			lda 	#1
.1321	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.1324	20 a6 28	jsr $28a6			jsr 	IFloatNegate
.1327	60		rts				rts
.1328					EXPReturnFalse:
.1328	a2 0c		ldx #$0c			ldx 	#IFR0
.132a	4c 9b 28	jmp $289b			jmp 	IFloatSetZero
.132d					EXPCompareEqual:
.132d	20 63 13	jsr $1363			jsr 	EXPCompareBaseCode
.1330	c9 00		cmp #$00			cmp 	#0
.1332	f0 e9		beq $131d			beq 	EXPReturnTrue
.1334	80 f2		bra $1328			bra 	EXPReturnFalse
.1336					EXPCompareLess:
.1336	20 63 13	jsr $1363			jsr 	EXPCompareBaseCode
.1339	c9 ff		cmp #$ff			cmp 	#$FF
.133b	f0 e0		beq $131d			beq 	EXPReturnTrue
.133d	80 e9		bra $1328			bra 	EXPReturnFalse
.133f					EXPCompareGreater:
.133f	20 63 13	jsr $1363			jsr 	EXPCompareBaseCode
.1342	c9 01		cmp #$01			cmp 	#1
.1344	f0 d7		beq $131d			beq 	EXPReturnTrue
.1346	80 e0		bra $1328			bra 	EXPReturnFalse
.1348					EXPCompareNotEqual:
.1348	20 63 13	jsr $1363			jsr 	EXPCompareBaseCode
.134b	c9 00		cmp #$00			cmp 	#0
.134d	d0 ce		bne $131d			bne 	EXPReturnTrue
.134f	80 d7		bra $1328			bra 	EXPReturnFalse
.1351					EXPCompareLessEqual:
.1351	20 63 13	jsr $1363			jsr 	EXPCompareBaseCode
.1354	c9 01		cmp #$01			cmp 	#1
.1356	d0 c5		bne $131d			bne 	EXPReturnTrue
.1358	80 ce		bra $1328			bra 	EXPReturnFalse
.135a					EXPCompareGreaterEqual:
.135a	20 63 13	jsr $1363			jsr 	EXPCompareBaseCode
.135d	c9 ff		cmp #$ff			cmp 	#$FF
.135f	d0 bc		bne $131d			bne 	EXPReturnTrue
.1361	80 c5		bra $1328			bra 	EXPReturnFalse
.1363					EXPCompareBaseCode:
.1363	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1365	30 10		bmi $1377			bmi 	_EXCBCString
.1367	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1369	20 69 25	jsr $2569			jsr 	IFloatCompare
.136c	a5 0c		lda $0c				lda 	IFR0+IM0
.136e	f0 06		beq $1376			beq 	_EXCBCExit 					; return 0 if zero
.1370	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.1372	50 02		bvc $1376			bvc 	_EXCBCExit
.1374	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1376					_EXCBCExit:
.1376	60		rts				rts
.1377					_EXCBCString:
.1377	5a		phy				phy
.1378	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.137a	d2 10		cmp ($10)			cmp 	(IFR1)
.137c	90 02		bcc $1380			bcc 	_EXCBCSmaller
.137e	b2 10		lda ($10)			lda 	(IFR1)
.1380					_EXCBCSmaller:
.1380	aa		tax				tax
.1381	f0 0d		beq $1390			beq 	_EXCBCMatches 				; if zero common length matches
.1383	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1385					_EXCBCCheckSmallerMatches:
.1385	c8		iny				iny 								; compare directly as far as common length
.1386	38		sec				sec
.1387	b1 10		lda ($10),y			lda 	(IFR1),y
.1389	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.138b	d0 08		bne $1395			bne 	_EXCBCExit2
.138d	ca		dex				dex
.138e	d0 f5		bne $1385			bne 	_EXCBCCheckSmallerMatches
.1390					_EXCBCMatches:
.1390	38		sec				sec
.1391	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.1393	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1395					_EXCBCExit2:
.1395	7a		ply				ply
.1396	c9 00		cmp #$00			cmp 	#0
.1398	f0 04		beq $139e			beq 	_EXCBCReturn
.139a	30 03		bmi $139f			bmi 	_EXCBCFF
.139c	a9 01		lda #$01			lda 	#1
.139e					_EXCBCReturn:
.139e	60		rts				rts
.139f					_EXCBCFF:
.139f	a9 ff		lda #$ff			lda 	#$FF
.13a1	60		rts				rts
.13a2					_EXCBCRange:
.13a2	4c fd 1e	jmp $1efd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13a5					EXPBinLeft:
.13a5	a9 ff		lda #$ff			lda 	#$FF
.13a7	8d 3c 03	sta $033c			sta 	EXPShiftLeftFlag
.13aa	4c b0 13	jmp $13b0			jmp 	EXPShiftCommon
.13ad					EXPBinRight:
.13ad	9c 3c 03	stz $033c			stz 	EXPShiftLeftFlag
.13b0					EXPShiftCommon:
.13b0	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.13b2	05 13		ora $13				ora 	IFR1+IExp
.13b4	29 7f		and #$7f			and 	#$7F
.13b6	d0 35		bne $13ed			bne 	_EXPSRange
.13b8	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.13ba	29 e0		and #$e0			and 	#$E0
.13bc	05 0d		ora $0d				ora 	IFR0+IM1
.13be	05 0e		ora $0e				ora 	IFR0+IM2
.13c0	d0 25		bne $13e7			bne 	_EXPSShiftZero 				; if so return zero
.13c2	5a		phy				phy
.13c3	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.13c5	29 1f		and #$1f			and 	#$1F
.13c7	f0 17		beq $13e0			beq 	_EXPSExit 					; exit if zero
.13c9	a8		tay				tay
.13ca					_EXPSLoop:
.13ca	a2 10		ldx #$10			ldx 	#IFR1
.13cc	2c 3c 03	bit $033c			bit 	EXPShiftLeftFlag
.13cf	30 05		bmi $13d6			bmi 	_EXPSShiftLeft
.13d1	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.13d4	80 07		bra $13dd			bra 	_EXPSContinue
.13d6					_EXPSShiftLeft:
.13d6	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.13d9	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.13db	30 10		bmi $13ed			bmi 	_EXPSRange
.13dd					_EXPSContinue:
.13dd	88		dey				dey
.13de	d0 ea		bne $13ca			bne 	_EXPSLoop
.13e0					_EXPSExit:
.13e0	a2 10		ldx #$10			ldx 	#IFR1
.13e2	20 2c 28	jsr $282c			jsr 	IFloatCopyFromRegister
.13e5	7a		ply				ply
.13e6	60		rts				rts
.13e7					_EXPSShiftZero:
.13e7	a2 0c		ldx #$0c			ldx 	#IFR0
.13e9	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.13ec	60		rts				rts
.13ed					_EXPSRange:
.13ed	4c fd 1e	jmp $1efd		jmp	ErrorV_range
.033c					EXPShiftLeftFlag:
>033c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.13f0					EXPEvaluateExpression:
.13f0	a9 00		lda #$00			lda 	#0 							; current precedence
.13f2					EXPEvaluateExpressionPrecedenceA:
.13f2	48		pha				pha
.13f3	20 6d 14	jsr $146d			jsr 	EXPTermValueR0				; do first term.
.13f6					_EELoop:
.13f6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.13f8	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.13fa	90 31		bcc $142d			bcc 	_EEExit
.13fc	aa		tax				tax 								; access the precedence of the operator.
.13fd	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.13fe	dd 85 16	cmp $1685,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1401	b0 2b		bcs $142e			bcs 	_EEExit2
.1403	48		pha				pha 								; save current precedence.
.1404	da		phx				phx 								; save operator
.1405	c8		iny				iny 								; consume operator
.1406	da		phx				phx
.1407	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1409	20 ea 27	jsr $27ea			jsr 	IFloatPushRx
.140c	fa		plx				plx
.140d	bd 85 16	lda $1685,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1410	20 f2 13	jsr $13f2			jsr 	EXPEvaluateExpressionPrecedenceA
.1413	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.1415	20 0b 28	jsr $280b			jsr 	IFloatPullRx
.1418	fa		plx				plx 								; operator
.1419	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.141b	45 13		eor $13				eor 	IFR1+IExp
.141d	30 08		bmi $1427			bmi 	_EEType
.141f					_EETypeOkay:
.141f	8a		txa				txa
.1420	0a		asl a				asl 	a 							; double -> X
.1421	aa		tax				tax
.1422	20 2a 14	jsr $142a			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1425	80 cf		bra $13f6			bra 	_EELoop
.1427					_EEType:
.1427	4c 1a 1f	jmp $1f1a		jmp	ErrorV_type
.142a					_EECallBinary:
.142a	7c 21 19	jmp ($1921,x)			jmp 	(VectorTable,x)
.142d					_EEExit:
.142d	68		pla				pla 								; throw precedence
.142e					_EEExit2:
.142e	18		clc				clc
.142f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1430					EXPEvalNumber:
.1430	20 f0 13	jsr $13f0			jsr 	EXPEvaluateExpression
.1433	24 0f		bit $0f				bit 	IFR0+IExp
.1435	30 01		bmi $1438			bmi 	EVUType
.1437	60		rts				rts
.1438					EVUType:
.1438	4c 1a 1f	jmp $1f1a		jmp	ErrorV_type
.143b					EXPEvalInteger:
.143b	20 30 14	jsr $1430			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.143e	20 9b 25	jsr $259b			jsr 	IFloatIntegerR0
.1441	60		rts				rts
.1442					EXPEvalInteger16:
.1442	20 3b 14	jsr $143b			jsr 	EXPEvalInteger
.1445	a5 0e		lda $0e				lda 	IFR0+IM2
.1447	d0 21		bne $146a			bne 	EVURange
.1449	a6 0d		ldx $0d				ldx 	IFR0+IM1
.144b	a5 0c		lda $0c				lda 	IFR0+IM0
.144d	60		rts				rts
.144e					EXPEvalInteger8:
.144e	20 3b 14	jsr $143b			jsr 	EXPEvalInteger
.1451	a5 0e		lda $0e				lda 	IFR0+IM2
.1453	05 0d		ora $0d				ora 	IFR0+IM1
.1455	d0 13		bne $146a			bne 	EVURange
.1457	a5 0c		lda $0c				lda 	IFR0+IM0
.1459	60		rts				rts
.145a					EXPEvalString:
.145a	20 f0 13	jsr $13f0			jsr 	EXPEvaluateExpression
.145d	24 0f		bit $0f				bit 	IFR0+IExp
.145f	10 d7		bpl $1438			bpl 	EVUType
.1461	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1463	86 1f		stx $1f				stx 	zTemp0+1
.1465	a5 0c		lda $0c				lda 	IFR0+IM0
.1467	85 1e		sta $1e				sta 	zTemp0
.1469	60		rts				rts
.146a					EVURange:
.146a	4c fd 1e	jmp $1efd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.146d					EXPTermValueR0:
.146d	20 b8 14	jsr $14b8			jsr 	EXPTermR0 					; get term
.1470	90 45		bcc $14b7			bcc 	_ETVNotReference 			; exit if value.
.1472	5a		phy				phy
.1473	a0 03		ldy #$03			ldy 	#3 							; get type
.1475	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1477	30 14		bmi $148d			bmi 	_ETVDereferenceString
.1479	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.147b	88		dey				dey
.147c	b1 0c		lda ($0c),y			lda 	(IFR0),y
.147e	85 0e		sta $0e				sta 	IFR0+IM2
.1480	88		dey				dey
.1481	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1483	aa		tax				tax
.1484	b2 0c		lda ($0c)			lda 	(IFR0)
.1486	86 0d		stx $0d				stx 	IFR0+IM1
.1488	85 0c		sta $0c				sta 	IFR0+IM0
.148a	7a		ply				ply
.148b	18		clc				clc
.148c	60		rts				rts
.148d					_ETVDereferenceString:
.148d	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.148f	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1491	12 0c		ora ($0c)			ora 	(IFR0)
.1493	f0 11		beq $14a6			beq 	_ETVNull
.1495	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.1497	aa		tax				tax
.1498	b2 0c		lda ($0c)			lda 	(IFR0)
.149a	18		clc				clc 								; add two so points to actual string.
.149b	69 02		adc #$02			adc 	#2
.149d	90 01		bcc $14a0			bcc 	_EVDSNoCarry
.149f	e8		inx				inx
.14a0					_EVDSNoCarry:
.14a0	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.14a2	85 0c		sta $0c				sta 	IFR0
.14a4	80 08		bra $14ae			bra 	_ETVFillExit 				; tidy up and exit.
.14a6					_ETVNull:
.14a6	a9 b6		lda #$b6			lda 	#_EVTNString & $FF
.14a8	85 0c		sta $0c				sta 	IFR0+IM0
.14aa	a9 14		lda #$14			lda 	#_EVTNString >> 8
.14ac	85 0d		sta $0d				sta 	IFR0+IM1
.14ae					_ETVFillExit:
.14ae	64 0e		stz $0e				stz 	IFR0+IM2
.14b0	a9 80		lda #$80			lda 	#$80
.14b2	85 0f		sta $0f				sta 	IFR0+IExp
.14b4	7a		ply				ply
.14b5	60		rts				rts
.14b6					_EVTNString:
>14b6	00						.byte 	0
.14b7					_ETVNotReference:
.14b7	60		rts				rts
.14b8					EXPTermR0:
.14b8	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.14ba	30 10		bmi $14cc			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.14bc	c8		iny				iny 								; consume element
.14bd	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.14bf	b0 08		bcs $14c9			bcs 	_ETMIdentifier
.14c1	20 f0 14	jsr $14f0			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.14c4	20 23 15	jsr $1523			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.14c7	18		clc				clc 								; return value
.14c8	60		rts				rts
.14c9					_ETMIdentifier:
.14c9	4c 43 22	jmp $2243			jmp 	VARCheckSimple 				; check simple variables A-Z
.14cc					_ETMIsUnaryOrMinus:
.14cc	c8		iny				iny 								; consume element
.14cd	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.14cf	d0 0a		bne $14db			bne 	_ETMCheckUnary
.14d1	20 6d 14	jsr $146d			jsr 	EXPTermValueR0 				; get a term to negate
.14d4	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.14d6	20 a6 28	jsr $28a6			jsr 	IFloatNegate
.14d9	18		clc				clc
.14da	60		rts				rts
.14db					_ETMCheckUnary:
.14db	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.14dd	90 0e		bcc $14ed			bcc 	_ETMUnarySyntax
.14df	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.14e1	b0 0a		bcs $14ed			bcs 	_ETMUnarySyntax
.14e3	0a		asl a				asl 	a
.14e4	aa		tax				tax
.14e5	20 ea 14	jsr $14ea			jsr 	_ETMCallUnaryFunction
.14e8	18		clc				clc
.14e9	60		rts				rts
.14ea					_ETMCallUnaryFunction:
.14ea	7c 21 19	jmp ($1921,x)			jmp 	(VectorTable,x)
.14ed					_ETMUnarySyntax:
.14ed	4c ed 1e	jmp $1eed		jmp	ErrorV_syntax
.14f0					EXPExtractTokenisedInteger:
.14f0	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.14f2	64 0f		stz $0f				stz 	IFR0+IExp
.14f4	64 0d		stz $0d				stz 	IFR0+IM1
.14f6	64 0e		stz $0e				stz 	IFR0+IM2
.14f8					_ETMConstant:
.14f8	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.14fa	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.14fc	b0 24		bcs $1522			bcs 	_ETMCExit 					; no.
.14fe	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1500	a5 0d		lda $0d				lda 	IFR0+IM1
.1502	85 0e		sta $0e				sta 	IFR0+IM2
.1504	a5 0c		lda $0c				lda 	IFR0+IM0
.1506	85 0d		sta $0d				sta 	IFR0+IM1
.1508	64 0c		stz $0c				stz 	IFR0+IM0
.150a	8a		txa				txa
.150b	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.150c	66 0e		ror $0e				ror 	IFR0+IM2
.150e	66 0d		ror $0d				ror 	IFR0+IM1
.1510	66 0c		ror $0c				ror 	IFR0+IM0
.1512	4a		lsr a				lsr 	a
.1513	66 0e		ror $0e				ror 	IFR0+IM2
.1515	66 0d		ror $0d				ror 	IFR0+IM1
.1517	66 0c		ror $0c				ror 	IFR0+IM0
.1519	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.151b	11 1c		ora ($1c),y			ora 	(codePtr),y
.151d	85 0c		sta $0c				sta 	IFR0+IM0
.151f	c8		iny				iny 								; consume, loop back
.1520	80 d6		bra $14f8			bra 	_ETMConstant
.1522					_ETMCExit:
.1522	60		rts				rts
.1523					EXPCheckDecimalFollows:
.1523	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.1525	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1527	d0 19		bne $1542			bne 	_ETMCDExit
.1529	c8		iny				iny 								; consume token.
.152a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.152c	5a		phy				phy									; save current position
.152d	48		pha				pha 								; save count of chars.
.152e	38		sec				sec 								; address into YX : y + codePtr+1
.152f	98		tya				tya
.1530	65 1c		adc $1c				adc 	codePtr
.1532	aa		tax				tax
.1533	a5 1d		lda $1d				lda 	codePtr+1
.1535	69 00		adc #$00			adc 	#0
.1537	a8		tay				tay
.1538	68		pla				pla 								; get count.
.1539	20 3f 27	jsr $273f			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.153c	7a		ply				ply 								; go to next token.
.153d	98		tya				tya
.153e	38		sec				sec
.153f	71 1c		adc ($1c),y			adc 	(codePtr),y
.1541	a8		tay				tay
.1542					_ETMCDExit:
.1542	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1543					EXPUnaryAbs:
.1543	20 30 14	jsr $1430			jsr 	EXPEvalNumber 					; number to R0
.1546	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.1549	20 df 24	jsr $24df			jsr 	IFloatAbsoluteR0
.154c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.154d					EXPUnaryAsc:
.154d	20 5a 14	jsr $145a			jsr 	EXPEvalString 					; string to R0, zTemp0
.1550	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.1553	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.1555	f0 06		beq $155d			beq 	_EXAZero 						; if so return 0
.1557	5a		phy				phy 									; otherwise get first character
.1558	a0 01		ldy #$01			ldy 	#1
.155a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.155c	7a		ply				ply
.155d					_EXAZero:
.155d	a2 0c		ldx #$0c			ldx 	#IFR0
.155f	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.1562	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1563					EXPUnaryChr:
.1563	20 4e 14	jsr $144e			jsr 	EXPEvalInteger8 				; expr
.1566	48		pha				pha 									; push on stack
.1567	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.156a	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.156c	20 09 21	jsr $2109			jsr 	StringTempAllocate
.156f	68		pla				pla
.1570	20 3e 21	jsr $213e			jsr 	StringTempWrite
.1573	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1574					EXPUnaryDec:
.1574	20 5a 14	jsr $145a			jsr 	EXPEvalString 					; string to R0, zTemp0
.1577	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.157a	5a		phy				phy
.157b	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.157d	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.1580	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.1582	f0 3b		beq $15bf			beq 	_EUDError 						; empty string
.1584	aa		tax				tax
.1585	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1587					_EUDLoop:
.1587	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1589	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.158b	90 02		bcc $158f			bcc 	_EUDNoCase
.158d	e9 20		sbc #$20			sbc 	#$20
.158f					_EUDNoCase:
.158f	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1591	90 2c		bcc $15bf			bcc 	_EUDError
.1593	c9 3a		cmp #$3a			cmp 	#'9'+1
.1595	90 0a		bcc $15a1			bcc 	_EUDOkay
.1597	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1599	90 24		bcc $15bf			bcc 	_EUDError
.159b	c9 47		cmp #$47			cmp 	#'F'+1
.159d	b0 20		bcs $15bf			bcs 	_EUDError
.159f	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.15a1					_EUDOkay:
.15a1	29 0f		and #$0f			and 	#15 							; make constant
.15a3	da		phx				phx
.15a4	48		pha				pha
.15a5	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.15a7	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.15aa	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.15ad	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.15b0	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.15b3	68		pla				pla 									; pop constant and OR in
.15b4	fa		plx				plx
.15b5	05 0c		ora $0c				ora 	IFR0+IM0
.15b7	85 0c		sta $0c				sta 	IFR0+IM0
.15b9	c8		iny				iny 									; next
.15ba	ca		dex				dex
.15bb	d0 ca		bne $1587			bne 	_EUDLoop
.15bd	7a		ply				ply
.15be	60		rts				rts
.15bf					_EUDError:
.15bf	4c 0d 1f	jmp $1f0d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.15c2					EXPUnaryInlineDec:
.15c2	4c ed 1e	jmp $1eed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.15c5					EXPUnaryNull:
.15c5	20 6d 14	jsr $146d			jsr 	EXPTermValueR0
.15c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.15c9					EXPUnaryFrac:
.15c9	20 30 14	jsr $1430			jsr 	EXPEvalNumber 					; number to R0
.15cc	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.15cf	20 45 25	jsr $2545			jsr 	IFloatFractionalR0
.15d2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.15d3					EXPUnaryInt:
.15d3	20 30 14	jsr $1430			jsr 	EXPEvalNumber 					; number to R0
.15d6	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.15d9	20 9b 25	jsr $259b			jsr 	IFloatIntegerR0
.15dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.15dd					EXPUnaryLen:
.15dd	20 5a 14	jsr $145a			jsr 	EXPEvalString 					; string to R0, zTemp0
.15e0	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.15e3	b2 1e		lda ($1e)			lda 	(zTemp0)
.15e5	a2 0c		ldx #$0c			ldx 	#IFR0
.15e7	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.15ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.15eb					EXPUnaryParenthesis:
.15eb	20 30 14	jsr $1430			jsr 	EXPEvalNumber 					; number to R0
.15ee	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.15f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.15f2					EXPUnaryRnd:
.15f2	20 30 14	jsr $1430			jsr 	EXPEvalNumber 				; number to R0
.15f5	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 				; )
.15f8	a2 0c		ldx #$0c			ldx 	#IFR0
.15fa	20 11 16	jsr $1611			jsr 	EXPLoadInRandom
.15fd	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.15ff	85 0f		sta $0f				sta 	IFR0+IExp
.1601	60		rts				rts
.1602					ExpUnaryRand:
.1602	20 3b 14	jsr $143b			jsr 	EXPEvalInteger 				; integer to R0
.1605	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 				; )
.1608	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.160a	20 11 16	jsr $1611			jsr 	EXPLoadInRandom
.160d	20 0c 24	jsr $240c			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1610	60		rts				rts
.1611					EXPLoadInRandom:
.1611	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.1614	20 26 16	jsr $1626			jsr 	EXPRandom32
.1617	95 00		sta $00,x			sta 	IM0,x
.1619	20 26 16	jsr $1626			jsr 	EXPRandom32
.161c	95 01		sta $01,x			sta 	IM1,x
.161e	20 26 16	jsr $1626			jsr 	EXPRandom32
.1621	29 7f		and #$7f			and 	#$7F
.1623	95 02		sta $02,x			sta 	IM2,x
.1625	60		rts				rts
.1626					EXPRandom32:
.1626	5a		phy				phy
.1627	a0 08		ldy #$08			ldy 	#8
.1629	ad 3d 03	lda $033d			lda 	EXPSeed+0
.162c	0d 3e 03	ora $033e			ora 	EXPSeed+1
.162f	0d 3f 03	ora $033f			ora 	EXPSeed+2
.1632	0d 40 03	ora $0340			ora 	EXPSeed+3
.1635	d0 08		bne $163f			bne 	_EXPRNoReset
.1637	ee 3d 03	inc $033d			inc 	EXPSeed+0
.163a	a0 10		ldy #$10			ldy 	#16
.163c	8c 40 03	sty $0340			sty 	EXPSeed+3
.163f					_EXPRNoReset:
.163f	ad 3d 03	lda $033d			lda 	EXPSeed+0
.1642					_EXPRLoop:
.1642	0a		asl a				asl		a
.1643	2e 3e 03	rol $033e			rol 	EXPSeed+1
.1646	2e 3f 03	rol $033f			rol 	EXPSeed+2
.1649	2e 40 03	rol $0340			rol 	EXPSeed+3
.164c	90 02		bcc $1650			bcc 	_EXPRNoEOR
.164e	49 c5		eor #$c5			eor 	#$C5
.1650					_EXPRNoEOR:
.1650	88		dey				dey
.1651	d0 ef		bne $1642			bne 	_EXPRLoop
.1653	8d 3d 03	sta $033d			sta 	EXPSeed+0
.1656	7a		ply				ply
.1657	60		rts				rts
.033d					EXPSeed:
>033d							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1658					EXPUnarySgn:
.1658	20 30 14	jsr $1430			jsr 	EXPEvalNumber 					; number to R0
.165b	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.165e	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.1660	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister
.1663	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1665	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.1668	a2 10		ldx #$10			ldx 	#IFR1
.166a	20 69 25	jsr $2569			jsr 	IFloatCompare 					; compare R1 vs 0.
.166d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.166e					EXPUnarySqr:
.166e	20 30 14	jsr $1430			jsr 	EXPEvalNumber 					; number to R0
.1671	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.1674	20 e7 24	jsr $24e7			jsr 	IFloatSquareRootR0 				; square root.
.1677	b0 01		bcs $167a			bcs 	_EUSValue
.1679	60		rts				rts
.167a					_EUSValue:
.167a	4c fd 1e	jmp $1efd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.167d					EXPUnaryHex:
.167d	20 3b 14	jsr $143b			jsr 	EXPEvalInteger 					; expr
.1680	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.1683	5a		phy				phy
.1684	a9 10		lda #$10			lda 	#16
.1686	20 3c 26	jsr $263c			jsr 	IFloatIntegerToStringR0
.1689	80 0a		bra $1695			bra 	EUSMain
.168b					EXPUnaryStr:
.168b	20 30 14	jsr $1430			jsr 	EXPEvalNumber 					; expr
.168e	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.1691	5a		phy				phy
.1692	20 98 26	jsr $2698			jsr 	IFloatFloatToStringR0 			; convert to string
.1695					EUSMain:
.1695	b0 18		bcs $16af			bcs 	_EUSError
.1697	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1699	84 1f		sty $1f				sty 	zTemp0+1
.169b	48		pha				pha 									; save count
.169c	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.169e	20 09 21	jsr $2109			jsr 	StringTempAllocate
.16a1	fa		plx				plx 									; count in X
.16a2	a0 00		ldy #$00			ldy 	#0
.16a4					_EUSCopy:
.16a4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.16a6	c8		iny				iny
.16a7	20 3e 21	jsr $213e			jsr 	StringTempWrite
.16aa	ca		dex				dex
.16ab	d0 f7		bne $16a4			bne	 	_EUSCopy
.16ad	7a		ply				ply
.16ae	60		rts				rts
.16af					_EUSError:
.16af	4c fd 1e	jmp $1efd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.16b2					EXPUnaryInlineString:
.16b2	18		clc				clc 								; physical address -> IM0,1
.16b3	98		tya				tya
.16b4	65 1c		adc $1c				adc 	codePtr
.16b6	85 0c		sta $0c				sta 	IFR0+IM0
.16b8	a5 1d		lda $1d				lda 	codePtr+1
.16ba	69 00		adc #$00			adc 	#0
.16bc	85 0d		sta $0d				sta 	IFR0+IM1
.16be	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.16c0	a9 80		lda #$80			lda 	#$80
.16c2	85 0f		sta $0f				sta 	IFR0+IExp
.16c4	98		tya				tya	 								; skip over it.
.16c5	38		sec				sec
.16c6	71 1c		adc ($1c),y			adc 	(codePtr),y
.16c8	a8		tay				tay
.16c9	60		rts				rts
.16ca					_EXPUISRange:
.16ca	4c fd 1e	jmp $1efd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.16cd					EXPUnaryLeft:
.16cd	20 13 17	jsr $1713			jsr 	EXPCommonStart 					; <string>,
.16d0	48		pha				pha 									; save string address on stack
.16d1	da		phx				phx
.16d2	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.16d4	48		pha				pha
.16d5	20 4e 14	jsr $144e			jsr 	EXPEvalInteger8 				; characters to do
.16d8	80 44		bra $171e			bra 	EXPSubstringCommon
.16da					EXPUnaryRight:
.16da	20 13 17	jsr $1713			jsr 	EXPCommonStart 					; <string>,
.16dd	48		pha				pha 									; save string address on stack
.16de	da		phx				phx
.16df	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.16e1	48		pha				pha
.16e2	20 4e 14	jsr $144e			jsr 	EXPEvalInteger8 				; characters to do
.16e5	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.16e7	68		pla				pla
.16e8	38		sec				sec
.16e9	e5 1e		sbc $1e				sbc 	zTemp0
.16eb	b0 02		bcs $16ef			bcs 	_EUROffLeft
.16ed	a9 00		lda #$00			lda 	#0
.16ef					_EUROffLeft:
.16ef	48		pha				pha 									; start pos
.16f0	a9 ff		lda #$ff			lda 	#255
.16f2	80 2a		bra $171e			bra 	EXPSubstringCommon
.16f4					EXPUnaryMid:
.16f4	20 13 17	jsr $1713			jsr 	EXPCommonStart 					; <string>,
.16f7	48		pha				pha 									; save string address on stack
.16f8	da		phx				phx
.16f9	20 4e 14	jsr $144e			jsr 	EXPEvalInteger8 				; characters start
.16fc	f0 12		beq $1710			beq 	_EUSError 						; 1 is left
.16fe	3a		dec a				dec 	a 								; zero based.
.16ff	48		pha				pha
.1700	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1702	c9 99		cmp #$99			cmp 	#PR_COMMA
.1704	f0 04		beq $170a			beq 	_EUMLength 						; if so m is provided
.1706	a9 ff		lda #$ff			lda 	#255 							; default m
.1708	80 14		bra $171e			bra 	EXPSubstringCommon
.170a					_EUMLength:
.170a	c8		iny				iny 									; consume comma
.170b	20 4e 14	jsr $144e			jsr 	EXPEvalInteger8 				; characters to do
.170e	80 0e		bra $171e			bra 	EXPSubstringCommon
.1710					_EUSError:
.1710	4c 0d 1f	jmp $1f0d		jmp	ErrorV_value
.1713					EXPCommonStart:
.1713	20 5a 14	jsr $145a			jsr 	EXPEvalString
.1716	20 34 20	jsr $2034			jsr 	ERRCheckComma
.1719	a5 0c		lda $0c				lda 	IFR0+IM0
.171b	a6 0d		ldx $0d				ldx 	IFR0+IM1
.171d	60		rts				rts
.171e					EXPSubstringCommon:
.171e	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.1720	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; check right bracket.
.1723	68		pla				pla 									; start position
.1724	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1726	fa		plx				plx 									; get string address to zTemp2.
.1727	86 23		stx $23				stx 	zTemp2+1
.1729	68		pla				pla
.172a	85 22		sta $22				sta 	zTemp2
.172c	38		sec				sec 									; length - start is the max count of chars
.172d	b2 22		lda ($22)			lda 	(zTemp2)
.172f	e5 21		sbc $21				sbc 	zTemp1+1
.1731	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.1733	b0 02		bcs $1737			bcs 	_EXPSSNoTrim
.1735	85 20		sta $20				sta 	zTemp1 							; update count with available
.1737					_EXPSSNoTrim:
.1737	a5 20		lda $20				lda 	zTemp1 							; chars required.
.1739	20 09 21	jsr $2109			jsr 	StringTempAllocate 				; allocate memory for it.
.173c	a5 20		lda $20				lda 	zTemp1 							; zero length string
.173e	f0 15		beq $1755			beq 	_EXPSSExit
.1740	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1742	d2 22		cmp ($22)			cmp 	(zTemp2)
.1744	b0 0f		bcs $1755			bcs 	_EXPSSExit
.1746	5a		phy				phy
.1747	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.1749	c8		iny				iny 									; +1 for the length byte
.174a					_EXPSSCopy:
.174a	b1 22		lda ($22),y			lda 	(zTemp2),y
.174c	20 3e 21	jsr $213e			jsr 	StringTempWrite
.174f	c8		iny				iny
.1750	c6 20		dec $20				dec 	zTemp1
.1752	d0 f6		bne $174a			bne 	_EXPSSCopy
.1754	7a		ply				ply
.1755					_EXPSSExit:
.1755	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1756					EXPUnaryVal:
.1756	20 5a 14	jsr $145a			jsr 	EXPEvalString 					; string to R0, zTemp0
.1759	20 2c 20	jsr $202c			jsr 	ERRCheckRParen 					; )
.175c	5a		phy				phy
.175d	18		clc				clc
.175e	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1760	69 01		adc #$01			adc 	#1
.1762	aa		tax				tax
.1763	a5 1f		lda $1f				lda 	zTemp0+1
.1765	69 00		adc #$00			adc 	#0
.1767	a8		tay				tay
.1768	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.176a	20 ff 26	jsr $26ff			jsr 	IFloatStringToFloatR0 			; do conversion
.176d	b0 02		bcs $1771			bcs 	_EUVError
.176f	7a		ply				ply
.1770	60		rts				rts
.1771					_EUVError:
.1771	4c 0d 1f	jmp $1f0d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1774					BinaryPrecedence:
>1774	02					.byte	 2	; $ef =
>1775	02					.byte	 2	; $f0 <>
>1776	02					.byte	 2	; $f1 <=
>1777	02					.byte	 2	; $f2 <
>1778	02					.byte	 2	; $f3 >=
>1779	02					.byte	 2	; $f4 >
>177a	01					.byte	 1	; $f5 XOR
>177b	01					.byte	 1	; $f6 OR
>177c	01					.byte	 1	; $f7 AND
>177d	04					.byte	 4	; $f8 DIV
>177e	04					.byte	 4	; $f9 MOD
>177f	04					.byte	 4	; $fa <<
>1780	04					.byte	 4	; $fb >>
>1781	04					.byte	 4	; $fc /
>1782	04					.byte	 4	; $fd *
>1783	03					.byte	 3	; $fe -
>1784	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1785					StandardTokens:
>1785	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>178c	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1792	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1798	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>179d	02 49 46				.byte	$02,$49,$46                             	; $84 if
>17a0	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>17a6	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>17a9	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>17ae	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>17b3	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>17bb	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>17bf	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>17c4	00					.byte	$00                                     	; $8c [[end]]
>17c5	00					.byte	$00                                     	; $8d [[shift]]
>17c6	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>17cb	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>17d0	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>17d3	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>17d8	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>17dc	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>17e2	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>17e8	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>17ed	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>17f1	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>17f5	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>17fa	01 2c					.byte	$01,$2c                                 	; $99 ,
>17fc	01 3b					.byte	$01,$3b                                 	; $9a ;
>17fe	01 3a					.byte	$01,$3a                                 	; $9b :
>1800	01 27					.byte	$01,$27                                 	; $9c '
>1802	01 29					.byte	$01,$29                                 	; $9d )
>1804	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1808	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>180e	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1812	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1816	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>181b	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>181f	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1826	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>182b	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1830	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1835	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>183a	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>183f	00					.byte	0											; $aa
>1840	00					.byte	0											; $ab
>1841	00					.byte	0											; $ac
>1842	00					.byte	0											; $ad
>1843	00					.byte	0											; $ae
>1844	00					.byte	0											; $af
>1845	00					.byte	0											; $b0
>1846	00					.byte	0											; $b1
>1847	00					.byte	0											; $b2
>1848	00					.byte	0											; $b3
>1849	00					.byte	0											; $b4
>184a	00					.byte	0											; $b5
>184b	00					.byte	0											; $b6
>184c	00					.byte	0											; $b7
>184d	00					.byte	0											; $b8
>184e	00					.byte	0											; $b9
>184f	00					.byte	0											; $ba
>1850	00					.byte	0											; $bb
>1851	00					.byte	0											; $bc
>1852	00					.byte	0											; $bd
>1853	00					.byte	0											; $be
>1854	00					.byte	0											; $bf
>1855	00					.byte	0											; $c0
>1856	00					.byte	0											; $c1
>1857	00					.byte	0											; $c2
>1858	00					.byte	0											; $c3
>1859	00					.byte	0											; $c4
>185a	00					.byte	0											; $c5
>185b	00					.byte	0											; $c6
>185c	00					.byte	0											; $c7
>185d	00					.byte	0											; $c8
>185e	00					.byte	0											; $c9
>185f	00					.byte	0											; $ca
>1860	00					.byte	0											; $cb
>1861	00					.byte	0											; $cc
>1862	00					.byte	0											; $cd
>1863	00					.byte	0											; $ce
>1864	00					.byte	0											; $cf
>1865	00					.byte	0											; $d0
>1866	00					.byte	0											; $d1
>1867	00					.byte	0											; $d2
>1868	00					.byte	0											; $d3
>1869	00					.byte	0											; $d4
>186a	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1870	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1876	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>187e	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1885	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>188b	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1891	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1896	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>189b	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>18a0	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>18a5	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>18aa	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>18b0	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>18b5	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>18bd	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>18c4	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>18c9	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>18ce	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>18d4	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>18d9	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>18df	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>18e4	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>18ea	01 28					.byte	$01,$28                                 	; $eb (
>18ec	01 24					.byte	$01,$24                                 	; $ec $
>18ee	00					.byte	$00                                     	; $ed [[decimal]]
>18ef	00					.byte	$00                                     	; $ee [[string]]
>18f0	01 3d					.byte	$01,$3d                                 	; $ef =
>18f2	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>18f5	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>18f8	01 3c					.byte	$01,$3c                                 	; $f2 <
>18fa	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>18fd	01 3e					.byte	$01,$3e                                 	; $f4 >
>18ff	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1903	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1906	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>190a	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>190e	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1912	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1915	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1918	01 2f					.byte	$01,$2f                                 	; $fc /
>191a	01 2a					.byte	$01,$2a                                 	; $fd *
>191c	01 2d					.byte	$01,$2d                                 	; $fe -
>191e	01 2b					.byte	$01,$2b                                 	; $ff +
>1920	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1921					VectorTable:
>1921	79 29					.word	NotImplemented           ; $80 REPEAT
>1923	79 29					.word	NotImplemented           ; $81 UNTIL
>1925	79 29					.word	NotImplemented           ; $82 WHILE
>1927	79 29					.word	NotImplemented           ; $83 WEND
>1929	79 29					.word	NotImplemented           ; $84 IF
>192b	79 29					.word	NotImplemented           ; $85 ENDIF
>192d	79 29					.word	NotImplemented           ; $86 DO
>192f	79 29					.word	NotImplemented           ; $87 LOOP
>1931	79 29					.word	NotImplemented           ; $88 PROC
>1933	79 29					.word	NotImplemented           ; $89 ENDPROC
>1935	79 29					.word	NotImplemented           ; $8a FOR
>1937	79 29					.word	NotImplemented           ; $8b NEXT
>1939	29 12					.word	RUNEndOfLine             ; $8c [[END]]
>193b	67 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>193d	79 29					.word	NotImplemented           ; $8e ELSE
>193f	70 12					.word	NoExec01                 ; $8f THEN
>1941	70 12					.word	NoExec02                 ; $90 TO
>1943	70 12					.word	NoExec03                 ; $91 STEP
>1945	8f 11					.word	CommandLET               ; $92 LET
>1947	2a 11					.word	Command_Print            ; $93 PRINT
>1949	79 29					.word	NotImplemented           ; $94 INPUT
>194b	79 29					.word	NotImplemented           ; $95 CALL
>194d	79 29					.word	NotImplemented           ; $96 SYS
>194f	10 12					.word	Command_REM              ; $97 REM
>1951	79 29					.word	NotImplemented           ; $98 EXIT
>1953	70 12					.word	NoExec04                 ; $99 ,
>1955	70 12					.word	NoExec05                 ; $9a ;
>1957	70 12					.word	NoExec06                 ; $9b :
>1959	10 12					.word	Command_REM2             ; $9c '
>195b	70 12					.word	NoExec07                 ; $9d )
>195d	58 10					.word	CommandDIM               ; $9e DIM
>195f	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1961	07 12					.word	Command_NEW              ; $a0 NEW
>1963	1d 12					.word	Command_RUN              ; $a1 RUN
>1965	6d 12					.word	Command_STOP             ; $a2 STOP
>1967	6a 12					.word	Command_END              ; $a3 END
>1969	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>196b	79 29					.word	NotImplemented           ; $a5 LIST
>196d	79 29					.word	NotImplemented           ; $a6 SAVE
>196f	79 29					.word	NotImplemented           ; $a7 LOAD
>1971	79 29					.word	NotImplemented           ; $a8 POKE
>1973	79 29					.word	NotImplemented           ; $a9 DOKE
>1975	79 29					.word	NotImplemented           ; $aa
>1977	79 29					.word	NotImplemented           ; $ab
>1979	79 29					.word	NotImplemented           ; $ac
>197b	79 29					.word	NotImplemented           ; $ad
>197d	79 29					.word	NotImplemented           ; $ae
>197f	79 29					.word	NotImplemented           ; $af
>1981	79 29					.word	NotImplemented           ; $b0
>1983	79 29					.word	NotImplemented           ; $b1
>1985	79 29					.word	NotImplemented           ; $b2
>1987	79 29					.word	NotImplemented           ; $b3
>1989	79 29					.word	NotImplemented           ; $b4
>198b	79 29					.word	NotImplemented           ; $b5
>198d	79 29					.word	NotImplemented           ; $b6
>198f	79 29					.word	NotImplemented           ; $b7
>1991	79 29					.word	NotImplemented           ; $b8
>1993	79 29					.word	NotImplemented           ; $b9
>1995	79 29					.word	NotImplemented           ; $ba
>1997	79 29					.word	NotImplemented           ; $bb
>1999	79 29					.word	NotImplemented           ; $bc
>199b	79 29					.word	NotImplemented           ; $bd
>199d	79 29					.word	NotImplemented           ; $be
>199f	79 29					.word	NotImplemented           ; $bf
>19a1	79 29					.word	NotImplemented           ; $c0
>19a3	79 29					.word	NotImplemented           ; $c1
>19a5	79 29					.word	NotImplemented           ; $c2
>19a7	79 29					.word	NotImplemented           ; $c3
>19a9	79 29					.word	NotImplemented           ; $c4
>19ab	79 29					.word	NotImplemented           ; $c5
>19ad	79 29					.word	NotImplemented           ; $c6
>19af	79 29					.word	NotImplemented           ; $c7
>19b1	79 29					.word	NotImplemented           ; $c8
>19b3	79 29					.word	NotImplemented           ; $c9
>19b5	79 29					.word	NotImplemented           ; $ca
>19b7	79 29					.word	NotImplemented           ; $cb
>19b9	79 29					.word	NotImplemented           ; $cc
>19bb	79 29					.word	NotImplemented           ; $cd
>19bd	79 29					.word	NotImplemented           ; $ce
>19bf	79 29					.word	NotImplemented           ; $cf
>19c1	79 29					.word	NotImplemented           ; $d0
>19c3	79 29					.word	NotImplemented           ; $d1
>19c5	79 29					.word	NotImplemented           ; $d2
>19c7	79 29					.word	NotImplemented           ; $d3
>19c9	79 29					.word	NotImplemented           ; $d4
>19cb	79 29					.word	NotImplemented           ; $d5 DEEK(
>19cd	79 29					.word	NotImplemented           ; $d6 PEEK(
>19cf	da 16					.word	EXPUnaryRight            ; $d7 RIGHT$(
>19d1	cd 16					.word	EXPUnaryLeft             ; $d8 LEFT$(
>19d3	f4 16					.word	EXPUnaryMid              ; $d9 MID$(
>19d5	8b 16					.word	EXPUnaryStr              ; $da STR$(
>19d7	56 17					.word	EXPUnaryVal              ; $db VAL(
>19d9	58 16					.word	EXPUnarySgn              ; $dc SGN(
>19db	43 15					.word	EXPUnaryAbs              ; $dd ABS(
>19dd	dd 15					.word	EXPUnaryLen              ; $de LEN(
>19df	6e 16					.word	EXPUnarySqr              ; $df SQR(
>19e1	63 15					.word	EXPUnaryChr              ; $e0 CHR$(
>19e3	4d 15					.word	EXPUnaryAsc              ; $e1 ASC(
>19e5	79 29					.word	NotImplemented           ; $e2 INKEY$(
>19e7	79 29					.word	NotImplemented           ; $e3 EVENT(
>19e9	79 29					.word	NotImplemented           ; $e4 TIME
>19eb	d3 15					.word	EXPUnaryInt              ; $e5 INT(
>19ed	c9 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>19ef	74 15					.word	EXPUnaryDec              ; $e7 DEC(
>19f1	7d 16					.word	EXPUnaryHex              ; $e8 HEX$(
>19f3	f2 15					.word	EXPUnaryRnd              ; $e9 RND(
>19f5	02 16					.word	ExpUnaryRand             ; $ea RAND(
>19f7	eb 15					.word	EXPUnaryParenthesis      ; $eb (
>19f9	c5 15					.word	EXPUnaryNull             ; $ec $
>19fb	c2 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>19fd	b2 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>19ff	2d 13					.word	EXPCompareEqual          ; $ef =
>1a01	48 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a03	51 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a05	36 13					.word	EXPCompareLess           ; $f2 <
>1a07	5a 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a09	3f 13					.word	EXPCompareGreater        ; $f4 >
>1a0b	da 12					.word	EXPBinXor                ; $f5 XOR
>1a0d	ce 12					.word	EXPBinOr                 ; $f6 OR
>1a0f	c2 12					.word	EXPBinAnd                ; $f7 AND
>1a11	9a 12					.word	EXPBinIDiv               ; $f8 DIV
>1a13	ab 12					.word	EXPBinIMod               ; $f9 MOD
>1a15	a5 13					.word	EXPBinLeft               ; $fa <<
>1a17	ad 13					.word	EXPBinRight              ; $fb >>
>1a19	8e 12					.word	EXPBinFDiv               ; $fc /
>1a1b	85 12					.word	EXPBinMul                ; $fd *
>1a1d	7c 12					.word	EXPBinSub                ; $fe -
>1a1f	73 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a21					TOKDetokenise:
.1a21	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a23	84 23		sty $23				sty 	zTemp2+1
.1a25	9c 43 03	stz $0343			stz		TOKLastCharacter 			; clear last character
.1a28					_TOKDLoop:
.1a28	20 57 1a	jsr $1a57			jsr 	TOKDGet 					; get next
.1a2b	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a2d	f0 26		beq $1a55			beq 	_TOKDExit
.1a2f	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a31	f0 1d		beq $1a50			beq 	_TOKDDataItem
.1a33	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a35	f0 19		beq $1a50			beq 	_TOKDDataItem
.1a37	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a39	10 05		bpl $1a40			bpl 	_TOKDNotToken
.1a3b	20 1f 1b	jsr $1b1f			jsr 	TOKDToken 					; token to text.
.1a3e	80 e8		bra $1a28			bra 	_TOKDLoop
.1a40					_TOKDNotToken:
.1a40	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1a42	90 05		bcc $1a49			bcc 	_TOKDNotIdentifier
.1a44	20 92 1a	jsr $1a92			jsr 	TOKDIdentifier
.1a47	80 df		bra $1a28			bra 	_TOKDLoop
.1a49					_TOKDNotIdentifier:
.1a49	a0 0a		ldy #$0a			ldy 	#10
.1a4b	20 db 1a	jsr $1adb			jsr 	TOKDInteger
.1a4e	80 d8		bra $1a28			bra 	_TOKDLoop
.1a50					_TOKDDataItem:
.1a50	20 6d 1a	jsr $1a6d			jsr 	TOKDDataItem
.1a53	80 d3		bra $1a28			bra 	_TOKDLoop
.1a55					_TOKDExit:
.1a55	18		clc				clc
.1a56	60		rts				rts
.1a57	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1a59	e6 22		inc $22				inc 	zTemp2
.1a5b	d0 02		bne $1a5f			bne 	_TKDGExit
.1a5d	e6 23		inc $23				inc 	zTemp2+1
.1a5f					_TKDGExit:
.1a5f	60		rts				rts
.1a60					TOKDOutput:
.1a60	8d 43 03	sta $0343			sta 	TOKLastCharacter
.1a63	6c 41 03	jmp ($0341)			jmp 	(TOKOutputMethod)
.1a66					TOKSetDetokeniseOutput:
.1a66	8e 41 03	stx $0341			stx 	TOKOutputMethod
.1a69	8c 42 03	sty $0342			sty 	TOKOutputMethod+1
.1a6c	60		rts				rts
.0341					TOKOutputMethod:
>0341							.fill 	2
.0343					TOKLastCharacter:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1a6d					TOKDDataItem:
.1a6d	a8		tay				tay 								; type in Y
.1a6e	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1a70	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1a72	f0 02		beq $1a76			beq 	_TOKDDIsString
.1a74	a9 2e		lda #$2e			lda 	#'.'
.1a76					_TOKDDIsString:
.1a76	20 60 1a	jsr $1a60			jsr 	TOKDOutput 					; dump it
.1a79	20 57 1a	jsr $1a57			jsr 	TOKDGet 					; get length into X
.1a7c	aa		tax				tax
.1a7d					_TOKDDOutput:
.1a7d	ca		dex				dex 								; are we complete
.1a7e	30 08		bmi $1a88			bmi 	_TOKDDEnd
.1a80	20 57 1a	jsr $1a57			jsr 	TOKDGet 					; get character and output it
.1a83	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1a86	80 f5		bra $1a7d			bra 	_TOKDDOutput
.1a88					_TOKDDEnd:
.1a88	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1a8a	d0 05		bne $1a91			bne 	_TOKDDNotString
.1a8c	a9 22		lda #$22			lda 	#'"'
.1a8e	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1a91					_TOKDDNotString:
.1a91	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1a92					TOKDIdentifier:
.1a92	a0 ff		ldy #$ff			ldy 	#$FF
.1a94	8c 44 03	sty $0344			sty 	TOKDIFirstChar
.1a97					_TOKDLoop:
.1a97	a8		tay				tay 								; token in Y
.1a98	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1a9a	c0 64		cpy #$64			cpy 	#$64
.1a9c	f0 11		beq $1aaf			beq 	_TOKDIOutput
.1a9e	a9 5f		lda #$5f			lda 	#'_'
.1aa0	c0 65		cpy #$65			cpy 	#$65
.1aa2	f0 0b		beq $1aaf			beq 	_TOKDIOutput
.1aa4	98		tya				tya 								; handle a-z
.1aa5	18		clc				clc
.1aa6	69 21		adc #$21			adc	 	#$21
.1aa8	c0 5a		cpy #$5a			cpy 	#$5A
.1aaa	90 03		bcc $1aaf			bcc 	_TOKDIOutput
.1aac	38		sec				sec 								; handle 0-9
.1aad	e9 4b		sbc #$4b			sbc 	#$4B
.1aaf					_TOKDIOutput:
.1aaf	2c 44 03	bit $0344			bit 	TOKDIFirstChar
.1ab2	10 08		bpl $1abc			bpl 	_TOKDINoSpacing
.1ab4	48		pha				pha
.1ab5	20 51 1b	jsr $1b51			jsr 	TOKDSpacing
.1ab8	9c 44 03	stz $0344			stz 	TOKDIFirstChar
.1abb	68		pla				pla
.1abc					_TOKDINoSpacing:
.1abc	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1abf	20 57 1a	jsr $1a57			jsr 	TOKDGet 					; get next token
.1ac2	c9 7c		cmp #$7c			cmp 	#$7C
.1ac4	90 d1		bcc $1a97			bcc 	_TOKDLoop
.1ac6	f0 12		beq $1ada			beq 	_TOKDIExit 					; it's a number, no tail.
.1ac8	4a		lsr a				lsr 	a 							; string ?
.1ac9	90 07		bcc $1ad2			bcc 	_TOKDICheckArray
.1acb	48		pha				pha
.1acc	a9 24		lda #$24			lda 	#"$"
.1ace	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1ad1	68		pla				pla
.1ad2					_TOKDICheckArray:
.1ad2	4a		lsr a				lsr 	a 							; array ?
.1ad3	90 05		bcc $1ada			bcc 	_TOKDIExit
.1ad5	a9 28		lda #$28			lda 	#"("
.1ad7	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1ada					_TOKDIExit:
.1ada	60		rts				rts
.0344					TOKDIFirstChar:
>0344							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1adb					TOKDInteger:
.1adb	5a		phy				phy 								; save base
.1adc	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1ade	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.1ae1					_TOKDILoop:
.1ae1	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1ae3	c9 40		cmp #$40			cmp 	#$40
.1ae5	b0 1d		bcs $1b04			bcs 	_TOKDIHaveInteger
.1ae7	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1ae9	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1aec	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1aef	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1af2	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1af5	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1af8	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1afb	20 57 1a	jsr $1a57			jsr 	TOKDGet 					; OR byte in.
.1afe	05 0c		ora $0c				ora 	IFR0+IM0
.1b00	85 0c		sta $0c				sta 	IFR0+IM0
.1b02	80 dd		bra $1ae1			bra 	_TOKDILoop
.1b04					_TOKDIHaveInteger:
.1b04	7a		ply				ply 								; restore base
.1b05	98		tya				tya 								; base in A
.1b06	20 3c 26	jsr $263c			jsr 	IFloatIntegerToStringR0
.1b09	86 1e		stx $1e				stx 	zTemp0
.1b0b	84 1f		sty $1f				sty 	zTemp0+1
.1b0d	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b0f	20 51 1b	jsr $1b51			jsr 	TOKDSpacing 				; check spacing okay.
.1b12	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b14					_TOKDOutput:
.1b14	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b16	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1b19	c8		iny				iny
.1b1a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b1c	d0 f6		bne $1b14			bne 	_TOKDOutput
.1b1e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b1f					TOKDToken:
.1b1f	a2 85		ldx #$85			ldx 	#StandardTokens & $FF
.1b21	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b23					_TOKDSearch:
.1b23	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b25	84 1f		sty $1f				sty 	zTemp0+1
.1b27	aa		tax				tax 								; token ID in X.
.1b28					_TOKDFind:
.1b28	ca		dex				dex 								; reached the start
.1b29	10 0d		bpl $1b38			bpl 	_TOKDFound
.1b2b	38		sec				sec 								; go to next entry
.1b2c	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b2e	65 1e		adc $1e				adc 	zTemp0
.1b30	85 1e		sta $1e				sta 	zTemp0
.1b32	90 f4		bcc $1b28			bcc 	_TOKDFind
.1b34	e6 1f		inc $1f				inc 	zTemp0+1
.1b36	80 f0		bra $1b28			bra 	_TOKDFind
.1b38					_TOKDFound:
.1b38	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1b3a	f0 14		beq $1b50			beq 	_TOKDExit
.1b3c	aa		tax				tax
.1b3d	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1b3f	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1b41	20 51 1b	jsr $1b51			jsr 	TOKDSpacing
.1b44					_TOKDOutput:
.1b44	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b46	20 a8 1e	jsr $1ea8			jsr 	TOKToLower
.1b49	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1b4c	c8		iny				iny
.1b4d	ca		dex				dex
.1b4e	d0 f4		bne $1b44			bne 	_TOKDOutput
.1b50					_TOKDExit:
.1b50	60		rts				rts
.1b51					TOKDSpacing:
.1b51	20 bf 1e	jsr $1ebf			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1b54	90 0d		bcc $1b63			bcc 	_TOKDSExit
.1b56	ad 43 03	lda $0343			lda 	TOKLastCharacter			; and last character also alphanumeric
.1b59	20 bf 1e	jsr $1ebf			jsr 	TOKIsIdentifierElement
.1b5c	90 05		bcc $1b63			bcc 	_TOKDSExit
.1b5e	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1b60	20 60 1a	jsr $1a60			jsr 	TOKDOutput
.1b63					_TOKDSExit:
.1b63	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1b64					PGMDeleteLine:
.1b64	20 17 1c	jsr $1c17			jsr 	PGMEndProgram 				; end of program into zTemp0
.1b67	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1b69	ad 45 03	lda $0345			lda 	PGMBaseHigh
.1b6c	85 21		sta $21				sta 	zTemp1+1
.1b6e					_PGMDLoop:
.1b6e	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1b70	38		sec				sec
.1b71	f0 3a		beq $1bad			beq 	_PGMDExit
.1b73	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1b75	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b77	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1b7a	d0 08		bne $1b84			bne 	_PGMDNext
.1b7c	c8		iny				iny
.1b7d	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b7f	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1b82	f0 0d		beq $1b91			beq 	_PGMDDelete
.1b84					_PGMDNext:
.1b84	18		clc				clc
.1b85	b2 20		lda ($20)			lda 	(zTemp1)
.1b87	65 20		adc $20				adc 	zTemp1
.1b89	85 20		sta $20				sta 	zTemp1
.1b8b	90 e1		bcc $1b6e			bcc 	_PGMDLoop
.1b8d	e6 21		inc $21				inc 	zTemp1+1
.1b8f	80 dd		bra $1b6e			bra 	_PGMDLoop
.1b91					_PGMDDelete:
.1b91	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1b93	a8		tay				tay
.1b94					_PGMDCopy:
.1b94	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1b96	92 20		sta ($20)			sta 	(zTemp1)
.1b98	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1b9a	c5 1e		cmp $1e				cmp 	zTemp0
.1b9c	d0 07		bne $1ba5			bne 	_PGMDNext2
.1b9e	a5 21		lda $21				lda 	zTemp1+1
.1ba0	c5 1f		cmp $1f				cmp 	zTemp0+1
.1ba2	18		clc				clc
.1ba3	f0 08		beq $1bad			beq 	_PGMDExit
.1ba5					_PGMDNext2:
.1ba5	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1ba7	d0 eb		bne $1b94			bne 	_PGMDCopy
.1ba9	e6 21		inc $21				inc 	zTemp1+1
.1bab	80 e7		bra $1b94			bra 	_PGMDCopy
.1bad					_PGMDExit:
.1bad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1bae					PGMInsertLine:
.1bae	20 17 1c	jsr $1c17			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bb1	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bb3	ad 45 03	lda $0345			lda 	PGMBaseHigh
.1bb6	85 21		sta $21				sta 	zTemp1+1
.1bb8					_PGMILoop:
.1bb8	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1bba	f0 1c		beq $1bd8			beq 	_PGMIInsert
.1bbc	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1bbe	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bc0	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1bc3	c8		iny				iny
.1bc4	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bc6	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1bc9	b0 0d		bcs $1bd8			bcs 	_PGMIInsert 				; insert here.
.1bcb	18		clc				clc
.1bcc	b2 20		lda ($20)			lda 	(zTemp1)
.1bce	65 20		adc $20				adc 	zTemp1
.1bd0	85 20		sta $20				sta 	zTemp1
.1bd2	90 e4		bcc $1bb8			bcc 	_PGMILoop
.1bd4	e6 21		inc $21				inc 	zTemp1+1
.1bd6	80 e0		bra $1bb8			bra 	_PGMILoop
.1bd8					_PGMIInsert:
.1bd8	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1bdb					_PGMIInsertLoop:
.1bdb	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bdd	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1bdf	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1be1	c5 1e		cmp $1e				cmp 	zTemp0
.1be3	d0 06		bne $1beb			bne 	_PGMINext
.1be5	a5 21		lda $21				lda 	zTemp1+1
.1be7	c5 1f		cmp $1f				cmp 	zTemp0+1
.1be9	f0 0a		beq $1bf5			beq 	_PGMIInserted
.1beb					_PGMINext:
.1beb	a5 1e		lda $1e				lda 	zTemp0
.1bed	d0 02		bne $1bf1			bne 	_PGMINoBorrow
.1bef	c6 1f		dec $1f				dec 	zTemp0+1
.1bf1					_PGMINoBorrow:
.1bf1	c6 1e		dec $1e				dec 	zTemp0
.1bf3	80 e6		bra $1bdb			bra 	_PGMIInsertLoop
.1bf5					_PGMIInserted:
.1bf5	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1bf7					_PGMICopyLoop:
.1bf7	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1bfa	91 20		sta ($20),y			sta 	(zTemp1),y
.1bfc	c8		iny				iny
.1bfd	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c00	d0 f5		bne $1bf7			bne 	_PGMICopyLoop
.1c02	18		clc				clc
.1c03	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c04					PGMSetBaseAddress:
.1c04	8e 45 03	stx $0345			stx 	PGMBaseHigh
.1c07	8c 46 03	sty $0346			sty 	PGMEndMemoryHigh
.1c0a	60		rts				rts
.1c0b					PGMNewProgram:
.1c0b	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c0d	ad 45 03	lda $0345			lda 	PGMBaseHigh
.1c10	85 1f		sta $1f				sta 	zTemp0+1
.1c12	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c14	92 1e		sta ($1e)			sta 	(zTemp0)
.1c16	60		rts				rts
.1c17					PGMEndProgram:
.1c17	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c19	ad 45 03	lda $0345			lda 	PGMBaseHigh
.1c1c	85 1f		sta $1f				sta 	zTemp0+1
.1c1e					_PGMEPLoop:
.1c1e	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c20	f0 0b		beq $1c2d			beq 	_PGMEPExit
.1c22	18		clc				clc
.1c23	65 1e		adc $1e				adc 	zTemp0
.1c25	85 1e		sta $1e				sta 	zTemp0
.1c27	90 f5		bcc $1c1e			bcc 	_PGMEPLoop
.1c29	e6 1f		inc $1f				inc 	zTemp0+1
.1c2b	80 f1		bra $1c1e			bra 	_PGMEPLoop
.1c2d					_PGMEPExit:
.1c2d	60		rts				rts
.0345					PGMBaseHigh:
>0345							.fill 	1
.0346					PGMEndMemoryHigh:
>0346							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c2e					TOKResetElement:
.1c2e	9c 47 03	stz $0347			stz 	TOKElement
.1c31	60		rts				rts
.1c32					TOKWriteElement:
.1c32	da		phx				phx
.1c33	ae 47 03	ldx $0347			ldx 	TOKElement
.1c36	9d 48 03	sta $0348,x			sta 	TOKElementText,x
.1c39	9e 49 03	stz $0349,x			stz 	TOKElementText+1,x
.1c3c	fa		plx				plx
.1c3d	ee 47 03	inc $0347			inc 	TOKElement
.1c40	60		rts				rts
.0347					TOKElement:
>0347							.fill 	1
.0348					TOKElementText:
>0348							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1c41					TOKTokeniseConstant:
.1c41	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1c43	48		pha				pha 								; save on stack
.1c44	29 c0		and #$c0			and 	#$C0
.1c46	05 0d		ora $0d				ora 	IFR0+IM1
.1c48	05 0e		ora $0e				ora 	IFR0+IM2
.1c4a	f0 10		beq $1c5c			beq 	_TTCLess
.1c4c	da		phx				phx
.1c4d	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1c4f					_TTCShiftRight:
.1c4f	46 0e		lsr $0e				lsr 	IFR0+IM2
.1c51	66 0d		ror $0d				ror 	IFR0+IM1
.1c53	66 0c		ror $0c				ror 	IFR0+IM0
.1c55	ca		dex				dex
.1c56	d0 f7		bne $1c4f			bne 	_TTCShiftRight
.1c58	fa		plx				plx
.1c59	20 41 1c	jsr $1c41			jsr 	TOKTokeniseConstant
.1c5c					_TTCLess:
.1c5c	68		pla				pla
.1c5d	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1c5f	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1c62	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1c63					TOKTokeniseDecimals:
.1c63	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext 					; consume the .
.1c66	20 35 1e	jsr $1e35			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1c69	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1c6b	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1c6e	20 73 1c	jsr $1c73			jsr 	TOKOutputElementBuffer 		; then the buffer
.1c71	18		clc				clc
.1c72	60		rts				rts
.1c73					TOKOutputElementBuffer:
.1c73	ad 47 03	lda $0347			lda 	TOKElement 					; get count and write that
.1c76	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1c79	a8		tay				tay 								; put in Y
.1c7a	f0 0c		beq $1c88			beq 	_TOEExit 					; exit if empty which is okay.
.1c7c	a2 01		ldx #$01			ldx 	#1
.1c7e					_TOELoop:
.1c7e	bd 47 03	lda $0347,x			lda 	TOKElement,x
.1c81	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1c84	e8		inx				inx
.1c85	88		dey				dey
.1c86	d0 f6		bne $1c7e			bne 	_TOELoop
.1c88					_TOEExit:
.1c88	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1c89					TOKTokenise:
.1c89	8c 48 04	sty $0448			sty 	TOKDataSource+1 			; save source routine pointer
.1c8c	8e 47 04	stx $0447			stx 	TOKDataSource
.1c8f	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1c91	2a		rol a				rol  	a
.1c92	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1c95	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1c97	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1c9a					_TOKMainLoop:
.1c9a	20 07 1d	jsr $1d07			jsr 	TOKGet 						; what follows.
.1c9d	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1c9f	f0 51		beq $1cf2			beq 	_TOKExit
.1ca1	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1ca3	d0 05		bne $1caa			bne 	_TOKElement
.1ca5	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext
.1ca8	80 f0		bra $1c9a			bra 	_TOKMainLoop
.1caa					_TOKElement:
.1caa	20 b3 1e	jsr $1eb3			jsr 	TOKIsDigit 					; is it 0..9
.1cad	90 0a		bcc $1cb9			bcc 	_TOKNotDigit
.1caf	20 0c 1e	jsr $1e0c			jsr 	TOKTokeniseInteger 			; get integer
.1cb2	b0 45		bcs $1cf9			bcs 	_TOKFail 					; did it fail ?
.1cb4	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1cb7	80 e1		bra $1c9a			bra 	_TOKMainLoop
.1cb9					_TOKNotDigit:
.1cb9	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1cbc	d0 3b		bne $1cf9			bne 	_TOKFail 					; if so, we've a problem.
.1cbe	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1cc0	d0 07		bne $1cc9			bne 	_TOKNotHex
.1cc2	20 54 1d	jsr $1d54			jsr 	TOKTokeniseHexadecimal
.1cc5	b0 32		bcs $1cf9			bcs 	_TOKFail
.1cc7	80 d1		bra $1c9a			bra 	_TOKMainLoop
.1cc9					_TOKNotHex:
.1cc9	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1ccb	d0 07		bne $1cd4			bne 	_TOKNotDecimal
.1ccd	20 63 1c	jsr $1c63			jsr 	TOKTokeniseDecimals
.1cd0	b0 27		bcs $1cf9			bcs 	_TOKFail
.1cd2	80 c6		bra $1c9a			bra 	_TOKMainLoop
.1cd4					_TOKNotDecimal:
.1cd4	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1cd6	d0 07		bne $1cdf			bne 	_TOKNotString
.1cd8	20 7a 1e	jsr $1e7a			jsr 	TOKTokeniseString
.1cdb	b0 1c		bcs $1cf9			bcs 	_TOKFail
.1cdd	80 bb		bra $1c9a			bra 	_TOKMainLoop
.1cdf					_TOKNotString:
.1cdf	20 d0 1e	jsr $1ed0			jsr 	TOKIsAlpha 					; identifier ?
.1ce2	b0 07		bcs $1ceb			bcs 	_TOKIdentifier
.1ce4	20 49 1e	jsr $1e49			jsr 	TOKTokenisePunctuation 		; punctuation
.1ce7	b0 10		bcs $1cf9			bcs 	_TOKFail
.1ce9	80 af		bra $1c9a			bra 	_TOKMainLoop
.1ceb					_TOKIdentifier:
.1ceb	20 8e 1d	jsr $1d8e			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1cee	b0 09		bcs $1cf9			bcs 	_TOKFail
.1cf0	80 a8		bra $1c9a			bra 	_TOKMainLoop
.1cf2					_TOKExit:
.1cf2	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1cf4	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1cf7	18		clc				clc									; return with carry set.
.1cf8	60		rts				rts
.1cf9					_TOKFail:
.1cf9	38		sec				sec
.1cfa	60		rts				rts
.1cfb					TOKWriteA:
.1cfb	da		phx				phx
.1cfc	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1cff	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d02	fa		plx				plx
.1d03	ee 37 02	inc $0237			inc 	TOKLineSize
.1d06	60		rts				rts
.1d07					TOKGet:
.1d07	18		clc				clc
.1d08	6c 47 04	jmp ($0447)			jmp 	(TOKDataSource)
.1d0b					TOKGetNext:
.1d0b	38		sec				sec
.1d0c	6c 47 04	jmp ($0447)			jmp 	(TOKDataSource)
.0447					TOKDataSource:
>0447							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d0f					TOKFindToken:
.1d0f	a2 85		ldx #$85			ldx 	#StandardTokens & $FF 		; do this table
.1d11	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d13	20 1e 1d	jsr $1d1e			jsr 	TOKFindTokenXY 				; find it, or not
.1d16	90 04		bcc $1d1c			bcc 	_TOKFTFail
.1d18	a2 00		ldx #$00			ldx 	#0
.1d1a	38		sec				sec
.1d1b	60		rts				rts
.1d1c					_TOKFTFail
.1d1c	18		clc				clc
.1d1d	60		rts				rts
.1d1e					TOKFindTokenXY:
.1d1e	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d20	84 1f		sty $1f				sty 	zTemp0+1
.1d22	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d24	8d 49 04	sta $0449			sta 	TOKCurrent
.1d27					_TOKFindLoop:
.1d27	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d29	18		clc				clc 		 						; clear carry in case of fail
.1d2a	30 17		bmi $1d43			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d2c	cd 47 03	cmp $0347			cmp 	TOKElement 					; compare against the element length
.1d2f	d0 13		bne $1d44			bne 	_TOKNext 					; different, try next.
.1d31	aa		tax				tax 								; number of chars to compare.
.1d32	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d34					_TOKCompare:
.1d34	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d36	d9 47 03	cmp $0347,y			cmp 	TOKElementText-1,y
.1d39	d0 09		bne $1d44			bne 	_TOKNext 					; different ? try next
.1d3b	c8		iny				iny 								; compare next two
.1d3c	ca		dex				dex
.1d3d	d0 f5		bne $1d34			bne 	_TOKCompare 				; until done X characters.
.1d3f	38		sec				sec
.1d40	ad 49 04	lda $0449			lda 	TOKCurrent 					; return current ID.
.1d43					_TOKExit:
.1d43	60		rts				rts
.1d44					_TOKNext:
.1d44	ee 49 04	inc $0449			inc 	TOKCurrent 					; increment token #
.1d47	38		sec				sec 								; add length+1 to ptr
.1d48	b2 1e		lda ($1e)			lda 	(zTemp0)
.1d4a	65 1e		adc $1e				adc 	zTemp0
.1d4c	85 1e		sta $1e				sta 	zTemp0
.1d4e	90 d7		bcc $1d27			bcc 	_TOKFindLoop
.1d50	e6 1f		inc $1f				inc 	zTemp0+1
.1d52	80 d3		bra $1d27			bra 	_TOKFindLoop
.0449					TOKCurrent:
>0449							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1d54					TOKTokeniseHexadecimal:
.1d54	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext 					; consume the $
.1d57	a2 0c		ldx #$0c			ldx 	#IFR0
.1d59	20 9b 28	jsr $289b			jsr 	IFloatSetZero 				; set R0 = 0
.1d5c					_TTHLoop:
.1d5c	20 07 1d	jsr $1d07			jsr 	TOKGet 						; keep getting and copying while numeric.
.1d5f	20 dd 1e	jsr $1edd			jsr 	TOKIsHexadecimal
.1d62	90 20		bcc $1d84			bcc 	_TTHDone
.1d64	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1d66	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1d69	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1d6c	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1d6f	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.1d72	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext
.1d75	38		sec				sec 								; convert to decimal.
.1d76	e9 30		sbc #$30			sbc 	#48
.1d78	c9 0a		cmp #$0a			cmp 	#10
.1d7a	90 02		bcc $1d7e			bcc 	_TTHNotAlpha
.1d7c	e9 07		sbc #$07			sbc 	#7
.1d7e					_TTHNotAlpha:
.1d7e	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1d80	85 0c		sta $0c				sta 	IFR0+IM0
.1d82	80 d8		bra $1d5c			bra 	_TTHLoop
.1d84					_TTHDone:
.1d84	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1d86	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1d89	20 41 1c	jsr $1c41			jsr 	TOKTokeniseConstant 		; write integer out.
.1d8c	18		clc				clc
.1d8d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1d8e					TOKTokeniseIdentifier:
.1d8e	20 2e 1c	jsr $1c2e			jsr 	TOKResetElement 			; extract an identifier
.1d91					_TOKGetIdentifier:
.1d91	20 07 1d	jsr $1d07			jsr 	TOKGet
.1d94	20 9d 1e	jsr $1e9d			jsr 	TOKToUpper
.1d97	20 bf 1e	jsr $1ebf			jsr 	TOKIsIdentifierElement
.1d9a	90 08		bcc $1da4			bcc 	_TOKEndIdent
.1d9c	20 32 1c	jsr $1c32			jsr		TOKWriteElement
.1d9f	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext
.1da2	80 ed		bra $1d91			bra 	_TOKGetIdentifier
.1da4					_TOKEndIdent:
.1da4	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1da6	d0 06		bne $1dae			bne 	_TOKNotString
.1da8	20 32 1c	jsr $1c32			jsr 	TOKWriteElement 			; add it
.1dab	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext 					; consume it
.1dae					_TOKNotString:
.1dae	20 07 1d	jsr $1d07			jsr 	TOKGet 						; finally check for (
.1db1	c9 28		cmp #$28			cmp 	#"("
.1db3	d0 06		bne $1dbb			bne 	_TOKNoArray
.1db5	20 32 1c	jsr $1c32			jsr 	TOKWriteElement 			; add it
.1db8	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext 					; consume it
.1dbb					_TOKNoArray:
.1dbb	20 0f 1d	jsr $1d0f			jsr 	TOKFindToken 				; find it
.1dbe	90 05		bcc $1dc5			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1dc0	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1dc3	18		clc				clc
.1dc4	60		rts				rts
.1dc5					_TOKIsVariable:
.1dc5	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1dc7					_TOKOutputBuffer:
.1dc7	bd 48 03	lda $0348,x			lda 	TOKElementText,x 			; output it translated.
.1dca	20 f3 1d	jsr $1df3			jsr 	TOKTranslateIdentifier
.1dcd	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1dd0	e8		inx				inx
.1dd1	bd 48 03	lda $0348,x			lda 	TOKElementText,x
.1dd4	20 bf 1e	jsr $1ebf			jsr 	TOKIsIdentifierElement
.1dd7	b0 ee		bcs $1dc7			bcs 	_TOKOutputBuffer
.1dd9	a8		tay				tay 								; last char in Y
.1dda	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1ddc	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1dde	f0 0e		beq $1dee			beq 	_TOKIVExit
.1de0	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1de2	d0 04		bne $1de8			bne 	_TOKIVCheckArray 			; no, check for (
.1de4	1a		inc a				inc 	a 							; token is $7D
.1de5	bc 49 03	ldy $0349,x			ldy 	TOKElementText+1,x 			; get next one.
.1de8					_TOKIVCheckArray:
.1de8	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1dea	d0 02		bne $1dee			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1dec	1a		inc a				inc 	a
.1ded	1a		inc a				inc 	a
.1dee					_TOKIVExit:
.1dee	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA 					; ending token
.1df1	18		clc				clc
.1df2	60		rts				rts
.1df3					TOKTranslateIdentifier:
.1df3	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1df5	f0 0f		beq $1e06			beq 	_TTI64
.1df7	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1df9	f0 0e		beq $1e09			beq 	_TTI65
.1dfb	38		sec				sec
.1dfc	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1dfe	10 03		bpl $1e03			bpl 	_TTIExit
.1e00	18		clc				clc 								; map 09 onto 26-35
.1e01	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e03					_TTIExit:
.1e03	09 40		ora #$40			ora 	#$40 						; correct range.
.1e05	60		rts				rts
.1e06	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e08	60		rts				rts
.1e09	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e0b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e0c					TOKTokeniseInteger:
.1e0c	20 35 1e	jsr $1e35			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e0f	a2 48		ldx #$48			ldx 	#TOKElementText & $FF
.1e11	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e13	ad 47 03	lda $0347			lda		TOKElement
.1e16	20 ff 26	jsr $26ff			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e19	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1e1c	f0 12		beq $1e30			beq 	_TOKNotLineNumber
.1e1e	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e20	d0 0c		bne $1e2e			bne 	_TOKBadLineNumeber
.1e22	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e24	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e27	a5 0d		lda $0d				lda 	IFR0+IM1
.1e29	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e2c	18		clc				clc
.1e2d	60		rts				rts
.1e2e					_TOKBadLineNumeber:
.1e2e	38		sec				sec
.1e2f	60		rts				rts
.1e30					_TOKNotLineNumber:
.1e30	20 41 1c	jsr $1c41			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e33	18		clc				clc
.1e34	60		rts				rts
.1e35					TOKExtractInteger:
.1e35	20 2e 1c	jsr $1c2e			jsr 	TOKResetElement 			; restart
.1e38					_TTILoop:
.1e38	20 07 1d	jsr $1d07			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e3b	20 b3 1e	jsr $1eb3			jsr 	TOKIsDigit
.1e3e	90 08		bcc $1e48			bcc 	_TOKEIExit
.1e40	20 32 1c	jsr $1c32			jsr 	TOKWriteElement
.1e43	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext
.1e46	80 f0		bra $1e38			bra 	_TTILoop
.1e48					_TOKEIExit:
.1e48	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1e49					TOKTokenisePunctuation:
.1e49	20 2e 1c	jsr $1c2e			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1e4c	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext
.1e4f	20 32 1c	jsr $1c32			jsr 	TOKWriteElement
.1e52	20 07 1d	jsr $1d07			jsr 	TOKGet 						; what follows ?
.1e55	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1e57	f0 10		beq $1e69			beq 	_TTPOne
.1e59	20 c7 1e	jsr $1ec7			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1e5c	b0 0b		bcs $1e69			bcs 	_TTPOne 					; these speed things up a bit.
.1e5e	20 32 1c	jsr $1c32			jsr 	TOKWriteElement 			; this is what we will search for.
.1e61	20 0f 1d	jsr $1d0f			jsr 	TOKFindToken
.1e64	b0 0a		bcs $1e70			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1e66	ce 47 03	dec $0347			dec 	TOKElement 					; make it a single character
.1e69					_TTPOne:
.1e69	20 0f 1d	jsr $1d0f			jsr 	TOKFindToken 				; look for one character punctuation
.1e6c	b0 07		bcs $1e75			bcs 	_TTPOutputExit 				; we found it
.1e6e	38		sec				sec 								; not recognised.
.1e6f	60		rts				rts
.1e70					_TTPConsumeExit:
.1e70	48		pha				pha
.1e71	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext 					; get the 2nd char out.
.1e74	68		pla				pla
.1e75					_TTPOutputExit:
.1e75	20 fb 1c	jsr $1cfb			jsr  	TOKWriteA 					; write token out
.1e78	18		clc				clc
.1e79	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1e7a					TOKTokeniseString:
.1e7a	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext 					; consume the "
.1e7d	20 2e 1c	jsr $1c2e			jsr 	TOKResetElement 			; start getting the string
.1e80					_TOKTSLoop:
.1e80	20 07 1d	jsr $1d07			jsr 	TOKGet 						; check EOL
.1e83	c9 00		cmp #$00			cmp 	#0
.1e85	f0 0c		beq $1e93			beq 	_TOKTSExit
.1e87	20 0b 1d	jsr $1d0b			jsr 	TOKGetNext 					; get and consume
.1e8a	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1e8c	f0 05		beq $1e93			beq 	_TOKTSExit
.1e8e	20 32 1c	jsr $1c32			jsr 	TOKWriteElement
.1e91	80 ed		bra $1e80			bra 	_TOKTSLoop
.1e93					_TOKTSExit:
.1e93	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1e95	20 fb 1c	jsr $1cfb			jsr 	TOKWriteA
.1e98	20 73 1c	jsr $1c73			jsr 	TOKOutputElementBuffer
.1e9b	18		clc				clc
.1e9c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1e9d					TOKToUpper:
.1e9d	c9 61		cmp #$61			cmp 	#"a"
.1e9f	90 06		bcc $1ea7			bcc 	_TTUNotLower
.1ea1	c9 7b		cmp #$7b			cmp 	#"z"+1
.1ea3	b0 02		bcs $1ea7			bcs 	_TTUNotLower
.1ea5	49 20		eor #$20			eor 	#$20
.1ea7					_TTUNotLower:
.1ea7	60		rts				rts
.1ea8					TOKToLower:
.1ea8	c9 41		cmp #$41			cmp 	#"A"
.1eaa	90 06		bcc $1eb2			bcc 	_TTUNotUpper
.1eac	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1eae	b0 02		bcs $1eb2			bcs 	_TTUNotUpper
.1eb0	49 20		eor #$20			eor 	#$20
.1eb2					_TTUNotUpper:
.1eb2	60		rts				rts
.1eb3					TOKIsDigit:
.1eb3	c9 30		cmp #$30			cmp 	#"0"
.1eb5	90 06		bcc $1ebd			bcc 	TOKFail
.1eb7	c9 3a		cmp #$3a			cmp 	#"9"+1
.1eb9	b0 02		bcs $1ebd			bcs 	TOKFail
.1ebb					TOKSucceed:
.1ebb	38		sec				sec
.1ebc	60		rts				rts
.1ebd					TOKFail:
.1ebd	18		clc				clc
.1ebe	60		rts				rts
.1ebf					TOKIsIdentifierElement:
.1ebf	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1ec1	f0 f8		beq $1ebb			beq 	TOKSucceed
.1ec3	c9 5f		cmp #$5f			cmp 	#"_"
.1ec5	f0 f4		beq $1ebb			beq 	TOKSucceed 					; else fall through to alphanumeric
.1ec7					TOKIsAlphaNumeric:
.1ec7	20 d0 1e	jsr $1ed0			jsr 	TOKIsAlpha
.1eca	b0 ef		bcs $1ebb			bcs 	TOKSucceed
.1ecc	20 b3 1e	jsr $1eb3			jsr 	TOKIsDigit
.1ecf	60		rts				rts
.1ed0					TOKIsAlpha:
.1ed0	20 9d 1e	jsr $1e9d			jsr 	TOKToUpper
.1ed3	c9 41		cmp #$41			cmp 	#"A"
.1ed5	90 e6		bcc $1ebd			bcc 	TOKFail
.1ed7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ed9	b0 e2		bcs $1ebd			bcs 	TOKFail
.1edb	80 de		bra $1ebb			bra 	TOKSucceed
.1edd					TOKIsHexadecimal:
.1edd	20 b3 1e	jsr $1eb3			jsr		TOKIsDigit
.1ee0	b0 d9		bcs $1ebb			bcs 	TOKSucceed
.1ee2	20 d0 1e	jsr $1ed0			jsr 	TOKIsAlpha
.1ee5	90 d6		bcc $1ebd			bcc 	TOKFail
.1ee7	c9 47		cmp #$47			cmp 	#"F"+1
.1ee9	b0 d2		bcs $1ebd			bcs 	TOKFail
.1eeb	80 ce		bra $1ebb			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.1eed					ErrorV_syntax:
.1eed	20 7d 29	jsr $297d		jsr	ErrorHandler
>1ef0	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>1ef8	72 72 6f 72 00
.1efd					ErrorV_range:
.1efd	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f00	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1f08	61 6e 67 65 00
.1f0d					ErrorV_value:
.1f0d	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f10	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1f18	65 00
.1f1a					ErrorV_type:
.1f1a	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f1d	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1f25	6d 61 74 63 68 00
.1f2b					ErrorV_unimplemented:
.1f2b	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f2e	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1f36	65 6d 65 6e 74 65 64 00
.1f3e					ErrorV_assert:
.1f3e	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f41	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1f49	61 69 6c 00
.1f4d					ErrorV_internal:
.1f4d	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f50	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1f58	20 45 72 72 6f 72 00
.1f5f					ErrorV_divzero:
.1f5f	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f62	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>1f6a	79 20 5a 65 72 6f 00
.1f71					ErrorV_structure:
.1f71	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f74	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>1f7c	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1f88					ErrorV_stop:
.1f88	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f8b	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1f93	53 74 6f 70 70 65 64 00
.1f9b					ErrorV_data:
.1f9b	20 7d 29	jsr $297d		jsr	ErrorHandler
>1f9e	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>1fa6	61 74 61 00
.1faa					ErrorV_redefine:
.1faa	20 7d 29	jsr $297d		jsr	ErrorHandler
>1fad	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>1fb5	64 65 66 69 6e 65 64 00
.1fbd					ErrorV_index:
.1fbd	20 7d 29	jsr $297d		jsr	ErrorHandler
>1fc0	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>1fc8	79 20 49 6e 64 65 78 00
.1fd0					ErrorV_memory:
.1fd0	20 7d 29	jsr $297d		jsr	ErrorHandler
>1fd3	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>1fdb	65 6d 6f 72 79 00
.1fe1					ErrorV_uninitialised:
.1fe1	20 7d 29	jsr $297d		jsr	ErrorHandler
>1fe4	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>1fec	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.1ffb					ErrorV_string:
.1ffb	20 7d 29	jsr $297d		jsr	ErrorHandler
>1ffe	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>2006	6e 67 20 4c 65 6e 67 74 68 00
.2010					ErrorV_variable:
.2010	20 7d 29	jsr $297d		jsr	ErrorHandler
>2013	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>201b	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2024					ERRCheckLParen:
.2024	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2026	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2028	d0 18		bne $2042			bne 	ERRSyntaxError
.202a	c8		iny				iny
.202b	60		rts				rts
.202c					ERRCheckRParen:
.202c	b1 1c		lda ($1c),y			lda 	(codePtr),y
.202e	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2030	d0 10		bne $2042			bne 	ERRSyntaxError
.2032	c8		iny				iny
.2033	60		rts				rts
.2034					ERRCheckComma:
.2034	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2036	c9 99		cmp #$99			cmp 	#PR_COMMA
.2038	d0 08		bne $2042			bne 	ERRSyntaxError
.203a	c8		iny				iny
.203b	60		rts				rts
.203c					ERRCheckA:
.203c	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.203e	d0 02		bne $2042			bne 	ERRSyntaxError
.2040	c8		iny				iny
.2041	60		rts				rts
.2042					ERRSyntaxError:
.2042	4c ed 1e	jmp $1eed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/bytes.asm

.2045					StackPushByte:
.2045	48		pha				pha 								; save byte on stack
.2046	a5 26		lda $26				lda 	basicStack 					; decrement basic stack pointer
.2048	d0 02		bne $204c			bne 	_SPBNoBorrow
.204a	c6 27		dec $27				dec 	basicStack+1 				; borrow
.204c					_SPBNoBorrow:
.204c	c6 26		dec $26				dec 	basicStack
.204e	68		pla				pla 								; get back and write
.204f	92 26		sta ($26)			sta 	(basicStack)
.2051	60		rts				rts
.2052					StackPopByte:
.2052	b2 26		lda ($26)			lda 	(basicStack) 				; bump the stack pointer.
.2054	e6 26		inc $26				inc 	basicStack
.2056	d0 02		bne $205a			bne 	_SPBNoCarry
.2058	e6 27		inc $27				inc 	basicStack+1
.205a					_SPBNoCarry:
.205a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.205b					StackOpen:
.205b	48		pha				pha 								; save frame byte
.205c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.205e	0a		asl a				asl 	a 							; claim twice this for storage
.205f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2061	38		sec				sec 								; so basically subtracting from
.2062	65 26		adc $26				adc 	basicStack 	 				; basicStack
.2064	85 26		sta $26				sta 	basicStack
.2066	b0 03		bcs $206b			bcs 	_SONoBorrow
>2068	db						.byte 	$DB
.2069	c6 27		dec $27				dec 	basicStack+1
.206b					_SONoBorrow:
.206b	68		pla				pla 								; get marker back and write at TOS
.206c	92 26		sta ($26)			sta 	(basicStack)
.206e	60		rts				rts
.206f					StackClose:
.206f	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.2071	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2073	0a		asl a				asl 	a 							; claim twice this.
.2074	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.2076	85 26		sta $26				sta 	basicStack
.2078	90 02		bcc $207c			bcc 	_SCExit
.207a	e6 27		inc $27				inc 	basicStack+1
.207c					_SCExit:
.207c	60		rts				rts
.207d					StackCheckFrame:
.207d	52 26		eor ($26)			eor 	(basicStack) 				; xor with toS marker
.207f	29 f0		and #$f0			and 	#$F0 						; check type bits
.2081	d0 01		bne $2084			bne 	_SCFError 					; different, we have structures mixed up
.2083	60		rts				rts
.2084					_SCFError:
.2084	8a		txa				txa 								; report error X
.2085	4c 7d 29	jmp $297d			jmp 	ErrorHandler

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2088					StackReset:
.2088	48		pha				pha 								; save top of memory
.2089	3a		dec a				dec 	a  							; end of stack = previous byte
.208a	85 27		sta $27				sta 	basicStack+1
.208c	a9 ff		lda #$ff			lda 	#$FF
.208e	85 26		sta $26				sta 	basicStack
.2090	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2092	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2094	68		pla				pla 								; allocate pages for stack.
.2095	38		sec				sec
.2096	e9 02		sbc #$02			sbc 	#2
.2098	60		rts				rts
.0026					basicStack:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2099					StringConcrete:
.2099	5a		phy				phy 								; save position on stack
.209a	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.209c	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.209e	b0 41		bcs $20e1			bcs 	_SALengthError
.20a0	18		clc				clc 								; length of the new string
.20a1	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.20a3	90 02		bcc $20a7			bcc 	_SAHaveLength
.20a5	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.20a7					_SAHaveLength:
.20a7	48		pha				pha 								; save length to be allocated for concreting.
.20a8	38		sec				sec
.20a9	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.20ab	6d 4b 04	adc $044b			adc 	stringMemory
.20ae	8d 4b 04	sta $044b			sta 	stringMemory
.20b1	85 22		sta $22				sta 	zTemp2 						; update storage address
.20b3	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.20b5	6d 4c 04	adc $044c			adc 	stringMemory+1
.20b8	8d 4c 04	sta $044c			sta 	stringMemory+1
.20bb	85 23		sta $23				sta 	zTemp2+1
.20bd	68		pla				pla 								; save length allocated in +0
.20be	92 22		sta ($22)			sta 	(zTemp2)
.20c0	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.20c2	a0 01		ldy #$01			ldy 	#1
.20c4	91 22		sta ($22),y			sta 	(zTemp2),y
.20c6					_SACopyNewString:
.20c6	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.20c8	a0 02		ldy #$02			ldy 	#2
.20ca	91 22		sta ($22),y			sta 	(zTemp2),y
.20cc	aa		tax				tax 								; bytes to copy
.20cd	f0 0c		beq $20db			beq 	_SACopyExit
.20cf	a0 01		ldy #$01			ldy 	#1 							; first character from here
.20d1					_SACopyNSLoop:
.20d1	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.20d3	c8		iny				iny 								; write two on in string storage
.20d4	c8		iny				iny
.20d5	91 22		sta ($22),y			sta 	(zTemp2),y
.20d7	88		dey				dey
.20d8	ca		dex				dex									; until copied all the string lengths.
.20d9	d0 f6		bne $20d1			bne 	_SACopyNSLoop
.20db					_SACopyExit:
.20db	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.20dd	a5 22		lda $22				lda 	zTemp2
.20df	7a		ply				ply
.20e0	60		rts				rts
.20e1					_SALengthError:
.20e1	4c fb 1f	jmp $1ffb		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.20e4					StringSystemInitialise:
.20e4	3a		dec a				dec 	a 							; make last byte of previous page.
.20e5	8d 4c 04	sta $044c			sta 	stringMemory+1
.20e8	85 1f		sta $1f				sta 	zTemp0+1
.20ea	a9 ff		lda #$ff			lda 	#$FF
.20ec	8d 4b 04	sta $044b			sta 	stringMemory
.20ef	85 1e		sta $1e				sta 	zTemp0
.20f1	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.20f3	92 1e		sta ($1e)			sta 	(zTemp0)
.20f5	60		rts				rts
.20f6					StringSpaceInitialise:
.20f6	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.20f8	8d 4a 04	sta $044a			sta 	stringInitialised
.20fb	ad 4b 04	lda $044b			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.20fe	8d 4d 04	sta $044d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2101	ad 4c 04	lda $044c			lda 	stringMemory+1
.2104	3a		dec a				dec 	a
.2105	8d 4e 04	sta $044e			sta 	stringTempPointer+1
.2108	60		rts				rts
.2109					StringTempAllocate:
.2109	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.210b	b0 2e		bcs $213b			bcs 	_STALength
.210d	2c 4a 04	bit $044a			bit 	stringInitialised 			; already initialised
.2110	30 05		bmi $2117			bmi 	_STAAllocate
.2112	48		pha				pha 								; save value to subtract.
.2113	20 f6 20	jsr $20f6			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2116	68		pla				pla 								; restore it
.2117					_STAAllocate:
.2117	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2119	18		clc				clc  								; deliberate allows one more
.211a	6d 4d 04	adc $044d			adc 	stringTempPointer 			; subtract from temp pointer
.211d	8d 4d 04	sta $044d			sta 	stringTempPointer
.2120	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.2122	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.2124	ad 4e 04	lda $044e			lda 	stringTempPointer+1
.2127	69 ff		adc #$ff			adc 	#$FF
.2129	8d 4e 04	sta $044e			sta 	stringTempPointer+1
.212c	85 29		sta $29				sta 	zsTemp+1
.212e	85 0d		sta $0d				sta 	IFR0+IM1
.2130	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2132	a9 80		lda #$80			lda 	#$80
.2134	85 0f		sta $0f				sta 	IFR0+IExp
.2136	a9 00		lda #$00			lda 	#0 							; clear the target string
.2138	92 28		sta ($28)			sta 	(zsTemp)
.213a	60		rts				rts
.213b					_STALength:
.213b	4c fb 1f	jmp $1ffb		jmp	ErrorV_string
.213e					StringTempWrite:
.213e	5a		phy				phy
.213f	48		pha				pha
.2140	b2 28		lda ($28)			lda 	(zsTemp)
.2142	1a		inc a				inc 	a
.2143	92 28		sta ($28)			sta 	(zsTemp)
.2145	a8		tay				tay
.2146	68		pla				pla
.2147	91 28		sta ($28),y			sta 	(zsTemp),y
.2149	7a		ply				ply
.214a	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.044a					stringInitialised:
>044a							.fill 	1
.044b					stringMemory:
>044b							.fill 	2
.044d					stringTempPointer:
>044d							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.214b					VARCreate:
.214b	5a		phy				phy
.214c	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.214e	a2 00		ldx #$00			ldx 	#0
.2150	20 32 10	jsr $1032			jsr 	AllocateMemory
.2153	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.2155	86 21		stx $21				stx 	zTemp1+1
.2157	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2159	ad 51 04	lda $0451			lda 	VARHash
.215c	91 20		sta ($20),y			sta 	(zTemp1),y
.215e	c8		iny				iny 								; put address of name into +3,+4
.215f	ad 4f 04	lda $044f			lda 	VARNameAddress
.2162	91 20		sta ($20),y			sta 	(zTemp1),y
.2164	c8		iny				iny
.2165	ad 50 04	lda $0450			lda 	VARNameAddress+1
.2168	91 20		sta ($20),y			sta 	(zTemp1),y
.216a	ad 52 04	lda $0452			lda 	VARType
.216d	29 01		and #$01			and 	#1
.216f	f0 06		beq $2177			beq 	_CVNotString
.2171	a0 08		ldy #$08			ldy 	#5+3
.2173	a9 80		lda #$80			lda 	#$80
.2175	91 20		sta ($20),y			sta 	(zTemp1),y
.2177					_CVNotString:
.2177	ad 73 04	lda $0473			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.217a	85 1e		sta $1e				sta 	zTemp0
.217c	ad 74 04	lda $0474			lda 	VARHashEntry+1
.217f	85 1f		sta $1f				sta 	zTemp0+1
.2181	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2183	b2 1e		lda ($1e)			lda 	(zTemp0)
.2185	92 20		sta ($20)			sta 	(zTemp1)
.2187	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2189	91 20		sta ($20),y			sta 	(zTemp1),y
.218b	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.218d	92 1e		sta ($1e)			sta 	(zTemp0)
.218f	a5 21		lda $21				lda 	zTemp1+1
.2191	91 1e		sta ($1e),y			sta 	(zTemp0),y
.2193	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.2195	a6 21		ldx $21				ldx 	zTemp1+1
.2197	18		clc				clc 								; add 5 to point to the data.
.2198	69 05		adc #$05			adc 	#5
.219a	90 01		bcc $219d			bcc 	_VCNoCarry
.219c	e8		inx				inx
.219d					_VCNoCarry:
.219d	7a		ply				ply
.219e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.219f					VARFind:
.219f	5a		phy				phy
.21a0	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.21a2	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.21a4	85 21		sta $21				sta 	zTemp1+1
.21a6	f0 1c		beq $21c4			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.21a8	b2 1e		lda ($1e)			lda 	(zTemp0)
.21aa	85 20		sta $20				sta 	zTemp1
.21ac					_VFLoop:
.21ac	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.21ae	b1 20		lda ($20),y			lda 	(zTemp1),y
.21b0	cd 51 04	cmp $0451			cmp 	VARHash
.21b3	f0 12		beq $21c7			beq 	_VFHashesMatch 				; if so, check the name.
.21b5					_VFNext:
.21b5	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.21b7	aa		tax				tax
.21b8	a0 01		ldy #$01			ldy 	#1
.21ba	b1 20		lda ($20),y			lda 	(zTemp1),y
.21bc	85 21		sta $21				sta 	zTemp1+1
.21be	86 20		stx $20				stx 	zTemp1
.21c0	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.21c2	d0 e8		bne $21ac			bne 	_VFLoop
.21c4					_VFExitFail:
.21c4	7a		ply				ply
.21c5	18		clc				clc
.21c6	60		rts				rts
.21c7					_VFHashesMatch:
.21c7	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.21c9	b1 20		lda ($20),y			lda 	(zTemp1),y
.21cb	85 22		sta $22				sta 	zTemp2
.21cd	c8		iny				iny
.21ce	b1 20		lda ($20),y			lda 	(zTemp1),y
.21d0	85 23		sta $23				sta 	zTemp2+1
.21d2	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.21d4					_VFNameCompLoop:
.21d4	c8		iny				iny 								; char at a time
.21d5	b9 53 04	lda $0453,y			lda 	VARBuffer,y
.21d8	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.21da	d0 d9		bne $21b5			bne 	_VFNext						; next entry if different.
.21dc	c9 7c		cmp #$7c			cmp 	#$7C
.21de	90 f4		bcc $21d4			bcc 	_VFNameCompLoop 			; until done the whole lot.
.21e0	18		clc				clc
.21e1	a5 20		lda $20				lda 	zTemp1
.21e3	a6 21		ldx $21				ldx 	zTemp1+1
.21e5	69 05		adc #$05			adc 	#5
.21e7	90 01		bcc $21ea			bcc 	_VFNNoCarry
.21e9	e8		inx				inx
.21ea					_VFNNoCarry:
.21ea	7a		ply				ply
.21eb	38		sec				sec
.21ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.21ed					VARGetInfo:
.21ed	98		tya				tya 								; calculate the address of the identifier start.
.21ee	18		clc				clc
.21ef	65 1c		adc $1c				adc 	codePtr
.21f1	8d 4f 04	sta $044f			sta 	VARNameAddress
.21f4	a5 1d		lda $1d				lda 	codePtr+1
.21f6	69 00		adc #$00			adc 	#0
.21f8	8d 50 04	sta $0450			sta 	VARNameAddress+1
.21fb	9c 51 04	stz $0451			stz 	VARHash
.21fe	a2 00		ldx #$00			ldx 	#0
.2200					_VARCopyName:
.2200	18		clc				clc 								; update the sum hash.
.2201	ad 51 04	lda $0451			lda 	VARHash
.2204	71 1c		adc ($1c),y			adc 	(codePtr),y
.2206	8d 51 04	sta $0451			sta 	VARHash
.2209	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.220b	c8		iny				iny
.220c	9d 53 04	sta $0453,x			sta 	VARBuffer,x
.220f	e8		inx				inx
.2210	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2212	90 ec		bcc $2200			bcc 	_VARCopyName
.2214	8d 52 04	sta $0452			sta 	VARType 					; save type byte
.2217	29 03		and #$03			and 	#3 							; type is 0-3
.2219	0a		asl a				asl 	a
.221a	0a		asl a				asl 	a
.221b	85 1e		sta $1e				sta 	zTemp0
.221d	ad 51 04	lda $0451			lda 	VARHash 					; force into range of hash entries per type.
.2220	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2222	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.2224	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2225	69 75		adc #$75			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2227	85 1e		sta $1e				sta 	zTemp0
.2229	8d 73 04	sta $0473			sta 	VARHashEntry
.222c	a9 04		lda #$04			lda 	#VARHashTables >> 8
.222e	69 00		adc #$00			adc 	#0
.2230	85 1f		sta $1f				sta 	zTemp0+1
.2232	8d 74 04	sta $0474			sta 	VARHashEntry+1
.2235	60		rts				rts
.2236					VARClearHashTables:
.2236	a2 00		ldx #$00			ldx 	#0
.2238					_VCHRLoop:
.2238	a9 00		lda #$00			lda 	#0
.223a	9d 75 04	sta $0475,x			sta 	VARHashTables,x
.223d	e8		inx				inx
.223e	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2240	d0 f6		bne $2238			bne 	_VCHRLoop
.2242	60		rts				rts
.044f					VARNameAddress:
>044f							.fill 	2
.0451					VARHash:
>0451							.fill 	1
.0452					VARType:
>0452							.fill 	1
.0453					VARBuffer:
>0453							.fill 	32
.0473					VARHashEntry:
>0473							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0475					VARHashTables:
>0475							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2243					VARCheckSimple:
.2243	aa		tax				tax 								; save in X
.2244	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2246	c9 7c		cmp #$7c			cmp 	#$7C
.2248	d0 15		bne $225f			bne 	_VCSComplex
.224a	c8		iny				iny 								; consume the second byte, the type.
.224b	8a		txa				txa  								; character (40-7F) x 4
.224c	0a		asl a				asl 	a
.224d	0a		asl a				asl  	a
.224e	18		clc				clc
.224f	69 95		adc #$95			adc 	#FastVariables & $FF
.2251	85 0c		sta $0c				sta 	IFR0+IM0
.2253	a9 04		lda #$04			lda 	#FastVariables >> 8
.2255	69 00		adc #$00			adc 	#0
.2257	85 0d		sta $0d				sta 	IFR0+IM1
.2259	64 0e		stz $0e				stz 	IFR0+IM2
.225b	64 0f		stz $0f				stz 	IFR0+IExp
.225d	38		sec				sec 								; it's a reference
.225e	60		rts				rts
.225f					_VCSComplex:
.225f	88		dey				dey	 								; extract information.
.2260	20 ed 21	jsr $21ed			jsr 	VARGetInfo
.2263	20 9f 21	jsr $219f			jsr 	VARFind 					; search for variable
.2266	b0 0a		bcs $2272			bcs 	_VCSHaveVariable
.2268	ad 52 04	lda $0452			lda 	VARType 					; error if arrays, cannot autocreate
.226b	29 02		and #$02			and 	#2
.226d	d0 14		bne $2283			bne 	_VCNoCreate
.226f	20 4b 21	jsr $214b			jsr 	VARCreate 					; create variable
.2272					_VCSHaveVariable:
.2272	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.2274	85 0c		sta $0c				sta 	IFR0+IM0
.2276	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.2278	ad 52 04	lda $0452			lda 	VARType 					; number/string bit into carry
.227b	6a		ror a				ror 	a
.227c	a9 00		lda #$00			lda 	#0
.227e	6a		ror a				ror 	a 							; now $00 or $80
.227f	85 0f		sta $0f				sta 	IFR0+IExp
.2281	38		sec				sec 								; it's a reference
.2282	60		rts				rts
.2283					_VCNoCreate:
.2283	4c e1 1f	jmp $1fe1		jmp	ErrorV_uninitialised
.0495					FastVariables:
>0495							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2286					IFInitialise:
.2286	9c 05 05	stz $0505			stz 	IFStackIndex
.2289	60		rts				rts
.228a					IFloatSubtract:
.228a	da		phx				phx
.228b	a2 0c		ldx #$0c			ldx 	#IFR0
.228d	20 a6 28	jsr $28a6			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2290	fa		plx				plx
.2291					IFloatAdd:
.2291	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2293	05 0f		ora $0f				ora 	IFR0+IExp
.2295	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2297	d0 4e		bne $22e7			bne 	_IFloatAddDecimals 			; decimal version.
.2299					_IFAddSubMantissa:
.2299	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.229b	45 0f		eor $0f				eor 	IFR0+IExp
.229d	29 40		and #$40			and 	#IFSign
.229f	d0 21		bne $22c2			bne 	_IFloatSubMantissa
.22a1	18		clc				clc 								; do the actual addition
.22a2	a5 0c		lda $0c			lda 	IFR0+IM0
.22a4	75 00		adc $00,x		adc 		IM0,x
.22a6	85 0c		sta $0c			sta 	IFR0+IM0
.22a8	a5 0d		lda $0d			lda 	IFR0+IM1
.22aa	75 01		adc $01,x		adc 		IM1,x
.22ac	85 0d		sta $0d			sta 	IFR0+IM1
.22ae	a5 0e		lda $0e			lda 	IFR0+IM2
.22b0	75 02		adc $02,x		adc 		IM2,x
.22b2	85 0e		sta $0e			sta 	IFR0+IM2
.22b4	10 29		bpl $22df			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.22b6	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.22b8	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.22bb	20 f4 28	jsr $28f4			jsr 	IFloatIncExponent
.22be	d0 1f		bne $22df			bne 	_IFloatAddExit
.22c0	38		sec				sec 								; overflowed numerically.
.22c1	60		rts				rts
.22c2					_IFloatSubMantissa:
.22c2	38		sec				sec 								; do the subtraction R0-Rx
.22c3	a5 0c		lda $0c			lda 	IFR0+IM0
.22c5	f5 00		sbc $00,x		sbc 		IM0,x
.22c7	85 0c		sta $0c			sta 	IFR0+IM0
.22c9	a5 0d		lda $0d			lda 	IFR0+IM1
.22cb	f5 01		sbc $01,x		sbc 		IM1,x
.22cd	85 0d		sta $0d			sta 	IFR0+IM1
.22cf	a5 0e		lda $0e			lda 	IFR0+IM2
.22d1	f5 02		sbc $02,x		sbc 		IM2,x
.22d3	85 0e		sta $0e			sta 	IFR0+IM2
.22d5	b0 08		bcs $22df			bcs 	_IFloatAddExit 				; no borrow so we are done.
.22d7	a2 0c		ldx #$0c			ldx 	#IFR0
.22d9	20 ae 28	jsr $28ae			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.22dc	20 a6 28	jsr $28a6			jsr 	IFloatNegate 				; negate
.22df					_IFloatAddExit:
.22df	18		clc				clc
.22e0	60		rts				rts
.22e1					_IFloatZeroAdd:
.22e1	fa		plx				plx 								; return this value in R0
.22e2	20 2c 28	jsr $282c			jsr 	IFloatCopyFromRegister
.22e5	18		clc				clc
.22e6	60		rts				rts
.22e7					_IFloatAddDecimals:
.22e7	20 94 28	jsr $2894			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.22ea	f0 f3		beq $22df			beq 	_IFloatAddExit
.22ec	20 d2 28	jsr $28d2			jsr 	IFloatNormalise 			; normalise RX
.22ef	da		phx				phx 								; normalise R0
.22f0	a2 0c		ldx #$0c			ldx 	#IFR0
.22f2	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.22f5	f0 ea		beq $22e1			beq 	_IFloatZeroAdd
.22f7	20 d2 28	jsr $28d2			jsr 	IFloatNormalise
.22fa	fa		plx				plx
.22fb	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.22fd	29 3f		and #$3f			and 	#IFXMask
.22ff	38		sec				sec
.2300	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2302	85 0a		sta $0a				sta 	iTemp0
.2304	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2306	29 3f		and #$3f			and 	#IFXMask
.2308	38		sec				sec
.2309	e9 20		sbc #$20			sbc 	#$20
.230b	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.230d	b0 02		bcs $2311			bcs 	_IFloatHaveLarger
.230f	a5 0a		lda $0a				lda 	iTemp0
.2311					_IFloatHaveLarger:
.2311	18		clc				clc 								; get the actual one back.
.2312	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2314	20 21 23	jsr $2321			jsr 	_IFShiftXToA
.2317	da		phx				phx
.2318	a2 0c		ldx #$0c			ldx 	#IFR0
.231a	20 21 23	jsr $2321			jsr 	_IFShiftXToA
.231d	fa		plx				plx
.231e	4c 99 22	jmp $2299			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2321					_IFShiftXToA:
.2321	8d fd 04	sta $04fd			sta 	IFTarget
.2324	20 94 28	jsr $2894			jsr 	IFloatCheckZero 			; check adding zero ?
.2327	f0 11		beq $233a			beq 	_IFSXExit
.2329					_IFSXLoop:
.2329	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.232b	29 3f		and #$3f			and 	#IFXMask
.232d	cd fd 04	cmp $04fd			cmp 	IFTarget
.2330	f0 08		beq $233a			beq 	_IFSXExit
.2332	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.2335	20 f4 28	jsr $28f4			jsr 	IFloatIncExponent
.2338	80 ef		bra $2329			bra 	_IFSXLoop
.233a					_IFSXExit:
.233a	60		rts				rts
.04fd					IFTarget:
>04fd							.fill 	1
.233b					IFloatMultiply:
.233b	8e fd 04	stx $04fd			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.233e	20 f6 23	jsr $23f6			jsr 	IFCalculateNewSign
.2341	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2343	05 0f		ora $0f				ora 	IFR0+IExp
.2345	29 3f		and #$3f			and 	#IFXMask
.2347	15 01		ora $01,x			ora 	IM1,x
.2349	05 0d		ora $0d				ora 	IFR0+IM1
.234b	15 02		ora $02,x			ora 	IM2,x
.234d	05 0e		ora $0e				ora 	IFR0+IM2
.234f	d0 0a		bne $235b			bne 	_IFMStandard
.2351	20 77 28	jsr $2877			jsr 	IFloatMultiply8BitRx
.2354	ad ff 04	lda $04ff			lda 	IFNewSign
.2357	85 0f		sta $0f				sta 	IFR0+IExp
.2359	18		clc				clc
.235a	60		rts				rts
.235b					_IFMStandard:
.235b	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.235d	20 ed 23	jsr $23ed			jsr 	IFMSignExtend
.2360	8d fe 04	sta $04fe			sta 	IFNewExponent
.2363	a5 0f		lda $0f				lda 	IFR0+IExp
.2365	20 ed 23	jsr $23ed			jsr 	IFMSignExtend
.2368	18		clc				clc
.2369	6d fe 04	adc $04fe			adc 	IFNewExponent
.236c	8d fe 04	sta $04fe			sta 	IFNewExponent
.236f	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2371	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister
.2374	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.2376	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.2379					_IFMLoop:
.2379	a2 18		ldx #$18			ldx 	#IFRTemp
.237b	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.237e	f0 3a		beq $23ba			beq 	_IFMExit
.2380	ae fd 04	ldx $04fd			ldx 	IFTarget 					; look at adder MSB
.2383	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2385	10 03		bpl $238a			bpl	 	_IFMTargetOkay
.2387	20 de 23	jsr $23de			jsr 	_IFMShiftAll
.238a					_IFMTargetOkay:
.238a	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.238c	29 01		and #$01			and 	#1
.238e	f0 16		beq $23a6			beq 	_IFMNoAdd
.2390	ae fd 04	ldx $04fd			ldx 	IFTarget 					; add adder
.2393	18		clc				clc
.2394	a5 0c		lda $0c			lda 	IFR0+IM0
.2396	75 00		adc $00,x		adc 		IM0,x
.2398	85 0c		sta $0c			sta 	IFR0+IM0
.239a	a5 0d		lda $0d			lda 	IFR0+IM1
.239c	75 01		adc $01,x		adc 		IM1,x
.239e	85 0d		sta $0d			sta 	IFR0+IM1
.23a0	a5 0e		lda $0e			lda 	IFR0+IM2
.23a2	75 02		adc $02,x		adc 		IM2,x
.23a4	85 0e		sta $0e			sta 	IFR0+IM2
.23a6					_IFMNoAdd:
.23a6	a5 0e		lda $0e				lda 	IFR0+IM2
.23a8	10 03		bpl $23ad			bpl 	_IFMResultOkay
.23aa	20 de 23	jsr $23de			jsr 	_IFMShiftAll
.23ad					_IFMResultOkay:
.23ad	a2 18		ldx #$18			ldx 	#IFRTemp
.23af	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.23b2	ae fd 04	ldx $04fd			ldx 	IFTarget
.23b5	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.23b8	80 bf		bra $2379			bra 	_IFMLoop
.23ba					_IFMExit:
.23ba	ad fe 04	lda $04fe			lda 	IFNewExponent 				; validate new exponent.
.23bd	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.23bf	90 0f		bcc $23d0			bcc 	_IFMOkay
.23c1	c9 e0		cmp #$e0			cmp 	#$E0
.23c3	b0 0b		bcs $23d0			bcs 	_IFMOkay
.23c5	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.23c7	f0 13		beq $23dc			beq 	_IFMError
.23c9	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.23cb	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.23ce	18		clc				clc
.23cf	60		rts				rts
.23d0					_IFMOkay:
.23d0	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.23d2	0d ff 04	ora $04ff			ora 	IFNewSign
.23d5	85 0f		sta $0f				sta 	IFR0+IExp
.23d7	18		clc				clc
.23d8	60		rts				rts
.23d9	4c ff ff	jmp $ffff			jmp 	$FFFF
.23dc					_IFMError:
.23dc	38		sec				sec
.23dd	60		rts				rts
.23de					_IFMShiftAll:
.23de	a2 0c		ldx #$0c			ldx 	#IFR0
.23e0	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.23e3	ae fd 04	ldx $04fd			ldx 	IFTarget
.23e6	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.23e9	ee fe 04	inc $04fe			inc 	IFNewExponent
.23ec	60		rts				rts
.23ed					IFMSignExtend:
.23ed	29 3f		and #$3f			and 	#IFXMask
.23ef	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.23f1	90 02		bcc $23f5			bcc 	_IFMNoSXX
.23f3	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.23f5					_IFMNoSXX:
.23f5	60		rts				rts
.23f6					IFCalculateNewSign:
.23f6	b5 03		lda $03,x			lda 	IExp,x
.23f8	45 0f		eor $0f				eor 	IFR0+IExp
.23fa	29 40		and #$40			and 	#IFSign
.23fc	8d ff 04	sta $04ff			sta 	IFNewSign
.23ff	60		rts				rts
.04fe					IFNewExponent:
>04fe							.fill 	1
.04ff					IFNewSign:
>04ff							.fill 	1
.2400					IFloatDivideInteger:
.2400	20 19 24	jsr $2419			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2403	b0 06		bcs $240b			bcs 	_IFDIExit
.2405	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.2407	20 2c 28	jsr $282c			jsr 	IFloatCopyFromRegister
.240a	18		clc				clc
.240b					_IFDIExit:
.240b	60		rts				rts
.240c					IFloatModulusInteger:
.240c	20 19 24	jsr $2419			jsr 	IFloatDivideIntegerCommon
.240f	b0 07		bcs $2418			bcs 	_IFMIExit
.2411	ae fd 04	ldx $04fd			ldx 	IFTarget
.2414	20 2c 28	jsr $282c			jsr 	IFloatCopyFromRegister
.2417	18		clc				clc
.2418					_IFMIExit:
.2418	60		rts				rts
.2419					IFloatDivideIntegerCommon:
.2419	8e fd 04	stx $04fd			stx 	IFTarget  					; this is s1, s0 = R0
.241c	20 f6 23	jsr $23f6			jsr 	IFCalculateNewSign 			; calculate sign of result
.241f	20 47 24	jsr $2447			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2422	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.2424	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.2427	f0 1c		beq $2445			beq 	_IFDIDivZero
.2429	ae fd 04	ldx $04fd			ldx 	IFTarget 					; zero Rx (S1)
.242c	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.242f	5a		phy				phy
.2430	a0 18		ldy #$18			ldy 	#24
.2432					_IFDILoop:
.2432	20 58 24	jsr $2458			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2435	20 64 24	jsr $2464			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2438	88		dey				dey
.2439	d0 f7		bne $2432			bne 	_IFDILoop 					; do it 24 times
.243b	7a		ply				ply
.243c	ad ff 04	lda $04ff			lda 	IFNewSign 					; set sign of result.
.243f	29 40		and #$40			and 	#IFSign
.2441	85 1b		sta $1b				sta 	IFRTemp+IExp
.2443	18		clc				clc 								; is okay.
.2444	60		rts				rts
.2445					_IFDIDivZero:
.2445	38		sec				sec
.2446	60		rts				rts
.2447					IFDCopyRXToRTemp:
.2447	b5 00		lda $00,x			lda 	IM0,x
.2449	85 18		sta $18				sta 	IFRTemp+IM0
.244b	b5 01		lda $01,x			lda 	IM1,x
.244d	85 19		sta $19				sta 	IFRTemp+IM1
.244f	b5 02		lda $02,x			lda 	IM2,x
.2451	85 1a		sta $1a				sta 	IFRTemp+IM2
.2453	b5 03		lda $03,x			lda 	IExp,x
.2455	85 1b		sta $1b				sta 	IFRTemp+IExp
.2457	60		rts				rts
.2458					IFDShiftSTempS1Left:
.2458	a2 18		ldx #$18			ldx 	#IFRTemp
.245a	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft
.245d	ae fd 04	ldx $04fd			ldx 	IFTarget
.2460	20 c3 28	jsr $28c3			jsr 	IFloatRotateLeft
.2463	60		rts				rts
.2464					IFDTrySubtract:
.2464	ae fd 04	ldx $04fd			ldx 	IFTarget 					; s1 = Rx
.2467	38		sec				sec 								; subtract, saving the results on the stack.
.2468	b5 00		lda $00,x			lda 	IM0,x
.246a	e5 0c		sbc $0c				sbc 	IFR0+IM0
.246c	48		pha				pha
.246d	b5 01		lda $01,x			lda 	IM1,x
.246f	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2471	48		pha				pha
.2472	b5 02		lda $02,x			lda 	IM2,x
.2474	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2476	b0 03		bcs $247b			bcs 	_IFDCanSubtract
.2478	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2479	68		pla				pla
.247a	60		rts				rts
.247b					_IFDCanSubtract:
.247b	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.247d	68		pla				pla
.247e	95 01		sta $01,x			sta 	IM1,x
.2480	68		pla				pla
.2481	95 00		sta $00,x			sta 	IM0,x
.2483	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2485	d0 06		bne $248d			bne 	_IFDCSExit
.2487	e6 19		inc $19				inc 	IFRTemp+IM1
.2489	d0 02		bne $248d			bne 	_IFDCSExit
.248b	e6 1a		inc $1a				inc 	IFRTemp+IM2
.248d					_IFDCSExit:
.248d	60		rts				rts
.248e					IFloatBitwiseAnd:
.248e	5a		phy				phy
.248f	20 d3 24	jsr $24d3			jsr 	IFPreProcessBitwise 		; set up everything.
.2492	d0 0f		bne $24a3			bne 	_IFBAExit
.2494					_IFBALoop:
.2494	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2497	35 00		and $00,x			and 	IM0,x
.2499	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.249c	e8		inx				inx
.249d	c8		iny				iny
.249e	c0 03		cpy #$03			cpy 	#3
.24a0	d0 f2		bne $2494			bne 	_IFBALoop
.24a2	18		clc				clc
.24a3					_IFBAExit:
.24a3	7a		ply				ply
.24a4	60		rts				rts
.24a5					IFloatBitwiseOr:
.24a5	5a		phy				phy
.24a6	20 d3 24	jsr $24d3			jsr 	IFPreProcessBitwise 		; set up everything.
.24a9	d0 0f		bne $24ba			bne 	_IFBAExit
.24ab					_IFBALoop:
.24ab	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.24ae	15 00		ora $00,x			ora 	IM0,x
.24b0	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.24b3	e8		inx				inx
.24b4	c8		iny				iny
.24b5	c0 03		cpy #$03			cpy 	#3
.24b7	d0 f2		bne $24ab			bne 	_IFBALoop
.24b9	18		clc				clc
.24ba					_IFBAExit:
.24ba	7a		ply				ply
.24bb	60		rts				rts
.24bc					IFloatBitwiseXor:
.24bc	5a		phy				phy
.24bd	20 d3 24	jsr $24d3			jsr 	IFPreProcessBitwise 		; set up everything.
.24c0	d0 0f		bne $24d1			bne 	_IFBAExit
.24c2					_IFBALoop:
.24c2	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.24c5	55 00		eor $00,x			eor 	IM0,x
.24c7	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.24ca	e8		inx				inx
.24cb	c8		iny				iny
.24cc	c0 03		cpy #$03			cpy 	#3
.24ce	d0 f2		bne $24c2			bne 	_IFBALoop
.24d0	18		clc				clc
.24d1					_IFBAExit:
.24d1	7a		ply				ply
.24d2	60		rts				rts
.24d3					IFPreProcessBitwise:
.24d3	a0 00		ldy #$00			ldy 	#0 							; set index.
.24d5	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.24d7	15 03		ora $03,x			ora 	IExp,x
.24d9	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.24db	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.24dd	38		sec				sec 								; carry set just in cases.
.24de	60		rts				rts
.24df					IFloatAbsoluteR0:
.24df	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.24e1	29 bf		and #$bf			and 	#IFSign ^ 255
.24e3	85 0f		sta $0f				sta 	IFR0+IExp
.24e5	18		clc				clc
.24e6	60		rts				rts
.24e7					IFloatSquareRootR0:
.24e7	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.24e9	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.24ec	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.24ee	29 40		and #$40			and 	#IFSign
.24f0	d0 2f		bne $2521			bne 	_IFSRFail
.24f2	20 d2 28	jsr $28d2			jsr 	IFloatNormalise 			; it will work better !
.24f5	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.24f7	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister
.24fa	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.24fc	20 ed 23	jsr $23ed			jsr 	IFMSignExtend 				; sign extended version of the exponent
.24ff	18		clc				clc
.2500	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2502	85 0f		sta $0f				sta 	IFR0+IExp
.2504	4a		lsr a				lsr 	a 							; which we can halve.
.2505	38		sec				sec 								; convert back
.2506	e9 17		sbc #$17			sbc 	#23
.2508	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.250a	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.250c	20 23 25	jsr $2523			jsr 	_IFSRNewton
.250f	20 23 25	jsr $2523			jsr 	_IFSRNewton
.2512	20 23 25	jsr $2523			jsr 	_IFSRNewton
.2515	20 23 25	jsr $2523			jsr 	_IFSRNewton
.2518	18		clc				clc
.2519	60		rts				rts
.251a					_IFSRZero:
.251a	a2 0c		ldx #$0c			ldx 	#IFR0
.251c	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.251f	18		clc				clc
.2520	60		rts				rts
.2521					_IFSRFail:
.2521	38		sec				sec
.2522	60		rts				rts
.2523					_IFSRNewton:
.2523	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.2525	20 ea 27	jsr $27ea			jsr 	IFloatPushRx
.2528	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.252a	20 ea 27	jsr $27ea			jsr 	IFloatPushRx
.252d	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.252f	20 be 25	jsr $25be			jsr 	IFloatDivideFloat
.2532	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2534	20 0b 28	jsr $280b			jsr 	IFloatPullRx
.2537	20 91 22	jsr $2291			jsr 	IFloatAdd 					; now guess + original/guess
.253a	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.253c	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.253f	a2 10		ldx #$10			ldx 	#IFR1
.2541	20 0b 28	jsr $280b			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2544	60		rts				rts
.2545					IFloatFractionalR0:
.2545	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2547	29 3f		and #$3f			and 	#IFXMask
.2549	f0 17		beq $2562			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.254b	20 df 24	jsr $24df			jsr 	IFloatAbsoluteR0 			; absolute value R9
.254e	a2 0c		ldx #$0c			ldx 	#IFR0
.2550	20 d2 28	jsr $28d2			jsr 	IFloatNormalise 			; normalise R0
.2553	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2555	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister
.2558	20 9b 25	jsr $259b			jsr 	IFloatIntegerR0 			; take integer part of R0
.255b	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.255d	20 8a 22	jsr $228a			jsr 	IFloatSubtract
.2560	80 05		bra $2567			bra 	_FIPExit
.2562					_FIPZero:
.2562	a2 0c		ldx #$0c			ldx 	#IFR0
.2564	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.2567					_FIPExit:
.2567	18		clc				clc
.2568	60		rts				rts
.2569					IFloatCompare:
.2569	20 8a 22	jsr $228a			jsr 	IFloatSubtract 				; subtract R0 from RX.
.256c	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.256e	05 0f		ora $0f				ora 	IFR0+IExp
.2570	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2572	29 3f		and #$3f			and 	#IFXMask
.2574	d0 19		bne $258f			bne 	_IFCNonInteger
.2576	20 94 28	jsr $2894			jsr 	IFloatCheckZero 			; check if zero
.2579	f0 0f		beq $258a			beq 	_IFCZero
.257b					_IFCReturnSign:
.257b	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.257d	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.257f	48		pha				pha
.2580	a9 01		lda #$01			lda 	#1
.2582	20 9d 28	jsr $289d			jsr 	IFloatSetByte 				; return to +1
.2585	68		pla				pla 								; sign bit back
.2586	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2588	18		clc				clc
.2589	60		rts				rts
.258a					_IFCZero:
.258a	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.258d	18		clc				clc
.258e	60		rts				rts
.258f					_IFCNonInteger:
.258f	a5 0c		lda $0c				lda 	IFR0+IM0
.2591	29 00		and #$00			and		#$00
.2593	05 0d		ora $0d				ora 	IFR0+IM1
.2595	05 0e		ora $0e				ora 	IFR0+IM2
.2597	f0 f1		beq $258a			beq 	_IFCZero 					; near enough !
.2599	80 e0		bra $257b			bra 	_IFCReturnSign 				; return the sign of the difference.
.259b					IFloatIntegerR0:
.259b	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.259d	29 3f		and #$3f			and 	#IFXMask
.259f	f0 1b		beq $25bc			beq 	_FIPExit 					; if so do nothing
.25a1	a2 0c		ldx #$0c			ldx 	#IFR0
.25a3	20 d2 28	jsr $28d2			jsr 	IFloatNormalise 			; normalise
.25a6	20 94 28	jsr $2894			jsr 	IFloatCheckZero 			; is it zero ?
.25a9	f0 0e		beq $25b9			beq 	_FIPZero 					; if so return zero.
.25ab					_FIPShift:
.25ab	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.25ad	29 20		and #$20			and 	#$20 						; still -ve
.25af	f0 0b		beq $25bc			beq 	_FIPExit
.25b1	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight 			; shift mantissa right
.25b4	20 f4 28	jsr $28f4			jsr 	IFloatIncExponent 			; bump exponent
.25b7	80 f2		bra $25ab			bra 	_FIPShift
.25b9					_FIPZero:
.25b9	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.25bc					_FIPExit:
.25bc	18		clc				clc
.25bd	60		rts				rts
.25be					IFloatDivideFloat:
.25be	8e fd 04	stx $04fd			stx 	IFTarget  					; this is s1, s0 = R0
.25c1	20 f6 23	jsr $23f6			jsr 	IFCalculateNewSign 			; calculate sign of result
.25c4	20 d2 28	jsr $28d2			jsr 	IFloatNormalise 			; normalise RX
.25c7	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.25c9	20 d2 28	jsr $28d2			jsr 	IFloatNormalise
.25cc	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.25cf	f0 56		beq $2627			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.25d1	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.25d3	20 ed 23	jsr $23ed			jsr 	IFMSignExtend
.25d6	8d fe 04	sta $04fe			sta 	IFNewExponent
.25d9	ae fd 04	ldx $04fd			ldx 	IFTarget 					; calculate s1.exponent
.25dc	b5 03		lda $03,x			lda 	IExp,x
.25de	20 ed 23	jsr $23ed			jsr 	IFMSignExtend
.25e1	38		sec				sec
.25e2	ed fe 04	sbc $04fe			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.25e5	38		sec				sec
.25e6	e9 17		sbc #$17			sbc 	#23
.25e8	8d fe 04	sta $04fe			sta 	IFNewExponent
.25eb	20 29 26	jsr $2629			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.25ee	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.25f0	10 08		bpl $25fa			bpl 	_IFDFNoShiftResult
.25f2	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.25f4	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.25f7	ee fe 04	inc $04fe			inc 	IFNewExponent
.25fa					_IFDFNoShiftResult:
.25fa	ad fe 04	lda $04fe			lda 	IFNewExponent 				; underflow/overflow check.
.25fd	30 06		bmi $2605			bmi 	_IFDFCheckUnderflow
.25ff	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2601	b0 24		bcs $2627			bcs 	_IFDFDivZero
.2603	80 11		bra $2616			bra		_IFDFExit
.2605					_IFDFCheckUnderflow:
.2605	ad fe 04	lda $04fe			lda 	IFNewExponent 				; shift into a legal exponent.
.2608	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.260a	b0 0a		bcs $2616			bcs 	_IFDFExit
.260c	ee fe 04	inc $04fe			inc 	IFNewExponent
.260f	a2 18		ldx #$18			ldx 	#IFRTemp
.2611	20 ca 28	jsr $28ca			jsr 	IFloatShiftRight
.2614	80 ef		bra $2605			bra 	_IFDFCheckUnderflow
.2616					_IFDFExit:
.2616	ad fe 04	lda $04fe			lda 	IFNewExponent 				; combine exponent and sign.
.2619	29 3f		and #$3f			and 	#IFXMask
.261b	0d ff 04	ora $04ff			ora 	IFNewSign
.261e	85 1b		sta $1b				sta 	IFRTemp+IExp
.2620	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.2622	20 2c 28	jsr $282c			jsr 	IFloatCopyFromRegister
.2625	18		clc				clc
.2626	60		rts				rts
.2627					_IFDFDivZero:
.2627	38		sec				sec
.2628	60		rts				rts
.2629					IFloatDivideSupport:
.2629	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.262b	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.262e	5a		phy				phy 								; main division loop x 23
.262f	a0 17		ldy #$17			ldy 	#23
.2631					_IFDSLoop:
.2631	20 64 24	jsr $2464			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2634	20 58 24	jsr $2458			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2637	88		dey				dey
.2638	d0 f7		bne $2631			bne 	_IFDSLoop 					; do it 24 times
.263a	7a		ply				ply
.263b	60		rts				rts
.263c					IFloatIntegerToStringR0:
.263c	8d 00 05	sta $0500			sta 	IFBase 						; save base to use.
.263f	20 1c 29	jsr $291c			jsr 	IFloatBufferReset			; empty buffer
.2642	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2644	29 3f		and #$3f			and 	#IFXMask
.2646	d0 1e		bne $2666			bne 	_IFIFail
.2648	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.264a	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.264d	f0 0e		beq $265d			beq 	_IFINotNegative
.264f	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2651	29 40		and #$40			and 	#IFSign
.2653	f0 08		beq $265d			beq 	_IFINotNegative
.2655	a9 2d		lda #$2d			lda 	#"-"						; output -
.2657	20 2b 29	jsr $292b			jsr 	IFloatBufferWrite
.265a	20 a6 28	jsr $28a6			jsr 	IFloatNegate 				; tidy up !
.265d					_IFINotNegative:
.265d	20 68 26	jsr $2668			jsr 	_IFIRecursiveConvert 		; start converting
.2660	20 23 29	jsr $2923			jsr 	IFloatGetBufferAddress
.2663	18		clc				clc
.2664	80 01		bra $2667			bra 	_IFIExit
.2666					_IFIFail:
.2666	38		sec				sec
.2667					_IFIExit:
.2667	60		rts				rts
.2668					_IFIRecursiveConvert:
.2668	a2 10		ldx #$10			ldx 	#IFR1
.266a	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister 		; R0->R1
.266d	a2 0c		ldx #$0c			ldx 	#IFR0
.266f	ad 00 05	lda $0500			lda 	IFBase 						; Base -> R0
.2672	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.2675	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2677	20 00 24	jsr $2400			jsr 	IFloatDivideInteger
.267a	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.267c	20 94 28	jsr $2894			jsr 	IFloatCheckZero
.267f	f0 09		beq $268a			beq 	_IFIOutDigit
.2681	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2683	48		pha				pha
.2684	20 68 26	jsr $2668			jsr 	_IFIRecursiveConvert 		; convert the divider
.2687	68		pla				pla
.2688	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.268a					_IFIOutDigit:
.268a	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.268c	c9 0a		cmp #$0a			cmp	 	#10
.268e	90 02		bcc $2692			bcc 	_IFINotHex
.2690	69 06		adc #$06			adc 	#6
.2692					_IFINotHex:
.2692	69 30		adc #$30			adc 	#48
.2694	20 2b 29	jsr $292b			jsr 	IFloatBufferWrite
.2697	60		rts				rts
.0500					IFBase:
>0500							.fill 	1
.2698					IFloatFloatToStringR0:
.2698	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.269a	20 ea 27	jsr $27ea			jsr 	IFloatPushRx
.269d	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister
.26a0	20 9b 25	jsr $259b			jsr 	IFloatIntegerR0				; make R0 integer
.26a3	a9 0a		lda #$0a			lda 	#10 						; base 10.
.26a5	20 3c 26	jsr $263c			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.26a8	9c 01 05	stz $0501			stz 	IFloatDecimalCount 			; zero the decimal count.
.26ab	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.26ad	29 3f		and #$3f			and 	#IFXMask
.26af	f0 44		beq $26f5			beq 	_IFFSExit
.26b1					_IFloatFracLoop:
.26b1	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.26b3	20 2c 28	jsr $282c			jsr 	IFloatCopyFromRegister
.26b6	20 45 25	jsr $2545			jsr 	IFloatFractionalR0
.26b9	20 d2 28	jsr $28d2			jsr 	IFloatNormalise
.26bc	a2 14		ldx #$14			ldx 	#IFR2
.26be	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister 		; copy to R2
.26c1	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.26c3	a9 0a		lda #$0a			lda 	#10
.26c5	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.26c8	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.26ca	20 3b 23	jsr $233b			jsr 	IFloatMultiply
.26cd	a2 14		ldx #$14			ldx 	#IFR2
.26cf	20 3d 28	jsr $283d			jsr 	IFloatCopyToRegister
.26d2	20 9b 25	jsr $259b			jsr 	IFloatIntegerR0 			; get integer part of R0
.26d5	ad 01 05	lda $0501			lda 	IFloatDecimalCount 			; done 5 dp, no more
.26d8	c9 03		cmp #$03			cmp 	#3
.26da	f0 16		beq $26f2			beq 	_IFFSExitStripZero
.26dc	ad 01 05	lda $0501			lda 	IFloatDecimalCount 			; written the DP yet ?
.26df	d0 05		bne $26e6			bne 	_IFloatNotFirst
.26e1	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.26e3	20 2b 29	jsr $292b			jsr 	IFloatBufferWrite
.26e6					_IFloatNotFirst:
.26e6	ee 01 05	inc $0501			inc 	IFloatDecimalCount
.26e9	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.26eb	09 30		ora #$30			ora 	#"0"						; ASCII
.26ed	20 2b 29	jsr $292b			jsr 	IFloatBufferWrite 			; write to the buffer.
.26f0	80 bf		bra $26b1			bra 	_IFloatFracLoop
.26f2					_IFFSExitStripZero:
.26f2	20 3a 29	jsr $293a			jsr 	IFloatStripTrailingZeros
.26f5					_IFFSExit:
.26f5	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.26f7	20 0b 28	jsr $280b			jsr 	IFloatPullRx
.26fa	20 23 29	jsr $2923			jsr 	IFloatGetBufferAddress
.26fd	18		clc				clc
.26fe	60		rts				rts
.0501					IFloatDecimalCount:
>0501							.fill 	1
.26ff					IFloatStringToFloatR0:
.26ff	8d 02 05	sta $0502			sta 	IFCount 					; save it out.
.2702	86 0a		stx $0a				stx 	iTemp0
.2704	84 0b		sty $0b				sty 	iTemp0+1
.2706	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2708	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.270b	9c 03 05	stz $0503			stz 	IFSignFlag 					; clear the sign flag
.270e	20 9b 27	jsr $279b			jsr 	IFSTFGetNext 				; get first
.2711	f0 1b		beq $272e			beq 	_IFSTFFail 					; no character
.2713	90 10		bcc $2725			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2715	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2717	d0 15		bne $272e			bne 	_IFSTFFail
.2719	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.271b	8d 03 05	sta $0503			sta 	IFSignFlag
.271e					_IFSTFLoop:
.271e	20 9b 27	jsr $279b			jsr 	IFSTFGetNext 				; get next
.2721	b0 0b		bcs $272e			bcs 	_IFSTFFail 					; bad character.
.2723	f0 11		beq $2736			beq 	_IFSTFExit 					; end of data
.2725					_IFSTFHaveChar:
.2725	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2727	f0 08		beq $2731			beq 	_IFSTFDecimal
.2729	20 bf 27	jsr $27bf			jsr 	IFSTFAddR0 					; add number in
.272c	80 f0		bra $271e			bra 	_IFSTFLoop 					; keep going until . or end.
.272e					_IFSTFFail:
.272e	38		sec				sec
.272f	80 0d		bra $273e			bra 	_IFSTFReturn
.2731					_IFSTFDecimal:
.2731	20 46 27	jsr $2746			jsr 	IFSTFDecimal 				; call the decimal places code.
.2734	b0 08		bcs $273e			bcs 	_IFSTFReturn 				; error
.2736					_IFSTFExit:
.2736	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2738	0d 03 05	ora $0503			ora 	IFSignFlag
.273b	85 0f		sta $0f				sta 	IFR0+IExp
.273d	18		clc				clc
.273e					_IFSTFReturn:
.273e	60		rts				rts
.273f					IFloatAddDecimalToR0:
.273f	8d 02 05	sta $0502			sta 	IFCount 					; save it out.
.2742	86 0a		stx $0a				stx 	iTemp0
.2744	84 0b		sty $0b				sty 	iTemp0+1
.2746					IFSTFDecimal:
.2746	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2748	20 ea 27	jsr $27ea			jsr 	IFloatPushRx
.274b	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.274d	20 9b 28	jsr $289b			jsr 	IFloatSetZero
.2750	9c 04 05	stz $0504			stz 	IFDecimalPlaces
.2753					_IFSTDLoop:
.2753	20 9b 27	jsr $279b			jsr 	IFSTFGetNext 				; get next
.2756	b0 41		bcs $2799			bcs 	_IFSTFFail2 				; bad character.
.2758	f0 11		beq $276b			beq 	_IFSTFComplete 				; end of data, work out the result.
.275a	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.275c	f0 39		beq $2797			beq 	_IFSTFExit2
.275e	20 bf 27	jsr $27bf			jsr 	IFSTFAddR0 					; add number in
.2761	ee 04 05	inc $0504			inc 	IFDecimalPlaces 			; count decimals
.2764	ad 04 05	lda $0504			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2767	c9 03		cmp #$03			cmp 	#3
.2769	90 e8		bcc $2753			bcc 	_IFSTDLoop
.276b					_IFSTFComplete:
.276b	ad 04 05	lda $0504			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.276e	f0 27		beq $2797			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2770	3a		dec a				dec 	a 							; table indexed from 1.
.2771	0a		asl a				asl 	a
.2772	0a		asl a				asl 	a
.2773	aa		tax				tax
.2774	bd d6 27	lda $27d6,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2777	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2779	bd d7 27	lda $27d7,x			lda 	TableTen+1,x
.277c	85 11		sta $11				sta  	IFR1+IM1
.277e	bd d8 27	lda $27d8,x			lda 	TableTen+2,x
.2781	85 12		sta $12				sta  	IFR1+IM2
.2783	bd d9 27	lda $27d9,x			lda 	TableTen+3,x
.2786	85 13		sta $13				sta  	IFR1+IExp
.2788	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.278a	20 3b 23	jsr $233b			jsr 	IFloatMultiply
.278d	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.278f	20 0b 28	jsr $280b			jsr 	IFloatPullRx
.2792	a2 10		ldx #$10			ldx 	#IFR1
.2794	20 91 22	jsr $2291			jsr 	IFloatAdd
.2797					_IFSTFExit2:
.2797	18		clc				clc
.2798	60		rts				rts
.2799					_IFSTFFail2:
.2799	38		sec				sec
.279a	60		rts				rts
.279b					IFSTFGetNext:
.279b	ad 02 05	lda $0502			lda 	IFCount  					; if count is zero, return with Z set.
.279e	f0 19		beq $27b9			beq 	_IFSTFReturnOk
.27a0	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.27a2	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.27a4	d0 02		bne $27a8			bne 	_IFSTFGNNoCarry
.27a6	e6 0b		inc $0b				inc 	iTemp0+1
.27a8					_IFSTFGNNoCarry:
.27a8	ce 02 05	dec $0502			dec 	IFCount 					; dec count.
.27ab	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.27ad	f0 08		beq $27b7			beq 	_IFSTFGOkay
.27af	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.27b1	90 08		bcc $27bb			bcc 	_IFSTFGFail
.27b3	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.27b5	b0 04		bcs $27bb			bcs 	_IFSTFGFail
.27b7					_IFSTFGOkay:
.27b7	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.27b9					_IFSTFReturnOk:
.27b9	18		clc				clc
.27ba	60		rts				rts
.27bb					_IFSTFGFail:
.27bb	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.27bd	38		sec				sec
.27be	60		rts				rts
.27bf					IFSTFAddR0:
.27bf	29 0f		and #$0f			and 	#15 						; to int value
.27c1	48		pha				pha 								; save it.
.27c2	a9 0a		lda #$0a			lda 	#10
.27c4	a2 10		ldx #$10			ldx 	#IFR1
.27c6	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.27c9	20 3b 23	jsr $233b			jsr 	IFloatMultiply
.27cc	68		pla				pla
.27cd	a2 10		ldx #$10			ldx 	#IFR1
.27cf	20 9d 28	jsr $289d			jsr 	IFloatSetByte
.27d2	20 91 22	jsr $2291			jsr 	IFloatAdd
.27d5	60		rts				rts
.0502					IFCount:
>0502							.fill 	1
.0503					IFSignFlag:
>0503							.fill 	1
.0504					IFDecimalPlaces:
>0504							.fill 	1
.27d6					TableTen:
>27d6	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>27da	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>27de	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>27e2	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>27e6	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.27ea					IFloatPushRx:
.27ea	5a		phy				phy
.27eb	ac 05 05	ldy $0505			ldy 	IFStackIndex
.27ee	b5 00		lda $00,x			lda 	IM0,x
.27f0	99 06 05	sta $0506,y			sta 	IFStack,y
.27f3	b5 01		lda $01,x			lda 	IM1,x
.27f5	99 07 05	sta $0507,y			sta 	IFStack+1,y
.27f8	b5 02		lda $02,x			lda 	IM2,x
.27fa	99 08 05	sta $0508,y			sta 	IFStack+2,y
.27fd	b5 03		lda $03,x			lda 	IExp,x
.27ff	99 09 05	sta $0509,y			sta 	IFStack+3,y
.2802	c8		iny				iny
.2803	c8		iny				iny
.2804	c8		iny				iny
.2805	c8		iny				iny
.2806	8c 05 05	sty $0505			sty 	IFStackIndex
.2809	7a		ply				ply
.280a	60		rts				rts
.280b					IFloatPullRx:
.280b	5a		phy				phy
.280c	ac 05 05	ldy $0505			ldy 	IFStackIndex
.280f	88		dey				dey
.2810	88		dey				dey
.2811	88		dey				dey
.2812	88		dey				dey
.2813	b9 06 05	lda $0506,y			lda 	IFStack,y
.2816	95 00		sta $00,x			sta 	IM0,x
.2818	b9 07 05	lda $0507,y			lda 	IFStack+1,y
.281b	95 01		sta $01,x			sta 	IM1,x
.281d	b9 08 05	lda $0508,y			lda 	IFStack+2,y
.2820	95 02		sta $02,x			sta 	IM2,x
.2822	b9 09 05	lda $0509,y			lda 	IFStack+3,y
.2825	95 03		sta $03,x			sta 	IExp,x
.2827	8c 05 05	sty $0505			sty 	IFStackIndex
.282a	7a		ply				ply
.282b	60		rts				rts
.0505					IFStackIndex:
>0505							.fill 	1
.0506					IFStack:
>0506							.fill 	16*4
.282c					IFloatCopyFromRegister:
.282c	b5 00		lda $00,x			lda 	0,x
.282e	85 0c		sta $0c				sta 	IFR0
.2830	b5 01		lda $01,x			lda 	1,x
.2832	85 0d		sta $0d				sta 	IFR0+1
.2834	b5 02		lda $02,x			lda 	2,x
.2836	85 0e		sta $0e				sta 	IFR0+2
.2838	b5 03		lda $03,x			lda 	3,x
.283a	85 0f		sta $0f				sta 	IFR0+3
.283c	60		rts				rts
.283d					IFloatCopyToRegister:
.283d	a5 0c		lda $0c				lda 	IFR0
.283f	95 00		sta $00,x			sta 	0,x
.2841	a5 0d		lda $0d				lda 	IFR0+1
.2843	95 01		sta $01,x			sta 	1,x
.2845	a5 0e		lda $0e				lda 	IFR0+2
.2847	95 02		sta $02,x			sta 	2,x
.2849	a5 0f		lda $0f				lda 	IFR0+3
.284b	95 03		sta $03,x			sta 	3,x
.284d	60		rts				rts
.284e					IFloatLoadInline:
.284e	68		pla				pla 								; pop address off to iTemp0
.284f	85 0a		sta $0a				sta 	iTemp0
.2851	68		pla				pla
.2852	85 0b		sta $0b				sta 	iTemp0+1
.2854	a0 01		ldy #$01			ldy 	#1
.2856	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2858	95 00		sta $00,x			sta 	0,x
.285a	c8		iny				iny
.285b	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.285d	95 01		sta $01,x			sta 	1,x
.285f	c8		iny				iny
.2860	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2862	95 02		sta $02,x			sta 	2,x
.2864	c8		iny				iny
.2865	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2867	95 03		sta $03,x			sta 	3,x
.2869	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.286a	a5 0a		lda $0a				lda 	iTemp0
.286c	69 05		adc #$05			adc 	#5
.286e	85 0a		sta $0a				sta 	iTemp0
.2870	90 02		bcc $2874			bcc 	_IFLINoCarry
.2872	e6 0b		inc $0b				inc 	iTemp0+1
.2874					_IFLINoCarry:
.2874	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2877					IFloatMultiply8BitRx:
.2877	5a		phy		        phy
.2878	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.287a	a4 0c		ldy $0c		        ldy     IFR0+IM0
.287c	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.287d	85 0c		sta $0c		        sta     IFR0+IM0
.287f	84 0d		sty $0d		        sty     IFR0+IM1
.2881	a9 00		lda #$00	        lda     #0
.2883	a0 08		ldy #$08	        ldy     #8
.2885					_IFMLoop:
.2885	90 03		bcc $288a	        bcc     _IFMNoAdd
.2887	18		clc		        clc
.2888	65 0d		adc $0d		        adc     IFR0+IM1
.288a					_IFMNoAdd:
.288a	6a		ror a		        ror     a
.288b	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.288d	88		dey		        dey
.288e	d0 f5		bne $2885	        bne     _IFMLoop
.2890	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2892	7a		ply		        ply
.2893	60		rts		        rts
.2894					IFloatCheckZero:
.2894	b5 00		lda $00,x			lda 	IM0,x
.2896	15 01		ora $01,x			ora 	IM1,x
.2898	15 02		ora $02,x			ora 	IM2,x
.289a	60		rts				rts
.289b					IFloatSetZero:
.289b	a9 00		lda #$00			lda 	#0
.289d					IFloatSetByte:
.289d	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.289f	74 01		stz $01,x			stz 	IM1,x
.28a1	74 02		stz $02,x			stz 	IM2,x
.28a3	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.28a5	60		rts				rts
.28a6					IFloatNegate:
.28a6	b5 03		lda $03,x			lda 	IExp,x
.28a8	49 40		eor #$40			eor 	#IFSign
.28aa	95 03		sta $03,x			sta 	IExp,x
.28ac	18		clc				clc
.28ad	60		rts				rts
.28ae					IFloatMantissaNegate:
.28ae	38		sec				sec
.28af	a9 00		lda #$00			lda 	#0
.28b1	f5 00		sbc $00,x			sbc 	IM0,x
.28b3	95 00		sta $00,x			sta 	IM0,x
.28b5	a9 00		lda #$00			lda 	#0
.28b7	f5 01		sbc $01,x			sbc 	IM1,x
.28b9	95 01		sta $01,x			sta 	IM1,x
.28bb	a9 00		lda #$00			lda 	#0
.28bd	f5 02		sbc $02,x			sbc 	IM2,x
.28bf	95 02		sta $02,x			sta 	IM2,x
.28c1	60		rts				rts
.28c2					IFloatShiftLeft:
.28c2	18		clc				clc
.28c3					IFloatRotateLeft:
.28c3	36 00		rol $00,x			rol 	IM0,x
.28c5	36 01		rol $01,x			rol 	IM1,x
.28c7	36 02		rol $02,x			rol 	IM2,x
.28c9	60		rts				rts
.28ca					IFloatShiftRight:
.28ca	18		clc				clc
.28cb					IFloatRotateRight:
.28cb	76 02		ror $02,x			ror 	IM2,x
.28cd	76 01		ror $01,x			ror 	IM1,x
.28cf	76 00		ror $00,x			ror 	IM0,x
.28d1	60		rts				rts
.28d2					IFloatNormalise:
.28d2	20 94 28	jsr $2894			jsr 	IFloatCheckZero 			; is it zero
.28d5	f0 18		beq $28ef			beq 	_IFNExitZero 				; if so exit
.28d7					_IFNLoop:
.28d7	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.28d9	29 c0		and #$c0			and 	#$C0
.28db	c9 40		cmp #$40			cmp 	#$40
.28dd	f0 13		beq $28f2			beq 	_IFNExitOkay 				; if so , then we are done.
.28df	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.28e1	29 3f		and #$3f			and 	#$3F
.28e3	c9 20		cmp #$20			cmp 	#$20
.28e5	f0 0b		beq $28f2			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.28e7	20 08 29	jsr $2908			jsr 	IFloatDecExponent
.28ea	20 c2 28	jsr $28c2			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.28ed	80 e8		bra $28d7			bra 	_IFNLoop
.28ef					_IFNExitZero:
.28ef	20 9b 28	jsr $289b			jsr 	IFloatSetZero 				; set the result to zero
.28f2					_IFNExitOkay:
.28f2	18		clc				clc  								; return with CC.
.28f3	60		rts				rts
.28f4					IFloatIncExponent:
.28f4	b5 03		lda $03,x			lda 	IExp,x
.28f6	48		pha				pha
.28f7	29 c0		and #$c0			and 	#$C0
.28f9	8d 46 05	sta $0546			sta 	IFXTemp
.28fc	68		pla				pla
.28fd	1a		inc a				inc 	a
.28fe	29 3f		and #$3f			and 	#$3F
.2900	48		pha				pha
.2901	0d 46 05	ora $0546			ora 	IFXTemp
.2904	95 03		sta $03,x			sta 	IExp,x
.2906	68		pla				pla
.2907	60		rts				rts
.2908					IFloatDecExponent:
.2908	b5 03		lda $03,x			lda 	IExp,x
.290a	48		pha				pha
.290b	29 c0		and #$c0			and 	#$C0
.290d	8d 46 05	sta $0546			sta 	IFXTemp
.2910	68		pla				pla
.2911	3a		dec a				dec 	a
.2912	29 3f		and #$3f			and 	#$3F
.2914	48		pha				pha
.2915	0d 46 05	ora $0546			ora 	IFXTemp
.2918	95 03		sta $03,x			sta 	IExp,x
.291a	68		pla				pla
.291b	60		rts				rts
.0546					IFXTemp:
>0546							.fill 	1
.291c					IFloatBufferReset:
.291c	9c 47 05	stz $0547			stz 	IFBufferCount
.291f	9c 48 05	stz $0548			stz 	IFBuffer
.2922	60		rts				rts
.2923					IFloatGetBufferAddress:
.2923	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2925	a2 48		ldx #$48			ldx 	#(IFBuffer & $FF)
.2927	ad 47 05	lda $0547			lda 	IFBufferCount
.292a	60		rts				rts
.292b					IFloatBufferWrite:
.292b	da		phx				phx
.292c	ae 47 05	ldx $0547			ldx 	IFBufferCount
.292f	9d 48 05	sta $0548,x			sta 	IFBuffer,x
.2932	9e 49 05	stz $0549,x			stz 	IFBuffer+1,x
.2935	ee 47 05	inc $0547			inc 	IFBufferCount
.2938	fa		plx				plx
.2939	60		rts				rts
.293a					IFloatStripTrailingZeros:
.293a	ae 47 05	ldx $0547			ldx 	IFBufferCount
.293d	bd 47 05	lda $0547,x			lda 	IFBuffer-1,x
.2940	c9 30		cmp #$30			cmp		#"0"
.2942	d0 0f		bne $2953			bne 	_IFSTExit
.2944	bd 46 05	lda $0546,x			lda 	IFBuffer-2,x
.2947	c9 2e		cmp #$2e			cmp 	#"."
.2949	f0 08		beq $2953			beq 	_IFSTExit
.294b	ce 47 05	dec $0547			dec 	IFBufferCount
.294e	9e 47 05	stz $0547,x			stz 	IFBuffer-1,x
.2951	80 e7		bra $293a			bra 	IFloatStripTrailingZeros
.2953					_IFSTExit:
.2953	60		rts				rts
.0547					IFBufferCount:
>0547							.fill 	1
.0548					IFBuffer:
>0548							.fill 	25
.2954					IFloatCheck:
.2954	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2956	09 40		ora #$40			ora 	#IFSign
.2958	85 0f		sta $0f				sta 	IFR0+IExp
.295a	20 91 22	jsr $2291			jsr 	IFloatAdd 					; add allowed to error.
.295d	a2 0c		ldx #$0c			ldx 	#IFR0
.295f	20 94 28	jsr $2894			jsr 	IFloatCheckZero 			; error if < 0
.2962	f0 06		beq $296a			beq 	_IFAOkay
.2964	a5 0f		lda $0f				lda 	IFR0+IExp
.2966	29 40		and #$40			and 	#IFSign
.2968	d0 01		bne $296b			bne 	_IFAFail
.296a					_IFAOkay:
.296a	60		rts				rts
.296b					_IFAFail:
.296b	38		sec				sec
.296c	68		pla				pla 								; get address - 2
.296d	e9 02		sbc #$02			sbc 	#2
.296f	aa		tax				tax
.2970	68		pla				pla
.2971	e9 00		sbc #$00			sbc 	#0
.2973	a8		tay				tay
.2974	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2976					_IFAStop:
>2976	db						.byte 	$DB 						; display an error AA ADR ADR
.2977	80 fd		bra $2976			bra 	_IFAStop

;******  Return to file: basic.asm

.2979					NotImplemented:
.2979	a9 ff		lda #$ff			lda 	#$FF
.297b	80 04		bra $2981			bra 	EnterDbg
.297d					ErrorHandler:
.297d	fa		plx				plx
.297e	7a		ply				ply
.297f	a9 ee		lda #$ee			lda 	#$EE
.2981					EnterDbg:
>2981	db						.byte 	$DB
.2982	4c 81 29	jmp $2981			jmp 	EnterDbg

;******  End of listing
