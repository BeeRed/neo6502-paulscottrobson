
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Fri Jul  7 15:48:56 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 f4 23	jsr $23f4			jsr 	PGMSetBaseAddress
.1007	20 ad 30	jsr $30ad			jsr 	IFInitialise 				; setup math library
.100a	4c fc 16	jmp $16fc			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="R"					AM_RELATIVE 	= 'R' 						; bra nnnn
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="T"					AM_ABSOLUTEI  	= 'T' 						; jmp (nnnn)   [only instance]
="U"					AM_ABSOLUTEIX	= 'U' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d4					AM_ZIND 	= ('T'|AM_ZPAGE) 				; lda (nn)
=$d5					AM_ZINDX	= ('U'|AM_ZPAGE) 				; lda (nn,x)
=$d6					AM_ZINDY	= ('V'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90
=$8d91					PR_OPT = $8d91

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.100d					Command_AssemblerStart:
.100d					_CALoop:
.100d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.100f	c8		iny				iny 								; consume it.
.1010	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.1012	f0 19		beq $102d			beq 	_CALabel
.1014	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.1016	f0 41		beq $1059			beq 	_CAExit
.1018	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.101a	f0 f1		beq $100d			beq 	_CALoop
.101c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.101e	f0 18		beq $1038			beq 	_CAEnd
.1020	c9 f7		cmp #$f7			cmp 	#PR_AND	 					; AND is an opcode *and* a keyword
.1022	f0 0e		beq $1032			beq 	_CAOpcode
.1024	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.1026	c9 40		cmp #$40			cmp 	#$40
.1028	f0 08		beq $1032			beq 	_CAOpcode
.102a	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.102d					_CALabel:
.102d	20 b7 12	jsr $12b7			jsr 	ASLabel 					; handle a label
.1030	80 db		bra $100d			bra 	_CALoop
.1032					_CAOpcode:
.1032	88		dey				dey 								; get it back
.1033	20 ce 11	jsr $11ce			jsr 	ASOpcode 					; assemble that opcode.
.1036	80 d5		bra $100d			bra 	_CALoop
.1038	18		clc		_CAEnd:	clc 								; next line
.1039	b2 18		lda ($18)			lda 	(codePtr)
.103b	65 18		adc $18				adc 	codePtr
.103d	85 18		sta $18				sta 	codePtr
.103f	90 02		bcc $1043			bcc 	_CANoCarry
.1041	e6 19		inc $19				inc 	codePtr+1
.1043					_CANoCarry:
.1043	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1045	b1 18		lda ($18),y			lda 	(codePtr),y
.1047	8d 30 06	sta $0630			sta 	ERRLine
.104a	c8		iny				iny
.104b	b1 18		lda ($18),y			lda 	(codePtr),y
.104d	8d 31 06	sta $0631			sta 	ERRLine+1
.1050	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.1052	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.1054	d0 b7		bne $100d			bne 	_CALoop 					; go round again
.1056	4c 68 18	jmp $1868			jmp 	Command_END 				; do END.
.1059					_CAExit:
.1059	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.105a					ASCalculateOpcodeHash:
.105a	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for AND token.
.105c	c9 f7		cmp #$f7			cmp 	#PR_AND
.105e	f0 28		beq $1088			beq 	_ASCOAnd
.1060	20 8c 10	jsr $108c			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.1063	20 99 10	jsr $1099			jsr 	_ASCProcess 				; go through the shift/multiply process
.1066	85 24		sta $24				sta 	zTemp0
.1068	20 8c 10	jsr $108c			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.106b	18		clc				clc
.106c	65 24		adc $24				adc 	zTemp0 						; add previous result.
.106e	2a		rol a				rol 	a 							; 8 bit rotate left
.106f	69 00		adc #$00			adc 	#0
.1071	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.1073	20 99 10	jsr $1099			jsr 	_ASCProcess 				; and shift/multiply again.
.1076	85 24		sta $24				sta 	zTemp0
.1078	20 8c 10	jsr $108c			jsr 	_ASCGetCharacter 			; get third character
.107b	18		clc				clc
.107c	65 24		adc $24				adc 	zTemp0 						; and add
.107e	48		pha				pha
.107f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.1081	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.1083	d0 1f		bne $10a4			bne 	_ASCSyntax
.1085	c8		iny				iny
.1086	68		pla				pla 								; restore and exit
.1087	60		rts				rts
.1088					_ASCOAnd:
.1088	c8		iny				iny 								; consume the token.
.1089	a9 6a		lda #$6a			lda 	#106 						; the hash value for "AND"
.108b	60		rts				rts
.108c					_ASCGetCharacter:
.108c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.108e	c8		iny				iny
.108f	38		sec				sec
.1090	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.1092	30 10		bmi $10a4			bmi 	_ASCSyntax 					; check range.
.1094	c9 1a		cmp #$1a			cmp 	#26
.1096	b0 0c		bcs $10a4			bcs 	_ASCSyntax
.1098	60		rts				rts
.1099					_ASCProcess:
.1099	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.109b	0a		asl a				asl 	a
.109c	0a		asl a				asl 	a
.109d	18		clc				clc
.109e	65 25		adc $25				adc 	zTemp0+1
.10a0	18		clc				clc 								; add 68
.10a1	69 44		adc #$44			adc 	#68
.10a3	60		rts				rts
.10a4					_ASCSyntax:
.10a4	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.10a7					ASGenerateCode:
.10a7	5a		phy				phy
.10a8	a2 00		ldx #$00			ldx 	#0
.10aa					_ASGSearch:
.10aa	bd cd 1d	lda $1dcd,x			lda 	AssemblerLookup,x 			; check table
.10ad	cd 04 05	cmp $0504			cmp 	ASCurrOpcode 				; do we have a match ?
.10b0	d0 0e		bne $10c0			bne 	_ASGNoMatch
.10b2	da		phx				phx 								; save X
.10b3	8a		txa				txa 								; get the address mode for this instruction
.10b4	8d 03 05	sta $0503			sta 	ASGOpcode
.10b7	20 69 11	jsr $1169			jsr 	ASGetModeForOpcode 			; into A.
.10ba	20 c8 10	jsr $10c8			jsr 	ASGTryGenerate		 		; try to generate with mode A
.10bd	fa		plx				plx
.10be	b0 06		bcs $10c6			bcs 	_ASGDone 					; successful :)
.10c0					_ASGNoMatch:
.10c0	e8		inx				inx 								; keep going.
.10c1	d0 e7		bne $10aa			bne 	_ASGSearch
.10c3	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.10c6					_ASGDone:
.10c6	7a		ply				ply
.10c7	60		rts				rts
.10c8					ASGTryGenerate:
.10c8	c9 52		cmp #$52			cmp 	#AM_RELATIVE 				; is it relative (will identify as absolute)
.10ca	f0 58		beq $1124			beq 	_ASGRelative
.10cc	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; do the modes match ?
.10cf	f0 26		beq $10f7			beq 	_ASGMatches 				; yes, we have a result.
.10d1	ae 05 05	ldx $0505			ldx 	ASCurrMode 					; get the instruction mode.
.10d4	e0 41		cpx #$41			cpx 	#AM_ABSOLUTE 				; is it an absolute we can try as ZP
.10d6	f0 12		beq $10ea			beq 	_ASGTryZero 				; this works because in the 65C02 all the
.10d8	e0 58		cpx #$58			cpx 	#AM_ABSOLUTEX 				; ZP equivalents are before the Absolutes
.10da	f0 0e		beq $10ea			beq 	_ASGTryZero 				; numerically.
.10dc	e0 59		cpx #$59			cpx 	#AM_ABSOLUTEY
.10de	f0 0a		beq $10ea			beq 	_ASGTryZero
.10e0	e0 54		cpx #$54			cpx 	#AM_ABSOLUTEI
.10e2	f0 06		beq $10ea			beq 	_ASGTryZero
.10e4	e0 55		cpx #$55			cpx 	#AM_ABSOLUTEIX
.10e6	f0 02		beq $10ea			beq 	_ASGTryZero
.10e8					_ASGFail:
.10e8	18		clc				clc 								; give up.
.10e9	60		rts				rts
.10ea					_ASGTryZero:
.10ea	29 7f		and #$7f			and 	#$7F 						; this is the ZP equivalent of A,AX,AY ?
.10ec	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; does that match ?
.10ef	d0 f7		bne $10e8			bne  	_ASGFail 					; no, this won't work.
.10f1	09 80		ora #$80			ora 	#$80 						; try with a ZP
.10f3	a6 09		ldx $09				ldx 	IFR0+IM1 					; check if this is okay for zero page.
.10f5	d0 f1		bne $10e8			bne 	_ASGFail 					; cannot use as the value is too large (e.g. >256)
.10f7					_ASGMatches:
.10f7	48		pha				pha
.10f8	20 72 12	jsr $1272			jsr 	ASAddress 					; address out.
.10fb	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.10fe	20 4d 12	jsr $124d			jsr 	ASWriteByte 				; write a byte
.1101	68		pla				pla
.1102	c9 49		cmp #$49			cmp 	#AM_IMPLIED 				; dispatch
.1104	f0 0e		beq $1114			beq 	_ASGExit
.1106	c9 00		cmp #$00			cmp 	#0
.1108	30 0f		bmi $1119			bmi 	_ASGZeroPage
.110a					_ASGAbsolute:
.110a	a5 08		lda $08				lda 	IFR0+IM0
.110c	20 4d 12	jsr $124d			jsr 	ASWriteByte
.110f	a5 09		lda $09				lda 	IFR0+IM1
.1111					_ASGWExit:
.1111	20 4d 12	jsr $124d			jsr 	ASWriteByte
.1114					_ASGExit:
.1114	20 8f 12	jsr $128f			jsr 	ASEndLine
.1117	38		sec				sec
.1118	60		rts				rts
.1119					_ASGZeroPage:
.1119	a5 09		lda $09				lda 	IFR0+IM1 					; check operand
.111b	f0 03		beq $1120			beq 	_ASGWriteLSB
.111d	4c 5a 2a	jmp $2a5a		jmp	ErrorV_value
.1120					_ASGWriteLSB:
.1120	a5 08		lda $08				lda 	IFR0+IM0
.1122	80 ed		bra $1111			bra 	_ASGWExit
.1124					_ASGRelative:
.1124	48		pha				pha
.1125	20 72 12	jsr $1272			jsr 	ASAddress 					; address out.
.1128	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.112b	20 4d 12	jsr $124d			jsr 	ASWriteByte 				; write a byte
.112e	68		pla				pla
.112f	ad 05 05	lda $0505			lda 	ASCurrMode 					; check absolute.
.1132	c9 41		cmp #$41			cmp 	#AM_ABSOLUTE
.1134	f0 03		beq $1139			beq 	_ASGCalcCheck
.1136	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.1139					_ASGCalcCheck:
.1139	ad 06 05	lda $0506			lda 	ASMOption 					; if pass bit set, just write junk
.113c	29 02		and #$02			and 	#2
.113e	aa		tax				tax
.113f	f0 1c		beq $115d			beq 	_ASGRout
.1141	18		clc				clc 								; calculate offset, borrowing one.
.1142	a5 08		lda $08				lda 	IFR0+IM0
.1144	ed b4 06	sbc $06b4			sbc 	('P'-'A')*4 + FastVariables + 0
.1147	aa		tax				tax
.1148	a5 09		lda $09				lda 	IFR0+IM1
.114a	ed b5 06	sbc $06b5			sbc 	('P'-'A')*4 + FastVariables + 1
.114d	85 24		sta $24				sta 	zTemp0 						; save MSB temporarily
.114f	e0 00		cpx #$00			cpx 	#0 							; if X is -ve A needs to be $FF so inc so it needs to be $00
.1151	10 01		bpl $1154			bpl 	_ASGForward
.1153	1a		inc a				inc 	a
.1154					_ASGForward:
.1154	c9 00		cmp #$00			cmp 	#0
.1156	d0 0e		bne $1166			bne 	_ASGRange
.1158	8a		txa				txa 								; MSB and LSB need to be the same sign.
.1159	45 24		eor $24				eor 	zTemp0
.115b	30 09		bmi $1166			bmi 	_ASGRange
.115d					_ASGRout:
.115d	8a		txa				txa
.115e	20 4d 12	jsr $124d			jsr 	ASWriteByte 				; write the relative branch
.1161	20 8f 12	jsr $128f			jsr 	ASEndLine
.1164	38		sec				sec
.1165	60		rts				rts
.1166					_ASGRange:
.1166	4c 49 2a	jmp $2a49		jmp	ErrorV_range
.0503					ASGOpcode:
>0503							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.1169					ASGetModeForOpcode:
.1169	5a		phy				phy
.116a	a8		tay				tay 								; save in Y
.116b	a2 00		ldx #$00			ldx 	#0
.116d					_ASGSearch:
.116d	98		tya				tya 								; check if opcode matches
.116e	dd b3 11	cmp $11b3,x			cmp 	ASGSpecialCases,x
.1171	f0 1b		beq $118e			beq 	_ASGIsSpecial
.1173	e8		inx				inx
.1174	e8		inx				inx
.1175	bd b3 11	lda $11b3,x			lda 	ASGSpecialCases,x 			; check end of table ($F3 is an illegal 65C02 opcode)
.1178	c9 f3		cmp #$f3			cmp 	#$F3
.117a	d0 f1		bne $116d			bne 	_ASGSearch
.117c	98		tya				tya 								; only interested in lower 5 bits.
.117d	29 1f		and #$1f			and 	#$1F
.117f	a8		tay				tay
.1180	29 0f		and #$0f			and 	#$0F 						; lower 4 bits of the opcode
.1182	0a		asl a				asl 	a 							; index into ASG Table
.1183	aa		tax				tax
.1184	c0 10		cpy #$10			cpy 	#$10 						; was bit 5 set,  e.g. the MSB is odd
.1186	90 01		bcc $1189			bcc 	_ASGEven
.1188	e8		inx				inx 								; if so, take from second half.
.1189					_ASGEven:
.1189	bd 93 11	lda $1193,x			lda 	ASGTable,x 					; fetch the mode from the table
.118c	7a		ply				ply
.118d	60		rts				rts
.118e					_ASGIsSpecial:
.118e	bd b4 11	lda $11b4,x			lda 	ASGSpecialCases+1,x 		; get special case for that mode.
.1191	7a		ply				ply
.1192	60		rts				rts
.1193					ASGTable:
>1193	a3 52						.byte 	AM_IMMEDIATE,AM_RELATIVE				; x0
>1195	d5 d6						.byte 	AM_ZINDX,AM_ZINDY 						; x1
>1197	a3 d4						.byte 	AM_IMMEDIATE,AM_ZIND 					; x2
>1199	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x3 (all NOP)
>119b	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x4
>119d	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x5
>119f	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x6
>11a1	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; x7
>11a3	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x8
>11a5	a3 59						.byte 	AM_IMMEDIATE,AM_ABSOLUTEY				; x9
>11a7	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xA
>11a9	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xB
>11ab	41 41						.byte 	AM_ABSOLUTE,AM_ABSOLUTE 				; xC
>11ad	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xD
>11af	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xE
>11b1	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; xF
.11b3					ASGSpecialCases:
>11b3	80 52						.byte	$80	,	AM_RELATIVE						;	BRA	rel
>11b5	14 c1						.byte	$14	,	AM_ZERO							;	TRB	nn
>11b7	96 d9						.byte	$96	,	AM_ZEROY						;	STX	nn,y
>11b9	b6 d9						.byte	$B6	,	AM_ZEROY						;	LDX	nn,y
>11bb	3c 58						.byte	$3C	,	AM_ABSOLUTEX					;	BIT	nnnn,x
>11bd	6c 54						.byte	$6C	,	AM_ABSOLUTEI					;	JMP	(nnnn)
>11bf	7c 55						.byte	$7C	,	AM_ABSOLUTEIX					;	JMP 	(nnnn,x)
>11c1	bc 58						.byte	$BC	,	AM_ABSOLUTEX					;	LDY	nnnn,x
>11c3	be 59						.byte	$BE	,	AM_ABSOLUTEY					;	LDX	nnnn,y
>11c5	00 49						.byte	$00	,	AM_IMPLIED						;	BRK
>11c7	20 41						.byte	$20	,	AM_ABSOLUTE						;	JSR	nnnn
>11c9	40 49						.byte	$40	,	AM_IMPLIED						;	RTI
>11cb	60 49						.byte	$60	,	AM_IMPLIED						;	RTS
>11cd	f3						.byte 	$F3 									; (illegal opcode)

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.11ce					ASOpcode:
.11ce	20 5a 10	jsr $105a			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.11d1	8d 04 05	sta $0504			sta 	ASCurrOpcode
.11d4	20 de 11	jsr $11de			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.11d7	8d 05 05	sta $0505			sta 	ASCurrMode
.11da	20 a7 10	jsr $10a7			jsr 	ASGenerateCode 				; search and generate appropriate code.
.11dd	60		rts				rts
.0504					ASCurrOpcode:
>0504							.fill 	1
.0505					ASCurrMode:
>0505							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/parsemode.asm

.11de					ASIdentifyAddressMode:
.11de	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.11e0	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.11e2	f0 17		beq $11fb			beq 	_ASImplied
.11e4	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11e6	f0 13		beq $11fb			beq 	_ASImplied
.11e8	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.11ea	f0 12		beq $11fe			beq 	_ASImmediate
.11ec	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.11ee	f0 15		beq $1205			beq 	_ASIndirect
.11f0	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.11f3	20 2d 12	jsr $122d			jsr 	ASCheckIndex 				; check index follows
.11f6	b0 02		bcs $11fa			bcs 	_ASIndexed 					; index found ? then it will return X Y
.11f8	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.11fa					_ASIndexed:
.11fa	60		rts				rts
.11fb					_ASImplied:
.11fb	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.11fd	60		rts				rts
.11fe					_ASImmediate:
.11fe	c8		iny				iny 								; consume #
.11ff	20 61 1a	jsr $1a61			jsr 	EXPEvalInteger8 			; 8 bit operand
.1202	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.1204	60		rts				rts
.1205					_ASIndirect:
.1205	c8		iny				iny 								; consume the open bracket
.1206	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.1209	20 2d 12	jsr $122d			jsr 	ASCheckIndex 				; look for ,X
.120c	b0 12		bcs $1220			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.120e	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.1211	20 2d 12	jsr $122d			jsr 	ASCheckIndex
.1214	90 07		bcc $121d			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.1216	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.1218	d0 10		bne $122a			bne 	ASCISyntax 					; if not error
.121a	a9 d6		lda #$d6			lda 	#AM_ZINDY 					; return (nn),y
.121c	60		rts				rts
.121d					_ASIIndirect:
.121d	a9 54		lda #$54			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.121f	60		rts				rts
.1220					_ASInternalIndirect:
.1220	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.1222	d0 06		bne $122a			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.1224	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.1227	a9 55		lda #$55			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.1229	60		rts				rts
.122a					ASCISyntax:
.122a	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.122d					ASCheckIndex:
.122d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.122f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1231	d0 18		bne $124b			bne 	_ASCIFail
.1233	c8		iny				iny 								; consume comma
.1234	b1 18		lda ($18),y			lda 	(codePtr),y
.1236	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.1238	f0 04		beq $123e			beq 	_ASCIFound
.123a	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.123c	d0 ec		bne $122a			bne 	ASCISyntax
.123e					_ASCIFound:
.123e	aa		tax				tax 								; save X or Y in X
.123f	c8		iny				iny 								; consume
.1240	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.1242	c8		iny				iny
.1243	c9 7c		cmp #$7c			cmp 	#$7C
.1245	d0 e3		bne $122a			bne 	ASCISyntax
.1247	8a		txa				txa 								; get X/Y back
.1248	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.1249	38		sec				sec
.124a	60		rts				rts
.124b					_ASCIFail:
.124b	18		clc				clc
.124c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/write.asm

.124d					ASWriteByte:
.124d	ae b4 06	ldx $06b4			ldx 	('P'-'A')*4 + FastVariables + 0
.1250	86 24		stx $24				stx 	zTemp0
.1252	ae b5 06	ldx $06b5			ldx 	('P'-'A')*4 + FastVariables + 1
.1255	86 25		stx $25				stx 	zTemp0+1
.1257	92 24		sta ($24)			sta 	(zTemp0)
.1259	aa		tax				tax
.125a	ad 06 05	lda $0506			lda 	ASMOption
.125d	4a		lsr a				lsr 	a
.125e	90 09		bcc $1269			bcc 	_ASWBNoEcho
.1260	a9 20		lda #$20			lda 	#32
.1262	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1265	8a		txa				txa
.1266	20 9b 12	jsr $129b			jsr 	ASPrintHex
.1269					_ASWBNoEcho:
.1269	ee b4 06	inc $06b4			inc 	('P'-'A')*4 + FastVariables + 0
.126c	d0 03		bne $1271			bne 	_ASWBNoCarry
.126e	ee b5 06	inc $06b5			inc 	('P'-'A')*4 + FastVariables + 1
.1271					_ASWBNoCarry:
.1271	60		rts				rts
.1272					ASAddress:
.1272	ad 06 05	lda $0506			lda 	ASMOption
.1275	4a		lsr a				lsr 	a
.1276	90 16		bcc $128e			bcc 	_ASAExit
.1278	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables + 1
.127b	20 9b 12	jsr $129b			jsr 	ASPrintHex
.127e	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables + 0
.1281	20 9b 12	jsr $129b			jsr 	ASPrintHex
.1284	a9 20		lda #$20			lda 	#32
.1286	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1289	a9 3a		lda #$3a			lda 	#':'
.128b	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.128e					_ASAExit:
.128e	60		rts				rts
.128f					ASEndLine:
.128f	ad 06 05	lda $0506			lda 	ASMOption
.1292	4a		lsr a				lsr 	a
.1293	90 05		bcc $129a			bcc 	_ASEExit
.1295	a9 0d		lda #$0d			lda 	#13
.1297	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.129a					_ASEExit:
.129a	60		rts				rts
.129b					ASPrintHex:
.129b	48		pha				pha
.129c	4a		lsr a				lsr 	a
.129d	4a		lsr a				lsr 	a
.129e	4a		lsr a				lsr 	a
.129f	4a		lsr a				lsr 	a
.12a0	20 a4 12	jsr $12a4			jsr 	_ASPrintNibble
.12a3	68		pla				pla
.12a4					_ASPrintNibble:
.12a4	29 0f		and #$0f			and 	#15
.12a6	c9 0a		cmp #$0a			cmp 	#10
.12a8	90 02		bcc $12ac			bcc 	_ASNotHex
.12aa	69 06		adc #$06			adc 	#6
.12ac					_ASNotHex:
.12ac	69 30		adc #$30			adc 	#48
.12ae	c9 40		cmp #$40			cmp 	#64
.12b0	90 02		bcc $12b4			bcc 	_ASNotChar
.12b2	49 20		eor #$20			eor 	#32
.12b4					_ASNotChar:
.12b4	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.12b7					ASLabel:
.12b7	20 cb 1a	jsr $1acb			jsr 	EXPTermR0 					; get term
.12ba	90 38		bcc $12f4			bcc 	_ALError 					; must be a reference term.
.12bc	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.12be	30 34		bmi $12f4			bmi 	_ALError
.12c0	ad 06 05	lda $0506			lda 	ASMOption 					; on pass 2 (e.g. OPT bit 1 is set)
.12c3	29 02		and #$02			and 	#2
.12c5	f0 16		beq $12dd			beq 	_ASLNoCheck
.12c7	5a		phy				phy 								; if the variable changes there's an error.
.12c8	b2 08		lda ($08)			lda 	(IFR0+IM0)
.12ca	f0 05		beq $12d1			beq 	_ASLOk1						; (providing not changed from zero)
.12cc	cd b4 06	cmp $06b4			cmp 	('P'-'A')*4 + FastVariables
.12cf	d0 26		bne $12f7			bne 	_ALChanged
.12d1					_ASLOk1:
.12d1	a0 01		ldy #$01			ldy 	#1
.12d3	b1 08		lda ($08),y			lda 	(IFR0+IM0),y
.12d5	f0 05		beq $12dc			beq 	_ASLOk2
.12d7	cd b5 06	cmp $06b5			cmp 	('P'-'A')*4 + FastVariables+1
.12da	d0 1b		bne $12f7			bne 	_ALChanged
.12dc					_ASLOk2:
.12dc	7a		ply				ply
.12dd					_ASLNoCheck:
.12dd	5a		phy				phy
.12de	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.12e1	92 08		sta ($08)			sta 	(IFR0+IM0)
.12e3	a0 01		ldy #$01			ldy 	#1
.12e5	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables+1
.12e8	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12ea	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.12ec	c8		iny				iny
.12ed	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12ef	c8		iny				iny
.12f0	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12f2	7a		ply				ply
.12f3	60		rts				rts
.12f4					_ALError:
.12f4	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.12f7					_ALChanged:
.12f7	4c 09 2c	jmp $2c09		jmp	ErrorV_align

;******  Return to file: include.files


;******  Processing file: src/assembler/opt.asm

.12fa					Command_OPT:
.12fa	20 61 1a	jsr $1a61			jsr 	EXPEvalInteger8
.12fd	8d 06 05	sta $0506			sta 	ASMOption
.1300	60		rts				rts
.0506					ASMOption:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1301					Command_ASSERT:
.1301	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; get a number to assert
.1304	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1306	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.1309	f0 01		beq $130c			beq 	_CAFail 					; if so, the assert fails.
.130b	60		rts				rts
.130c					_CAFail:
.130c	4c 8e 2a	jmp $2a8e		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.130f					Command_CLEAR:
.130f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1311	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1313	f0 14		beq $1329			beq 	_CLNoParam
.1315	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1317	f0 10		beq $1329			beq 	_CLNoParam
.1319	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; address for CLEAR
.131c	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.131e	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1320	b0 0b		bcs $132d			bcs 	_CLMemory
.1322	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1324	90 07		bcc $132d			bcc 	_CLMemory
.1326	8d 1f 05	sta $051f			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1329					_CLNoParam:
.1329	20 30 13	jsr $1330			jsr 	ClearCode
.132c	60		rts				rts
.132d					_CLMemory:
.132d	4c 28 2b	jmp $2b28		jmp	ErrorV_memory
.1330					ClearCode:
.1330	20 07 24	jsr $2407			jsr 	PGMEndProgram 				; end program => zTemp0
.1333	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.1335	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.1337	1a		inc a				inc 	a
.1338	85 2b		sta $2b				sta 	freeMemory+1
.133a	20 4c 30	jsr $304c			jsr 	VARClearHashTables
.133d	ad 1f 05	lda $051f			lda 	PGMEndMemoryHigh
.1340	20 91 2c	jsr $2c91			jsr 	StackReset 					; page passed on in A
.1343	20 f0 2c	jsr $2cf0			jsr 	StringSystemInitialise
.1346	20 a3 29	jsr $29a3			jsr 	ScanProcedures
.1349	20 ca 17	jsr $17ca			jsr 	Command_RESTORE
.134c	60		rts				rts
.134d					AllocateMemory:
.134d	5a		phy				phy 								; save Y
.134e	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1350	5a		phy				phy
.1351	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.1353	5a		phy				phy
.1354	a8		tay				tay 								; count is now in XY
.1355					_AllocateLoop:
.1355	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1357	d0 04		bne $135d			bne 	_AllocateOne
.1359	c0 00		cpy #$00			cpy 	#0
.135b	f0 15		beq $1372			beq 	_AllocateExit
.135d					_AllocateOne:
.135d	a9 00		lda #$00			lda 	#0 							; zero byte
.135f	92 2a		sta ($2a)			sta 	(freeMemory)
.1361	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.1363	d0 05		bne $136a			bne 	_AllocateSkipCarry
.1365	e6 2b		inc $2b				inc 	freeMemory+1
.1367	20 76 13	jsr $1376			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.136a					_AllocateSkipCarry:
.136a	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.136c	d0 01		bne $136f			bne 	_AllocateSkipBorrow
.136e	ca		dex				dex
.136f					_AllocateSkipBorrow:
.136f	88		dey				dey
.1370	80 e3		bra $1355			bra 	_AllocateLoop
.1372					_AllocateExit:
.1372	fa		plx				plx 								; restore address
.1373	68		pla				pla
.1374	7a		ply				ply 								; restore Y
.1375	60		rts				rts
.1376					ClearCheckMemory:
.1376	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.1378	1a		inc a				inc 	a 							; spacing 2 pages
.1379	1a		inc a				inc 	a
.137a	cd 27 06	cmp $0627			cmp 	stringMemory+1 				; problems if hit string memory
.137d	b0 01		bcs $1380			bcs  	_CCMError
.137f	60		rts				rts
.1380					_CCMError:
.1380	4c 28 2b	jmp $2b28		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1383					CommandDIM:
.1383	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1385	29 c0		and #$c0			and 	#$C0
.1387	c9 40		cmp #$40			cmp 	#$40
.1389	d0 39		bne $13c4			bne 	_CDSyntax
.138b	20 03 30	jsr $3003			jsr 	VARGetInfo 					; get information
.138e	ad 35 06	lda $0635			lda 	VARType 					; check array.
.1391	29 02		and #$02			and 	#2
.1393	f0 2f		beq $13c4			beq 	_CDSyntax
.1395	20 b5 2f	jsr $2fb5			jsr 	VARFind 					; does it already exist
.1398	b0 2d		bcs $13c7			bcs 	_CDExists
.139a	20 61 2f	jsr $2f61			jsr 	VARCreate 					; create it - returns data ptr in XA
.139d	da		phx				phx 								; save target address
.139e	48		pha				pha
.139f	ad 35 06	lda $0635			lda 	VARType 					; type ID.
.13a2	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.13a4	20 ca 13	jsr $13ca			jsr 	CreateArray 				; create array to XA
.13a7	84 26		sty $26				sty 	zTemp1 						; save Y
.13a9	7a		ply				ply 								; restore target to zTemp0
.13aa	84 24		sty $24				sty 	zTemp0
.13ac	7a		ply				ply
.13ad	84 25		sty $25				sty 	zTemp0+1
.13af	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.13b1	a0 01		ldy #$01			ldy 	#1
.13b3	8a		txa				txa
.13b4	91 24		sta ($24),y			sta 	(zTemp0),y
.13b6	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.13b8	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 				; check )
.13bb	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.13bd	c8		iny				iny
.13be	c9 99		cmp #$99			cmp 	#PR_COMMA
.13c0	f0 c1		beq $1383			beq 	CommandDIM
.13c2	88		dey				dey
.13c3	60		rts				rts
.13c4					_CDSyntax:
.13c4	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.13c7					_CDExists:
.13c7	4c 00 2b	jmp $2b00		jmp	ErrorV_redefine
.13ca					CreateArray:
.13ca	8d 07 05	sta $0507			sta 	CAType						; save type
.13cd	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; get array dimension to R0
.13d0	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.13d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.13d4	f0 04		beq $13da			beq 	_CATwoDimensions
.13d6	20 26 14	jsr $1426			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.13d9	60		rts				rts
.13da					_CATwoDimensions:
.13da	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.13dc	8d 09 05	sta $0509			sta 	CADim1+1
.13df	a5 08		lda $08				lda 	IFR0+IM0
.13e1	8d 08 05	sta $0508			sta 	CADim1+0
.13e4	20 2b 2c	jsr $2c2b			jsr 	ERRCheckComma 				; check comma
.13e7	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.13ea	5a		phy				phy 								; save Y position
.13eb	18		clc				clc 								; allocate the outer array of pointers.
.13ec	ae 09 05	ldx $0509			ldx 	CADim1+1
.13ef	ad 08 05	lda $0508			lda 	CADim1
.13f2	20 65 14	jsr $1465			jsr 	CSAAllocate 				; allocate the outer array
.13f5	da		phx				phx									; save this address on the stack
.13f6	48		pha				pha
.13f7	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.13f9	85 28		sta $28				sta 	zTemp2
.13fb					_CACreateSubLoop:
.13fb	38		sec				sec
.13fc	20 26 14	jsr $1426			jsr 	CreateSingleArray 			; create data array of required size.
.13ff	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1401	91 28		sta ($28),y			sta 	(zTemp2),y
.1403	8a		txa				txa
.1404	c8		iny				iny
.1405	91 28		sta ($28),y			sta 	(zTemp2),y
.1407	18		clc				clc  								; next slot.
.1408	a5 28		lda $28				lda 	zTemp2
.140a	69 02		adc #$02			adc 	#2
.140c	85 28		sta $28				sta 	zTemp2
.140e	90 02		bcc $1412			bcc 	_CACNoCarry
.1410	e6 29		inc $29				inc 	zTemp2+1
.1412					_CACNoCarry:
.1412	ad 08 05	lda $0508			lda 	CADim1 						; use DIM1 as a counter
.1415	d0 03		bne $141a			bne 	_CACNoBorrow
.1417	ce 09 05	dec $0509			dec 	CADim1+1
.141a					_CACNoBorrow:
.141a	ce 08 05	dec $0508			dec 	CADim1
.141d	ad 09 05	lda $0509			lda 	CADim1+1 					; but do one more.
.1420	10 d9		bpl $13fb			bpl 	_CACreateSubLoop
.1422	68		pla				pla
.1423	fa		plx				plx
.1424	7a		ply				ply
.1425	60		rts				rts
.1426					CreateSingleArray:
.1426	5a		phy				phy
.1427	38		sec				sec 								; allocate memory block all zeros.
.1428	a5 08		lda $08				lda 	IFR0+IM0
.142a	a6 09		ldx $09				ldx 	IFR0+IM1
.142c	20 65 14	jsr $1465			jsr 	CSAAllocate
.142f	ac 07 05	ldy $0507			ldy 	CAType 						; if numbers, we don't need to initialise.
.1432	f0 2f		beq $1463			beq 	_CSANoInit
.1434	da		phx				phx 								; save address of new array
.1435	48		pha				pha
.1436	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.1438	86 25		stx $25				stx 	zTemp0+1
.143a	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.143c	b1 24		lda ($24),y			lda 	(zTemp0),y
.143e	a8		tay				tay
.143f	b2 24		lda ($24)			lda 	(zTemp0)
.1441	aa		tax				tax
.1442					_CSAEraseString:
.1442	5a		phy				phy
.1443	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1445	a9 80		lda #$80			lda 	#$80
.1447	91 24		sta ($24),y			sta 	(zTemp0),y
.1449	7a		ply				ply
.144a	18		clc				clc 								; add 4 to next slot.
.144b	a5 24		lda $24				lda 	zTemp0
.144d	69 04		adc #$04			adc 	#4
.144f	85 24		sta $24				sta 	zTemp0
.1451	90 02		bcc $1455			bcc 	_CSAENoCarry
.1453	e6 25		inc $25				inc 	zTemp0+1
.1455					_CSAENoCarry:
.1455	e0 00		cpx #$00			cpx 	#0
.1457	d0 01		bne $145a			bne 	_CSANoBorrow
.1459	88		dey				dey
.145a					_CSANoBorrow:
.145a	ca		dex				dex
.145b	d0 e5		bne $1442			bne 	_CSAEraseString
.145d	c0 00		cpy #$00			cpy 	#0
.145f	d0 e1		bne $1442			bne 	_CSAEraseString
.1461	68		pla				pla
.1462	fa		plx				plx
.1463					_CSANoInit:
.1463	7a		ply				ply
.1464	60		rts				rts
.1465					CSAAllocate:
.1465	08		php				php 								; save type flag.
.1466	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1467	d0 01		bne $146a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1469	e8		inx				inx
.146a					_CSAANoCarry:
.146a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.146c	b0 2e		bcs $149c			bcs 	_CSARange
.146e	28		plp				plp 								; restore type flag
.146f	08		php				php 								; save it back again.
.1470	da		phx				phx 								; save size.
.1471	48		pha				pha
.1472	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1474	90 03		bcc $1479			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1476	0a		asl a				asl 	a
.1477	26 25		rol $25				rol 	zTemp0+1
.1479					_CSAATimes2:
.1479	0a		asl a				asl 	a
.147a	26 25		rol $25				rol 	zTemp0+1
.147c	18		clc				clc
.147d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.147f	90 02		bcc $1483			bcc 	_CSAANoCarry2
.1481	e6 25		inc $25				inc 	zTemp0+1
.1483					_CSAANoCarry2:
.1483	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1485	20 4d 13	jsr $134d			jsr 	AllocateMemory 				; allocate memory to XA
.1488	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.148a	85 24		sta $24				sta 	zTemp0
.148c	68		pla				pla  								; write element count to first 2 bytes
.148d	92 24		sta ($24)			sta 	(zTemp0)
.148f	68		pla				pla 								; msb of element count
.1490	28		plp				plp 								; CC if pointer array
.1491	b0 02		bcs $1495			bcs 	_CSAAIsData
.1493	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1495					_CSAAIsData:
.1495	a0 01		ldy #$01			ldy 	#1
.1497	91 24		sta ($24),y			sta 	(zTemp0),y
.1499	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.149b	60		rts				rts
.149c					_CSARange:
.149c	4c 49 2a	jmp $2a49		jmp	ErrorV_range
.0507					CAType:
>0507							.fill 	1
.0508					CADim1:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.149f					Command_Doke:
.149f	38		sec				sec
.14a0	80 01		bra $14a3			bra 	DPCommon
.14a2					Command_Poke:
.14a2	18		clc				clc
.14a3					DPCommon:
.14a3	08		php				php 								; CS if DOKE
.14a4	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; address
.14a7	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.14a9	48		pha				pha
.14aa	a5 09		lda $09				lda 	IFR0+IM1
.14ac	48		pha				pha
.14ad	20 2b 2c	jsr $2c2b			jsr 	ERRCheckComma 				; [dp]oke address,data
.14b0	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16
.14b3	68		pla				pla 								; get address back
.14b4	85 25		sta $25				sta 	zTemp0+1
.14b6	68		pla				pla
.14b7	85 24		sta $24				sta 	zTemp0
.14b9	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.14bb	92 24		sta ($24)			sta 	(zTemp0)
.14bd	28		plp				plp 								; done if CC
.14be	90 08		bcc $14c8			bcc 	_DPExit
.14c0	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.14c1	a5 09		lda $09				lda 	IFR0+IM1
.14c3	a0 01		ldy #$01			ldy 	#1
.14c5	91 24		sta ($24),y			sta 	(zTemp0),y
.14c7	7a		ply				ply
.14c8					_DPExit:
.14c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.14c9					Command_GOTO:
.14c9	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; get line number
.14cc					GotoR0:
.14cc	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.14cf	85 19		sta $19				sta 	codePtr+1
.14d1	64 18		stz $18				stz 	codePtr
.14d3					_GOSearch:
.14d3	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.14d5	f0 1f		beq $14f6			beq 	_GOError
.14d7	a0 01		ldy #$01			ldy 	#1 							; found line #
.14d9	b1 18		lda ($18),y			lda 	(codePtr),y
.14db	c5 08		cmp $08				cmp 	IFR0+IM0
.14dd	d0 0a		bne $14e9			bne 	_GONext
.14df	c8		iny				iny
.14e0	b1 18		lda ($18),y			lda 	(codePtr),y
.14e2	c5 09		cmp $09				cmp 	IFR0+IM1
.14e4	d0 03		bne $14e9			bne 	_GONext
.14e6	4c 0f 18	jmp $180f			jmp 	RUNNewLine
.14e9					_GONext:
.14e9	18		clc				clc 								; advance to next line.
.14ea	b2 18		lda ($18)			lda 	(codePtr)
.14ec	65 18		adc $18				adc 	codePtr
.14ee	85 18		sta $18				sta 	codePtr
.14f0	90 e1		bcc $14d3			bcc 	_GOSearch
.14f2	e6 19		inc $19				inc 	codePtr+1
.14f4	80 dd		bra $14d3			bra 	_GOSearch
.14f6					_GOError:
.14f6	4c cd 2b	jmp $2bcd		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.14f9					Command_Input:
.14f9	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.14fb	8d 0a 05	sta $050a			sta 	InputFlag
.14fe	80 03		bra $1503			bra 	Command_IP_Main
.1500					Command_Print:
.1500	9c 0a 05	stz $050a			stz 	InputFlag
.1503					Command_IP_Main:
.1503	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1504					_CPLoop:
.1504	08		php				php 								; save "last action" flag
.1505	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1507	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1509	f0 48		beq $1553			beq 	_CPExit 					; without consuming
.150b	c9 9b		cmp #$9b			cmp 	#PR_COLON
.150d	f0 44		beq $1553			beq 	_CPExit
.150f	68		pla				pla 								; throw last action flag
.1510	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.1512	c8		iny				iny
.1513	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.1515	f0 39		beq $1550			beq 	_CPContinueWithSameLine
.1517	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.1519	f0 30		beq $154b			beq 	_CPTab
.151b	88		dey				dey 								; undo the get.
.151c	2c 0a 05	bit $050a			bit 	InputFlag 					; check for Input
.151f	10 0b		bpl $152c			bpl	 	_CPNotInput
.1521	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1523	c9 40		cmp #$40			cmp 	#$40
.1525	d0 05		bne $152c			bne 	_CPNotInput
.1527	20 5c 15	jsr $155c			jsr 	_CPInputCode 				; input code
.152a	80 d7		bra $1503			bra 	Command_IP_Main 			; and go round again.
.152c					_CPNotInput:
.152c	20 03 1a	jsr $1a03			jsr 	EXPEvaluateExpression 		; evaluate expression.
.152f	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1531	10 0e		bpl $1541			bpl 	_CPNumber
.1533	5a		phy				phy
.1534	18		clc				clc 								; string address to YX
.1535	a5 08		lda $08				lda 	IFR0+IM0
.1537	aa		tax				tax
.1538	a5 09		lda $09				lda 	IFR0+IM1
.153a	a8		tay				tay
.153b	20 90 15	jsr $1590			jsr 	CPPrintYX 					; print YX
.153e	7a		ply				ply
.153f	80 c2		bra $1503			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1541					_CPNumber:
.1541	5a		phy				phy
.1542	20 bd 34	jsr $34bd			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1545	20 90 15	jsr $1590			jsr 	CPPrintYX 					; print string at YX
.1548	7a		ply				ply
.1549	80 b8		bra $1503			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.154b					_CPTab:
.154b	a9 09		lda #$09			lda 	#9 							; print TAB
.154d	20 a8 15	jsr $15a8			jsr 	CPPrintA
.1550					_CPContinueWithSameLine:
.1550	38		sec				sec 								; loop round with carry set, which
.1551	80 b1		bra $1504			bra 	_CPLoop 					; will inhibit final CR
.1553					_CPExit:
.1553	28		plp				plp 								; get last action flag
.1554	b0 05		bcs $155b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1556	a9 0d		lda #$0d			lda 	#13 						; print new line
.1558	20 a8 15	jsr $15a8			jsr 	CPPrintA
.155b					_CPExit2:
.155b	60		rts				rts
.155c					_CPInputCode:
.155c	20 cb 1a	jsr $1acb			jsr 	EXPTermR0 					; get the term, the thing being input to
.155f	5a		phy				phy 								; save position
.1560	20 a5 15	jsr $15a5			jsr 	CPInputA					; input a line to YX
.1563	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1565	30 18		bmi $157f			bmi 	_CPInputString
.1567	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1569	48		pha				pha
.156a	a5 09		lda $09				lda 	IFR0+IM1
.156c	48		pha				pha
.156d	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.156f	84 25		sty $25				sty 	zTemp0+1
.1571	20 b5 1d	jsr $1db5			jsr 	VALConversionZTemp0
.1574	68		pla				pla 								; do the assign.
.1575	85 25		sta $25				sta 	zTemp0+1
.1577	68		pla				pla
.1578	85 24		sta $24				sta 	zTemp0
.157a	20 d0 15	jsr $15d0			jsr 	AssignNumber
.157d	7a		ply				ply
.157e	60		rts				rts
.157f					_CPInputString:
.157f	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1581	85 24		sta $24				sta 	zTemp0
.1583	a5 09		lda $09				lda 	IFR0+IM1
.1585	85 25		sta $25				sta 	zTemp0+1
.1587	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1589	84 09		sty $09				sty 	IFR0+IM1
.158b	20 e7 15	jsr $15e7			jsr 	AssignString 				; assign the string
.158e	7a		ply				ply 								; exit
.158f	60		rts				rts
.1590					CPPrintYX:
.1590	86 24		stx $24				stx 	zTemp0
.1592	84 25		sty $25				sty 	zTemp0+1
.1594	b2 24		lda ($24)			lda 	(zTemp0)
.1596	aa		tax				tax
.1597	f0 0b		beq $15a4			beq 	_CPPrintExit
.1599	a0 01		ldy #$01			ldy 	#1
.159b					_CPPrintAYXLoop:
.159b	b1 24		lda ($24),y			lda 	(zTemp0),y
.159d	20 a8 15	jsr $15a8			jsr 	CPPrintA
.15a0	c8		iny				iny
.15a1	ca		dex				dex
.15a2	d0 f7		bne $159b			bne 	_CPPrintAYXLoop
.15a4					_CPPrintExit:
.15a4	60		rts				rts
.15a5					CPInputA:
.15a5	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.15a8					CPPrintA:
.15a8	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.050a					InputFlag:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.15ab					CommandLET:
.15ab	20 cb 1a	jsr $1acb			jsr 	EXPTermR0 					; get term
.15ae	90 6f		bcc $161f			bcc 	CLError 					; must be a reference term.
.15b0	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.15b2	48		pha				pha
.15b3	a5 09		lda $09				lda 	IFR0+IM1
.15b5	48		pha				pha
.15b6	a5 0b		lda $0b				lda 	IFR0+IExp
.15b8	48		pha				pha
.15b9	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.15bb	20 33 2c	jsr $2c33			jsr 	ERRCheckA
.15be	20 03 1a	jsr $1a03			jsr 	EXPEvaluateExpression 		; right hand side.
.15c1	68		pla				pla 								; restore type of l-expr
.15c2	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.15c4	30 5c		bmi $1622			bmi 	CLType
.15c6	fa		plx				plx 	 							; pop target address to zTemp0
.15c7	86 25		stx $25				stx 	zTemp0+1
.15c9	fa		plx				plx
.15ca	86 24		stx $24				stx 	zTemp0
.15cc					AssignData:
.15cc	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.15ce	30 17		bmi $15e7			bmi 	AssignString
.15d0					AssignNumber:
.15d0	5a		phy				phy
.15d1	a0 03		ldy #$03			ldy 	#3
.15d3	a5 0b		lda $0b				lda 	IFR0+IExp
.15d5	91 24		sta ($24),y			sta 	(zTemp0),y
.15d7	88		dey				dey
.15d8	a5 0a		lda $0a				lda 	IFR0+IM2
.15da	91 24		sta ($24),y			sta 	(zTemp0),y
.15dc	88		dey				dey
.15dd	a5 09		lda $09				lda 	IFR0+IM1
.15df	91 24		sta ($24),y			sta 	(zTemp0),y
.15e1	a5 08		lda $08				lda 	IFR0+IM0
.15e3	92 24		sta ($24)			sta 	(zTemp0)
.15e5	7a		ply				ply
.15e6	60		rts				rts
.15e7					AssignString:
.15e7	5a		phy				phy
.15e8	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.15ea	b1 24		lda ($24),y			lda 	(zTemp0),y
.15ec	12 24		ora ($24)			ora 	(zTemp0)
.15ee	f0 23		beq $1613			beq 	_CLConcreteString
.15f0	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.15f2	85 26		sta $26				sta 	zTemp1
.15f4	b1 24		lda ($24),y			lda 	(zTemp0),y
.15f6	85 27		sta $27				sta 	zTemp1+1
.15f8	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.15fa	38		sec				sec 								; we want 3 for slot size, status, string size.
.15fb	e9 03		sbc #$03			sbc 	#3
.15fd	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.15ff	90 12		bcc $1613			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.1601	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.1603	1a		inc a				inc 	a
.1604	aa		tax				tax
.1605	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1607					_CLReplaceString:
.1607	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1609	c8		iny				iny
.160a	c8		iny				iny
.160b	91 26		sta ($26),y			sta 	(zTemp1),y
.160d	88		dey				dey
.160e	ca		dex				dex
.160f	d0 f6		bne $1607			bne 	_CLReplaceString
.1611	80 0a		bra $161d			bra 	_CLExit
.1613					_CLConcreteString:
.1613	20 a5 2c	jsr $2ca5			jsr 	StringConcrete  			; concreted string in XA.
.1616	a0 01		ldy #$01			ldy 	#1 							; store the address
.1618	92 24		sta ($24)			sta 	(zTemp0)
.161a	8a		txa				txa
.161b	91 24		sta ($24),y			sta 	(zTemp0),y
.161d					_CLExit:
.161d	7a		ply				ply
.161e	60		rts				rts
.161f					CLError:
.161f	4c 6b 2b	jmp $2b6b		jmp	ErrorV_variable
.1622					CLType:
.1622	4c 68 2a	jmp $2a68		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1625					Command_LIST:
.1625	9c 0b 05	stz $050b			stz 	CLFrom 						; default from
.1628	9c 0c 05	stz $050c			stz 	CLFrom+1
.162b	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.162d	c9 99		cmp #$99			cmp 	#PR_COMMA
.162f	f0 1d		beq $164e			beq 	_CLToLine
.1631	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1633	f0 37		beq $166c			beq 	_CLDefaultTo
.1635	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1638	a5 08		lda $08				lda 	IFR0+IM0
.163a	8d 0b 05	sta $050b			sta 	CLFrom
.163d	8d 0d 05	sta $050d			sta 	CLTo
.1640	a5 09		lda $09				lda 	IFR0+IM1
.1642	8d 0c 05	sta $050c			sta 	CLFrom+1
.1645	8d 0e 05	sta $050e			sta 	CLTo+1
.1648	b1 18		lda ($18),y			lda 	(codePtr),y
.164a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.164c	f0 26		beq $1674			beq 	_CLList
.164e					_CLToLine:
.164e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1650	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1652	f0 18		beq $166c			beq 	_CLDefaultTo
.1654	20 2b 2c	jsr $2c2b			jsr 	ERRCheckComma 				; sep comma
.1657	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1659	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.165b	f0 0f		beq $166c			beq 	_CLDefaultTo
.165d	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; there's a To value.
.1660	a5 08		lda $08				lda 	IFR0+IM0
.1662	8d 0d 05	sta $050d			sta 	CLTo
.1665	a5 09		lda $09				lda 	IFR0+IM1
.1667	8d 0e 05	sta $050e			sta 	CLTo+1
.166a	80 08		bra $1674			bra 	_CLList
.166c					_CLDefaultTo:
.166c	a9 ff		lda #$ff			lda 	#$FF
.166e	8d 0d 05	sta $050d			sta 	CLTo
.1671	8d 0e 05	sta $050e			sta 	CLTo+1
.1674					_CLList:
.1674	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.1677	85 19		sta $19				sta 	codePtr+1
.1679	64 18		stz $18				stz 	codePtr
.167b	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.167d	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.167f	20 4d 22	jsr $224d			jsr 	TOKSetDetokeniseOutput
.1682					_CLLoop:
.1682	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1684	f0 51		beq $16d7			beq 	_CLExit
.1686	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1689	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.168c	d0 4c		bne $16da			bne 	_CLBreak
.168e	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1690	20 dd 16	jsr $16dd			jsr 	_CLCompareLine
.1693	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1695	f0 33		beq $16ca			beq 	_CLNext
.1697	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1699	20 dd 16	jsr $16dd			jsr 	_CLCompareLine
.169c	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.169e	f0 2a		beq $16ca			beq 	_CLNext
.16a0	a0 02		ldy #$02			ldy 	#2 							; print line #
.16a2	b1 18		lda ($18),y			lda 	(codePtr),y
.16a4	aa		tax				tax
.16a5	88		dey				dey
.16a6	b1 18		lda ($18),y			lda 	(codePtr),y
.16a8	20 7a 2e	jsr $2e7a			jsr 	WriteIntXA
.16ab					_CLSpacing:
.16ab	a9 20		lda #$20			lda 	#32
.16ad	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16b0	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.16b3	e0 06		cpx #$06			cpx 	#6
.16b5	d0 f4		bne $16ab			bne 	_CLSpacing
.16b7	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.16b9	a5 18		lda $18				lda 	codePtr
.16bb	18		clc				clc
.16bc	69 03		adc #$03			adc 	#3
.16be	aa		tax				tax
.16bf	90 01		bcc $16c2			bcc 	_CLNoCarry2
.16c1	c8		iny				iny
.16c2					_CLNoCarry2:
.16c2	20 f2 21	jsr $21f2			jsr 	TOKDetokenise
.16c5	a9 0d		lda #$0d			lda 	#13	 						; next line
.16c7	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16ca					_CLNext:
.16ca	18		clc				clc 								; advance to next line.
.16cb	b2 18		lda ($18)			lda 	(codePtr)
.16cd	65 18		adc $18				adc 	codePtr
.16cf	85 18		sta $18				sta 	codePtr
.16d1	90 02		bcc $16d5			bcc 	_CLNoCarry
.16d3	e6 19		inc $19				inc 	codePtr+1
.16d5					_CLNoCarry:
.16d5	80 ab		bra $1682			bra 	_CLLoop
.16d7					_CLExit:
.16d7	4c 99 2e	jmp $2e99			jmp 	WarmStart
.16da					_CLBreak:
.16da	4c c3 2b	jmp $2bc3		jmp	ErrorV_break
.16dd					_CLCompareLine:
.16dd	a0 01		ldy #$01			ldy 	#1
.16df	38		sec				sec
.16e0	b1 18		lda ($18),y			lda 	(codePtr),y
.16e2	fd 0b 05	sbc $050b,x			sbc 	CLFrom,x
.16e5	85 24		sta $24				sta 	zTemp0
.16e7	c8		iny				iny
.16e8	b1 18		lda ($18),y			lda 	(codePtr),y
.16ea	fd 0c 05	sbc $050c,x			sbc 	CLFrom+1,x
.16ed	90 0a		bcc $16f9			bcc 	_CLIsNegative
.16ef	d0 05		bne $16f6			bne 	_CLIsPositive
.16f1	a5 24		lda $24				lda 	zTemp0
.16f3	d0 01		bne $16f6			bne 	_CLIsPositive
.16f5	60		rts				rts
.16f6					_CLIsPositive:
.16f6	a9 01		lda #$01			lda 	#1
.16f8	60		rts				rts
.16f9					_CLIsNegative:
.16f9	a9 ff		lda #$ff			lda 	#255
.16fb	60		rts				rts
.050b					CLFrom:
>050b							.fill 	2
.050d					CLTo:
>050d							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.16fc					Command_NEW:
.16fc	20 fb 23	jsr $23fb			jsr 	PGMNewProgram 				; Reset current program
.16ff	20 30 13	jsr $1330			jsr 	ClearCode 					; Run CLR
.1702	4c 68 18	jmp $1868			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1705					Command_READ:
.1705	20 cb 1a	jsr $1acb			jsr 	EXPTermR0 					; get term to R0
.1708	90 35		bcc $173f			bcc 	_CRSyntax 					; fail if not a reference.
.170a	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.170c	48		pha				pha
.170d	a5 09		lda $09				lda 	IFR0+IM1
.170f	48		pha				pha
.1710	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1712	48		pha				pha
.1713	20 dc 17	jsr $17dc			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1716	ad 13 05	lda $0513			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1719	d0 27		bne $1742			bne 	_CRHaveData  				; forward for the next one.
.171b					_CRNextLine:
.171b	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.171d	f0 1a		beq $1739			beq 	_CRNoData
.171f					_CRKeepSearching:
.171f	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1721	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1723	20 48 29	jsr $2948			jsr 	ScanForward
.1726	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1728	f0 18		beq $1742			beq 	_CRHaveData 				; found it
.172a	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.172c	18		clc				clc 								; try the next line, keep going.
.172d	b2 18		lda ($18)			lda 	(codePtr)
.172f	65 18		adc $18				adc 	codePtr
.1731	85 18		sta $18				sta 	codePtr
.1733	90 e6		bcc $171b			bcc 	_CRNextLine
.1735	e6 19		inc $19				inc 	codePtr+1
.1737	80 e2		bra $171b			bra 	_CRNextLine
.1739					_CRNoData:
.1739	4c f0 2a	jmp $2af0		jmp	ErrorV_data
.173c					_CLType:
.173c	4c 68 2a	jmp $2a68		jmp	ErrorV_type
.173f					_CRSyntax:
.173f	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.1742					_CRHaveData:
.1742	20 03 1a	jsr $1a03			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1745	68		pla				pla 								; type of l-expr
.1746	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1748	30 f2		bmi $173c			bmi 	_CLType
.174a	68		pla				pla 								; restore address
.174b	85 25		sta $25				sta 	zTemp0+1
.174d	68		pla				pla
.174e	85 24		sta $24				sta 	zTemp0
.1750	20 cc 15	jsr $15cc			jsr 	AssignData 					; write R0 there.
.1753	9c 13 05	stz $0513			stz 	dataInStatement 			; clear in data flag
.1756	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1758	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.175a	d0 04		bne $1760			bne 	_CRSwapBack
.175c	c8		iny				iny 								; consume comma
.175d	ee 13 05	inc $0513			inc 	dataInStatement 			; set in data statement flag.
.1760					_CRSwapBack:
.1760	20 dc 17	jsr $17dc			jsr 	SwapCodeDataPointers		; swap them back.
.1763	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1765	c8		iny				iny
.1766	c9 99		cmp #$99			cmp 	#PR_COMMA
.1768	f0 9b		beq $1705			beq 	Command_READ 				; if so go round again.
.176a	88		dey				dey 								; unpick get.
.176b	60		rts				rts
.176c					Command_DATA:
.176c	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.176e	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1770	20 48 29	jsr $2948			jsr 	ScanForward
.1773	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1775	d0 01		bne $1778			bne 	_CDNotEOL
.1777	88		dey				dey
.1778					_CDNotEOL:
.1778	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1779					Command_REM:
.1779					Command_REM2:
.1779	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.177b	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.177d	d0 06		bne $1785			bne 	_CRExit
.177f	c8		iny				iny 								; skip over it, it's a comment.
.1780	98		tya				tya
.1781	38		sec				sec
.1782	71 18		adc ($18),y			adc 	(codePtr),y
.1784	a8		tay				tay
.1785					_CRExit:
.1785	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.1786					Command_RENUMBER:
.1786	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.1788	85 08		sta $08				sta 	IM0+IFR0
.178a	a9 03		lda #$03			lda 	#1000 >> 8
.178c	85 09		sta $09				sta 	IM1+IFR0
.178e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1790	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1792	f0 07		beq $179b			beq 	_CRIsDefault
.1794	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1796	f0 03		beq $179b			beq 	_CRIsDefault
.1798	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; get other start
.179b					_CRIsDefault:
.179b	5a		phy				phy
.179c	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.179e	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.17a1	85 25		sta $25				sta 	zTemp0+1
.17a3					_CRRenumberLoop:
.17a3	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.17a5	f0 21		beq $17c8			beq 	_CRExit
.17a7	18		clc				clc
.17a8	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.17aa	a5 08		lda $08				lda 	IFR0+IM0
.17ac	91 24		sta ($24),y			sta 	(zTemp0),y
.17ae	69 0a		adc #$0a			adc 	#10
.17b0	85 08		sta $08				sta 	IFR0+IM0
.17b2	c8		iny				iny
.17b3	a5 09		lda $09				lda 	IFR0+IM1
.17b5	91 24		sta ($24),y			sta 	(zTemp0),y
.17b7	69 00		adc #$00			adc 	#0
.17b9	85 09		sta $09				sta 	IFR0+IM1
.17bb	18		clc				clc 								; next line.
.17bc	b2 24		lda ($24)			lda 	(zTemp0)
.17be	65 24		adc $24				adc 	zTemp0
.17c0	85 24		sta $24				sta 	zTemp0
.17c2	90 df		bcc $17a3			bcc 	_CRRenumberLoop
.17c4	e6 25		inc $25				inc 	zTemp0+1
.17c6	80 db		bra $17a3			bra 	_CRRenumberLoop
.17c8					_CRExit:
.17c8	7a		ply				ply
.17c9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.17ca					S
.17ca					Command_RESTORE:
.17ca	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.17cd	8d 10 05	sta $0510			sta 	dataPtr+1
.17d0	9c 0f 05	stz $050f			stz 	dataPtr
.17d3	a9 03		lda #$03			lda 	#3 							; position start of line
.17d5	8d 11 05	sta $0511			sta 	dataPos
.17d8	9c 13 05	stz $0513			stz 	dataInStatement 			; not in statement
.17db	60		rts				rts
.17dc					SwapCodeDataPointers:
.17dc	ad 0f 05	lda $050f			lda 	dataPtr 					; swap LSB of code/data
.17df	a6 18		ldx $18				ldx 	codePtr
.17e1	85 18		sta $18				sta 	codePtr
.17e3	8e 0f 05	stx $050f			stx 	dataPtr
.17e6	ad 10 05	lda $0510			lda 	dataPtr+1 					; swap MSB of code/data
.17e9	a6 19		ldx $19				ldx 	codePtr+1
.17eb	85 19		sta $19				sta 	codePtr+1
.17ed	8e 10 05	stx $0510			stx 	dataPtr+1
.17f0	ad 11 05	lda $0511			lda 	dataPos 					; swap dataPos and Y
.17f3	8c 11 05	sty $0511			sty 	dataPos
.17f6	a8		tay				tay
.17f7	60		rts				rts
.050f					dataPtr:
>050f							.fill 	2
.0511					dataPos:
>0511							.fill 	2
.0513					dataInStatement:
>0513							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.17f8					Command_RUN:
.17f8	20 30 13	jsr $1330			jsr 	ClearCode					; clear everything out.
.17fb	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.17fe	85 19		sta $19				sta 	codePtr+1
.1800	64 18		stz $18				stz 	codePtr
.1802	80 0b		bra $180f			bra 	RUNNewLine
.1804					RUNEndOfLine:
.1804	18		clc				clc 								; advance to next line.
.1805	b2 18		lda ($18)			lda 	(codePtr)
.1807	65 18		adc $18				adc 	codePtr
.1809	85 18		sta $18				sta 	codePtr
.180b	90 02		bcc $180f			bcc 	_RELNoCarry
.180d	e6 19		inc $19				inc 	codePtr+1
.180f					_RELNoCarry:
.180f					RUNNewLine:
.180f	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1811	9a		txs				txs
.1812	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1814	f0 52		beq $1868			beq 	Command_END
.1816	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1818	b1 18		lda ($18),y			lda 	(codePtr),y
.181a	8d 30 06	sta $0630			sta 	ERRLine
.181d	c8		iny				iny
.181e	b1 18		lda ($18),y			lda 	(codePtr),y
.1820	8d 31 06	sta $0631			sta 	ERRLine+1
.1823	c8		iny				iny 								; offset into codePtr for start of line.
.1824					RUNNewCommand:
.1824	9c 25 06	stz $0625			stz 	stringInitialised 			; reset string system flag.
.1827	ce 14 05	dec $0514			dec 	checkCounter				; don't do these checks ever command
.182a	d0 0a		bne $1836			bne 	_RNCNoCheck
.182c	5a		phy				phy 								; keyboard check.
.182d	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1830	7a		ply				ply
.1831	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1834	d0 1e		bne $1854			bne 	_RUNBreak
.1836					_RNCNoCheck:
.1836	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1838	10 1d		bpl $1857			bpl		_RUNNotToken 				; probably an identifier
.183a	c8		iny				iny 								; consume token
.183b	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.183d	f0 e5		beq $1824			beq 	RUNNewCommand
.183f	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1841	b0 0e		bcs $1851			bcs 	_RUNSyntax
.1843	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1845	90 0a		bcc $1851			bcc 	_RUNSyntax
.1847	0a		asl a				asl 	a 							; double into X.
.1848	aa		tax				tax
.1849	20 4e 18	jsr $184e			jsr 	_RUNDispatchMain			; call the main dispatcher
.184c	80 d6		bra $1824			bra 	RUNNewCommand
.184e					_RUNDispatchMain:
.184e	7c ce 20	jmp ($20ce,x)			jmp 	(VectorTable,x)
.1851					_RUNSyntax:
.1851	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.1854					_RUNBreak:
.1854	4c c3 2b	jmp $2bc3		jmp	ErrorV_break
.1857					_RUNNotToken:
.1857	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.1859	90 f6		bcc $1851			bcc 	_RUNSyntax
.185b	20 ab 15	jsr $15ab			jsr 	CommandLET 					; assignment
.185e	80 c4		bra $1824			bra 	RUNNewCommand 				; loop round.
.1860					Command_Shift_Handler:
.1860	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1862	c8		iny				iny
.1863	0a		asl a				asl 	a 							; double into X
.1864	aa		tax				tax
.1865	7c ce 21	jmp ($21ce,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1868					Command_END:
.1868	4c 99 2e	jmp $2e99			jmp 	WarmStart
.0514					checkCounter:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.186b					Command_STOP:
.186b	4c dc 2a	jmp $2adc		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.186e					Command_Sys:
.186e	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; execution address
.1871	5a		phy				phy
.1872	ad 78 06	lda $0678			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1875	ae d4 06	ldx $06d4			ldx 	('X'-'A')*4 + FastVariables
.1878	ac d8 06	ldy $06d8			ldy 	('Y'-'A')*4 + FastVariables
.187b	20 80 18	jsr $1880			jsr 	_CSCallIFR0 				; call the code
.187e	7a		ply				ply
.187f	60		rts				rts
.1880					_CSCallIFR0:
.1880	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1883					NoExec01:
.1883					NoExec02:
.1883					NoExec03:
.1883					NoExec04:
.1883					NoExec05:
.1883					NoExec06:
.1883					NoExec07:
.1883					NoExec08:
.1883	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1886					EXPBinAdd:
.1886	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1888	30 6f		bmi $18f9			bmi 	EXPConcatenate
.188a	a2 0c		ldx #$0c			ldx 	#IFR1
.188c	4c b8 30	jmp $30b8			jmp 	IFloatAdd
.188f					EXPBinSub:
.188f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1891	30 3f		bmi $18d2			bmi 	EXPTypeError
.1893	a2 0c		ldx #$0c			ldx 	#IFR1
.1895	4c b1 30	jmp $30b1			jmp 	IFloatSubtract
.1898					EXPBinMul:
.1898	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.189a	30 36		bmi $18d2			bmi 	EXPTypeError
.189c	a2 0c		ldx #$0c			ldx 	#IFR1
.189e	4c 62 31	jmp $3162			jmp 	IFloatMultiply
.18a1					EXPBinFDiv:
.18a1	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18a3	30 2d		bmi $18d2			bmi 	EXPTypeError
.18a5	a2 0c		ldx #$0c			ldx 	#IFR1
.18a7	20 e4 33	jsr $33e4			jsr 	IFloatDivideFloat
.18aa	b0 0f		bcs $18bb			bcs 	EXPDZero
.18ac	60		rts				rts
.18ad					EXPBinIDiv:
.18ad	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18af	30 21		bmi $18d2			bmi 	EXPTypeError
.18b1	a2 0c		ldx #$0c			ldx 	#IFR1
.18b3	20 e4 33	jsr $33e4			jsr 	IFloatDivideFloat
.18b6	b0 03		bcs $18bb			bcs 	EXPDZero
.18b8	4c c1 33	jmp $33c1			jmp 	IFloatIntegerR0
.18bb					EXPDZero:
.18bb	4c b1 2a	jmp $2ab1		jmp	ErrorV_divzero
.18be					EXPBinIMod:
.18be	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18c0	30 10		bmi $18d2			bmi 	EXPTypeError
.18c2	a2 0c		ldx #$0c			ldx 	#IFR1
.18c4	5a		phy				phy
.18c5	20 f7 32	jsr $32f7			jsr 	IFPreProcessBitwise 		; set up everything.
.18c8	d0 05		bne $18cf			bne 	EXPDRange
.18ca	20 30 32	jsr $3230			jsr 	IFloatModulusInteger
.18cd	7a		ply				ply
.18ce	60		rts				rts
.18cf					EXPDRange:
.18cf	4c 49 2a	jmp $2a49		jmp	ErrorV_range
.18d2					EXPTypeError:
.18d2	4c 68 2a	jmp $2a68		jmp	ErrorV_type
.18d5					EXPBinAnd:
.18d5	24 0b		bit $0b				bit 	IFR0+IExp
.18d7	30 f9		bmi $18d2			bmi 	EXPTypeError
.18d9	a2 0c		ldx #$0c			ldx 	#IFR1
.18db	20 b2 32	jsr $32b2			jsr 	IFloatBitwiseAnd
.18de	b0 ef		bcs $18cf			bcs 	EXPDRange
.18e0	60		rts				rts
.18e1					EXPBinOr:
.18e1	24 0b		bit $0b				bit 	IFR0+IExp
.18e3	30 ed		bmi $18d2			bmi 	EXPTypeError
.18e5	a2 0c		ldx #$0c			ldx 	#IFR1
.18e7	20 c9 32	jsr $32c9			jsr 	IFloatBitwiseOr
.18ea	b0 e3		bcs $18cf			bcs 	EXPDRange
.18ec	60		rts				rts
.18ed					EXPBinXor:
.18ed	24 0b		bit $0b				bit 	IFR0+IExp
.18ef	30 e1		bmi $18d2			bmi 	EXPTypeError
.18f1	a2 0c		ldx #$0c			ldx 	#IFR1
.18f3	20 e0 32	jsr $32e0			jsr 	IFloatBitwiseXor
.18f6	b0 d7		bcs $18cf			bcs 	EXPDRange
.18f8	60		rts				rts
.18f9					EXPConcatenate:
.18f9	18		clc				clc
.18fa	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.18fc	72 0c		adc ($0c)			adc 	(IFR1)
.18fe	b0 2d		bcs $192d			bcs 	_EXPCError 					; far too long.
.1900	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1902	da		phx				phx
.1903	a6 09		ldx $09				ldx 	IFR0+1
.1905	da		phx				phx
.1906	20 18 2d	jsr $2d18			jsr 	StringTempAllocate 			; allocate string, set up return
.1909	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.190b	a5 0c		lda $0c				lda 	IFR1
.190d	20 16 19	jsr $1916			jsr 	_EXPCCopyXA
.1910	fa		plx				plx 								; copy second string
.1911	68		pla				pla
.1912	20 16 19	jsr $1916			jsr 	_EXPCCopyXA
.1915	60		rts				rts
.1916					_EXPCCopyXA:
.1916	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.1918	85 24		sta $24				sta 	zTemp0
.191a	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.191c	f0 0e		beq $192c			beq 	_EXPCCExit 					; nothing in string
.191e	aa		tax				tax 								; count
.191f	5a		phy				phy 								; start position
.1920	a0 01		ldy #$01			ldy 	#1
.1922					_EXPCCLoop:
.1922	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.1924	20 4d 2d	jsr $2d4d			jsr 	StringTempWrite
.1927	c8		iny				iny
.1928	ca		dex				dex
.1929	d0 f7		bne $1922			bne 	_EXPCCLoop
.192b	7a		ply				ply
.192c					_EXPCCExit:
.192c	60		rts				rts
.192d					_EXPCError:
.192d	4c 55 2b	jmp $2b55		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1930					EXPReturnTrue:
.1930	a2 08		ldx #$08			ldx 	#IFR0
.1932	a9 01		lda #$01			lda 	#1
.1934	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.1937	20 cb 36	jsr $36cb			jsr 	IFloatNegate
.193a	60		rts				rts
.193b					EXPReturnFalse:
.193b	a2 08		ldx #$08			ldx 	#IFR0
.193d	4c c0 36	jmp $36c0			jmp 	IFloatSetZero
.1940					EXPCompareEqual:
.1940	20 76 19	jsr $1976			jsr 	EXPCompareBaseCode
.1943	c9 00		cmp #$00			cmp 	#0
.1945	f0 e9		beq $1930			beq 	EXPReturnTrue
.1947	80 f2		bra $193b			bra 	EXPReturnFalse
.1949					EXPCompareLess:
.1949	20 76 19	jsr $1976			jsr 	EXPCompareBaseCode
.194c	c9 ff		cmp #$ff			cmp 	#$FF
.194e	f0 e0		beq $1930			beq 	EXPReturnTrue
.1950	80 e9		bra $193b			bra 	EXPReturnFalse
.1952					EXPCompareGreater:
.1952	20 76 19	jsr $1976			jsr 	EXPCompareBaseCode
.1955	c9 01		cmp #$01			cmp 	#1
.1957	f0 d7		beq $1930			beq 	EXPReturnTrue
.1959	80 e0		bra $193b			bra 	EXPReturnFalse
.195b					EXPCompareNotEqual:
.195b	20 76 19	jsr $1976			jsr 	EXPCompareBaseCode
.195e	c9 00		cmp #$00			cmp 	#0
.1960	d0 ce		bne $1930			bne 	EXPReturnTrue
.1962	80 d7		bra $193b			bra 	EXPReturnFalse
.1964					EXPCompareLessEqual:
.1964	20 76 19	jsr $1976			jsr 	EXPCompareBaseCode
.1967	c9 01		cmp #$01			cmp 	#1
.1969	d0 c5		bne $1930			bne 	EXPReturnTrue
.196b	80 ce		bra $193b			bra 	EXPReturnFalse
.196d					EXPCompareGreaterEqual:
.196d	20 76 19	jsr $1976			jsr 	EXPCompareBaseCode
.1970	c9 ff		cmp #$ff			cmp 	#$FF
.1972	d0 bc		bne $1930			bne 	EXPReturnTrue
.1974	80 c5		bra $193b			bra 	EXPReturnFalse
.1976					EXPCompareBaseCode:
.1976	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1978	30 10		bmi $198a			bmi 	_EXCBCString
.197a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.197c	20 8f 33	jsr $338f			jsr 	IFloatCompare
.197f	a5 08		lda $08				lda 	IFR0+IM0
.1981	f0 06		beq $1989			beq 	_EXCBCExit 					; return 0 if zero
.1983	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1985	50 02		bvc $1989			bvc 	_EXCBCExit
.1987	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1989					_EXCBCExit:
.1989	60		rts				rts
.198a					_EXCBCString:
.198a	5a		phy				phy
.198b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.198d	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.198f	90 02		bcc $1993			bcc 	_EXCBCSmaller
.1991	b2 0c		lda ($0c)			lda 	(IFR1)
.1993					_EXCBCSmaller:
.1993	aa		tax				tax
.1994	f0 0d		beq $19a3			beq 	_EXCBCMatches 				; if zero common length matches
.1996	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1998					_EXCBCCheckSmallerMatches:
.1998	c8		iny				iny 								; compare directly as far as common length
.1999	38		sec				sec
.199a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.199c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.199e	d0 08		bne $19a8			bne 	_EXCBCExit2
.19a0	ca		dex				dex
.19a1	d0 f5		bne $1998			bne 	_EXCBCCheckSmallerMatches
.19a3					_EXCBCMatches:
.19a3	38		sec				sec
.19a4	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.19a6	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.19a8					_EXCBCExit2:
.19a8	7a		ply				ply
.19a9	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.19ab	f0 04		beq $19b1			beq 	_EXCBCReturn
.19ad	30 03		bmi $19b2			bmi 	_EXCBCFF 					; return $FF if <
.19af	a9 01		lda #$01			lda 	#1 							; return 1 if >
.19b1					_EXCBCReturn:
.19b1	60		rts				rts
.19b2					_EXCBCFF:
.19b2	a9 ff		lda #$ff			lda 	#$FF
.19b4	60		rts				rts
.19b5					_EXCBCRange:
.19b5	4c 49 2a	jmp $2a49		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.19b8					EXPBinLeft:
.19b8	a9 ff		lda #$ff			lda 	#$FF
.19ba	8d 15 05	sta $0515			sta 	EXPShiftLeftFlag
.19bd	4c c3 19	jmp $19c3			jmp 	EXPShiftCommon
.19c0					EXPBinRight:
.19c0	9c 15 05	stz $0515			stz 	EXPShiftLeftFlag
.19c3					EXPShiftCommon:
.19c3	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.19c5	05 0f		ora $0f				ora 	IFR1+IExp
.19c7	29 7f		and #$7f			and 	#$7F
.19c9	d0 35		bne $1a00			bne 	_EXPSRange
.19cb	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.19cd	29 e0		and #$e0			and 	#$E0
.19cf	05 09		ora $09				ora 	IFR0+IM1
.19d1	05 0a		ora $0a				ora 	IFR0+IM2
.19d3	d0 25		bne $19fa			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.19d5	5a		phy				phy
.19d6	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.19d8	29 1f		and #$1f			and 	#$1F
.19da	f0 17		beq $19f3			beq 	_EXPSExit 					; exit if zero
.19dc	a8		tay				tay
.19dd					_EXPSLoop:
.19dd	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.19df	2c 15 05	bit $0515			bit 	EXPShiftLeftFlag
.19e2	30 05		bmi $19e9			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.19e4	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.19e7	80 07		bra $19f0			bra 	_EXPSContinue
.19e9					_EXPSShiftLeft:
.19e9	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.19ec	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.19ee	30 10		bmi $1a00			bmi 	_EXPSRange
.19f0					_EXPSContinue:
.19f0	88		dey				dey 								; do it Y times
.19f1	d0 ea		bne $19dd			bne 	_EXPSLoop
.19f3					_EXPSExit:
.19f3	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.19f5	20 51 36	jsr $3651			jsr 	IFloatCopyFromRegister
.19f8	7a		ply				ply
.19f9	60		rts				rts
.19fa					_EXPSShiftZero:
.19fa	a2 08		ldx #$08			ldx 	#IFR0
.19fc	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.19ff	60		rts				rts
.1a00					_EXPSRange:
.1a00	4c 49 2a	jmp $2a49		jmp	ErrorV_range
.0515					EXPShiftLeftFlag:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1a03					EXPEvaluateExpression:
.1a03	a9 00		lda #$00			lda 	#0 							; current precedence
.1a05					EXPEvaluateExpressionPrecedenceA:
.1a05	48		pha				pha
.1a06	20 80 1a	jsr $1a80			jsr 	EXPTermValueR0				; do first term.
.1a09					_EELoop:
.1a09	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1a0b	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1a0d	90 31		bcc $1a40			bcc 	_EEExit
.1a0f	aa		tax				tax 								; access the precedence of the operator.
.1a10	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1a11	dd de 1d	cmp $1dde,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a14	b0 2b		bcs $1a41			bcs 	_EEExit2
.1a16	48		pha				pha 								; save current precedence.
.1a17	da		phx				phx 								; save operator
.1a18	c8		iny				iny 								; consume operator
.1a19	da		phx				phx
.1a1a	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1a1c	20 0f 36	jsr $360f			jsr 	IFloatPushRx
.1a1f	fa		plx				plx
.1a20	bd de 1d	lda $1dde,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a23	20 05 1a	jsr $1a05			jsr 	EXPEvaluateExpressionPrecedenceA
.1a26	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1a28	20 30 36	jsr $3630			jsr 	IFloatPullRx
.1a2b	fa		plx				plx 								; operator
.1a2c	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.1a2e	45 0f		eor $0f				eor 	IFR1+IExp
.1a30	30 08		bmi $1a3a			bmi 	_EEType		 				; MSBs differ, error.
.1a32					_EETypeOkay:
.1a32	8a		txa				txa
.1a33	0a		asl a				asl 	a 							; double -> X
.1a34	aa		tax				tax
.1a35	20 3d 1a	jsr $1a3d			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1a38	80 cf		bra $1a09			bra 	_EELoop
.1a3a					_EEType:
.1a3a	4c 68 2a	jmp $2a68		jmp	ErrorV_type
.1a3d					_EECallBinary:
.1a3d	7c ce 20	jmp ($20ce,x)			jmp 	(VectorTable,x)
.1a40					_EEExit:
.1a40	68		pla				pla 								; throw precedence
.1a41					_EEExit2:
.1a41	18		clc				clc
.1a42	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1a43					EXPEvalNumber:
.1a43	20 03 1a	jsr $1a03			jsr 	EXPEvaluateExpression 		; get a value
.1a46	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1a48	30 01		bmi $1a4b			bmi 	EVUType
.1a4a	60		rts				rts
.1a4b					EVUType:
.1a4b	4c 68 2a	jmp $2a68		jmp	ErrorV_type
.1a4e					EXPEvalInteger:
.1a4e	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1a51	20 c1 33	jsr $33c1			jsr 	IFloatIntegerR0
.1a54	60		rts				rts
.1a55					EXPEvalInteger16:
.1a55	20 4e 1a	jsr $1a4e			jsr 	EXPEvalInteger 				; get integer
.1a58	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1a5a	d0 21		bne $1a7d			bne 	EVURange
.1a5c	a6 09		ldx $09				ldx 	IFR0+IM1
.1a5e	a5 08		lda $08				lda 	IFR0+IM0
.1a60	60		rts				rts
.1a61					EXPEvalInteger8:
.1a61	20 4e 1a	jsr $1a4e			jsr 	EXPEvalInteger 				; get integer
.1a64	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1a66	05 09		ora $09				ora 	IFR0+IM1
.1a68	d0 13		bne $1a7d			bne 	EVURange
.1a6a	a5 08		lda $08				lda 	IFR0+IM0
.1a6c	60		rts				rts
.1a6d					EXPEvalString:
.1a6d	20 03 1a	jsr $1a03			jsr 	EXPEvaluateExpression 		; get value
.1a70	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1a72	10 d7		bpl $1a4b			bpl 	EVUType
.1a74	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1a76	86 25		stx $25				stx 	zTemp0+1
.1a78	a5 08		lda $08				lda 	IFR0+IM0
.1a7a	85 24		sta $24				sta 	zTemp0
.1a7c	60		rts				rts
.1a7d					EVURange:
.1a7d	4c 49 2a	jmp $2a49		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1a80					EXPTermValueR0:
.1a80	20 cb 1a	jsr $1acb			jsr 	EXPTermR0 					; get term
.1a83	90 45		bcc $1aca			bcc 	_ETVNotReference 			; exit if value.
.1a85	5a		phy				phy
.1a86	a0 03		ldy #$03			ldy 	#3 							; get type
.1a88	b1 08		lda ($08),y			lda 	(IFR0),y
.1a8a	30 14		bmi $1aa0			bmi 	_ETVDereferenceString
.1a8c	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1a8e	88		dey				dey 								; get byte 2
.1a8f	b1 08		lda ($08),y			lda 	(IFR0),y
.1a91	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1a93	88		dey				dey 								; get byte 1
.1a94	b1 08		lda ($08),y			lda 	(IFR0),y
.1a96	aa		tax				tax 								; save in X so we can overwrite it
.1a97	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1a99	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1a9b	85 08		sta $08				sta 	IFR0+IM0
.1a9d	7a		ply				ply
.1a9e	18		clc				clc
.1a9f	60		rts				rts
.1aa0					_ETVDereferenceString:
.1aa0	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1aa2	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1aa4	12 08		ora ($08)			ora 	(IFR0)
.1aa6	f0 11		beq $1ab9			beq 	_ETVNull 					; if so, return a fake NULL.
.1aa8	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1aaa	aa		tax				tax
.1aab	b2 08		lda ($08)			lda 	(IFR0)
.1aad	18		clc				clc 								; add two so points to actual string.
.1aae	69 02		adc #$02			adc 	#2
.1ab0	90 01		bcc $1ab3			bcc 	_EVDSNoCarry
.1ab2	e8		inx				inx
.1ab3					_EVDSNoCarry:
.1ab3	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1ab5	85 08		sta $08				sta 	IFR0
.1ab7	80 08		bra $1ac1			bra 	_ETVFillExit 				; tidy up and exit.
.1ab9					_ETVNull:
.1ab9	a9 c9		lda #$c9			lda 	#_EVTNString & $FF
.1abb	85 08		sta $08				sta 	IFR0+IM0
.1abd	a9 1a		lda #$1a			lda 	#_EVTNString >> 8
.1abf	85 09		sta $09				sta 	IFR0+IM1
.1ac1					_ETVFillExit:
.1ac1	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1ac3	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1ac5	85 0b		sta $0b				sta 	IFR0+IExp
.1ac7	7a		ply				ply
.1ac8	60		rts				rts
.1ac9					_EVTNString:
>1ac9	00						.byte 	0
.1aca					_ETVNotReference:
.1aca	60		rts				rts
.1acb					EXPTermR0:
.1acb	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1acd	30 10		bmi $1adf			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1acf	c8		iny				iny 								; consume element
.1ad0	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1ad2	b0 08		bcs $1adc			bcs 	_ETMIdentifier
.1ad4	20 0a 1b	jsr $1b0a			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1ad7	20 3d 1b	jsr $1b3d			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1ada	18		clc				clc 								; return value ok
.1adb	60		rts				rts
.1adc					_ETMIdentifier:
.1adc	4c 59 30	jmp $3059			jmp 	VARCheckSimple 				; check variables, seperate module.
.1adf					_ETMIsUnaryOrMinus:
.1adf	c8		iny				iny 								; consume element
.1ae0	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1ae2	d0 0e		bne $1af2			bne 	_ETMCheckUnary
.1ae4	20 80 1a	jsr $1a80			jsr 	EXPTermValueR0 				; get a term to negate
.1ae7	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1ae9	20 cb 36	jsr $36cb			jsr 	IFloatNegate
.1aec	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1aee	30 17		bmi $1b07			bmi 	_ETMUnaryType				; if so error.
.1af0	18		clc				clc
.1af1	60		rts				rts
.1af2					_ETMCheckUnary:
.1af2	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1af4	90 0e		bcc $1b04			bcc 	_ETMUnarySyntax
.1af6	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1af8	b0 0a		bcs $1b04			bcs 	_ETMUnarySyntax
.1afa	0a		asl a				asl 	a 							; make it into an index => X
.1afb	aa		tax				tax
.1afc	20 01 1b	jsr $1b01			jsr 	_ETMCallUnaryFunction 		; call the function
.1aff	18		clc				clc 								; and return it.
.1b00	60		rts				rts
.1b01					_ETMCallUnaryFunction:
.1b01	7c ce 20	jmp ($20ce,x)			jmp 	(VectorTable,x)
.1b04					_ETMUnarySyntax:
.1b04	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.1b07					_ETMUnaryType:
.1b07	4c 68 2a	jmp $2a68		jmp	ErrorV_type
.1b0a					EXPExtractTokenisedInteger:
.1b0a	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1b0c	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1b0e	64 09		stz $09				stz 	IFR0+IM1
.1b10	64 0a		stz $0a				stz 	IFR0+IM2
.1b12					_ETMConstant:
.1b12	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1b14	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1b16	b0 24		bcs $1b3c			bcs 	_ETMCExit 					; no, exit.
.1b18	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1b1a	a5 09		lda $09				lda 	IFR0+IM1
.1b1c	85 0a		sta $0a				sta 	IFR0+IM2
.1b1e	a5 08		lda $08				lda 	IFR0+IM0
.1b20	85 09		sta $09				sta 	IFR0+IM1
.1b22	64 08		stz $08				stz 	IFR0+IM0
.1b24	8a		txa				txa
.1b25	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1b26	66 0a		ror $0a				ror 	IFR0+IM2
.1b28	66 09		ror $09				ror 	IFR0+IM1
.1b2a	66 08		ror $08				ror 	IFR0+IM0
.1b2c	4a		lsr a				lsr 	a
.1b2d	66 0a		ror $0a				ror 	IFR0+IM2
.1b2f	66 09		ror $09				ror 	IFR0+IM1
.1b31	66 08		ror $08				ror 	IFR0+IM0
.1b33	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1b35	11 18		ora ($18),y			ora 	(codePtr),y
.1b37	85 08		sta $08				sta 	IFR0+IM0
.1b39	c8		iny				iny 								; consume, loop back
.1b3a	80 d6		bra $1b12			bra 	_ETMConstant
.1b3c					_ETMCExit:
.1b3c	60		rts				rts
.1b3d					EXPCheckDecimalFollows:
.1b3d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1b3f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b41	d0 19		bne $1b5c			bne 	_ETMCDExit
.1b43	c8		iny				iny 								; consume token.
.1b44	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1b46	5a		phy				phy									; save current position
.1b47	48		pha				pha 								; save count of chars.
.1b48	38		sec				sec 								; address into YX : y + codePtr+1
.1b49	98		tya				tya
.1b4a	65 18		adc $18				adc 	codePtr
.1b4c	aa		tax				tax
.1b4d	a5 19		lda $19				lda 	codePtr+1
.1b4f	69 00		adc #$00			adc 	#0
.1b51	a8		tay				tay
.1b52	68		pla				pla 								; get count.
.1b53	20 64 35	jsr $3564			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1b56	7a		ply				ply 								; go to next token.
.1b57	98		tya				tya
.1b58	38		sec				sec
.1b59	71 18		adc ($18),y			adc 	(codePtr),y
.1b5b	a8		tay				tay
.1b5c					_ETMCDExit:
.1b5c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1b5d					EXPUnaryAbs:
.1b5d	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 					; number to R0
.1b60	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1b63	20 03 33	jsr $3303			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1b66	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1b67					EXPUnaryNull:
.1b67	20 80 1a	jsr $1a80			jsr 	EXPTermValueR0
.1b6a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1b6b					EXPUnaryAsc:
.1b6b	20 6d 1a	jsr $1a6d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b6e	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1b71	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1b73	f0 06		beq $1b7b			beq 	_EXAZero 						; if so return 0
.1b75	5a		phy				phy 									; otherwise get first character
.1b76	a0 01		ldy #$01			ldy 	#1
.1b78	b1 24		lda ($24),y			lda 	(zTemp0),y
.1b7a	7a		ply				ply
.1b7b					_EXAZero:
.1b7b	a2 08		ldx #$08			ldx 	#IFR0
.1b7d	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.1b80	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1b81					EXPUnaryChr:
.1b81	20 61 1a	jsr $1a61			jsr 	EXPEvalInteger8 				; expr
.1b84	48		pha				pha 									; push on stack
.1b85	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1b88	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1b8a	20 18 2d	jsr $2d18			jsr 	StringTempAllocate
.1b8d	68		pla				pla 									; get value back
.1b8e	20 4d 2d	jsr $2d4d			jsr 	StringTempWrite 				; write to string.
.1b91	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1b92					EXPUnaryDec:
.1b92	20 6d 1a	jsr $1a6d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b95	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1b98	5a		phy				phy 									; save position.
.1b99	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1b9b	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.1b9e	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1ba0	f0 3b		beq $1bdd			beq 	_EUDError 						; empty string is not legit.
.1ba2	aa		tax				tax 									; count in X.
.1ba3	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1ba5					_EUDLoop:
.1ba5	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1ba7	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1ba9	90 02		bcc $1bad			bcc 	_EUDNoCase
.1bab	e9 20		sbc #$20			sbc 	#$20
.1bad					_EUDNoCase:
.1bad	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1baf	90 2c		bcc $1bdd			bcc 	_EUDError
.1bb1	c9 3a		cmp #$3a			cmp 	#'9'+1
.1bb3	90 0a		bcc $1bbf			bcc 	_EUDOkay
.1bb5	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1bb7	90 24		bcc $1bdd			bcc 	_EUDError
.1bb9	c9 47		cmp #$47			cmp 	#'F'+1
.1bbb	b0 20		bcs $1bdd			bcs 	_EUDError
.1bbd	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1bbf					_EUDOkay:
.1bbf	29 0f		and #$0f			and 	#15 							; make constant
.1bc1	da		phx				phx
.1bc2	48		pha				pha
.1bc3	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1bc5	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.1bc8	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.1bcb	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.1bce	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.1bd1	68		pla				pla 									; pop constant and OR in
.1bd2	fa		plx				plx
.1bd3	05 08		ora $08				ora 	IFR0+IM0
.1bd5	85 08		sta $08				sta 	IFR0+IM0
.1bd7	c8		iny				iny 									; next char
.1bd8	ca		dex				dex 									; done all characters ?
.1bd9	d0 ca		bne $1ba5			bne 	_EUDLoop
.1bdb	7a		ply				ply
.1bdc	60		rts				rts
.1bdd					_EUDError:
.1bdd	4c 5a 2a	jmp $2a5a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1be0					EXPUnaryInlineDec:
.1be0	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1be3					EXPUnaryPeek:
.1be3	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 				; number to R0
.1be6	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1be9	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1beb	a2 08		ldx #$08			ldx 	#IFR0
.1bed	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.1bf0	60		rts				rts
.1bf1					EXPUnaryDeek:
.1bf1	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 				; number to R0
.1bf4	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1bf7	5a		phy				phy 									; read MSB and push on stack
.1bf8	a0 01		ldy #$01			ldy 	#1
.1bfa	b1 08		lda ($08),y			lda 	(IFR0),y
.1bfc	7a		ply				ply
.1bfd	48		pha				pha
.1bfe	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1c00	a2 08		ldx #$08			ldx 	#IFR0
.1c02	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.1c05	68		pla				pla 									; set MSB
.1c06	85 09		sta $09				sta 	IFR0+IM1
.1c08	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1c09					EXPUnaryFrac:
.1c09	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 					; number to R0
.1c0c	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1c0f	20 6b 33	jsr $336b			jsr 	IFloatFractionalR0 				; get fractional bit.
.1c12	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1c13					EXPUnaryInkey:
.1c13	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1c16	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1c18	20 18 2d	jsr $2d18			jsr 	StringTempAllocate
.1c1b	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1c1e	b0 06		bcs $1c26			bcs 	_EUIExit
.1c20	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1c23	20 4d 2d	jsr $2d4d			jsr 	StringTempWrite
.1c26					_EUIExit:
.1c26	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1c27					EXPUnaryInt:
.1c27	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 					; number to R0
.1c2a	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; check for )
.1c2d	20 c1 33	jsr $33c1			jsr 	IFloatIntegerR0 				; force to integer.
.1c30	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1c31					EXPUnaryLen:
.1c31	20 6d 1a	jsr $1a6d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1c34	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1c37	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1c39	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1c3b	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.1c3e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1c3f					EXPUnaryParenthesis:
.1c3f	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 					; number to R0
.1c42	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1c45	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1c46					EXPUnaryRnd:
.1c46	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; number to R0
.1c49	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 				; )
.1c4c	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1c4e	20 65 1c	jsr $1c65			jsr 	EXPLoadInRandom
.1c51	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1c53	85 0b		sta $0b				sta 	IFR0+IExp
.1c55	60		rts				rts
.1c56					ExpUnaryRand:
.1c56	20 4e 1a	jsr $1a4e			jsr 	EXPEvalInteger 				; integer to R0
.1c59	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 				; )
.1c5c	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1c5e	20 65 1c	jsr $1c65			jsr 	EXPLoadInRandom
.1c61	20 30 32	jsr $3230			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1c64	60		rts				rts
.1c65					EXPLoadInRandom:
.1c65	20 c0 36	jsr $36c0			jsr 	IFloatSetZero 				; zero it
.1c68	20 7a 1c	jsr $1c7a			jsr 	EXPRandom32 				; do a 23 bit number.
.1c6b	95 00		sta $00,x			sta 	IM0,x
.1c6d	20 7a 1c	jsr $1c7a			jsr 	EXPRandom32
.1c70	95 01		sta $01,x			sta 	IM1,x
.1c72	20 7a 1c	jsr $1c7a			jsr 	EXPRandom32
.1c75	29 7f		and #$7f			and 	#$7F
.1c77	95 02		sta $02,x			sta 	IM2,x
.1c79	60		rts				rts
.1c7a					EXPRandom32:
.1c7a	5a		phy				phy
.1c7b	a0 08		ldy #$08			ldy 	#8
.1c7d	ad 16 05	lda $0516			lda 	EXPSeed+0
.1c80	0d 17 05	ora $0517			ora 	EXPSeed+1
.1c83	0d 18 05	ora $0518			ora 	EXPSeed+2
.1c86	0d 19 05	ora $0519			ora 	EXPSeed+3
.1c89	d0 08		bne $1c93			bne 	_EXPRNoReset
.1c8b	ee 16 05	inc $0516			inc 	EXPSeed+0
.1c8e	a0 10		ldy #$10			ldy 	#16
.1c90	8c 19 05	sty $0519			sty 	EXPSeed+3
.1c93					_EXPRNoReset:
.1c93	ad 16 05	lda $0516			lda 	EXPSeed+0
.1c96					_EXPRLoop:
.1c96	0a		asl a				asl		a
.1c97	2e 17 05	rol $0517			rol 	EXPSeed+1
.1c9a	2e 18 05	rol $0518			rol 	EXPSeed+2
.1c9d	2e 19 05	rol $0519			rol 	EXPSeed+3
.1ca0	90 02		bcc $1ca4			bcc 	_EXPRNoEOR
.1ca2	49 c5		eor #$c5			eor 	#$C5
.1ca4					_EXPRNoEOR:
.1ca4	88		dey				dey
.1ca5	d0 ef		bne $1c96			bne 	_EXPRLoop
.1ca7	8d 16 05	sta $0516			sta 	EXPSeed+0
.1caa	7a		ply				ply
.1cab	60		rts				rts
.0516					EXPSeed:
>0516							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1cac					EXPUnarySgn:
.1cac	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 					; number to R0
.1caf	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1cb2	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1cb4	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister
.1cb7	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1cb9	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.1cbc	a2 0c		ldx #$0c			ldx 	#IFR1
.1cbe	20 8f 33	jsr $338f			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1cc1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1cc2					EXPUnarySqr:
.1cc2	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 					; number to R0
.1cc5	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1cc8	20 0b 33	jsr $330b			jsr 	IFloatSquareRootR0 				; square root.
.1ccb	b0 01		bcs $1cce			bcs 	_EUSValue 						; error check.
.1ccd	60		rts				rts
.1cce					_EUSValue:
.1cce	4c 49 2a	jmp $2a49		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1cd1					EXPUnaryHex:
.1cd1	20 4e 1a	jsr $1a4e			jsr 	EXPEvalInteger 					; expr
.1cd4	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1cd7	5a		phy				phy
.1cd8	a9 10		lda #$10			lda 	#16
.1cda	20 62 34	jsr $3462			jsr 	IFloatIntegerToStringR0
.1cdd	80 0a		bra $1ce9			bra 	EUSMain
.1cdf					EXPUnaryStr:
.1cdf	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 					; expr
.1ce2	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1ce5	5a		phy				phy
.1ce6	20 bd 34	jsr $34bd			jsr 	IFloatFloatToStringR0 			; convert to string
.1ce9					EUSMain:
.1ce9	b0 19		bcs $1d04			bcs 	_EUSError
.1ceb	86 24		stx $24				stx 	zTemp0 							; save string address
.1ced	84 25		sty $25				sty 	zTemp0+1
.1cef	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1cf1	20 18 2d	jsr $2d18			jsr 	StringTempAllocate
.1cf4	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1cf6	aa		tax				tax 									; count in X
.1cf7	a0 01		ldy #$01			ldy 	#1
.1cf9					_EUSCopy:
.1cf9	b1 24		lda ($24),y			lda 	(zTemp0),y
.1cfb	c8		iny				iny
.1cfc	20 4d 2d	jsr $2d4d			jsr 	StringTempWrite
.1cff	ca		dex				dex
.1d00	d0 f7		bne $1cf9			bne	 	_EUSCopy
.1d02	7a		ply				ply
.1d03	60		rts				rts
.1d04					_EUSError:
.1d04	4c 49 2a	jmp $2a49		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1d07					EXPUnaryInlineString:
.1d07	18		clc				clc 								; physical address -> IM0,1
.1d08	98		tya				tya 								; put the actual address in IM0
.1d09	65 18		adc $18				adc 	codePtr
.1d0b	85 08		sta $08				sta 	IFR0+IM0
.1d0d	a5 19		lda $19				lda 	codePtr+1
.1d0f	69 00		adc #$00			adc 	#0
.1d11	85 09		sta $09				sta 	IFR0+IM1
.1d13	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1d15	a9 80		lda #$80			lda 	#$80
.1d17	85 0b		sta $0b				sta 	IFR0+IExp
.1d19	98		tya				tya	 								; skip over it.
.1d1a	38		sec				sec
.1d1b	71 18		adc ($18),y			adc 	(codePtr),y
.1d1d	a8		tay				tay
.1d1e	60		rts				rts
.1d1f					_EXPUISRange:
.1d1f	4c 49 2a	jmp $2a49		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1d22					EXPUnaryLeft:
.1d22	20 68 1d	jsr $1d68			jsr 	EXPCommonStart 					; <string>,
.1d25	48		pha				pha 									; save string address on stack
.1d26	da		phx				phx
.1d27	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1d29	48		pha				pha
.1d2a	20 61 1a	jsr $1a61			jsr 	EXPEvalInteger8 				; characters to do
.1d2d	80 44		bra $1d73			bra 	EXPSubstringCommon
.1d2f					EXPUnaryRight:
.1d2f	20 68 1d	jsr $1d68			jsr 	EXPCommonStart 					; <string>,
.1d32	48		pha				pha 									; save string address on stack
.1d33	da		phx				phx
.1d34	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1d36	48		pha				pha
.1d37	20 61 1a	jsr $1a61			jsr 	EXPEvalInteger8 				; characters to do
.1d3a	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1d3c	68		pla				pla
.1d3d	38		sec				sec
.1d3e	e5 24		sbc $24				sbc 	zTemp0
.1d40	b0 02		bcs $1d44			bcs 	_EUROffLeft
.1d42	a9 00		lda #$00			lda 	#0
.1d44					_EUROffLeft:
.1d44	48		pha				pha 									; start pos
.1d45	a9 ff		lda #$ff			lda 	#255
.1d47	80 2a		bra $1d73			bra 	EXPSubstringCommon
.1d49					EXPUnaryMid:
.1d49	20 68 1d	jsr $1d68			jsr 	EXPCommonStart 					; <string>,
.1d4c	48		pha				pha 									; save string address on stack
.1d4d	da		phx				phx
.1d4e	20 61 1a	jsr $1a61			jsr 	EXPEvalInteger8 				; characters start
.1d51	f0 12		beq $1d65			beq 	_EUSError 						; 1 is left
.1d53	3a		dec a				dec 	a 								; zero based.
.1d54	48		pha				pha
.1d55	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1d57	c9 99		cmp #$99			cmp 	#PR_COMMA
.1d59	f0 04		beq $1d5f			beq 	_EUMLength 						; if so m is provided
.1d5b	a9 ff		lda #$ff			lda 	#255 							; default m
.1d5d	80 14		bra $1d73			bra 	EXPSubstringCommon
.1d5f					_EUMLength:
.1d5f	c8		iny				iny 									; consume comma
.1d60	20 61 1a	jsr $1a61			jsr 	EXPEvalInteger8 				; characters to do
.1d63	80 0e		bra $1d73			bra 	EXPSubstringCommon
.1d65					_EUSError:
.1d65	4c 5a 2a	jmp $2a5a		jmp	ErrorV_value
.1d68					EXPCommonStart:
.1d68	20 6d 1a	jsr $1a6d			jsr 	EXPEvalString
.1d6b	20 2b 2c	jsr $2c2b			jsr 	ERRCheckComma
.1d6e	a5 08		lda $08				lda 	IFR0+IM0
.1d70	a6 09		ldx $09				ldx 	IFR0+IM1
.1d72	60		rts				rts
.1d73					EXPSubstringCommon:
.1d73	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1d75	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; check right bracket.
.1d78	68		pla				pla 									; start position
.1d79	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1d7b	fa		plx				plx 									; get string address to zTemp2.
.1d7c	86 29		stx $29				stx 	zTemp2+1
.1d7e	68		pla				pla
.1d7f	85 28		sta $28				sta 	zTemp2
.1d81	38		sec				sec 									; length - start is the max count of chars
.1d82	b2 28		lda ($28)			lda 	(zTemp2)
.1d84	e5 27		sbc $27				sbc 	zTemp1+1
.1d86	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1d88	b0 02		bcs $1d8c			bcs 	_EXPSSNoTrim
.1d8a	85 26		sta $26				sta 	zTemp1 							; update count with available
.1d8c					_EXPSSNoTrim:
.1d8c	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1d8e	20 18 2d	jsr $2d18			jsr 	StringTempAllocate 				; allocate memory for it.
.1d91	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1d93	f0 15		beq $1daa			beq 	_EXPSSExit
.1d95	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1d97	d2 28		cmp ($28)			cmp 	(zTemp2)
.1d99	b0 0f		bcs $1daa			bcs 	_EXPSSExit
.1d9b	5a		phy				phy
.1d9c	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1d9e	c8		iny				iny 									; +1 for the length byte
.1d9f					_EXPSSCopy:
.1d9f	b1 28		lda ($28),y			lda 	(zTemp2),y
.1da1	20 4d 2d	jsr $2d4d			jsr 	StringTempWrite
.1da4	c8		iny				iny
.1da5	c6 26		dec $26				dec 	zTemp1
.1da7	d0 f6		bne $1d9f			bne 	_EXPSSCopy
.1da9	7a		ply				ply
.1daa					_EXPSSExit:
.1daa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1dab					EXPUnaryVal:
.1dab	20 6d 1a	jsr $1a6d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1dae	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 					; )
.1db1	20 b5 1d	jsr $1db5			jsr 	VALConversionZTemp0
.1db4	60		rts				rts
.1db5					VALConversionZTemp0:
.1db5	5a		phy				phy
.1db6	18		clc				clc
.1db7	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1db9	69 01		adc #$01			adc 	#1
.1dbb	aa		tax				tax
.1dbc	a5 25		lda $25				lda 	zTemp0+1
.1dbe	69 00		adc #$00			adc 	#0
.1dc0	a8		tay				tay
.1dc1	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1dc3	20 24 35	jsr $3524			jsr 	IFloatStringToFloatR0 			; do conversion
.1dc6	b0 02		bcs $1dca			bcs 	_EUVError
.1dc8	7a		ply				ply
.1dc9	60		rts				rts
.1dca					_EUVError:
.1dca	4c 5a 2a	jmp $2a5a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1dcd					AssemblerLookup:
>1dcd	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1dd5	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1de5	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1df5	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1e05	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1e15	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1e25	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1e35	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1e45	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1e55	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1e65	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1e75	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1e85	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1e95	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1ea5	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1eb5	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1ec5	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1ecd					BinaryPrecedence:
>1ecd	02					.byte	 2	; $ef =
>1ece	02					.byte	 2	; $f0 <>
>1ecf	02					.byte	 2	; $f1 <=
>1ed0	02					.byte	 2	; $f2 <
>1ed1	02					.byte	 2	; $f3 >=
>1ed2	02					.byte	 2	; $f4 >
>1ed3	01					.byte	 1	; $f5 XOR
>1ed4	01					.byte	 1	; $f6 OR
>1ed5	01					.byte	 1	; $f7 AND
>1ed6	04					.byte	 4	; $f8 DIV
>1ed7	04					.byte	 4	; $f9 MOD
>1ed8	04					.byte	 4	; $fa <<
>1ed9	04					.byte	 4	; $fb >>
>1eda	04					.byte	 4	; $fc /
>1edb	04					.byte	 4	; $fd *
>1edc	03					.byte	 3	; $fe -
>1edd	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1ede					StructureOffsets:
>1ede	01					.byte	1  	; $80 REPEAT
>1edf	ff					.byte	255	; $81 UNTIL
>1ee0	01					.byte	1  	; $82 WHILE
>1ee1	ff					.byte	255	; $83 WEND
>1ee2	01					.byte	1  	; $84 IF
>1ee3	ff					.byte	255	; $85 ENDIF
>1ee4	01					.byte	1  	; $86 DO
>1ee5	ff					.byte	255	; $87 LOOP
>1ee6	01					.byte	1  	; $88 PROC
>1ee7	ff					.byte	255	; $89 ENDPROC
>1ee8	01					.byte	1  	; $8a FOR
>1ee9	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1eea					StandardTokens:
>1eea	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1ef1	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ef7	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1efd	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1f02	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1f05	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1f0b	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1f0e	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1f13	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1f18	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1f20	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1f24	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1f29	00					.byte	$00                                     	; $8c [[end]]
>1f2a	00					.byte	$00                                     	; $8d [[shift]]
>1f2b	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1f30	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1f35	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1f38	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1f3d	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1f41	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1f47	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1f4d	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1f52	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1f56	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1f5a	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1f5f	01 2c					.byte	$01,$2c                                 	; $99 ,
>1f61	01 3b					.byte	$01,$3b                                 	; $9a ;
>1f63	01 3a					.byte	$01,$3a                                 	; $9b :
>1f65	01 27					.byte	$01,$27                                 	; $9c '
>1f67	01 29					.byte	$01,$29                                 	; $9d )
>1f69	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1f6e	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1f73	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1f78	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1f7d	01 5b					.byte	$01,$5b                                 	; $a2 [
>1f7f	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1f81	01 23					.byte	$01,$23                                 	; $a4 #
>1f83	01 2e					.byte	$01,$2e                                 	; $a5 .
>1f85	00					.byte	0											; $a6
>1f86	00					.byte	0											; $a7
>1f87	00					.byte	0											; $a8
>1f88	00					.byte	0											; $a9
>1f89	00					.byte	0											; $aa
>1f8a	00					.byte	0											; $ab
>1f8b	00					.byte	0											; $ac
>1f8c	00					.byte	0											; $ad
>1f8d	00					.byte	0											; $ae
>1f8e	00					.byte	0											; $af
>1f8f	00					.byte	0											; $b0
>1f90	00					.byte	0											; $b1
>1f91	00					.byte	0											; $b2
>1f92	00					.byte	0											; $b3
>1f93	00					.byte	0											; $b4
>1f94	00					.byte	0											; $b5
>1f95	00					.byte	0											; $b6
>1f96	00					.byte	0											; $b7
>1f97	00					.byte	0											; $b8
>1f98	00					.byte	0											; $b9
>1f99	00					.byte	0											; $ba
>1f9a	00					.byte	0											; $bb
>1f9b	00					.byte	0											; $bc
>1f9c	00					.byte	0											; $bd
>1f9d	00					.byte	0											; $be
>1f9e	00					.byte	0											; $bf
>1f9f	00					.byte	0											; $c0
>1fa0	00					.byte	0											; $c1
>1fa1	00					.byte	0											; $c2
>1fa2	00					.byte	0											; $c3
>1fa3	00					.byte	0											; $c4
>1fa4	00					.byte	0											; $c5
>1fa5	00					.byte	0											; $c6
>1fa6	00					.byte	0											; $c7
>1fa7	00					.byte	0											; $c8
>1fa8	00					.byte	0											; $c9
>1fa9	00					.byte	0											; $ca
>1faa	00					.byte	0											; $cb
>1fab	00					.byte	0											; $cc
>1fac	00					.byte	0											; $cd
>1fad	00					.byte	0											; $ce
>1fae	00					.byte	0											; $cf
>1faf	00					.byte	0											; $d0
>1fb0	00					.byte	0											; $d1
>1fb1	00					.byte	0											; $d2
>1fb2	00					.byte	0											; $d3
>1fb3	00					.byte	0											; $d4
>1fb4	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1fba	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1fc0	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1fc8	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1fcf	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1fd5	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1fdb	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1fe0	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1fe5	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1fea	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1fef	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1ff4	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1ffa	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1fff	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>2007	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>200e	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>2013	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>2018	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>201e	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>2023	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>2029	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>202e	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>2034	01 28					.byte	$01,$28                                 	; $eb (
>2036	01 26					.byte	$01,$26                                 	; $ec &
>2038	00					.byte	$00                                     	; $ed [[decimal]]
>2039	00					.byte	$00                                     	; $ee [[string]]
>203a	01 3d					.byte	$01,$3d                                 	; $ef =
>203c	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>203f	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>2042	01 3c					.byte	$01,$3c                                 	; $f2 <
>2044	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>2047	01 3e					.byte	$01,$3e                                 	; $f4 >
>2049	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>204d	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>2050	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>2054	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>2058	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>205c	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>205f	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>2062	01 2f					.byte	$01,$2f                                 	; $fc /
>2064	01 2a					.byte	$01,$2a                                 	; $fd *
>2066	01 2d					.byte	$01,$2d                                 	; $fe -
>2068	01 2b					.byte	$01,$2b                                 	; $ff +
>206a	ff					.byte	$FF
.206b					AlternateTokens:
>206b	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>2071	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>2075	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>2079	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>207e	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>2082	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>2089	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>208e	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>2093	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>2098	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>209e	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>20a3	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>20aa	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>20b2	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>20b6	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>20ba	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>20c0	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>20c8	52
>20c9	03 4f 50 54				.byte	$03,$4f,$50,$54                         	; $8d91 opt
>20cd	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.20ce					VectorTable:
>20ce	28 29					.word	Command_REPEAT           ; $80 REPEAT
>20d0	31 29					.word	Command_UNTIL            ; $81 UNTIL
>20d2	0b 2a					.word	Command_WHILE            ; $82 WHILE
>20d4	2c 2a					.word	Command_WEND             ; $83 WEND
>20d6	fe 28					.word	IfCommand                ; $84 IF
>20d8	27 29					.word	EndIf                    ; $85 ENDIF
>20da	80 27					.word	Command_DO               ; $86 DO
>20dc	98 27					.word	Command_LOOP             ; $87 LOOP
>20de	83 18					.word	NoExec08                 ; $88 PROC
>20e0	74 27					.word	Command_ENDPROC          ; $89 ENDPROC
>20e2	a1 27					.word	Command_FOR              ; $8a FOR
>20e4	2e 28					.word	Command_NEXT             ; $8b NEXT
>20e6	04 18					.word	RUNEndOfLine             ; $8c [[END]]
>20e8	60 18					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>20ea	20 29					.word	ElseCode                 ; $8e ELSE
>20ec	83 18					.word	NoExec01                 ; $8f THEN
>20ee	83 18					.word	NoExec02                 ; $90 TO
>20f0	83 18					.word	NoExec03                 ; $91 STEP
>20f2	ab 15					.word	CommandLET               ; $92 LET
>20f4	00 15					.word	Command_Print            ; $93 PRINT
>20f6	f9 14					.word	Command_Input            ; $94 INPUT
>20f8	38 27					.word	Command_CALL             ; $95 CALL
>20fa	6e 18					.word	Command_Sys              ; $96 SYS
>20fc	79 17					.word	Command_REM              ; $97 REM
>20fe	89 27					.word	Command_EXIT             ; $98 EXIT
>2100	83 18					.word	NoExec04                 ; $99 ,
>2102	83 18					.word	NoExec05                 ; $9a ;
>2104	83 18					.word	NoExec06                 ; $9b :
>2106	79 17					.word	Command_REM2             ; $9c '
>2108	83 18					.word	NoExec07                 ; $9d )
>210a	a2 14					.word	Command_Poke             ; $9e POKE
>210c	9f 14					.word	Command_Doke             ; $9f DOKE
>210e	05 17					.word	Command_READ             ; $a0 READ
>2110	6c 17					.word	Command_DATA             ; $a1 DATA
>2112	0d 10					.word	Command_AssemblerStart   ; $a2 [
>2114	96 2e					.word	NotImplemented           ; $a3 ]
>2116	96 2e					.word	NotImplemented           ; $a4 #
>2118	96 2e					.word	NotImplemented           ; $a5 .
>211a	96 2e					.word	NotImplemented           ; $a6
>211c	96 2e					.word	NotImplemented           ; $a7
>211e	96 2e					.word	NotImplemented           ; $a8
>2120	96 2e					.word	NotImplemented           ; $a9
>2122	96 2e					.word	NotImplemented           ; $aa
>2124	96 2e					.word	NotImplemented           ; $ab
>2126	96 2e					.word	NotImplemented           ; $ac
>2128	96 2e					.word	NotImplemented           ; $ad
>212a	96 2e					.word	NotImplemented           ; $ae
>212c	96 2e					.word	NotImplemented           ; $af
>212e	96 2e					.word	NotImplemented           ; $b0
>2130	96 2e					.word	NotImplemented           ; $b1
>2132	96 2e					.word	NotImplemented           ; $b2
>2134	96 2e					.word	NotImplemented           ; $b3
>2136	96 2e					.word	NotImplemented           ; $b4
>2138	96 2e					.word	NotImplemented           ; $b5
>213a	96 2e					.word	NotImplemented           ; $b6
>213c	96 2e					.word	NotImplemented           ; $b7
>213e	96 2e					.word	NotImplemented           ; $b8
>2140	96 2e					.word	NotImplemented           ; $b9
>2142	96 2e					.word	NotImplemented           ; $ba
>2144	96 2e					.word	NotImplemented           ; $bb
>2146	96 2e					.word	NotImplemented           ; $bc
>2148	96 2e					.word	NotImplemented           ; $bd
>214a	96 2e					.word	NotImplemented           ; $be
>214c	96 2e					.word	NotImplemented           ; $bf
>214e	96 2e					.word	NotImplemented           ; $c0
>2150	96 2e					.word	NotImplemented           ; $c1
>2152	96 2e					.word	NotImplemented           ; $c2
>2154	96 2e					.word	NotImplemented           ; $c3
>2156	96 2e					.word	NotImplemented           ; $c4
>2158	96 2e					.word	NotImplemented           ; $c5
>215a	96 2e					.word	NotImplemented           ; $c6
>215c	96 2e					.word	NotImplemented           ; $c7
>215e	96 2e					.word	NotImplemented           ; $c8
>2160	96 2e					.word	NotImplemented           ; $c9
>2162	96 2e					.word	NotImplemented           ; $ca
>2164	96 2e					.word	NotImplemented           ; $cb
>2166	96 2e					.word	NotImplemented           ; $cc
>2168	96 2e					.word	NotImplemented           ; $cd
>216a	96 2e					.word	NotImplemented           ; $ce
>216c	96 2e					.word	NotImplemented           ; $cf
>216e	96 2e					.word	NotImplemented           ; $d0
>2170	96 2e					.word	NotImplemented           ; $d1
>2172	96 2e					.word	NotImplemented           ; $d2
>2174	96 2e					.word	NotImplemented           ; $d3
>2176	96 2e					.word	NotImplemented           ; $d4
>2178	f1 1b					.word	EXPUnaryDeek             ; $d5 DEEK(
>217a	e3 1b					.word	EXPUnaryPeek             ; $d6 PEEK(
>217c	2f 1d					.word	EXPUnaryRight            ; $d7 RIGHT$(
>217e	22 1d					.word	EXPUnaryLeft             ; $d8 LEFT$(
>2180	49 1d					.word	EXPUnaryMid              ; $d9 MID$(
>2182	df 1c					.word	EXPUnaryStr              ; $da STR$(
>2184	ab 1d					.word	EXPUnaryVal              ; $db VAL(
>2186	ac 1c					.word	EXPUnarySgn              ; $dc SGN(
>2188	5d 1b					.word	EXPUnaryAbs              ; $dd ABS(
>218a	31 1c					.word	EXPUnaryLen              ; $de LEN(
>218c	c2 1c					.word	EXPUnarySqr              ; $df SQR(
>218e	81 1b					.word	EXPUnaryChr              ; $e0 CHR$(
>2190	6b 1b					.word	EXPUnaryAsc              ; $e1 ASC(
>2192	13 1c					.word	EXPUnaryInkey            ; $e2 INKEY$(
>2194	96 2e					.word	NotImplemented           ; $e3 EVENT(
>2196	96 2e					.word	NotImplemented           ; $e4 TIME
>2198	27 1c					.word	EXPUnaryInt              ; $e5 INT(
>219a	09 1c					.word	EXPUnaryFrac             ; $e6 FRAC(
>219c	92 1b					.word	EXPUnaryDec              ; $e7 DEC(
>219e	d1 1c					.word	EXPUnaryHex              ; $e8 HEX$(
>21a0	46 1c					.word	EXPUnaryRnd              ; $e9 RND(
>21a2	56 1c					.word	ExpUnaryRand             ; $ea RAND(
>21a4	3f 1c					.word	EXPUnaryParenthesis      ; $eb (
>21a6	67 1b					.word	EXPUnaryNull             ; $ec &
>21a8	e0 1b					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>21aa	07 1d					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>21ac	40 19					.word	EXPCompareEqual          ; $ef =
>21ae	5b 19					.word	EXPCompareNotEqual       ; $f0 <>
>21b0	64 19					.word	EXPCompareLessEqual      ; $f1 <=
>21b2	49 19					.word	EXPCompareLess           ; $f2 <
>21b4	6d 19					.word	EXPCompareGreaterEqual   ; $f3 >=
>21b6	52 19					.word	EXPCompareGreater        ; $f4 >
>21b8	ed 18					.word	EXPBinXor                ; $f5 XOR
>21ba	e1 18					.word	EXPBinOr                 ; $f6 OR
>21bc	d5 18					.word	EXPBinAnd                ; $f7 AND
>21be	ad 18					.word	EXPBinIDiv               ; $f8 DIV
>21c0	be 18					.word	EXPBinIMod               ; $f9 MOD
>21c2	b8 19					.word	EXPBinLeft               ; $fa <<
>21c4	c0 19					.word	EXPBinRight              ; $fb >>
>21c6	a1 18					.word	EXPBinFDiv               ; $fc /
>21c8	98 18					.word	EXPBinMul                ; $fd *
>21ca	8f 18					.word	EXPBinSub                ; $fe -
>21cc	86 18					.word	EXPBinAdd                ; $ff +
.21ce					AlternateVectorTable:
>21ce	0f 13					.word	Command_CLEAR            ; $8d80 CLEAR
>21d0	fc 16					.word	Command_NEW              ; $8d81 NEW
>21d2	f8 17					.word	Command_RUN              ; $8d82 RUN
>21d4	6b 18					.word	Command_STOP             ; $8d83 STOP
>21d6	68 18					.word	Command_END              ; $8d84 END
>21d8	01 13					.word	Command_ASSERT           ; $8d85 ASSERT
>21da	25 16					.word	Command_LIST             ; $8d86 LIST
>21dc	04 2e					.word	Command_SAVE             ; $8d87 SAVE
>21de	c3 2d					.word	Command_LOAD             ; $8d88 LOAD
>21e0	e4 28					.word	Command_GOSUB            ; $8d89 GOSUB
>21e2	c9 14					.word	Command_GOTO             ; $8d8a GOTO
>21e4	f2 28					.word	Command_RETURN           ; $8d8b RETURN
>21e6	ca 17					.word	Command_RESTORE          ; $8d8c RESTORE
>21e8	83 13					.word	CommandDIM               ; $8d8d DIM
>21ea	5a 2d					.word	Command_DIR              ; $8d8e DIR
>21ec	97 2d					.word	Command_ERASE            ; $8d8f ERASE
>21ee	86 17					.word	Command_RENUMBER         ; $8d90 RENUMBER
>21f0	fa 12					.word	Command_OPT              ; $8d91 OPT

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.21f2					TOKDetokenise:
.21f2	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.21f4	84 29		sty $29				sty 	zTemp2+1
.21f6	9c 1c 05	stz $051c			stz		TOKLastCharacter 			; clear last character
.21f9					_TOKDLoop:
.21f9	20 3e 22	jsr $223e			jsr 	TOKDGet 					; get next
.21fc	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line, exit.
.21fe	f0 3c		beq $223c			beq 	_TOKDExit
.2200	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string or decimal places modifier
.2202	f0 33		beq $2237			beq 	_TOKDDataItem
.2204	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.2206	f0 2f		beq $2237			beq 	_TOKDDataItem
.2208	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.220a	f0 19		beq $2225			beq 	_TOKAmpersand
.220c	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.220e	10 05		bpl $2215			bpl 	_TOKDNotToken
.2210	20 04 23	jsr $2304			jsr 	TOKDToken 					; token to text.
.2213	80 e4		bra $21f9			bra 	_TOKDLoop
.2215					_TOKDNotToken:
.2215	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.2217	90 05		bcc $221e			bcc 	_TOKDNotIdentifier
.2219	20 7b 22	jsr $227b			jsr 	TOKDIdentifier
.221c	80 db		bra $21f9			bra 	_TOKDLoop
.221e					_TOKDNotIdentifier:
.221e	a0 0a		ldy #$0a			ldy 	#10
.2220	20 be 22	jsr $22be			jsr 	TOKDInteger
.2223	80 d4		bra $21f9			bra 	_TOKDLoop
.2225					_TOKAmpersand:
.2225	20 46 23	jsr $2346			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.2228	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.222a	20 47 22	jsr $2247			jsr 	TOKDOutput
.222d	20 3e 22	jsr $223e			jsr 	TOKDGet 					; get first char of integer
.2230	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.2232	20 be 22	jsr $22be			jsr 	TOKDInteger
.2235	80 c2		bra $21f9			bra 	_TOKDLoop
.2237					_TOKDDataItem:
.2237	20 54 22	jsr $2254			jsr 	TOKDDataItem
.223a	80 bd		bra $21f9			bra 	_TOKDLoop
.223c					_TOKDExit:
.223c	18		clc				clc
.223d	60		rts				rts
.223e	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.2240	e6 28		inc $28				inc 	zTemp2
.2242	d0 02		bne $2246			bne 	_TKDGExit
.2244	e6 29		inc $29				inc 	zTemp2+1
.2246					_TKDGExit:
.2246	60		rts				rts
.2247					TOKDOutput:
.2247	8d 1c 05	sta $051c			sta 	TOKLastCharacter 			; save last character
.224a	6c 1a 05	jmp ($051a)			jmp 	(TOKOutputMethod) 			; call output handler
.224d					TOKSetDetokeniseOutput:
.224d	8e 1a 05	stx $051a			stx 	TOKOutputMethod
.2250	8c 1b 05	sty $051b			sty 	TOKOutputMethod+1
.2253	60		rts				rts
.051a					TOKOutputMethod:
>051a							.fill 	2
.051c					TOKLastCharacter:
>051c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.2254					TOKDDataItem:
.2254	a8		tay				tay 								; type in Y
.2255	a9 22		lda #$22			lda 	#'"'						; start with " or . depending on type.
.2257	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.2259	f0 02		beq $225d			beq 	_TOKDDIsString
.225b	a9 2e		lda #$2e			lda 	#'.'
.225d					_TOKDDIsString:
.225d	20 47 22	jsr $2247			jsr 	TOKDOutput 					; dump it
.2260	20 3e 22	jsr $223e			jsr 	TOKDGet 					; get length into X
.2263	aa		tax				tax
.2264					_TOKDDOutput:
.2264	ca		dex				dex 								; output all the data.
.2265	e0 ff		cpx #$ff			cpx 	#255
.2267	f0 08		beq $2271			beq 	_TOKDDEnd
.2269	20 3e 22	jsr $223e			jsr 	TOKDGet 					; get character and output it
.226c	20 47 22	jsr $2247			jsr 	TOKDOutput
.226f	80 f3		bra $2264			bra 	_TOKDDOutput
.2271					_TOKDDEnd:
.2271	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.2273	d0 05		bne $227a			bne 	_TOKDDNotString
.2275	a9 22		lda #$22			lda 	#'"'
.2277	20 47 22	jsr $2247			jsr 	TOKDOutput
.227a					_TOKDDNotString:
.227a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.227b					TOKDIdentifier:
.227b	a0 ff		ldy #$ff			ldy 	#$FF 						; flag set on first character only.
.227d	8c 1d 05	sty $051d			sty 	TOKDIFirstChar
.2280					_TOKDLoop:
.2280	a8		tay				tay 								; token in Y, now coner it to ASCII
.2281	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.2283	c0 64		cpy #$64			cpy 	#$64
.2285	f0 0b		beq $2292			beq 	_TOKDIOutput
.2287	98		tya				tya 								; handle a-z
.2288	18		clc				clc
.2289	69 21		adc #$21			adc	 	#$21
.228b	c0 5a		cpy #$5a			cpy 	#$5A
.228d	90 03		bcc $2292			bcc 	_TOKDIOutput
.228f	38		sec				sec 								; handle 0-9
.2290	e9 4b		sbc #$4b			sbc 	#$4B
.2292					_TOKDIOutput:
.2292	2c 1d 05	bit $051d			bit 	TOKDIFirstChar 				; check spacing if first character
.2295	10 08		bpl $229f			bpl 	_TOKDINoSpacing
.2297	48		pha				pha
.2298	20 41 23	jsr $2341			jsr 	TOKDSpacing
.229b	9c 1d 05	stz $051d			stz 	TOKDIFirstChar
.229e	68		pla				pla
.229f					_TOKDINoSpacing:
.229f	20 47 22	jsr $2247			jsr 	TOKDOutput
.22a2	20 3e 22	jsr $223e			jsr 	TOKDGet 					; get next token
.22a5	c9 7c		cmp #$7c			cmp 	#$7C 						; 7C..7F are end markers
.22a7	90 d7		bcc $2280			bcc 	_TOKDLoop
.22a9	f0 12		beq $22bd			beq 	_TOKDIExit 					; it's a number, no tail.
.22ab	4a		lsr a				lsr 	a 							; string ?
.22ac	90 07		bcc $22b5			bcc 	_TOKDICheckArray
.22ae	48		pha				pha
.22af	a9 24		lda #$24			lda 	#"$"
.22b1	20 47 22	jsr $2247			jsr 	TOKDOutput
.22b4	68		pla				pla
.22b5					_TOKDICheckArray:
.22b5	4a		lsr a				lsr 	a 							; array ?
.22b6	90 05		bcc $22bd			bcc 	_TOKDIExit
.22b8	a9 28		lda #$28			lda 	#"("
.22ba	20 47 22	jsr $2247			jsr 	TOKDOutput
.22bd					_TOKDIExit:
.22bd	60		rts				rts
.051d					TOKDIFirstChar:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.22be					TOKDInteger:
.22be	5a		phy				phy 								; save base on stack
.22bf	a2 08		ldx #$08			ldx 	#IFR0 						; set first byte of integer into into R0
.22c1	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.22c4					_TOKDILoop:
.22c4	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F, extract the whole integer out.
.22c6	c9 40		cmp #$40			cmp 	#$40
.22c8	b0 1d		bcs $22e7			bcs 	_TOKDIHaveInteger
.22ca	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.22cc	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.22cf	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.22d2	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.22d5	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.22d8	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.22db	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.22de	20 3e 22	jsr $223e			jsr 	TOKDGet 					; OR byte in.
.22e1	05 08		ora $08				ora 	IFR0+IM0
.22e3	85 08		sta $08				sta 	IFR0+IM0
.22e5	80 dd		bra $22c4			bra 	_TOKDILoop
.22e7					_TOKDIHaveInteger:
.22e7	7a		ply				ply 								; restore base
.22e8	98		tya				tya 								; base in A
.22e9	20 62 34	jsr $3462			jsr 	IFloatIntegerToStringR0 	; make it a string
.22ec	86 24		stx $24				stx 	zTemp0 						; output that string.
.22ee	84 25		sty $25				sty 	zTemp0+1
.22f0	b2 24		lda ($24)			lda 	(zTemp0)
.22f2	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.22f4	b1 24		lda ($24),y			lda 	(zTemp0),y
.22f6	20 41 23	jsr $2341			jsr 	TOKDSpacing 				; check spacing okay.
.22f9					_TOKDOutput:
.22f9	b1 24		lda ($24),y			lda 	(zTemp0),y
.22fb	20 47 22	jsr $2247			jsr 	TOKDOutput
.22fe	c8		iny				iny
.22ff	b1 24		lda ($24),y			lda 	(zTemp0),y
.2301	d0 f6		bne $22f9			bne 	_TOKDOutput
.2303	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2304					TOKDToken:
.2304	a2 ea		ldx #$ea			ldx 	#StandardTokens & $FF 		; standard table
.2306	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.2308	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.230a	d0 07		bne $2313			bne 	_TOKDSearch
.230c	20 3e 22	jsr $223e			jsr 	TOKDGet 					; get next
.230f	a2 6b		ldx #$6b			ldx 	#AlternateTokens & $FF 		; alt table address
.2311	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.2313					_TOKDSearch:
.2313	86 24		stx $24				stx 	zTemp0 						; save table in zTemp0
.2315	84 25		sty $25				sty 	zTemp0+1
.2317	aa		tax				tax 								; token ID in X.
.2318					_TOKDFind:
.2318	ca		dex				dex 								; reached the token position
.2319	10 0d		bpl $2328			bpl 	_TOKDFound
.231b	38		sec				sec 								; go to next entry in token table
.231c	b2 24		lda ($24)			lda 	(zTemp0)
.231e	65 24		adc $24				adc 	zTemp0
.2320	85 24		sta $24				sta 	zTemp0
.2322	90 f4		bcc $2318			bcc 	_TOKDFind
.2324	e6 25		inc $25				inc 	zTemp0+1
.2326	80 f0		bra $2318			bra 	_TOKDFind
.2328					_TOKDFound:
.2328	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X.
.232a	f0 14		beq $2340			beq 	_TOKDExit 					; not a token with text.
.232c	aa		tax				tax
.232d	a0 01		ldy #$01			ldy 	#1 							; output the token.
.232f	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.2331	20 41 23	jsr $2341			jsr 	TOKDSpacing 				; do we need space before this.
.2334					_TOKDOutput:
.2334	b1 24		lda ($24),y			lda 	(zTemp0),y 					; output them in lower case
.2336	20 f7 26	jsr $26f7			jsr 	TOKToLower
.2339	20 47 22	jsr $2247			jsr 	TOKDOutput
.233c	c8		iny				iny
.233d	ca		dex				dex
.233e	d0 f4		bne $2334			bne 	_TOKDOutput
.2340					_TOKDExit:
.2340	60		rts				rts
.2341					TOKDSpacing:
.2341	20 0e 27	jsr $270e			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.2344	90 0d		bcc $2353			bcc 	TOKDSExit
.2346					TOKDSpaceLastAlpha:
.2346	ad 1c 05	lda $051c			lda 	TOKLastCharacter			; and last character also alphanumeric
.2349	20 0e 27	jsr $270e			jsr 	TOKIsIdentifierElement
.234c	90 05		bcc $2353			bcc 	TOKDSExit
.234e	a9 20		lda #$20			lda 	#" " 						; we need a space.
.2350	20 47 22	jsr $2247			jsr 	TOKDOutput
.2353					TOKDSExit:
.2353	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2354					PGMDeleteLine:
.2354	20 07 24	jsr $2407			jsr 	PGMEndProgram 				; end of program into zTemp0
.2357	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2359	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.235c	85 27		sta $27				sta 	zTemp1+1
.235e					_PGMDLoop:
.235e	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.2360	38		sec				sec
.2361	f0 3a		beq $239d			beq 	_PGMDExit
.2363	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2365	b1 26		lda ($26),y			lda 	(zTemp1),y 					; compare LSB
.2367	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.236a	d0 08		bne $2374			bne 	_PGMDNext
.236c	c8		iny				iny 								; compare MSB
.236d	b1 26		lda ($26),y			lda 	(zTemp1),y
.236f	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2372	f0 0d		beq $2381			beq 	_PGMDDelete
.2374					_PGMDNext:
.2374	18		clc				clc
.2375	b2 26		lda ($26)			lda 	(zTemp1)
.2377	65 26		adc $26				adc 	zTemp1
.2379	85 26		sta $26				sta 	zTemp1
.237b	90 e1		bcc $235e			bcc 	_PGMDLoop
.237d	e6 27		inc $27				inc 	zTemp1+1
.237f	80 dd		bra $235e			bra 	_PGMDLoop
.2381					_PGMDDelete:
.2381	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.2383	a8		tay				tay
.2384					_PGMDCopy:
.2384	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.2386	92 26		sta ($26)			sta 	(zTemp1)
.2388	a5 26		lda $26				lda 	zTemp1 						; reached the end in zTemp0
.238a	c5 24		cmp $24				cmp 	zTemp0
.238c	d0 07		bne $2395			bne 	_PGMDNext2
.238e	a5 27		lda $27				lda 	zTemp1+1
.2390	c5 25		cmp $25				cmp 	zTemp0+1
.2392	18		clc				clc
.2393	f0 08		beq $239d			beq 	_PGMDExit 					; then exit.
.2395					_PGMDNext2:
.2395	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.2397	d0 eb		bne $2384			bne 	_PGMDCopy
.2399	e6 27		inc $27				inc 	zTemp1+1
.239b	80 e7		bra $2384			bra 	_PGMDCopy
.239d					_PGMDExit:
.239d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.239e					PGMInsertLine:
.239e	20 07 24	jsr $2407			jsr 	PGMEndProgram 				; end of program into zTemp0
.23a1	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.23a3	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.23a6	85 27		sta $27				sta 	zTemp1+1
.23a8					_PGMILoop:
.23a8	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.23aa	f0 1c		beq $23c8			beq 	_PGMIInsert
.23ac	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.23ae	b1 26		lda ($26),y			lda 	(zTemp1),y
.23b0	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.23b3	c8		iny				iny
.23b4	b1 26		lda ($26),y			lda 	(zTemp1),y
.23b6	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.23b9	b0 0d		bcs $23c8			bcs 	_PGMIInsert 				; insert here.
.23bb	18		clc				clc
.23bc	b2 26		lda ($26)			lda 	(zTemp1)
.23be	65 26		adc $26				adc 	zTemp1
.23c0	85 26		sta $26				sta 	zTemp1
.23c2	90 e4		bcc $23a8			bcc 	_PGMILoop
.23c4	e6 27		inc $27				inc 	zTemp1+1
.23c6	80 e0		bra $23a8			bra 	_PGMILoop
.23c8					_PGMIInsert:
.23c8	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required is length in token buffer.
.23cb					_PGMIInsertLoop:
.23cb	b2 24		lda ($24)			lda 	(zTemp0) 					; shift byte up.
.23cd	91 24		sta ($24),y			sta 	(zTemp0),y
.23cf	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.23d1	c5 24		cmp $24				cmp 	zTemp0
.23d3	d0 06		bne $23db			bne 	_PGMINext
.23d5	a5 27		lda $27				lda 	zTemp1+1
.23d7	c5 25		cmp $25				cmp 	zTemp0+1
.23d9	f0 0a		beq $23e5			beq 	_PGMIInserted
.23db					_PGMINext:
.23db	a5 24		lda $24				lda 	zTemp0
.23dd	d0 02		bne $23e1			bne 	_PGMINoBorrow
.23df	c6 25		dec $25				dec 	zTemp0+1
.23e1					_PGMINoBorrow:
.23e1	c6 24		dec $24				dec 	zTemp0
.23e3	80 e6		bra $23cb			bra 	_PGMIInsertLoop 			; do previous byte.
.23e5					_PGMIInserted:
.23e5	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.23e7					_PGMICopyLoop:
.23e7	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.23ea	91 26		sta ($26),y			sta 	(zTemp1),y
.23ec	c8		iny				iny
.23ed	cc 00 04	cpy $0400			cpy 	TOKLineSize
.23f0	d0 f5		bne $23e7			bne 	_PGMICopyLoop
.23f2	18		clc				clc
.23f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.23f4					PGMSetBaseAddress:
.23f4	8e 1e 05	stx $051e			stx 	PGMBaseHigh 				; use memory from here
.23f7	8c 1f 05	sty $051f			sty 	PGMEndMemoryHigh 			; to here.
.23fa	60		rts				rts
.23fb					PGMNewProgram:
.23fb	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.23fd	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.2400	85 25		sta $25				sta 	zTemp0+1
.2402	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2404	92 24		sta ($24)			sta 	(zTemp0)
.2406	60		rts				rts
.2407					PGMEndProgram:
.2407	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.2409	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.240c	85 25		sta $25				sta 	zTemp0+1
.240e					_PGMEPLoop:
.240e	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.2410	f0 0b		beq $241d			beq 	_PGMEPExit
.2412	18		clc				clc 								; no, advance to next
.2413	65 24		adc $24				adc 	zTemp0
.2415	85 24		sta $24				sta 	zTemp0
.2417	90 f5		bcc $240e			bcc 	_PGMEPLoop
.2419	e6 25		inc $25				inc 	zTemp0+1
.241b	80 f1		bra $240e			bra 	_PGMEPLoop
.241d					_PGMEPExit:
.241d	60		rts				rts
.051e					PGMBaseHigh:
>051e							.fill 	1
.051f					PGMEndMemoryHigh:
>051f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.241e					TOKResetElement:
.241e	9c 20 05	stz $0520			stz 	TOKElement
.2421	60		rts				rts
.2422					TOKWriteElement:
.2422	da		phx				phx
.2423	ae 20 05	ldx $0520			ldx 	TOKElement
.2426	9d 21 05	sta $0521,x			sta 	TOKElementText,x
.2429	9e 22 05	stz $0522,x			stz 	TOKElementText+1,x
.242c	fa		plx				plx
.242d	ee 20 05	inc $0520			inc 	TOKElement
.2430	60		rts				rts
.0520					TOKElement:
>0520							.fill 	1
.0521					TOKElementText:
>0521							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.2431					TOKTokeniseConstant:
.2431	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.2433	48		pha				pha 								; save LSB on stack
.2434	29 c0		and #$c0			and 	#$C0
.2436	05 09		ora $09				ora 	IFR0+IM1
.2438	05 0a		ora $0a				ora 	IFR0+IM2
.243a	f0 10		beq $244c			beq 	_TTCLess
.243c	da		phx				phx
.243d	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.243f					_TTCShiftRight:
.243f	46 0a		lsr $0a				lsr 	IFR0+IM2
.2441	66 09		ror $09				ror 	IFR0+IM1
.2443	66 08		ror $08				ror 	IFR0+IM0
.2445	ca		dex				dex
.2446	d0 f7		bne $243f			bne 	_TTCShiftRight
.2448	fa		plx				plx
.2449	20 31 24	jsr $2431			jsr 	TOKTokeniseConstant
.244c					_TTCLess:
.244c	68		pla				pla
.244d	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.244f	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.2452	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2453					TOKTokeniseDecimals:
.2453	20 02 25	jsr $2502			jsr 	TOKGetNext 					; consume the .
.2456	20 7b 26	jsr $267b			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2459	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.245b	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.245e	20 63 24	jsr $2463			jsr 	TOKOutputElementBuffer 		; then the buffer
.2461	18		clc				clc
.2462	60		rts				rts
.2463					TOKOutputElementBuffer:
.2463	ad 20 05	lda $0520			lda 	TOKElement 					; get count and write that
.2466	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.2469	a8		tay				tay 								; put in Y
.246a	f0 0c		beq $2478			beq 	_TOEExit 					; exit if empty which is okay.
.246c	a2 01		ldx #$01			ldx 	#1
.246e					_TOELoop:
.246e	bd 20 05	lda $0520,x			lda 	TOKElement,x
.2471	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.2474	e8		inx				inx
.2475	88		dey				dey
.2476	d0 f6		bne $246e			bne 	_TOELoop
.2478					_TOEExit:
.2478	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2479					TOKTokenise:
.2479	8c 21 06	sty $0621			sty 	TOKDataSource+1 			; save source routine pointer
.247c	8e 20 06	stx $0620			stx 	TOKDataSource
.247f	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2481	8d 22 06	sta $0622			sta 	TOKIsFirstElement
.2484	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2486	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2489	9c 01 04	stz $0401			stz 	TOKLineNumber
.248c	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.248f					_TOKMainLoop:
.248f	20 fe 24	jsr $24fe			jsr 	TOKGet 						; what follows ?
.2492	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2494	f0 50		beq $24e6			beq 	_TOKExit
.2496	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2498	d0 05		bne $249f			bne 	_TOKElement
.249a	20 02 25	jsr $2502			jsr 	TOKGetNext
.249d	80 f0		bra $248f			bra 	_TOKMainLoop
.249f					_TOKElement:
.249f	20 02 27	jsr $2702			jsr 	TOKIsDigit 					; is it 0..9
.24a2	90 16		bcc $24ba			bcc 	_TOKNotDigit
.24a4	20 52 26	jsr $2652			jsr 	TOKTokeniseInteger 			; get integer
.24a7	b0 44		bcs $24ed			bcs 	_TOKFail 					; did it fail ?
.24a9	9c 22 06	stz $0622			stz 	TOKIsFirstElement 			; clear first element flag
.24ac	20 fe 24	jsr $24fe			jsr 	TOKGet 						; what follows ?
.24af	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.24b1	d0 dc		bne $248f			bne 	_TOKMainLoop
.24b3	20 53 24	jsr $2453			jsr 	TOKTokeniseDecimals
.24b6	b0 35		bcs $24ed			bcs 	_TOKFail
.24b8	80 d5		bra $248f			bra 	_TOKMainLoop
.24ba					_TOKNotDigit:
.24ba	9c 22 06	stz $0622			stz 	TOKIsFirstElement 			; clear first element flag
.24bd	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.24bf	d0 07		bne $24c8			bne 	_TOKNotHex
.24c1	20 58 25	jsr $2558			jsr 	TOKTokeniseHexadecimal
.24c4	b0 27		bcs $24ed			bcs 	_TOKFail
.24c6	80 c7		bra $248f			bra 	_TOKMainLoop
.24c8					_TOKNotHex:
.24c8	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.24ca	d0 07		bne $24d3			bne 	_TOKNotString
.24cc	20 c9 26	jsr $26c9			jsr 	TOKTokeniseString
.24cf	b0 1c		bcs $24ed			bcs 	_TOKFail
.24d1	80 bc		bra $248f			bra 	_TOKMainLoop
.24d3					_TOKNotString:
.24d3	20 1b 27	jsr $271b			jsr 	TOKIsAlpha 					; identifier ?
.24d6	b0 07		bcs $24df			bcs 	_TOKIdentifier
.24d8	20 8f 26	jsr $268f			jsr 	TOKTokenisePunctuation 		; punctuation
.24db	b0 10		bcs $24ed			bcs 	_TOKFail
.24dd	80 b0		bra $248f			bra 	_TOKMainLoop
.24df					_TOKIdentifier:
.24df	20 95 25	jsr $2595			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.24e2	b0 09		bcs $24ed			bcs 	_TOKFail
.24e4	80 a9		bra $248f			bra 	_TOKMainLoop
.24e6					_TOKExit:
.24e6	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.24e8	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.24eb	18		clc				clc									; return with carry set.
.24ec	60		rts				rts
.24ed					_TOKFail:
.24ed	38		sec				sec
.24ee	60		rts				rts
.24ef					TOKWriteA:
.24ef	da		phx				phx
.24f0	ae 00 04	ldx $0400			ldx 	TOKLineSize
.24f3	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.24f6	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.24f9	fa		plx				plx
.24fa	ee 00 04	inc $0400			inc 	TOKLineSize
.24fd	60		rts				rts
.24fe					TOKGet:
.24fe	18		clc				clc
.24ff	6c 20 06	jmp ($0620)			jmp 	(TOKDataSource)
.2502					TOKGetNext:
.2502	38		sec				sec
.2503	6c 20 06	jmp ($0620)			jmp 	(TOKDataSource)
.0620					TOKDataSource:
>0620							.fill 	2
.0622					TOKIsFirstElement:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2506					TOKFindToken:
.2506	a2 ea		ldx #$ea			ldx 	#StandardTokens & $FF 		; do this table
.2508	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.250a	20 22 25	jsr $2522			jsr 	TOKFindTokenXY 				; find it, or not
.250d	b0 0d		bcs $251c			bcs 	_TOKFound1
.250f	a2 6b		ldx #$6b			ldx 	#AlternateTokens & $FF 		; do the alternate table
.2511	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.2513	20 22 25	jsr $2522			jsr 	TOKFindTokenXY 				; find it, or not
.2516	90 08		bcc $2520			bcc 	_TOKFTFail 					; not ....
.2518	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shift token
.251a	38		sec				sec
.251b	60		rts				rts
.251c					_TOKFound1:
.251c	a2 00		ldx #$00			ldx 	#0 							; come here for unshifted (e.g. X = 0)
.251e	38		sec				sec
.251f	60		rts				rts
.2520					_TOKFTFail:
.2520	18		clc				clc
.2521	60		rts				rts
.2522					TOKFindTokenXY:
.2522	86 24		stx $24				stx 	zTemp0 						; save token table address
.2524	84 25		sty $25				sty 	zTemp0+1
.2526	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2528	8d 23 06	sta $0623			sta 	TOKCurrent
.252b					_TOKFindLoop:
.252b	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.252d	18		clc				clc 		 						; clear carry in case of fail
.252e	30 17		bmi $2547			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2530	cd 20 05	cmp $0520			cmp 	TOKElement 					; compare against the element length
.2533	d0 13		bne $2548			bne 	_TOKNext 					; different, try next.
.2535	aa		tax				tax 								; number of chars to compare.
.2536	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.2538					_TOKCompare:
.2538	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.253a	d9 20 05	cmp $0520,y			cmp 	TOKElementText-1,y
.253d	d0 09		bne $2548			bne 	_TOKNext 					; different ? try next
.253f	c8		iny				iny 								; compare next two
.2540	ca		dex				dex
.2541	d0 f5		bne $2538			bne 	_TOKCompare 				; until done X characters.
.2543	38		sec				sec
.2544	ad 23 06	lda $0623			lda 	TOKCurrent 					; return current ID.
.2547					_TOKExit:
.2547	60		rts				rts
.2548					_TOKNext:
.2548	ee 23 06	inc $0623			inc 	TOKCurrent 					; increment token #
.254b	38		sec				sec 								; add length+1 to ptr
.254c	b2 24		lda ($24)			lda 	(zTemp0)
.254e	65 24		adc $24				adc 	zTemp0
.2550	85 24		sta $24				sta 	zTemp0
.2552	90 d7		bcc $252b			bcc 	_TOKFindLoop
.2554	e6 25		inc $25				inc 	zTemp0+1
.2556	80 d3		bra $252b			bra 	_TOKFindLoop
.0623					TOKCurrent:
>0623							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2558					TOKTokeniseHexadecimal:
.2558	20 02 25	jsr $2502			jsr 	TOKGetNext 					; consume the $
.255b	a2 08		ldx #$08			ldx 	#IFR0
.255d	20 c0 36	jsr $36c0			jsr 	IFloatSetZero 				; set R0 = 0
.2560					_TTHLoop:
.2560	20 fe 24	jsr $24fe			jsr 	TOKGet 						; keep getting and copying while numeric.
.2563	20 28 27	jsr $2728			jsr 	TOKIsHexadecimal
.2566	90 23		bcc $258b			bcc 	_TTHDone
.2568	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.256a	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.256d	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.2570	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.2573	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.2576	20 02 25	jsr $2502			jsr 	TOKGetNext
.2579	20 ec 26	jsr $26ec			jsr 	TOKToUpper 					; make U/C
.257c	38		sec				sec 								; convert to decimal.
.257d	e9 30		sbc #$30			sbc 	#48
.257f	c9 0a		cmp #$0a			cmp 	#10
.2581	90 02		bcc $2585			bcc 	_TTHNotAlpha
.2583	e9 07		sbc #$07			sbc 	#7
.2585					_TTHNotAlpha:
.2585	05 08		ora $08				ora 	IFR0+IM0 					; OR into R0
.2587	85 08		sta $08				sta 	IFR0+IM0
.2589	80 d5		bra $2560			bra 	_TTHLoop
.258b					_TTHDone:
.258b	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.258d	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.2590	20 31 24	jsr $2431			jsr 	TOKTokeniseConstant 		; write integer out.
.2593	18		clc				clc
.2594	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2595					TOKTokeniseIdentifier:
.2595	20 1e 24	jsr $241e			jsr 	TOKResetElement 			; extract an identifier
.2598					_TOKGetIdentifier:
.2598	20 fe 24	jsr $24fe			jsr 	TOKGet 						; get identifier character as capital
.259b	20 ec 26	jsr $26ec			jsr 	TOKToUpper
.259e	20 0e 27	jsr $270e			jsr 	TOKIsIdentifierElement 		; exit if complete
.25a1	90 08		bcc $25ab			bcc 	_TOKEndIdent
.25a3	20 22 24	jsr $2422			jsr		TOKWriteElement 			; add to element buffer
.25a6	20 02 25	jsr $2502			jsr 	TOKGetNext
.25a9	80 ed		bra $2598			bra 	_TOKGetIdentifier
.25ab					_TOKEndIdent:
.25ab	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.25ad	d0 06		bne $25b5			bne 	_TOKNotString
.25af	20 22 24	jsr $2422			jsr 	TOKWriteElement 			; add it
.25b2	20 02 25	jsr $2502			jsr 	TOKGetNext 					; consume it
.25b5					_TOKNotString:
.25b5	20 fe 24	jsr $24fe			jsr 	TOKGet 						; finally check for (
.25b8	c9 28		cmp #$28			cmp 	#"("
.25ba	d0 06		bne $25c2			bne 	_TOKNoArray
.25bc	20 22 24	jsr $2422			jsr 	TOKWriteElement 			; add it
.25bf	20 02 25	jsr $2502			jsr 	TOKGetNext 					; consume it
.25c2					_TOKNoArray:
.25c2	20 06 25	jsr $2506			jsr 	TOKFindToken 				; find it
.25c5	90 18		bcc $25df			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.25c7	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.25c9	f0 0f		beq $25da			beq 	_TOKComment 				; yes, do comment code.
.25cb	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.25cd	d0 06		bne $25d5			bne 	_TOKNoShift
.25cf	48		pha				pha 								; write the shift.
.25d0	8a		txa				txa
.25d1	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.25d4	68		pla				pla
.25d5					_TOKNoShift:
.25d5	20 ef 24	jsr $24ef			jsr 	TOKWriteA 					; write the main token.
.25d8	18		clc				clc
.25d9	60		rts				rts
.25da					_TOKComment:
.25da	20 1f 26	jsr $261f			jsr 	TOKDoComment 				; comments are special case.
.25dd	18		clc				clc
.25de	60		rts				rts
.25df					_TOKIsVariable:
.25df	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.25e1					_TOKOutputBuffer:
.25e1	bd 21 05	lda $0521,x			lda 	TOKElementText,x 			; output it translated.
.25e4	20 0d 26	jsr $260d			jsr 	TOKTranslateIdentifier
.25e7	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.25ea	e8		inx				inx
.25eb	bd 21 05	lda $0521,x			lda 	TOKElementText,x
.25ee	20 0e 27	jsr $270e			jsr 	TOKIsIdentifierElement
.25f1	b0 ee		bcs $25e1			bcs 	_TOKOutputBuffer
.25f3	a8		tay				tay 								; last char in Y
.25f4	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.25f6	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.25f8	f0 0e		beq $2608			beq 	_TOKIVExit
.25fa	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.25fc	d0 04		bne $2602			bne 	_TOKIVCheckArray 			; no, check for (
.25fe	1a		inc a				inc 	a 							; token is $7D
.25ff	bc 22 05	ldy $0522,x			ldy 	TOKElementText+1,x 			; get next one.
.2602					_TOKIVCheckArray:
.2602	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2604	d0 02		bne $2608			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2606	1a		inc a				inc 	a
.2607	1a		inc a				inc 	a
.2608					_TOKIVExit:
.2608	20 ef 24	jsr $24ef			jsr 	TOKWriteA 					; ending token
.260b	18		clc				clc
.260c	60		rts				rts
.260d					TOKTranslateIdentifier:
.260d	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.260f	f0 0b		beq $261c			beq 	_TTI64
.2611	38		sec				sec
.2612	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2614	10 03		bpl $2619			bpl 	_TTIExit
.2616	18		clc				clc 								; map 09 onto 26-35
.2617	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2619					_TTIExit:
.2619	09 40		ora #$40			ora 	#$40 						; correct range.
.261b	60		rts				rts
.261c	a9 64		lda #$64	_TTI64:	lda 	#$64
.261e	60		rts				rts
.261f					TOKDoComment:
.261f	20 ef 24	jsr $24ef			jsr 	TOKWriteA					; output the token.
.2622					_TOKSkipSpaces:
.2622	20 fe 24	jsr $24fe			jsr 	TOKGet 						; skip over spaces
.2625	c9 20		cmp #$20			cmp 	#' '
.2627	d0 05		bne $262e			bne 	_TOKEndSpaces
.2629	20 02 25	jsr $2502			jsr 	TOKGetNext
.262c	80 f4		bra $2622			bra 	_TOKSkipSpaces
.262e					_TOKEndSpaces:
.262e	48		pha				pha 								; save it
.262f	68		pla				pla
.2630	f0 04		beq $2636			beq 	_TOKDCExit 					; end of line.
.2632	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark , we should be okay.
.2634	d0 01		bne $2637			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2636					_TOKDCExit:
.2636	60		rts				rts
.2637					_TOKDCDoLine:
.2637	20 1e 24	jsr $241e			jsr 	TOKResetElement 			; start getting the string
.263a					_TOKDCLoop:
.263a	20 fe 24	jsr $24fe			jsr 	TOKGet 						; check EOL
.263d	c9 00		cmp #$00			cmp 	#0
.263f	f0 08		beq $2649			beq 	_TOKDCEndComment
.2641	20 02 25	jsr $2502			jsr 	TOKGetNext 					; get and consume
.2644	20 22 24	jsr $2422			jsr 	TOKWriteElement
.2647	80 f1		bra $263a			bra 	_TOKDCLoop
.2649					_TOKDCEndComment:
.2649	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ 		; output as string.
.264b	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.264e	20 63 24	jsr $2463			jsr 	TOKOutputElementBuffer
.2651	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2652					TOKTokeniseInteger:
.2652	20 7b 26	jsr $267b			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2655	a2 21		ldx #$21			ldx 	#TOKElementText & $FF 		; get length/address
.2657	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2659	ad 20 05	lda $0520			lda		TOKElement
.265c	20 24 35	jsr $3524			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.265f	ad 22 06	lda $0622			lda 	TOKIsFirstElement 			; first element ?
.2662	f0 12		beq $2676			beq 	_TOKNotLineNumber
.2664	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2666	d0 0c		bne $2674			bne 	_TOKBadLineNumeber
.2668	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.266a	8d 01 04	sta $0401			sta 	TOKLineNumber
.266d	a5 09		lda $09				lda 	IFR0+IM1
.266f	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2672	18		clc				clc
.2673	60		rts				rts
.2674					_TOKBadLineNumeber:
.2674	38		sec				sec
.2675	60		rts				rts
.2676					_TOKNotLineNumber:
.2676	20 31 24	jsr $2431			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2679	18		clc				clc
.267a	60		rts				rts
.267b					TOKExtractInteger:
.267b	20 1e 24	jsr $241e			jsr 	TOKResetElement 			; restart
.267e					_TTILoop:
.267e	20 fe 24	jsr $24fe			jsr 	TOKGet 						; keep getting and copying while numeric.
.2681	20 02 27	jsr $2702			jsr 	TOKIsDigit
.2684	90 08		bcc $268e			bcc 	_TOKEIExit
.2686	20 22 24	jsr $2422			jsr 	TOKWriteElement
.2689	20 02 25	jsr $2502			jsr 	TOKGetNext
.268c	80 f0		bra $267e			bra 	_TTILoop
.268e					_TOKEIExit:
.268e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.268f					TOKTokenisePunctuation:
.268f	20 1e 24	jsr $241e			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2692	20 02 25	jsr $2502			jsr 	TOKGetNext
.2695	20 22 24	jsr $2422			jsr 	TOKWriteElement
.2698	20 fe 24	jsr $24fe			jsr 	TOKGet 						; what follows ?
.269b	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character.
.269d	f0 10		beq $26af			beq 	_TTPOne
.269f	20 12 27	jsr $2712			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.26a2	b0 0b		bcs $26af			bcs 	_TTPOne 					; these speed things up a bit.
.26a4	20 22 24	jsr $2422			jsr 	TOKWriteElement 			; this is what we will search for.
.26a7	20 06 25	jsr $2506			jsr 	TOKFindToken
.26aa	b0 0a		bcs $26b6			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.26ac	ce 20 05	dec $0520			dec 	TOKElement 					; make it a single character
.26af					_TTPOne:
.26af	20 06 25	jsr $2506			jsr 	TOKFindToken 				; look for one character punctuation
.26b2	b0 07		bcs $26bb			bcs 	_TTPOutputExit 				; we found it
.26b4	38		sec				sec 								; not recognised.
.26b5	60		rts				rts
.26b6					_TTPConsumeExit:
.26b6	48		pha				pha
.26b7	20 02 25	jsr $2502			jsr 	TOKGetNext 					; get the 2nd char out.
.26ba	68		pla				pla
.26bb					_TTPOutputExit:
.26bb	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.26bd	f0 05		beq $26c4			beq 	_TTPComment
.26bf	20 ef 24	jsr $24ef			jsr  	TOKWriteA 					; write token out
.26c2	18		clc				clc
.26c3	60		rts				rts
.26c4					_TTPComment:
.26c4	20 1f 26	jsr $261f			jsr 	TOKDoComment
.26c7	18		clc				clc
.26c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.26c9					TOKTokeniseString:
.26c9	20 02 25	jsr $2502			jsr 	TOKGetNext 					; consume the "
.26cc	20 1e 24	jsr $241e			jsr 	TOKResetElement 			; start getting the string
.26cf					_TOKTSLoop:
.26cf	20 fe 24	jsr $24fe			jsr 	TOKGet 						; check EOL
.26d2	c9 00		cmp #$00			cmp 	#0
.26d4	f0 0c		beq $26e2			beq 	_TOKTSExit
.26d6	20 02 25	jsr $2502			jsr 	TOKGetNext 					; get and consume
.26d9	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.26db	f0 05		beq $26e2			beq 	_TOKTSExit
.26dd	20 22 24	jsr $2422			jsr 	TOKWriteElement
.26e0	80 ed		bra $26cf			bra 	_TOKTSLoop
.26e2					_TOKTSExit:
.26e2	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ		; token for [[string]]
.26e4	20 ef 24	jsr $24ef			jsr 	TOKWriteA
.26e7	20 63 24	jsr $2463			jsr 	TOKOutputElementBuffer 		; output collected data.
.26ea	18		clc				clc
.26eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.26ec					TOKToUpper:
.26ec	c9 61		cmp #$61			cmp 	#"a"
.26ee	90 06		bcc $26f6			bcc 	_TTUNotLower
.26f0	c9 7b		cmp #$7b			cmp 	#"z"+1
.26f2	b0 02		bcs $26f6			bcs 	_TTUNotLower
.26f4	49 20		eor #$20			eor 	#$20
.26f6					_TTUNotLower:
.26f6	60		rts				rts
.26f7					TOKToLower:
.26f7	c9 41		cmp #$41			cmp 	#"A"
.26f9	90 06		bcc $2701			bcc 	_TTUNotUpper
.26fb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.26fd	b0 02		bcs $2701			bcs 	_TTUNotUpper
.26ff	49 20		eor #$20			eor 	#$20
.2701					_TTUNotUpper:
.2701	60		rts				rts
.2702					TOKIsDigit:
.2702	c9 30		cmp #$30			cmp 	#"0"
.2704	90 06		bcc $270c			bcc 	TOKFail
.2706	c9 3a		cmp #$3a			cmp 	#"9"+1
.2708	b0 02		bcs $270c			bcs 	TOKFail
.270a					TOKSucceed:
.270a	38		sec				sec
.270b	60		rts				rts
.270c					TOKFail:
.270c	18		clc				clc
.270d	60		rts				rts
.270e					TOKIsIdentifierElement:
.270e	c9 5f		cmp #$5f			cmp 	#"_"
.2710	f0 f8		beq $270a			beq 	TOKSucceed 					; else fall through to alphanumeric
.2712					TOKIsAlphaNumeric:
.2712	20 1b 27	jsr $271b			jsr 	TOKIsAlpha
.2715	b0 f3		bcs $270a			bcs 	TOKSucceed
.2717	20 02 27	jsr $2702			jsr 	TOKIsDigit
.271a	60		rts				rts
.271b					TOKIsAlpha:
.271b	20 ec 26	jsr $26ec			jsr 	TOKToUpper
.271e	c9 41		cmp #$41			cmp 	#"A"
.2720	90 ea		bcc $270c			bcc 	TOKFail
.2722	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2724	b0 e6		bcs $270c			bcs 	TOKFail
.2726	80 e2		bra $270a			bra 	TOKSucceed
.2728					TOKIsHexadecimal:
.2728	20 02 27	jsr $2702			jsr		TOKIsDigit
.272b	b0 dd		bcs $270a			bcs 	TOKSucceed
.272d	20 1b 27	jsr $271b			jsr 	TOKIsAlpha
.2730	90 da		bcc $270c			bcc 	TOKFail
.2732	c9 47		cmp #$47			cmp 	#"F"+1
.2734	b0 d6		bcs $270c			bcs 	TOKFail
.2736	80 d2		bra $270a			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2738					Command_CALL:
.2738	a9 42		lda #$42			lda 	#STK_CALL
.273a	20 3c 2c	jsr $2c3c			jsr 	StackOpen
.273d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.273f	29 c0		and #$c0			and 	#$C0
.2741	c9 40		cmp #$40			cmp 	#$40
.2743	d0 29		bne $276e			bne 	_CCSyntax
.2745	20 03 30	jsr $3003			jsr 	VARGetInfo 					; get the information
.2748	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 				; check right bracket follows.
.274b	20 b5 2f	jsr $2fb5			jsr 	VARFind 					; exists ?
.274e	90 21		bcc $2771			bcc 	_CCUnknown
.2750	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2752	85 24		sta $24				sta 	zTemp0
.2754	20 6f 2c	jsr $2c6f			jsr 	STKSaveCodePosition 		; save return address on stack.
.2757	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2759	b1 24		lda ($24),y			lda 	(zTemp0),y
.275b	c9 ff		cmp #$ff			cmp 	#$FF
.275d	d0 12		bne $2771			bne 	_CCUnknown
.275f	88		dey				dey 								; get Y offset to stack
.2760	b1 24		lda ($24),y			lda 	(zTemp0),y
.2762	48		pha				pha
.2763	88		dey				dey 								; get address
.2764	b1 24		lda ($24),y			lda 	(zTemp0),y
.2766	85 19		sta $19				sta 	codePtr+1
.2768	b2 24		lda ($24)			lda 	(zTemp0)
.276a	85 18		sta $18				sta 	codePtr
.276c	7a		ply				ply 								; restore Y
.276d	60		rts				rts
.276e					_CCSyntax:
.276e	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.2771					_CCUnknown:
.2771	4c ad 2b	jmp $2bad		jmp	ErrorV_unknown
.2774					Command_ENDPROC:
.2774	a9 42		lda #$42			lda 	#STK_CALL
.2776	20 67 2c	jsr $2c67			jsr 	StackCheckFrame
.2779	20 81 2c	jsr $2c81			jsr 	STKLoadCodePosition 		; return
.277c	20 59 2c	jsr $2c59			jsr 	StackClose
.277f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2780					Command_DO:
.2780	a9 22		lda #$22			lda 	#STK_DO
.2782	20 3c 2c	jsr $2c3c			jsr 	StackOpen
.2785	20 6f 2c	jsr $2c6f			jsr 	STKSaveCodePosition 		; save loop position
.2788	60		rts				rts
.2789					Command_EXIT:
.2789	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.278b	20 67 2c	jsr $2c67			jsr 	StackCheckFrame
.278e	20 59 2c	jsr $2c59			jsr 	StackClose 					; close it
.2791	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2793	aa		tax				tax
.2794	20 48 29	jsr $2948			jsr 	ScanForward
.2797	60		rts				rts
.2798					Command_LOOP:
.2798	a9 22		lda #$22			lda 	#STK_DO
.279a	20 67 2c	jsr $2c67			jsr 	StackCheckFrame
.279d	20 81 2c	jsr $2c81			jsr 	STKLoadCodePosition 		; loop back
.27a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.27a1					Command_FOR:
.27a1	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.27a3	20 3c 2c	jsr $2c3c			jsr 	StackOpen
.27a6	20 ab 15	jsr $15ab			jsr 	CommandLET 					; do "I = 1" bit
.27a9	5a		phy				phy 								; save variable address to +4,+5
.27aa	a0 04		ldy #$04			ldy 	#4
.27ac	a5 24		lda $24				lda 	zTemp0
.27ae	91 2c		sta ($2c),y			sta 	(basicStack),y
.27b0	c8		iny				iny
.27b1	a5 25		lda $25				lda 	zTemp0+1
.27b3	91 2c		sta ($2c),y			sta 	(basicStack),y
.27b5	7a		ply				ply
.27b6	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.27b8	20 33 2c	jsr $2c33			jsr 	ERRCheckA
.27bb	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.27be	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.27c0	a2 08		ldx #$08			ldx 	#IFR0
.27c2	20 17 28	jsr $2817			jsr 	CFSaveR0X
.27c5	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.27c7	c9 91		cmp #$91			cmp 	#PR_STEP
.27c9	d0 06		bne $27d1			bne 	_CFStep1
.27cb	c8		iny				iny 								; consume step
.27cc	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; evaluate STEP
.27cf	80 24		bra $27f5			bra 	_CFWriteStep
.27d1					_CFStep1:
.27d1	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.27d3	a9 01		lda #$01			lda 	#1
.27d5	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.27d8	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.27d9	a0 04		ldy #$04			ldy 	#4 							; get variable address
.27db	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27dd	85 24		sta $24				sta 	zTemp0
.27df	c8		iny				iny
.27e0	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27e2	85 25		sta $25				sta 	zTemp0+1
.27e4	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.27e6	b1 24		lda ($24),y			lda 	(zTemp0),y
.27e8	d0 0a		bne $27f4			bne 	_CFNotOptimised
.27ea	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.27ec	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27ee	d0 04		bne $27f4			bne 	_CFNotOptimised
.27f0	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.27f2	85 0b		sta $0b				sta 	IFR0+IExp
.27f4					_CFNotOptimised:
.27f4	7a		ply				ply
.27f5					_CFWriteStep:
.27f5	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.27f7	a9 06		lda #$06			lda 	#6
.27f9	20 17 28	jsr $2817			jsr 	CFSaveR0X
.27fc	20 6f 2c	jsr $2c6f			jsr 	STKSaveCodePosition 		; save loop position
.27ff	60		rts				rts
.2800					CFLoadR0X:
.2800	5a		phy				phy
.2801	a8		tay				tay
.2802	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2804	95 00		sta $00,x			sta 	IM0,x
.2806	c8		iny				iny
.2807	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2809	95 01		sta $01,x			sta 	IM1,x
.280b	c8		iny				iny
.280c	b1 2c		lda ($2c),y			lda 	(basicStack),y
.280e	95 02		sta $02,x			sta 	IM2,x
.2810	c8		iny				iny
.2811	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2813	95 03		sta $03,x			sta 	IExp,x
.2815	7a		ply				ply
.2816	60		rts				rts
.2817					CFSaveR0X:
.2817	5a		phy				phy
.2818	a8		tay				tay
.2819	b5 00		lda $00,x			lda 	IM0,x
.281b	91 2c		sta ($2c),y			sta 	(basicStack),y
.281d	c8		iny				iny
.281e	b5 01		lda $01,x			lda 	IM1,x
.2820	91 2c		sta ($2c),y			sta 	(basicStack),y
.2822	c8		iny				iny
.2823	b5 02		lda $02,x			lda 	IM2,x
.2825	91 2c		sta ($2c),y			sta 	(basicStack),y
.2827	c8		iny				iny
.2828	b5 03		lda $03,x			lda 	IExp,x
.282a	91 2c		sta ($2c),y			sta 	(basicStack),y
.282c	7a		ply				ply
.282d	60		rts				rts
.282e					Command_NEXT:
.282e	a9 37		lda #$37			lda 	#STK_FOR
.2830	20 67 2c	jsr $2c67			jsr 	StackCheckFrame
.2833	5a		phy				phy 								; check optimised loop
.2834	a0 09		ldy #$09			ldy 	#9
.2836	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2838	7a		ply				ply
.2839	0a		asl a				asl 	a
.283a	b0 35		bcs $2871			bcs 	_CNOptimised
.283c	20 a9 28	jsr $28a9			jsr 	_CNLoadValue 				; load index value to R0.
.283f	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2841	a9 06		lda #$06			lda 	#6
.2843	20 00 28	jsr $2800			jsr 	CFLoadR0X
.2846	20 b8 30	jsr $30b8			jsr 	IFloatAdd 					; add them together and write back.
.2849	20 cc 28	jsr $28cc			jsr 	_CNSaveValue
.284c	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.284e	a2 0c		ldx #$0c			ldx 	#IFR1
.2850	20 00 28	jsr $2800			jsr 	CFLoadR0X
.2853	20 8f 33	jsr $338f			jsr 	IFloatCompare 				; compare terminal vs current
.2856	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2858	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.285b	f0 10		beq $286d			beq 	_CNLoopBack
.285d	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.285f	5a		phy				phy
.2860	a0 09		ldy #$09			ldy 	#6+IExp
.2862	51 2c		eor ($2c),y			eor 	(basicStack),y
.2864	7a		ply				ply
.2865	29 40		and #$40			and 	#IFSign
.2867	f0 04		beq $286d			beq 	_CNLoopBack
.2869					_CNExitLoop:
.2869	20 59 2c	jsr $2c59			jsr 	StackClose		 			; return
.286c	60		rts				rts
.286d					_CNLoopBack:
.286d	20 81 2c	jsr $2c81			jsr 	STKLoadCodePosition 		; loop back
.2870	60		rts				rts
.2871					_CNOptimised:
.2871	5a		phy				phy
.2872	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2874	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2876	85 28		sta $28				sta 	zTemp2
.2878	c8		iny				iny
.2879	b1 2c		lda ($2c),y			lda 	(basicStack),y
.287b	85 29		sta $29				sta 	zTemp2+1
.287d	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.287f					_CNIncrement:
.287f	c8		iny				iny
.2880	b1 28		lda ($28),y			lda 	(zTemp2),y
.2882	1a		inc a				inc 	a
.2883	91 28		sta ($28),y			sta 	(zTemp2),y
.2885	f0 f8		beq $287f			beq 	_CNIncrement
.2887	18		clc				clc 								; point zTemp0 to terminal value
.2888	a5 2c		lda $2c				lda 	basicStack
.288a	69 0a		adc #$0a			adc 	#10
.288c	85 24		sta $24				sta 	zTemp0
.288e	a5 2d		lda $2d				lda 	basicStack+1
.2890	69 00		adc #$00			adc 	#0
.2892	85 25		sta $25				sta 	zTemp0+1
.2894	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2896	18		clc				clc 								; borrow 1, we want > not >=
.2897	b2 28		lda ($28)			lda 	(zTemp2)
.2899	f2 24		sbc ($24)			sbc 	(zTemp0)
.289b	b1 28		lda ($28),y			lda 	(zTemp2),y
.289d	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.289f	c8		iny				iny
.28a0	b1 28		lda ($28),y			lda 	(zTemp2),y
.28a2	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.28a4	7a		ply				ply
.28a5	b0 c2		bcs $2869			bcs 	_CNExitLoop
.28a7	80 c4		bra $286d			bra 	_CNLoopBack
.28a9					_CNLoadValue:
.28a9	5a		phy				phy
.28aa	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.28ac	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28ae	85 28		sta $28				sta 	zTemp2
.28b0	c8		iny				iny
.28b1	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28b3	85 29		sta $29				sta 	zTemp2+1
.28b5	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.28b7	b1 28		lda ($28),y			lda 	(zTemp2),y
.28b9	85 08		sta $08				sta 	IFR0+IM0
.28bb	c8		iny				iny
.28bc	b1 28		lda ($28),y			lda 	(zTemp2),y
.28be	85 09		sta $09				sta 	IFR0+IM1
.28c0	c8		iny				iny
.28c1	b1 28		lda ($28),y			lda 	(zTemp2),y
.28c3	85 0a		sta $0a				sta 	IFR0+IM2
.28c5	c8		iny				iny
.28c6	b1 28		lda ($28),y			lda 	(zTemp2),y
.28c8	85 0b		sta $0b				sta 	IFR0+IExp
.28ca	7a		ply				ply
.28cb	60		rts				rts
.28cc					_CNSaveValue:
.28cc	5a		phy				phy
.28cd	a0 00		ldy #$00			ldy 	#0
.28cf	a5 08		lda $08				lda 	IFR0+IM0
.28d1	91 28		sta ($28),y			sta 	(zTemp2),y
.28d3	c8		iny				iny
.28d4	a5 09		lda $09				lda 	IFR0+IM1
.28d6	91 28		sta ($28),y			sta 	(zTemp2),y
.28d8	c8		iny				iny
.28d9	a5 0a		lda $0a				lda 	IFR0+IM2
.28db	91 28		sta ($28),y			sta 	(zTemp2),y
.28dd	c8		iny				iny
.28de	a5 0b		lda $0b				lda 	IFR0+IExp
.28e0	91 28		sta ($28),y			sta 	(zTemp2),y
.28e2	7a		ply				ply
.28e3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.28e4					Command_GOSUB:
.28e4	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; get line number
.28e7	a9 52		lda #$52			lda 	#STK_GOSUB
.28e9	20 3c 2c	jsr $2c3c			jsr 	StackOpen
.28ec	20 6f 2c	jsr $2c6f			jsr 	STKSaveCodePosition 		; save return address on stack.
.28ef	4c cc 14	jmp $14cc			jmp 	GotoR0
.28f2					Command_RETURN:
.28f2	a9 52		lda #$52			lda 	#STK_GOSUB
.28f4	20 67 2c	jsr $2c67			jsr 	StackCheckFrame
.28f7	20 81 2c	jsr $2c81			jsr 	STKLoadCodePosition 		; return
.28fa	20 59 2c	jsr $2c59			jsr 	StackClose
.28fd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.28fe					IfCommand:
.28fe	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; Get the if test.
.2901	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2903	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2905	d0 0c		bne $2913			bne 	_IfStructured 				; we still support it.
.2907	c8		iny				iny 								; consume THEN
.2908	a2 08		ldx #$08			ldx 	#IFR0
.290a	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; is it zero
.290d	f0 01		beq $2910			beq 	_IfFail 					; if fail, go to next line
.290f	60		rts				rts 								; if THEN just continue
.2910					_IfFail:
.2910	4c 04 18	jmp $1804			jmp 	RUNEndOfLine
.2913					_IfStructured:
.2913	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; is it zero
.2916	d0 07		bne $291f			bne 	_IfExit 					; if not, then continue normally.
.2918	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.291a	a2 85		ldx #$85			ldx 	#PR_ENDIF
.291c	20 48 29	jsr $2948			jsr 	ScanForward 				; and run from there
.291f					_IfExit:
.291f	60		rts				rts
.2920					ElseCode:
.2920	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2922	aa		tax				tax 								; so just go to the structure exit
.2923	20 48 29	jsr $2948			jsr 	ScanForward
.2926	60		rts				rts
.2927					EndIf:
.2927	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2928					Command_REPEAT:
.2928	a9 02		lda #$02			lda 	#STK_REPEAT
.292a	20 3c 2c	jsr $2c3c			jsr 	StackOpen
.292d	20 6f 2c	jsr $2c6f			jsr 	STKSaveCodePosition 		; save loop position
.2930	60		rts				rts
.2931					Command_UNTIL:
.2931	a9 02		lda #$02			lda 	#STK_REPEAT
.2933	20 67 2c	jsr $2c67			jsr 	StackCheckFrame
.2936	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; work out the test
.2939	a2 08		ldx #$08			ldx 	#IFR0
.293b	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; check if zero
.293e	f0 04		beq $2944			beq 	_CULoopBack 				; if so keep looping
.2940	20 59 2c	jsr $2c59			jsr 	StackClose		 			; return
.2943	60		rts				rts
.2944					_CULoopBack:
.2944	20 81 2c	jsr $2c81			jsr 	STKLoadCodePosition 		; loop back
.2947	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2948					ScanForward:
.2948	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.294a	86 25		stx $25				stx 	zTemp0+1
.294c	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.294e					_ScanForwardLoop:
.294e	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2950	d0 0a		bne $295c			bne 	_ScanNoCheck
.2952	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2954	c5 24		cmp $24				cmp 	zTemp0
.2956	f0 49		beq $29a1			beq 	_ScanExit
.2958	c5 25		cmp $25				cmp 	zTemp0+1
.295a	f0 45		beq $29a1			beq 	_ScanExit
.295c					_ScanNoCheck:
.295c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.295e	c8		iny				iny
.295f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2961	f0 37		beq $299a			beq		_ScanDataItem
.2963	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2965	f0 33		beq $299a			beq 	_ScanDataItem
.2967	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2969	f0 1b		beq $2986			beq 	_ScanNextLine
.296b	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.296d	d0 01		bne $2970			bne 	_ScanNoShift
.296f	c8		iny				iny
.2970					_ScanNoShift:
.2970	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2972	b0 da		bcs $294e			bcs 	_ScanForwardLoop
.2974	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2976	90 d6		bcc $294e			bcc 	_ScanForwardLoop
.2978	aa		tax				tax 								; access the table to get the adjustment.
.2979	18		clc				clc
.297a	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.297c	7d 5e 1e	adc $1e5e,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.297f	85 26		sta $26				sta 	zTemp1
.2981	10 cb		bpl $294e			bpl		_ScanForwardLoop 			; error if -ve ?
.2983	4c c4 2a	jmp $2ac4		jmp	ErrorV_structure
.2986					_ScanNextLine:
.2986	18		clc				clc	 								; forward to next line.
.2987	b2 18		lda ($18)			lda 	(codePtr)
.2989	65 18		adc $18				adc 	codePtr
.298b	85 18		sta $18				sta 	codePtr
.298d	90 02		bcc $2991			bcc 	_ScanNoCarry
.298f	e6 19		inc $19				inc 	codePtr+1
.2991					_ScanNoCarry:
.2991	a0 03		ldy #$03			ldy 	#3
.2993	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2995	d0 b7		bne $294e			bne 	_ScanForwardLoop
.2997	4c c4 2a	jmp $2ac4		jmp	ErrorV_structure
.299a					_ScanDataItem:
.299a	98		tya				tya
.299b	38		sec				sec
.299c	71 18		adc ($18),y			adc 	(codePtr),y
.299e	a8		tay				tay
.299f	80 ad		bra $294e			bra 	_ScanForwardLoop
.29a1					_ScanExit:
.29a1	c8		iny				iny 								; consume final token.
.29a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.29a3					ScanProcedures:
.29a3	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.29a5	48		pha				pha
.29a6	a5 19		lda $19				lda 	codePtr+1
.29a8	48		pha				pha
.29a9	5a		phy				phy
.29aa	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.29ad	85 19		sta $19				sta 	codePtr+1
.29af	64 18		stz $18				stz 	codePtr
.29b1					_SPLoop:
.29b1	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.29b3	f0 18		beq $29cd			beq 	_SPExit
.29b5	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.29b7	b1 18		lda ($18),y			lda 	(codePtr),y
.29b9	c9 88		cmp #$88			cmp 	#PR_PROC
.29bb	d0 03		bne $29c0			bne 	_SPNext
.29bd	20 d5 29	jsr $29d5			jsr 	_SPSetupRecord
.29c0					_SPNext:
.29c0	18		clc				clc 								; forward to next
.29c1	b2 18		lda ($18)			lda 	(codePtr)
.29c3	65 18		adc $18				adc 	codePtr
.29c5	85 18		sta $18				sta 	codePtr
.29c7	90 e8		bcc $29b1			bcc 	_SPLoop
.29c9	e6 19		inc $19				inc 	codePtr+1
.29cb	80 e4		bra $29b1			bra 	_SPLoop
.29cd					_SPExit:
.29cd	7a		ply				ply
.29ce	68		pla				pla
.29cf	85 19		sta $19				sta 	codePtr+1
.29d1	68		pla				pla
.29d2	85 18		sta $18				sta 	codePtr
.29d4	60		rts				rts
.29d5					_SPSetupRecord:
.29d5	c8		iny				iny 								; check identifier follows
.29d6	b1 18		lda ($18),y			lda 	(codePtr),y
.29d8	29 c0		and #$c0			and 	#$C0
.29da	c9 40		cmp #$40			cmp 	#$40
.29dc	d0 27		bne $2a05			bne 	_SPSyntax
.29de	20 03 30	jsr $3003			jsr 	VARGetInfo 					; get the information
.29e1	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen 				; check right bracket follows.
.29e4	20 b5 2f	jsr $2fb5			jsr 	VARFind 					; already exists ?
.29e7	b0 1f		bcs $2a08			bcs 	_SPUsed 					; error !
.29e9	20 61 2f	jsr $2f61			jsr 	VARCreate 					; create, XA points to the data.
.29ec	85 24		sta $24				sta 	zTemp0
.29ee	86 25		stx $25				stx 	zTemp0+1
.29f0	5a		phy				phy 								; save Y pos on stack
.29f1	a0 01		ldy #$01			ldy 	#1
.29f3	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.29f5	92 24		sta ($24)			sta 	(zTemp0)
.29f7	a5 19		lda $19				lda 	codePtr+1
.29f9	91 24		sta ($24),y			sta 	(zTemp0),y
.29fb	c8		iny				iny
.29fc	68		pla				pla
.29fd	91 24		sta ($24),y			sta 	(zTemp0),y
.29ff	c8		iny				iny
.2a00	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2a02	91 24		sta ($24),y			sta 	(zTemp0),y
.2a04	60		rts				rts
.2a05					_SPSyntax:
.2a05	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.2a08					_SPUsed:
.2a08	4c 8f 2b	jmp $2b8f		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2a0b					Command_WHILE:
.2a0b	5a		phy				phy 								; save position of the test
.2a0c	20 43 1a	jsr $1a43			jsr 	EXPEvalNumber 				; work out the while test.
.2a0f	a2 08		ldx #$08			ldx 	#IFR0
.2a11	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; check if zero
.2a14	f0 0e		beq $2a24			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2a16	98		tya				tya 								; position *after* test.
.2a17	7a		ply				ply 								; restore position before test, at WHILE
.2a18	88		dey				dey 								; so we execute the WHILE command again.
.2a19	48		pha				pha 								; push after test on the stack
.2a1a	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2a1c	20 3c 2c	jsr $2c3c			jsr 	StackOpen
.2a1f	20 6f 2c	jsr $2c6f			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2a22	7a		ply				ply 								; restore the position *after* the test
.2a23	60		rts				rts
.2a24					_WHExitLoop:
.2a24	68		pla				pla 								; throw post loop position
.2a25	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2a27	aa		tax				tax
.2a28	20 48 29	jsr $2948			jsr 	ScanForward
.2a2b	60		rts				rts
.2a2c					Command_WEND:
.2a2c	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2a2e	20 67 2c	jsr $2c67			jsr 	StackCheckFrame
.2a31	20 81 2c	jsr $2c81			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2a34	20 59 2c	jsr $2c59			jsr 	StackClose		 			; erase the frame
.2a37	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2a38					ErrorV_syntax:
.2a38	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2a3b	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2a43	45 72 72 6f 72 00
.2a49					ErrorV_range:
.2a49	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2a4c	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2a54	52 61 6e 67 65 00
.2a5a					ErrorV_value:
.2a5a	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2a5d	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2a65	75 65 00
.2a68					ErrorV_type:
.2a68	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2a6b	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2a73	73 6d 61 74 63 68 00
.2a7a					ErrorV_unimplemented:
.2a7a	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2a7d	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2a85	6c 65 6d 65 6e 74 65 64 00
.2a8e					ErrorV_assert:
.2a8e	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2a91	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2a99	46 61 69 6c 00
.2a9e					ErrorV_internal:
.2a9e	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2aa1	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2aa9	6c 20 45 72 72 6f 72 00
.2ab1					ErrorV_divzero:
.2ab1	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2ab4	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2abc	42 79 20 5a 65 72 6f 00
.2ac4					ErrorV_structure:
.2ac4	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2ac7	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2acf	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2adc					ErrorV_stop:
.2adc	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2adf	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2ae7	20 53 74 6f 70 70 65 64 00
.2af0					ErrorV_data:
.2af0	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2af3	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2afb	44 61 74 61 00
.2b00					ErrorV_redefine:
.2b00	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b03	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2b0b	65 64 65 66 69 6e 65 64 00
.2b14					ErrorV_index:
.2b14	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b17	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2b1f	61 79 20 49 6e 64 65 78 00
.2b28					ErrorV_memory:
.2b28	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b2b	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2b33	4d 65 6d 6f 72 79 00
.2b3a					ErrorV_uninitialised:
.2b3a	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b3d	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2b45	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2b55					ErrorV_string:
.2b55	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b58	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2b60	69 6e 67 20 4c 65 6e 67 74 68 00
.2b6b					ErrorV_variable:
.2b6b	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b6e	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2b76	65 20 4d 69 73 73 69 6e 67 00
.2b80					ErrorV_stack:
.2b80	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b83	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2b8b	75 6c 6c 00
.2b8f					ErrorV_dupproc:
.2b8f	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2b92	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2b9a	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2baa	65 64 00
.2bad					ErrorV_unknown:
.2bad	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2bb0	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2bb8	20 50 72 6f 63 65 64 75 72 65 00
.2bc3					ErrorV_break:
.2bc3	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2bc6	05 42 72 65 61 6b 00			.text	5,"Break",0
.2bcd					ErrorV_line:
.2bcd	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2bd0	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2bd8	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2be5					ErrorV_fnf:
.2be5	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2be8	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2bf0	74 20 46 6f 75 6e 64 00
.2bf8					ErrorV_full:
.2bf8	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2bfb	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2c03	20 46 75 6c 6c 00
.2c09					ErrorV_align:
.2c09	20 51 2e	jsr $2e51		jsr	ErrorHandler
>2c0c	0d 4c 61 62 65 6c 20 43			.text	13,"Label Changed",0
>2c14	68 61 6e 67 65 64 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2c1b					ERRCheckLParen:
.2c1b	b1 18		lda ($18),y			lda 	(codePtr),y
.2c1d	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2c1f	d0 18		bne $2c39			bne 	ERRSyntaxError
.2c21	c8		iny				iny
.2c22	60		rts				rts
.2c23					ERRCheckRParen:
.2c23	b1 18		lda ($18),y			lda 	(codePtr),y
.2c25	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2c27	d0 10		bne $2c39			bne 	ERRSyntaxError
.2c29	c8		iny				iny
.2c2a	60		rts				rts
.2c2b					ERRCheckComma:
.2c2b	b1 18		lda ($18),y			lda 	(codePtr),y
.2c2d	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c2f	d0 08		bne $2c39			bne 	ERRSyntaxError
.2c31	c8		iny				iny
.2c32	60		rts				rts
.2c33					ERRCheckA:
.2c33	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2c35	d0 02		bne $2c39			bne 	ERRSyntaxError
.2c37	c8		iny				iny
.2c38	60		rts				rts
.2c39					ERRSyntaxError:
.2c39	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2c3c					StackOpen:
.2c3c	48		pha				pha 								; save frame byte
.2c3d	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2c3f	0a		asl a				asl 	a 							; claim twice this for storage
.2c40	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2c42	38		sec				sec 								; so basically subtracting from
.2c43	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2c45	85 2c		sta $2c				sta 	basicStack
.2c47	b0 09		bcs $2c52			bcs 	_SONoBorrow
.2c49	c6 2d		dec $2d				dec 	basicStack+1
.2c4b	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2c4d	cd 24 06	cmp $0624			cmp 	basicStackEnd
.2c50	f0 04		beq $2c56			beq 	_SOMemory
.2c52					_SONoBorrow:
.2c52	68		pla				pla 								; get marker back and write at TOS
.2c53	92 2c		sta ($2c)			sta 	(basicStack)
.2c55	60		rts				rts
.2c56					_SOMemory:
.2c56	4c 80 2b	jmp $2b80		jmp	ErrorV_stack
.2c59					StackClose:
.2c59	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2c5b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2c5d	0a		asl a				asl 	a 							; claim twice this.
.2c5e	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2c60	85 2c		sta $2c				sta 	basicStack
.2c62	90 02		bcc $2c66			bcc 	_SCExit
.2c64	e6 2d		inc $2d				inc 	basicStack+1
.2c66					_SCExit:
.2c66	60		rts				rts
.2c67					StackCheckFrame:
.2c67	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2c69	d0 01		bne $2c6c			bne 	_SCFError 					; different, we have structures mixed up
.2c6b	60		rts				rts
.2c6c					_SCFError:
.2c6c	4c c4 2a	jmp $2ac4		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2c6f					STKSaveCodePosition:
.2c6f	5a		phy				phy
.2c70	98		tya				tya 								; save Y at offset 1.
.2c71	a0 01		ldy #$01			ldy 	#1
.2c73	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c75	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2c77	c8		iny				iny
.2c78	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c7a	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2c7c	c8		iny				iny
.2c7d	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c7f	7a		ply				ply
.2c80	60		rts				rts
.2c81					STKLoadCodePosition:
.2c81	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2c83	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2c85	85 19		sta $19				sta 	codePtr+1
.2c87	88		dey				dey
.2c88	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2c8a	85 18		sta $18				sta 	codePtr
.2c8c	88		dey				dey
.2c8d	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2c8f	a8		tay				tay
.2c90	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2c91					StackReset:
.2c91	48		pha				pha 								; save top of memory
.2c92	3a		dec a				dec 	a  							; end of stack = previous byte
.2c93	85 2d		sta $2d				sta 	basicStack+1
.2c95	a9 ff		lda #$ff			lda 	#$FF
.2c97	85 2c		sta $2c				sta 	basicStack
.2c99	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2c9b	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2c9d	68		pla				pla 								; allocate pages for stack.
.2c9e	38		sec				sec
.2c9f	e9 02		sbc #$02			sbc 	#STACKPAGES
.2ca1	8d 24 06	sta $0624			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2ca4	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0624					basicStackEnd:
>0624							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2ca5					StringConcrete:
.2ca5	5a		phy				phy 								; save position on stack
.2ca6	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2ca8	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2caa	b0 41		bcs $2ced			bcs 	_SALengthError
.2cac	18		clc				clc 								; length of the new string
.2cad	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2caf	90 02		bcc $2cb3			bcc 	_SAHaveLength
.2cb1	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2cb3					_SAHaveLength:
.2cb3	48		pha				pha 								; save length to be allocated for concreting.
.2cb4	38		sec				sec
.2cb5	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2cb7	6d 26 06	adc $0626			adc 	stringMemory
.2cba	8d 26 06	sta $0626			sta 	stringMemory
.2cbd	85 28		sta $28				sta 	zTemp2 						; update storage address
.2cbf	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2cc1	6d 27 06	adc $0627			adc 	stringMemory+1
.2cc4	8d 27 06	sta $0627			sta 	stringMemory+1
.2cc7	85 29		sta $29				sta 	zTemp2+1
.2cc9	68		pla				pla 								; save length allocated in +0
.2cca	92 28		sta ($28)			sta 	(zTemp2)
.2ccc	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2cce	a0 01		ldy #$01			ldy 	#1
.2cd0	91 28		sta ($28),y			sta 	(zTemp2),y
.2cd2					_SACopyNewString:
.2cd2	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2cd4	a0 02		ldy #$02			ldy 	#2
.2cd6	91 28		sta ($28),y			sta 	(zTemp2),y
.2cd8	aa		tax				tax 								; bytes to copy
.2cd9	f0 0c		beq $2ce7			beq 	_SACopyExit
.2cdb	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2cdd					_SACopyNSLoop:
.2cdd	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2cdf	c8		iny				iny 								; write two on in string storage
.2ce0	c8		iny				iny
.2ce1	91 28		sta ($28),y			sta 	(zTemp2),y
.2ce3	88		dey				dey
.2ce4	ca		dex				dex									; until copied all the string lengths.
.2ce5	d0 f6		bne $2cdd			bne 	_SACopyNSLoop
.2ce7					_SACopyExit:
.2ce7	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2ce9	a5 28		lda $28				lda 	zTemp2
.2ceb	7a		ply				ply
.2cec	60		rts				rts
.2ced					_SALengthError:
.2ced	4c 55 2b	jmp $2b55		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2cf0					StringSystemInitialise:
.2cf0	3a		dec a				dec 	a 							; make last byte of previous page.
.2cf1	8d 27 06	sta $0627			sta 	stringMemory+1
.2cf4	85 25		sta $25				sta 	zTemp0+1
.2cf6	a9 ff		lda #$ff			lda 	#$FF
.2cf8	8d 26 06	sta $0626			sta 	stringMemory
.2cfb	85 24		sta $24				sta 	zTemp0
.2cfd	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2cff	92 24		sta ($24)			sta 	(zTemp0)
.2d01	60		rts				rts
.2d02					StringSpaceInitialise:
.2d02	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2d04	8d 25 06	sta $0625			sta 	stringInitialised
.2d07	ad 26 06	lda $0626			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2d0a	8d 28 06	sta $0628			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2d0d	ad 27 06	lda $0627			lda 	stringMemory+1
.2d10	3a		dec a				dec 	a
.2d11	8d 29 06	sta $0629			sta 	stringTempPointer+1
.2d14	20 76 13	jsr $1376			jsr 	ClearCheckMemory
.2d17	60		rts				rts
.2d18					StringTempAllocate:
.2d18	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2d1a	b0 2e		bcs $2d4a			bcs 	_STALength
.2d1c	2c 25 06	bit $0625			bit 	stringInitialised 			; already initialised
.2d1f	30 05		bmi $2d26			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2d21	48		pha				pha 								; save value to subtract.
.2d22	20 02 2d	jsr $2d02			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2d25	68		pla				pla 								; restore it
.2d26					_STAAllocate:
.2d26	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2d28	18		clc				clc  								; deliberate allows one more
.2d29	6d 28 06	adc $0628			adc 	stringTempPointer 			; subtract from temp pointer
.2d2c	8d 28 06	sta $0628			sta 	stringTempPointer
.2d2f	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2d31	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2d33	ad 29 06	lda $0629			lda 	stringTempPointer+1
.2d36	69 ff		adc #$ff			adc 	#$FF
.2d38	8d 29 06	sta $0629			sta 	stringTempPointer+1
.2d3b	85 2f		sta $2f				sta 	zsTemp+1
.2d3d	85 09		sta $09				sta 	IFR0+IM1
.2d3f	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2d41	a9 80		lda #$80			lda 	#$80
.2d43	85 0b		sta $0b				sta 	IFR0+IExp
.2d45	a9 00		lda #$00			lda 	#0 							; clear the target string
.2d47	92 2e		sta ($2e)			sta 	(zsTemp)
.2d49	60		rts				rts
.2d4a					_STALength:
.2d4a	4c 55 2b	jmp $2b55		jmp	ErrorV_string
.2d4d					StringTempWrite:
.2d4d	5a		phy				phy
.2d4e	48		pha				pha
.2d4f	b2 2e		lda ($2e)			lda 	(zsTemp)
.2d51	1a		inc a				inc 	a
.2d52	92 2e		sta ($2e)			sta 	(zsTemp)
.2d54	a8		tay				tay
.2d55	68		pla				pla
.2d56	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2d58	7a		ply				ply
.2d59	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0625					stringInitialised:
>0625							.fill 	1
.0626					stringMemory:
>0626							.fill 	2
.0628					stringTempPointer:
>0628							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2d5a					Command_DIR:
.2d5a	5a		phy				phy
.2d5b	38		sec				sec 								; reset read
.2d5c	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2d5f	18		clc		_CDLoop:clc
.2d60	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2d63	b0 27		bcs $2d8c			bcs 	_CDExit 					; no more
.2d65	86 24		stx $24				stx 	zTemp0
.2d67	84 25		sty $25				sty 	zTemp0+1
.2d69	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2d6c					_CDPad:
.2d6c	a9 20		lda #$20			lda 	#32
.2d6e	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2d71	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2d74	e0 10		cpx #$10			cpx 	#16
.2d76	90 f4		bcc $2d6c			bcc 	_CDPad
.2d78	a0 11		ldy #$11			ldy 	#17
.2d7a	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d7c	aa		tax				tax
.2d7d	88		dey				dey
.2d7e	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d80	20 7a 2e	jsr $2e7a			jsr 	WriteIntXA
.2d83	a2 8e		ldx #$8e			ldx 	#_CDTail & $FF
.2d85	a0 2d		ldy #$2d			ldy 	#_CDTail >> 8
.2d87	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2d8a	80 d3		bra $2d5f			bra 	_CDLoop
.2d8c	7a		ply		_CDExit:ply
.2d8d	60		rts				rts
.2d8e					_CDTail:
>2d8e	08						.byte 	_CDTail2-*-1
>2d8f	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2d97					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2d97					Command_ERASE:
.2d97	20 a9 2d	jsr $2da9			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2d9a	5a		phy				phy
.2d9b	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2d9d	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2d9f	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2da2	7a		ply				ply
.2da3	b0 01		bcs $2da6			bcs 	_CEFail
.2da5	60		rts				rts
.2da6					_CEFail:
.2da6	4c e5 2b	jmp $2be5		jmp	ErrorV_fnf
.2da9					FileSetupBlock:
.2da9	20 6d 1a	jsr $1a6d			jsr 	EXPEvalString 					; string to R0, zTemp0
.2dac	a5 24		lda $24				lda 	zTemp0 							; address to name
.2dae	8d 2a 06	sta $062a			sta 	FSBBlock
.2db1	a5 25		lda $25				lda 	zTemp0+1
.2db3	8d 2b 06	sta $062b			sta 	FSBBlock+1 						; zero the rest.
.2db6	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2db9	9c 2d 06	stz $062d			stz 	FSBBlock+3
.2dbc	9c 2e 06	stz $062e			stz 	FSBBlock+4
.2dbf	9c 2f 06	stz $062f			stz 	FSBBlock+5
.2dc2	60		rts				rts
.062a					FSBBlock:
>062a							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2dc3					Command_LOAD:
.2dc3	20 a9 2d	jsr $2da9			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2dc6	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; set load address
.2dc9	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2dcc	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2dcf	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2dd1	48		pha				pha
.2dd2	20 ef 2d	jsr $2def			jsr	 	FileCheckSecondParam
.2dd5	5a		phy				phy
.2dd6	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2dd8	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2dda	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2ddd	7a		ply				ply
.2dde	b0 0c		bcs $2dec			bcs 	_CLFail
.2de0	68		pla				pla 								; load program
.2de1	c9 99		cmp #$99			cmp 	#PR_COMMA
.2de3	f0 06		beq $2deb			beq 	_CLNoClear
.2de5	20 30 13	jsr $1330			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2de8	4c 99 2e	jmp $2e99			jmp 	WarmStart 					; and warm start
.2deb					_CLNoClear:
.2deb	60		rts				rts
.2dec					_CLFail:
.2dec	4c e5 2b	jmp $2be5		jmp	ErrorV_fnf
.2def					FileCheckSecondParam:
.2def	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2df1	c9 99		cmp #$99			cmp 	#PR_COMMA
.2df3	d0 0e		bne $2e03			bne 	_FCSPExit
.2df5	c8		iny				iny 								; consume
.2df6	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; get address
.2df9	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2dfb	8d 2c 06	sta $062c			sta 	FSBBlock+2
.2dfe	a5 09		lda $09				lda 	IFR0+IM1
.2e00	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2e03					_FCSPExit:
.2e03	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2e04					Command_SAVE:
.2e04	20 a9 2d	jsr $2da9			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2e07	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2e09	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2e0b	f0 22		beq $2e2f			beq 	_CLSaveBlock 				; save "Name",from,size
.2e0d	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; set load address
.2e10	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2e13	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2e16	20 07 24	jsr $2407			jsr		PGMEndProgram 				; end of program -> zTemp0
.2e19	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2e1b	d0 02		bne $2e1f			bne 	_CLNoCarry
.2e1d	e6 25		inc $25				inc 	zTemp0+1
.2e1f					_CLNoCarry:
.2e1f	a5 24		lda $24				lda 	zTemp0
.2e21	8d 2e 06	sta $062e			sta 	FSBBlock+4
.2e24	38		sec				sec
.2e25	a5 25		lda $25				lda 	zTemp0+1
.2e27	ed 2d 06	sbc $062d			sbc 	FSBBlock+3
.2e2a	8d 2f 06	sta $062f			sta 	FSBBlock+5
.2e2d	80 13		bra $2e42			bra 	_CSSave
.2e2f					_CLSaveBlock:
.2e2f	20 ef 2d	jsr $2def			jsr 	FileCheckSecondParam 		; the address to save from.
.2e32	20 2b 2c	jsr $2c2b			jsr 	ERRCheckComma
.2e35	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; get size
.2e38	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2e3a	8d 2e 06	sta $062e			sta 	FSBBlock+4
.2e3d	a5 09		lda $09				lda 	IFR0+IM1
.2e3f	8d 2f 06	sta $062f			sta 	FSBBlock+5
.2e42					_CSSave:
.2e42	5a		phy				phy
.2e43	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2e45	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2e47	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2e4a	7a		ply				ply
.2e4b	b0 01		bcs $2e4e			bcs 	_CSFail
.2e4d	60		rts				rts
.2e4e					_CSFail:
.2e4e	4c f8 2b	jmp $2bf8		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2e51					ErrorHandler:
.2e51	fa		plx				plx 								; get address of msg
.2e52	7a		ply				ply
.2e53	e8		inx				inx 								; bump past RTS
.2e54	d0 01		bne $2e57			bne 	_EHNoInc
.2e56	c8		iny				iny
.2e57					_EHNoInc:
.2e57	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2e5a	ad 30 06	lda $0630			lda 	ERRLine 					; direct command ?
.2e5d	0d 31 06	ora $0631			ora 	ERRLine+1
.2e60	f0 10		beq $2e72			beq 	_EHNoNumber
.2e62	a2 75		ldx #$75			ldx 	#_EHAtMsg & $FF
.2e64	a0 2e		ldy #$2e			ldy 	#_EHAtMsg >> 8
.2e66	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2e69	ad 30 06	lda $0630			lda 	ERRLine 					; line number -> XA
.2e6c	ae 31 06	ldx $0631			ldx 	ERRLine+1
.2e6f	20 7a 2e	jsr $2e7a			jsr 	WriteIntXA
.2e72					_EHNoNumber:
.2e72	4c a3 2e	jmp $2ea3			jmp 	WarmStartNewLine
.2e75					_EHAtMsg:
>2e75	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2e7a					_EHAtMsg1:
.2e7a					WriteIntXA:
.2e7a	da		phx				phx
.2e7b	48		pha				pha
.2e7c	a2 08		ldx #$08			ldx 	#IFR0
.2e7e	20 0f 36	jsr $360f			jsr 	IFloatPushRx
.2e81	68		pla				pla
.2e82	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.2e85	68		pla				pla
.2e86	85 09		sta $09				sta 	IFR0+IM1
.2e88	a9 0a		lda #$0a			lda 	#10 						; decimal
.2e8a	20 62 34	jsr $3462			jsr 	IFloatIntegerToStringR0	 	; convert
.2e8d	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2e90	a2 08		ldx #$08			ldx 	#IFR0
.2e92	20 30 36	jsr $3630			jsr 	IFloatPullRx
.2e95	60		rts				rts
.2e96					NotImplemented:
.2e96	4c 7a 2a	jmp $2a7a		jmp	ErrorV_unimplemented
.0630					ERRLine:
>0630							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2e99					WarmStart:
.2e99	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2e9b	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2e9e	a9 6b		lda #$6b			lda 	#"k"
.2ea0	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ea3					WarmStartNewLine:
.2ea3	a9 0d		lda #$0d			lda 	#13
.2ea5	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ea8					WarmStartNoPrompt:
.2ea8	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2eaa	9a		txs				txs
.2eab	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2eae	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2eaf	d0 01		bne $2eb2			bne 	_WSSkip
.2eb1	c8		iny				iny
.2eb2					_WSSkip:
.2eb2	86 28		stx $28				stx 	zTemp2 						; save address
.2eb4	84 29		sty $29				sty 	zTemp2+1
.2eb6	b2 28		lda ($28)			lda 	(zTemp2)
.2eb8	f0 ee		beq $2ea8			beq 	WarmStartNoPrompt 			; ignore empty line.
.2eba	a2 ec		ldx #$ec			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2ebc	a0 2e		ldy #$2e			ldy 	#TOKGetCharacter >> 8
.2ebe	38		sec				sec
.2ebf	20 79 24	jsr $2479			jsr 	TOKTokenise
.2ec2	b0 25		bcs $2ee9			bcs 	_WSSyntax
.2ec4	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2ec7	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2eca	d0 0b		bne $2ed7			bne 	_WSLineEdit
.2ecc	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2ece	85 18		sta $18				sta 	codePtr
.2ed0	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2ed2	85 19		sta $19				sta 	codePtr+1
.2ed4	4c 0f 18	jmp $180f			jmp 	RUNNewLine
.2ed7					_WSLineEdit:
.2ed7	20 54 23	jsr $2354			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2eda	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2edd	c9 04		cmp #$04			cmp 	#4
.2edf	f0 03		beq $2ee4			beq 	_WSNoInsert
.2ee1	20 9e 23	jsr $239e			jsr 	PGMInsertLine				; if not, maybe insert
.2ee4					_WSNoInsert:
.2ee4	20 30 13	jsr $1330			jsr 	ClearCode 					; clear variables etc.
.2ee7	80 bf		bra $2ea8			bra 	WarmStartNoPrompt
.2ee9					_WSSyntax:
.2ee9	4c 38 2a	jmp $2a38		jmp	ErrorV_syntax
.2eec					TOKGetCharacter:
.2eec	b2 28		lda ($28)			lda 	(zTemp2)
.2eee	90 06		bcc $2ef6			bcc 	_GSNoIncrement
.2ef0	e6 28		inc $28				inc 	zTemp2
.2ef2	d0 02		bne $2ef6			bne 	_GSNoIncrement
.2ef4	e6 29		inc $29				inc 	zTemp2+1
.2ef6					_GSNoIncrement:
.2ef6	c9 00		cmp #$00			cmp 	#0
.2ef8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2ef9					VARArrayLookup:
.2ef9	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2efb	86 25		stx $25				stx 	zTemp0+1
.2efd	b2 24		lda ($24)			lda 	(zTemp0)
.2eff	48		pha				pha
.2f00	5a		phy				phy
.2f01	a0 01		ldy #$01			ldy 	#1
.2f03	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f05	7a		ply				ply
.2f06	48		pha				pha
.2f07	20 55 1a	jsr $1a55			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2f0a	68		pla				pla 								; array address to zTemp0
.2f0b	85 25		sta $25				sta 	zTemp0+1
.2f0d	68		pla				pla
.2f0e	85 24		sta $24				sta 	zTemp0
.2f10	5a		phy				phy 								; save codePtr position.
.2f11	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2f13	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f15	48		pha				pha 								; save bit 15 on stack.
.2f16	29 7f		and #$7f			and 	#$7F
.2f18	85 26		sta $26				sta 	zTemp1
.2f1a	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2f1c	d2 24		cmp ($24)			cmp 	(zTemp0)
.2f1e	a5 09		lda $09				lda 	IFR0+IM1
.2f20	e5 26		sbc $26				sbc 	zTemp1
.2f22	b0 3a		bcs $2f5e			bcs 	_VALIndex
.2f24	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2f26	c9 40		cmp #$40			cmp 	#$40
.2f28	b0 34		bcs $2f5e			bcs 	_VALIndex
.2f2a	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2f2c	26 09		rol $09				rol 	IFR0+IM1
.2f2e	fa		plx				plx 								; get msb of size -> X
.2f2f	30 04		bmi $2f35			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2f31	06 08		asl $08				asl 	IFR0+IM0
.2f33	26 09		rol $09				rol 	IFR0+IM1
.2f35					_VARNotX4:
.2f35	18		clc				clc 								; add the two for the size bytes
.2f36	a5 08		lda $08				lda 	IFR0+IM0
.2f38	69 02		adc #$02			adc 	#2
.2f3a	85 08		sta $08				sta 	IFR0+IM0
.2f3c	90 02		bcc $2f40			bcc 	_VARNoCarry1
.2f3e	e6 09		inc $09				inc 	IFR0+IM1
.2f40					_VARNoCarry1:
.2f40	18		clc				clc 								; calculate the element address and push to stack.
.2f41	a5 08		lda $08				lda 	IFR0+IM0
.2f43	65 24		adc $24				adc 	zTemp0
.2f45	48		pha				pha
.2f46	a5 09		lda $09				lda 	IFR0+IM1
.2f48	65 25		adc $25				adc 	zTemp0+1
.2f4a	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2f4c	30 04		bmi $2f52			bmi 	_VARHasSubLevel
.2f4e	aa		tax				tax 								; address in XA
.2f4f	68		pla				pla
.2f50	7a		ply				ply 								; restore Y and exit
.2f51	60		rts				rts
.2f52					_VARHasSubLevel:
.2f52	aa		tax				tax 								; get link address in XA
.2f53	68		pla				pla
.2f54	7a		ply				ply 								; restore code position.
.2f55	48		pha				pha
.2f56	20 2b 2c	jsr $2c2b			jsr 	ERRCheckComma 				; comma required.
.2f59	68		pla				pla
.2f5a	20 f9 2e	jsr $2ef9			jsr 	VARArrayLookup 				; call it recursively
.2f5d	60		rts				rts
.2f5e					_VALIndex:
.2f5e	4c 14 2b	jmp $2b14		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2f61					VARCreate:
.2f61	5a		phy				phy
.2f62	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2f64	a2 00		ldx #$00			ldx 	#0
.2f66	20 4d 13	jsr $134d			jsr 	AllocateMemory
.2f69	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2f6b	86 27		stx $27				stx 	zTemp1+1
.2f6d	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2f6f	ad 34 06	lda $0634			lda 	VARHash
.2f72	91 26		sta ($26),y			sta 	(zTemp1),y
.2f74	c8		iny				iny 								; put address of name into +3,+4
.2f75	ad 32 06	lda $0632			lda 	VARNameAddress
.2f78	91 26		sta ($26),y			sta 	(zTemp1),y
.2f7a	c8		iny				iny
.2f7b	ad 33 06	lda $0633			lda 	VARNameAddress+1
.2f7e	91 26		sta ($26),y			sta 	(zTemp1),y
.2f80	ad 35 06	lda $0635			lda 	VARType
.2f83	29 01		and #$01			and 	#1
.2f85	f0 06		beq $2f8d			beq 	_CVNotString
.2f87	a0 08		ldy #$08			ldy 	#5+3
.2f89	a9 80		lda #$80			lda 	#$80
.2f8b	91 26		sta ($26),y			sta 	(zTemp1),y
.2f8d					_CVNotString:
.2f8d	ad 56 06	lda $0656			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2f90	85 24		sta $24				sta 	zTemp0
.2f92	ad 57 06	lda $0657			lda 	VARHashEntry+1
.2f95	85 25		sta $25				sta 	zTemp0+1
.2f97	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2f99	b2 24		lda ($24)			lda 	(zTemp0)
.2f9b	92 26		sta ($26)			sta 	(zTemp1)
.2f9d	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f9f	91 26		sta ($26),y			sta 	(zTemp1),y
.2fa1	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2fa3	92 24		sta ($24)			sta 	(zTemp0)
.2fa5	a5 27		lda $27				lda 	zTemp1+1
.2fa7	91 24		sta ($24),y			sta 	(zTemp0),y
.2fa9	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2fab	a6 27		ldx $27				ldx 	zTemp1+1
.2fad	18		clc				clc 								; add 5 to point to the data.
.2fae	69 05		adc #$05			adc 	#5
.2fb0	90 01		bcc $2fb3			bcc 	_VCNoCarry
.2fb2	e8		inx				inx
.2fb3					_VCNoCarry:
.2fb3	7a		ply				ply
.2fb4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2fb5					VARFind:
.2fb5	5a		phy				phy
.2fb6	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2fb8	b1 24		lda ($24),y			lda 	(zTemp0),y
.2fba	85 27		sta $27				sta 	zTemp1+1
.2fbc	f0 1c		beq $2fda			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2fbe	b2 24		lda ($24)			lda 	(zTemp0)
.2fc0	85 26		sta $26				sta 	zTemp1
.2fc2					_VFLoop:
.2fc2	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2fc4	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fc6	cd 34 06	cmp $0634			cmp 	VARHash
.2fc9	f0 12		beq $2fdd			beq 	_VFHashesMatch 				; if so, check the name.
.2fcb					_VFNext:
.2fcb	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2fcd	aa		tax				tax
.2fce	a0 01		ldy #$01			ldy 	#1
.2fd0	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fd2	85 27		sta $27				sta 	zTemp1+1
.2fd4	86 26		stx $26				stx 	zTemp1
.2fd6	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2fd8	d0 e8		bne $2fc2			bne 	_VFLoop
.2fda					_VFExitFail:
.2fda	7a		ply				ply
.2fdb	18		clc				clc
.2fdc	60		rts				rts
.2fdd					_VFHashesMatch:
.2fdd	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2fdf	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fe1	85 28		sta $28				sta 	zTemp2
.2fe3	c8		iny				iny
.2fe4	b1 26		lda ($26),y			lda 	(zTemp1),y
.2fe6	85 29		sta $29				sta 	zTemp2+1
.2fe8	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2fea					_VFNameCompLoop:
.2fea	c8		iny				iny 								; char at a time
.2feb	b9 36 06	lda $0636,y			lda 	VARBuffer,y
.2fee	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2ff0	d0 d9		bne $2fcb			bne 	_VFNext						; next entry if different.
.2ff2	c9 7c		cmp #$7c			cmp 	#$7C
.2ff4	90 f4		bcc $2fea			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2ff6	18		clc				clc
.2ff7	a5 26		lda $26				lda 	zTemp1
.2ff9	a6 27		ldx $27				ldx 	zTemp1+1
.2ffb	69 05		adc #$05			adc 	#5
.2ffd	90 01		bcc $3000			bcc 	_VFNNoCarry
.2fff	e8		inx				inx
.3000					_VFNNoCarry:
.3000	7a		ply				ply
.3001	38		sec				sec
.3002	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.3003					VARGetInfo:
.3003	98		tya				tya 								; calculate the address of the identifier start.
.3004	18		clc				clc
.3005	65 18		adc $18				adc 	codePtr
.3007	8d 32 06	sta $0632			sta 	VARNameAddress
.300a	a5 19		lda $19				lda 	codePtr+1
.300c	69 00		adc #$00			adc 	#0
.300e	8d 33 06	sta $0633			sta 	VARNameAddress+1
.3011	9c 34 06	stz $0634			stz 	VARHash
.3014	a2 00		ldx #$00			ldx 	#0
.3016					_VARCopyName:
.3016	18		clc				clc 								; update the sum hash.
.3017	ad 34 06	lda $0634			lda 	VARHash
.301a	71 18		adc ($18),y			adc 	(codePtr),y
.301c	8d 34 06	sta $0634			sta 	VARHash
.301f	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.3021	c8		iny				iny
.3022	9d 36 06	sta $0636,x			sta 	VARBuffer,x
.3025	e8		inx				inx
.3026	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.3028	90 ec		bcc $3016			bcc 	_VARCopyName
.302a	8d 35 06	sta $0635			sta 	VARType 					; save type byte
.302d	29 03		and #$03			and 	#3 							; type is 0-3
.302f	0a		asl a				asl 	a
.3030	0a		asl a				asl 	a
.3031	85 24		sta $24				sta 	zTemp0
.3033	ad 34 06	lda $0634			lda 	VARHash 					; force into range of hash entries per type.
.3036	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.3038	65 24		adc $24				adc 	zTemp0 						; index of hash table
.303a	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.303b	69 58		adc #$58			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.303d	85 24		sta $24				sta 	zTemp0
.303f	8d 56 06	sta $0656			sta 	VARHashEntry
.3042	a9 06		lda #$06			lda 	#VARHashTables >> 8
.3044	69 00		adc #$00			adc 	#0
.3046	85 25		sta $25				sta 	zTemp0+1
.3048	8d 57 06	sta $0657			sta 	VARHashEntry+1
.304b	60		rts				rts
.304c					VARClearHashTables:
.304c	a2 00		ldx #$00			ldx 	#0
.304e					_VCHRLoop:
.304e	a9 00		lda #$00			lda 	#0
.3050	9d 58 06	sta $0658,x			sta 	VARHashTables,x
.3053	e8		inx				inx
.3054	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.3056	d0 f6		bne $304e			bne 	_VCHRLoop
.3058	60		rts				rts
.0632					VARNameAddress:
>0632							.fill 	2
.0634					VARHash:
>0634							.fill 	1
.0635					VARType:
>0635							.fill 	1
.0636					VARBuffer:
>0636							.fill 	32
.0656					VARHashEntry:
>0656							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0658					VARHashTables:
>0658							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.3059					VARCheckSimple:
.3059	aa		tax				tax 								; save in X
.305a	b1 18		lda ($18),y			lda 	(codePtr),y
.305c	c9 7c		cmp #$7c			cmp 	#$7C
.305e	d0 15		bne $3075			bne 	_VCSComplex
.3060	c8		iny				iny 								; consume the second byte, the type.
.3061	8a		txa				txa  								; character (40-7F) x 4
.3062	0a		asl a				asl 	a
.3063	0a		asl a				asl  	a
.3064	18		clc				clc
.3065	69 78		adc #$78			adc 	#FastVariables & $FF
.3067	85 08		sta $08				sta 	IFR0+IM0
.3069	a9 06		lda #$06			lda 	#FastVariables >> 8
.306b	69 00		adc #$00			adc 	#0
.306d	85 09		sta $09				sta 	IFR0+IM1
.306f	64 0a		stz $0a				stz 	IFR0+IM2
.3071	64 0b		stz $0b				stz 	IFR0+IExp
.3073	38		sec				sec 								; it's a reference
.3074	60		rts				rts
.3075					_VCSComplex:
.3075	88		dey				dey	 								; extract information.
.3076	20 03 30	jsr $3003			jsr 	VARGetInfo
.3079	20 b5 2f	jsr $2fb5			jsr 	VARFind 					; search for variable
.307c	b0 0a		bcs $3088			bcs 	_VCSHaveVariable
.307e	ad 35 06	lda $0635			lda 	VARType 					; error if arrays, cannot autocreate
.3081	29 02		and #$02			and 	#2
.3083	d0 25		bne $30aa			bne 	_VCNoCreate
.3085	20 61 2f	jsr $2f61			jsr 	VARCreate 					; create variable
.3088					_VCSHaveVariable:
.3088	48		pha				pha 								; save LSB on the stack
.3089	ad 35 06	lda $0635			lda 	VARType 					; get var type, and shift bit 1 into carry
.308c	6a		ror a				ror 	a
.308d	6a		ror a				ror 	a
.308e	68		pla				pla 								; restore LSB
.308f	90 08		bcc $3099			bcc 	_VCSNotArray 				; skip if not an array
.3091	20 f9 2e	jsr $2ef9			jsr 	VARArrayLookup 				; look for subscripts.
.3094	48		pha				pha 								; check )
.3095	20 23 2c	jsr $2c23			jsr 	ERRCheckRParen
.3098	68		pla				pla
.3099					_VCSNotArray:
.3099	86 09		stx $09				stx 	IFR0+IM1 					; save address
.309b	85 08		sta $08				sta 	IFR0+IM0
.309d	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.309f	ad 35 06	lda $0635			lda 	VARType 					; number/string bit into carry
.30a2	6a		ror a				ror 	a
.30a3	a9 00		lda #$00			lda 	#0
.30a5	6a		ror a				ror 	a 							; now $00 or $80
.30a6	85 0b		sta $0b				sta 	IFR0+IExp
.30a8	38		sec				sec 								; it's a reference
.30a9	60		rts				rts
.30aa					_VCNoCreate:
.30aa	4c 3a 2b	jmp $2b3a		jmp	ErrorV_uninitialised
.0678					FastVariables:
>0678							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.30ad					IFInitialise:
.30ad	9c e8 06	stz $06e8			stz 	IFStackIndex 				; reset the internal stack.
.30b0	60		rts				rts
.30b1					IFloatSubtract:
.30b1	da		phx				phx
.30b2	a2 08		ldx #$08			ldx 	#IFR0
.30b4	20 cb 36	jsr $36cb			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.30b7	fa		plx				plx
.30b8					IFloatAdd:
.30b8	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.30ba	05 0b		ora $0b				ora 	IFR0+IExp
.30bc	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.30be	d0 4e		bne $310e			bne 	_IFloatAddDecimals 			; floating point version.
.30c0					_IFAddSubMantissa:
.30c0	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.30c2	45 0b		eor $0b				eor 	IFR0+IExp
.30c4	29 40		and #$40			and 	#IFSign
.30c6	d0 21		bne $30e9			bne 	_IFloatSubMantissa			; if so, we do a subtract
.30c8	18		clc				clc 								; do the actual addition
.30c9	a5 08		lda $08				lda 	IFR0+IM0
.30cb	75 00		adc $00,x			adc 		IM0,x
.30cd	85 08		sta $08				sta 	IFR0+IM0
.30cf	a5 09		lda $09				lda 	IFR0+IM1
.30d1	75 01		adc $01,x			adc 		IM1,x
.30d3	85 09		sta $09				sta 	IFR0+IM1
.30d5	a5 0a		lda $0a				lda 	IFR0+IM2
.30d7	75 02		adc $02,x			adc 		IM2,x
.30d9	85 0a		sta $0a				sta 	IFR0+IM2
.30db	10 29		bpl $3106			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.30dd	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.30df	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.30e2	20 19 37	jsr $3719			jsr 	IFloatIncExponent
.30e5	d0 1f		bne $3106			bne 	_IFloatAddExit
.30e7	38		sec				sec 								; overflowed numerically.
.30e8	60		rts				rts
.30e9					_IFloatSubMantissa:
.30e9	38		sec				sec 								; do the subtraction R0-Rx
.30ea	a5 08		lda $08				lda 	IFR0+IM0
.30ec	f5 00		sbc $00,x			sbc 		IM0,x
.30ee	85 08		sta $08				sta 	IFR0+IM0
.30f0	a5 09		lda $09				lda 	IFR0+IM1
.30f2	f5 01		sbc $01,x			sbc 		IM1,x
.30f4	85 09		sta $09				sta 	IFR0+IM1
.30f6	a5 0a		lda $0a				lda 	IFR0+IM2
.30f8	f5 02		sbc $02,x			sbc 		IM2,x
.30fa	85 0a		sta $0a				sta 	IFR0+IM2
.30fc	b0 08		bcs $3106			bcs 	_IFloatAddExit 				; no borrow so we are done.
.30fe	a2 08		ldx #$08			ldx 	#IFR0
.3100	20 d3 36	jsr $36d3			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.3103	20 cb 36	jsr $36cb			jsr 	IFloatNegate 				; negate the result using sign bit.
.3106					_IFloatAddExit:
.3106	18		clc				clc
.3107	60		rts				rts
.3108					_IFloatZeroAdd:
.3108	fa		plx				plx 								; return this value in R0
.3109	20 51 36	jsr $3651			jsr 	IFloatCopyFromRegister
.310c	18		clc				clc
.310d	60		rts				rts
.310e					_IFloatAddDecimals:
.310e	20 b9 36	jsr $36b9			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.3111	f0 f3		beq $3106			beq 	_IFloatAddExit
.3113	20 f7 36	jsr $36f7			jsr 	IFloatNormalise 			; normalise RX
.3116	da		phx				phx 								; normalise R0
.3117	a2 08		ldx #$08			ldx 	#IFR0
.3119	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.311c	f0 ea		beq $3108			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.311e	20 f7 36	jsr $36f7			jsr 	IFloatNormalise
.3121	fa		plx				plx
.3122	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.3124	29 3f		and #$3f			and 	#IFXMask
.3126	38		sec				sec
.3127	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.3129	85 20		sta $20				sta 	iTemp0
.312b	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.312d	29 3f		and #$3f			and 	#IFXMask
.312f	38		sec				sec
.3130	e9 20		sbc #$20			sbc 	#$20
.3132	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.3134	b0 02		bcs $3138			bcs 	_IFloatHaveLarger
.3136	a5 20		lda $20				lda 	iTemp0
.3138					_IFloatHaveLarger:
.3138	18		clc				clc 								; get the actual one back.
.3139	69 20		adc #$20			adc 	#$20 						; shift both to that.
.313b	20 48 31	jsr $3148			jsr 	_IFShiftXToA
.313e	da		phx				phx
.313f	a2 08		ldx #$08			ldx 	#IFR0
.3141	20 48 31	jsr $3148			jsr 	_IFShiftXToA
.3144	fa		plx				plx
.3145	4c c0 30	jmp $30c0			jmp 	_IFAddSubMantissa 			; do the adding bit.
.3148					_IFShiftXToA:
.3148	8d e0 06	sta $06e0			sta 	IFTarget
.314b	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; check adding zero ?
.314e	f0 11		beq $3161			beq 	_IFSXExit
.3150					_IFSXLoop:
.3150	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.3152	29 3f		and #$3f			and 	#IFXMask
.3154	cd e0 06	cmp $06e0			cmp 	IFTarget
.3157	f0 08		beq $3161			beq 	_IFSXExit
.3159	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.315c	20 19 37	jsr $3719			jsr 	IFloatIncExponent
.315f	80 ef		bra $3150			bra 	_IFSXLoop
.3161					_IFSXExit:
.3161	60		rts				rts
.06e0					IFTarget:
>06e0							.fill 	1
.3162					IFloatMultiply:
.3162	8e e0 06	stx $06e0			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.3165	20 1a 32	jsr $321a			jsr 	IFCalculateNewSign
.3168	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.316a	05 0b		ora $0b				ora 	IFR0+IExp
.316c	29 3f		and #$3f			and 	#IFXMask
.316e	15 01		ora $01,x			ora 	IM1,x
.3170	05 09		ora $09				ora 	IFR0+IM1
.3172	15 02		ora $02,x			ora 	IM2,x
.3174	05 0a		ora $0a				ora 	IFR0+IM2
.3176	d0 0a		bne $3182			bne 	_IFMStandard
.3178	20 9c 36	jsr $369c			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.317b	ad e2 06	lda $06e2			lda 	IFNewSign
.317e	85 0b		sta $0b				sta 	IFR0+IExp
.3180	18		clc				clc
.3181	60		rts				rts
.3182					_IFMStandard:
.3182	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.3184	20 11 32	jsr $3211			jsr 	IFMSignExtend
.3187	8d e1 06	sta $06e1			sta 	IFNewExponent
.318a	a5 0b		lda $0b				lda 	IFR0+IExp
.318c	20 11 32	jsr $3211			jsr 	IFMSignExtend
.318f	18		clc				clc
.3190	6d e1 06	adc $06e1			adc 	IFNewExponent
.3193	8d e1 06	sta $06e1			sta 	IFNewExponent
.3196	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.3198	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister
.319b	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.319d	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.31a0					_IFMLoop:
.31a0	a2 14		ldx #$14			ldx 	#IFRTemp
.31a2	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.31a5	f0 3a		beq $31e1			beq 	_IFMExit
.31a7	ae e0 06	ldx $06e0			ldx 	IFTarget 					; look at adder MSB
.31aa	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.31ac	10 03		bpl $31b1			bpl	 	_IFMTargetOkay
.31ae	20 02 32	jsr $3202			jsr 	_IFMShiftAll
.31b1					_IFMTargetOkay:
.31b1	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.31b3	29 01		and #$01			and 	#1
.31b5	f0 16		beq $31cd			beq 	_IFMNoAdd
.31b7	ae e0 06	ldx $06e0			ldx 	IFTarget 					; add adder
.31ba	18		clc				clc
.31bb	a5 08		lda $08				lda 	IFR0+IM0
.31bd	75 00		adc $00,x			adc 		IM0,x
.31bf	85 08		sta $08				sta 	IFR0+IM0
.31c1	a5 09		lda $09				lda 	IFR0+IM1
.31c3	75 01		adc $01,x			adc 		IM1,x
.31c5	85 09		sta $09				sta 	IFR0+IM1
.31c7	a5 0a		lda $0a				lda 	IFR0+IM2
.31c9	75 02		adc $02,x			adc 		IM2,x
.31cb	85 0a		sta $0a				sta 	IFR0+IM2
.31cd					_IFMNoAdd:
.31cd	a5 0a		lda $0a				lda 	IFR0+IM2
.31cf	10 03		bpl $31d4			bpl 	_IFMResultOkay
.31d1	20 02 32	jsr $3202			jsr 	_IFMShiftAll
.31d4					_IFMResultOkay:
.31d4	a2 14		ldx #$14			ldx 	#IFRTemp
.31d6	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.31d9	ae e0 06	ldx $06e0			ldx 	IFTarget
.31dc	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.31df	80 bf		bra $31a0			bra 	_IFMLoop
.31e1					_IFMExit:
.31e1	ad e1 06	lda $06e1			lda 	IFNewExponent 				; validate new exponent.
.31e4	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.31e6	90 0f		bcc $31f7			bcc 	_IFMOkay
.31e8	c9 e0		cmp #$e0			cmp 	#$E0
.31ea	b0 0b		bcs $31f7			bcs 	_IFMOkay
.31ec	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.31ee	f0 10		beq $3200			beq 	_IFMError
.31f0	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.31f2	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.31f5	18		clc				clc
.31f6	60		rts				rts
.31f7					_IFMOkay:
.31f7	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.31f9	0d e2 06	ora $06e2			ora 	IFNewSign
.31fc	85 0b		sta $0b				sta 	IFR0+IExp
.31fe	18		clc				clc
.31ff	60		rts				rts
.3200					_IFMError:
.3200	38		sec				sec
.3201	60		rts				rts
.3202					_IFMShiftAll:
.3202	a2 08		ldx #$08			ldx 	#IFR0
.3204	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.3207	ae e0 06	ldx $06e0			ldx 	IFTarget
.320a	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.320d	ee e1 06	inc $06e1			inc 	IFNewExponent
.3210	60		rts				rts
.3211					IFMSignExtend:
.3211	29 3f		and #$3f			and 	#IFXMask
.3213	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.3215	90 02		bcc $3219			bcc 	_IFMNoSXX
.3217	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.3219					_IFMNoSXX:
.3219	60		rts				rts
.321a					IFCalculateNewSign:
.321a	b5 03		lda $03,x			lda 	IExp,x
.321c	45 0b		eor $0b				eor 	IFR0+IExp
.321e	29 40		and #$40			and 	#IFSign
.3220	8d e2 06	sta $06e2			sta 	IFNewSign
.3223	60		rts				rts
.06e1					IFNewExponent:
>06e1							.fill 	1
.06e2					IFNewSign:
>06e2							.fill 	1
.3224					IFloatDivideInteger:
.3224	20 3d 32	jsr $323d			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.3227	b0 06		bcs $322f			bcs 	_IFDIExit
.3229	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.322b	20 51 36	jsr $3651			jsr 	IFloatCopyFromRegister
.322e	18		clc				clc
.322f					_IFDIExit:
.322f	60		rts				rts
.3230					IFloatModulusInteger:
.3230	20 3d 32	jsr $323d			jsr 	IFloatDivideIntegerCommon
.3233	b0 07		bcs $323c			bcs 	_IFMIExit
.3235	ae e0 06	ldx $06e0			ldx 	IFTarget
.3238	20 51 36	jsr $3651			jsr 	IFloatCopyFromRegister
.323b	18		clc				clc
.323c					_IFMIExit:
.323c	60		rts				rts
.323d					IFloatDivideIntegerCommon:
.323d	8e e0 06	stx $06e0			stx 	IFTarget  					; this is s1, s0 = R0
.3240	20 1a 32	jsr $321a			jsr 	IFCalculateNewSign 			; calculate sign of result
.3243	20 6b 32	jsr $326b			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.3246	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.3248	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.324b	f0 1c		beq $3269			beq 	_IFDIDivZero
.324d	ae e0 06	ldx $06e0			ldx 	IFTarget 					; zero Rx (S1)
.3250	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.3253	5a		phy				phy
.3254	a0 18		ldy #$18			ldy 	#24
.3256					_IFDILoop:
.3256	20 7c 32	jsr $327c			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3259	20 88 32	jsr $3288			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.325c	88		dey				dey
.325d	d0 f7		bne $3256			bne 	_IFDILoop 					; do it 24 times
.325f	7a		ply				ply
.3260	ad e2 06	lda $06e2			lda 	IFNewSign 					; set sign of result.
.3263	29 40		and #$40			and 	#IFSign
.3265	85 17		sta $17				sta 	IFRTemp+IExp
.3267	18		clc				clc 								; is okay.
.3268	60		rts				rts
.3269					_IFDIDivZero:
.3269	38		sec				sec
.326a	60		rts				rts
.326b					IFDCopyRXToRTemp:
.326b	b5 00		lda $00,x			lda 	IM0,x
.326d	85 14		sta $14				sta 	IFRTemp+IM0
.326f	b5 01		lda $01,x			lda 	IM1,x
.3271	85 15		sta $15				sta 	IFRTemp+IM1
.3273	b5 02		lda $02,x			lda 	IM2,x
.3275	85 16		sta $16				sta 	IFRTemp+IM2
.3277	b5 03		lda $03,x			lda 	IExp,x
.3279	85 17		sta $17				sta 	IFRTemp+IExp
.327b	60		rts				rts
.327c					IFDShiftSTempS1Left:
.327c	a2 14		ldx #$14			ldx 	#IFRTemp
.327e	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft
.3281	ae e0 06	ldx $06e0			ldx 	IFTarget
.3284	20 e8 36	jsr $36e8			jsr 	IFloatRotateLeft
.3287	60		rts				rts
.3288					IFDTrySubtract:
.3288	ae e0 06	ldx $06e0			ldx 	IFTarget 					; s1 = Rx
.328b	38		sec				sec 								; subtract, saving the results on the stack.
.328c	b5 00		lda $00,x			lda 	IM0,x
.328e	e5 08		sbc $08				sbc 	IFR0+IM0
.3290	48		pha				pha
.3291	b5 01		lda $01,x			lda 	IM1,x
.3293	e5 09		sbc $09				sbc 	IFR0+IM1
.3295	48		pha				pha
.3296	b5 02		lda $02,x			lda 	IM2,x
.3298	e5 0a		sbc $0a				sbc 	IFR0+IM2
.329a	b0 03		bcs $329f			bcs 	_IFDCanSubtract
.329c	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.329d	68		pla				pla
.329e	60		rts				rts
.329f					_IFDCanSubtract:
.329f	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.32a1	68		pla				pla
.32a2	95 01		sta $01,x			sta 	IM1,x
.32a4	68		pla				pla
.32a5	95 00		sta $00,x			sta 	IM0,x
.32a7	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.32a9	d0 06		bne $32b1			bne 	_IFDCSExit
.32ab	e6 15		inc $15				inc 	IFRTemp+IM1
.32ad	d0 02		bne $32b1			bne 	_IFDCSExit
.32af	e6 16		inc $16				inc 	IFRTemp+IM2
.32b1					_IFDCSExit:
.32b1	60		rts				rts
.32b2					IFloatBitwiseAnd:
.32b2	5a		phy				phy
.32b3	20 f7 32	jsr $32f7			jsr 	IFPreProcessBitwise 		; set up everything.
.32b6	d0 0f		bne $32c7			bne 	_IFBAExit
.32b8					_IFBALoop:
.32b8	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.32bb	35 00		and $00,x			and 	IM0,x
.32bd	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32c0	e8		inx				inx
.32c1	c8		iny				iny
.32c2	c0 03		cpy #$03			cpy 	#3
.32c4	d0 f2		bne $32b8			bne 	_IFBALoop
.32c6	18		clc				clc
.32c7					_IFBAExit:
.32c7	7a		ply				ply
.32c8	60		rts				rts
.32c9					IFloatBitwiseOr:
.32c9	5a		phy				phy
.32ca	20 f7 32	jsr $32f7			jsr 	IFPreProcessBitwise 		; set up everything.
.32cd	d0 0f		bne $32de			bne 	_IFBAExit
.32cf					_IFBALoop:
.32cf	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.32d2	15 00		ora $00,x			ora 	IM0,x
.32d4	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32d7	e8		inx				inx
.32d8	c8		iny				iny
.32d9	c0 03		cpy #$03			cpy 	#3
.32db	d0 f2		bne $32cf			bne 	_IFBALoop
.32dd	18		clc				clc
.32de					_IFBAExit:
.32de	7a		ply				ply
.32df	60		rts				rts
.32e0					IFloatBitwiseXor:
.32e0	5a		phy				phy
.32e1	20 f7 32	jsr $32f7			jsr 	IFPreProcessBitwise 		; set up everything.
.32e4	d0 0f		bne $32f5			bne 	_IFBAExit
.32e6					_IFBALoop:
.32e6	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.32e9	55 00		eor $00,x			eor 	IM0,x
.32eb	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32ee	e8		inx				inx
.32ef	c8		iny				iny
.32f0	c0 03		cpy #$03			cpy 	#3
.32f2	d0 f2		bne $32e6			bne 	_IFBALoop
.32f4	18		clc				clc
.32f5					_IFBAExit:
.32f5	7a		ply				ply
.32f6	60		rts				rts
.32f7					IFPreProcessBitwise:
.32f7	a0 00		ldy #$00			ldy 	#0 							; set index.
.32f9	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.32fb	15 03		ora $03,x			ora 	IExp,x
.32fd	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.32ff	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3301	38		sec				sec 								; carry set just in cases.
.3302	60		rts				rts
.3303					IFloatAbsoluteR0:
.3303	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3305	29 bf		and #$bf			and 	#IFSign ^ 255
.3307	85 0b		sta $0b				sta 	IFR0+IExp
.3309	18		clc				clc
.330a	60		rts				rts
.330b					IFloatSquareRootR0:
.330b	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.330d	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.3310	f0 2e		beq $3340			beq 	_IFSRZero
.3312	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.3314	29 40		and #$40			and 	#IFSign
.3316	d0 2f		bne $3347			bne 	_IFSRFail
.3318	20 f7 36	jsr $36f7			jsr 	IFloatNormalise 			; it will work better !
.331b	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.331d	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister
.3320	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.3322	20 11 32	jsr $3211			jsr 	IFMSignExtend 				; sign extended version of the exponent
.3325	18		clc				clc
.3326	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3328	85 0b		sta $0b				sta 	IFR0+IExp
.332a	4a		lsr a				lsr 	a 							; which we can halve.
.332b	38		sec				sec 								; convert back
.332c	e9 17		sbc #$17			sbc 	#23
.332e	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.3330	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.3332	20 49 33	jsr $3349			jsr 	_IFSRNewton
.3335	20 49 33	jsr $3349			jsr 	_IFSRNewton
.3338	20 49 33	jsr $3349			jsr 	_IFSRNewton
.333b	20 49 33	jsr $3349			jsr 	_IFSRNewton
.333e	18		clc				clc
.333f	60		rts				rts
.3340					_IFSRZero:
.3340	a2 08		ldx #$08			ldx 	#IFR0
.3342	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.3345	18		clc				clc
.3346	60		rts				rts
.3347					_IFSRFail:
.3347	38		sec				sec
.3348	60		rts				rts
.3349					_IFSRNewton:
.3349	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.334b	20 0f 36	jsr $360f			jsr 	IFloatPushRx
.334e	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.3350	20 0f 36	jsr $360f			jsr 	IFloatPushRx
.3353	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.3355	20 e4 33	jsr $33e4			jsr 	IFloatDivideFloat
.3358	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.335a	20 30 36	jsr $3630			jsr 	IFloatPullRx
.335d	20 b8 30	jsr $30b8			jsr 	IFloatAdd 					; now guess + original/guess
.3360	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.3362	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.3365	a2 0c		ldx #$0c			ldx 	#IFR1
.3367	20 30 36	jsr $3630			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.336a	60		rts				rts
.336b					IFloatFractionalR0:
.336b	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.336d	29 3f		and #$3f			and 	#IFXMask
.336f	f0 17		beq $3388			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.3371	20 03 33	jsr $3303			jsr 	IFloatAbsoluteR0 			; absolute value R0
.3374	a2 08		ldx #$08			ldx 	#IFR0
.3376	20 f7 36	jsr $36f7			jsr 	IFloatNormalise 			; normalise R0
.3379	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.337b	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister
.337e	20 c1 33	jsr $33c1			jsr 	IFloatIntegerR0 			; take integer part of R0
.3381	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.3383	20 b1 30	jsr $30b1			jsr 	IFloatSubtract
.3386	80 05		bra $338d			bra 	_FIPExit
.3388					_FIPZero:
.3388	a2 08		ldx #$08			ldx 	#IFR0
.338a	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.338d					_FIPExit:
.338d	18		clc				clc
.338e	60		rts				rts
.338f					IFloatCompare:
.338f	20 b1 30	jsr $30b1			jsr 	IFloatSubtract 				; subtract R0 from RX.
.3392	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.3394	05 0b		ora $0b				ora 	IFR0+IExp
.3396	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.3398	29 3f		and #$3f			and 	#IFXMask
.339a	d0 19		bne $33b5			bne 	_IFCNonInteger
.339c	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; check if zero
.339f	f0 0f		beq $33b0			beq 	_IFCZero
.33a1					_IFCReturnSign:
.33a1	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.33a3	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.33a5	48		pha				pha
.33a6	a9 01		lda #$01			lda 	#1
.33a8	20 c2 36	jsr $36c2			jsr 	IFloatSetByte 				; return to +1
.33ab	68		pla				pla 								; sign bit back
.33ac	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.33ae	18		clc				clc
.33af	60		rts				rts
.33b0					_IFCZero:
.33b0	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.33b3	18		clc				clc
.33b4	60		rts				rts
.33b5					_IFCNonInteger:
.33b5	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.33b7	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.33b9	05 09		ora $09				ora 	IFR0+IM1
.33bb	05 0a		ora $0a				ora 	IFR0+IM2
.33bd	f0 f1		beq $33b0			beq 	_IFCZero 					; near enough !
.33bf	80 e0		bra $33a1			bra 	_IFCReturnSign 				; return the sign of the difference.
.33c1					IFloatIntegerR0:
.33c1	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.33c3	29 3f		and #$3f			and 	#IFXMask
.33c5	f0 1b		beq $33e2			beq 	_FIPExit 					; if so do nothing
.33c7	a2 08		ldx #$08			ldx 	#IFR0
.33c9	20 f7 36	jsr $36f7			jsr 	IFloatNormalise 			; normalise
.33cc	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; is it zero ?
.33cf	f0 0e		beq $33df			beq 	_FIPZero 					; if so return zero.
.33d1					_FIPShift:
.33d1	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.33d3	29 20		and #$20			and 	#$20 						; still -ve
.33d5	f0 0b		beq $33e2			beq 	_FIPExit
.33d7	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight 			; shift mantissa right
.33da	20 19 37	jsr $3719			jsr 	IFloatIncExponent 			; bump exponent
.33dd	80 f2		bra $33d1			bra 	_FIPShift
.33df					_FIPZero:
.33df	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.33e2					_FIPExit:
.33e2	18		clc				clc
.33e3	60		rts				rts
.33e4					IFloatDivideFloat:
.33e4	8e e0 06	stx $06e0			stx 	IFTarget  					; this is s1, s0 = R0
.33e7	20 1a 32	jsr $321a			jsr 	IFCalculateNewSign 			; calculate sign of result
.33ea	20 f7 36	jsr $36f7			jsr 	IFloatNormalise 			; normalise RX
.33ed	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.33ef	20 f7 36	jsr $36f7			jsr 	IFloatNormalise
.33f2	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.33f5	f0 56		beq $344d			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.33f7	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.33f9	20 11 32	jsr $3211			jsr 	IFMSignExtend
.33fc	8d e1 06	sta $06e1			sta 	IFNewExponent
.33ff	ae e0 06	ldx $06e0			ldx 	IFTarget 					; calculate s1.exponent
.3402	b5 03		lda $03,x			lda 	IExp,x
.3404	20 11 32	jsr $3211			jsr 	IFMSignExtend
.3407	38		sec				sec
.3408	ed e1 06	sbc $06e1			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.340b	38		sec				sec
.340c	e9 17		sbc #$17			sbc 	#23
.340e	8d e1 06	sta $06e1			sta 	IFNewExponent
.3411	20 4f 34	jsr $344f			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3414	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.3416	10 08		bpl $3420			bpl 	_IFDFNoShiftResult
.3418	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.341a	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.341d	ee e1 06	inc $06e1			inc 	IFNewExponent
.3420					_IFDFNoShiftResult:
.3420	ad e1 06	lda $06e1			lda 	IFNewExponent 				; underflow/overflow check.
.3423	30 06		bmi $342b			bmi 	_IFDFCheckUnderflow
.3425	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.3427	b0 24		bcs $344d			bcs 	_IFDFDivZero
.3429	80 11		bra $343c			bra		_IFDFExit
.342b					_IFDFCheckUnderflow:
.342b	ad e1 06	lda $06e1			lda 	IFNewExponent 				; shift into a legal exponent.
.342e	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.3430	b0 0a		bcs $343c			bcs 	_IFDFExit
.3432	ee e1 06	inc $06e1			inc 	IFNewExponent
.3435	a2 14		ldx #$14			ldx 	#IFRTemp
.3437	20 ef 36	jsr $36ef			jsr 	IFloatShiftRight
.343a	80 ef		bra $342b			bra 	_IFDFCheckUnderflow
.343c					_IFDFExit:
.343c	ad e1 06	lda $06e1			lda 	IFNewExponent 				; combine exponent and sign.
.343f	29 3f		and #$3f			and 	#IFXMask
.3441	0d e2 06	ora $06e2			ora 	IFNewSign
.3444	85 17		sta $17				sta 	IFRTemp+IExp
.3446	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.3448	20 51 36	jsr $3651			jsr 	IFloatCopyFromRegister
.344b	18		clc				clc
.344c	60		rts				rts
.344d					_IFDFDivZero:
.344d	38		sec				sec
.344e	60		rts				rts
.344f					IFloatDivideSupport:
.344f	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.3451	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.3454	5a		phy				phy 								; main division loop x 23
.3455	a0 17		ldy #$17			ldy 	#23
.3457					_IFDSLoop:
.3457	20 88 32	jsr $3288			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.345a	20 7c 32	jsr $327c			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.345d	88		dey				dey
.345e	d0 f7		bne $3457			bne 	_IFDSLoop 					; do it 24 times
.3460	7a		ply				ply
.3461	60		rts				rts
.3462					IFloatIntegerToStringR0:
.3462	8d e3 06	sta $06e3			sta 	IFBase 						; save base to use.
.3465	20 41 37	jsr $3741			jsr 	IFloatBufferReset			; empty buffer
.3468	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.346a	29 3f		and #$3f			and 	#IFXMask
.346c	d0 1d		bne $348b			bne 	_IFIFail
.346e	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.3470	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.3473	f0 0e		beq $3483			beq 	_IFINotNegative
.3475	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3477	29 40		and #$40			and 	#IFSign
.3479	f0 08		beq $3483			beq 	_IFINotNegative
.347b	a9 2d		lda #$2d			lda 	#"-"						; output -
.347d	20 50 37	jsr $3750			jsr 	IFloatBufferWrite
.3480	20 cb 36	jsr $36cb			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.3483					_IFINotNegative:
.3483	20 8d 34	jsr $348d			jsr 	_IFIRecursiveConvert 		; start converting
.3486	20 48 37	jsr $3748			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.3489	18		clc				clc
.348a	60		rts				rts
.348b					_IFIFail:
.348b	38		sec				sec
.348c	60		rts				rts
.348d					_IFIRecursiveConvert:
.348d	a2 0c		ldx #$0c			ldx 	#IFR1
.348f	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister 		; R0->R1
.3492	a2 08		ldx #$08			ldx 	#IFR0
.3494	ad e3 06	lda $06e3			lda 	IFBase 						; Base -> R0
.3497	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.349a	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.349c	20 24 32	jsr $3224			jsr 	IFloatDivideInteger
.349f	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.34a1	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero
.34a4	f0 09		beq $34af			beq 	_IFIOutDigit
.34a6	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.34a8	48		pha				pha
.34a9	20 8d 34	jsr $348d			jsr 	_IFIRecursiveConvert 		; convert the divide result
.34ac	68		pla				pla
.34ad	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.34af					_IFIOutDigit:
.34af	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.34b1	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.34b3	90 02		bcc $34b7			bcc 	_IFINotHex
.34b5	69 06		adc #$06			adc 	#6
.34b7					_IFINotHex:
.34b7	69 30		adc #$30			adc 	#48
.34b9	20 50 37	jsr $3750			jsr 	IFloatBufferWrite 			; write character to buffer.
.34bc	60		rts				rts
.06e3					IFBase:
>06e3							.fill 	1
.34bd					IFloatFloatToStringR0:
.34bd	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.34bf	20 0f 36	jsr $360f			jsr 	IFloatPushRx
.34c2	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister
.34c5	20 c1 33	jsr $33c1			jsr 	IFloatIntegerR0				; make R0 integer
.34c8	a9 0a		lda #$0a			lda 	#10 						; base 10.
.34ca	20 62 34	jsr $3462			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.34cd	9c e4 06	stz $06e4			stz 	IFloatDecimalCount 			; zero the decimal count.
.34d0	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.34d2	29 3f		and #$3f			and 	#IFXMask
.34d4	f0 44		beq $351a			beq 	_IFFSExit
.34d6					_IFloatFracLoop:
.34d6	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.34d8	20 51 36	jsr $3651			jsr 	IFloatCopyFromRegister
.34db	20 6b 33	jsr $336b			jsr 	IFloatFractionalR0
.34de	20 f7 36	jsr $36f7			jsr 	IFloatNormalise
.34e1	a2 10		ldx #$10			ldx 	#IFR2
.34e3	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister 		; copy to back R2
.34e6	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.34e8	a9 0a		lda #$0a			lda 	#10
.34ea	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.34ed	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.34ef	20 62 31	jsr $3162			jsr 	IFloatMultiply
.34f2	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.34f4	20 62 36	jsr $3662			jsr 	IFloatCopyToRegister
.34f7	20 c1 33	jsr $33c1			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.34fa	ad e4 06	lda $06e4			lda 	IFloatDecimalCount 			; done 3 dp, no more
.34fd	c9 03		cmp #$03			cmp 	#3
.34ff	f0 16		beq $3517			beq 	_IFFSExitStripZero
.3501	ad e4 06	lda $06e4			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3504	d0 05		bne $350b			bne 	_IFloatNotFirst
.3506	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3508	20 50 37	jsr $3750			jsr 	IFloatBufferWrite
.350b					_IFloatNotFirst:
.350b	ee e4 06	inc $06e4			inc 	IFloatDecimalCount
.350e	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.3510	09 30		ora #$30			ora 	#"0"						; ASCII
.3512	20 50 37	jsr $3750			jsr 	IFloatBufferWrite 			; write to the buffer.
.3515	80 bf		bra $34d6			bra 	_IFloatFracLoop
.3517					_IFFSExitStripZero:
.3517	20 5f 37	jsr $375f			jsr 	IFloatStripTrailingZeros
.351a					_IFFSExit:
.351a	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.351c	20 30 36	jsr $3630			jsr 	IFloatPullRx
.351f	20 48 37	jsr $3748			jsr 	IFloatGetBufferAddress
.3522	18		clc				clc
.3523	60		rts				rts
.06e4					IFloatDecimalCount:
>06e4							.fill 	1
.3524					IFloatStringToFloatR0:
.3524	8d e5 06	sta $06e5			sta 	IFCount 					; save length and positions out.
.3527	86 20		stx $20				stx 	iTemp0
.3529	84 21		sty $21				sty 	iTemp0+1
.352b	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.352d	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.3530	9c e6 06	stz $06e6			stz 	IFSignFlag 					; clear the sign flag
.3533	20 c0 35	jsr $35c0			jsr 	IFSTFGetNext 				; get first
.3536	f0 1b		beq $3553			beq 	_IFSTFFail 					; no character, fail.
.3538	90 10		bcc $354a			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.353a	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.353c	d0 15		bne $3553			bne 	_IFSTFFail
.353e	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.3540	8d e6 06	sta $06e6			sta 	IFSignFlag
.3543					_IFSTFLoop:
.3543	20 c0 35	jsr $35c0			jsr 	IFSTFGetNext 				; get next character
.3546	b0 0b		bcs $3553			bcs 	_IFSTFFail 					; bad character.
.3548	f0 11		beq $355b			beq 	_IFSTFExit 					; end of data
.354a					_IFSTFHaveChar:
.354a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.354c	f0 08		beq $3556			beq 	_IFSTFDecimal
.354e	20 e4 35	jsr $35e4			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.3551	80 f0		bra $3543			bra 	_IFSTFLoop 					; keep going until . or end.
.3553					_IFSTFFail:
.3553	38		sec				sec
.3554	80 0d		bra $3563			bra 	_IFSTFReturn
.3556					_IFSTFDecimal:
.3556	20 6b 35	jsr $356b			jsr 	IFSTFDecimal 				; call the decimal places code.
.3559	b0 08		bcs $3563			bcs 	_IFSTFReturn 				; error
.355b					_IFSTFExit:
.355b	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.355d	0d e6 06	ora $06e6			ora 	IFSignFlag
.3560	85 0b		sta $0b				sta 	IFR0+IExp
.3562	18		clc				clc
.3563					_IFSTFReturn:
.3563	60		rts				rts
.3564					IFloatAddDecimalToR0:
.3564	8d e5 06	sta $06e5			sta 	IFCount 					; save it out.
.3567	86 20		stx $20				stx 	iTemp0
.3569	84 21		sty $21				sty 	iTemp0+1
.356b					IFSTFDecimal:
.356b	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.356d	20 0f 36	jsr $360f			jsr 	IFloatPushRx
.3570	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.3572	20 c0 36	jsr $36c0			jsr 	IFloatSetZero
.3575	9c e7 06	stz $06e7			stz 	IFDecimalPlaces 			; zero DP.
.3578					_IFSTDLoop:
.3578	20 c0 35	jsr $35c0			jsr 	IFSTFGetNext 				; get next
.357b	b0 41		bcs $35be			bcs 	_IFSTFFail2 				; bad character.
.357d	f0 11		beq $3590			beq 	_IFSTFComplete 				; end of data, work out the result.
.357f	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.3581	f0 39		beq $35bc			beq 	_IFSTFExit2
.3583	20 e4 35	jsr $35e4			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3586	ee e7 06	inc $06e7			inc 	IFDecimalPlaces 			; count decimals
.3589	ad e7 06	lda $06e7			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.358c	c9 03		cmp #$03			cmp 	#3
.358e	90 e8		bcc $3578			bcc 	_IFSTDLoop
.3590					_IFSTFComplete:
.3590	ad e7 06	lda $06e7			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.3593	f0 27		beq $35bc			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3595	3a		dec a				dec 	a 							; table indexed from 1.
.3596	0a		asl a				asl 	a
.3597	0a		asl a				asl 	a
.3598	aa		tax				tax
.3599	bd fb 35	lda $35fb,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.359c	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.359e	bd fc 35	lda $35fc,x			lda 	TableTen+1,x
.35a1	85 0d		sta $0d				sta  	IFR1+IM1
.35a3	bd fd 35	lda $35fd,x			lda 	TableTen+2,x
.35a6	85 0e		sta $0e				sta  	IFR1+IM2
.35a8	bd fe 35	lda $35fe,x			lda 	TableTen+3,x
.35ab	85 0f		sta $0f				sta  	IFR1+IExp
.35ad	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.35af	20 62 31	jsr $3162			jsr 	IFloatMultiply
.35b2	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.35b4	20 30 36	jsr $3630			jsr 	IFloatPullRx
.35b7	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.35b9	20 b8 30	jsr $30b8			jsr 	IFloatAdd
.35bc					_IFSTFExit2:
.35bc	18		clc				clc
.35bd	60		rts				rts
.35be					_IFSTFFail2:
.35be	38		sec				sec
.35bf	60		rts				rts
.35c0					IFSTFGetNext:
.35c0	ad e5 06	lda $06e5			lda 	IFCount  					; if count is zero, return with Z set.
.35c3	f0 19		beq $35de			beq 	_IFSTFReturnOk
.35c5	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.35c7	e6 20		inc $20				inc 	iTemp0 						; point at next.
.35c9	d0 02		bne $35cd			bne 	_IFSTFGNNoCarry
.35cb	e6 21		inc $21				inc 	iTemp0+1
.35cd					_IFSTFGNNoCarry:
.35cd	ce e5 06	dec $06e5			dec 	IFCount 					; dec count.
.35d0	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.35d2	f0 08		beq $35dc			beq 	_IFSTFGOkay
.35d4	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.35d6	90 08		bcc $35e0			bcc 	_IFSTFGFail
.35d8	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.35da	b0 04		bcs $35e0			bcs 	_IFSTFGFail
.35dc					_IFSTFGOkay:
.35dc	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.35de					_IFSTFReturnOk:
.35de	18		clc				clc
.35df	60		rts				rts
.35e0					_IFSTFGFail:
.35e0	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.35e2	38		sec				sec
.35e3	60		rts				rts
.35e4					IFSTFAddR0:
.35e4	29 0f		and #$0f			and 	#15 						; to int value
.35e6	48		pha				pha 								; save it.
.35e7	a9 0a		lda #$0a			lda 	#10
.35e9	a2 0c		ldx #$0c			ldx 	#IFR1
.35eb	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.35ee	20 62 31	jsr $3162			jsr 	IFloatMultiply
.35f1	68		pla				pla
.35f2	a2 0c		ldx #$0c			ldx 	#IFR1
.35f4	20 c2 36	jsr $36c2			jsr 	IFloatSetByte
.35f7	20 b8 30	jsr $30b8			jsr 	IFloatAdd
.35fa	60		rts				rts
.06e5					IFCount:
>06e5							.fill 	1
.06e6					IFSignFlag:
>06e6							.fill 	1
.06e7					IFDecimalPlaces:
>06e7							.fill 	1
.35fb					TableTen:
>35fb	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>35ff	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3603	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3607	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>360b	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.360f					IFloatPushRx:
.360f	5a		phy				phy
.3610	ac e8 06	ldy $06e8			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3613	b5 00		lda $00,x			lda 	IM0,x
.3615	99 e9 06	sta $06e9,y			sta 	IFStack,y
.3618	b5 01		lda $01,x			lda 	IM1,x
.361a	99 ea 06	sta $06ea,y			sta 	IFStack+1,y
.361d	b5 02		lda $02,x			lda 	IM2,x
.361f	99 eb 06	sta $06eb,y			sta 	IFStack+2,y
.3622	b5 03		lda $03,x			lda 	IExp,x
.3624	99 ec 06	sta $06ec,y			sta 	IFStack+3,y
.3627	c8		iny				iny
.3628	c8		iny				iny
.3629	c8		iny				iny
.362a	c8		iny				iny
.362b	8c e8 06	sty $06e8			sty 	IFStackIndex 				; update SP
.362e	7a		ply				ply
.362f	60		rts				rts
.3630					IFloatPullRx:
.3630	5a		phy				phy
.3631	ac e8 06	ldy $06e8			ldy 	IFStackIndex	 			; decrement SP
.3634	88		dey				dey
.3635	88		dey				dey
.3636	88		dey				dey
.3637	88		dey				dey
.3638	b9 e9 06	lda $06e9,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.363b	95 00		sta $00,x			sta 	IM0,x
.363d	b9 ea 06	lda $06ea,y			lda 	IFStack+1,y
.3640	95 01		sta $01,x			sta 	IM1,x
.3642	b9 eb 06	lda $06eb,y			lda 	IFStack+2,y
.3645	95 02		sta $02,x			sta 	IM2,x
.3647	b9 ec 06	lda $06ec,y			lda 	IFStack+3,y
.364a	95 03		sta $03,x			sta 	IExp,x
.364c	8c e8 06	sty $06e8			sty 	IFStackIndex 				; update SP
.364f	7a		ply				ply
.3650	60		rts				rts
.06e8					IFStackIndex:
>06e8							.fill 	1
.06e9					IFStack:
>06e9							.fill 	16*4
.3651					IFloatCopyFromRegister:
.3651	b5 00		lda $00,x			lda 	0,x
.3653	85 08		sta $08				sta 	IFR0
.3655	b5 01		lda $01,x			lda 	1,x
.3657	85 09		sta $09				sta 	IFR0+1
.3659	b5 02		lda $02,x			lda 	2,x
.365b	85 0a		sta $0a				sta 	IFR0+2
.365d	b5 03		lda $03,x			lda 	3,x
.365f	85 0b		sta $0b				sta 	IFR0+3
.3661	60		rts				rts
.3662					IFloatCopyToRegister:
.3662	a5 08		lda $08				lda 	IFR0
.3664	95 00		sta $00,x			sta 	0,x
.3666	a5 09		lda $09				lda 	IFR0+1
.3668	95 01		sta $01,x			sta 	1,x
.366a	a5 0a		lda $0a				lda 	IFR0+2
.366c	95 02		sta $02,x			sta 	2,x
.366e	a5 0b		lda $0b				lda 	IFR0+3
.3670	95 03		sta $03,x			sta 	3,x
.3672	60		rts				rts
.3673					IFloatLoadInline:
.3673	68		pla				pla 								; pop address off to iTemp0
.3674	85 20		sta $20				sta 	iTemp0
.3676	68		pla				pla
.3677	85 21		sta $21				sta 	iTemp0+1
.3679	a0 01		ldy #$01			ldy 	#1
.367b	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.367d	95 00		sta $00,x			sta 	0,x
.367f	c8		iny				iny
.3680	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.3682	95 01		sta $01,x			sta 	1,x
.3684	c8		iny				iny
.3685	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3687	95 02		sta $02,x			sta 	2,x
.3689	c8		iny				iny
.368a	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.368c	95 03		sta $03,x			sta 	3,x
.368e	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.368f	a5 20		lda $20				lda 	iTemp0
.3691	69 05		adc #$05			adc 	#5
.3693	85 20		sta $20				sta 	iTemp0
.3695	90 02		bcc $3699			bcc 	_IFLINoCarry
.3697	e6 21		inc $21				inc 	iTemp0+1
.3699					_IFLINoCarry:
.3699	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.369c					IFloatMultiply8BitRx:
.369c	5a		phy		        phy
.369d	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.369f	a4 08		ldy $08		        ldy     IFR0+IM0
.36a1	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.36a2	85 08		sta $08		        sta     IFR0+IM0
.36a4	84 09		sty $09		        sty     IFR0+IM1
.36a6	a9 00		lda #$00	        lda     #0
.36a8	a0 08		ldy #$08	        ldy     #8
.36aa					_IFMLoop:
.36aa	90 03		bcc $36af	        bcc     _IFMNoAdd
.36ac	18		clc		        clc
.36ad	65 09		adc $09		        adc     IFR0+IM1
.36af					_IFMNoAdd:
.36af	6a		ror a		        ror     a
.36b0	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.36b2	88		dey		        dey
.36b3	d0 f5		bne $36aa	        bne     _IFMLoop
.36b5	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.36b7	7a		ply		        ply
.36b8	60		rts		        rts
.36b9					IFloatCheckZero:
.36b9	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.36bb	15 01		ora $01,x			ora 	IM1,x
.36bd	15 02		ora $02,x			ora 	IM2,x
.36bf	60		rts				rts
.36c0					IFloatSetZero:
.36c0	a9 00		lda #$00			lda 	#0
.36c2					IFloatSetByte:
.36c2	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.36c4	74 01		stz $01,x			stz 	IM1,x
.36c6	74 02		stz $02,x			stz 	IM2,x
.36c8	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.36ca	60		rts				rts
.36cb					IFloatNegate:
.36cb	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.36cd	49 40		eor #$40			eor 	#IFSign
.36cf	95 03		sta $03,x			sta 	IExp,x
.36d1	18		clc				clc
.36d2	60		rts				rts
.36d3					IFloatMantissaNegate:
.36d3	38		sec				sec 								; when you want a real 2's complement negative value.
.36d4	a9 00		lda #$00			lda 	#0
.36d6	f5 00		sbc $00,x			sbc 	IM0,x
.36d8	95 00		sta $00,x			sta 	IM0,x
.36da	a9 00		lda #$00			lda 	#0
.36dc	f5 01		sbc $01,x			sbc 	IM1,x
.36de	95 01		sta $01,x			sta 	IM1,x
.36e0	a9 00		lda #$00			lda 	#0
.36e2	f5 02		sbc $02,x			sbc 	IM2,x
.36e4	95 02		sta $02,x			sta 	IM2,x
.36e6	60		rts				rts
.36e7					IFloatShiftLeft:
.36e7	18		clc				clc
.36e8					IFloatRotateLeft:
.36e8	36 00		rol $00,x			rol 	IM0,x
.36ea	36 01		rol $01,x			rol 	IM1,x
.36ec	36 02		rol $02,x			rol 	IM2,x
.36ee	60		rts				rts
.36ef					IFloatShiftRight:
.36ef	18		clc				clc
.36f0					IFloatRotateRight:
.36f0	76 02		ror $02,x			ror 	IM2,x
.36f2	76 01		ror $01,x			ror 	IM1,x
.36f4	76 00		ror $00,x			ror 	IM0,x
.36f6	60		rts				rts
.36f7					IFloatNormalise:
.36f7	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; is it zero
.36fa	f0 18		beq $3714			beq 	_IFNExitZero 				; if so exit
.36fc					_IFNLoop:
.36fc	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.36fe	29 c0		and #$c0			and 	#$C0
.3700	c9 40		cmp #$40			cmp 	#$40
.3702	f0 13		beq $3717			beq 	_IFNExitOkay 				; if so , then we are done.
.3704	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3706	29 3f		and #$3f			and 	#$3F
.3708	c9 20		cmp #$20			cmp 	#$20
.370a	f0 0b		beq $3717			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.370c	20 2d 37	jsr $372d			jsr 	IFloatDecExponent
.370f	20 e7 36	jsr $36e7			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3712	80 e8		bra $36fc			bra 	_IFNLoop
.3714					_IFNExitZero:
.3714	20 c0 36	jsr $36c0			jsr 	IFloatSetZero 				; set the result to zero
.3717					_IFNExitOkay:
.3717	18		clc				clc  								; return with CC.
.3718	60		rts				rts
.3719					IFloatIncExponent:
.3719	b5 03		lda $03,x			lda 	IExp,x
.371b	48		pha				pha
.371c	29 c0		and #$c0			and 	#$C0
.371e	8d 29 07	sta $0729			sta 	IFXTemp
.3721	68		pla				pla
.3722	1a		inc a				inc 	a
.3723	29 3f		and #$3f			and 	#$3F
.3725	48		pha				pha
.3726	0d 29 07	ora $0729			ora 	IFXTemp
.3729	95 03		sta $03,x			sta 	IExp,x
.372b	68		pla				pla
.372c	60		rts				rts
.372d					IFloatDecExponent:
.372d	b5 03		lda $03,x			lda 	IExp,x
.372f	48		pha				pha
.3730	29 c0		and #$c0			and 	#$C0
.3732	8d 29 07	sta $0729			sta 	IFXTemp
.3735	68		pla				pla
.3736	3a		dec a				dec 	a
.3737	29 3f		and #$3f			and 	#$3F
.3739	48		pha				pha
.373a	0d 29 07	ora $0729			ora 	IFXTemp
.373d	95 03		sta $03,x			sta 	IExp,x
.373f	68		pla				pla
.3740	60		rts				rts
.0729					IFXTemp:
>0729							.fill 	1
.3741					IFloatBufferReset:
.3741	9c 2a 07	stz $072a			stz 	IFBufferCount
.3744	9c 2b 07	stz $072b			stz 	IFBuffer
.3747	60		rts				rts
.3748					IFloatGetBufferAddress:
.3748	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.374a	a2 2a		ldx #$2a			ldx 	#(IFBufferCount & $FF)
.374c	ad 2a 07	lda $072a			lda 	IFBufferCount
.374f	60		rts				rts
.3750					IFloatBufferWrite:
.3750	da		phx				phx
.3751	ae 2a 07	ldx $072a			ldx 	IFBufferCount
.3754	9d 2b 07	sta $072b,x			sta 	IFBuffer,x
.3757	9e 2c 07	stz $072c,x			stz 	IFBuffer+1,x
.375a	ee 2a 07	inc $072a			inc 	IFBufferCount
.375d	fa		plx				plx
.375e	60		rts				rts
.375f					IFloatStripTrailingZeros:
.375f	ae 2a 07	ldx $072a			ldx 	IFBufferCount
.3762	bd 2a 07	lda $072a,x			lda 	IFBuffer-1,x
.3765	c9 30		cmp #$30			cmp		#"0"
.3767	d0 0f		bne $3778			bne 	_IFSTExit
.3769	bd 29 07	lda $0729,x			lda 	IFBuffer-2,x
.376c	c9 2e		cmp #$2e			cmp 	#"."
.376e	f0 08		beq $3778			beq 	_IFSTExit
.3770	ce 2a 07	dec $072a			dec 	IFBufferCount
.3773	9e 2a 07	stz $072a,x			stz 	IFBuffer-1,x
.3776	80 e7		bra $375f			bra 	IFloatStripTrailingZeros
.3778					_IFSTExit:
.3778	60		rts				rts
.072a					IFBufferCount:
>072a							.fill 	1
.072b					IFBuffer:
>072b							.fill 	25
.3779					IFloatCheckRange:
.3779	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.377b	09 40		ora #$40			ora 	#IFSign
.377d	85 0b		sta $0b				sta 	IFR0+IExp
.377f	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.3781	20 b8 30	jsr $30b8			jsr 	IFloatAdd 					; add allowed to error.
.3784	a2 08		ldx #$08			ldx 	#IFR0
.3786	20 b9 36	jsr $36b9			jsr 	IFloatCheckZero 			; error if < 0
.3789	f0 06		beq $3791			beq 	_IFAOkay
.378b	a5 0b		lda $0b				lda 	IFR0+IExp
.378d	29 40		and #$40			and 	#IFSign
.378f	d0 01		bne $3792			bne 	_IFAFail
.3791					_IFAOkay:
.3791	60		rts				rts
.3792					_IFAFail:
.3792	38		sec				sec
.3793	68		pla				pla 								; get address - 2
.3794	e9 02		sbc #$02			sbc 	#2
.3796	aa		tax				tax
.3797	68		pla				pla
.3798	e9 00		sbc #$00			sbc 	#0
.379a	a8		tay				tay
.379b	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.379d					_IFAStop:
>379d	db						.byte 	$DB 						; display an error AA ADR ADR
.379e	80 fd		bra $379d			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
