
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Tue Jun  6 18:04:53 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 b3 1d	jsr $1db3			jsr 	PGMSetBaseAddress
.1007	20 a4 28	jsr $28a4			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c 79 13	jmp $1379			jmp 	Command_RUN
.1012	4c 63 13	jmp $1363			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber
.1018	a2 0e		ldx #$0e			ldx 	#IFR0
.101a	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c d4 23	jmp $23d4		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	20 c6 1d	jsr $1dc6			jsr 	PGMEndProgram 				; end program => zTemp0
.1026	64 26		stz $26				stz 	freeMemory 					; start on next free page
.1028	a5 21		lda $21				lda 	zTemp0+1
.102a	1a		inc a				inc 	a
.102b	85 27		sta $27				sta 	freeMemory+1
.102d	20 43 28	jsr $2843			jsr 	VARClearHashTables
.1030	ad 14 05	lda $0514			lda 	PGMEndMemoryHigh
.1033	20 80 25	jsr $2580			jsr 	StackReset
.1036	20 df 25	jsr $25df			jsr 	StringSystemInitialise
.1039	20 eb 22	jsr $22eb			jsr 	ScanProcedures
.103c	60		rts				rts
.103d					AllocateMemory:
.103d	5a		phy				phy 								; save Y
.103e	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.1040	5a		phy				phy
.1041	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.1043	5a		phy				phy
.1044	a8		tay				tay 								; count is now in XY
.1045					_AllocateLoop:
.1045	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1047	d0 04		bne $104d			bne 	_AllocateOne
.1049	c0 00		cpy #$00			cpy 	#0
.104b	f0 15		beq $1062			beq 	_AllocateExit
.104d					_AllocateOne:
.104d	a9 00		lda #$00			lda 	#0 							; zero byte
.104f	92 26		sta ($26)			sta 	(freeMemory)
.1051	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.1053	d0 05		bne $105a			bne 	_AllocateSkipCarry
.1055	e6 27		inc $27				inc 	freeMemory+1
.1057	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.105a					_AllocateSkipCarry:
.105a	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.105c	d0 01		bne $105f			bne 	_AllocateSkipBorrow
.105e	ca		dex				dex
.105f					_AllocateSkipBorrow:
.105f	88		dey				dey
.1060	80 e3		bra $1045			bra 	_AllocateLoop
.1062					_AllocateExit:
.1062	fa		plx				plx 								; restore address
.1063	68		pla				pla
.1064	7a		ply				ply 								; restore Y
.1065	60		rts				rts
.1066					ClearCheckMemory:
.1066	a5 27		lda $27				lda 	freeMemory+1
.1068	1a		inc a				inc 	a
.1069	1a		inc a				inc 	a
.106a	cd 1c 06	cmp $061c			cmp 	stringMemory+1
.106d	b0 01		bcs $1070			bcs  	_CCMError
.106f	60		rts				rts
.1070					_CCMError:
.1070	4c 6e 24	jmp $246e		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1073					CommandDIM:
.1073	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.1075	29 c0		and #$c0			and 	#$C0
.1077	c9 40		cmp #$40			cmp 	#$40
.1079	d0 39		bne $10b4			bne 	_CDSyntax
.107b	20 fa 27	jsr $27fa			jsr 	VARGetInfo 					; get information
.107e	ad 24 06	lda $0624			lda 	VARType 					; check array.
.1081	29 02		and #$02			and 	#2
.1083	f0 2f		beq $10b4			beq 	_CDSyntax
.1085	20 ac 27	jsr $27ac			jsr 	VARFind 					; does it already exist
.1088	b0 2d		bcs $10b7			bcs 	_CDExists
.108a	20 58 27	jsr $2758			jsr 	VARCreate 					; create it - returns data ptr in XA
.108d	da		phx				phx 								; save target address
.108e	48		pha				pha
.108f	ad 24 06	lda $0624			lda 	VARType 					; type ID.
.1092	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1094	20 ba 10	jsr $10ba			jsr 	CreateArray 				; create array to XA
.1097	84 22		sty $22				sty 	zTemp1 						; save Y
.1099	7a		ply				ply 								; restore target to zTemp0
.109a	84 20		sty $20				sty 	zTemp0
.109c	7a		ply				ply
.109d	84 21		sty $21				sty 	zTemp0+1
.109f	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.10a1	a0 01		ldy #$01			ldy 	#1
.10a3	8a		txa				txa
.10a4	91 20		sta ($20),y			sta 	(zTemp0),y
.10a6	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.10a8	20 11 25	jsr $2511			jsr 	ERRCheckRParen 				; check )
.10ab	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10ad	c8		iny				iny
.10ae	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b0	f0 c1		beq $1073			beq 	CommandDIM
.10b2	88		dey				dey
.10b3	60		rts				rts
.10b4					_CDSyntax:
.10b4	4c 7e 23	jmp $237e		jmp	ErrorV_syntax
.10b7					_CDExists:
.10b7	4c 46 24	jmp $2446		jmp	ErrorV_redefine
.10ba					CreateArray:
.10ba	8d 03 05	sta $0503			sta 	CAType						; save type
.10bd	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10c0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10c2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10c4	f0 04		beq $10ca			beq 	_CATwoDimensions
.10c6	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c9	60		rts				rts
.10ca					_CATwoDimensions:
.10ca	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10cc	8d 05 05	sta $0505			sta 	CADim1+1
.10cf	a5 0e		lda $0e				lda 	IFR0+IM0
.10d1	8d 04 05	sta $0504			sta 	CADim1+0
.10d4	20 19 25	jsr $2519			jsr 	ERRCheckComma 				; check comma
.10d7	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10da	5a		phy				phy 								; save Y position
.10db	18		clc				clc 								; allocate the outer array of pointers.
.10dc	ae 05 05	ldx $0505			ldx 	CADim1+1
.10df	ad 04 05	lda $0504			lda 	CADim1
.10e2	20 55 11	jsr $1155			jsr 	CSAAllocate 				; allocate the outer array
.10e5	da		phx				phx									; save this address on the stack
.10e6	48		pha				pha
.10e7	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.10e9	85 24		sta $24				sta 	zTemp2
.10eb					_CACreateSubLoop:
.10eb	38		sec				sec
.10ec	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create data array of required size.
.10ef	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10f1	91 24		sta ($24),y			sta 	(zTemp2),y
.10f3	8a		txa				txa
.10f4	c8		iny				iny
.10f5	91 24		sta ($24),y			sta 	(zTemp2),y
.10f7	18		clc				clc  								; next slot.
.10f8	a5 24		lda $24				lda 	zTemp2
.10fa	69 02		adc #$02			adc 	#2
.10fc	85 24		sta $24				sta 	zTemp2
.10fe	90 02		bcc $1102			bcc 	_CACNoCarry
.1100	e6 25		inc $25				inc 	zTemp2+1
.1102					_CACNoCarry:
.1102	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1105	d0 03		bne $110a			bne 	_CACNoBorrow
.1107	ce 05 05	dec $0505			dec 	CADim1+1
.110a					_CACNoBorrow:
.110a	ce 04 05	dec $0504			dec 	CADim1
.110d	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1110	10 d9		bpl $10eb			bpl 	_CACreateSubLoop
.1112	68		pla				pla
.1113	fa		plx				plx
.1114	7a		ply				ply
.1115	60		rts				rts
.1116					CreateSingleArray:
.1116	5a		phy				phy
.1117	38		sec				sec 								; allocate memory block all zeros.
.1118	a5 0e		lda $0e				lda 	IFR0+IM0
.111a	a6 0f		ldx $0f				ldx 	IFR0+IM1
.111c	20 55 11	jsr $1155			jsr 	CSAAllocate
.111f	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1122	f0 2f		beq $1153			beq 	_CSANoInit
.1124	da		phx				phx 								; save address of new array
.1125	48		pha				pha
.1126	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.1128	86 21		stx $21				stx 	zTemp0+1
.112a	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.112c	b1 20		lda ($20),y			lda 	(zTemp0),y
.112e	a8		tay				tay
.112f	b2 20		lda ($20)			lda 	(zTemp0)
.1131	aa		tax				tax
.1132					_CSAEraseString:
.1132	5a		phy				phy
.1133	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1135	a9 80		lda #$80			lda 	#$80
.1137	91 20		sta ($20),y			sta 	(zTemp0),y
.1139	7a		ply				ply
.113a	18		clc				clc 								; add 4 to next slot.
.113b	a5 20		lda $20				lda 	zTemp0
.113d	69 04		adc #$04			adc 	#4
.113f	85 20		sta $20				sta 	zTemp0
.1141	90 02		bcc $1145			bcc 	_CSAENoCarry
.1143	e6 21		inc $21				inc 	zTemp0+1
.1145					_CSAENoCarry:
.1145	e0 00		cpx #$00			cpx 	#0
.1147	d0 01		bne $114a			bne 	_CSANoBorrow
.1149	88		dey				dey
.114a					_CSANoBorrow:
.114a	ca		dex				dex
.114b	d0 e5		bne $1132			bne 	_CSAEraseString
.114d	c0 00		cpy #$00			cpy 	#0
.114f	d0 e1		bne $1132			bne 	_CSAEraseString
.1151	68		pla				pla
.1152	fa		plx				plx
.1153					_CSANoInit:
.1153	7a		ply				ply
.1154	60		rts				rts
.1155					CSAAllocate:
.1155	08		php				php 								; save type flag.
.1156	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1157	d0 01		bne $115a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1159	e8		inx				inx
.115a					_CSAANoCarry:
.115a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.115c	b0 2e		bcs $118c			bcs 	_CSARange
.115e	28		plp				plp 								; restore type flag
.115f	08		php				php 								; save it back again.
.1160	da		phx				phx 								; save size.
.1161	48		pha				pha
.1162	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.1164	90 03		bcc $1169			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1166	0a		asl a				asl 	a
.1167	26 21		rol $21				rol 	zTemp0+1
.1169					_CSAATimes2:
.1169	0a		asl a				asl 	a
.116a	26 21		rol $21				rol 	zTemp0+1
.116c	18		clc				clc
.116d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.116f	90 02		bcc $1173			bcc 	_CSAANoCarry2
.1171	e6 21		inc $21				inc 	zTemp0+1
.1173					_CSAANoCarry2:
.1173	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.1175	20 3d 10	jsr $103d			jsr 	AllocateMemory 				; allocate memory to XA
.1178	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.117a	85 20		sta $20				sta 	zTemp0
.117c	68		pla				pla  								; write element count to first 2 bytes
.117d	92 20		sta ($20)			sta 	(zTemp0)
.117f	68		pla				pla 								; msb of element count
.1180	28		plp				plp 								; CC if pointer array
.1181	b0 02		bcs $1185			bcs 	_CSAAIsData
.1183	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1185					_CSAAIsData:
.1185	a0 01		ldy #$01			ldy 	#1
.1187	91 20		sta ($20),y			sta 	(zTemp0),y
.1189	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.118b	60		rts				rts
.118c					_CSARange:
.118c	4c 8f 23	jmp $238f		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.118f					Command_Doke:
.118f	38		sec				sec
.1190	80 01		bra $1193			bra 	DPCommon
.1192					Command_Poke:
.1192	18		clc				clc
.1193					DPCommon:
.1193	08		php				php 								; CS if DOKE
.1194	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 			; address
.1197	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.1199	48		pha				pha
.119a	a5 0f		lda $0f				lda 	IFR0+IM1
.119c	48		pha				pha
.119d	20 19 25	jsr $2519			jsr 	ERRCheckComma 				; [dp]oke address,data
.11a0	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16
.11a3	68		pla				pla 								; get address back
.11a4	85 21		sta $21				sta 	zTemp0+1
.11a6	68		pla				pla
.11a7	85 20		sta $20				sta 	zTemp0
.11a9	a5 0e		lda $0e				lda 	IFR0+IM0
.11ab	92 20		sta ($20)			sta 	(zTemp0)
.11ad	28		plp				plp
.11ae	90 08		bcc $11b8			bcc 	_DPExit
.11b0	5a		phy				phy
.11b1	a5 0f		lda $0f				lda 	IFR0+IM1
.11b3	a0 01		ldy #$01			ldy 	#1
.11b5	91 20		sta ($20),y			sta 	(zTemp0),y
.11b7	7a		ply				ply
.11b8					_DPExit:
.11b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b9					Command_Print:
.11b9					Command_IP_Main:
.11b9	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11ba					_CPLoop:
.11ba	08		php				php 								; save last action flag
.11bb	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.11bd	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11bf	f0 3e		beq $11ff			beq 	_CPExit 					; without consuming
.11c1	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11c3	f0 3a		beq $11ff			beq 	_CPExit
.11c5	68		pla				pla 								; throw last action flag
.11c6	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.11c8	c8		iny				iny
.11c9	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11cb	f0 2f		beq $11fc			beq 	_CPContinueWithSameLine
.11cd	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11cf	f0 26		beq $11f7			beq 	_CPTab
.11d1	88		dey				dey 								; undo the get.
.11d2	20 6d 15	jsr $156d			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11d5	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.11d7	10 14		bpl $11ed			bpl 	_CPNumber
.11d9	5a		phy				phy
.11da	18		clc				clc 								; string address to YX
.11db	a5 0e		lda $0e				lda 	IFR0+IM0
.11dd	aa		tax				tax
.11de	a5 0f		lda $0f				lda 	IFR0+IM1
.11e0	a8		tay				tay
.11e1	e8		inx				inx 								; point to 1st character
.11e2	d0 01		bne $11e5			bne 	_CPNoCarry
.11e4	c8		iny				iny
.11e5					_CPNoCarry:
.11e5	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.11e7	20 08 12	jsr $1208			jsr 	CPPrintAYX 					; print AYX
.11ea	7a		ply				ply
.11eb	80 cc		bra $11b9			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11ed					_CPNumber:
.11ed	5a		phy				phy
.11ee	20 b6 2c	jsr $2cb6			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11f1	20 08 12	jsr $1208			jsr 	CPPrintAYX 					; print AYX
.11f4	7a		ply				ply
.11f5	80 c2		bra $11b9			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11f7					_CPTab:
.11f7	a9 09		lda #$09			lda 	#9 							; print TAB
.11f9	20 1b 12	jsr $121b			jsr 	CPPrintA
.11fc					_CPContinueWithSameLine:
.11fc	38		sec				sec 								; loop round with carry set, which
.11fd	80 bb		bra $11ba			bra 	_CPLoop 					; will inhibit final CR
.11ff					_CPExit:
.11ff	28		plp				plp 								; get last action flag
.1200	b0 05		bcs $1207			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1202	a9 0d		lda #$0d			lda 	#13 						; print new line
.1204	20 1b 12	jsr $121b			jsr 	CPPrintA
.1207					_CPExit2:
.1207	60		rts				rts
.1208					CPPrintAYX:
.1208	86 20		stx $20				stx 	zTemp0
.120a	84 21		sty $21				sty 	zTemp0+1
.120c	aa		tax				tax
.120d	f0 0b		beq $121a			beq 	_CPPrintExit
.120f	a0 00		ldy #$00			ldy 	#0
.1211					_CPPrintAYXLoop:
.1211	b1 20		lda ($20),y			lda 	(zTemp0),y
.1213	20 1b 12	jsr $121b			jsr 	CPPrintA
.1216	c8		iny				iny
.1217	ca		dex				dex
.1218	d0 f7		bne $1211			bne 	_CPPrintAYXLoop
.121a					_CPPrintExit:
.121a	60		rts				rts
.121b					CPPrintA:
.121b	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.121e					CommandLET:
.121e	20 35 16	jsr $1635			jsr 	EXPTermR0 					; get term
.1221	90 6d		bcc $1290			bcc 	_CLError 					; must be a reference term.
.1223	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.1225	48		pha				pha
.1226	a5 0f		lda $0f				lda 	IFR0+IM1
.1228	48		pha				pha
.1229	a5 11		lda $11				lda 	IFR0+IExp
.122b	48		pha				pha
.122c	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.122e	20 21 25	jsr $2521			jsr 	ERRCheckA
.1231	20 6d 15	jsr $156d			jsr 	EXPEvaluateExpression 		; right hand side.
.1234	68		pla				pla 								; type of l-expr
.1235	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.1237	30 5a		bmi $1293			bmi 	_CLType
.1239	fa		plx				plx 	 							; pop target address to zTemp0
.123a	86 21		stx $21				stx 	zTemp0+1
.123c	fa		plx				plx
.123d	86 20		stx $20				stx 	zTemp0
.123f	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.1241	30 15		bmi $1258			bmi 	_CLStringAssign
.1243	5a		phy				phy
.1244	a0 03		ldy #$03			ldy 	#3
.1246	91 20		sta ($20),y			sta 	(zTemp0),y
.1248	88		dey				dey
.1249	a5 10		lda $10				lda 	IFR0+IM2
.124b	91 20		sta ($20),y			sta 	(zTemp0),y
.124d	88		dey				dey
.124e	a5 0f		lda $0f				lda 	IFR0+IM1
.1250	91 20		sta ($20),y			sta 	(zTemp0),y
.1252	a5 0e		lda $0e				lda 	IFR0+IM0
.1254	92 20		sta ($20)			sta 	(zTemp0)
.1256	7a		ply				ply
.1257	60		rts				rts
.1258					_CLStringAssign:
.1258	5a		phy				phy
.1259	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.125b	b1 20		lda ($20),y			lda 	(zTemp0),y
.125d	12 20		ora ($20)			ora 	(zTemp0)
.125f	f0 23		beq $1284			beq 	_CLConcreteString
.1261	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1263	85 22		sta $22				sta 	zTemp1
.1265	b1 20		lda ($20),y			lda 	(zTemp0),y
.1267	85 23		sta $23				sta 	zTemp1+1
.1269	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.126b	38		sec				sec 								; we want 3 for slot size, status, string size.
.126c	e9 03		sbc #$03			sbc 	#3
.126e	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.1270	90 12		bcc $1284			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1272	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1274	1a		inc a				inc 	a
.1275	aa		tax				tax
.1276	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1278					_CLReplaceString:
.1278	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.127a	c8		iny				iny
.127b	c8		iny				iny
.127c	91 22		sta ($22),y			sta 	(zTemp1),y
.127e	88		dey				dey
.127f	ca		dex				dex
.1280	d0 f6		bne $1278			bne 	_CLReplaceString
.1282	80 0a		bra $128e			bra 	_CLExit
.1284					_CLConcreteString:
.1284	20 94 25	jsr $2594			jsr 	StringConcrete  			; concreted string in XA.
.1287	a0 01		ldy #$01			ldy 	#1 							; store the address
.1289	92 20		sta ($20)			sta 	(zTemp0)
.128b	8a		txa				txa
.128c	91 20		sta ($20),y			sta 	(zTemp0),y
.128e					_CLExit:
.128e	7a		ply				ply
.128f	60		rts				rts
.1290					_CLError:
.1290	4c b1 24	jmp $24b1		jmp	ErrorV_variable
.1293					_CLType:
.1293	4c ae 23	jmp $23ae		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1296					Command_LIST:
.1296	9c 06 05	stz $0506			stz 	CLFrom 						; default from
.1299	9c 07 05	stz $0507			stz 	CLFrom+1
.129c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.129e	c9 99		cmp #$99			cmp 	#PR_COMMA
.12a0	f0 1d		beq $12bf			beq 	_CLToLine
.12a2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12a4	f0 37		beq $12dd			beq 	_CLDefaultTo
.12a6	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12a9	a5 0e		lda $0e				lda 	IFR0+IM0
.12ab	8d 06 05	sta $0506			sta 	CLFrom
.12ae	8d 08 05	sta $0508			sta 	CLTo
.12b1	a5 0f		lda $0f				lda 	IFR0+IM1
.12b3	8d 07 05	sta $0507			sta 	CLFrom+1
.12b6	8d 09 05	sta $0509			sta 	CLTo+1
.12b9	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12bb	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.12bd	f0 26		beq $12e5			beq 	_CLList
.12bf					_CLToLine:
.12bf	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.12c1	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12c3	f0 18		beq $12dd			beq 	_CLDefaultTo
.12c5	20 19 25	jsr $2519			jsr 	ERRCheckComma 				; sep comma
.12c8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.12ca	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.12cc	f0 0f		beq $12dd			beq 	_CLDefaultTo
.12ce	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 			; there's a To value.
.12d1	a5 0e		lda $0e				lda 	IFR0+IM0
.12d3	8d 08 05	sta $0508			sta 	CLTo
.12d6	a5 0f		lda $0f				lda 	IFR0+IM1
.12d8	8d 09 05	sta $0509			sta 	CLTo+1
.12db	80 08		bra $12e5			bra 	_CLList
.12dd					_CLDefaultTo:
.12dd	a9 ff		lda #$ff			lda 	#$FF
.12df	8d 08 05	sta $0508			sta 	CLTo
.12e2	8d 09 05	sta $0509			sta 	CLTo+1
.12e5					_CLList:
.12e5	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.12e8	85 1f		sta $1f				sta 	codePtr+1
.12ea	64 1e		stz $1e				stz 	codePtr
.12ec	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.12ee	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.12f0	20 15 1c	jsr $1c15			jsr 	TOKSetDetokeniseOutput
.12f3					_CLLoop:
.12f3	b2 1e		lda ($1e)			lda 	(codePtr) 					; finished
.12f5	f0 4a		beq $1341			beq 	_CLExit
.12f7	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.12fa	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.12fd	d0 42		bne $1341			bne 	_CLExit
.12ff	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1301	20 44 13	jsr $1344			jsr 	_CLCompareLine
.1304	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1306	f0 2c		beq $1334			beq 	_CLNext
.1308	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.130a	20 44 13	jsr $1344			jsr 	_CLCompareLine
.130d	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.130f	f0 23		beq $1334			beq 	_CLNext
.1311	a0 02		ldy #$02			ldy 	#2 							; print line #
.1313	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1315	aa		tax				tax
.1316	88		dey				dey
.1317	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1319	20 72 26	jsr $2672			jsr 	WriteIntXA
.131c	a9 20		lda #$20			lda 	#32
.131e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1321	a4 1f		ldy $1f				ldy 	codePtr+1 					; point YX to tokenised code/
.1323	a5 1e		lda $1e				lda 	codePtr
.1325	18		clc				clc
.1326	69 03		adc #$03			adc 	#3
.1328	aa		tax				tax
.1329	90 01		bcc $132c			bcc 	_CLNoCarry2
.132b	c8		iny				iny
.132c					_CLNoCarry2:
.132c	20 d0 1b	jsr $1bd0			jsr 	TOKDetokenise
.132f	a9 0d		lda #$0d			lda 	#13	 						; next line
.1331	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1334					_CLNext:
.1334	18		clc				clc 								; advance to next line.
.1335	b2 1e		lda ($1e)			lda 	(codePtr)
.1337	65 1e		adc $1e				adc 	codePtr
.1339	85 1e		sta $1e				sta 	codePtr
.133b	90 02		bcc $133f			bcc 	_CLNoCarry
.133d	e6 1f		inc $1f				inc 	codePtr+1
.133f					_CLNoCarry:
.133f	80 b2		bra $12f3			bra 	_CLLoop
.1341					_CLExit:
.1341	4c 91 26	jmp $2691			jmp 	WarmStart
.1344					_CLCompareLine:
.1344	a0 01		ldy #$01			ldy 	#1
.1346	38		sec				sec
.1347	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1349	fd 06 05	sbc $0506,x			sbc 	CLFrom,x
.134c	85 20		sta $20				sta 	zTemp0
.134e	c8		iny				iny
.134f	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1351	fd 07 05	sbc $0507,x			sbc 	CLFrom+1,x
.1354	90 0a		bcc $1360			bcc 	_CLIsNegative
.1356	d0 05		bne $135d			bne 	_CLIsPositive
.1358	a5 20		lda $20				lda 	zTemp0
.135a	d0 01		bne $135d			bne 	_CLIsPositive
.135c	60		rts				rts
.135d					_CLIsPositive:
.135d	a9 01		lda #$01			lda 	#1
.135f	60		rts				rts
.1360					_CLIsNegative:
.1360	a9 ff		lda #$ff			lda 	#255
.1362	60		rts				rts
.0506					CLFrom:
>0506							.fill 	2
.0508					CLTo:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1363					Command_NEW:
.1363	20 ba 1d	jsr $1dba			jsr 	PGMNewProgram
.1366	20 23 10	jsr $1023			jsr 	Command_CLEAR
.1369	4c d2 13	jmp $13d2			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.136c					Command_REM:
.136c					Command_REM2:
.136c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.136e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1370	d0 06		bne $1378			bne 	_CRExit
.1372	c8		iny				iny 								; skip over it, it's a comment.
.1373	98		tya				tya
.1374	38		sec				sec
.1375	71 1e		adc ($1e),y			adc 	(codePtr),y
.1377	a8		tay				tay
.1378					_CRExit:
.1378	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1379					Command_RUN:
.1379	20 23 10	jsr $1023			jsr 	Command_CLEAR 				; clear everything out.
.137c	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.137f	85 1f		sta $1f				sta 	codePtr+1
.1381	64 1e		stz $1e				stz 	codePtr
.1383	80 0b		bra $1390			bra 	RUNNewLine
.1385					RUNEndOfLine:
.1385	18		clc				clc 								; advance to next line.
.1386	b2 1e		lda ($1e)			lda 	(codePtr)
.1388	65 1e		adc $1e				adc 	codePtr
.138a	85 1e		sta $1e				sta 	codePtr
.138c	90 02		bcc $1390			bcc 	_RELNoCarry
.138e	e6 1f		inc $1f				inc 	codePtr+1
.1390					_RELNoCarry:
.1390					RUNNewLine:
.1390	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1392	9a		txs				txs
.1393	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.1395	f0 3b		beq $13d2			beq 	Command_END
.1397	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1399	b1 1e		lda ($1e),y			lda 	(codePtr),y
.139b	8d 1f 06	sta $061f			sta 	ERRLine
.139e	c8		iny				iny
.139f	b1 1e		lda ($1e),y			lda 	(codePtr),y
.13a1	8d 20 06	sta $0620			sta 	ERRLine+1
.13a4	c8		iny				iny 								; offset into codePtr for start of line.
.13a5					RUNNewCommand:
.13a5	9c 1a 06	stz $061a			stz 	stringInitialised 			; reset string system.
.13a8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.13aa	10 1a		bpl $13c6			bpl		_RUNNotToken 				; probably an identifier
.13ac	c8		iny				iny 								; consume token
.13ad	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.13af	f0 f4		beq $13a5			beq 	RUNNewCommand
.13b1	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.13b3	b0 0e		bcs $13c3			bcs 	_RUNSyntax
.13b5	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.13b7	90 0a		bcc $13c3			bcc 	_RUNSyntax
.13b9	0a		asl a				asl 	a 							; double into X.
.13ba	aa		tax				tax
.13bb	20 c0 13	jsr $13c0			jsr 	_RUNDispatchMain			; call the main dispatcher
.13be	80 e5		bra $13a5			bra 	RUNNewCommand
.13c0					_RUNDispatchMain:
.13c0	7c d0 1a	jmp ($1ad0,x)			jmp 	(VectorTable,x)
.13c3					_RUNSyntax:
.13c3	4c 7e 23	jmp $237e		jmp	ErrorV_syntax
.13c6					_RUNNotToken:
.13c6	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.13c8	90 f9		bcc $13c3			bcc 	_RUNSyntax
.13ca	20 1e 12	jsr $121e			jsr 	CommandLET 					; assignment
.13cd	80 d6		bra $13a5			bra 	RUNNewCommand 				; loop round.
.13cf					Command_Shift_Handler:
.13cf	4c c0 23	jmp $23c0		jmp	ErrorV_unimplemented
.13d2					Command_END:
.13d2	4c 91 26	jmp $2691			jmp 	WarmStart

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.13d5					Command_STOP:
.13d5	4c 22 24	jmp $2422		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.13d8					Command_Sys:
.13d8	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 			; execution address
.13db	5a		phy				phy
.13dc	ad 67 06	lda $0667			lda 	('A'-'A')*4 + FastVariables ; load AXY
.13df	ae c3 06	ldx $06c3			ldx 	('X'-'A')*4 + FastVariables
.13e2	ac c7 06	ldy $06c7			ldy 	('Y'-'A')*4 + FastVariables
.13e5	20 ea 13	jsr $13ea			jsr 	_CSCallIFR0 				; call the code
.13e8	7a		ply				ply
.13e9	60		rts				rts
.13ea					_CSCallIFR0:
.13ea	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.13ed					NoExec01:
.13ed					NoExec02:
.13ed					NoExec03:
.13ed					NoExec04:
.13ed					NoExec05:
.13ed					NoExec06:
.13ed					NoExec07:
.13ed					NoExec08:
.13ed	4c 7e 23	jmp $237e		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.13f0					EXPBinAdd:
.13f0	24 11		bit $11				bit 	IFR0+IExp
.13f2	30 6f		bmi $1463			bmi 	EXPConcatenate
.13f4	a2 12		ldx #$12			ldx 	#IFR1
.13f6	4c af 28	jmp $28af			jmp 	IFloatAdd
.13f9					EXPBinSub:
.13f9	24 11		bit $11				bit 	IFR0+IExp
.13fb	30 3f		bmi $143c			bmi 	EXPTypeError
.13fd	a2 12		ldx #$12			ldx 	#IFR1
.13ff	4c a8 28	jmp $28a8			jmp 	IFloatSubtract
.1402					EXPBinMul:
.1402	24 11		bit $11				bit 	IFR0+IExp
.1404	30 36		bmi $143c			bmi 	EXPTypeError
.1406	a2 12		ldx #$12			ldx 	#IFR1
.1408	4c 59 29	jmp $2959			jmp 	IFloatMultiply
.140b					EXPBinFDiv:
.140b	24 11		bit $11				bit 	IFR0+IExp
.140d	30 2d		bmi $143c			bmi 	EXPTypeError
.140f	a2 12		ldx #$12			ldx 	#IFR1
.1411	20 dc 2b	jsr $2bdc			jsr 	IFloatDivideFloat
.1414	b0 0f		bcs $1425			bcs 	EXPDZero
.1416	60		rts				rts
.1417					EXPBinIDiv:
.1417	24 11		bit $11				bit 	IFR0+IExp
.1419	30 21		bmi $143c			bmi 	EXPTypeError
.141b	a2 12		ldx #$12			ldx 	#IFR1
.141d	20 dc 2b	jsr $2bdc			jsr 	IFloatDivideFloat
.1420	b0 03		bcs $1425			bcs 	EXPDZero
.1422	4c b9 2b	jmp $2bb9			jmp 	IFloatIntegerR0
.1425					EXPDZero:
.1425	4c f7 23	jmp $23f7		jmp	ErrorV_divzero
.1428					EXPBinIMod:
.1428	24 11		bit $11				bit 	IFR0+IExp
.142a	30 10		bmi $143c			bmi 	EXPTypeError
.142c	a2 12		ldx #$12			ldx 	#IFR1
.142e	5a		phy				phy
.142f	20 f1 2a	jsr $2af1			jsr 	IFPreProcessBitwise 		; set up everything.
.1432	d0 05		bne $1439			bne 	EXPDRange
.1434	20 2a 2a	jsr $2a2a			jsr 	IFloatModulusInteger
.1437	7a		ply				ply
.1438	60		rts				rts
.1439					EXPDRange:
.1439	4c 8f 23	jmp $238f		jmp	ErrorV_range
.143c					EXPTypeError:
.143c	4c ae 23	jmp $23ae		jmp	ErrorV_type
.143f					EXPBinAnd:
.143f	24 11		bit $11				bit 	IFR0+IExp
.1441	30 f9		bmi $143c			bmi 	EXPTypeError
.1443	a2 12		ldx #$12			ldx 	#IFR1
.1445	20 ac 2a	jsr $2aac			jsr 	IFloatBitwiseAnd
.1448	b0 ef		bcs $1439			bcs 	EXPDRange
.144a	60		rts				rts
.144b					EXPBinOr:
.144b	24 11		bit $11				bit 	IFR0+IExp
.144d	30 ed		bmi $143c			bmi 	EXPTypeError
.144f	a2 12		ldx #$12			ldx 	#IFR1
.1451	20 c3 2a	jsr $2ac3			jsr 	IFloatBitwiseOr
.1454	b0 e3		bcs $1439			bcs 	EXPDRange
.1456	60		rts				rts
.1457					EXPBinXor:
.1457	24 11		bit $11				bit 	IFR0+IExp
.1459	30 e1		bmi $143c			bmi 	EXPTypeError
.145b	a2 12		ldx #$12			ldx 	#IFR1
.145d	20 da 2a	jsr $2ada			jsr 	IFloatBitwiseXor
.1460	b0 d7		bcs $1439			bcs 	EXPDRange
.1462	60		rts				rts
.1463					EXPConcatenate:
.1463	18		clc				clc
.1464	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.1466	72 12		adc ($12)			adc 	(IFR1)
.1468	b0 2d		bcs $1497			bcs 	_EXPCError
.146a	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.146c	da		phx				phx
.146d	a6 0f		ldx $0f				ldx 	IFR0+1
.146f	da		phx				phx
.1470	20 07 26	jsr $2607			jsr 	StringTempAllocate 			; allocate string, set up return
.1473	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.1475	a5 12		lda $12				lda 	IFR1
.1477	20 80 14	jsr $1480			jsr 	_EXPCCopyXA
.147a	fa		plx				plx 								; copy second string
.147b	68		pla				pla
.147c	20 80 14	jsr $1480			jsr 	_EXPCCopyXA
.147f	60		rts				rts
.1480					_EXPCCopyXA:
.1480	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.1482	85 20		sta $20				sta 	zTemp0
.1484	b2 20		lda ($20)			lda 	(zTemp0)					; length
.1486	f0 0e		beq $1496			beq 	_EXPCCExit 					; nothing.
.1488	aa		tax				tax 								; count
.1489	5a		phy				phy 								; start positioin
.148a	a0 01		ldy #$01			ldy 	#1
.148c					_EXPCCLoop:
.148c	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.148e	20 3c 26	jsr $263c			jsr 	StringTempWrite
.1491	c8		iny				iny
.1492	ca		dex				dex
.1493	d0 f7		bne $148c			bne 	_EXPCCLoop
.1495	7a		ply				ply
.1496					_EXPCCExit:
.1496	60		rts				rts
.1497					_EXPCError:
.1497	4c 9b 24	jmp $249b		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.149a					EXPReturnTrue:
.149a	a2 0e		ldx #$0e			ldx 	#IFR0
.149c	a9 01		lda #$01			lda 	#1
.149e	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.14a1	20 c4 2e	jsr $2ec4			jsr 	IFloatNegate
.14a4	60		rts				rts
.14a5					EXPReturnFalse:
.14a5	a2 0e		ldx #$0e			ldx 	#IFR0
.14a7	4c b9 2e	jmp $2eb9			jmp 	IFloatSetZero
.14aa					EXPCompareEqual:
.14aa	20 e0 14	jsr $14e0			jsr 	EXPCompareBaseCode
.14ad	c9 00		cmp #$00			cmp 	#0
.14af	f0 e9		beq $149a			beq 	EXPReturnTrue
.14b1	80 f2		bra $14a5			bra 	EXPReturnFalse
.14b3					EXPCompareLess:
.14b3	20 e0 14	jsr $14e0			jsr 	EXPCompareBaseCode
.14b6	c9 ff		cmp #$ff			cmp 	#$FF
.14b8	f0 e0		beq $149a			beq 	EXPReturnTrue
.14ba	80 e9		bra $14a5			bra 	EXPReturnFalse
.14bc					EXPCompareGreater:
.14bc	20 e0 14	jsr $14e0			jsr 	EXPCompareBaseCode
.14bf	c9 01		cmp #$01			cmp 	#1
.14c1	f0 d7		beq $149a			beq 	EXPReturnTrue
.14c3	80 e0		bra $14a5			bra 	EXPReturnFalse
.14c5					EXPCompareNotEqual:
.14c5	20 e0 14	jsr $14e0			jsr 	EXPCompareBaseCode
.14c8	c9 00		cmp #$00			cmp 	#0
.14ca	d0 ce		bne $149a			bne 	EXPReturnTrue
.14cc	80 d7		bra $14a5			bra 	EXPReturnFalse
.14ce					EXPCompareLessEqual:
.14ce	20 e0 14	jsr $14e0			jsr 	EXPCompareBaseCode
.14d1	c9 01		cmp #$01			cmp 	#1
.14d3	d0 c5		bne $149a			bne 	EXPReturnTrue
.14d5	80 ce		bra $14a5			bra 	EXPReturnFalse
.14d7					EXPCompareGreaterEqual:
.14d7	20 e0 14	jsr $14e0			jsr 	EXPCompareBaseCode
.14da	c9 ff		cmp #$ff			cmp 	#$FF
.14dc	d0 bc		bne $149a			bne 	EXPReturnTrue
.14de	80 c5		bra $14a5			bra 	EXPReturnFalse
.14e0					EXPCompareBaseCode:
.14e0	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.14e2	30 10		bmi $14f4			bmi 	_EXCBCString
.14e4	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.14e6	20 87 2b	jsr $2b87			jsr 	IFloatCompare
.14e9	a5 0e		lda $0e				lda 	IFR0+IM0
.14eb	f0 06		beq $14f3			beq 	_EXCBCExit 					; return 0 if zero
.14ed	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.14ef	50 02		bvc $14f3			bvc 	_EXCBCExit
.14f1	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.14f3					_EXCBCExit:
.14f3	60		rts				rts
.14f4					_EXCBCString:
.14f4	5a		phy				phy
.14f5	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.14f7	d2 12		cmp ($12)			cmp 	(IFR1)
.14f9	90 02		bcc $14fd			bcc 	_EXCBCSmaller
.14fb	b2 12		lda ($12)			lda 	(IFR1)
.14fd					_EXCBCSmaller:
.14fd	aa		tax				tax
.14fe	f0 0d		beq $150d			beq 	_EXCBCMatches 				; if zero common length matches
.1500	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1502					_EXCBCCheckSmallerMatches:
.1502	c8		iny				iny 								; compare directly as far as common length
.1503	38		sec				sec
.1504	b1 12		lda ($12),y			lda 	(IFR1),y
.1506	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.1508	d0 08		bne $1512			bne 	_EXCBCExit2
.150a	ca		dex				dex
.150b	d0 f5		bne $1502			bne 	_EXCBCCheckSmallerMatches
.150d					_EXCBCMatches:
.150d	38		sec				sec
.150e	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.1510	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1512					_EXCBCExit2:
.1512	7a		ply				ply
.1513	c9 00		cmp #$00			cmp 	#0
.1515	f0 04		beq $151b			beq 	_EXCBCReturn
.1517	30 03		bmi $151c			bmi 	_EXCBCFF
.1519	a9 01		lda #$01			lda 	#1
.151b					_EXCBCReturn:
.151b	60		rts				rts
.151c					_EXCBCFF:
.151c	a9 ff		lda #$ff			lda 	#$FF
.151e	60		rts				rts
.151f					_EXCBCRange:
.151f	4c 8f 23	jmp $238f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1522					EXPBinLeft:
.1522	a9 ff		lda #$ff			lda 	#$FF
.1524	8d 0a 05	sta $050a			sta 	EXPShiftLeftFlag
.1527	4c 2d 15	jmp $152d			jmp 	EXPShiftCommon
.152a					EXPBinRight:
.152a	9c 0a 05	stz $050a			stz 	EXPShiftLeftFlag
.152d					EXPShiftCommon:
.152d	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.152f	05 15		ora $15				ora 	IFR1+IExp
.1531	29 7f		and #$7f			and 	#$7F
.1533	d0 35		bne $156a			bne 	_EXPSRange
.1535	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.1537	29 e0		and #$e0			and 	#$E0
.1539	05 0f		ora $0f				ora 	IFR0+IM1
.153b	05 10		ora $10				ora 	IFR0+IM2
.153d	d0 25		bne $1564			bne 	_EXPSShiftZero 				; if so return zero
.153f	5a		phy				phy
.1540	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.1542	29 1f		and #$1f			and 	#$1F
.1544	f0 17		beq $155d			beq 	_EXPSExit 					; exit if zero
.1546	a8		tay				tay
.1547					_EXPSLoop:
.1547	a2 12		ldx #$12			ldx 	#IFR1
.1549	2c 0a 05	bit $050a			bit 	EXPShiftLeftFlag
.154c	30 05		bmi $1553			bmi 	_EXPSShiftLeft
.154e	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.1551	80 07		bra $155a			bra 	_EXPSContinue
.1553					_EXPSShiftLeft:
.1553	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1556	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.1558	30 10		bmi $156a			bmi 	_EXPSRange
.155a					_EXPSContinue:
.155a	88		dey				dey
.155b	d0 ea		bne $1547			bne 	_EXPSLoop
.155d					_EXPSExit:
.155d	a2 12		ldx #$12			ldx 	#IFR1
.155f	20 4a 2e	jsr $2e4a			jsr 	IFloatCopyFromRegister
.1562	7a		ply				ply
.1563	60		rts				rts
.1564					_EXPSShiftZero:
.1564	a2 0e		ldx #$0e			ldx 	#IFR0
.1566	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.1569	60		rts				rts
.156a					_EXPSRange:
.156a	4c 8f 23	jmp $238f		jmp	ErrorV_range
.050a					EXPShiftLeftFlag:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.156d					EXPEvaluateExpression:
.156d	a9 00		lda #$00			lda 	#0 							; current precedence
.156f					EXPEvaluateExpressionPrecedenceA:
.156f	48		pha				pha
.1570	20 ea 15	jsr $15ea			jsr 	EXPTermValueR0				; do first term.
.1573					_EELoop:
.1573	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1575	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1577	90 31		bcc $15aa			bcc 	_EEExit
.1579	aa		tax				tax 								; access the precedence of the operator.
.157a	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.157b	dd 28 18	cmp $1828,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.157e	b0 2b		bcs $15ab			bcs 	_EEExit2
.1580	48		pha				pha 								; save current precedence.
.1581	da		phx				phx 								; save operator
.1582	c8		iny				iny 								; consume operator
.1583	da		phx				phx
.1584	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.1586	20 08 2e	jsr $2e08			jsr 	IFloatPushRx
.1589	fa		plx				plx
.158a	bd 28 18	lda $1828,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.158d	20 6f 15	jsr $156f			jsr 	EXPEvaluateExpressionPrecedenceA
.1590	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.1592	20 29 2e	jsr $2e29			jsr 	IFloatPullRx
.1595	fa		plx				plx 								; operator
.1596	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.1598	45 15		eor $15				eor 	IFR1+IExp
.159a	30 08		bmi $15a4			bmi 	_EEType
.159c					_EETypeOkay:
.159c	8a		txa				txa
.159d	0a		asl a				asl 	a 							; double -> X
.159e	aa		tax				tax
.159f	20 a7 15	jsr $15a7			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.15a2	80 cf		bra $1573			bra 	_EELoop
.15a4					_EEType:
.15a4	4c ae 23	jmp $23ae		jmp	ErrorV_type
.15a7					_EECallBinary:
.15a7	7c d0 1a	jmp ($1ad0,x)			jmp 	(VectorTable,x)
.15aa					_EEExit:
.15aa	68		pla				pla 								; throw precedence
.15ab					_EEExit2:
.15ab	18		clc				clc
.15ac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.15ad					EXPEvalNumber:
.15ad	20 6d 15	jsr $156d			jsr 	EXPEvaluateExpression
.15b0	24 11		bit $11				bit 	IFR0+IExp
.15b2	30 01		bmi $15b5			bmi 	EVUType
.15b4	60		rts				rts
.15b5					EVUType:
.15b5	4c ae 23	jmp $23ae		jmp	ErrorV_type
.15b8					EXPEvalInteger:
.15b8	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.15bb	20 b9 2b	jsr $2bb9			jsr 	IFloatIntegerR0
.15be	60		rts				rts
.15bf					EXPEvalInteger16:
.15bf	20 b8 15	jsr $15b8			jsr 	EXPEvalInteger
.15c2	a5 10		lda $10				lda 	IFR0+IM2
.15c4	d0 21		bne $15e7			bne 	EVURange
.15c6	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15c8	a5 0e		lda $0e				lda 	IFR0+IM0
.15ca	60		rts				rts
.15cb					EXPEvalInteger8:
.15cb	20 b8 15	jsr $15b8			jsr 	EXPEvalInteger
.15ce	a5 10		lda $10				lda 	IFR0+IM2
.15d0	05 0f		ora $0f				ora 	IFR0+IM1
.15d2	d0 13		bne $15e7			bne 	EVURange
.15d4	a5 0e		lda $0e				lda 	IFR0+IM0
.15d6	60		rts				rts
.15d7					EXPEvalString:
.15d7	20 6d 15	jsr $156d			jsr 	EXPEvaluateExpression
.15da	24 11		bit $11				bit 	IFR0+IExp
.15dc	10 d7		bpl $15b5			bpl 	EVUType
.15de	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15e0	86 21		stx $21				stx 	zTemp0+1
.15e2	a5 0e		lda $0e				lda 	IFR0+IM0
.15e4	85 20		sta $20				sta 	zTemp0
.15e6	60		rts				rts
.15e7					EVURange:
.15e7	4c 8f 23	jmp $238f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.15ea					EXPTermValueR0:
.15ea	20 35 16	jsr $1635			jsr 	EXPTermR0 					; get term
.15ed	90 45		bcc $1634			bcc 	_ETVNotReference 			; exit if value.
.15ef	5a		phy				phy
.15f0	a0 03		ldy #$03			ldy 	#3 							; get type
.15f2	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15f4	30 14		bmi $160a			bmi 	_ETVDereferenceString
.15f6	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.15f8	88		dey				dey
.15f9	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15fb	85 10		sta $10				sta 	IFR0+IM2
.15fd	88		dey				dey
.15fe	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1600	aa		tax				tax
.1601	b2 0e		lda ($0e)			lda 	(IFR0)
.1603	86 0f		stx $0f				stx 	IFR0+IM1
.1605	85 0e		sta $0e				sta 	IFR0+IM0
.1607	7a		ply				ply
.1608	18		clc				clc
.1609	60		rts				rts
.160a					_ETVDereferenceString:
.160a	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.160c	b1 0e		lda ($0e),y			lda 	(IFR0),y
.160e	12 0e		ora ($0e)			ora 	(IFR0)
.1610	f0 11		beq $1623			beq 	_ETVNull
.1612	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.1614	aa		tax				tax
.1615	b2 0e		lda ($0e)			lda 	(IFR0)
.1617	18		clc				clc 								; add two so points to actual string.
.1618	69 02		adc #$02			adc 	#2
.161a	90 01		bcc $161d			bcc 	_EVDSNoCarry
.161c	e8		inx				inx
.161d					_EVDSNoCarry:
.161d	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.161f	85 0e		sta $0e				sta 	IFR0
.1621	80 08		bra $162b			bra 	_ETVFillExit 				; tidy up and exit.
.1623					_ETVNull:
.1623	a9 33		lda #$33			lda 	#_EVTNString & $FF
.1625	85 0e		sta $0e				sta 	IFR0+IM0
.1627	a9 16		lda #$16			lda 	#_EVTNString >> 8
.1629	85 0f		sta $0f				sta 	IFR0+IM1
.162b					_ETVFillExit:
.162b	64 10		stz $10				stz 	IFR0+IM2
.162d	a9 80		lda #$80			lda 	#$80
.162f	85 11		sta $11				sta 	IFR0+IExp
.1631	7a		ply				ply
.1632	60		rts				rts
.1633					_EVTNString:
>1633	00						.byte 	0
.1634					_ETVNotReference:
.1634	60		rts				rts
.1635					EXPTermR0:
.1635	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.1637	30 10		bmi $1649			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1639	c8		iny				iny 								; consume element
.163a	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.163c	b0 08		bcs $1646			bcs 	_ETMIdentifier
.163e	20 6d 16	jsr $166d			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1641	20 a0 16	jsr $16a0			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1644	18		clc				clc 								; return value
.1645	60		rts				rts
.1646					_ETMIdentifier:
.1646	4c 50 28	jmp $2850			jmp 	VARCheckSimple 				; check simple variables A-Z
.1649					_ETMIsUnaryOrMinus:
.1649	c8		iny				iny 								; consume element
.164a	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.164c	d0 0a		bne $1658			bne 	_ETMCheckUnary
.164e	20 ea 15	jsr $15ea			jsr 	EXPTermValueR0 				; get a term to negate
.1651	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.1653	20 c4 2e	jsr $2ec4			jsr 	IFloatNegate
.1656	18		clc				clc
.1657	60		rts				rts
.1658					_ETMCheckUnary:
.1658	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.165a	90 0e		bcc $166a			bcc 	_ETMUnarySyntax
.165c	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.165e	b0 0a		bcs $166a			bcs 	_ETMUnarySyntax
.1660	0a		asl a				asl 	a
.1661	aa		tax				tax
.1662	20 67 16	jsr $1667			jsr 	_ETMCallUnaryFunction
.1665	18		clc				clc
.1666	60		rts				rts
.1667					_ETMCallUnaryFunction:
.1667	7c d0 1a	jmp ($1ad0,x)			jmp 	(VectorTable,x)
.166a					_ETMUnarySyntax:
.166a	4c 7e 23	jmp $237e		jmp	ErrorV_syntax
.166d					EXPExtractTokenisedInteger:
.166d	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.166f	64 11		stz $11				stz 	IFR0+IExp
.1671	64 0f		stz $0f				stz 	IFR0+IM1
.1673	64 10		stz $10				stz 	IFR0+IM2
.1675					_ETMConstant:
.1675	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.1677	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1679	b0 24		bcs $169f			bcs 	_ETMCExit 					; no.
.167b	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.167d	a5 0f		lda $0f				lda 	IFR0+IM1
.167f	85 10		sta $10				sta 	IFR0+IM2
.1681	a5 0e		lda $0e				lda 	IFR0+IM0
.1683	85 0f		sta $0f				sta 	IFR0+IM1
.1685	64 0e		stz $0e				stz 	IFR0+IM0
.1687	8a		txa				txa
.1688	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1689	66 10		ror $10				ror 	IFR0+IM2
.168b	66 0f		ror $0f				ror 	IFR0+IM1
.168d	66 0e		ror $0e				ror 	IFR0+IM0
.168f	4a		lsr a				lsr 	a
.1690	66 10		ror $10				ror 	IFR0+IM2
.1692	66 0f		ror $0f				ror 	IFR0+IM1
.1694	66 0e		ror $0e				ror 	IFR0+IM0
.1696	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.1698	11 1e		ora ($1e),y			ora 	(codePtr),y
.169a	85 0e		sta $0e				sta 	IFR0+IM0
.169c	c8		iny				iny 								; consume, loop back
.169d	80 d6		bra $1675			bra 	_ETMConstant
.169f					_ETMCExit:
.169f	60		rts				rts
.16a0					EXPCheckDecimalFollows:
.16a0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.16a2	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.16a4	d0 19		bne $16bf			bne 	_ETMCDExit
.16a6	c8		iny				iny 								; consume token.
.16a7	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.16a9	5a		phy				phy									; save current position
.16aa	48		pha				pha 								; save count of chars.
.16ab	38		sec				sec 								; address into YX : y + codePtr+1
.16ac	98		tya				tya
.16ad	65 1e		adc $1e				adc 	codePtr
.16af	aa		tax				tax
.16b0	a5 1f		lda $1f				lda 	codePtr+1
.16b2	69 00		adc #$00			adc 	#0
.16b4	a8		tay				tay
.16b5	68		pla				pla 								; get count.
.16b6	20 5d 2d	jsr $2d5d			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.16b9	7a		ply				ply 								; go to next token.
.16ba	98		tya				tya
.16bb	38		sec				sec
.16bc	71 1e		adc ($1e),y			adc 	(codePtr),y
.16be	a8		tay				tay
.16bf					_ETMCDExit:
.16bf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.16c0					EXPUnaryAbs:
.16c0	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 					; number to R0
.16c3	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.16c6	20 fd 2a	jsr $2afd			jsr 	IFloatAbsoluteR0
.16c9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.16ca					EXPUnaryAsc:
.16ca	20 d7 15	jsr $15d7			jsr 	EXPEvalString 					; string to R0, zTemp0
.16cd	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.16d0	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.16d2	f0 06		beq $16da			beq 	_EXAZero 						; if so return 0
.16d4	5a		phy				phy 									; otherwise get first character
.16d5	a0 01		ldy #$01			ldy 	#1
.16d7	b1 20		lda ($20),y			lda 	(zTemp0),y
.16d9	7a		ply				ply
.16da					_EXAZero:
.16da	a2 0e		ldx #$0e			ldx 	#IFR0
.16dc	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.16df	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.16e0					EXPUnaryChr:
.16e0	20 cb 15	jsr $15cb			jsr 	EXPEvalInteger8 				; expr
.16e3	48		pha				pha 									; push on stack
.16e4	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.16e7	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.16e9	20 07 26	jsr $2607			jsr 	StringTempAllocate
.16ec	68		pla				pla
.16ed	20 3c 26	jsr $263c			jsr 	StringTempWrite
.16f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.16f1					EXPUnaryDec:
.16f1	20 d7 15	jsr $15d7			jsr 	EXPEvalString 					; string to R0, zTemp0
.16f4	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.16f7	5a		phy				phy
.16f8	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.16fa	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.16fd	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.16ff	f0 3b		beq $173c			beq 	_EUDError 						; empty string
.1701	aa		tax				tax
.1702	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1704					_EUDLoop:
.1704	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.1706	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1708	90 02		bcc $170c			bcc 	_EUDNoCase
.170a	e9 20		sbc #$20			sbc 	#$20
.170c					_EUDNoCase:
.170c	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.170e	90 2c		bcc $173c			bcc 	_EUDError
.1710	c9 3a		cmp #$3a			cmp 	#'9'+1
.1712	90 0a		bcc $171e			bcc 	_EUDOkay
.1714	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1716	90 24		bcc $173c			bcc 	_EUDError
.1718	c9 47		cmp #$47			cmp 	#'F'+1
.171a	b0 20		bcs $173c			bcs 	_EUDError
.171c	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.171e					_EUDOkay:
.171e	29 0f		and #$0f			and 	#15 							; make constant
.1720	da		phx				phx
.1721	48		pha				pha
.1722	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.1724	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1727	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.172a	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.172d	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1730	68		pla				pla 									; pop constant and OR in
.1731	fa		plx				plx
.1732	05 0e		ora $0e				ora 	IFR0+IM0
.1734	85 0e		sta $0e				sta 	IFR0+IM0
.1736	c8		iny				iny 									; next
.1737	ca		dex				dex
.1738	d0 ca		bne $1704			bne 	_EUDLoop
.173a	7a		ply				ply
.173b	60		rts				rts
.173c					_EUDError:
.173c	4c a0 23	jmp $23a0		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.173f					EXPUnaryInlineDec:
.173f	4c 7e 23	jmp $237e		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1742					EXPUnaryPeek:
.1742	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 				; number to R0
.1745	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1748	b2 0e		lda ($0e)			lda 	(IFR0)
.174a	a2 0e		ldx #$0e			ldx 	#IFR0
.174c	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.174f	60		rts				rts
.1750					EXPUnaryDeek:
.1750	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 				; number to R0
.1753	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1756	5a		phy				phy
.1757	a0 01		ldy #$01			ldy 	#1
.1759	b1 0e		lda ($0e),y			lda 	(IFR0),y
.175b	7a		ply				ply
.175c	48		pha				pha
.175d	b2 0e		lda ($0e)			lda 	(IFR0)
.175f	a2 0e		ldx #$0e			ldx 	#IFR0
.1761	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.1764	68		pla				pla
.1765	85 0f		sta $0f				sta 	IFR0+IM1
.1767	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1768					EXPUnaryNull:
.1768	20 ea 15	jsr $15ea			jsr 	EXPTermValueR0
.176b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.176c					EXPUnaryFrac:
.176c	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 					; number to R0
.176f	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1772	20 63 2b	jsr $2b63			jsr 	IFloatFractionalR0
.1775	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1776					EXPUnaryInt:
.1776	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 					; number to R0
.1779	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.177c	20 b9 2b	jsr $2bb9			jsr 	IFloatIntegerR0
.177f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1780					EXPUnaryLen:
.1780	20 d7 15	jsr $15d7			jsr 	EXPEvalString 					; string to R0, zTemp0
.1783	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1786	b2 20		lda ($20)			lda 	(zTemp0)
.1788	a2 0e		ldx #$0e			ldx 	#IFR0
.178a	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.178d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.178e					EXPUnaryParenthesis:
.178e	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 					; number to R0
.1791	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1794	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1795					EXPUnaryRnd:
.1795	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 				; number to R0
.1798	20 11 25	jsr $2511			jsr 	ERRCheckRParen 				; )
.179b	a2 0e		ldx #$0e			ldx 	#IFR0
.179d	20 b4 17	jsr $17b4			jsr 	EXPLoadInRandom
.17a0	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.17a2	85 11		sta $11				sta 	IFR0+IExp
.17a4	60		rts				rts
.17a5					ExpUnaryRand:
.17a5	20 b8 15	jsr $15b8			jsr 	EXPEvalInteger 				; integer to R0
.17a8	20 11 25	jsr $2511			jsr 	ERRCheckRParen 				; )
.17ab	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.17ad	20 b4 17	jsr $17b4			jsr 	EXPLoadInRandom
.17b0	20 2a 2a	jsr $2a2a			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.17b3	60		rts				rts
.17b4					EXPLoadInRandom:
.17b4	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.17b7	20 c9 17	jsr $17c9			jsr 	EXPRandom32
.17ba	95 00		sta $00,x			sta 	IM0,x
.17bc	20 c9 17	jsr $17c9			jsr 	EXPRandom32
.17bf	95 01		sta $01,x			sta 	IM1,x
.17c1	20 c9 17	jsr $17c9			jsr 	EXPRandom32
.17c4	29 7f		and #$7f			and 	#$7F
.17c6	95 02		sta $02,x			sta 	IM2,x
.17c8	60		rts				rts
.17c9					EXPRandom32:
.17c9	5a		phy				phy
.17ca	a0 08		ldy #$08			ldy 	#8
.17cc	ad 0b 05	lda $050b			lda 	EXPSeed+0
.17cf	0d 0c 05	ora $050c			ora 	EXPSeed+1
.17d2	0d 0d 05	ora $050d			ora 	EXPSeed+2
.17d5	0d 0e 05	ora $050e			ora 	EXPSeed+3
.17d8	d0 08		bne $17e2			bne 	_EXPRNoReset
.17da	ee 0b 05	inc $050b			inc 	EXPSeed+0
.17dd	a0 10		ldy #$10			ldy 	#16
.17df	8c 0e 05	sty $050e			sty 	EXPSeed+3
.17e2					_EXPRNoReset:
.17e2	ad 0b 05	lda $050b			lda 	EXPSeed+0
.17e5					_EXPRLoop:
.17e5	0a		asl a				asl		a
.17e6	2e 0c 05	rol $050c			rol 	EXPSeed+1
.17e9	2e 0d 05	rol $050d			rol 	EXPSeed+2
.17ec	2e 0e 05	rol $050e			rol 	EXPSeed+3
.17ef	90 02		bcc $17f3			bcc 	_EXPRNoEOR
.17f1	49 c5		eor #$c5			eor 	#$C5
.17f3					_EXPRNoEOR:
.17f3	88		dey				dey
.17f4	d0 ef		bne $17e5			bne 	_EXPRLoop
.17f6	8d 0b 05	sta $050b			sta 	EXPSeed+0
.17f9	7a		ply				ply
.17fa	60		rts				rts
.050b					EXPSeed:
>050b							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.17fb					EXPUnarySgn:
.17fb	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 					; number to R0
.17fe	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1801	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.1803	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister
.1806	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.1808	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.180b	a2 12		ldx #$12			ldx 	#IFR1
.180d	20 87 2b	jsr $2b87			jsr 	IFloatCompare 					; compare R1 vs 0.
.1810	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1811					EXPUnarySqr:
.1811	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 					; number to R0
.1814	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1817	20 05 2b	jsr $2b05			jsr 	IFloatSquareRootR0 				; square root.
.181a	b0 01		bcs $181d			bcs 	_EUSValue
.181c	60		rts				rts
.181d					_EUSValue:
.181d	4c 8f 23	jmp $238f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1820					EXPUnaryHex:
.1820	20 b8 15	jsr $15b8			jsr 	EXPEvalInteger 					; expr
.1823	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1826	5a		phy				phy
.1827	a9 10		lda #$10			lda 	#16
.1829	20 5a 2c	jsr $2c5a			jsr 	IFloatIntegerToStringR0
.182c	80 0a		bra $1838			bra 	EUSMain
.182e					EXPUnaryStr:
.182e	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 					; expr
.1831	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.1834	5a		phy				phy
.1835	20 b6 2c	jsr $2cb6			jsr 	IFloatFloatToStringR0 			; convert to string
.1838					EUSMain:
.1838	b0 18		bcs $1852			bcs 	_EUSError
.183a	86 20		stx $20				stx 	zTemp0 							; save string address
.183c	84 21		sty $21				sty 	zTemp0+1
.183e	48		pha				pha 									; save count
.183f	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1841	20 07 26	jsr $2607			jsr 	StringTempAllocate
.1844	fa		plx				plx 									; count in X
.1845	a0 00		ldy #$00			ldy 	#0
.1847					_EUSCopy:
.1847	b1 20		lda ($20),y			lda 	(zTemp0),y
.1849	c8		iny				iny
.184a	20 3c 26	jsr $263c			jsr 	StringTempWrite
.184d	ca		dex				dex
.184e	d0 f7		bne $1847			bne	 	_EUSCopy
.1850	7a		ply				ply
.1851	60		rts				rts
.1852					_EUSError:
.1852	4c 8f 23	jmp $238f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1855					EXPUnaryInlineString:
.1855	18		clc				clc 								; physical address -> IM0,1
.1856	98		tya				tya
.1857	65 1e		adc $1e				adc 	codePtr
.1859	85 0e		sta $0e				sta 	IFR0+IM0
.185b	a5 1f		lda $1f				lda 	codePtr+1
.185d	69 00		adc #$00			adc 	#0
.185f	85 0f		sta $0f				sta 	IFR0+IM1
.1861	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.1863	a9 80		lda #$80			lda 	#$80
.1865	85 11		sta $11				sta 	IFR0+IExp
.1867	98		tya				tya	 								; skip over it.
.1868	38		sec				sec
.1869	71 1e		adc ($1e),y			adc 	(codePtr),y
.186b	a8		tay				tay
.186c	60		rts				rts
.186d					_EXPUISRange:
.186d	4c 8f 23	jmp $238f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1870					EXPUnaryLeft:
.1870	20 b6 18	jsr $18b6			jsr 	EXPCommonStart 					; <string>,
.1873	48		pha				pha 									; save string address on stack
.1874	da		phx				phx
.1875	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1877	48		pha				pha
.1878	20 cb 15	jsr $15cb			jsr 	EXPEvalInteger8 				; characters to do
.187b	80 44		bra $18c1			bra 	EXPSubstringCommon
.187d					EXPUnaryRight:
.187d	20 b6 18	jsr $18b6			jsr 	EXPCommonStart 					; <string>,
.1880	48		pha				pha 									; save string address on stack
.1881	da		phx				phx
.1882	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.1884	48		pha				pha
.1885	20 cb 15	jsr $15cb			jsr 	EXPEvalInteger8 				; characters to do
.1888	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.188a	68		pla				pla
.188b	38		sec				sec
.188c	e5 20		sbc $20				sbc 	zTemp0
.188e	b0 02		bcs $1892			bcs 	_EUROffLeft
.1890	a9 00		lda #$00			lda 	#0
.1892					_EUROffLeft:
.1892	48		pha				pha 									; start pos
.1893	a9 ff		lda #$ff			lda 	#255
.1895	80 2a		bra $18c1			bra 	EXPSubstringCommon
.1897					EXPUnaryMid:
.1897	20 b6 18	jsr $18b6			jsr 	EXPCommonStart 					; <string>,
.189a	48		pha				pha 									; save string address on stack
.189b	da		phx				phx
.189c	20 cb 15	jsr $15cb			jsr 	EXPEvalInteger8 				; characters start
.189f	f0 12		beq $18b3			beq 	_EUSError 						; 1 is left
.18a1	3a		dec a				dec 	a 								; zero based.
.18a2	48		pha				pha
.18a3	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.18a5	c9 99		cmp #$99			cmp 	#PR_COMMA
.18a7	f0 04		beq $18ad			beq 	_EUMLength 						; if so m is provided
.18a9	a9 ff		lda #$ff			lda 	#255 							; default m
.18ab	80 14		bra $18c1			bra 	EXPSubstringCommon
.18ad					_EUMLength:
.18ad	c8		iny				iny 									; consume comma
.18ae	20 cb 15	jsr $15cb			jsr 	EXPEvalInteger8 				; characters to do
.18b1	80 0e		bra $18c1			bra 	EXPSubstringCommon
.18b3					_EUSError:
.18b3	4c a0 23	jmp $23a0		jmp	ErrorV_value
.18b6					EXPCommonStart:
.18b6	20 d7 15	jsr $15d7			jsr 	EXPEvalString
.18b9	20 19 25	jsr $2519			jsr 	ERRCheckComma
.18bc	a5 0e		lda $0e				lda 	IFR0+IM0
.18be	a6 0f		ldx $0f				ldx 	IFR0+IM1
.18c0	60		rts				rts
.18c1					EXPSubstringCommon:
.18c1	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.18c3	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; check right bracket.
.18c6	68		pla				pla 									; start position
.18c7	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.18c9	fa		plx				plx 									; get string address to zTemp2.
.18ca	86 25		stx $25				stx 	zTemp2+1
.18cc	68		pla				pla
.18cd	85 24		sta $24				sta 	zTemp2
.18cf	38		sec				sec 									; length - start is the max count of chars
.18d0	b2 24		lda ($24)			lda 	(zTemp2)
.18d2	e5 23		sbc $23				sbc 	zTemp1+1
.18d4	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.18d6	b0 02		bcs $18da			bcs 	_EXPSSNoTrim
.18d8	85 22		sta $22				sta 	zTemp1 							; update count with available
.18da					_EXPSSNoTrim:
.18da	a5 22		lda $22				lda 	zTemp1 							; chars required.
.18dc	20 07 26	jsr $2607			jsr 	StringTempAllocate 				; allocate memory for it.
.18df	a5 22		lda $22				lda 	zTemp1 							; zero length string
.18e1	f0 15		beq $18f8			beq 	_EXPSSExit
.18e3	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.18e5	d2 24		cmp ($24)			cmp 	(zTemp2)
.18e7	b0 0f		bcs $18f8			bcs 	_EXPSSExit
.18e9	5a		phy				phy
.18ea	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.18ec	c8		iny				iny 									; +1 for the length byte
.18ed					_EXPSSCopy:
.18ed	b1 24		lda ($24),y			lda 	(zTemp2),y
.18ef	20 3c 26	jsr $263c			jsr 	StringTempWrite
.18f2	c8		iny				iny
.18f3	c6 22		dec $22				dec 	zTemp1
.18f5	d0 f6		bne $18ed			bne 	_EXPSSCopy
.18f7	7a		ply				ply
.18f8					_EXPSSExit:
.18f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.18f9					EXPUnaryVal:
.18f9	20 d7 15	jsr $15d7			jsr 	EXPEvalString 					; string to R0, zTemp0
.18fc	20 11 25	jsr $2511			jsr 	ERRCheckRParen 					; )
.18ff	5a		phy				phy
.1900	18		clc				clc
.1901	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.1903	69 01		adc #$01			adc 	#1
.1905	aa		tax				tax
.1906	a5 21		lda $21				lda 	zTemp0+1
.1908	69 00		adc #$00			adc 	#0
.190a	a8		tay				tay
.190b	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.190d	20 1d 2d	jsr $2d1d			jsr 	IFloatStringToFloatR0 			; do conversion
.1910	b0 02		bcs $1914			bcs 	_EUVError
.1912	7a		ply				ply
.1913	60		rts				rts
.1914					_EUVError:
.1914	4c a0 23	jmp $23a0		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1917					BinaryPrecedence:
>1917	02					.byte	 2	; $ef =
>1918	02					.byte	 2	; $f0 <>
>1919	02					.byte	 2	; $f1 <=
>191a	02					.byte	 2	; $f2 <
>191b	02					.byte	 2	; $f3 >=
>191c	02					.byte	 2	; $f4 >
>191d	01					.byte	 1	; $f5 XOR
>191e	01					.byte	 1	; $f6 OR
>191f	01					.byte	 1	; $f7 AND
>1920	04					.byte	 4	; $f8 DIV
>1921	04					.byte	 4	; $f9 MOD
>1922	04					.byte	 4	; $fa <<
>1923	04					.byte	 4	; $fb >>
>1924	04					.byte	 4	; $fc /
>1925	04					.byte	 4	; $fd *
>1926	03					.byte	 3	; $fe -
>1927	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1928					StructureOffsets:
>1928	01					.byte	1  	; $80 REPEAT
>1929	ff					.byte	255	; $81 UNTIL
>192a	01					.byte	1  	; $82 WHILE
>192b	ff					.byte	255	; $83 WEND
>192c	01					.byte	1  	; $84 IF
>192d	ff					.byte	255	; $85 ENDIF
>192e	01					.byte	1  	; $86 DO
>192f	ff					.byte	255	; $87 LOOP
>1930	01					.byte	1  	; $88 PROC
>1931	ff					.byte	255	; $89 ENDPROC
>1932	01					.byte	1  	; $8a FOR
>1933	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1934					StandardTokens:
>1934	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>193b	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1941	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1947	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>194c	02 49 46				.byte	$02,$49,$46                             	; $84 if
>194f	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1955	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1958	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>195d	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1962	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>196a	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>196e	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1973	00					.byte	$00                                     	; $8c [[end]]
>1974	00					.byte	$00                                     	; $8d [[shift]]
>1975	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>197a	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>197f	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1982	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1987	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>198b	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1991	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1997	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>199c	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>19a0	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>19a4	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>19a9	01 2c					.byte	$01,$2c                                 	; $99 ,
>19ab	01 3b					.byte	$01,$3b                                 	; $9a ;
>19ad	01 3a					.byte	$01,$3a                                 	; $9b :
>19af	01 27					.byte	$01,$27                                 	; $9c '
>19b1	01 29					.byte	$01,$29                                 	; $9d )
>19b3	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>19b7	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>19bd	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>19c1	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>19c5	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>19ca	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>19ce	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>19d5	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>19da	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>19df	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>19e4	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>19e9	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>19ee	00					.byte	0											; $aa
>19ef	00					.byte	0											; $ab
>19f0	00					.byte	0											; $ac
>19f1	00					.byte	0											; $ad
>19f2	00					.byte	0											; $ae
>19f3	00					.byte	0											; $af
>19f4	00					.byte	0											; $b0
>19f5	00					.byte	0											; $b1
>19f6	00					.byte	0											; $b2
>19f7	00					.byte	0											; $b3
>19f8	00					.byte	0											; $b4
>19f9	00					.byte	0											; $b5
>19fa	00					.byte	0											; $b6
>19fb	00					.byte	0											; $b7
>19fc	00					.byte	0											; $b8
>19fd	00					.byte	0											; $b9
>19fe	00					.byte	0											; $ba
>19ff	00					.byte	0											; $bb
>1a00	00					.byte	0											; $bc
>1a01	00					.byte	0											; $bd
>1a02	00					.byte	0											; $be
>1a03	00					.byte	0											; $bf
>1a04	00					.byte	0											; $c0
>1a05	00					.byte	0											; $c1
>1a06	00					.byte	0											; $c2
>1a07	00					.byte	0											; $c3
>1a08	00					.byte	0											; $c4
>1a09	00					.byte	0											; $c5
>1a0a	00					.byte	0											; $c6
>1a0b	00					.byte	0											; $c7
>1a0c	00					.byte	0											; $c8
>1a0d	00					.byte	0											; $c9
>1a0e	00					.byte	0											; $ca
>1a0f	00					.byte	0											; $cb
>1a10	00					.byte	0											; $cc
>1a11	00					.byte	0											; $cd
>1a12	00					.byte	0											; $ce
>1a13	00					.byte	0											; $cf
>1a14	00					.byte	0											; $d0
>1a15	00					.byte	0											; $d1
>1a16	00					.byte	0											; $d2
>1a17	00					.byte	0											; $d3
>1a18	00					.byte	0											; $d4
>1a19	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a1f	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1a25	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1a2d	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1a34	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1a3a	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1a40	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1a45	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1a4a	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1a4f	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1a54	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1a59	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1a5f	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1a64	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1a6c	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1a73	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1a78	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1a7d	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1a83	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1a88	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1a8e	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1a93	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1a99	01 28					.byte	$01,$28                                 	; $eb (
>1a9b	01 24					.byte	$01,$24                                 	; $ec $
>1a9d	00					.byte	$00                                     	; $ed [[decimal]]
>1a9e	00					.byte	$00                                     	; $ee [[string]]
>1a9f	01 3d					.byte	$01,$3d                                 	; $ef =
>1aa1	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1aa4	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1aa7	01 3c					.byte	$01,$3c                                 	; $f2 <
>1aa9	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1aac	01 3e					.byte	$01,$3e                                 	; $f4 >
>1aae	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1ab2	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1ab5	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1ab9	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1abd	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1ac1	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1ac4	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1ac7	01 2f					.byte	$01,$2f                                 	; $fc /
>1ac9	01 2a					.byte	$01,$2a                                 	; $fd *
>1acb	01 2d					.byte	$01,$2d                                 	; $fe -
>1acd	01 2b					.byte	$01,$2b                                 	; $ff +
>1acf	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1ad0					VectorTable:
>1ad0	72 22					.word	Command_REPEAT           ; $80 REPEAT
>1ad2	7b 22					.word	Command_UNTIL            ; $81 UNTIL
>1ad4	53 23					.word	Command_WHILE            ; $82 WHILE
>1ad6	72 23					.word	Command_WEND             ; $83 WEND
>1ad8	4a 22					.word	IfCommand                ; $84 IF
>1ada	71 22					.word	EndIf                    ; $85 ENDIF
>1adc	e7 20					.word	Command_DO               ; $86 DO
>1ade	ff 20					.word	Command_LOOP             ; $87 LOOP
>1ae0	ed 13					.word	NoExec08                 ; $88 PROC
>1ae2	db 20					.word	Command_ENDPROC          ; $89 ENDPROC
>1ae4	08 21					.word	Command_FOR              ; $8a FOR
>1ae6	95 21					.word	Command_NEXT             ; $8b NEXT
>1ae8	85 13					.word	RUNEndOfLine             ; $8c [[END]]
>1aea	cf 13					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1aec	6a 22					.word	ElseCode                 ; $8e ELSE
>1aee	ed 13					.word	NoExec01                 ; $8f THEN
>1af0	ed 13					.word	NoExec02                 ; $90 TO
>1af2	ed 13					.word	NoExec03                 ; $91 STEP
>1af4	1e 12					.word	CommandLET               ; $92 LET
>1af6	b9 11					.word	Command_Print            ; $93 PRINT
>1af8	8e 26					.word	NotImplemented           ; $94 INPUT
>1afa	9f 20					.word	Command_CALL             ; $95 CALL
>1afc	d8 13					.word	Command_Sys              ; $96 SYS
>1afe	6c 13					.word	Command_REM              ; $97 REM
>1b00	f0 20					.word	Command_EXIT             ; $98 EXIT
>1b02	ed 13					.word	NoExec04                 ; $99 ,
>1b04	ed 13					.word	NoExec05                 ; $9a ;
>1b06	ed 13					.word	NoExec06                 ; $9b :
>1b08	6c 13					.word	Command_REM2             ; $9c '
>1b0a	ed 13					.word	NoExec07                 ; $9d )
>1b0c	73 10					.word	CommandDIM               ; $9e DIM
>1b0e	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1b10	63 13					.word	Command_NEW              ; $a0 NEW
>1b12	79 13					.word	Command_RUN              ; $a1 RUN
>1b14	d5 13					.word	Command_STOP             ; $a2 STOP
>1b16	d2 13					.word	Command_END              ; $a3 END
>1b18	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b1a	96 12					.word	Command_LIST             ; $a5 LIST
>1b1c	8e 26					.word	NotImplemented           ; $a6 SAVE
>1b1e	8e 26					.word	NotImplemented           ; $a7 LOAD
>1b20	92 11					.word	Command_Poke             ; $a8 POKE
>1b22	8f 11					.word	Command_Doke             ; $a9 DOKE
>1b24	8e 26					.word	NotImplemented           ; $aa
>1b26	8e 26					.word	NotImplemented           ; $ab
>1b28	8e 26					.word	NotImplemented           ; $ac
>1b2a	8e 26					.word	NotImplemented           ; $ad
>1b2c	8e 26					.word	NotImplemented           ; $ae
>1b2e	8e 26					.word	NotImplemented           ; $af
>1b30	8e 26					.word	NotImplemented           ; $b0
>1b32	8e 26					.word	NotImplemented           ; $b1
>1b34	8e 26					.word	NotImplemented           ; $b2
>1b36	8e 26					.word	NotImplemented           ; $b3
>1b38	8e 26					.word	NotImplemented           ; $b4
>1b3a	8e 26					.word	NotImplemented           ; $b5
>1b3c	8e 26					.word	NotImplemented           ; $b6
>1b3e	8e 26					.word	NotImplemented           ; $b7
>1b40	8e 26					.word	NotImplemented           ; $b8
>1b42	8e 26					.word	NotImplemented           ; $b9
>1b44	8e 26					.word	NotImplemented           ; $ba
>1b46	8e 26					.word	NotImplemented           ; $bb
>1b48	8e 26					.word	NotImplemented           ; $bc
>1b4a	8e 26					.word	NotImplemented           ; $bd
>1b4c	8e 26					.word	NotImplemented           ; $be
>1b4e	8e 26					.word	NotImplemented           ; $bf
>1b50	8e 26					.word	NotImplemented           ; $c0
>1b52	8e 26					.word	NotImplemented           ; $c1
>1b54	8e 26					.word	NotImplemented           ; $c2
>1b56	8e 26					.word	NotImplemented           ; $c3
>1b58	8e 26					.word	NotImplemented           ; $c4
>1b5a	8e 26					.word	NotImplemented           ; $c5
>1b5c	8e 26					.word	NotImplemented           ; $c6
>1b5e	8e 26					.word	NotImplemented           ; $c7
>1b60	8e 26					.word	NotImplemented           ; $c8
>1b62	8e 26					.word	NotImplemented           ; $c9
>1b64	8e 26					.word	NotImplemented           ; $ca
>1b66	8e 26					.word	NotImplemented           ; $cb
>1b68	8e 26					.word	NotImplemented           ; $cc
>1b6a	8e 26					.word	NotImplemented           ; $cd
>1b6c	8e 26					.word	NotImplemented           ; $ce
>1b6e	8e 26					.word	NotImplemented           ; $cf
>1b70	8e 26					.word	NotImplemented           ; $d0
>1b72	8e 26					.word	NotImplemented           ; $d1
>1b74	8e 26					.word	NotImplemented           ; $d2
>1b76	8e 26					.word	NotImplemented           ; $d3
>1b78	8e 26					.word	NotImplemented           ; $d4
>1b7a	50 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1b7c	42 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1b7e	7d 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1b80	70 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1b82	97 18					.word	EXPUnaryMid              ; $d9 MID$(
>1b84	2e 18					.word	EXPUnaryStr              ; $da STR$(
>1b86	f9 18					.word	EXPUnaryVal              ; $db VAL(
>1b88	fb 17					.word	EXPUnarySgn              ; $dc SGN(
>1b8a	c0 16					.word	EXPUnaryAbs              ; $dd ABS(
>1b8c	80 17					.word	EXPUnaryLen              ; $de LEN(
>1b8e	11 18					.word	EXPUnarySqr              ; $df SQR(
>1b90	e0 16					.word	EXPUnaryChr              ; $e0 CHR$(
>1b92	ca 16					.word	EXPUnaryAsc              ; $e1 ASC(
>1b94	8e 26					.word	NotImplemented           ; $e2 INKEY$(
>1b96	8e 26					.word	NotImplemented           ; $e3 EVENT(
>1b98	8e 26					.word	NotImplemented           ; $e4 TIME
>1b9a	76 17					.word	EXPUnaryInt              ; $e5 INT(
>1b9c	6c 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1b9e	f1 16					.word	EXPUnaryDec              ; $e7 DEC(
>1ba0	20 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1ba2	95 17					.word	EXPUnaryRnd              ; $e9 RND(
>1ba4	a5 17					.word	ExpUnaryRand             ; $ea RAND(
>1ba6	8e 17					.word	EXPUnaryParenthesis      ; $eb (
>1ba8	68 17					.word	EXPUnaryNull             ; $ec $
>1baa	3f 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1bac	55 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1bae	aa 14					.word	EXPCompareEqual          ; $ef =
>1bb0	c5 14					.word	EXPCompareNotEqual       ; $f0 <>
>1bb2	ce 14					.word	EXPCompareLessEqual      ; $f1 <=
>1bb4	b3 14					.word	EXPCompareLess           ; $f2 <
>1bb6	d7 14					.word	EXPCompareGreaterEqual   ; $f3 >=
>1bb8	bc 14					.word	EXPCompareGreater        ; $f4 >
>1bba	57 14					.word	EXPBinXor                ; $f5 XOR
>1bbc	4b 14					.word	EXPBinOr                 ; $f6 OR
>1bbe	3f 14					.word	EXPBinAnd                ; $f7 AND
>1bc0	17 14					.word	EXPBinIDiv               ; $f8 DIV
>1bc2	28 14					.word	EXPBinIMod               ; $f9 MOD
>1bc4	22 15					.word	EXPBinLeft               ; $fa <<
>1bc6	2a 15					.word	EXPBinRight              ; $fb >>
>1bc8	0b 14					.word	EXPBinFDiv               ; $fc /
>1bca	02 14					.word	EXPBinMul                ; $fd *
>1bcc	f9 13					.word	EXPBinSub                ; $fe -
>1bce	f0 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1bd0					TOKDetokenise:
.1bd0	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.1bd2	84 25		sty $25				sty 	zTemp2+1
.1bd4	9c 11 05	stz $0511			stz		TOKLastCharacter 			; clear last character
.1bd7					_TOKDLoop:
.1bd7	20 06 1c	jsr $1c06			jsr 	TOKDGet 					; get next
.1bda	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1bdc	f0 26		beq $1c04			beq 	_TOKDExit
.1bde	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1be0	f0 1d		beq $1bff			beq 	_TOKDDataItem
.1be2	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1be4	f0 19		beq $1bff			beq 	_TOKDDataItem
.1be6	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1be8	10 05		bpl $1bef			bpl 	_TOKDNotToken
.1bea	20 ce 1c	jsr $1cce			jsr 	TOKDToken 					; token to text.
.1bed	80 e8		bra $1bd7			bra 	_TOKDLoop
.1bef					_TOKDNotToken:
.1bef	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1bf1	90 05		bcc $1bf8			bcc 	_TOKDNotIdentifier
.1bf3	20 41 1c	jsr $1c41			jsr 	TOKDIdentifier
.1bf6	80 df		bra $1bd7			bra 	_TOKDLoop
.1bf8					_TOKDNotIdentifier:
.1bf8	a0 0a		ldy #$0a			ldy 	#10
.1bfa	20 8a 1c	jsr $1c8a			jsr 	TOKDInteger
.1bfd	80 d8		bra $1bd7			bra 	_TOKDLoop
.1bff					_TOKDDataItem:
.1bff	20 1c 1c	jsr $1c1c			jsr 	TOKDDataItem
.1c02	80 d3		bra $1bd7			bra 	_TOKDLoop
.1c04					_TOKDExit:
.1c04	18		clc				clc
.1c05	60		rts				rts
.1c06	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.1c08	e6 24		inc $24				inc 	zTemp2
.1c0a	d0 02		bne $1c0e			bne 	_TKDGExit
.1c0c	e6 25		inc $25				inc 	zTemp2+1
.1c0e					_TKDGExit:
.1c0e	60		rts				rts
.1c0f					TOKDOutput:
.1c0f	8d 11 05	sta $0511			sta 	TOKLastCharacter
.1c12	6c 0f 05	jmp ($050f)			jmp 	(TOKOutputMethod)
.1c15					TOKSetDetokeniseOutput:
.1c15	8e 0f 05	stx $050f			stx 	TOKOutputMethod
.1c18	8c 10 05	sty $0510			sty 	TOKOutputMethod+1
.1c1b	60		rts				rts
.050f					TOKOutputMethod:
>050f							.fill 	2
.0511					TOKLastCharacter:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c1c					TOKDDataItem:
.1c1c	a8		tay				tay 								; type in Y
.1c1d	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c1f	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1c21	f0 02		beq $1c25			beq 	_TOKDDIsString
.1c23	a9 2e		lda #$2e			lda 	#'.'
.1c25					_TOKDDIsString:
.1c25	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput 					; dump it
.1c28	20 06 1c	jsr $1c06			jsr 	TOKDGet 					; get length into X
.1c2b	aa		tax				tax
.1c2c					_TOKDDOutput:
.1c2c	ca		dex				dex 								; are we complete
.1c2d	30 08		bmi $1c37			bmi 	_TOKDDEnd
.1c2f	20 06 1c	jsr $1c06			jsr 	TOKDGet 					; get character and output it
.1c32	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1c35	80 f5		bra $1c2c			bra 	_TOKDDOutput
.1c37					_TOKDDEnd:
.1c37	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1c39	d0 05		bne $1c40			bne 	_TOKDDNotString
.1c3b	a9 22		lda #$22			lda 	#'"'
.1c3d	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1c40					_TOKDDNotString:
.1c40	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1c41					TOKDIdentifier:
.1c41	a0 ff		ldy #$ff			ldy 	#$FF
.1c43	8c 12 05	sty $0512			sty 	TOKDIFirstChar
.1c46					_TOKDLoop:
.1c46	a8		tay				tay 								; token in Y
.1c47	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1c49	c0 64		cpy #$64			cpy 	#$64
.1c4b	f0 11		beq $1c5e			beq 	_TOKDIOutput
.1c4d	a9 5f		lda #$5f			lda 	#'_'
.1c4f	c0 65		cpy #$65			cpy 	#$65
.1c51	f0 0b		beq $1c5e			beq 	_TOKDIOutput
.1c53	98		tya				tya 								; handle a-z
.1c54	18		clc				clc
.1c55	69 21		adc #$21			adc	 	#$21
.1c57	c0 5a		cpy #$5a			cpy 	#$5A
.1c59	90 03		bcc $1c5e			bcc 	_TOKDIOutput
.1c5b	38		sec				sec 								; handle 0-9
.1c5c	e9 4b		sbc #$4b			sbc 	#$4B
.1c5e					_TOKDIOutput:
.1c5e	2c 12 05	bit $0512			bit 	TOKDIFirstChar
.1c61	10 08		bpl $1c6b			bpl 	_TOKDINoSpacing
.1c63	48		pha				pha
.1c64	20 00 1d	jsr $1d00			jsr 	TOKDSpacing
.1c67	9c 12 05	stz $0512			stz 	TOKDIFirstChar
.1c6a	68		pla				pla
.1c6b					_TOKDINoSpacing:
.1c6b	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1c6e	20 06 1c	jsr $1c06			jsr 	TOKDGet 					; get next token
.1c71	c9 7c		cmp #$7c			cmp 	#$7C
.1c73	90 d1		bcc $1c46			bcc 	_TOKDLoop
.1c75	f0 12		beq $1c89			beq 	_TOKDIExit 					; it's a number, no tail.
.1c77	4a		lsr a				lsr 	a 							; string ?
.1c78	90 07		bcc $1c81			bcc 	_TOKDICheckArray
.1c7a	48		pha				pha
.1c7b	a9 24		lda #$24			lda 	#"$"
.1c7d	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1c80	68		pla				pla
.1c81					_TOKDICheckArray:
.1c81	4a		lsr a				lsr 	a 							; array ?
.1c82	90 05		bcc $1c89			bcc 	_TOKDIExit
.1c84	a9 28		lda #$28			lda 	#"("
.1c86	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1c89					_TOKDIExit:
.1c89	60		rts				rts
.0512					TOKDIFirstChar:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1c8a					TOKDInteger:
.1c8a	5a		phy				phy 								; save base
.1c8b	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.1c8d	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.1c90					_TOKDILoop:
.1c90	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.1c92	c9 40		cmp #$40			cmp 	#$40
.1c94	b0 1d		bcs $1cb3			bcs 	_TOKDIHaveInteger
.1c96	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.1c98	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1c9b	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1c9e	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1ca1	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1ca4	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1ca7	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1caa	20 06 1c	jsr $1c06			jsr 	TOKDGet 					; OR byte in.
.1cad	05 0e		ora $0e				ora 	IFR0+IM0
.1caf	85 0e		sta $0e				sta 	IFR0+IM0
.1cb1	80 dd		bra $1c90			bra 	_TOKDILoop
.1cb3					_TOKDIHaveInteger:
.1cb3	7a		ply				ply 								; restore base
.1cb4	98		tya				tya 								; base in A
.1cb5	20 5a 2c	jsr $2c5a			jsr 	IFloatIntegerToStringR0
.1cb8	86 20		stx $20				stx 	zTemp0
.1cba	84 21		sty $21				sty 	zTemp0+1
.1cbc	b2 20		lda ($20)			lda 	(zTemp0)
.1cbe	20 00 1d	jsr $1d00			jsr 	TOKDSpacing 				; check spacing okay.
.1cc1	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1cc3					_TOKDOutput:
.1cc3	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cc5	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1cc8	c8		iny				iny
.1cc9	b1 20		lda ($20),y			lda 	(zTemp0),y
.1ccb	d0 f6		bne $1cc3			bne 	_TOKDOutput
.1ccd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1cce					TOKDToken:
.1cce	a2 34		ldx #$34			ldx 	#StandardTokens & $FF
.1cd0	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1cd2					_TOKDSearch:
.1cd2	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.1cd4	84 21		sty $21				sty 	zTemp0+1
.1cd6	aa		tax				tax 								; token ID in X.
.1cd7					_TOKDFind:
.1cd7	ca		dex				dex 								; reached the start
.1cd8	10 0d		bpl $1ce7			bpl 	_TOKDFound
.1cda	38		sec				sec 								; go to next entry
.1cdb	b2 20		lda ($20)			lda 	(zTemp0)
.1cdd	65 20		adc $20				adc 	zTemp0
.1cdf	85 20		sta $20				sta 	zTemp0
.1ce1	90 f4		bcc $1cd7			bcc 	_TOKDFind
.1ce3	e6 21		inc $21				inc 	zTemp0+1
.1ce5	80 f0		bra $1cd7			bra 	_TOKDFind
.1ce7					_TOKDFound:
.1ce7	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.1ce9	f0 14		beq $1cff			beq 	_TOKDExit
.1ceb	aa		tax				tax
.1cec	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1cee	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.1cf0	20 00 1d	jsr $1d00			jsr 	TOKDSpacing
.1cf3					_TOKDOutput:
.1cf3	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cf5	20 5a 20	jsr $205a			jsr 	TOKToLower
.1cf8	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1cfb	c8		iny				iny
.1cfc	ca		dex				dex
.1cfd	d0 f4		bne $1cf3			bne 	_TOKDOutput
.1cff					_TOKDExit:
.1cff	60		rts				rts
.1d00					TOKDSpacing:
.1d00	20 71 20	jsr $2071			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1d03	90 0d		bcc $1d12			bcc 	_TOKDSExit
.1d05	ad 11 05	lda $0511			lda 	TOKLastCharacter			; and last character also alphanumeric
.1d08	20 71 20	jsr $2071			jsr 	TOKIsIdentifierElement
.1d0b	90 05		bcc $1d12			bcc 	_TOKDSExit
.1d0d	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d0f	20 0f 1c	jsr $1c0f			jsr 	TOKDOutput
.1d12					_TOKDSExit:
.1d12	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d13					PGMDeleteLine:
.1d13	20 c6 1d	jsr $1dc6			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d16	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d18	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1d1b	85 23		sta $23				sta 	zTemp1+1
.1d1d					_PGMDLoop:
.1d1d	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.1d1f	38		sec				sec
.1d20	f0 3a		beq $1d5c			beq 	_PGMDExit
.1d22	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1d24	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d26	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d29	d0 08		bne $1d33			bne 	_PGMDNext
.1d2b	c8		iny				iny
.1d2c	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d2e	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1d31	f0 0d		beq $1d40			beq 	_PGMDDelete
.1d33					_PGMDNext:
.1d33	18		clc				clc
.1d34	b2 22		lda ($22)			lda 	(zTemp1)
.1d36	65 22		adc $22				adc 	zTemp1
.1d38	85 22		sta $22				sta 	zTemp1
.1d3a	90 e1		bcc $1d1d			bcc 	_PGMDLoop
.1d3c	e6 23		inc $23				inc 	zTemp1+1
.1d3e	80 dd		bra $1d1d			bra 	_PGMDLoop
.1d40					_PGMDDelete:
.1d40	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.1d42	a8		tay				tay
.1d43					_PGMDCopy:
.1d43	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.1d45	92 22		sta ($22)			sta 	(zTemp1)
.1d47	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.1d49	c5 20		cmp $20				cmp 	zTemp0
.1d4b	d0 07		bne $1d54			bne 	_PGMDNext2
.1d4d	a5 23		lda $23				lda 	zTemp1+1
.1d4f	c5 21		cmp $21				cmp 	zTemp0+1
.1d51	18		clc				clc
.1d52	f0 08		beq $1d5c			beq 	_PGMDExit
.1d54					_PGMDNext2:
.1d54	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.1d56	d0 eb		bne $1d43			bne 	_PGMDCopy
.1d58	e6 23		inc $23				inc 	zTemp1+1
.1d5a	80 e7		bra $1d43			bra 	_PGMDCopy
.1d5c					_PGMDExit:
.1d5c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1d5d					PGMInsertLine:
.1d5d	20 c6 1d	jsr $1dc6			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d60	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d62	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1d65	85 23		sta $23				sta 	zTemp1+1
.1d67					_PGMILoop:
.1d67	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1d69	f0 1c		beq $1d87			beq 	_PGMIInsert
.1d6b	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1d6d	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d6f	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d72	c8		iny				iny
.1d73	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d75	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1d78	b0 0d		bcs $1d87			bcs 	_PGMIInsert 				; insert here.
.1d7a	18		clc				clc
.1d7b	b2 22		lda ($22)			lda 	(zTemp1)
.1d7d	65 22		adc $22				adc 	zTemp1
.1d7f	85 22		sta $22				sta 	zTemp1
.1d81	90 e4		bcc $1d67			bcc 	_PGMILoop
.1d83	e6 23		inc $23				inc 	zTemp1+1
.1d85	80 e0		bra $1d67			bra 	_PGMILoop
.1d87					_PGMIInsert:
.1d87	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1d8a					_PGMIInsertLoop:
.1d8a	b2 20		lda ($20)			lda 	(zTemp0)
.1d8c	91 20		sta ($20),y			sta 	(zTemp0),y
.1d8e	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.1d90	c5 20		cmp $20				cmp 	zTemp0
.1d92	d0 06		bne $1d9a			bne 	_PGMINext
.1d94	a5 23		lda $23				lda 	zTemp1+1
.1d96	c5 21		cmp $21				cmp 	zTemp0+1
.1d98	f0 0a		beq $1da4			beq 	_PGMIInserted
.1d9a					_PGMINext:
.1d9a	a5 20		lda $20				lda 	zTemp0
.1d9c	d0 02		bne $1da0			bne 	_PGMINoBorrow
.1d9e	c6 21		dec $21				dec 	zTemp0+1
.1da0					_PGMINoBorrow:
.1da0	c6 20		dec $20				dec 	zTemp0
.1da2	80 e6		bra $1d8a			bra 	_PGMIInsertLoop
.1da4					_PGMIInserted:
.1da4	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1da6					_PGMICopyLoop:
.1da6	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1da9	91 22		sta ($22),y			sta 	(zTemp1),y
.1dab	c8		iny				iny
.1dac	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1daf	d0 f5		bne $1da6			bne 	_PGMICopyLoop
.1db1	18		clc				clc
.1db2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1db3					PGMSetBaseAddress:
.1db3	8e 13 05	stx $0513			stx 	PGMBaseHigh
.1db6	8c 14 05	sty $0514			sty 	PGMEndMemoryHigh
.1db9	60		rts				rts
.1dba					PGMNewProgram:
.1dba	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.1dbc	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1dbf	85 21		sta $21				sta 	zTemp0+1
.1dc1	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1dc3	92 20		sta ($20)			sta 	(zTemp0)
.1dc5	60		rts				rts
.1dc6					PGMEndProgram:
.1dc6	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.1dc8	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1dcb	85 21		sta $21				sta 	zTemp0+1
.1dcd					_PGMEPLoop:
.1dcd	b2 20		lda ($20)			lda 	(zTemp0)
.1dcf	f0 0b		beq $1ddc			beq 	_PGMEPExit
.1dd1	18		clc				clc
.1dd2	65 20		adc $20				adc 	zTemp0
.1dd4	85 20		sta $20				sta 	zTemp0
.1dd6	90 f5		bcc $1dcd			bcc 	_PGMEPLoop
.1dd8	e6 21		inc $21				inc 	zTemp0+1
.1dda	80 f1		bra $1dcd			bra 	_PGMEPLoop
.1ddc					_PGMEPExit:
.1ddc	60		rts				rts
.0513					PGMBaseHigh:
>0513							.fill 	1
.0514					PGMEndMemoryHigh:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1ddd					TOKResetElement:
.1ddd	9c 15 05	stz $0515			stz 	TOKElement
.1de0	60		rts				rts
.1de1					TOKWriteElement:
.1de1	da		phx				phx
.1de2	ae 15 05	ldx $0515			ldx 	TOKElement
.1de5	9d 16 05	sta $0516,x			sta 	TOKElementText,x
.1de8	9e 17 05	stz $0517,x			stz 	TOKElementText+1,x
.1deb	fa		plx				plx
.1dec	ee 15 05	inc $0515			inc 	TOKElement
.1def	60		rts				rts
.0515					TOKElement:
>0515							.fill 	1
.0516					TOKElementText:
>0516							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1df0					TOKTokeniseConstant:
.1df0	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.1df2	48		pha				pha 								; save on stack
.1df3	29 c0		and #$c0			and 	#$C0
.1df5	05 0f		ora $0f				ora 	IFR0+IM1
.1df7	05 10		ora $10				ora 	IFR0+IM2
.1df9	f0 10		beq $1e0b			beq 	_TTCLess
.1dfb	da		phx				phx
.1dfc	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1dfe					_TTCShiftRight:
.1dfe	46 10		lsr $10				lsr 	IFR0+IM2
.1e00	66 0f		ror $0f				ror 	IFR0+IM1
.1e02	66 0e		ror $0e				ror 	IFR0+IM0
.1e04	ca		dex				dex
.1e05	d0 f7		bne $1dfe			bne 	_TTCShiftRight
.1e07	fa		plx				plx
.1e08	20 f0 1d	jsr $1df0			jsr 	TOKTokeniseConstant
.1e0b					_TTCLess:
.1e0b	68		pla				pla
.1e0c	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e0e	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1e11	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e12					TOKTokeniseDecimals:
.1e12	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext 					; consume the .
.1e15	20 e7 1f	jsr $1fe7			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e18	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e1a	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1e1d	20 22 1e	jsr $1e22			jsr 	TOKOutputElementBuffer 		; then the buffer
.1e20	18		clc				clc
.1e21	60		rts				rts
.1e22					TOKOutputElementBuffer:
.1e22	ad 15 05	lda $0515			lda 	TOKElement 					; get count and write that
.1e25	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1e28	a8		tay				tay 								; put in Y
.1e29	f0 0c		beq $1e37			beq 	_TOEExit 					; exit if empty which is okay.
.1e2b	a2 01		ldx #$01			ldx 	#1
.1e2d					_TOELoop:
.1e2d	bd 15 05	lda $0515,x			lda 	TOKElement,x
.1e30	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1e33	e8		inx				inx
.1e34	88		dey				dey
.1e35	d0 f6		bne $1e2d			bne 	_TOELoop
.1e37					_TOEExit:
.1e37	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1e38					TOKTokenise:
.1e38	8c 16 06	sty $0616			sty 	TOKDataSource+1 			; save source routine pointer
.1e3b	8e 15 06	stx $0615			stx 	TOKDataSource
.1e3e	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1e40	8d 17 06	sta $0617			sta 	TOKIsFirstElement
.1e43	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1e45	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1e48	9c 01 04	stz $0401			stz 	TOKLineNumber
.1e4b	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1e4e					_TOKMainLoop:
.1e4e	20 b9 1e	jsr $1eb9			jsr 	TOKGet 						; what follows.
.1e51	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1e53	f0 4f		beq $1ea4			beq 	_TOKExit
.1e55	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1e57	d0 05		bne $1e5e			bne 	_TOKElement
.1e59	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext
.1e5c	80 f0		bra $1e4e			bra 	_TOKMainLoop
.1e5e					_TOKElement:
.1e5e	20 65 20	jsr $2065			jsr 	TOKIsDigit 					; is it 0..9
.1e61	90 0a		bcc $1e6d			bcc 	_TOKNotDigit
.1e63	20 be 1f	jsr $1fbe			jsr 	TOKTokeniseInteger 			; get integer
.1e66	b0 43		bcs $1eab			bcs 	_TOKFail 					; did it fail ?
.1e68	9c 17 06	stz $0617			stz 	TOKIsFirstElement 			; clear first element flag
.1e6b	80 e1		bra $1e4e			bra 	_TOKMainLoop
.1e6d					_TOKNotDigit:
.1e6d	9c 17 06	stz $0617			stz 	TOKIsFirstElement 			; clear first element flag
.1e70	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1e72	d0 07		bne $1e7b			bne 	_TOKNotHex
.1e74	20 06 1f	jsr $1f06			jsr 	TOKTokeniseHexadecimal
.1e77	b0 32		bcs $1eab			bcs 	_TOKFail
.1e79	80 d3		bra $1e4e			bra 	_TOKMainLoop
.1e7b					_TOKNotHex:
.1e7b	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1e7d	d0 07		bne $1e86			bne 	_TOKNotDecimal
.1e7f	20 12 1e	jsr $1e12			jsr 	TOKTokeniseDecimals
.1e82	b0 27		bcs $1eab			bcs 	_TOKFail
.1e84	80 c8		bra $1e4e			bra 	_TOKMainLoop
.1e86					_TOKNotDecimal:
.1e86	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1e88	d0 07		bne $1e91			bne 	_TOKNotString
.1e8a	20 2c 20	jsr $202c			jsr 	TOKTokeniseString
.1e8d	b0 1c		bcs $1eab			bcs 	_TOKFail
.1e8f	80 bd		bra $1e4e			bra 	_TOKMainLoop
.1e91					_TOKNotString:
.1e91	20 82 20	jsr $2082			jsr 	TOKIsAlpha 					; identifier ?
.1e94	b0 07		bcs $1e9d			bcs 	_TOKIdentifier
.1e96	20 fb 1f	jsr $1ffb			jsr 	TOKTokenisePunctuation 		; punctuation
.1e99	b0 10		bcs $1eab			bcs 	_TOKFail
.1e9b	80 b1		bra $1e4e			bra 	_TOKMainLoop
.1e9d					_TOKIdentifier:
.1e9d	20 40 1f	jsr $1f40			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1ea0	b0 09		bcs $1eab			bcs 	_TOKFail
.1ea2	80 aa		bra $1e4e			bra 	_TOKMainLoop
.1ea4					_TOKExit:
.1ea4	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1ea6	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1ea9	18		clc				clc									; return with carry set.
.1eaa	60		rts				rts
.1eab					_TOKFail:
.1eab	38		sec				sec
.1eac	60		rts				rts
.1ead					TOKWriteA:
.1ead	da		phx				phx
.1eae	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1eb1	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1eb4	fa		plx				plx
.1eb5	ee 00 04	inc $0400			inc 	TOKLineSize
.1eb8	60		rts				rts
.1eb9					TOKGet:
.1eb9	18		clc				clc
.1eba	6c 15 06	jmp ($0615)			jmp 	(TOKDataSource)
.1ebd					TOKGetNext:
.1ebd	38		sec				sec
.1ebe	6c 15 06	jmp ($0615)			jmp 	(TOKDataSource)
.0615					TOKDataSource:
>0615							.fill 	2
.0617					TOKIsFirstElement:
>0617							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1ec1					TOKFindToken:
.1ec1	a2 34		ldx #$34			ldx 	#StandardTokens & $FF 		; do this table
.1ec3	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1ec5	20 d0 1e	jsr $1ed0			jsr 	TOKFindTokenXY 				; find it, or not
.1ec8	90 04		bcc $1ece			bcc 	_TOKFTFail
.1eca	a2 00		ldx #$00			ldx 	#0
.1ecc	38		sec				sec
.1ecd	60		rts				rts
.1ece					_TOKFTFail
.1ece	18		clc				clc
.1ecf	60		rts				rts
.1ed0					TOKFindTokenXY:
.1ed0	86 20		stx $20				stx 	zTemp0 						; save token table address
.1ed2	84 21		sty $21				sty 	zTemp0+1
.1ed4	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1ed6	8d 18 06	sta $0618			sta 	TOKCurrent
.1ed9					_TOKFindLoop:
.1ed9	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.1edb	18		clc				clc 		 						; clear carry in case of fail
.1edc	30 17		bmi $1ef5			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1ede	cd 15 05	cmp $0515			cmp 	TOKElement 					; compare against the element length
.1ee1	d0 13		bne $1ef6			bne 	_TOKNext 					; different, try next.
.1ee3	aa		tax				tax 								; number of chars to compare.
.1ee4	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1ee6					_TOKCompare:
.1ee6	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.1ee8	d9 15 05	cmp $0515,y			cmp 	TOKElementText-1,y
.1eeb	d0 09		bne $1ef6			bne 	_TOKNext 					; different ? try next
.1eed	c8		iny				iny 								; compare next two
.1eee	ca		dex				dex
.1eef	d0 f5		bne $1ee6			bne 	_TOKCompare 				; until done X characters.
.1ef1	38		sec				sec
.1ef2	ad 18 06	lda $0618			lda 	TOKCurrent 					; return current ID.
.1ef5					_TOKExit:
.1ef5	60		rts				rts
.1ef6					_TOKNext:
.1ef6	ee 18 06	inc $0618			inc 	TOKCurrent 					; increment token #
.1ef9	38		sec				sec 								; add length+1 to ptr
.1efa	b2 20		lda ($20)			lda 	(zTemp0)
.1efc	65 20		adc $20				adc 	zTemp0
.1efe	85 20		sta $20				sta 	zTemp0
.1f00	90 d7		bcc $1ed9			bcc 	_TOKFindLoop
.1f02	e6 21		inc $21				inc 	zTemp0+1
.1f04	80 d3		bra $1ed9			bra 	_TOKFindLoop
.0618					TOKCurrent:
>0618							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1f06					TOKTokeniseHexadecimal:
.1f06	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext 					; consume the $
.1f09	a2 0e		ldx #$0e			ldx 	#IFR0
.1f0b	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero 				; set R0 = 0
.1f0e					_TTHLoop:
.1f0e	20 b9 1e	jsr $1eb9			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f11	20 8f 20	jsr $208f			jsr 	TOKIsHexadecimal
.1f14	90 20		bcc $1f36			bcc 	_TTHDone
.1f16	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.1f18	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1f1b	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1f1e	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1f21	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.1f24	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext
.1f27	38		sec				sec 								; convert to decimal.
.1f28	e9 30		sbc #$30			sbc 	#48
.1f2a	c9 0a		cmp #$0a			cmp 	#10
.1f2c	90 02		bcc $1f30			bcc 	_TTHNotAlpha
.1f2e	e9 07		sbc #$07			sbc 	#7
.1f30					_TTHNotAlpha:
.1f30	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.1f32	85 0e		sta $0e				sta 	IFR0+IM0
.1f34	80 d8		bra $1f0e			bra 	_TTHLoop
.1f36					_TTHDone:
.1f36	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1f38	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1f3b	20 f0 1d	jsr $1df0			jsr 	TOKTokeniseConstant 		; write integer out.
.1f3e	18		clc				clc
.1f3f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1f40					TOKTokeniseIdentifier:
.1f40	20 dd 1d	jsr $1ddd			jsr 	TOKResetElement 			; extract an identifier
.1f43					_TOKGetIdentifier:
.1f43	20 b9 1e	jsr $1eb9			jsr 	TOKGet
.1f46	20 4f 20	jsr $204f			jsr 	TOKToUpper
.1f49	20 71 20	jsr $2071			jsr 	TOKIsIdentifierElement
.1f4c	90 08		bcc $1f56			bcc 	_TOKEndIdent
.1f4e	20 e1 1d	jsr $1de1			jsr		TOKWriteElement
.1f51	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext
.1f54	80 ed		bra $1f43			bra 	_TOKGetIdentifier
.1f56					_TOKEndIdent:
.1f56	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1f58	d0 06		bne $1f60			bne 	_TOKNotString
.1f5a	20 e1 1d	jsr $1de1			jsr 	TOKWriteElement 			; add it
.1f5d	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext 					; consume it
.1f60					_TOKNotString:
.1f60	20 b9 1e	jsr $1eb9			jsr 	TOKGet 						; finally check for (
.1f63	c9 28		cmp #$28			cmp 	#"("
.1f65	d0 06		bne $1f6d			bne 	_TOKNoArray
.1f67	20 e1 1d	jsr $1de1			jsr 	TOKWriteElement 			; add it
.1f6a	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext 					; consume it
.1f6d					_TOKNoArray:
.1f6d	20 c1 1e	jsr $1ec1			jsr 	TOKFindToken 				; find it
.1f70	90 05		bcc $1f77			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1f72	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1f75	18		clc				clc
.1f76	60		rts				rts
.1f77					_TOKIsVariable:
.1f77	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1f79					_TOKOutputBuffer:
.1f79	bd 16 05	lda $0516,x			lda 	TOKElementText,x 			; output it translated.
.1f7c	20 a5 1f	jsr $1fa5			jsr 	TOKTranslateIdentifier
.1f7f	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.1f82	e8		inx				inx
.1f83	bd 16 05	lda $0516,x			lda 	TOKElementText,x
.1f86	20 71 20	jsr $2071			jsr 	TOKIsIdentifierElement
.1f89	b0 ee		bcs $1f79			bcs 	_TOKOutputBuffer
.1f8b	a8		tay				tay 								; last char in Y
.1f8c	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1f8e	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1f90	f0 0e		beq $1fa0			beq 	_TOKIVExit
.1f92	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1f94	d0 04		bne $1f9a			bne 	_TOKIVCheckArray 			; no, check for (
.1f96	1a		inc a				inc 	a 							; token is $7D
.1f97	bc 17 05	ldy $0517,x			ldy 	TOKElementText+1,x 			; get next one.
.1f9a					_TOKIVCheckArray:
.1f9a	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1f9c	d0 02		bne $1fa0			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1f9e	1a		inc a				inc 	a
.1f9f	1a		inc a				inc 	a
.1fa0					_TOKIVExit:
.1fa0	20 ad 1e	jsr $1ead			jsr 	TOKWriteA 					; ending token
.1fa3	18		clc				clc
.1fa4	60		rts				rts
.1fa5					TOKTranslateIdentifier:
.1fa5	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1fa7	f0 0f		beq $1fb8			beq 	_TTI64
.1fa9	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1fab	f0 0e		beq $1fbb			beq 	_TTI65
.1fad	38		sec				sec
.1fae	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1fb0	10 03		bpl $1fb5			bpl 	_TTIExit
.1fb2	18		clc				clc 								; map 09 onto 26-35
.1fb3	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1fb5					_TTIExit:
.1fb5	09 40		ora #$40			ora 	#$40 						; correct range.
.1fb7	60		rts				rts
.1fb8	a9 64		lda #$64	_TTI64:	lda 	#$64
.1fba	60		rts				rts
.1fbb	a9 65		lda #$65	_TTI65:	lda 	#$65
.1fbd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1fbe					TOKTokeniseInteger:
.1fbe	20 e7 1f	jsr $1fe7			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fc1	a2 16		ldx #$16			ldx 	#TOKElementText & $FF
.1fc3	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.1fc5	ad 15 05	lda $0515			lda		TOKElement
.1fc8	20 1d 2d	jsr $2d1d			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1fcb	ad 17 06	lda $0617			lda 	TOKIsFirstElement 			; first element ?
.1fce	f0 12		beq $1fe2			beq 	_TOKNotLineNumber
.1fd0	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.1fd2	d0 0c		bne $1fe0			bne 	_TOKBadLineNumeber
.1fd4	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.1fd6	8d 01 04	sta $0401			sta 	TOKLineNumber
.1fd9	a5 0f		lda $0f				lda 	IFR0+IM1
.1fdb	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.1fde	18		clc				clc
.1fdf	60		rts				rts
.1fe0					_TOKBadLineNumeber:
.1fe0	38		sec				sec
.1fe1	60		rts				rts
.1fe2					_TOKNotLineNumber:
.1fe2	20 f0 1d	jsr $1df0			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1fe5	18		clc				clc
.1fe6	60		rts				rts
.1fe7					TOKExtractInteger:
.1fe7	20 dd 1d	jsr $1ddd			jsr 	TOKResetElement 			; restart
.1fea					_TTILoop:
.1fea	20 b9 1e	jsr $1eb9			jsr 	TOKGet 						; keep getting and copying while numeric.
.1fed	20 65 20	jsr $2065			jsr 	TOKIsDigit
.1ff0	90 08		bcc $1ffa			bcc 	_TOKEIExit
.1ff2	20 e1 1d	jsr $1de1			jsr 	TOKWriteElement
.1ff5	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext
.1ff8	80 f0		bra $1fea			bra 	_TTILoop
.1ffa					_TOKEIExit:
.1ffa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1ffb					TOKTokenisePunctuation:
.1ffb	20 dd 1d	jsr $1ddd			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1ffe	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext
.2001	20 e1 1d	jsr $1de1			jsr 	TOKWriteElement
.2004	20 b9 1e	jsr $1eb9			jsr 	TOKGet 						; what follows ?
.2007	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2009	f0 10		beq $201b			beq 	_TTPOne
.200b	20 79 20	jsr $2079			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.200e	b0 0b		bcs $201b			bcs 	_TTPOne 					; these speed things up a bit.
.2010	20 e1 1d	jsr $1de1			jsr 	TOKWriteElement 			; this is what we will search for.
.2013	20 c1 1e	jsr $1ec1			jsr 	TOKFindToken
.2016	b0 0a		bcs $2022			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2018	ce 15 05	dec $0515			dec 	TOKElement 					; make it a single character
.201b					_TTPOne:
.201b	20 c1 1e	jsr $1ec1			jsr 	TOKFindToken 				; look for one character punctuation
.201e	b0 07		bcs $2027			bcs 	_TTPOutputExit 				; we found it
.2020	38		sec				sec 								; not recognised.
.2021	60		rts				rts
.2022					_TTPConsumeExit:
.2022	48		pha				pha
.2023	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext 					; get the 2nd char out.
.2026	68		pla				pla
.2027					_TTPOutputExit:
.2027	20 ad 1e	jsr $1ead			jsr  	TOKWriteA 					; write token out
.202a	18		clc				clc
.202b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.202c					TOKTokeniseString:
.202c	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext 					; consume the "
.202f	20 dd 1d	jsr $1ddd			jsr 	TOKResetElement 			; start getting the string
.2032					_TOKTSLoop:
.2032	20 b9 1e	jsr $1eb9			jsr 	TOKGet 						; check EOL
.2035	c9 00		cmp #$00			cmp 	#0
.2037	f0 0c		beq $2045			beq 	_TOKTSExit
.2039	20 bd 1e	jsr $1ebd			jsr 	TOKGetNext 					; get and consume
.203c	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.203e	f0 05		beq $2045			beq 	_TOKTSExit
.2040	20 e1 1d	jsr $1de1			jsr 	TOKWriteElement
.2043	80 ed		bra $2032			bra 	_TOKTSLoop
.2045					_TOKTSExit:
.2045	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2047	20 ad 1e	jsr $1ead			jsr 	TOKWriteA
.204a	20 22 1e	jsr $1e22			jsr 	TOKOutputElementBuffer
.204d	18		clc				clc
.204e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.204f					TOKToUpper:
.204f	c9 61		cmp #$61			cmp 	#"a"
.2051	90 06		bcc $2059			bcc 	_TTUNotLower
.2053	c9 7b		cmp #$7b			cmp 	#"z"+1
.2055	b0 02		bcs $2059			bcs 	_TTUNotLower
.2057	49 20		eor #$20			eor 	#$20
.2059					_TTUNotLower:
.2059	60		rts				rts
.205a					TOKToLower:
.205a	c9 41		cmp #$41			cmp 	#"A"
.205c	90 06		bcc $2064			bcc 	_TTUNotUpper
.205e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2060	b0 02		bcs $2064			bcs 	_TTUNotUpper
.2062	49 20		eor #$20			eor 	#$20
.2064					_TTUNotUpper:
.2064	60		rts				rts
.2065					TOKIsDigit:
.2065	c9 30		cmp #$30			cmp 	#"0"
.2067	90 06		bcc $206f			bcc 	TOKFail
.2069	c9 3a		cmp #$3a			cmp 	#"9"+1
.206b	b0 02		bcs $206f			bcs 	TOKFail
.206d					TOKSucceed:
.206d	38		sec				sec
.206e	60		rts				rts
.206f					TOKFail:
.206f	18		clc				clc
.2070	60		rts				rts
.2071					TOKIsIdentifierElement:
.2071	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2073	f0 f8		beq $206d			beq 	TOKSucceed
.2075	c9 5f		cmp #$5f			cmp 	#"_"
.2077	f0 f4		beq $206d			beq 	TOKSucceed 					; else fall through to alphanumeric
.2079					TOKIsAlphaNumeric:
.2079	20 82 20	jsr $2082			jsr 	TOKIsAlpha
.207c	b0 ef		bcs $206d			bcs 	TOKSucceed
.207e	20 65 20	jsr $2065			jsr 	TOKIsDigit
.2081	60		rts				rts
.2082					TOKIsAlpha:
.2082	20 4f 20	jsr $204f			jsr 	TOKToUpper
.2085	c9 41		cmp #$41			cmp 	#"A"
.2087	90 e6		bcc $206f			bcc 	TOKFail
.2089	c9 5b		cmp #$5b			cmp 	#"Z"+1
.208b	b0 e2		bcs $206f			bcs 	TOKFail
.208d	80 de		bra $206d			bra 	TOKSucceed
.208f					TOKIsHexadecimal:
.208f	20 65 20	jsr $2065			jsr		TOKIsDigit
.2092	b0 d9		bcs $206d			bcs 	TOKSucceed
.2094	20 82 20	jsr $2082			jsr 	TOKIsAlpha
.2097	90 d6		bcc $206f			bcc 	TOKFail
.2099	c9 47		cmp #$47			cmp 	#"F"+1
.209b	b0 d2		bcs $206f			bcs 	TOKFail
.209d	80 ce		bra $206d			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.209f					Command_CALL:
.209f	a9 42		lda #$42			lda 	#STK_CALL
.20a1	20 2a 25	jsr $252a			jsr 	StackOpen
.20a4	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.20a6	29 c0		and #$c0			and 	#$C0
.20a8	c9 40		cmp #$40			cmp 	#$40
.20aa	d0 29		bne $20d5			bne 	_CCSyntax
.20ac	20 fa 27	jsr $27fa			jsr 	VARGetInfo 					; get the information
.20af	20 11 25	jsr $2511			jsr 	ERRCheckRParen 				; check right bracket follows.
.20b2	20 ac 27	jsr $27ac			jsr 	VARFind 					; exists ?
.20b5	90 21		bcc $20d8			bcc 	_CCUnknown
.20b7	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.20b9	85 20		sta $20				sta 	zTemp0
.20bb	20 5e 25	jsr $255e			jsr 	STKSaveCodePosition 		; save return address on stack.
.20be	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.20c0	b1 20		lda ($20),y			lda 	(zTemp0),y
.20c2	c9 ff		cmp #$ff			cmp 	#$FF
.20c4	d0 12		bne $20d8			bne 	_CCUnknown
.20c6	88		dey				dey 								; get Y offset to stack
.20c7	b1 20		lda ($20),y			lda 	(zTemp0),y
.20c9	48		pha				pha
.20ca	88		dey				dey 								; get address
.20cb	b1 20		lda ($20),y			lda 	(zTemp0),y
.20cd	85 1f		sta $1f				sta 	codePtr+1
.20cf	b2 20		lda ($20)			lda 	(zTemp0)
.20d1	85 1e		sta $1e				sta 	codePtr
.20d3	7a		ply				ply 								; restore Y
.20d4	60		rts				rts
.20d5					_CCSyntax:
.20d5	4c 7e 23	jmp $237e		jmp	ErrorV_syntax
.20d8					_CCUnknown:
.20d8	4c f3 24	jmp $24f3		jmp	ErrorV_unknown
.20db					Command_ENDPROC:
.20db	a9 42		lda #$42			lda 	#STK_CALL
.20dd	20 56 25	jsr $2556			jsr 	StackCheckFrame
.20e0	20 70 25	jsr $2570			jsr 	STKLoadCodePosition 		; return
.20e3	20 48 25	jsr $2548			jsr 	StackClose
.20e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.20e7					Command_DO:
.20e7	a9 22		lda #$22			lda 	#STK_DO
.20e9	20 2a 25	jsr $252a			jsr 	StackOpen
.20ec	20 5e 25	jsr $255e			jsr 	STKSaveCodePosition 		; save loop position
.20ef	60		rts				rts
.20f0					Command_EXIT:
.20f0	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.20f2	20 56 25	jsr $2556			jsr 	StackCheckFrame
.20f5	20 48 25	jsr $2548			jsr 	StackClose 					; close it
.20f8	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.20fa	aa		tax				tax
.20fb	20 90 22	jsr $2290			jsr 	ScanForward
.20fe	60		rts				rts
.20ff					Command_LOOP:
.20ff	a9 22		lda #$22			lda 	#STK_DO
.2101	20 56 25	jsr $2556			jsr 	StackCheckFrame
.2104	20 70 25	jsr $2570			jsr 	STKLoadCodePosition 		; loop back
.2107	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2108					Command_FOR:
.2108	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.210a	20 2a 25	jsr $252a			jsr 	StackOpen
.210d	20 1e 12	jsr $121e			jsr 	CommandLET 					; do "I = 1" bit
.2110	5a		phy				phy 								; save variable address to +4,+5
.2111	a0 04		ldy #$04			ldy 	#4
.2113	a5 20		lda $20				lda 	zTemp0
.2115	91 28		sta ($28),y			sta 	(basicStack),y
.2117	c8		iny				iny
.2118	a5 21		lda $21				lda 	zTemp0+1
.211a	91 28		sta ($28),y			sta 	(basicStack),y
.211c	7a		ply				ply
.211d	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.211f	20 21 25	jsr $2521			jsr 	ERRCheckA
.2122	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2125	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2127	a2 0e		ldx #$0e			ldx 	#IFR0
.2129	20 7e 21	jsr $217e			jsr 	CFSaveR0X
.212c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.212e	c9 91		cmp #$91			cmp 	#PR_STEP
.2130	d0 06		bne $2138			bne 	_CFStep1
.2132	c8		iny				iny 								; consume step
.2133	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 				; evaluate STEP
.2136	80 24		bra $215c			bra 	_CFWriteStep
.2138					_CFStep1:
.2138	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.213a	a9 01		lda #$01			lda 	#1
.213c	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.213f	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2140	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2142	b1 28		lda ($28),y			lda 	(basicStack),y
.2144	85 20		sta $20				sta 	zTemp0
.2146	c8		iny				iny
.2147	b1 28		lda ($28),y			lda 	(basicStack),y
.2149	85 21		sta $21				sta 	zTemp0+1
.214b	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.214d	b1 20		lda ($20),y			lda 	(zTemp0),y
.214f	d0 0a		bne $215b			bne 	_CFNotOptimised
.2151	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2153	b1 28		lda ($28),y			lda 	(basicStack),y
.2155	d0 04		bne $215b			bne 	_CFNotOptimised
.2157	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2159	85 11		sta $11				sta 	IFR0+IExp
.215b					_CFNotOptimised:
.215b	7a		ply				ply
.215c					_CFWriteStep:
.215c	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.215e	a9 06		lda #$06			lda 	#6
.2160	20 7e 21	jsr $217e			jsr 	CFSaveR0X
.2163	20 5e 25	jsr $255e			jsr 	STKSaveCodePosition 		; save loop position
.2166	60		rts				rts
.2167					CFLoadR0X:
.2167	5a		phy				phy
.2168	a8		tay				tay
.2169	b1 28		lda ($28),y			lda 	(basicStack),y
.216b	95 00		sta $00,x			sta 	IM0,x
.216d	c8		iny				iny
.216e	b1 28		lda ($28),y			lda 	(basicStack),y
.2170	95 01		sta $01,x			sta 	IM1,x
.2172	c8		iny				iny
.2173	b1 28		lda ($28),y			lda 	(basicStack),y
.2175	95 02		sta $02,x			sta 	IM2,x
.2177	c8		iny				iny
.2178	b1 28		lda ($28),y			lda 	(basicStack),y
.217a	95 03		sta $03,x			sta 	IExp,x
.217c	7a		ply				ply
.217d	60		rts				rts
.217e					CFSaveR0X:
.217e	5a		phy				phy
.217f	a8		tay				tay
.2180	b5 00		lda $00,x			lda 	IM0,x
.2182	91 28		sta ($28),y			sta 	(basicStack),y
.2184	c8		iny				iny
.2185	b5 01		lda $01,x			lda 	IM1,x
.2187	91 28		sta ($28),y			sta 	(basicStack),y
.2189	c8		iny				iny
.218a	b5 02		lda $02,x			lda 	IM2,x
.218c	91 28		sta ($28),y			sta 	(basicStack),y
.218e	c8		iny				iny
.218f	b5 03		lda $03,x			lda 	IExp,x
.2191	91 28		sta ($28),y			sta 	(basicStack),y
.2193	7a		ply				ply
.2194	60		rts				rts
.2195					Command_NEXT:
.2195	a9 37		lda #$37			lda 	#STK_FOR
.2197	20 56 25	jsr $2556			jsr 	StackCheckFrame
.219a	5a		phy				phy 								; check optimised loop
.219b	a0 09		ldy #$09			ldy 	#9
.219d	b1 28		lda ($28),y			lda 	(basicStack),y
.219f	7a		ply				ply
.21a0	0a		asl a				asl 	a
.21a1	b0 35		bcs $21d8			bcs 	_CNOptimised
.21a3	20 0f 22	jsr $220f			jsr 	_CNLoadValue 				; load index value to R0.
.21a6	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.21a8	a9 06		lda #$06			lda 	#6
.21aa	20 67 21	jsr $2167			jsr 	CFLoadR0X
.21ad	20 af 28	jsr $28af			jsr 	IFloatAdd 					; add them together and write back.
.21b0	20 32 22	jsr $2232			jsr 	_CNSaveValue
.21b3	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.21b5	a2 12		ldx #$12			ldx 	#IFR1
.21b7	20 67 21	jsr $2167			jsr 	CFLoadR0X
.21ba	20 87 2b	jsr $2b87			jsr 	IFloatCompare 				; compare terminal vs current
.21bd	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.21bf	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.21c2	f0 10		beq $21d4			beq 	_CNLoopBack
.21c4	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.21c6	5a		phy				phy
.21c7	a0 09		ldy #$09			ldy 	#6+IExp
.21c9	51 28		eor ($28),y			eor 	(basicStack),y
.21cb	7a		ply				ply
.21cc	29 40		and #$40			and 	#IFSign
.21ce	f0 04		beq $21d4			beq 	_CNLoopBack
.21d0					_CNExitLoop:
.21d0	20 48 25	jsr $2548			jsr 	StackClose		 			; return
.21d3	60		rts				rts
.21d4					_CNLoopBack:
.21d4	20 70 25	jsr $2570			jsr 	STKLoadCodePosition 		; loop back
.21d7	60		rts				rts
.21d8					_CNOptimised:
.21d8	5a		phy				phy
.21d9	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.21db	b1 28		lda ($28),y			lda 	(basicStack),y
.21dd	85 24		sta $24				sta 	zTemp2
.21df	c8		iny				iny
.21e0	b1 28		lda ($28),y			lda 	(basicStack),y
.21e2	85 25		sta $25				sta 	zTemp2+1
.21e4	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.21e6					_CNIncrement:
.21e6	c8		iny				iny
.21e7	b1 24		lda ($24),y			lda 	(zTemp2),y
.21e9	1a		inc a				inc 	a
.21ea	91 24		sta ($24),y			sta 	(zTemp2),y
.21ec	f0 f8		beq $21e6			beq 	_CNIncrement
.21ee	18		clc				clc 								; point zTemp0 to terminal value
.21ef	a5 28		lda $28				lda 	basicStack
.21f1	69 0a		adc #$0a			adc 	#10
.21f3	85 20		sta $20				sta 	zTemp0
.21f5	a5 29		lda $29				lda 	basicStack+1
.21f7	69 00		adc #$00			adc 	#0
.21f9	85 21		sta $21				sta 	zTemp0+1
.21fb	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.21fd	b2 24		lda ($24)			lda 	(zTemp2)
.21ff	d2 20		cmp ($20)			cmp 	(zTemp0)
.2201	b1 24		lda ($24),y			lda 	(zTemp2),y
.2203	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.2205	c8		iny				iny
.2206	b1 24		lda ($24),y			lda 	(zTemp2),y
.2208	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.220a	7a		ply				ply
.220b	b0 c3		bcs $21d0			bcs 	_CNExitLoop
.220d	80 c5		bra $21d4			bra 	_CNLoopBack
.220f					_CNLoadValue:
.220f	5a		phy				phy
.2210	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2212	b1 28		lda ($28),y			lda 	(basicStack),y
.2214	85 24		sta $24				sta 	zTemp2
.2216	c8		iny				iny
.2217	b1 28		lda ($28),y			lda 	(basicStack),y
.2219	85 25		sta $25				sta 	zTemp2+1
.221b	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.221d	b1 24		lda ($24),y			lda 	(zTemp2),y
.221f	85 0e		sta $0e				sta 	IFR0+IM0
.2221	c8		iny				iny
.2222	b1 24		lda ($24),y			lda 	(zTemp2),y
.2224	85 0f		sta $0f				sta 	IFR0+IM1
.2226	c8		iny				iny
.2227	b1 24		lda ($24),y			lda 	(zTemp2),y
.2229	85 10		sta $10				sta 	IFR0+IM2
.222b	c8		iny				iny
.222c	b1 24		lda ($24),y			lda 	(zTemp2),y
.222e	85 11		sta $11				sta 	IFR0+IExp
.2230	7a		ply				ply
.2231	60		rts				rts
.2232					_CNSaveValue:
.2232	5a		phy				phy
.2233	a0 00		ldy #$00			ldy 	#0
.2235	a5 0e		lda $0e				lda 	IFR0+IM0
.2237	91 24		sta ($24),y			sta 	(zTemp2),y
.2239	c8		iny				iny
.223a	a5 0f		lda $0f				lda 	IFR0+IM1
.223c	91 24		sta ($24),y			sta 	(zTemp2),y
.223e	c8		iny				iny
.223f	a5 10		lda $10				lda 	IFR0+IM2
.2241	91 24		sta ($24),y			sta 	(zTemp2),y
.2243	c8		iny				iny
.2244	a5 11		lda $11				lda 	IFR0+IExp
.2246	91 24		sta ($24),y			sta 	(zTemp2),y
.2248	7a		ply				ply
.2249	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.224a					IfCommand:
.224a	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 				; Get the if test.
.224d	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.224f	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2251	d0 0a		bne $225d			bne 	_IfStructured 				; we still support it.
.2253	c8		iny				iny 								; consume THEN
.2254	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; is it zero
.2257	f0 01		beq $225a			beq 	_IfFail 					; if fail, go to next line
.2259	60		rts				rts 								; if THEN just continue
.225a					_IfFail:
.225a	4c 85 13	jmp $1385			jmp 	RUNEndOfLine
.225d					_IfStructured:
.225d	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; is it zero
.2260	d0 07		bne $2269			bne 	_IfExit 					; if not, then continue normally.
.2262	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2264	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2266	20 90 22	jsr $2290			jsr 	ScanForward 				; and run from there
.2269					_IfExit:
.2269	60		rts				rts
.226a					ElseCode:
.226a	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.226c	aa		tax				tax 								; so just go to the structure exit
.226d	20 90 22	jsr $2290			jsr 	ScanForward
.2270	60		rts				rts
.2271					EndIf:
.2271	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2272					Command_REPEAT:
.2272	a9 02		lda #$02			lda 	#STK_REPEAT
.2274	20 2a 25	jsr $252a			jsr 	StackOpen
.2277	20 5e 25	jsr $255e			jsr 	STKSaveCodePosition 		; save loop position
.227a	60		rts				rts
.227b					Command_UNTIL:
.227b	a9 02		lda #$02			lda 	#STK_REPEAT
.227d	20 56 25	jsr $2556			jsr 	StackCheckFrame
.2280	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 				; work out the test
.2283	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; check if zero
.2286	f0 04		beq $228c			beq 	_CULoopBack 				; if so keep looping
.2288	20 48 25	jsr $2548			jsr 	StackClose		 			; return
.228b	60		rts				rts
.228c					_CULoopBack:
.228c	20 70 25	jsr $2570			jsr 	STKLoadCodePosition 		; loop back
.228f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2290					ScanForward:
.2290	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.2292	86 21		stx $21				stx 	zTemp0+1
.2294	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.2296					_ScanForwardLoop:
.2296	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2298	d0 0a		bne $22a4			bne 	_ScanNoCheck
.229a	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.229c	c5 20		cmp $20				cmp 	zTemp0
.229e	f0 49		beq $22e9			beq 	_ScanExit
.22a0	c5 21		cmp $21				cmp 	zTemp0+1
.22a2	f0 45		beq $22e9			beq 	_ScanExit
.22a4					_ScanNoCheck:
.22a4	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.22a6	c8		iny				iny
.22a7	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.22a9	f0 37		beq $22e2			beq		_ScanDataItem
.22ab	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.22ad	f0 33		beq $22e2			beq 	_ScanDataItem
.22af	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.22b1	f0 1b		beq $22ce			beq 	_ScanNextLine
.22b3	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.22b5	d0 01		bne $22b8			bne 	_ScanNoShift
.22b7	c8		iny				iny
.22b8					_ScanNoShift:
.22b8	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.22ba	b0 da		bcs $2296			bcs 	_ScanForwardLoop
.22bc	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.22be	90 d6		bcc $2296			bcc 	_ScanForwardLoop
.22c0	aa		tax				tax 								; access the table to get the adjustment.
.22c1	18		clc				clc
.22c2	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.22c4	7d a8 18	adc $18a8,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.22c7	85 22		sta $22				sta 	zTemp1
.22c9	10 cb		bpl $2296			bpl		_ScanForwardLoop 			; error if -ve ?
.22cb	4c 0a 24	jmp $240a		jmp	ErrorV_structure
.22ce					_ScanNextLine:
.22ce	18		clc				clc	 								; forward to next line.
.22cf	b2 1e		lda ($1e)			lda 	(codePtr)
.22d1	65 1e		adc $1e				adc 	codePtr
.22d3	85 1e		sta $1e				sta 	codePtr
.22d5	90 02		bcc $22d9			bcc 	_ScanNoCarry
.22d7	e6 1f		inc $1f				inc 	codePtr+1
.22d9					_ScanNoCarry:
.22d9	a0 03		ldy #$03			ldy 	#3
.22db	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.22dd	d0 b7		bne $2296			bne 	_ScanForwardLoop
.22df	4c 0a 24	jmp $240a		jmp	ErrorV_structure
.22e2					_ScanDataItem:
.22e2	98		tya				tya
.22e3	38		sec				sec
.22e4	71 1e		adc ($1e),y			adc 	(codePtr),y
.22e6	a8		tay				tay
.22e7	80 ad		bra $2296			bra 	_ScanForwardLoop
.22e9					_ScanExit:
.22e9	c8		iny				iny 								; consume final token.
.22ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.22eb					ScanProcedures:
.22eb	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.22ed	48		pha				pha
.22ee	a5 1f		lda $1f				lda 	codePtr+1
.22f0	48		pha				pha
.22f1	5a		phy				phy
.22f2	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.22f5	85 1f		sta $1f				sta 	codePtr+1
.22f7	64 1e		stz $1e				stz 	codePtr
.22f9					_SPLoop:
.22f9	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.22fb	f0 18		beq $2315			beq 	_SPExit
.22fd	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.22ff	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2301	c9 88		cmp #$88			cmp 	#PR_PROC
.2303	d0 03		bne $2308			bne 	_SPNext
.2305	20 1d 23	jsr $231d			jsr 	_SPSetupRecord
.2308					_SPNext:
.2308	18		clc				clc 								; forward to next
.2309	b2 1e		lda ($1e)			lda 	(codePtr)
.230b	65 1e		adc $1e				adc 	codePtr
.230d	85 1e		sta $1e				sta 	codePtr
.230f	90 e8		bcc $22f9			bcc 	_SPLoop
.2311	e6 1f		inc $1f				inc 	codePtr+1
.2313	80 e4		bra $22f9			bra 	_SPLoop
.2315					_SPExit:
.2315	7a		ply				ply
.2316	68		pla				pla
.2317	85 1f		sta $1f				sta 	codePtr+1
.2319	68		pla				pla
.231a	85 1e		sta $1e				sta 	codePtr
.231c	60		rts				rts
.231d					_SPSetupRecord:
.231d	c8		iny				iny 								; check identifier follows
.231e	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2320	29 c0		and #$c0			and 	#$C0
.2322	c9 40		cmp #$40			cmp 	#$40
.2324	d0 27		bne $234d			bne 	_SPSyntax
.2326	20 fa 27	jsr $27fa			jsr 	VARGetInfo 					; get the information
.2329	20 11 25	jsr $2511			jsr 	ERRCheckRParen 				; check right bracket follows.
.232c	20 ac 27	jsr $27ac			jsr 	VARFind 					; already exists ?
.232f	b0 1f		bcs $2350			bcs 	_SPUsed 					; error !
.2331	20 58 27	jsr $2758			jsr 	VARCreate 					; create, XA points to the data.
.2334	85 20		sta $20				sta 	zTemp0
.2336	86 21		stx $21				stx 	zTemp0+1
.2338	5a		phy				phy 								; save Y pos on stack
.2339	a0 01		ldy #$01			ldy 	#1
.233b	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.233d	92 20		sta ($20)			sta 	(zTemp0)
.233f	a5 1f		lda $1f				lda 	codePtr+1
.2341	91 20		sta ($20),y			sta 	(zTemp0),y
.2343	c8		iny				iny
.2344	68		pla				pla
.2345	91 20		sta ($20),y			sta 	(zTemp0),y
.2347	c8		iny				iny
.2348	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.234a	91 20		sta ($20),y			sta 	(zTemp0),y
.234c	60		rts				rts
.234d					_SPSyntax:
.234d	4c 7e 23	jmp $237e		jmp	ErrorV_syntax
.2350					_SPUsed:
.2350	4c d5 24	jmp $24d5		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2353					Command_WHILE:
.2353	5a		phy				phy 								; save position of the test
.2354	20 ad 15	jsr $15ad			jsr 	EXPEvalNumber 				; work out the while test.
.2357	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; check if zero
.235a	f0 0e		beq $236a			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.235c	98		tya				tya 								; position *after* test.
.235d	7a		ply				ply 								; restore position before test, at WHILE
.235e	88		dey				dey 								; so we execute the WHILE command again.
.235f	48		pha				pha 								; push after test on the stack
.2360	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2362	20 2a 25	jsr $252a			jsr 	StackOpen
.2365	20 5e 25	jsr $255e			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2368	7a		ply				ply 								; restore the position *after* the test
.2369	60		rts				rts
.236a					_WHExitLoop:
.236a	68		pla				pla 								; throw post loop position
.236b	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.236d	aa		tax				tax
.236e	20 90 22	jsr $2290			jsr 	ScanForward
.2371	60		rts				rts
.2372					Command_WEND:
.2372	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2374	20 56 25	jsr $2556			jsr 	StackCheckFrame
.2377	20 70 25	jsr $2570			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.237a	20 48 25	jsr $2548			jsr 	StackClose		 			; erase the frame
.237d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.237e					ErrorV_syntax:
.237e	20 49 26	jsr $2649		jsr	ErrorHandler
>2381	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2389	45 72 72 6f 72 00
.238f					ErrorV_range:
.238f	20 49 26	jsr $2649		jsr	ErrorHandler
>2392	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>239a	52 61 6e 67 65 00
.23a0					ErrorV_value:
.23a0	20 49 26	jsr $2649		jsr	ErrorHandler
>23a3	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>23ab	75 65 00
.23ae					ErrorV_type:
.23ae	20 49 26	jsr $2649		jsr	ErrorHandler
>23b1	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>23b9	73 6d 61 74 63 68 00
.23c0					ErrorV_unimplemented:
.23c0	20 49 26	jsr $2649		jsr	ErrorHandler
>23c3	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>23cb	6c 65 6d 65 6e 74 65 64 00
.23d4					ErrorV_assert:
.23d4	20 49 26	jsr $2649		jsr	ErrorHandler
>23d7	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>23df	46 61 69 6c 00
.23e4					ErrorV_internal:
.23e4	20 49 26	jsr $2649		jsr	ErrorHandler
>23e7	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>23ef	6c 20 45 72 72 6f 72 00
.23f7					ErrorV_divzero:
.23f7	20 49 26	jsr $2649		jsr	ErrorHandler
>23fa	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2402	42 79 20 5a 65 72 6f 00
.240a					ErrorV_structure:
.240a	20 49 26	jsr $2649		jsr	ErrorHandler
>240d	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2415	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2422					ErrorV_stop:
.2422	20 49 26	jsr $2649		jsr	ErrorHandler
>2425	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>242d	20 53 74 6f 70 70 65 64 00
.2436					ErrorV_data:
.2436	20 49 26	jsr $2649		jsr	ErrorHandler
>2439	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2441	44 61 74 61 00
.2446					ErrorV_redefine:
.2446	20 49 26	jsr $2649		jsr	ErrorHandler
>2449	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2451	65 64 65 66 69 6e 65 64 00
.245a					ErrorV_index:
.245a	20 49 26	jsr $2649		jsr	ErrorHandler
>245d	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2465	61 79 20 49 6e 64 65 78 00
.246e					ErrorV_memory:
.246e	20 49 26	jsr $2649		jsr	ErrorHandler
>2471	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2479	4d 65 6d 6f 72 79 00
.2480					ErrorV_uninitialised:
.2480	20 49 26	jsr $2649		jsr	ErrorHandler
>2483	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>248b	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.249b					ErrorV_string:
.249b	20 49 26	jsr $2649		jsr	ErrorHandler
>249e	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>24a6	69 6e 67 20 4c 65 6e 67 74 68 00
.24b1					ErrorV_variable:
.24b1	20 49 26	jsr $2649		jsr	ErrorHandler
>24b4	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>24bc	65 20 4d 69 73 73 69 6e 67 00
.24c6					ErrorV_stack:
.24c6	20 49 26	jsr $2649		jsr	ErrorHandler
>24c9	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>24d1	75 6c 6c 00
.24d5					ErrorV_dupproc:
.24d5	20 49 26	jsr $2649		jsr	ErrorHandler
>24d8	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>24e0	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>24f0	65 64 00
.24f3					ErrorV_unknown:
.24f3	20 49 26	jsr $2649		jsr	ErrorHandler
>24f6	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>24fe	20 50 72 6f 63 65 64 75 72 65 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2509					ERRCheckLParen:
.2509	b1 1e		lda ($1e),y			lda 	(codePtr),y
.250b	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.250d	d0 18		bne $2527			bne 	ERRSyntaxError
.250f	c8		iny				iny
.2510	60		rts				rts
.2511					ERRCheckRParen:
.2511	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2513	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2515	d0 10		bne $2527			bne 	ERRSyntaxError
.2517	c8		iny				iny
.2518	60		rts				rts
.2519					ERRCheckComma:
.2519	b1 1e		lda ($1e),y			lda 	(codePtr),y
.251b	c9 99		cmp #$99			cmp 	#PR_COMMA
.251d	d0 08		bne $2527			bne 	ERRSyntaxError
.251f	c8		iny				iny
.2520	60		rts				rts
.2521					ERRCheckA:
.2521	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.2523	d0 02		bne $2527			bne 	ERRSyntaxError
.2525	c8		iny				iny
.2526	60		rts				rts
.2527					ERRSyntaxError:
.2527	4c 7e 23	jmp $237e		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.252a					StackOpen:
.252a	48		pha				pha 								; save frame byte
.252b	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.252d	0a		asl a				asl 	a 							; claim twice this for storage
.252e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2530	38		sec				sec 								; so basically subtracting from
.2531	65 28		adc $28				adc 	basicStack 	 				; basicStack
.2533	85 28		sta $28				sta 	basicStack
.2535	b0 0a		bcs $2541			bcs 	_SONoBorrow
>2537	db						.byte 	$DB
.2538	c6 29		dec $29				dec 	basicStack+1
.253a	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.253c	cd 19 06	cmp $0619			cmp 	basicStackEnd
.253f	f0 04		beq $2545			beq 	_SOMemory
.2541					_SONoBorrow:
.2541	68		pla				pla 								; get marker back and write at TOS
.2542	92 28		sta ($28)			sta 	(basicStack)
.2544	60		rts				rts
.2545					_SOMemory:
.2545	4c c6 24	jmp $24c6		jmp	ErrorV_stack
.2548					StackClose:
.2548	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.254a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.254c	0a		asl a				asl 	a 							; claim twice this.
.254d	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.254f	85 28		sta $28				sta 	basicStack
.2551	90 02		bcc $2555			bcc 	_SCExit
.2553	e6 29		inc $29				inc 	basicStack+1
.2555					_SCExit:
.2555	60		rts				rts
.2556					StackCheckFrame:
.2556	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.2558	d0 01		bne $255b			bne 	_SCFError 					; different, we have structures mixed up
.255a	60		rts				rts
.255b					_SCFError:
.255b	4c 0a 24	jmp $240a		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.255e					STKSaveCodePosition:
.255e	5a		phy				phy
.255f	98		tya				tya 								; save Y at offset 1.
.2560	a0 01		ldy #$01			ldy 	#1
.2562	91 28		sta ($28),y			sta 	(basicStack),y
.2564	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.2566	c8		iny				iny
.2567	91 28		sta ($28),y			sta 	(basicStack),y
.2569	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.256b	c8		iny				iny
.256c	91 28		sta ($28),y			sta 	(basicStack),y
.256e	7a		ply				ply
.256f	60		rts				rts
.2570					STKLoadCodePosition:
.2570	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2572	b1 28		lda ($28),y			lda 	(basicStack),y
.2574	85 1f		sta $1f				sta 	codePtr+1
.2576	88		dey				dey
.2577	b1 28		lda ($28),y			lda 	(basicStack),y
.2579	85 1e		sta $1e				sta 	codePtr
.257b	88		dey				dey
.257c	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.257e	a8		tay				tay
.257f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2580					StackReset:
.2580	48		pha				pha 								; save top of memory
.2581	3a		dec a				dec 	a  							; end of stack = previous byte
.2582	85 29		sta $29				sta 	basicStack+1
.2584	a9 ff		lda #$ff			lda 	#$FF
.2586	85 28		sta $28				sta 	basicStack
.2588	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.258a	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.258c	68		pla				pla 								; allocate pages for stack.
.258d	38		sec				sec
.258e	e9 02		sbc #$02			sbc 	#STACKPAGES
.2590	8d 19 06	sta $0619			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2593	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.0619					basicStackEnd:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2594					StringConcrete:
.2594	5a		phy				phy 								; save position on stack
.2595	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.2597	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2599	b0 41		bcs $25dc			bcs 	_SALengthError
.259b	18		clc				clc 								; length of the new string
.259c	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.259e	90 02		bcc $25a2			bcc 	_SAHaveLength
.25a0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.25a2					_SAHaveLength:
.25a2	48		pha				pha 								; save length to be allocated for concreting.
.25a3	38		sec				sec
.25a4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.25a6	6d 1b 06	adc $061b			adc 	stringMemory
.25a9	8d 1b 06	sta $061b			sta 	stringMemory
.25ac	85 24		sta $24				sta 	zTemp2 						; update storage address
.25ae	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.25b0	6d 1c 06	adc $061c			adc 	stringMemory+1
.25b3	8d 1c 06	sta $061c			sta 	stringMemory+1
.25b6	85 25		sta $25				sta 	zTemp2+1
.25b8	68		pla				pla 								; save length allocated in +0
.25b9	92 24		sta ($24)			sta 	(zTemp2)
.25bb	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.25bd	a0 01		ldy #$01			ldy 	#1
.25bf	91 24		sta ($24),y			sta 	(zTemp2),y
.25c1					_SACopyNewString:
.25c1	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.25c3	a0 02		ldy #$02			ldy 	#2
.25c5	91 24		sta ($24),y			sta 	(zTemp2),y
.25c7	aa		tax				tax 								; bytes to copy
.25c8	f0 0c		beq $25d6			beq 	_SACopyExit
.25ca	a0 01		ldy #$01			ldy 	#1 							; first character from here
.25cc					_SACopyNSLoop:
.25cc	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.25ce	c8		iny				iny 								; write two on in string storage
.25cf	c8		iny				iny
.25d0	91 24		sta ($24),y			sta 	(zTemp2),y
.25d2	88		dey				dey
.25d3	ca		dex				dex									; until copied all the string lengths.
.25d4	d0 f6		bne $25cc			bne 	_SACopyNSLoop
.25d6					_SACopyExit:
.25d6	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.25d8	a5 24		lda $24				lda 	zTemp2
.25da	7a		ply				ply
.25db	60		rts				rts
.25dc					_SALengthError:
.25dc	4c 9b 24	jmp $249b		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.25df					StringSystemInitialise:
.25df	3a		dec a				dec 	a 							; make last byte of previous page.
.25e0	8d 1c 06	sta $061c			sta 	stringMemory+1
.25e3	85 21		sta $21				sta 	zTemp0+1
.25e5	a9 ff		lda #$ff			lda 	#$FF
.25e7	8d 1b 06	sta $061b			sta 	stringMemory
.25ea	85 20		sta $20				sta 	zTemp0
.25ec	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.25ee	92 20		sta ($20)			sta 	(zTemp0)
.25f0	60		rts				rts
.25f1					StringSpaceInitialise:
.25f1	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.25f3	8d 1a 06	sta $061a			sta 	stringInitialised
.25f6	ad 1b 06	lda $061b			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.25f9	8d 1d 06	sta $061d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.25fc	ad 1c 06	lda $061c			lda 	stringMemory+1
.25ff	3a		dec a				dec 	a
.2600	8d 1e 06	sta $061e			sta 	stringTempPointer+1
.2603	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.2606	60		rts				rts
.2607					StringTempAllocate:
.2607	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2609	b0 2e		bcs $2639			bcs 	_STALength
.260b	2c 1a 06	bit $061a			bit 	stringInitialised 			; already initialised
.260e	30 05		bmi $2615			bmi 	_STAAllocate
.2610	48		pha				pha 								; save value to subtract.
.2611	20 f1 25	jsr $25f1			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2614	68		pla				pla 								; restore it
.2615					_STAAllocate:
.2615	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2617	18		clc				clc  								; deliberate allows one more
.2618	6d 1d 06	adc $061d			adc 	stringTempPointer 			; subtract from temp pointer
.261b	8d 1d 06	sta $061d			sta 	stringTempPointer
.261e	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.2620	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.2622	ad 1e 06	lda $061e			lda 	stringTempPointer+1
.2625	69 ff		adc #$ff			adc 	#$FF
.2627	8d 1e 06	sta $061e			sta 	stringTempPointer+1
.262a	85 2b		sta $2b				sta 	zsTemp+1
.262c	85 0f		sta $0f				sta 	IFR0+IM1
.262e	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2630	a9 80		lda #$80			lda 	#$80
.2632	85 11		sta $11				sta 	IFR0+IExp
.2634	a9 00		lda #$00			lda 	#0 							; clear the target string
.2636	92 2a		sta ($2a)			sta 	(zsTemp)
.2638	60		rts				rts
.2639					_STALength:
.2639	4c 9b 24	jmp $249b		jmp	ErrorV_string
.263c					StringTempWrite:
.263c	5a		phy				phy
.263d	48		pha				pha
.263e	b2 2a		lda ($2a)			lda 	(zsTemp)
.2640	1a		inc a				inc 	a
.2641	92 2a		sta ($2a)			sta 	(zsTemp)
.2643	a8		tay				tay
.2644	68		pla				pla
.2645	91 2a		sta ($2a),y			sta 	(zsTemp),y
.2647	7a		ply				ply
.2648	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.061a					stringInitialised:
>061a							.fill 	1
.061b					stringMemory:
>061b							.fill 	2
.061d					stringTempPointer:
>061d							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2649					ErrorHandler:
.2649	fa		plx				plx 								; get address of msg
.264a	7a		ply				ply
.264b	e8		inx				inx 								; bump past RTS
.264c	d0 01		bne $264f			bne 	_EHNoInc
.264e	c8		iny				iny
.264f					_EHNoInc:
.264f	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2652	ad 1f 06	lda $061f			lda 	ERRLine 					; direct command ?
.2655	0d 20 06	ora $0620			ora 	ERRLine+1
.2658	f0 10		beq $266a			beq 	_EHNoNumber
.265a	a2 6d		ldx #$6d			ldx 	#_EHAtMsg & $FF
.265c	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.265e	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.2661	ad 1f 06	lda $061f			lda 	ERRLine 					; line number -> XA
.2664	ae 20 06	ldx $0620			ldx 	ERRLine+1
.2667	20 72 26	jsr $2672			jsr 	WriteIntXA
.266a					_EHNoNumber:
.266a	4c 9b 26	jmp $269b			jmp 	WarmStartNewLine
.266d					_EHAtMsg:
>266d	20 61 74 20 00					.text 	" at ",0
.2672					WriteIntXA:
.2672	da		phx				phx
.2673	48		pha				pha
.2674	a2 0e		ldx #$0e			ldx 	#IFR0
.2676	20 08 2e	jsr $2e08			jsr 	IFloatPushRx
.2679	68		pla				pla
.267a	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.267d	68		pla				pla
.267e	85 0f		sta $0f				sta 	IFR0+IM1
.2680	a9 0a		lda #$0a			lda 	#10 						; decimal
.2682	20 5a 2c	jsr $2c5a			jsr 	IFloatIntegerToStringR0	 	; convert
.2685	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.2688	a2 0e		ldx #$0e			ldx 	#IFR0
.268a	20 29 2e	jsr $2e29			jsr 	IFloatPullRx
.268d	60		rts				rts
.268e					NotImplemented:
.268e	4c c0 23	jmp $23c0		jmp	ErrorV_unimplemented
.061f					ERRLine:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2691					WarmStart:
.2691	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2693	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2696	a9 6b		lda #$6b			lda 	#"k"
.2698	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.269b					WarmStartNewLine:
.269b	a9 0d		lda #$0d			lda 	#13
.269d	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26a0					WarmStartNoPrompt:
.26a0	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.26a2	9a		txs				txs
.26a3	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.26a6	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.26a8	f0 f1		beq $269b			beq 	WarmStartNewLine
.26aa	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.26ac	d0 f2		bne $26a0			bne 	WarmStartNoPrompt
.26ae	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.26b1	e8		inx				inx 								; skip length byte to make it ASCIIZ
.26b2	d0 01		bne $26b5			bne 	_WSSkip
.26b4	c8		iny				iny
.26b5					_WSSkip:
.26b5	86 24		stx $24				stx 	zTemp2 						; save address
.26b7	84 25		sty $25				sty 	zTemp2+1
.26b9	a2 e3		ldx #$e3			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.26bb	a0 26		ldy #$26			ldy 	#TOKGetCharacter >> 8
.26bd	38		sec				sec
.26be	20 38 1e	jsr $1e38			jsr 	TOKTokenise
.26c1	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.26c4	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.26c7	d0 0b		bne $26d4			bne 	_WSLineEdit
.26c9	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.26cb	85 1e		sta $1e				sta 	codePtr
.26cd	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.26cf	85 1f		sta $1f				sta 	codePtr+1
.26d1	4c 90 13	jmp $1390			jmp 	RUNNewLine
.26d4					_WSLineEdit:
.26d4	20 13 1d	jsr $1d13			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.26d7	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.26da	c9 04		cmp #$04			cmp 	#4
.26dc	f0 03		beq $26e1			beq 	_WSNoInsert
.26de	20 5d 1d	jsr $1d5d			jsr 	PGMInsertLine				; if not, maybe insert
.26e1					_WSNoInsert:
.26e1	80 bd		bra $26a0			bra 	WarmStartNoPrompt
.26e3					TOKGetCharacter:
.26e3	b2 24		lda ($24)			lda 	(zTemp2)
.26e5	90 06		bcc $26ed			bcc 	_GSNoIncrement
.26e7	e6 24		inc $24				inc 	zTemp2
.26e9	d0 02		bne $26ed			bne 	_GSNoIncrement
.26eb	e6 25		inc $25				inc 	zTemp2+1
.26ed					_GSNoIncrement:
.26ed	c9 00		cmp #$00			cmp 	#0
.26ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.26f0					VARArrayLookup:
.26f0	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.26f2	86 21		stx $21				stx 	zTemp0+1
.26f4	b2 20		lda ($20)			lda 	(zTemp0)
.26f6	48		pha				pha
.26f7	5a		phy				phy
.26f8	a0 01		ldy #$01			ldy 	#1
.26fa	b1 20		lda ($20),y			lda 	(zTemp0),y
.26fc	7a		ply				ply
.26fd	48		pha				pha
.26fe	20 bf 15	jsr $15bf			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2701	68		pla				pla 								; array address to zTemp0
.2702	85 21		sta $21				sta 	zTemp0+1
.2704	68		pla				pla
.2705	85 20		sta $20				sta 	zTemp0
.2707	5a		phy				phy 								; save codePtr position.
.2708	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.270a	b1 20		lda ($20),y			lda 	(zTemp0),y
.270c	48		pha				pha 								; save bit 15 on stack.
.270d	29 7f		and #$7f			and 	#$7F
.270f	85 22		sta $22				sta 	zTemp1
.2711	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.2713	d2 20		cmp ($20)			cmp 	(zTemp0)
.2715	a5 0f		lda $0f				lda 	IFR0+IM1
.2717	e5 22		sbc $22				sbc 	zTemp1
.2719	b0 3a		bcs $2755			bcs 	_VALIndex
.271b	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.271d	c9 40		cmp #$40			cmp 	#$40
.271f	b0 34		bcs $2755			bcs 	_VALIndex
.2721	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2723	26 0f		rol $0f				rol 	IFR0+IM1
.2725	fa		plx				plx 								; get msb of size -> X
.2726	30 04		bmi $272c			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2728	06 0e		asl $0e				asl 	IFR0+IM0
.272a	26 0f		rol $0f				rol 	IFR0+IM1
.272c					_VARNotX4:
.272c	18		clc				clc 								; add the two for the size bytes
.272d	a5 0e		lda $0e				lda 	IFR0+IM0
.272f	69 02		adc #$02			adc 	#2
.2731	85 0e		sta $0e				sta 	IFR0+IM0
.2733	90 02		bcc $2737			bcc 	_VARNoCarry1
.2735	e6 0f		inc $0f				inc 	IFR0+IM1
.2737					_VARNoCarry1:
.2737	18		clc				clc 								; calculate the element address and push to stack.
.2738	a5 0e		lda $0e				lda 	IFR0+IM0
.273a	65 20		adc $20				adc 	zTemp0
.273c	48		pha				pha
.273d	a5 0f		lda $0f				lda 	IFR0+IM1
.273f	65 21		adc $21				adc 	zTemp0+1
.2741	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2743	30 04		bmi $2749			bmi 	_VARHasSubLevel
.2745	aa		tax				tax 								; address in XA
.2746	68		pla				pla
.2747	7a		ply				ply 								; restore Y and exit
.2748	60		rts				rts
.2749					_VARHasSubLevel:
.2749	aa		tax				tax 								; get link address in XA
.274a	68		pla				pla
.274b	7a		ply				ply 								; restore code position.
.274c	48		pha				pha
.274d	20 19 25	jsr $2519			jsr 	ERRCheckComma 				; comma required.
.2750	68		pla				pla
.2751	20 f0 26	jsr $26f0			jsr 	VARArrayLookup 				; call it recursively
.2754	60		rts				rts
.2755					_VALIndex:
.2755	4c 5a 24	jmp $245a		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2758					VARCreate:
.2758	5a		phy				phy
.2759	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.275b	a2 00		ldx #$00			ldx 	#0
.275d	20 3d 10	jsr $103d			jsr 	AllocateMemory
.2760	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.2762	86 23		stx $23				stx 	zTemp1+1
.2764	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2766	ad 23 06	lda $0623			lda 	VARHash
.2769	91 22		sta ($22),y			sta 	(zTemp1),y
.276b	c8		iny				iny 								; put address of name into +3,+4
.276c	ad 21 06	lda $0621			lda 	VARNameAddress
.276f	91 22		sta ($22),y			sta 	(zTemp1),y
.2771	c8		iny				iny
.2772	ad 22 06	lda $0622			lda 	VARNameAddress+1
.2775	91 22		sta ($22),y			sta 	(zTemp1),y
.2777	ad 24 06	lda $0624			lda 	VARType
.277a	29 01		and #$01			and 	#1
.277c	f0 06		beq $2784			beq 	_CVNotString
.277e	a0 08		ldy #$08			ldy 	#5+3
.2780	a9 80		lda #$80			lda 	#$80
.2782	91 22		sta ($22),y			sta 	(zTemp1),y
.2784					_CVNotString:
.2784	ad 45 06	lda $0645			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2787	85 20		sta $20				sta 	zTemp0
.2789	ad 46 06	lda $0646			lda 	VARHashEntry+1
.278c	85 21		sta $21				sta 	zTemp0+1
.278e	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2790	b2 20		lda ($20)			lda 	(zTemp0)
.2792	92 22		sta ($22)			sta 	(zTemp1)
.2794	b1 20		lda ($20),y			lda 	(zTemp0),y
.2796	91 22		sta ($22),y			sta 	(zTemp1),y
.2798	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.279a	92 20		sta ($20)			sta 	(zTemp0)
.279c	a5 23		lda $23				lda 	zTemp1+1
.279e	91 20		sta ($20),y			sta 	(zTemp0),y
.27a0	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.27a2	a6 23		ldx $23				ldx 	zTemp1+1
.27a4	18		clc				clc 								; add 5 to point to the data.
.27a5	69 05		adc #$05			adc 	#5
.27a7	90 01		bcc $27aa			bcc 	_VCNoCarry
.27a9	e8		inx				inx
.27aa					_VCNoCarry:
.27aa	7a		ply				ply
.27ab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.27ac					VARFind:
.27ac	5a		phy				phy
.27ad	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.27af	b1 20		lda ($20),y			lda 	(zTemp0),y
.27b1	85 23		sta $23				sta 	zTemp1+1
.27b3	f0 1c		beq $27d1			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.27b5	b2 20		lda ($20)			lda 	(zTemp0)
.27b7	85 22		sta $22				sta 	zTemp1
.27b9					_VFLoop:
.27b9	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.27bb	b1 22		lda ($22),y			lda 	(zTemp1),y
.27bd	cd 23 06	cmp $0623			cmp 	VARHash
.27c0	f0 12		beq $27d4			beq 	_VFHashesMatch 				; if so, check the name.
.27c2					_VFNext:
.27c2	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.27c4	aa		tax				tax
.27c5	a0 01		ldy #$01			ldy 	#1
.27c7	b1 22		lda ($22),y			lda 	(zTemp1),y
.27c9	85 23		sta $23				sta 	zTemp1+1
.27cb	86 22		stx $22				stx 	zTemp1
.27cd	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.27cf	d0 e8		bne $27b9			bne 	_VFLoop
.27d1					_VFExitFail:
.27d1	7a		ply				ply
.27d2	18		clc				clc
.27d3	60		rts				rts
.27d4					_VFHashesMatch:
.27d4	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.27d6	b1 22		lda ($22),y			lda 	(zTemp1),y
.27d8	85 24		sta $24				sta 	zTemp2
.27da	c8		iny				iny
.27db	b1 22		lda ($22),y			lda 	(zTemp1),y
.27dd	85 25		sta $25				sta 	zTemp2+1
.27df	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.27e1					_VFNameCompLoop:
.27e1	c8		iny				iny 								; char at a time
.27e2	b9 25 06	lda $0625,y			lda 	VARBuffer,y
.27e5	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.27e7	d0 d9		bne $27c2			bne 	_VFNext						; next entry if different.
.27e9	c9 7c		cmp #$7c			cmp 	#$7C
.27eb	90 f4		bcc $27e1			bcc 	_VFNameCompLoop 			; until done the whole lot.
.27ed	18		clc				clc
.27ee	a5 22		lda $22				lda 	zTemp1
.27f0	a6 23		ldx $23				ldx 	zTemp1+1
.27f2	69 05		adc #$05			adc 	#5
.27f4	90 01		bcc $27f7			bcc 	_VFNNoCarry
.27f6	e8		inx				inx
.27f7					_VFNNoCarry:
.27f7	7a		ply				ply
.27f8	38		sec				sec
.27f9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.27fa					VARGetInfo:
.27fa	98		tya				tya 								; calculate the address of the identifier start.
.27fb	18		clc				clc
.27fc	65 1e		adc $1e				adc 	codePtr
.27fe	8d 21 06	sta $0621			sta 	VARNameAddress
.2801	a5 1f		lda $1f				lda 	codePtr+1
.2803	69 00		adc #$00			adc 	#0
.2805	8d 22 06	sta $0622			sta 	VARNameAddress+1
.2808	9c 23 06	stz $0623			stz 	VARHash
.280b	a2 00		ldx #$00			ldx 	#0
.280d					_VARCopyName:
.280d	18		clc				clc 								; update the sum hash.
.280e	ad 23 06	lda $0623			lda 	VARHash
.2811	71 1e		adc ($1e),y			adc 	(codePtr),y
.2813	8d 23 06	sta $0623			sta 	VARHash
.2816	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.2818	c8		iny				iny
.2819	9d 25 06	sta $0625,x			sta 	VARBuffer,x
.281c	e8		inx				inx
.281d	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.281f	90 ec		bcc $280d			bcc 	_VARCopyName
.2821	8d 24 06	sta $0624			sta 	VARType 					; save type byte
.2824	29 03		and #$03			and 	#3 							; type is 0-3
.2826	0a		asl a				asl 	a
.2827	0a		asl a				asl 	a
.2828	85 20		sta $20				sta 	zTemp0
.282a	ad 23 06	lda $0623			lda 	VARHash 					; force into range of hash entries per type.
.282d	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.282f	65 20		adc $20				adc 	zTemp0 						; index of hash table
.2831	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2832	69 47		adc #$47			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2834	85 20		sta $20				sta 	zTemp0
.2836	8d 45 06	sta $0645			sta 	VARHashEntry
.2839	a9 06		lda #$06			lda 	#VARHashTables >> 8
.283b	69 00		adc #$00			adc 	#0
.283d	85 21		sta $21				sta 	zTemp0+1
.283f	8d 46 06	sta $0646			sta 	VARHashEntry+1
.2842	60		rts				rts
.2843					VARClearHashTables:
.2843	a2 00		ldx #$00			ldx 	#0
.2845					_VCHRLoop:
.2845	a9 00		lda #$00			lda 	#0
.2847	9d 47 06	sta $0647,x			sta 	VARHashTables,x
.284a	e8		inx				inx
.284b	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.284d	d0 f6		bne $2845			bne 	_VCHRLoop
.284f	60		rts				rts
.0621					VARNameAddress:
>0621							.fill 	2
.0623					VARHash:
>0623							.fill 	1
.0624					VARType:
>0624							.fill 	1
.0625					VARBuffer:
>0625							.fill 	32
.0645					VARHashEntry:
>0645							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0647					VARHashTables:
>0647							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2850					VARCheckSimple:
.2850	aa		tax				tax 								; save in X
.2851	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2853	c9 7c		cmp #$7c			cmp 	#$7C
.2855	d0 15		bne $286c			bne 	_VCSComplex
.2857	c8		iny				iny 								; consume the second byte, the type.
.2858	8a		txa				txa  								; character (40-7F) x 4
.2859	0a		asl a				asl 	a
.285a	0a		asl a				asl  	a
.285b	18		clc				clc
.285c	69 67		adc #$67			adc 	#FastVariables & $FF
.285e	85 0e		sta $0e				sta 	IFR0+IM0
.2860	a9 06		lda #$06			lda 	#FastVariables >> 8
.2862	69 00		adc #$00			adc 	#0
.2864	85 0f		sta $0f				sta 	IFR0+IM1
.2866	64 10		stz $10				stz 	IFR0+IM2
.2868	64 11		stz $11				stz 	IFR0+IExp
.286a	38		sec				sec 								; it's a reference
.286b	60		rts				rts
.286c					_VCSComplex:
.286c	88		dey				dey	 								; extract information.
.286d	20 fa 27	jsr $27fa			jsr 	VARGetInfo
.2870	20 ac 27	jsr $27ac			jsr 	VARFind 					; search for variable
.2873	b0 0a		bcs $287f			bcs 	_VCSHaveVariable
.2875	ad 24 06	lda $0624			lda 	VARType 					; error if arrays, cannot autocreate
.2878	29 02		and #$02			and 	#2
.287a	d0 25		bne $28a1			bne 	_VCNoCreate
.287c	20 58 27	jsr $2758			jsr 	VARCreate 					; create variable
.287f					_VCSHaveVariable:
.287f	48		pha				pha 								; save LSB on the stack
.2880	ad 24 06	lda $0624			lda 	VARType 					; get var type, and shift bit 1 into carry
.2883	6a		ror a				ror 	a
.2884	6a		ror a				ror 	a
.2885	68		pla				pla 								; restore LSB
.2886	90 08		bcc $2890			bcc 	_VCSNotArray 				; skip if not an array
.2888	20 f0 26	jsr $26f0			jsr 	VARArrayLookup 				; look for subscripts.
.288b	48		pha				pha 								; check )
.288c	20 11 25	jsr $2511			jsr 	ERRCheckRParen
.288f	68		pla				pla
.2890					_VCSNotArray:
.2890	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.2892	85 0e		sta $0e				sta 	IFR0+IM0
.2894	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.2896	ad 24 06	lda $0624			lda 	VARType 					; number/string bit into carry
.2899	6a		ror a				ror 	a
.289a	a9 00		lda #$00			lda 	#0
.289c	6a		ror a				ror 	a 							; now $00 or $80
.289d	85 11		sta $11				sta 	IFR0+IExp
.289f	38		sec				sec 								; it's a reference
.28a0	60		rts				rts
.28a1					_VCNoCreate:
.28a1	4c 80 24	jmp $2480		jmp	ErrorV_uninitialised
.0667					FastVariables:
>0667							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.28a4					IFInitialise:
.28a4	9c d7 06	stz $06d7			stz 	IFStackIndex
.28a7	60		rts				rts
.28a8					IFloatSubtract:
.28a8	da		phx				phx
.28a9	a2 0e		ldx #$0e			ldx 	#IFR0
.28ab	20 c4 2e	jsr $2ec4			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.28ae	fa		plx				plx
.28af					IFloatAdd:
.28af	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.28b1	05 11		ora $11				ora 	IFR0+IExp
.28b3	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.28b5	d0 4e		bne $2905			bne 	_IFloatAddDecimals 			; decimal version.
.28b7					_IFAddSubMantissa:
.28b7	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.28b9	45 11		eor $11				eor 	IFR0+IExp
.28bb	29 40		and #$40			and 	#IFSign
.28bd	d0 21		bne $28e0			bne 	_IFloatSubMantissa
.28bf	18		clc				clc 								; do the actual addition
.28c0	a5 0e		lda $0e			lda 	IFR0+IM0
.28c2	75 00		adc $00,x		adc 		IM0,x
.28c4	85 0e		sta $0e			sta 	IFR0+IM0
.28c6	a5 0f		lda $0f			lda 	IFR0+IM1
.28c8	75 01		adc $01,x		adc 		IM1,x
.28ca	85 0f		sta $0f			sta 	IFR0+IM1
.28cc	a5 10		lda $10			lda 	IFR0+IM2
.28ce	75 02		adc $02,x		adc 		IM2,x
.28d0	85 10		sta $10			sta 	IFR0+IM2
.28d2	10 29		bpl $28fd			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.28d4	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.28d6	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.28d9	20 12 2f	jsr $2f12			jsr 	IFloatIncExponent
.28dc	d0 1f		bne $28fd			bne 	_IFloatAddExit
.28de	38		sec				sec 								; overflowed numerically.
.28df	60		rts				rts
.28e0					_IFloatSubMantissa:
.28e0	38		sec				sec 								; do the subtraction R0-Rx
.28e1	a5 0e		lda $0e			lda 	IFR0+IM0
.28e3	f5 00		sbc $00,x		sbc 		IM0,x
.28e5	85 0e		sta $0e			sta 	IFR0+IM0
.28e7	a5 0f		lda $0f			lda 	IFR0+IM1
.28e9	f5 01		sbc $01,x		sbc 		IM1,x
.28eb	85 0f		sta $0f			sta 	IFR0+IM1
.28ed	a5 10		lda $10			lda 	IFR0+IM2
.28ef	f5 02		sbc $02,x		sbc 		IM2,x
.28f1	85 10		sta $10			sta 	IFR0+IM2
.28f3	b0 08		bcs $28fd			bcs 	_IFloatAddExit 				; no borrow so we are done.
.28f5	a2 0e		ldx #$0e			ldx 	#IFR0
.28f7	20 cc 2e	jsr $2ecc			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.28fa	20 c4 2e	jsr $2ec4			jsr 	IFloatNegate 				; negate
.28fd					_IFloatAddExit:
.28fd	18		clc				clc
.28fe	60		rts				rts
.28ff					_IFloatZeroAdd:
.28ff	fa		plx				plx 								; return this value in R0
.2900	20 4a 2e	jsr $2e4a			jsr 	IFloatCopyFromRegister
.2903	18		clc				clc
.2904	60		rts				rts
.2905					_IFloatAddDecimals:
.2905	20 b2 2e	jsr $2eb2			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2908	f0 f3		beq $28fd			beq 	_IFloatAddExit
.290a	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise 			; normalise RX
.290d	da		phx				phx 								; normalise R0
.290e	a2 0e		ldx #$0e			ldx 	#IFR0
.2910	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.2913	f0 ea		beq $28ff			beq 	_IFloatZeroAdd
.2915	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise
.2918	fa		plx				plx
.2919	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.291b	29 3f		and #$3f			and 	#IFXMask
.291d	38		sec				sec
.291e	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2920	85 0c		sta $0c				sta 	iTemp0
.2922	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2924	29 3f		and #$3f			and 	#IFXMask
.2926	38		sec				sec
.2927	e9 20		sbc #$20			sbc 	#$20
.2929	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.292b	b0 02		bcs $292f			bcs 	_IFloatHaveLarger
.292d	a5 0c		lda $0c				lda 	iTemp0
.292f					_IFloatHaveLarger:
.292f	18		clc				clc 								; get the actual one back.
.2930	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2932	20 3f 29	jsr $293f			jsr 	_IFShiftXToA
.2935	da		phx				phx
.2936	a2 0e		ldx #$0e			ldx 	#IFR0
.2938	20 3f 29	jsr $293f			jsr 	_IFShiftXToA
.293b	fa		plx				plx
.293c	4c b7 28	jmp $28b7			jmp 	_IFAddSubMantissa 			; do the adding bit.
.293f					_IFShiftXToA:
.293f	8d cf 06	sta $06cf			sta 	IFTarget
.2942	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; check adding zero ?
.2945	f0 11		beq $2958			beq 	_IFSXExit
.2947					_IFSXLoop:
.2947	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2949	29 3f		and #$3f			and 	#IFXMask
.294b	cd cf 06	cmp $06cf			cmp 	IFTarget
.294e	f0 08		beq $2958			beq 	_IFSXExit
.2950	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.2953	20 12 2f	jsr $2f12			jsr 	IFloatIncExponent
.2956	80 ef		bra $2947			bra 	_IFSXLoop
.2958					_IFSXExit:
.2958	60		rts				rts
.06cf					IFTarget:
>06cf							.fill 	1
.2959					IFloatMultiply:
.2959	8e cf 06	stx $06cf			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.295c	20 14 2a	jsr $2a14			jsr 	IFCalculateNewSign
.295f	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2961	05 11		ora $11				ora 	IFR0+IExp
.2963	29 3f		and #$3f			and 	#IFXMask
.2965	15 01		ora $01,x			ora 	IM1,x
.2967	05 0f		ora $0f				ora 	IFR0+IM1
.2969	15 02		ora $02,x			ora 	IM2,x
.296b	05 10		ora $10				ora 	IFR0+IM2
.296d	d0 0a		bne $2979			bne 	_IFMStandard
.296f	20 95 2e	jsr $2e95			jsr 	IFloatMultiply8BitRx
.2972	ad d1 06	lda $06d1			lda 	IFNewSign
.2975	85 11		sta $11				sta 	IFR0+IExp
.2977	18		clc				clc
.2978	60		rts				rts
.2979					_IFMStandard:
.2979	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.297b	20 0b 2a	jsr $2a0b			jsr 	IFMSignExtend
.297e	8d d0 06	sta $06d0			sta 	IFNewExponent
.2981	a5 11		lda $11				lda 	IFR0+IExp
.2983	20 0b 2a	jsr $2a0b			jsr 	IFMSignExtend
.2986	18		clc				clc
.2987	6d d0 06	adc $06d0			adc 	IFNewExponent
.298a	8d d0 06	sta $06d0			sta 	IFNewExponent
.298d	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.298f	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister
.2992	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.2994	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2997					_IFMLoop:
.2997	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2999	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.299c	f0 3a		beq $29d8			beq 	_IFMExit
.299e	ae cf 06	ldx $06cf			ldx 	IFTarget 					; look at adder MSB
.29a1	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.29a3	10 03		bpl $29a8			bpl	 	_IFMTargetOkay
.29a5	20 fc 29	jsr $29fc			jsr 	_IFMShiftAll
.29a8					_IFMTargetOkay:
.29a8	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.29aa	29 01		and #$01			and 	#1
.29ac	f0 16		beq $29c4			beq 	_IFMNoAdd
.29ae	ae cf 06	ldx $06cf			ldx 	IFTarget 					; add adder
.29b1	18		clc				clc
.29b2	a5 0e		lda $0e			lda 	IFR0+IM0
.29b4	75 00		adc $00,x		adc 		IM0,x
.29b6	85 0e		sta $0e			sta 	IFR0+IM0
.29b8	a5 0f		lda $0f			lda 	IFR0+IM1
.29ba	75 01		adc $01,x		adc 		IM1,x
.29bc	85 0f		sta $0f			sta 	IFR0+IM1
.29be	a5 10		lda $10			lda 	IFR0+IM2
.29c0	75 02		adc $02,x		adc 		IM2,x
.29c2	85 10		sta $10			sta 	IFR0+IM2
.29c4					_IFMNoAdd:
.29c4	a5 10		lda $10				lda 	IFR0+IM2
.29c6	10 03		bpl $29cb			bpl 	_IFMResultOkay
.29c8	20 fc 29	jsr $29fc			jsr 	_IFMShiftAll
.29cb					_IFMResultOkay:
.29cb	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29cd	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.29d0	ae cf 06	ldx $06cf			ldx 	IFTarget
.29d3	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.29d6	80 bf		bra $2997			bra 	_IFMLoop
.29d8					_IFMExit:
.29d8	ad d0 06	lda $06d0			lda 	IFNewExponent 				; validate new exponent.
.29db	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.29dd	90 0f		bcc $29ee			bcc 	_IFMOkay
.29df	c9 e0		cmp #$e0			cmp 	#$E0
.29e1	b0 0b		bcs $29ee			bcs 	_IFMOkay
.29e3	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.29e5	f0 13		beq $29fa			beq 	_IFMError
.29e7	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.29e9	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.29ec	18		clc				clc
.29ed	60		rts				rts
.29ee					_IFMOkay:
.29ee	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.29f0	0d d1 06	ora $06d1			ora 	IFNewSign
.29f3	85 11		sta $11				sta 	IFR0+IExp
.29f5	18		clc				clc
.29f6	60		rts				rts
.29f7	4c ff ff	jmp $ffff			jmp 	$FFFF
.29fa					_IFMError:
.29fa	38		sec				sec
.29fb	60		rts				rts
.29fc					_IFMShiftAll:
.29fc	a2 0e		ldx #$0e			ldx 	#IFR0
.29fe	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.2a01	ae cf 06	ldx $06cf			ldx 	IFTarget
.2a04	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.2a07	ee d0 06	inc $06d0			inc 	IFNewExponent
.2a0a	60		rts				rts
.2a0b					IFMSignExtend:
.2a0b	29 3f		and #$3f			and 	#IFXMask
.2a0d	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a0f	90 02		bcc $2a13			bcc 	_IFMNoSXX
.2a11	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a13					_IFMNoSXX:
.2a13	60		rts				rts
.2a14					IFCalculateNewSign:
.2a14	b5 03		lda $03,x			lda 	IExp,x
.2a16	45 11		eor $11				eor 	IFR0+IExp
.2a18	29 40		and #$40			and 	#IFSign
.2a1a	8d d1 06	sta $06d1			sta 	IFNewSign
.2a1d	60		rts				rts
.06d0					IFNewExponent:
>06d0							.fill 	1
.06d1					IFNewSign:
>06d1							.fill 	1
.2a1e					IFloatDivideInteger:
.2a1e	20 37 2a	jsr $2a37			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2a21	b0 06		bcs $2a29			bcs 	_IFDIExit
.2a23	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.2a25	20 4a 2e	jsr $2e4a			jsr 	IFloatCopyFromRegister
.2a28	18		clc				clc
.2a29					_IFDIExit:
.2a29	60		rts				rts
.2a2a					IFloatModulusInteger:
.2a2a	20 37 2a	jsr $2a37			jsr 	IFloatDivideIntegerCommon
.2a2d	b0 07		bcs $2a36			bcs 	_IFMIExit
.2a2f	ae cf 06	ldx $06cf			ldx 	IFTarget
.2a32	20 4a 2e	jsr $2e4a			jsr 	IFloatCopyFromRegister
.2a35	18		clc				clc
.2a36					_IFMIExit:
.2a36	60		rts				rts
.2a37					IFloatDivideIntegerCommon:
.2a37	8e cf 06	stx $06cf			stx 	IFTarget  					; this is s1, s0 = R0
.2a3a	20 14 2a	jsr $2a14			jsr 	IFCalculateNewSign 			; calculate sign of result
.2a3d	20 65 2a	jsr $2a65			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2a40	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.2a42	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.2a45	f0 1c		beq $2a63			beq 	_IFDIDivZero
.2a47	ae cf 06	ldx $06cf			ldx 	IFTarget 					; zero Rx (S1)
.2a4a	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2a4d	5a		phy				phy
.2a4e	a0 18		ldy #$18			ldy 	#24
.2a50					_IFDILoop:
.2a50	20 76 2a	jsr $2a76			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2a53	20 82 2a	jsr $2a82			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2a56	88		dey				dey
.2a57	d0 f7		bne $2a50			bne 	_IFDILoop 					; do it 24 times
.2a59	7a		ply				ply
.2a5a	ad d1 06	lda $06d1			lda 	IFNewSign 					; set sign of result.
.2a5d	29 40		and #$40			and 	#IFSign
.2a5f	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a61	18		clc				clc 								; is okay.
.2a62	60		rts				rts
.2a63					_IFDIDivZero:
.2a63	38		sec				sec
.2a64	60		rts				rts
.2a65					IFDCopyRXToRTemp:
.2a65	b5 00		lda $00,x			lda 	IM0,x
.2a67	85 1a		sta $1a				sta 	IFRTemp+IM0
.2a69	b5 01		lda $01,x			lda 	IM1,x
.2a6b	85 1b		sta $1b				sta 	IFRTemp+IM1
.2a6d	b5 02		lda $02,x			lda 	IM2,x
.2a6f	85 1c		sta $1c				sta 	IFRTemp+IM2
.2a71	b5 03		lda $03,x			lda 	IExp,x
.2a73	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a75	60		rts				rts
.2a76					IFDShiftSTempS1Left:
.2a76	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2a78	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft
.2a7b	ae cf 06	ldx $06cf			ldx 	IFTarget
.2a7e	20 e1 2e	jsr $2ee1			jsr 	IFloatRotateLeft
.2a81	60		rts				rts
.2a82					IFDTrySubtract:
.2a82	ae cf 06	ldx $06cf			ldx 	IFTarget 					; s1 = Rx
.2a85	38		sec				sec 								; subtract, saving the results on the stack.
.2a86	b5 00		lda $00,x			lda 	IM0,x
.2a88	e5 0e		sbc $0e				sbc 	IFR0+IM0
.2a8a	48		pha				pha
.2a8b	b5 01		lda $01,x			lda 	IM1,x
.2a8d	e5 0f		sbc $0f				sbc 	IFR0+IM1
.2a8f	48		pha				pha
.2a90	b5 02		lda $02,x			lda 	IM2,x
.2a92	e5 10		sbc $10				sbc 	IFR0+IM2
.2a94	b0 03		bcs $2a99			bcs 	_IFDCanSubtract
.2a96	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2a97	68		pla				pla
.2a98	60		rts				rts
.2a99					_IFDCanSubtract:
.2a99	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2a9b	68		pla				pla
.2a9c	95 01		sta $01,x			sta 	IM1,x
.2a9e	68		pla				pla
.2a9f	95 00		sta $00,x			sta 	IM0,x
.2aa1	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.2aa3	d0 06		bne $2aab			bne 	_IFDCSExit
.2aa5	e6 1b		inc $1b				inc 	IFRTemp+IM1
.2aa7	d0 02		bne $2aab			bne 	_IFDCSExit
.2aa9	e6 1c		inc $1c				inc 	IFRTemp+IM2
.2aab					_IFDCSExit:
.2aab	60		rts				rts
.2aac					IFloatBitwiseAnd:
.2aac	5a		phy				phy
.2aad	20 f1 2a	jsr $2af1			jsr 	IFPreProcessBitwise 		; set up everything.
.2ab0	d0 0f		bne $2ac1			bne 	_IFBAExit
.2ab2					_IFBALoop:
.2ab2	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2ab5	35 00		and $00,x			and 	IM0,x
.2ab7	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2aba	e8		inx				inx
.2abb	c8		iny				iny
.2abc	c0 03		cpy #$03			cpy 	#3
.2abe	d0 f2		bne $2ab2			bne 	_IFBALoop
.2ac0	18		clc				clc
.2ac1					_IFBAExit:
.2ac1	7a		ply				ply
.2ac2	60		rts				rts
.2ac3					IFloatBitwiseOr:
.2ac3	5a		phy				phy
.2ac4	20 f1 2a	jsr $2af1			jsr 	IFPreProcessBitwise 		; set up everything.
.2ac7	d0 0f		bne $2ad8			bne 	_IFBAExit
.2ac9					_IFBALoop:
.2ac9	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2acc	15 00		ora $00,x			ora 	IM0,x
.2ace	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ad1	e8		inx				inx
.2ad2	c8		iny				iny
.2ad3	c0 03		cpy #$03			cpy 	#3
.2ad5	d0 f2		bne $2ac9			bne 	_IFBALoop
.2ad7	18		clc				clc
.2ad8					_IFBAExit:
.2ad8	7a		ply				ply
.2ad9	60		rts				rts
.2ada					IFloatBitwiseXor:
.2ada	5a		phy				phy
.2adb	20 f1 2a	jsr $2af1			jsr 	IFPreProcessBitwise 		; set up everything.
.2ade	d0 0f		bne $2aef			bne 	_IFBAExit
.2ae0					_IFBALoop:
.2ae0	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2ae3	55 00		eor $00,x			eor 	IM0,x
.2ae5	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ae8	e8		inx				inx
.2ae9	c8		iny				iny
.2aea	c0 03		cpy #$03			cpy 	#3
.2aec	d0 f2		bne $2ae0			bne 	_IFBALoop
.2aee	18		clc				clc
.2aef					_IFBAExit:
.2aef	7a		ply				ply
.2af0	60		rts				rts
.2af1					IFPreProcessBitwise:
.2af1	a0 00		ldy #$00			ldy 	#0 							; set index.
.2af3	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.2af5	15 03		ora $03,x			ora 	IExp,x
.2af7	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2af9	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2afb	38		sec				sec 								; carry set just in cases.
.2afc	60		rts				rts
.2afd					IFloatAbsoluteR0:
.2afd	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.2aff	29 bf		and #$bf			and 	#IFSign ^ 255
.2b01	85 11		sta $11				sta 	IFR0+IExp
.2b03	18		clc				clc
.2b04	60		rts				rts
.2b05					IFloatSquareRootR0:
.2b05	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.2b07	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.2b0a	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.2b0c	29 40		and #$40			and 	#IFSign
.2b0e	d0 2f		bne $2b3f			bne 	_IFSRFail
.2b10	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise 			; it will work better !
.2b13	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.2b15	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister
.2b18	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2b1a	20 0b 2a	jsr $2a0b			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2b1d	18		clc				clc
.2b1e	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2b20	85 11		sta $11				sta 	IFR0+IExp
.2b22	4a		lsr a				lsr 	a 							; which we can halve.
.2b23	38		sec				sec 								; convert back
.2b24	e9 17		sbc #$17			sbc 	#23
.2b26	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2b28	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.2b2a	20 41 2b	jsr $2b41			jsr 	_IFSRNewton
.2b2d	20 41 2b	jsr $2b41			jsr 	_IFSRNewton
.2b30	20 41 2b	jsr $2b41			jsr 	_IFSRNewton
.2b33	20 41 2b	jsr $2b41			jsr 	_IFSRNewton
.2b36	18		clc				clc
.2b37	60		rts				rts
.2b38					_IFSRZero:
.2b38	a2 0e		ldx #$0e			ldx 	#IFR0
.2b3a	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2b3d	18		clc				clc
.2b3e	60		rts				rts
.2b3f					_IFSRFail:
.2b3f	38		sec				sec
.2b40	60		rts				rts
.2b41					_IFSRNewton:
.2b41	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.2b43	20 08 2e	jsr $2e08			jsr 	IFloatPushRx
.2b46	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2b48	20 08 2e	jsr $2e08			jsr 	IFloatPushRx
.2b4b	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.2b4d	20 dc 2b	jsr $2bdc			jsr 	IFloatDivideFloat
.2b50	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2b52	20 29 2e	jsr $2e29			jsr 	IFloatPullRx
.2b55	20 af 28	jsr $28af			jsr 	IFloatAdd 					; now guess + original/guess
.2b58	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.2b5a	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.2b5d	a2 12		ldx #$12			ldx 	#IFR1
.2b5f	20 29 2e	jsr $2e29			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2b62	60		rts				rts
.2b63					IFloatFractionalR0:
.2b63	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2b65	29 3f		and #$3f			and 	#IFXMask
.2b67	f0 17		beq $2b80			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2b69	20 fd 2a	jsr $2afd			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2b6c	a2 0e		ldx #$0e			ldx 	#IFR0
.2b6e	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise 			; normalise R0
.2b71	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.2b73	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister
.2b76	20 b9 2b	jsr $2bb9			jsr 	IFloatIntegerR0 			; take integer part of R0
.2b79	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.2b7b	20 a8 28	jsr $28a8			jsr 	IFloatSubtract
.2b7e	80 05		bra $2b85			bra 	_FIPExit
.2b80					_FIPZero:
.2b80	a2 0e		ldx #$0e			ldx 	#IFR0
.2b82	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2b85					_FIPExit:
.2b85	18		clc				clc
.2b86	60		rts				rts
.2b87					IFloatCompare:
.2b87	20 a8 28	jsr $28a8			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2b8a	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2b8c	05 11		ora $11				ora 	IFR0+IExp
.2b8e	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.2b90	29 3f		and #$3f			and 	#IFXMask
.2b92	d0 19		bne $2bad			bne 	_IFCNonInteger
.2b94	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; check if zero
.2b97	f0 0f		beq $2ba8			beq 	_IFCZero
.2b99					_IFCReturnSign:
.2b99	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2b9b	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2b9d	48		pha				pha
.2b9e	a9 01		lda #$01			lda 	#1
.2ba0	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte 				; return to +1
.2ba3	68		pla				pla 								; sign bit back
.2ba4	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.2ba6	18		clc				clc
.2ba7	60		rts				rts
.2ba8					_IFCZero:
.2ba8	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2bab	18		clc				clc
.2bac	60		rts				rts
.2bad					_IFCNonInteger:
.2bad	a5 0e		lda $0e				lda 	IFR0+IM0
.2baf	29 00		and #$00			and		#$00
.2bb1	05 0f		ora $0f				ora 	IFR0+IM1
.2bb3	05 10		ora $10				ora 	IFR0+IM2
.2bb5	f0 f1		beq $2ba8			beq 	_IFCZero 					; near enough !
.2bb7	80 e0		bra $2b99			bra 	_IFCReturnSign 				; return the sign of the difference.
.2bb9					IFloatIntegerR0:
.2bb9	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2bbb	29 3f		and #$3f			and 	#IFXMask
.2bbd	f0 1b		beq $2bda			beq 	_FIPExit 					; if so do nothing
.2bbf	a2 0e		ldx #$0e			ldx 	#IFR0
.2bc1	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise 			; normalise
.2bc4	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; is it zero ?
.2bc7	f0 0e		beq $2bd7			beq 	_FIPZero 					; if so return zero.
.2bc9					_FIPShift:
.2bc9	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2bcb	29 20		and #$20			and 	#$20 						; still -ve
.2bcd	f0 0b		beq $2bda			beq 	_FIPExit
.2bcf	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight 			; shift mantissa right
.2bd2	20 12 2f	jsr $2f12			jsr 	IFloatIncExponent 			; bump exponent
.2bd5	80 f2		bra $2bc9			bra 	_FIPShift
.2bd7					_FIPZero:
.2bd7	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2bda					_FIPExit:
.2bda	18		clc				clc
.2bdb	60		rts				rts
.2bdc					IFloatDivideFloat:
.2bdc	8e cf 06	stx $06cf			stx 	IFTarget  					; this is s1, s0 = R0
.2bdf	20 14 2a	jsr $2a14			jsr 	IFCalculateNewSign 			; calculate sign of result
.2be2	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise 			; normalise RX
.2be5	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.2be7	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise
.2bea	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.2bed	f0 56		beq $2c45			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2bef	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.2bf1	20 0b 2a	jsr $2a0b			jsr 	IFMSignExtend
.2bf4	8d d0 06	sta $06d0			sta 	IFNewExponent
.2bf7	ae cf 06	ldx $06cf			ldx 	IFTarget 					; calculate s1.exponent
.2bfa	b5 03		lda $03,x			lda 	IExp,x
.2bfc	20 0b 2a	jsr $2a0b			jsr 	IFMSignExtend
.2bff	38		sec				sec
.2c00	ed d0 06	sbc $06d0			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2c03	38		sec				sec
.2c04	e9 17		sbc #$17			sbc 	#23
.2c06	8d d0 06	sta $06d0			sta 	IFNewExponent
.2c09	20 47 2c	jsr $2c47			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2c0c	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c0e	10 08		bpl $2c18			bpl 	_IFDFNoShiftResult
.2c10	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.2c12	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.2c15	ee d0 06	inc $06d0			inc 	IFNewExponent
.2c18					_IFDFNoShiftResult:
.2c18	ad d0 06	lda $06d0			lda 	IFNewExponent 				; underflow/overflow check.
.2c1b	30 06		bmi $2c23			bmi 	_IFDFCheckUnderflow
.2c1d	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2c1f	b0 24		bcs $2c45			bcs 	_IFDFDivZero
.2c21	80 11		bra $2c34			bra		_IFDFExit
.2c23					_IFDFCheckUnderflow:
.2c23	ad d0 06	lda $06d0			lda 	IFNewExponent 				; shift into a legal exponent.
.2c26	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2c28	b0 0a		bcs $2c34			bcs 	_IFDFExit
.2c2a	ee d0 06	inc $06d0			inc 	IFNewExponent
.2c2d	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2c2f	20 e8 2e	jsr $2ee8			jsr 	IFloatShiftRight
.2c32	80 ef		bra $2c23			bra 	_IFDFCheckUnderflow
.2c34					_IFDFExit:
.2c34	ad d0 06	lda $06d0			lda 	IFNewExponent 				; combine exponent and sign.
.2c37	29 3f		and #$3f			and 	#IFXMask
.2c39	0d d1 06	ora $06d1			ora 	IFNewSign
.2c3c	85 1d		sta $1d				sta 	IFRTemp+IExp
.2c3e	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.2c40	20 4a 2e	jsr $2e4a			jsr 	IFloatCopyFromRegister
.2c43	18		clc				clc
.2c44	60		rts				rts
.2c45					_IFDFDivZero:
.2c45	38		sec				sec
.2c46	60		rts				rts
.2c47					IFloatDivideSupport:
.2c47	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.2c49	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2c4c	5a		phy				phy 								; main division loop x 23
.2c4d	a0 17		ldy #$17			ldy 	#23
.2c4f					_IFDSLoop:
.2c4f	20 82 2a	jsr $2a82			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c52	20 76 2a	jsr $2a76			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c55	88		dey				dey
.2c56	d0 f7		bne $2c4f			bne 	_IFDSLoop 					; do it 24 times
.2c58	7a		ply				ply
.2c59	60		rts				rts
.2c5a					IFloatIntegerToStringR0:
.2c5a	8d d2 06	sta $06d2			sta 	IFBase 						; save base to use.
.2c5d	20 3a 2f	jsr $2f3a			jsr 	IFloatBufferReset			; empty buffer
.2c60	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.2c62	29 3f		and #$3f			and 	#IFXMask
.2c64	d0 1e		bne $2c84			bne 	_IFIFail
.2c66	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.2c68	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.2c6b	f0 0e		beq $2c7b			beq 	_IFINotNegative
.2c6d	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.2c6f	29 40		and #$40			and 	#IFSign
.2c71	f0 08		beq $2c7b			beq 	_IFINotNegative
.2c73	a9 2d		lda #$2d			lda 	#"-"						; output -
.2c75	20 49 2f	jsr $2f49			jsr 	IFloatBufferWrite
.2c78	20 c4 2e	jsr $2ec4			jsr 	IFloatNegate 				; tidy up !
.2c7b					_IFINotNegative:
.2c7b	20 86 2c	jsr $2c86			jsr 	_IFIRecursiveConvert 		; start converting
.2c7e	20 41 2f	jsr $2f41			jsr 	IFloatGetBufferAddress
.2c81	18		clc				clc
.2c82	80 01		bra $2c85			bra 	_IFIExit
.2c84					_IFIFail:
.2c84	38		sec				sec
.2c85					_IFIExit:
.2c85	60		rts				rts
.2c86					_IFIRecursiveConvert:
.2c86	a2 12		ldx #$12			ldx 	#IFR1
.2c88	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister 		; R0->R1
.2c8b	a2 0e		ldx #$0e			ldx 	#IFR0
.2c8d	ad d2 06	lda $06d2			lda 	IFBase 						; Base -> R0
.2c90	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.2c93	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.2c95	20 1e 2a	jsr $2a1e			jsr 	IFloatDivideInteger
.2c98	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.2c9a	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero
.2c9d	f0 09		beq $2ca8			beq 	_IFIOutDigit
.2c9f	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.2ca1	48		pha				pha
.2ca2	20 86 2c	jsr $2c86			jsr 	_IFIRecursiveConvert 		; convert the divider
.2ca5	68		pla				pla
.2ca6	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.2ca8					_IFIOutDigit:
.2ca8	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.2caa	c9 0a		cmp #$0a			cmp	 	#10
.2cac	90 02		bcc $2cb0			bcc 	_IFINotHex
.2cae	69 06		adc #$06			adc 	#6
.2cb0					_IFINotHex:
.2cb0	69 30		adc #$30			adc 	#48
.2cb2	20 49 2f	jsr $2f49			jsr 	IFloatBufferWrite
.2cb5	60		rts				rts
.06d2					IFBase:
>06d2							.fill 	1
.2cb6					IFloatFloatToStringR0:
.2cb6	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2cb8	20 08 2e	jsr $2e08			jsr 	IFloatPushRx
.2cbb	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister
.2cbe	20 b9 2b	jsr $2bb9			jsr 	IFloatIntegerR0				; make R0 integer
.2cc1	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2cc3	20 5a 2c	jsr $2c5a			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2cc6	9c d3 06	stz $06d3			stz 	IFloatDecimalCount 			; zero the decimal count.
.2cc9	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.2ccb	29 3f		and #$3f			and 	#IFXMask
.2ccd	f0 44		beq $2d13			beq 	_IFFSExit
.2ccf					_IFloatFracLoop:
.2ccf	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.2cd1	20 4a 2e	jsr $2e4a			jsr 	IFloatCopyFromRegister
.2cd4	20 63 2b	jsr $2b63			jsr 	IFloatFractionalR0
.2cd7	20 f0 2e	jsr $2ef0			jsr 	IFloatNormalise
.2cda	a2 16		ldx #$16			ldx 	#IFR2
.2cdc	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister 		; copy to R2
.2cdf	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.2ce1	a9 0a		lda #$0a			lda 	#10
.2ce3	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.2ce6	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.2ce8	20 59 29	jsr $2959			jsr 	IFloatMultiply
.2ceb	a2 16		ldx #$16			ldx 	#IFR2
.2ced	20 5b 2e	jsr $2e5b			jsr 	IFloatCopyToRegister
.2cf0	20 b9 2b	jsr $2bb9			jsr 	IFloatIntegerR0 			; get integer part of R0
.2cf3	ad d3 06	lda $06d3			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2cf6	c9 03		cmp #$03			cmp 	#3
.2cf8	f0 16		beq $2d10			beq 	_IFFSExitStripZero
.2cfa	ad d3 06	lda $06d3			lda 	IFloatDecimalCount 			; written the DP yet ?
.2cfd	d0 05		bne $2d04			bne 	_IFloatNotFirst
.2cff	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2d01	20 49 2f	jsr $2f49			jsr 	IFloatBufferWrite
.2d04					_IFloatNotFirst:
.2d04	ee d3 06	inc $06d3			inc 	IFloatDecimalCount
.2d07	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.2d09	09 30		ora #$30			ora 	#"0"						; ASCII
.2d0b	20 49 2f	jsr $2f49			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d0e	80 bf		bra $2ccf			bra 	_IFloatFracLoop
.2d10					_IFFSExitStripZero:
.2d10	20 58 2f	jsr $2f58			jsr 	IFloatStripTrailingZeros
.2d13					_IFFSExit:
.2d13	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.2d15	20 29 2e	jsr $2e29			jsr 	IFloatPullRx
.2d18	20 41 2f	jsr $2f41			jsr 	IFloatGetBufferAddress
.2d1b	18		clc				clc
.2d1c	60		rts				rts
.06d3					IFloatDecimalCount:
>06d3							.fill 	1
.2d1d					IFloatStringToFloatR0:
.2d1d	8d d4 06	sta $06d4			sta 	IFCount 					; save it out.
.2d20	86 0c		stx $0c				stx 	iTemp0
.2d22	84 0d		sty $0d				sty 	iTemp0+1
.2d24	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.2d26	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2d29	9c d5 06	stz $06d5			stz 	IFSignFlag 					; clear the sign flag
.2d2c	20 b9 2d	jsr $2db9			jsr 	IFSTFGetNext 				; get first
.2d2f	f0 1b		beq $2d4c			beq 	_IFSTFFail 					; no character
.2d31	90 10		bcc $2d43			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2d33	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2d35	d0 15		bne $2d4c			bne 	_IFSTFFail
.2d37	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2d39	8d d5 06	sta $06d5			sta 	IFSignFlag
.2d3c					_IFSTFLoop:
.2d3c	20 b9 2d	jsr $2db9			jsr 	IFSTFGetNext 				; get next
.2d3f	b0 0b		bcs $2d4c			bcs 	_IFSTFFail 					; bad character.
.2d41	f0 11		beq $2d54			beq 	_IFSTFExit 					; end of data
.2d43					_IFSTFHaveChar:
.2d43	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2d45	f0 08		beq $2d4f			beq 	_IFSTFDecimal
.2d47	20 dd 2d	jsr $2ddd			jsr 	IFSTFAddR0 					; add number in
.2d4a	80 f0		bra $2d3c			bra 	_IFSTFLoop 					; keep going until . or end.
.2d4c					_IFSTFFail:
.2d4c	38		sec				sec
.2d4d	80 0d		bra $2d5c			bra 	_IFSTFReturn
.2d4f					_IFSTFDecimal:
.2d4f	20 64 2d	jsr $2d64			jsr 	IFSTFDecimal 				; call the decimal places code.
.2d52	b0 08		bcs $2d5c			bcs 	_IFSTFReturn 				; error
.2d54					_IFSTFExit:
.2d54	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.2d56	0d d5 06	ora $06d5			ora 	IFSignFlag
.2d59	85 11		sta $11				sta 	IFR0+IExp
.2d5b	18		clc				clc
.2d5c					_IFSTFReturn:
.2d5c	60		rts				rts
.2d5d					IFloatAddDecimalToR0:
.2d5d	8d d4 06	sta $06d4			sta 	IFCount 					; save it out.
.2d60	86 0c		stx $0c				stx 	iTemp0
.2d62	84 0d		sty $0d				sty 	iTemp0+1
.2d64					IFSTFDecimal:
.2d64	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.2d66	20 08 2e	jsr $2e08			jsr 	IFloatPushRx
.2d69	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2d6b	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero
.2d6e	9c d6 06	stz $06d6			stz 	IFDecimalPlaces
.2d71					_IFSTDLoop:
.2d71	20 b9 2d	jsr $2db9			jsr 	IFSTFGetNext 				; get next
.2d74	b0 41		bcs $2db7			bcs 	_IFSTFFail2 				; bad character.
.2d76	f0 11		beq $2d89			beq 	_IFSTFComplete 				; end of data, work out the result.
.2d78	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2d7a	f0 39		beq $2db5			beq 	_IFSTFExit2
.2d7c	20 dd 2d	jsr $2ddd			jsr 	IFSTFAddR0 					; add number in
.2d7f	ee d6 06	inc $06d6			inc 	IFDecimalPlaces 			; count decimals
.2d82	ad d6 06	lda $06d6			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2d85	c9 03		cmp #$03			cmp 	#3
.2d87	90 e8		bcc $2d71			bcc 	_IFSTDLoop
.2d89					_IFSTFComplete:
.2d89	ad d6 06	lda $06d6			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2d8c	f0 27		beq $2db5			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2d8e	3a		dec a				dec 	a 							; table indexed from 1.
.2d8f	0a		asl a				asl 	a
.2d90	0a		asl a				asl 	a
.2d91	aa		tax				tax
.2d92	bd f4 2d	lda $2df4,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2d95	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2d97	bd f5 2d	lda $2df5,x			lda 	TableTen+1,x
.2d9a	85 13		sta $13				sta  	IFR1+IM1
.2d9c	bd f6 2d	lda $2df6,x			lda 	TableTen+2,x
.2d9f	85 14		sta $14				sta  	IFR1+IM2
.2da1	bd f7 2d	lda $2df7,x			lda 	TableTen+3,x
.2da4	85 15		sta $15				sta  	IFR1+IExp
.2da6	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.2da8	20 59 29	jsr $2959			jsr 	IFloatMultiply
.2dab	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.2dad	20 29 2e	jsr $2e29			jsr 	IFloatPullRx
.2db0	a2 12		ldx #$12			ldx 	#IFR1
.2db2	20 af 28	jsr $28af			jsr 	IFloatAdd
.2db5					_IFSTFExit2:
.2db5	18		clc				clc
.2db6	60		rts				rts
.2db7					_IFSTFFail2:
.2db7	38		sec				sec
.2db8	60		rts				rts
.2db9					IFSTFGetNext:
.2db9	ad d4 06	lda $06d4			lda 	IFCount  					; if count is zero, return with Z set.
.2dbc	f0 19		beq $2dd7			beq 	_IFSTFReturnOk
.2dbe	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.2dc0	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.2dc2	d0 02		bne $2dc6			bne 	_IFSTFGNNoCarry
.2dc4	e6 0d		inc $0d				inc 	iTemp0+1
.2dc6					_IFSTFGNNoCarry:
.2dc6	ce d4 06	dec $06d4			dec 	IFCount 					; dec count.
.2dc9	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2dcb	f0 08		beq $2dd5			beq 	_IFSTFGOkay
.2dcd	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2dcf	90 08		bcc $2dd9			bcc 	_IFSTFGFail
.2dd1	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2dd3	b0 04		bcs $2dd9			bcs 	_IFSTFGFail
.2dd5					_IFSTFGOkay:
.2dd5	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2dd7					_IFSTFReturnOk:
.2dd7	18		clc				clc
.2dd8	60		rts				rts
.2dd9					_IFSTFGFail:
.2dd9	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ddb	38		sec				sec
.2ddc	60		rts				rts
.2ddd					IFSTFAddR0:
.2ddd	29 0f		and #$0f			and 	#15 						; to int value
.2ddf	48		pha				pha 								; save it.
.2de0	a9 0a		lda #$0a			lda 	#10
.2de2	a2 12		ldx #$12			ldx 	#IFR1
.2de4	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.2de7	20 59 29	jsr $2959			jsr 	IFloatMultiply
.2dea	68		pla				pla
.2deb	a2 12		ldx #$12			ldx 	#IFR1
.2ded	20 bb 2e	jsr $2ebb			jsr 	IFloatSetByte
.2df0	20 af 28	jsr $28af			jsr 	IFloatAdd
.2df3	60		rts				rts
.06d4					IFCount:
>06d4							.fill 	1
.06d5					IFSignFlag:
>06d5							.fill 	1
.06d6					IFDecimalPlaces:
>06d6							.fill 	1
.2df4					TableTen:
>2df4	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2df8	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2dfc	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2e00	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2e04	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2e08					IFloatPushRx:
.2e08	5a		phy				phy
.2e09	ac d7 06	ldy $06d7			ldy 	IFStackIndex
.2e0c	b5 00		lda $00,x			lda 	IM0,x
.2e0e	99 d8 06	sta $06d8,y			sta 	IFStack,y
.2e11	b5 01		lda $01,x			lda 	IM1,x
.2e13	99 d9 06	sta $06d9,y			sta 	IFStack+1,y
.2e16	b5 02		lda $02,x			lda 	IM2,x
.2e18	99 da 06	sta $06da,y			sta 	IFStack+2,y
.2e1b	b5 03		lda $03,x			lda 	IExp,x
.2e1d	99 db 06	sta $06db,y			sta 	IFStack+3,y
.2e20	c8		iny				iny
.2e21	c8		iny				iny
.2e22	c8		iny				iny
.2e23	c8		iny				iny
.2e24	8c d7 06	sty $06d7			sty 	IFStackIndex
.2e27	7a		ply				ply
.2e28	60		rts				rts
.2e29					IFloatPullRx:
.2e29	5a		phy				phy
.2e2a	ac d7 06	ldy $06d7			ldy 	IFStackIndex
.2e2d	88		dey				dey
.2e2e	88		dey				dey
.2e2f	88		dey				dey
.2e30	88		dey				dey
.2e31	b9 d8 06	lda $06d8,y			lda 	IFStack,y
.2e34	95 00		sta $00,x			sta 	IM0,x
.2e36	b9 d9 06	lda $06d9,y			lda 	IFStack+1,y
.2e39	95 01		sta $01,x			sta 	IM1,x
.2e3b	b9 da 06	lda $06da,y			lda 	IFStack+2,y
.2e3e	95 02		sta $02,x			sta 	IM2,x
.2e40	b9 db 06	lda $06db,y			lda 	IFStack+3,y
.2e43	95 03		sta $03,x			sta 	IExp,x
.2e45	8c d7 06	sty $06d7			sty 	IFStackIndex
.2e48	7a		ply				ply
.2e49	60		rts				rts
.06d7					IFStackIndex:
>06d7							.fill 	1
.06d8					IFStack:
>06d8							.fill 	16*4
.2e4a					IFloatCopyFromRegister:
.2e4a	b5 00		lda $00,x			lda 	0,x
.2e4c	85 0e		sta $0e				sta 	IFR0
.2e4e	b5 01		lda $01,x			lda 	1,x
.2e50	85 0f		sta $0f				sta 	IFR0+1
.2e52	b5 02		lda $02,x			lda 	2,x
.2e54	85 10		sta $10				sta 	IFR0+2
.2e56	b5 03		lda $03,x			lda 	3,x
.2e58	85 11		sta $11				sta 	IFR0+3
.2e5a	60		rts				rts
.2e5b					IFloatCopyToRegister:
.2e5b	a5 0e		lda $0e				lda 	IFR0
.2e5d	95 00		sta $00,x			sta 	0,x
.2e5f	a5 0f		lda $0f				lda 	IFR0+1
.2e61	95 01		sta $01,x			sta 	1,x
.2e63	a5 10		lda $10				lda 	IFR0+2
.2e65	95 02		sta $02,x			sta 	2,x
.2e67	a5 11		lda $11				lda 	IFR0+3
.2e69	95 03		sta $03,x			sta 	3,x
.2e6b	60		rts				rts
.2e6c					IFloatLoadInline:
.2e6c	68		pla				pla 								; pop address off to iTemp0
.2e6d	85 0c		sta $0c				sta 	iTemp0
.2e6f	68		pla				pla
.2e70	85 0d		sta $0d				sta 	iTemp0+1
.2e72	a0 01		ldy #$01			ldy 	#1
.2e74	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.2e76	95 00		sta $00,x			sta 	0,x
.2e78	c8		iny				iny
.2e79	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.2e7b	95 01		sta $01,x			sta 	1,x
.2e7d	c8		iny				iny
.2e7e	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.2e80	95 02		sta $02,x			sta 	2,x
.2e82	c8		iny				iny
.2e83	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.2e85	95 03		sta $03,x			sta 	3,x
.2e87	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2e88	a5 0c		lda $0c				lda 	iTemp0
.2e8a	69 05		adc #$05			adc 	#5
.2e8c	85 0c		sta $0c				sta 	iTemp0
.2e8e	90 02		bcc $2e92			bcc 	_IFLINoCarry
.2e90	e6 0d		inc $0d				inc 	iTemp0+1
.2e92					_IFLINoCarry:
.2e92	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.2e95					IFloatMultiply8BitRx:
.2e95	5a		phy		        phy
.2e96	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2e98	a4 0e		ldy $0e		        ldy     IFR0+IM0
.2e9a	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2e9b	85 0e		sta $0e		        sta     IFR0+IM0
.2e9d	84 0f		sty $0f		        sty     IFR0+IM1
.2e9f	a9 00		lda #$00	        lda     #0
.2ea1	a0 08		ldy #$08	        ldy     #8
.2ea3					_IFMLoop:
.2ea3	90 03		bcc $2ea8	        bcc     _IFMNoAdd
.2ea5	18		clc		        clc
.2ea6	65 0f		adc $0f		        adc     IFR0+IM1
.2ea8					_IFMNoAdd:
.2ea8	6a		ror a		        ror     a
.2ea9	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2eab	88		dey		        dey
.2eac	d0 f5		bne $2ea3	        bne     _IFMLoop
.2eae	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.2eb0	7a		ply		        ply
.2eb1	60		rts		        rts
.2eb2					IFloatCheckZero:
.2eb2	b5 00		lda $00,x			lda 	IM0,x
.2eb4	15 01		ora $01,x			ora 	IM1,x
.2eb6	15 02		ora $02,x			ora 	IM2,x
.2eb8	60		rts				rts
.2eb9					IFloatSetZero:
.2eb9	a9 00		lda #$00			lda 	#0
.2ebb					IFloatSetByte:
.2ebb	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2ebd	74 01		stz $01,x			stz 	IM1,x
.2ebf	74 02		stz $02,x			stz 	IM2,x
.2ec1	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2ec3	60		rts				rts
.2ec4					IFloatNegate:
.2ec4	b5 03		lda $03,x			lda 	IExp,x
.2ec6	49 40		eor #$40			eor 	#IFSign
.2ec8	95 03		sta $03,x			sta 	IExp,x
.2eca	18		clc				clc
.2ecb	60		rts				rts
.2ecc					IFloatMantissaNegate:
.2ecc	38		sec				sec
.2ecd	a9 00		lda #$00			lda 	#0
.2ecf	f5 00		sbc $00,x			sbc 	IM0,x
.2ed1	95 00		sta $00,x			sta 	IM0,x
.2ed3	a9 00		lda #$00			lda 	#0
.2ed5	f5 01		sbc $01,x			sbc 	IM1,x
.2ed7	95 01		sta $01,x			sta 	IM1,x
.2ed9	a9 00		lda #$00			lda 	#0
.2edb	f5 02		sbc $02,x			sbc 	IM2,x
.2edd	95 02		sta $02,x			sta 	IM2,x
.2edf	60		rts				rts
.2ee0					IFloatShiftLeft:
.2ee0	18		clc				clc
.2ee1					IFloatRotateLeft:
.2ee1	36 00		rol $00,x			rol 	IM0,x
.2ee3	36 01		rol $01,x			rol 	IM1,x
.2ee5	36 02		rol $02,x			rol 	IM2,x
.2ee7	60		rts				rts
.2ee8					IFloatShiftRight:
.2ee8	18		clc				clc
.2ee9					IFloatRotateRight:
.2ee9	76 02		ror $02,x			ror 	IM2,x
.2eeb	76 01		ror $01,x			ror 	IM1,x
.2eed	76 00		ror $00,x			ror 	IM0,x
.2eef	60		rts				rts
.2ef0					IFloatNormalise:
.2ef0	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; is it zero
.2ef3	f0 18		beq $2f0d			beq 	_IFNExitZero 				; if so exit
.2ef5					_IFNLoop:
.2ef5	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2ef7	29 c0		and #$c0			and 	#$C0
.2ef9	c9 40		cmp #$40			cmp 	#$40
.2efb	f0 13		beq $2f10			beq 	_IFNExitOkay 				; if so , then we are done.
.2efd	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2eff	29 3f		and #$3f			and 	#$3F
.2f01	c9 20		cmp #$20			cmp 	#$20
.2f03	f0 0b		beq $2f10			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2f05	20 26 2f	jsr $2f26			jsr 	IFloatDecExponent
.2f08	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2f0b	80 e8		bra $2ef5			bra 	_IFNLoop
.2f0d					_IFNExitZero:
.2f0d	20 b9 2e	jsr $2eb9			jsr 	IFloatSetZero 				; set the result to zero
.2f10					_IFNExitOkay:
.2f10	18		clc				clc  								; return with CC.
.2f11	60		rts				rts
.2f12					IFloatIncExponent:
.2f12	b5 03		lda $03,x			lda 	IExp,x
.2f14	48		pha				pha
.2f15	29 c0		and #$c0			and 	#$C0
.2f17	8d 18 07	sta $0718			sta 	IFXTemp
.2f1a	68		pla				pla
.2f1b	1a		inc a				inc 	a
.2f1c	29 3f		and #$3f			and 	#$3F
.2f1e	48		pha				pha
.2f1f	0d 18 07	ora $0718			ora 	IFXTemp
.2f22	95 03		sta $03,x			sta 	IExp,x
.2f24	68		pla				pla
.2f25	60		rts				rts
.2f26					IFloatDecExponent:
.2f26	b5 03		lda $03,x			lda 	IExp,x
.2f28	48		pha				pha
.2f29	29 c0		and #$c0			and 	#$C0
.2f2b	8d 18 07	sta $0718			sta 	IFXTemp
.2f2e	68		pla				pla
.2f2f	3a		dec a				dec 	a
.2f30	29 3f		and #$3f			and 	#$3F
.2f32	48		pha				pha
.2f33	0d 18 07	ora $0718			ora 	IFXTemp
.2f36	95 03		sta $03,x			sta 	IExp,x
.2f38	68		pla				pla
.2f39	60		rts				rts
.0718					IFXTemp:
>0718							.fill 	1
.2f3a					IFloatBufferReset:
.2f3a	9c 19 07	stz $0719			stz 	IFBufferCount
.2f3d	9c 1a 07	stz $071a			stz 	IFBuffer
.2f40	60		rts				rts
.2f41					IFloatGetBufferAddress:
.2f41	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2f43	a2 1a		ldx #$1a			ldx 	#(IFBuffer & $FF)
.2f45	ad 19 07	lda $0719			lda 	IFBufferCount
.2f48	60		rts				rts
.2f49					IFloatBufferWrite:
.2f49	da		phx				phx
.2f4a	ae 19 07	ldx $0719			ldx 	IFBufferCount
.2f4d	9d 1a 07	sta $071a,x			sta 	IFBuffer,x
.2f50	9e 1b 07	stz $071b,x			stz 	IFBuffer+1,x
.2f53	ee 19 07	inc $0719			inc 	IFBufferCount
.2f56	fa		plx				plx
.2f57	60		rts				rts
.2f58					IFloatStripTrailingZeros:
.2f58	ae 19 07	ldx $0719			ldx 	IFBufferCount
.2f5b	bd 19 07	lda $0719,x			lda 	IFBuffer-1,x
.2f5e	c9 30		cmp #$30			cmp		#"0"
.2f60	d0 0f		bne $2f71			bne 	_IFSTExit
.2f62	bd 18 07	lda $0718,x			lda 	IFBuffer-2,x
.2f65	c9 2e		cmp #$2e			cmp 	#"."
.2f67	f0 08		beq $2f71			beq 	_IFSTExit
.2f69	ce 19 07	dec $0719			dec 	IFBufferCount
.2f6c	9e 19 07	stz $0719,x			stz 	IFBuffer-1,x
.2f6f	80 e7		bra $2f58			bra 	IFloatStripTrailingZeros
.2f71					_IFSTExit:
.2f71	60		rts				rts
.0719					IFBufferCount:
>0719							.fill 	1
.071a					IFBuffer:
>071a							.fill 	25
.2f72					IFloatCheck:
.2f72	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.2f74	09 40		ora #$40			ora 	#IFSign
.2f76	85 11		sta $11				sta 	IFR0+IExp
.2f78	20 af 28	jsr $28af			jsr 	IFloatAdd 					; add allowed to error.
.2f7b	a2 0e		ldx #$0e			ldx 	#IFR0
.2f7d	20 b2 2e	jsr $2eb2			jsr 	IFloatCheckZero 			; error if < 0
.2f80	f0 06		beq $2f88			beq 	_IFAOkay
.2f82	a5 11		lda $11				lda 	IFR0+IExp
.2f84	29 40		and #$40			and 	#IFSign
.2f86	d0 01		bne $2f89			bne 	_IFAFail
.2f88					_IFAOkay:
.2f88	60		rts				rts
.2f89					_IFAFail:
.2f89	38		sec				sec
.2f8a	68		pla				pla 								; get address - 2
.2f8b	e9 02		sbc #$02			sbc 	#2
.2f8d	aa		tax				tax
.2f8e	68		pla				pla
.2f8f	e9 00		sbc #$00			sbc 	#0
.2f91	a8		tay				tay
.2f92	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2f94					_IFAStop:
>2f94	db						.byte 	$DB 						; display an error AA ADR ADR
.2f95	80 fd		bra $2f94			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
