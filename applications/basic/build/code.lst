
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Sat Jun  3 14:50:11 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=$6000					startMemory = $6000
=$a000					endMemory = $A000
=2					stackPages = 2

;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboardWithCursor = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1)
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadDevice             = $fff4 ; Read device X to A
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#startMemory >> 8
.1002	a0 a0		ldy #$a0			ldy 	#endMemory >> 8
.1004	20 ba 1c	jsr $1cba			jsr 	PGMSetBaseAddress
.1007	20 ab 25	jsr $25ab			jsr 	IFInitialise
.100a	4c a1 12	jmp $12a1			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c c3 21	jmp $21c3		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 cd 1c	jsr $1ccd			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 4a 25	jsr $254a			jsr 	VARClearHashTables
.1028	ad 47 03	lda $0347			lda 	PGMEndMemoryHigh
.102b	20 2e 23	jsr $232e			jsr 	StackReset
.102e	20 8d 23	jsr $238d			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 15		beq $1057			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 05		bne $104f			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.104f					_AllocateSkipCarry:
.104f	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1051	d0 01		bne $1054			bne 	_AllocateSkipBorrow
.1053	ca		dex				dex
.1054					_AllocateSkipBorrow:
.1054	88		dey				dey
.1055	80 e3		bra $103a			bra 	_AllocateLoop
.1057					_AllocateExit:
.1057	fa		plx				plx 								; restore address
.1058	68		pla				pla
.1059	7a		ply				ply 								; restore Y
.105a	60		rts				rts
.105b					ClearCheckMemory:
.105b	a5 25		lda $25				lda 	freeMemory+1
.105d	1a		inc a				inc 	a
.105e	1a		inc a				inc 	a
.105f	cd 4f 04	cmp $044f			cmp 	stringMemory+1
.1062	b0 01		bcs $1065			bcs  	_CCMError
.1064	60		rts				rts
.1065					_CCMError:
.1065	4c 55 22	jmp $2255		jmp	ErrorV_memory
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1068					CommandDIM:
.1068	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.106a	29 c0		and #$c0			and 	#$C0
.106c	c9 40		cmp #$40			cmp 	#$40
.106e	d0 39		bne $10a9			bne 	_CDSyntax
.1070	20 01 25	jsr $2501			jsr 	VARGetInfo 					; get information
.1073	ad 55 04	lda $0455			lda 	VARType 					; check array.
.1076	29 02		and #$02			and 	#2
.1078	f0 2f		beq $10a9			beq 	_CDSyntax
.107a	20 b3 24	jsr $24b3			jsr 	VARFind 					; does it already exist
.107d	b0 2d		bcs $10ac			bcs 	_CDExists
.107f	20 5f 24	jsr $245f			jsr 	VARCreate 					; create it - returns data ptr in XA
.1082	da		phx				phx 								; save target address
.1083	48		pha				pha
.1084	ad 55 04	lda $0455			lda 	VARType 					; type ID.
.1087	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1089	20 af 10	jsr $10af			jsr 	CreateArray 				; create array to XA
.108c	84 20		sty $20				sty 	zTemp1 						; save Y
.108e	7a		ply				ply 								; restore target to zTemp0
.108f	84 1e		sty $1e				sty 	zTemp0
.1091	7a		ply				ply
.1092	84 1f		sty $1f				sty 	zTemp0+1
.1094	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1096	a0 01		ldy #$01			ldy 	#1
.1098	8a		txa				txa
.1099	91 1e		sta ($1e),y			sta 	(zTemp0),y
.109b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.109d	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 				; check )
.10a0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a2	c8		iny				iny
.10a3	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a5	f0 c1		beq $1068			beq 	CommandDIM
.10a7	88		dey				dey
.10a8	60		rts				rts
.10a9					_CDSyntax:
.10a9	4c 72 21	jmp $2172		jmp	ErrorV_syntax
.10ac					_CDExists:
.10ac	4c 2f 22	jmp $222f		jmp	ErrorV_redefine
.10af					CreateArray:
.10af	8d 3a 03	sta $033a			sta 	CAType						; save type
.10b2	20 c6 14	jsr $14c6			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10b7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b9	f0 04		beq $10bf			beq 	_CATwoDimensions
.10bb	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10be	60		rts				rts
.10bf					_CATwoDimensions:
.10bf	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c1	8d 3c 03	sta $033c			sta 	CADim1+1
.10c4	a5 0c		lda $0c				lda 	IFR0+IM0
.10c6	8d 3b 03	sta $033b			sta 	CADim1+0
.10c9	20 c7 22	jsr $22c7			jsr 	ERRCheckComma 				; check comma
.10cc	20 c6 14	jsr $14c6			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10cf	5a		phy				phy 								; save Y position
.10d0	18		clc				clc 								; allocate the outer array of pointers.
.10d1	ae 3c 03	ldx $033c			ldx 	CADim1+1
.10d4	ad 3b 03	lda $033b			lda 	CADim1
.10d7	20 4a 11	jsr $114a			jsr 	CSAAllocate 				; allocate the outer array
.10da	da		phx				phx									; save this address on the stack
.10db	48		pha				pha
.10dc	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10de	85 22		sta $22				sta 	zTemp2
.10e0					_CACreateSubLoop:
.10e0	38		sec				sec
.10e1	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create data array of required size.
.10e4	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e6	91 22		sta ($22),y			sta 	(zTemp2),y
.10e8	8a		txa				txa
.10e9	c8		iny				iny
.10ea	91 22		sta ($22),y			sta 	(zTemp2),y
.10ec	18		clc				clc  								; next slot.
.10ed	a5 22		lda $22				lda 	zTemp2
.10ef	69 02		adc #$02			adc 	#2
.10f1	85 22		sta $22				sta 	zTemp2
.10f3	90 02		bcc $10f7			bcc 	_CACNoCarry
.10f5	e6 23		inc $23				inc 	zTemp2+1
.10f7					_CACNoCarry:
.10f7	ad 3b 03	lda $033b			lda 	CADim1 						; use DIM1 as a counter
.10fa	d0 03		bne $10ff			bne 	_CACNoBorrow
.10fc	ce 3c 03	dec $033c			dec 	CADim1+1
.10ff					_CACNoBorrow:
.10ff	ce 3b 03	dec $033b			dec 	CADim1
.1102	ad 3c 03	lda $033c			lda 	CADim1+1 					; but do one more.
.1105	10 d9		bpl $10e0			bpl 	_CACreateSubLoop
.1107	68		pla				pla
.1108	fa		plx				plx
.1109	7a		ply				ply
.110a	60		rts				rts
.110b					CreateSingleArray:
.110b	5a		phy				phy
.110c	38		sec				sec 								; allocate memory block all zeros.
.110d	a5 0c		lda $0c				lda 	IFR0+IM0
.110f	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1111	20 4a 11	jsr $114a			jsr 	CSAAllocate
.1114	ac 3a 03	ldy $033a			ldy 	CAType 						; if numbers, we don't need to initialise.
.1117	f0 2f		beq $1148			beq 	_CSANoInit
.1119	da		phx				phx 								; save address of new array
.111a	48		pha				pha
.111b	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.111d	86 1f		stx $1f				stx 	zTemp0+1
.111f	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1121	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1123	a8		tay				tay
.1124	b2 1e		lda ($1e)			lda 	(zTemp0)
.1126	aa		tax				tax
.1127					_CSAEraseString:
.1127	5a		phy				phy
.1128	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112a	a9 80		lda #$80			lda 	#$80
.112c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.112e	7a		ply				ply
.112f	18		clc				clc 								; add 4 to next slot.
.1130	a5 1e		lda $1e				lda 	zTemp0
.1132	69 04		adc #$04			adc 	#4
.1134	85 1e		sta $1e				sta 	zTemp0
.1136	90 02		bcc $113a			bcc 	_CSAENoCarry
.1138	e6 1f		inc $1f				inc 	zTemp0+1
.113a					_CSAENoCarry:
.113a	e0 00		cpx #$00			cpx 	#0
.113c	d0 01		bne $113f			bne 	_CSANoBorrow
.113e	88		dey				dey
.113f					_CSANoBorrow:
.113f	ca		dex				dex
.1140	d0 e5		bne $1127			bne 	_CSAEraseString
.1142	c0 00		cpy #$00			cpy 	#0
.1144	d0 e1		bne $1127			bne 	_CSAEraseString
.1146	68		pla				pla
.1147	fa		plx				plx
.1148					_CSANoInit:
.1148	7a		ply				ply
.1149	60		rts				rts
.114a					CSAAllocate:
.114a	08		php				php 								; save type flag.
.114b	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114c	d0 01		bne $114f			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.114e	e8		inx				inx
.114f					_CSAANoCarry:
.114f	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1151	b0 2e		bcs $1181			bcs 	_CSARange
.1153	28		plp				plp 								; restore type flag
.1154	08		php				php 								; save it back again.
.1155	da		phx				phx 								; save size.
.1156	48		pha				pha
.1157	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.1159	90 03		bcc $115e			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115b	0a		asl a				asl 	a
.115c	26 1f		rol $1f				rol 	zTemp0+1
.115e					_CSAATimes2:
.115e	0a		asl a				asl 	a
.115f	26 1f		rol $1f				rol 	zTemp0+1
.1161	18		clc				clc
.1162	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1164	90 02		bcc $1168			bcc 	_CSAANoCarry2
.1166	e6 1f		inc $1f				inc 	zTemp0+1
.1168					_CSAANoCarry2:
.1168	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.116a	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.116d	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.116f	85 1e		sta $1e				sta 	zTemp0
.1171	68		pla				pla  								; write element count to first 2 bytes
.1172	92 1e		sta ($1e)			sta 	(zTemp0)
.1174	68		pla				pla 								; msb of element count
.1175	28		plp				plp 								; CC if pointer array
.1176	b0 02		bcs $117a			bcs 	_CSAAIsData
.1178	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117a					_CSAAIsData:
.117a	a0 01		ldy #$01			ldy 	#1
.117c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.117e	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1180	60		rts				rts
.1181					_CSARange:
.1181	4c 82 21	jmp $2182		jmp	ErrorV_range
.033a					CAType:
>033a							.fill 	1
.033b					CADim1:
>033b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1184					Command_Doke:
.1184	38		sec				sec
.1185	80 01		bra $1188			bra 	DPCommon
.1187					Command_Poke:
.1187	18		clc				clc
.1188					DPCommon:
.1188	08		php				php 								; CS if DOKE
.1189	20 c6 14	jsr $14c6			jsr 	EXPEvalInteger16 			; address
.118c	a5 0c		lda $0c				lda 	IFR0+IM0 					; push on stack
.118e	48		pha				pha
.118f	a5 0d		lda $0d				lda 	IFR0+IM1
.1191	48		pha				pha
.1192	20 c7 22	jsr $22c7			jsr 	ERRCheckComma 				; [dp]oke address,data
.1195	20 c6 14	jsr $14c6			jsr 	EXPEvalInteger16
.1198	68		pla				pla 								; get address back
.1199	85 1f		sta $1f				sta 	zTemp0+1
.119b	68		pla				pla
.119c	85 1e		sta $1e				sta 	zTemp0
.119e	a5 0c		lda $0c				lda 	IFR0+IM0
.11a0	92 1e		sta ($1e)			sta 	(zTemp0)
.11a2	28		plp				plp
.11a3	90 08		bcc $11ad			bcc 	_DPExit
.11a5	5a		phy				phy
.11a6	a5 0d		lda $0d				lda 	IFR0+IM1
.11a8	a0 01		ldy #$01			ldy 	#1
.11aa	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11ac	7a		ply				ply
.11ad					_DPExit:
.11ad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11ae					Command_Print:
.11ae					Command_IP_Main:
.11ae	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11af					_CPLoop:
.11af	08		php				php 								; save last action flag
.11b0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.11b2	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11b4	f0 3e		beq $11f4			beq 	_CPExit 					; without consuming
.11b6	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11b8	f0 3a		beq $11f4			beq 	_CPExit
.11ba	68		pla				pla 								; throw last action flag
.11bb	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.11bd	c8		iny				iny
.11be	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11c0	f0 2f		beq $11f1			beq 	_CPContinueWithSameLine
.11c2	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11c4	f0 26		beq $11ec			beq 	_CPTab
.11c6	88		dey				dey 								; undo the get.
.11c7	20 74 14	jsr $1474			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11ca	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.11cc	10 14		bpl $11e2			bpl 	_CPNumber
.11ce	5a		phy				phy
.11cf	18		clc				clc 								; string address to YX
.11d0	a5 0c		lda $0c				lda 	IFR0+IM0
.11d2	aa		tax				tax
.11d3	a5 0d		lda $0d				lda 	IFR0+IM1
.11d5	a8		tay				tay
.11d6	e8		inx				inx 								; point to 1st character
.11d7	d0 01		bne $11da			bne 	_CPNoCarry
.11d9	c8		iny				iny
.11da					_CPNoCarry:
.11da	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11dc	20 fd 11	jsr $11fd			jsr 	CPPrintAYX 					; print AYX
.11df	7a		ply				ply
.11e0	80 cc		bra $11ae			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11e2					_CPNumber:
.11e2	5a		phy				phy
.11e3	20 bd 29	jsr $29bd			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11e6	20 fd 11	jsr $11fd			jsr 	CPPrintAYX 					; print AYX
.11e9	7a		ply				ply
.11ea	80 c2		bra $11ae			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11ec					_CPTab:
.11ec	a9 09		lda #$09			lda 	#9 							; print TAB
.11ee	20 10 12	jsr $1210			jsr 	CPPrintA
.11f1					_CPContinueWithSameLine:
.11f1	38		sec				sec 								; loop round with carry set, which
.11f2	80 bb		bra $11af			bra 	_CPLoop 					; will inhibit final CR
.11f4					_CPExit:
.11f4	28		plp				plp 								; get last action flag
.11f5	b0 05		bcs $11fc			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11f7	a9 0d		lda #$0d			lda 	#13 						; print new line
.11f9	20 10 12	jsr $1210			jsr 	CPPrintA
.11fc					_CPExit2:
.11fc	60		rts				rts
.11fd					CPPrintAYX:
.11fd	86 1e		stx $1e				stx 	zTemp0
.11ff	84 1f		sty $1f				sty 	zTemp0+1
.1201	aa		tax				tax
.1202	f0 0b		beq $120f			beq 	_CPPrintExit
.1204	a0 00		ldy #$00			ldy 	#0
.1206					_CPPrintAYXLoop:
.1206	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1208	20 10 12	jsr $1210			jsr 	CPPrintA
.120b	c8		iny				iny
.120c	ca		dex				dex
.120d	d0 f7		bne $1206			bne 	_CPPrintAYXLoop
.120f					_CPPrintExit:
.120f	60		rts				rts
.1210					CPPrintA:
.1210	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1213					CommandLET:
.1213	20 3c 15	jsr $153c			jsr 	EXPTermR0 					; get term
.1216	90 6d		bcc $1285			bcc 	_CLError 					; must be a reference term.
.1218	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.121a	48		pha				pha
.121b	a5 0d		lda $0d				lda 	IFR0+IM1
.121d	48		pha				pha
.121e	a5 0f		lda $0f				lda 	IFR0+IExp
.1220	48		pha				pha
.1221	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1223	20 cf 22	jsr $22cf			jsr 	ERRCheckA
.1226	20 74 14	jsr $1474			jsr 	EXPEvaluateExpression 		; right hand side.
.1229	68		pla				pla 								; type of l-expr
.122a	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.122c	30 5a		bmi $1288			bmi 	_CLType
.122e	fa		plx				plx 	 							; pop target address to zTemp0
.122f	86 1f		stx $1f				stx 	zTemp0+1
.1231	fa		plx				plx
.1232	86 1e		stx $1e				stx 	zTemp0
.1234	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.1236	30 15		bmi $124d			bmi 	_CLStringAssign
.1238	5a		phy				phy
.1239	a0 03		ldy #$03			ldy 	#3
.123b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.123d	88		dey				dey
.123e	a5 0e		lda $0e				lda 	IFR0+IM2
.1240	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1242	88		dey				dey
.1243	a5 0d		lda $0d				lda 	IFR0+IM1
.1245	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1247	a5 0c		lda $0c				lda 	IFR0+IM0
.1249	92 1e		sta ($1e)			sta 	(zTemp0)
.124b	7a		ply				ply
.124c	60		rts				rts
.124d					_CLStringAssign:
.124d	5a		phy				phy
.124e	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1250	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1252	12 1e		ora ($1e)			ora 	(zTemp0)
.1254	f0 23		beq $1279			beq 	_CLConcreteString
.1256	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1258	85 20		sta $20				sta 	zTemp1
.125a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.125c	85 21		sta $21				sta 	zTemp1+1
.125e	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1260	38		sec				sec 								; we want 3 for slot size, status, string size.
.1261	e9 03		sbc #$03			sbc 	#3
.1263	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.1265	90 12		bcc $1279			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1267	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1269	1a		inc a				inc 	a
.126a	aa		tax				tax
.126b	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.126d					_CLReplaceString:
.126d	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.126f	c8		iny				iny
.1270	c8		iny				iny
.1271	91 20		sta ($20),y			sta 	(zTemp1),y
.1273	88		dey				dey
.1274	ca		dex				dex
.1275	d0 f6		bne $126d			bne 	_CLReplaceString
.1277	80 0a		bra $1283			bra 	_CLExit
.1279					_CLConcreteString:
.1279	20 42 23	jsr $2342			jsr 	StringConcrete  			; concreted string in XA.
.127c	a0 01		ldy #$01			ldy 	#1 							; store the address
.127e	92 1e		sta ($1e)			sta 	(zTemp0)
.1280	8a		txa				txa
.1281	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1283					_CLExit:
.1283	7a		ply				ply
.1284	60		rts				rts
.1285					_CLError:
.1285	4c 95 22	jmp $2295		jmp	ErrorV_variable
.1288					_CLType:
.1288	4c 9f 21	jmp $219f		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.128b					Command_NEW:
.128b	20 c1 1c	jsr $1cc1			jsr 	PGMNewProgram
.128e	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1291	4c ee 12	jmp $12ee			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1294					Command_REM:
.1294					Command_REM2:
.1294	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1296	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1298	d0 06		bne $12a0			bne 	_CRExit
.129a	c8		iny				iny 								; skip over it, it's a comment.
.129b	98		tya				tya
.129c	38		sec				sec
.129d	71 1c		adc ($1c),y			adc 	(codePtr),y
.129f	a8		tay				tay
.12a0					_CRExit:
.12a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.12a1					Command_RUN:
.12a1	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.12a4	ad 46 03	lda $0346			lda 	PGMBaseHigh 				; back to the program start
.12a7	85 1d		sta $1d				sta 	codePtr+1
.12a9	64 1c		stz $1c				stz 	codePtr
.12ab	80 0b		bra $12b8			bra 	RUNNewLine
.12ad					RUNEndOfLine:
.12ad	18		clc				clc 								; advance to next line.
.12ae	b2 1c		lda ($1c)			lda 	(codePtr)
.12b0	65 1c		adc $1c				adc 	codePtr
.12b2	85 1c		sta $1c				sta 	codePtr
.12b4	90 02		bcc $12b8			bcc 	_RELNoCarry
.12b6	e6 1d		inc $1d				inc 	codePtr+1
.12b8					_RELNoCarry:
.12b8					RUNNewLine:
.12b8	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.12ba	9a		txs				txs
.12bb	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.12bd	f0 2f		beq $12ee			beq 	Command_END
.12bf	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.12c1					RUNNewCommand:
.12c1	9c 4d 04	stz $044d			stz 	stringInitialised 			; reset string system.
.12c4	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.12c6	10 1a		bpl $12e2			bpl		_RUNNotToken 				; probably an identifier
.12c8	c8		iny				iny 								; consume token
.12c9	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.12cb	f0 f4		beq $12c1			beq 	RUNNewCommand
.12cd	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.12cf	b0 0e		bcs $12df			bcs 	_RUNSyntax
.12d1	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.12d3	90 0a		bcc $12df			bcc 	_RUNSyntax
.12d5	0a		asl a				asl 	a 							; double into X.
.12d6	aa		tax				tax
.12d7	20 dc 12	jsr $12dc			jsr 	_RUNDispatchMain			; call the main dispatcher
.12da	80 e5		bra $12c1			bra 	RUNNewCommand
.12dc					_RUNDispatchMain:
.12dc	7c d7 19	jmp ($19d7,x)			jmp 	(VectorTable,x)
.12df					_RUNSyntax:
.12df	4c 72 21	jmp $2172		jmp	ErrorV_syntax
.12e2					_RUNNotToken:
.12e2	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12e4	90 f9		bcc $12df			bcc 	_RUNSyntax
.12e6	20 13 12	jsr $1213			jsr 	CommandLET 					; assignment
.12e9	80 d6		bra $12c1			bra 	RUNNewCommand 				; loop round.
.12eb					Command_Shift_Handler:
.12eb	4c b0 21	jmp $21b0		jmp	ErrorV_unimplemented
.12ee					Command_END:
.12ee	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12f1					Command_STOP:
.12f1	4c 0d 22	jmp $220d		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.12f4					NoExec01:
.12f4					NoExec02:
.12f4					NoExec03:
.12f4					NoExec04:
.12f4					NoExec05:
.12f4					NoExec06:
.12f4					NoExec07:
.12f4					NoExec08:
.12f4	4c 72 21	jmp $2172		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12f7					EXPBinAdd:
.12f7	24 0f		bit $0f				bit 	IFR0+IExp
.12f9	30 6f		bmi $136a			bmi 	EXPConcatenate
.12fb	a2 10		ldx #$10			ldx 	#IFR1
.12fd	4c b6 25	jmp $25b6			jmp 	IFloatAdd
.1300					EXPBinSub:
.1300	24 0f		bit $0f				bit 	IFR0+IExp
.1302	30 3f		bmi $1343			bmi 	EXPTypeError
.1304	a2 10		ldx #$10			ldx 	#IFR1
.1306	4c af 25	jmp $25af			jmp 	IFloatSubtract
.1309					EXPBinMul:
.1309	24 0f		bit $0f				bit 	IFR0+IExp
.130b	30 36		bmi $1343			bmi 	EXPTypeError
.130d	a2 10		ldx #$10			ldx 	#IFR1
.130f	4c 60 26	jmp $2660			jmp 	IFloatMultiply
.1312					EXPBinFDiv:
.1312	24 0f		bit $0f				bit 	IFR0+IExp
.1314	30 2d		bmi $1343			bmi 	EXPTypeError
.1316	a2 10		ldx #$10			ldx 	#IFR1
.1318	20 e3 28	jsr $28e3			jsr 	IFloatDivideFloat
.131b	b0 0f		bcs $132c			bcs 	EXPDZero
.131d	60		rts				rts
.131e					EXPBinIDiv:
.131e	24 0f		bit $0f				bit 	IFR0+IExp
.1320	30 21		bmi $1343			bmi 	EXPTypeError
.1322	a2 10		ldx #$10			ldx 	#IFR1
.1324	20 e3 28	jsr $28e3			jsr 	IFloatDivideFloat
.1327	b0 03		bcs $132c			bcs 	EXPDZero
.1329	4c c0 28	jmp $28c0			jmp 	IFloatIntegerR0
.132c					EXPDZero:
.132c	4c e4 21	jmp $21e4		jmp	ErrorV_divzero
.132f					EXPBinIMod:
.132f	24 0f		bit $0f				bit 	IFR0+IExp
.1331	30 10		bmi $1343			bmi 	EXPTypeError
.1333	a2 10		ldx #$10			ldx 	#IFR1
.1335	5a		phy				phy
.1336	20 f8 27	jsr $27f8			jsr 	IFPreProcessBitwise 		; set up everything.
.1339	d0 05		bne $1340			bne 	EXPDRange
.133b	20 31 27	jsr $2731			jsr 	IFloatModulusInteger
.133e	7a		ply				ply
.133f	60		rts				rts
.1340					EXPDRange:
.1340	4c 82 21	jmp $2182		jmp	ErrorV_range
.1343					EXPTypeError:
.1343	4c 9f 21	jmp $219f		jmp	ErrorV_type
.1346					EXPBinAnd:
.1346	24 0f		bit $0f				bit 	IFR0+IExp
.1348	30 f9		bmi $1343			bmi 	EXPTypeError
.134a	a2 10		ldx #$10			ldx 	#IFR1
.134c	20 b3 27	jsr $27b3			jsr 	IFloatBitwiseAnd
.134f	b0 ef		bcs $1340			bcs 	EXPDRange
.1351	60		rts				rts
.1352					EXPBinOr:
.1352	24 0f		bit $0f				bit 	IFR0+IExp
.1354	30 ed		bmi $1343			bmi 	EXPTypeError
.1356	a2 10		ldx #$10			ldx 	#IFR1
.1358	20 ca 27	jsr $27ca			jsr 	IFloatBitwiseOr
.135b	b0 e3		bcs $1340			bcs 	EXPDRange
.135d	60		rts				rts
.135e					EXPBinXor:
.135e	24 0f		bit $0f				bit 	IFR0+IExp
.1360	30 e1		bmi $1343			bmi 	EXPTypeError
.1362	a2 10		ldx #$10			ldx 	#IFR1
.1364	20 e1 27	jsr $27e1			jsr 	IFloatBitwiseXor
.1367	b0 d7		bcs $1340			bcs 	EXPDRange
.1369	60		rts				rts
.136a					EXPConcatenate:
.136a	18		clc				clc
.136b	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.136d	72 10		adc ($10)			adc 	(IFR1)
.136f	b0 2d		bcs $139e			bcs 	_EXPCError
.1371	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1373	da		phx				phx
.1374	a6 0d		ldx $0d				ldx 	IFR0+1
.1376	da		phx				phx
.1377	20 b5 23	jsr $23b5			jsr 	StringTempAllocate 			; allocate string, set up return
.137a	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.137c	a5 10		lda $10				lda 	IFR1
.137e	20 87 13	jsr $1387			jsr 	_EXPCCopyXA
.1381	fa		plx				plx 								; copy second string
.1382	68		pla				pla
.1383	20 87 13	jsr $1387			jsr 	_EXPCCopyXA
.1386	60		rts				rts
.1387					_EXPCCopyXA:
.1387	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.1389	85 1e		sta $1e				sta 	zTemp0
.138b	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.138d	f0 0e		beq $139d			beq 	_EXPCCExit 					; nothing.
.138f	aa		tax				tax 								; count
.1390	5a		phy				phy 								; start positioin
.1391	a0 01		ldy #$01			ldy 	#1
.1393					_EXPCCLoop:
.1393	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.1395	20 ea 23	jsr $23ea			jsr 	StringTempWrite
.1398	c8		iny				iny
.1399	ca		dex				dex
.139a	d0 f7		bne $1393			bne 	_EXPCCLoop
.139c	7a		ply				ply
.139d					_EXPCCExit:
.139d	60		rts				rts
.139e					_EXPCError:
.139e	4c 80 22	jmp $2280		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.13a1					EXPReturnTrue:
.13a1	a2 0c		ldx #$0c			ldx 	#IFR0
.13a3	a9 01		lda #$01			lda 	#1
.13a5	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.13a8	20 cb 2b	jsr $2bcb			jsr 	IFloatNegate
.13ab	60		rts				rts
.13ac					EXPReturnFalse:
.13ac	a2 0c		ldx #$0c			ldx 	#IFR0
.13ae	4c c0 2b	jmp $2bc0			jmp 	IFloatSetZero
.13b1					EXPCompareEqual:
.13b1	20 e7 13	jsr $13e7			jsr 	EXPCompareBaseCode
.13b4	c9 00		cmp #$00			cmp 	#0
.13b6	f0 e9		beq $13a1			beq 	EXPReturnTrue
.13b8	80 f2		bra $13ac			bra 	EXPReturnFalse
.13ba					EXPCompareLess:
.13ba	20 e7 13	jsr $13e7			jsr 	EXPCompareBaseCode
.13bd	c9 ff		cmp #$ff			cmp 	#$FF
.13bf	f0 e0		beq $13a1			beq 	EXPReturnTrue
.13c1	80 e9		bra $13ac			bra 	EXPReturnFalse
.13c3					EXPCompareGreater:
.13c3	20 e7 13	jsr $13e7			jsr 	EXPCompareBaseCode
.13c6	c9 01		cmp #$01			cmp 	#1
.13c8	f0 d7		beq $13a1			beq 	EXPReturnTrue
.13ca	80 e0		bra $13ac			bra 	EXPReturnFalse
.13cc					EXPCompareNotEqual:
.13cc	20 e7 13	jsr $13e7			jsr 	EXPCompareBaseCode
.13cf	c9 00		cmp #$00			cmp 	#0
.13d1	d0 ce		bne $13a1			bne 	EXPReturnTrue
.13d3	80 d7		bra $13ac			bra 	EXPReturnFalse
.13d5					EXPCompareLessEqual:
.13d5	20 e7 13	jsr $13e7			jsr 	EXPCompareBaseCode
.13d8	c9 01		cmp #$01			cmp 	#1
.13da	d0 c5		bne $13a1			bne 	EXPReturnTrue
.13dc	80 ce		bra $13ac			bra 	EXPReturnFalse
.13de					EXPCompareGreaterEqual:
.13de	20 e7 13	jsr $13e7			jsr 	EXPCompareBaseCode
.13e1	c9 ff		cmp #$ff			cmp 	#$FF
.13e3	d0 bc		bne $13a1			bne 	EXPReturnTrue
.13e5	80 c5		bra $13ac			bra 	EXPReturnFalse
.13e7					EXPCompareBaseCode:
.13e7	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13e9	30 10		bmi $13fb			bmi 	_EXCBCString
.13eb	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13ed	20 8e 28	jsr $288e			jsr 	IFloatCompare
.13f0	a5 0c		lda $0c				lda 	IFR0+IM0
.13f2	f0 06		beq $13fa			beq 	_EXCBCExit 					; return 0 if zero
.13f4	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13f6	50 02		bvc $13fa			bvc 	_EXCBCExit
.13f8	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13fa					_EXCBCExit:
.13fa	60		rts				rts
.13fb					_EXCBCString:
.13fb	5a		phy				phy
.13fc	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13fe	d2 10		cmp ($10)			cmp 	(IFR1)
.1400	90 02		bcc $1404			bcc 	_EXCBCSmaller
.1402	b2 10		lda ($10)			lda 	(IFR1)
.1404					_EXCBCSmaller:
.1404	aa		tax				tax
.1405	f0 0d		beq $1414			beq 	_EXCBCMatches 				; if zero common length matches
.1407	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1409					_EXCBCCheckSmallerMatches:
.1409	c8		iny				iny 								; compare directly as far as common length
.140a	38		sec				sec
.140b	b1 10		lda ($10),y			lda 	(IFR1),y
.140d	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.140f	d0 08		bne $1419			bne 	_EXCBCExit2
.1411	ca		dex				dex
.1412	d0 f5		bne $1409			bne 	_EXCBCCheckSmallerMatches
.1414					_EXCBCMatches:
.1414	38		sec				sec
.1415	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.1417	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1419					_EXCBCExit2:
.1419	7a		ply				ply
.141a	c9 00		cmp #$00			cmp 	#0
.141c	f0 04		beq $1422			beq 	_EXCBCReturn
.141e	30 03		bmi $1423			bmi 	_EXCBCFF
.1420	a9 01		lda #$01			lda 	#1
.1422					_EXCBCReturn:
.1422	60		rts				rts
.1423					_EXCBCFF:
.1423	a9 ff		lda #$ff			lda 	#$FF
.1425	60		rts				rts
.1426					_EXCBCRange:
.1426	4c 82 21	jmp $2182		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1429					EXPBinLeft:
.1429	a9 ff		lda #$ff			lda 	#$FF
.142b	8d 3d 03	sta $033d			sta 	EXPShiftLeftFlag
.142e	4c 34 14	jmp $1434			jmp 	EXPShiftCommon
.1431					EXPBinRight:
.1431	9c 3d 03	stz $033d			stz 	EXPShiftLeftFlag
.1434					EXPShiftCommon:
.1434	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.1436	05 13		ora $13				ora 	IFR1+IExp
.1438	29 7f		and #$7f			and 	#$7F
.143a	d0 35		bne $1471			bne 	_EXPSRange
.143c	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.143e	29 e0		and #$e0			and 	#$E0
.1440	05 0d		ora $0d				ora 	IFR0+IM1
.1442	05 0e		ora $0e				ora 	IFR0+IM2
.1444	d0 25		bne $146b			bne 	_EXPSShiftZero 				; if so return zero
.1446	5a		phy				phy
.1447	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1449	29 1f		and #$1f			and 	#$1F
.144b	f0 17		beq $1464			beq 	_EXPSExit 					; exit if zero
.144d	a8		tay				tay
.144e					_EXPSLoop:
.144e	a2 10		ldx #$10			ldx 	#IFR1
.1450	2c 3d 03	bit $033d			bit 	EXPShiftLeftFlag
.1453	30 05		bmi $145a			bmi 	_EXPSShiftLeft
.1455	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.1458	80 07		bra $1461			bra 	_EXPSContinue
.145a					_EXPSShiftLeft:
.145a	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.145d	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.145f	30 10		bmi $1471			bmi 	_EXPSRange
.1461					_EXPSContinue:
.1461	88		dey				dey
.1462	d0 ea		bne $144e			bne 	_EXPSLoop
.1464					_EXPSExit:
.1464	a2 10		ldx #$10			ldx 	#IFR1
.1466	20 51 2b	jsr $2b51			jsr 	IFloatCopyFromRegister
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					_EXPSShiftZero:
.146b	a2 0c		ldx #$0c			ldx 	#IFR0
.146d	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.1470	60		rts				rts
.1471					_EXPSRange:
.1471	4c 82 21	jmp $2182		jmp	ErrorV_range
.033d					EXPShiftLeftFlag:
>033d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1474					EXPEvaluateExpression:
.1474	a9 00		lda #$00			lda 	#0 							; current precedence
.1476					EXPEvaluateExpressionPrecedenceA:
.1476	48		pha				pha
.1477	20 f1 14	jsr $14f1			jsr 	EXPTermValueR0				; do first term.
.147a					_EELoop:
.147a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.147c	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.147e	90 31		bcc $14b1			bcc 	_EEExit
.1480	aa		tax				tax 								; access the precedence of the operator.
.1481	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1482	dd 2f 17	cmp $172f,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1485	b0 2b		bcs $14b2			bcs 	_EEExit2
.1487	48		pha				pha 								; save current precedence.
.1488	da		phx				phx 								; save operator
.1489	c8		iny				iny 								; consume operator
.148a	da		phx				phx
.148b	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.148d	20 0f 2b	jsr $2b0f			jsr 	IFloatPushRx
.1490	fa		plx				plx
.1491	bd 2f 17	lda $172f,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1494	20 76 14	jsr $1476			jsr 	EXPEvaluateExpressionPrecedenceA
.1497	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.1499	20 30 2b	jsr $2b30			jsr 	IFloatPullRx
.149c	fa		plx				plx 								; operator
.149d	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.149f	45 13		eor $13				eor 	IFR1+IExp
.14a1	30 08		bmi $14ab			bmi 	_EEType
.14a3					_EETypeOkay:
.14a3	8a		txa				txa
.14a4	0a		asl a				asl 	a 							; double -> X
.14a5	aa		tax				tax
.14a6	20 ae 14	jsr $14ae			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.14a9	80 cf		bra $147a			bra 	_EELoop
.14ab					_EEType:
.14ab	4c 9f 21	jmp $219f		jmp	ErrorV_type
.14ae					_EECallBinary:
.14ae	7c d7 19	jmp ($19d7,x)			jmp 	(VectorTable,x)
.14b1					_EEExit:
.14b1	68		pla				pla 								; throw precedence
.14b2					_EEExit2:
.14b2	18		clc				clc
.14b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.14b4					EXPEvalNumber:
.14b4	20 74 14	jsr $1474			jsr 	EXPEvaluateExpression
.14b7	24 0f		bit $0f				bit 	IFR0+IExp
.14b9	30 01		bmi $14bc			bmi 	EVUType
.14bb	60		rts				rts
.14bc					EVUType:
.14bc	4c 9f 21	jmp $219f		jmp	ErrorV_type
.14bf					EXPEvalInteger:
.14bf	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.14c2	20 c0 28	jsr $28c0			jsr 	IFloatIntegerR0
.14c5	60		rts				rts
.14c6					EXPEvalInteger16:
.14c6	20 bf 14	jsr $14bf			jsr 	EXPEvalInteger
.14c9	a5 0e		lda $0e				lda 	IFR0+IM2
.14cb	d0 21		bne $14ee			bne 	EVURange
.14cd	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14cf	a5 0c		lda $0c				lda 	IFR0+IM0
.14d1	60		rts				rts
.14d2					EXPEvalInteger8:
.14d2	20 bf 14	jsr $14bf			jsr 	EXPEvalInteger
.14d5	a5 0e		lda $0e				lda 	IFR0+IM2
.14d7	05 0d		ora $0d				ora 	IFR0+IM1
.14d9	d0 13		bne $14ee			bne 	EVURange
.14db	a5 0c		lda $0c				lda 	IFR0+IM0
.14dd	60		rts				rts
.14de					EXPEvalString:
.14de	20 74 14	jsr $1474			jsr 	EXPEvaluateExpression
.14e1	24 0f		bit $0f				bit 	IFR0+IExp
.14e3	10 d7		bpl $14bc			bpl 	EVUType
.14e5	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14e7	86 1f		stx $1f				stx 	zTemp0+1
.14e9	a5 0c		lda $0c				lda 	IFR0+IM0
.14eb	85 1e		sta $1e				sta 	zTemp0
.14ed	60		rts				rts
.14ee					EVURange:
.14ee	4c 82 21	jmp $2182		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14f1					EXPTermValueR0:
.14f1	20 3c 15	jsr $153c			jsr 	EXPTermR0 					; get term
.14f4	90 45		bcc $153b			bcc 	_ETVNotReference 			; exit if value.
.14f6	5a		phy				phy
.14f7	a0 03		ldy #$03			ldy 	#3 							; get type
.14f9	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14fb	30 14		bmi $1511			bmi 	_ETVDereferenceString
.14fd	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14ff	88		dey				dey
.1500	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1502	85 0e		sta $0e				sta 	IFR0+IM2
.1504	88		dey				dey
.1505	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1507	aa		tax				tax
.1508	b2 0c		lda ($0c)			lda 	(IFR0)
.150a	86 0d		stx $0d				stx 	IFR0+IM1
.150c	85 0c		sta $0c				sta 	IFR0+IM0
.150e	7a		ply				ply
.150f	18		clc				clc
.1510	60		rts				rts
.1511					_ETVDereferenceString:
.1511	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1513	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1515	12 0c		ora ($0c)			ora 	(IFR0)
.1517	f0 11		beq $152a			beq 	_ETVNull
.1519	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.151b	aa		tax				tax
.151c	b2 0c		lda ($0c)			lda 	(IFR0)
.151e	18		clc				clc 								; add two so points to actual string.
.151f	69 02		adc #$02			adc 	#2
.1521	90 01		bcc $1524			bcc 	_EVDSNoCarry
.1523	e8		inx				inx
.1524					_EVDSNoCarry:
.1524	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.1526	85 0c		sta $0c				sta 	IFR0
.1528	80 08		bra $1532			bra 	_ETVFillExit 				; tidy up and exit.
.152a					_ETVNull:
.152a	a9 3a		lda #$3a			lda 	#_EVTNString & $FF
.152c	85 0c		sta $0c				sta 	IFR0+IM0
.152e	a9 15		lda #$15			lda 	#_EVTNString >> 8
.1530	85 0d		sta $0d				sta 	IFR0+IM1
.1532					_ETVFillExit:
.1532	64 0e		stz $0e				stz 	IFR0+IM2
.1534	a9 80		lda #$80			lda 	#$80
.1536	85 0f		sta $0f				sta 	IFR0+IExp
.1538	7a		ply				ply
.1539	60		rts				rts
.153a					_EVTNString:
>153a	00						.byte 	0
.153b					_ETVNotReference:
.153b	60		rts				rts
.153c					EXPTermR0:
.153c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.153e	30 10		bmi $1550			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1540	c8		iny				iny 								; consume element
.1541	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1543	b0 08		bcs $154d			bcs 	_ETMIdentifier
.1545	20 74 15	jsr $1574			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1548	20 a7 15	jsr $15a7			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.154b	18		clc				clc 								; return value
.154c	60		rts				rts
.154d					_ETMIdentifier:
.154d	4c 57 25	jmp $2557			jmp 	VARCheckSimple 				; check simple variables A-Z
.1550					_ETMIsUnaryOrMinus:
.1550	c8		iny				iny 								; consume element
.1551	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1553	d0 0a		bne $155f			bne 	_ETMCheckUnary
.1555	20 f1 14	jsr $14f1			jsr 	EXPTermValueR0 				; get a term to negate
.1558	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.155a	20 cb 2b	jsr $2bcb			jsr 	IFloatNegate
.155d	18		clc				clc
.155e	60		rts				rts
.155f					_ETMCheckUnary:
.155f	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1561	90 0e		bcc $1571			bcc 	_ETMUnarySyntax
.1563	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1565	b0 0a		bcs $1571			bcs 	_ETMUnarySyntax
.1567	0a		asl a				asl 	a
.1568	aa		tax				tax
.1569	20 6e 15	jsr $156e			jsr 	_ETMCallUnaryFunction
.156c	18		clc				clc
.156d	60		rts				rts
.156e					_ETMCallUnaryFunction:
.156e	7c d7 19	jmp ($19d7,x)			jmp 	(VectorTable,x)
.1571					_ETMUnarySyntax:
.1571	4c 72 21	jmp $2172		jmp	ErrorV_syntax
.1574					EXPExtractTokenisedInteger:
.1574	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1576	64 0f		stz $0f				stz 	IFR0+IExp
.1578	64 0d		stz $0d				stz 	IFR0+IM1
.157a	64 0e		stz $0e				stz 	IFR0+IM2
.157c					_ETMConstant:
.157c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.157e	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1580	b0 24		bcs $15a6			bcs 	_ETMCExit 					; no.
.1582	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1584	a5 0d		lda $0d				lda 	IFR0+IM1
.1586	85 0e		sta $0e				sta 	IFR0+IM2
.1588	a5 0c		lda $0c				lda 	IFR0+IM0
.158a	85 0d		sta $0d				sta 	IFR0+IM1
.158c	64 0c		stz $0c				stz 	IFR0+IM0
.158e	8a		txa				txa
.158f	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1590	66 0e		ror $0e				ror 	IFR0+IM2
.1592	66 0d		ror $0d				ror 	IFR0+IM1
.1594	66 0c		ror $0c				ror 	IFR0+IM0
.1596	4a		lsr a				lsr 	a
.1597	66 0e		ror $0e				ror 	IFR0+IM2
.1599	66 0d		ror $0d				ror 	IFR0+IM1
.159b	66 0c		ror $0c				ror 	IFR0+IM0
.159d	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.159f	11 1c		ora ($1c),y			ora 	(codePtr),y
.15a1	85 0c		sta $0c				sta 	IFR0+IM0
.15a3	c8		iny				iny 								; consume, loop back
.15a4	80 d6		bra $157c			bra 	_ETMConstant
.15a6					_ETMCExit:
.15a6	60		rts				rts
.15a7					EXPCheckDecimalFollows:
.15a7	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.15a9	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.15ab	d0 19		bne $15c6			bne 	_ETMCDExit
.15ad	c8		iny				iny 								; consume token.
.15ae	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.15b0	5a		phy				phy									; save current position
.15b1	48		pha				pha 								; save count of chars.
.15b2	38		sec				sec 								; address into YX : y + codePtr+1
.15b3	98		tya				tya
.15b4	65 1c		adc $1c				adc 	codePtr
.15b6	aa		tax				tax
.15b7	a5 1d		lda $1d				lda 	codePtr+1
.15b9	69 00		adc #$00			adc 	#0
.15bb	a8		tay				tay
.15bc	68		pla				pla 								; get count.
.15bd	20 64 2a	jsr $2a64			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.15c0	7a		ply				ply 								; go to next token.
.15c1	98		tya				tya
.15c2	38		sec				sec
.15c3	71 1c		adc ($1c),y			adc 	(codePtr),y
.15c5	a8		tay				tay
.15c6					_ETMCDExit:
.15c6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.15c7					EXPUnaryAbs:
.15c7	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 					; number to R0
.15ca	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.15cd	20 04 28	jsr $2804			jsr 	IFloatAbsoluteR0
.15d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15d1					EXPUnaryAsc:
.15d1	20 de 14	jsr $14de			jsr 	EXPEvalString 					; string to R0, zTemp0
.15d4	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.15d7	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15d9	f0 06		beq $15e1			beq 	_EXAZero 						; if so return 0
.15db	5a		phy				phy 									; otherwise get first character
.15dc	a0 01		ldy #$01			ldy 	#1
.15de	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15e0	7a		ply				ply
.15e1					_EXAZero:
.15e1	a2 0c		ldx #$0c			ldx 	#IFR0
.15e3	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.15e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15e7					EXPUnaryChr:
.15e7	20 d2 14	jsr $14d2			jsr 	EXPEvalInteger8 				; expr
.15ea	48		pha				pha 									; push on stack
.15eb	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.15ee	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.15f0	20 b5 23	jsr $23b5			jsr 	StringTempAllocate
.15f3	68		pla				pla
.15f4	20 ea 23	jsr $23ea			jsr 	StringTempWrite
.15f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.15f8					EXPUnaryDec:
.15f8	20 de 14	jsr $14de			jsr 	EXPEvalString 					; string to R0, zTemp0
.15fb	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.15fe	5a		phy				phy
.15ff	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.1601	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.1604	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.1606	f0 3b		beq $1643			beq 	_EUDError 						; empty string
.1608	aa		tax				tax
.1609	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.160b					_EUDLoop:
.160b	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.160d	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.160f	90 02		bcc $1613			bcc 	_EUDNoCase
.1611	e9 20		sbc #$20			sbc 	#$20
.1613					_EUDNoCase:
.1613	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1615	90 2c		bcc $1643			bcc 	_EUDError
.1617	c9 3a		cmp #$3a			cmp 	#'9'+1
.1619	90 0a		bcc $1625			bcc 	_EUDOkay
.161b	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.161d	90 24		bcc $1643			bcc 	_EUDError
.161f	c9 47		cmp #$47			cmp 	#'F'+1
.1621	b0 20		bcs $1643			bcs 	_EUDError
.1623	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1625					_EUDOkay:
.1625	29 0f		and #$0f			and 	#15 							; make constant
.1627	da		phx				phx
.1628	48		pha				pha
.1629	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.162b	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.162e	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1631	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1634	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1637	68		pla				pla 									; pop constant and OR in
.1638	fa		plx				plx
.1639	05 0c		ora $0c				ora 	IFR0+IM0
.163b	85 0c		sta $0c				sta 	IFR0+IM0
.163d	c8		iny				iny 									; next
.163e	ca		dex				dex
.163f	d0 ca		bne $160b			bne 	_EUDLoop
.1641	7a		ply				ply
.1642	60		rts				rts
.1643					_EUDError:
.1643	4c 92 21	jmp $2192		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1646					EXPUnaryInlineDec:
.1646	4c 72 21	jmp $2172		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1649					EXPUnaryPeek:
.1649	20 c6 14	jsr $14c6			jsr 	EXPEvalInteger16 				; number to R0
.164c	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.164f	b2 0c		lda ($0c)			lda 	(IFR0)
.1651	a2 0c		ldx #$0c			ldx 	#IFR0
.1653	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.1656	60		rts				rts
.1657					EXPUnaryDeek:
.1657	20 c6 14	jsr $14c6			jsr 	EXPEvalInteger16 				; number to R0
.165a	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.165d	5a		phy				phy
.165e	a0 01		ldy #$01			ldy 	#1
.1660	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1662	7a		ply				ply
.1663	48		pha				pha
.1664	b2 0c		lda ($0c)			lda 	(IFR0)
.1666	a2 0c		ldx #$0c			ldx 	#IFR0
.1668	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.166b	68		pla				pla
.166c	85 0d		sta $0d				sta 	IFR0+IM1
.166e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.166f					EXPUnaryNull:
.166f	20 f1 14	jsr $14f1			jsr 	EXPTermValueR0
.1672	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1673					EXPUnaryFrac:
.1673	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 					; number to R0
.1676	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.1679	20 6a 28	jsr $286a			jsr 	IFloatFractionalR0
.167c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.167d					EXPUnaryInt:
.167d	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 					; number to R0
.1680	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.1683	20 c0 28	jsr $28c0			jsr 	IFloatIntegerR0
.1686	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1687					EXPUnaryLen:
.1687	20 de 14	jsr $14de			jsr 	EXPEvalString 					; string to R0, zTemp0
.168a	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.168d	b2 1e		lda ($1e)			lda 	(zTemp0)
.168f	a2 0c		ldx #$0c			ldx 	#IFR0
.1691	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.1694	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1695					EXPUnaryParenthesis:
.1695	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 					; number to R0
.1698	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.169b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.169c					EXPUnaryRnd:
.169c	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 				; number to R0
.169f	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 				; )
.16a2	a2 0c		ldx #$0c			ldx 	#IFR0
.16a4	20 bb 16	jsr $16bb			jsr 	EXPLoadInRandom
.16a7	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.16a9	85 0f		sta $0f				sta 	IFR0+IExp
.16ab	60		rts				rts
.16ac					ExpUnaryRand:
.16ac	20 bf 14	jsr $14bf			jsr 	EXPEvalInteger 				; integer to R0
.16af	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 				; )
.16b2	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.16b4	20 bb 16	jsr $16bb			jsr 	EXPLoadInRandom
.16b7	20 31 27	jsr $2731			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.16ba	60		rts				rts
.16bb					EXPLoadInRandom:
.16bb	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.16be	20 d0 16	jsr $16d0			jsr 	EXPRandom32
.16c1	95 00		sta $00,x			sta 	IM0,x
.16c3	20 d0 16	jsr $16d0			jsr 	EXPRandom32
.16c6	95 01		sta $01,x			sta 	IM1,x
.16c8	20 d0 16	jsr $16d0			jsr 	EXPRandom32
.16cb	29 7f		and #$7f			and 	#$7F
.16cd	95 02		sta $02,x			sta 	IM2,x
.16cf	60		rts				rts
.16d0					EXPRandom32:
.16d0	5a		phy				phy
.16d1	a0 08		ldy #$08			ldy 	#8
.16d3	ad 3e 03	lda $033e			lda 	EXPSeed+0
.16d6	0d 3f 03	ora $033f			ora 	EXPSeed+1
.16d9	0d 40 03	ora $0340			ora 	EXPSeed+2
.16dc	0d 41 03	ora $0341			ora 	EXPSeed+3
.16df	d0 08		bne $16e9			bne 	_EXPRNoReset
.16e1	ee 3e 03	inc $033e			inc 	EXPSeed+0
.16e4	a0 10		ldy #$10			ldy 	#16
.16e6	8c 41 03	sty $0341			sty 	EXPSeed+3
.16e9					_EXPRNoReset:
.16e9	ad 3e 03	lda $033e			lda 	EXPSeed+0
.16ec					_EXPRLoop:
.16ec	0a		asl a				asl		a
.16ed	2e 3f 03	rol $033f			rol 	EXPSeed+1
.16f0	2e 40 03	rol $0340			rol 	EXPSeed+2
.16f3	2e 41 03	rol $0341			rol 	EXPSeed+3
.16f6	90 02		bcc $16fa			bcc 	_EXPRNoEOR
.16f8	49 c5		eor #$c5			eor 	#$C5
.16fa					_EXPRNoEOR:
.16fa	88		dey				dey
.16fb	d0 ef		bne $16ec			bne 	_EXPRLoop
.16fd	8d 3e 03	sta $033e			sta 	EXPSeed+0
.1700	7a		ply				ply
.1701	60		rts				rts
.033e					EXPSeed:
>033e							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1702					EXPUnarySgn:
.1702	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 					; number to R0
.1705	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.1708	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.170a	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister
.170d	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.170f	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.1712	a2 10		ldx #$10			ldx 	#IFR1
.1714	20 8e 28	jsr $288e			jsr 	IFloatCompare 					; compare R1 vs 0.
.1717	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1718					EXPUnarySqr:
.1718	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 					; number to R0
.171b	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.171e	20 0c 28	jsr $280c			jsr 	IFloatSquareRootR0 				; square root.
.1721	b0 01		bcs $1724			bcs 	_EUSValue
.1723	60		rts				rts
.1724					_EUSValue:
.1724	4c 82 21	jmp $2182		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1727					EXPUnaryHex:
.1727	20 bf 14	jsr $14bf			jsr 	EXPEvalInteger 					; expr
.172a	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.172d	5a		phy				phy
.172e	a9 10		lda #$10			lda 	#16
.1730	20 61 29	jsr $2961			jsr 	IFloatIntegerToStringR0
.1733	80 0a		bra $173f			bra 	EUSMain
.1735					EXPUnaryStr:
.1735	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 					; expr
.1738	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.173b	5a		phy				phy
.173c	20 bd 29	jsr $29bd			jsr 	IFloatFloatToStringR0 			; convert to string
.173f					EUSMain:
.173f	b0 18		bcs $1759			bcs 	_EUSError
.1741	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1743	84 1f		sty $1f				sty 	zTemp0+1
.1745	48		pha				pha 									; save count
.1746	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1748	20 b5 23	jsr $23b5			jsr 	StringTempAllocate
.174b	fa		plx				plx 									; count in X
.174c	a0 00		ldy #$00			ldy 	#0
.174e					_EUSCopy:
.174e	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1750	c8		iny				iny
.1751	20 ea 23	jsr $23ea			jsr 	StringTempWrite
.1754	ca		dex				dex
.1755	d0 f7		bne $174e			bne	 	_EUSCopy
.1757	7a		ply				ply
.1758	60		rts				rts
.1759					_EUSError:
.1759	4c 82 21	jmp $2182		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.175c					EXPUnaryInlineString:
.175c	18		clc				clc 								; physical address -> IM0,1
.175d	98		tya				tya
.175e	65 1c		adc $1c				adc 	codePtr
.1760	85 0c		sta $0c				sta 	IFR0+IM0
.1762	a5 1d		lda $1d				lda 	codePtr+1
.1764	69 00		adc #$00			adc 	#0
.1766	85 0d		sta $0d				sta 	IFR0+IM1
.1768	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.176a	a9 80		lda #$80			lda 	#$80
.176c	85 0f		sta $0f				sta 	IFR0+IExp
.176e	98		tya				tya	 								; skip over it.
.176f	38		sec				sec
.1770	71 1c		adc ($1c),y			adc 	(codePtr),y
.1772	a8		tay				tay
.1773	60		rts				rts
.1774					_EXPUISRange:
.1774	4c 82 21	jmp $2182		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1777					EXPUnaryLeft:
.1777	20 bd 17	jsr $17bd			jsr 	EXPCommonStart 					; <string>,
.177a	48		pha				pha 									; save string address on stack
.177b	da		phx				phx
.177c	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.177e	48		pha				pha
.177f	20 d2 14	jsr $14d2			jsr 	EXPEvalInteger8 				; characters to do
.1782	80 44		bra $17c8			bra 	EXPSubstringCommon
.1784					EXPUnaryRight:
.1784	20 bd 17	jsr $17bd			jsr 	EXPCommonStart 					; <string>,
.1787	48		pha				pha 									; save string address on stack
.1788	da		phx				phx
.1789	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.178b	48		pha				pha
.178c	20 d2 14	jsr $14d2			jsr 	EXPEvalInteger8 				; characters to do
.178f	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1791	68		pla				pla
.1792	38		sec				sec
.1793	e5 1e		sbc $1e				sbc 	zTemp0
.1795	b0 02		bcs $1799			bcs 	_EUROffLeft
.1797	a9 00		lda #$00			lda 	#0
.1799					_EUROffLeft:
.1799	48		pha				pha 									; start pos
.179a	a9 ff		lda #$ff			lda 	#255
.179c	80 2a		bra $17c8			bra 	EXPSubstringCommon
.179e					EXPUnaryMid:
.179e	20 bd 17	jsr $17bd			jsr 	EXPCommonStart 					; <string>,
.17a1	48		pha				pha 									; save string address on stack
.17a2	da		phx				phx
.17a3	20 d2 14	jsr $14d2			jsr 	EXPEvalInteger8 				; characters start
.17a6	f0 12		beq $17ba			beq 	_EUSError 						; 1 is left
.17a8	3a		dec a				dec 	a 								; zero based.
.17a9	48		pha				pha
.17aa	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.17ac	c9 99		cmp #$99			cmp 	#PR_COMMA
.17ae	f0 04		beq $17b4			beq 	_EUMLength 						; if so m is provided
.17b0	a9 ff		lda #$ff			lda 	#255 							; default m
.17b2	80 14		bra $17c8			bra 	EXPSubstringCommon
.17b4					_EUMLength:
.17b4	c8		iny				iny 									; consume comma
.17b5	20 d2 14	jsr $14d2			jsr 	EXPEvalInteger8 				; characters to do
.17b8	80 0e		bra $17c8			bra 	EXPSubstringCommon
.17ba					_EUSError:
.17ba	4c 92 21	jmp $2192		jmp	ErrorV_value
.17bd					EXPCommonStart:
.17bd	20 de 14	jsr $14de			jsr 	EXPEvalString
.17c0	20 c7 22	jsr $22c7			jsr 	ERRCheckComma
.17c3	a5 0c		lda $0c				lda 	IFR0+IM0
.17c5	a6 0d		ldx $0d				ldx 	IFR0+IM1
.17c7	60		rts				rts
.17c8					EXPSubstringCommon:
.17c8	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.17ca	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; check right bracket.
.17cd	68		pla				pla 									; start position
.17ce	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.17d0	fa		plx				plx 									; get string address to zTemp2.
.17d1	86 23		stx $23				stx 	zTemp2+1
.17d3	68		pla				pla
.17d4	85 22		sta $22				sta 	zTemp2
.17d6	38		sec				sec 									; length - start is the max count of chars
.17d7	b2 22		lda ($22)			lda 	(zTemp2)
.17d9	e5 21		sbc $21				sbc 	zTemp1+1
.17db	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.17dd	b0 02		bcs $17e1			bcs 	_EXPSSNoTrim
.17df	85 20		sta $20				sta 	zTemp1 							; update count with available
.17e1					_EXPSSNoTrim:
.17e1	a5 20		lda $20				lda 	zTemp1 							; chars required.
.17e3	20 b5 23	jsr $23b5			jsr 	StringTempAllocate 				; allocate memory for it.
.17e6	a5 20		lda $20				lda 	zTemp1 							; zero length string
.17e8	f0 15		beq $17ff			beq 	_EXPSSExit
.17ea	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.17ec	d2 22		cmp ($22)			cmp 	(zTemp2)
.17ee	b0 0f		bcs $17ff			bcs 	_EXPSSExit
.17f0	5a		phy				phy
.17f1	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.17f3	c8		iny				iny 									; +1 for the length byte
.17f4					_EXPSSCopy:
.17f4	b1 22		lda ($22),y			lda 	(zTemp2),y
.17f6	20 ea 23	jsr $23ea			jsr 	StringTempWrite
.17f9	c8		iny				iny
.17fa	c6 20		dec $20				dec 	zTemp1
.17fc	d0 f6		bne $17f4			bne 	_EXPSSCopy
.17fe	7a		ply				ply
.17ff					_EXPSSExit:
.17ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1800					EXPUnaryVal:
.1800	20 de 14	jsr $14de			jsr 	EXPEvalString 					; string to R0, zTemp0
.1803	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen 					; )
.1806	5a		phy				phy
.1807	18		clc				clc
.1808	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.180a	69 01		adc #$01			adc 	#1
.180c	aa		tax				tax
.180d	a5 1f		lda $1f				lda 	zTemp0+1
.180f	69 00		adc #$00			adc 	#0
.1811	a8		tay				tay
.1812	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.1814	20 24 2a	jsr $2a24			jsr 	IFloatStringToFloatR0 			; do conversion
.1817	b0 02		bcs $181b			bcs 	_EUVError
.1819	7a		ply				ply
.181a	60		rts				rts
.181b					_EUVError:
.181b	4c 92 21	jmp $2192		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.181e					BinaryPrecedence:
>181e	02					.byte	 2	; $ef =
>181f	02					.byte	 2	; $f0 <>
>1820	02					.byte	 2	; $f1 <=
>1821	02					.byte	 2	; $f2 <
>1822	02					.byte	 2	; $f3 >=
>1823	02					.byte	 2	; $f4 >
>1824	01					.byte	 1	; $f5 XOR
>1825	01					.byte	 1	; $f6 OR
>1826	01					.byte	 1	; $f7 AND
>1827	04					.byte	 4	; $f8 DIV
>1828	04					.byte	 4	; $f9 MOD
>1829	04					.byte	 4	; $fa <<
>182a	04					.byte	 4	; $fb >>
>182b	04					.byte	 4	; $fc /
>182c	04					.byte	 4	; $fd *
>182d	03					.byte	 3	; $fe -
>182e	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.182f					StructureOffsets:
>182f	01					.byte	1  	; $80 REPEAT
>1830	ff					.byte	255	; $81 UNTIL
>1831	01					.byte	1  	; $82 WHILE
>1832	ff					.byte	255	; $83 WEND
>1833	01					.byte	1  	; $84 IF
>1834	ff					.byte	255	; $85 ENDIF
>1835	01					.byte	1  	; $86 DO
>1836	ff					.byte	255	; $87 LOOP
>1837	01					.byte	1  	; $88 PROC
>1838	ff					.byte	255	; $89 ENDPROC
>1839	01					.byte	1  	; $8a FOR
>183a	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.183b					StandardTokens:
>183b	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1842	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1848	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>184e	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1853	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1856	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>185c	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>185f	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1864	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1869	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1871	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1875	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>187a	00					.byte	$00                                     	; $8c [[end]]
>187b	00					.byte	$00                                     	; $8d [[shift]]
>187c	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1881	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1886	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1889	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>188e	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1892	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1898	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>189e	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>18a3	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>18a7	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>18ab	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>18b0	01 2c					.byte	$01,$2c                                 	; $99 ,
>18b2	01 3b					.byte	$01,$3b                                 	; $9a ;
>18b4	01 3a					.byte	$01,$3a                                 	; $9b :
>18b6	01 27					.byte	$01,$27                                 	; $9c '
>18b8	01 29					.byte	$01,$29                                 	; $9d )
>18ba	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>18be	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>18c4	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>18c8	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>18cc	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>18d1	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>18d5	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>18dc	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>18e1	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>18e6	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>18eb	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>18f0	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>18f5	00					.byte	0											; $aa
>18f6	00					.byte	0											; $ab
>18f7	00					.byte	0											; $ac
>18f8	00					.byte	0											; $ad
>18f9	00					.byte	0											; $ae
>18fa	00					.byte	0											; $af
>18fb	00					.byte	0											; $b0
>18fc	00					.byte	0											; $b1
>18fd	00					.byte	0											; $b2
>18fe	00					.byte	0											; $b3
>18ff	00					.byte	0											; $b4
>1900	00					.byte	0											; $b5
>1901	00					.byte	0											; $b6
>1902	00					.byte	0											; $b7
>1903	00					.byte	0											; $b8
>1904	00					.byte	0											; $b9
>1905	00					.byte	0											; $ba
>1906	00					.byte	0											; $bb
>1907	00					.byte	0											; $bc
>1908	00					.byte	0											; $bd
>1909	00					.byte	0											; $be
>190a	00					.byte	0											; $bf
>190b	00					.byte	0											; $c0
>190c	00					.byte	0											; $c1
>190d	00					.byte	0											; $c2
>190e	00					.byte	0											; $c3
>190f	00					.byte	0											; $c4
>1910	00					.byte	0											; $c5
>1911	00					.byte	0											; $c6
>1912	00					.byte	0											; $c7
>1913	00					.byte	0											; $c8
>1914	00					.byte	0											; $c9
>1915	00					.byte	0											; $ca
>1916	00					.byte	0											; $cb
>1917	00					.byte	0											; $cc
>1918	00					.byte	0											; $cd
>1919	00					.byte	0											; $ce
>191a	00					.byte	0											; $cf
>191b	00					.byte	0											; $d0
>191c	00					.byte	0											; $d1
>191d	00					.byte	0											; $d2
>191e	00					.byte	0											; $d3
>191f	00					.byte	0											; $d4
>1920	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1926	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>192c	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1934	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>193b	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1941	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1947	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>194c	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1951	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1956	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>195b	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1960	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1966	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>196b	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1973	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>197a	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>197f	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1984	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>198a	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>198f	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1995	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>199a	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>19a0	01 28					.byte	$01,$28                                 	; $eb (
>19a2	01 24					.byte	$01,$24                                 	; $ec $
>19a4	00					.byte	$00                                     	; $ed [[decimal]]
>19a5	00					.byte	$00                                     	; $ee [[string]]
>19a6	01 3d					.byte	$01,$3d                                 	; $ef =
>19a8	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>19ab	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>19ae	01 3c					.byte	$01,$3c                                 	; $f2 <
>19b0	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>19b3	01 3e					.byte	$01,$3e                                 	; $f4 >
>19b5	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>19b9	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>19bc	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>19c0	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>19c4	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>19c8	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>19cb	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>19ce	01 2f					.byte	$01,$2f                                 	; $fc /
>19d0	01 2a					.byte	$01,$2a                                 	; $fd *
>19d2	01 2d					.byte	$01,$2d                                 	; $fe -
>19d4	01 2b					.byte	$01,$2b                                 	; $ff +
>19d6	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.19d7					VectorTable:
>19d7	ce 20					.word	Command_REPEAT           ; $80 REPEAT
>19d9	d7 20					.word	Command_UNTIL            ; $81 UNTIL
>19db	47 21					.word	Command_WHILE            ; $82 WHILE
>19dd	66 21					.word	Command_WEND             ; $83 WEND
>19df	a6 20					.word	IfCommand                ; $84 IF
>19e1	cd 20					.word	EndIf                    ; $85 ENDIF
>19e3	a0 1f					.word	Command_DO               ; $86 DO
>19e5	b8 1f					.word	Command_LOOP             ; $87 LOOP
>19e7	f4 12					.word	NoExec08                 ; $88 PROC
>19e9	9e 2c					.word	NotImplemented           ; $89 ENDPROC
>19eb	c1 1f					.word	Command_FOR              ; $8a FOR
>19ed	31 20					.word	Command_NEXT             ; $8b NEXT
>19ef	ad 12					.word	RUNEndOfLine             ; $8c [[END]]
>19f1	eb 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>19f3	c6 20					.word	ElseCode                 ; $8e ELSE
>19f5	f4 12					.word	NoExec01                 ; $8f THEN
>19f7	f4 12					.word	NoExec02                 ; $90 TO
>19f9	f4 12					.word	NoExec03                 ; $91 STEP
>19fb	13 12					.word	CommandLET               ; $92 LET
>19fd	ae 11					.word	Command_Print            ; $93 PRINT
>19ff	9e 2c					.word	NotImplemented           ; $94 INPUT
>1a01	9e 2c					.word	NotImplemented           ; $95 CALL
>1a03	9e 2c					.word	NotImplemented           ; $96 SYS
>1a05	94 12					.word	Command_REM              ; $97 REM
>1a07	a9 1f					.word	Command_EXIT             ; $98 EXIT
>1a09	f4 12					.word	NoExec04                 ; $99 ,
>1a0b	f4 12					.word	NoExec05                 ; $9a ;
>1a0d	f4 12					.word	NoExec06                 ; $9b :
>1a0f	94 12					.word	Command_REM2             ; $9c '
>1a11	f4 12					.word	NoExec07                 ; $9d )
>1a13	68 10					.word	CommandDIM               ; $9e DIM
>1a15	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1a17	8b 12					.word	Command_NEW              ; $a0 NEW
>1a19	a1 12					.word	Command_RUN              ; $a1 RUN
>1a1b	f1 12					.word	Command_STOP             ; $a2 STOP
>1a1d	ee 12					.word	Command_END              ; $a3 END
>1a1f	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1a21	9e 2c					.word	NotImplemented           ; $a5 LIST
>1a23	9e 2c					.word	NotImplemented           ; $a6 SAVE
>1a25	9e 2c					.word	NotImplemented           ; $a7 LOAD
>1a27	87 11					.word	Command_Poke             ; $a8 POKE
>1a29	84 11					.word	Command_Doke             ; $a9 DOKE
>1a2b	9e 2c					.word	NotImplemented           ; $aa
>1a2d	9e 2c					.word	NotImplemented           ; $ab
>1a2f	9e 2c					.word	NotImplemented           ; $ac
>1a31	9e 2c					.word	NotImplemented           ; $ad
>1a33	9e 2c					.word	NotImplemented           ; $ae
>1a35	9e 2c					.word	NotImplemented           ; $af
>1a37	9e 2c					.word	NotImplemented           ; $b0
>1a39	9e 2c					.word	NotImplemented           ; $b1
>1a3b	9e 2c					.word	NotImplemented           ; $b2
>1a3d	9e 2c					.word	NotImplemented           ; $b3
>1a3f	9e 2c					.word	NotImplemented           ; $b4
>1a41	9e 2c					.word	NotImplemented           ; $b5
>1a43	9e 2c					.word	NotImplemented           ; $b6
>1a45	9e 2c					.word	NotImplemented           ; $b7
>1a47	9e 2c					.word	NotImplemented           ; $b8
>1a49	9e 2c					.word	NotImplemented           ; $b9
>1a4b	9e 2c					.word	NotImplemented           ; $ba
>1a4d	9e 2c					.word	NotImplemented           ; $bb
>1a4f	9e 2c					.word	NotImplemented           ; $bc
>1a51	9e 2c					.word	NotImplemented           ; $bd
>1a53	9e 2c					.word	NotImplemented           ; $be
>1a55	9e 2c					.word	NotImplemented           ; $bf
>1a57	9e 2c					.word	NotImplemented           ; $c0
>1a59	9e 2c					.word	NotImplemented           ; $c1
>1a5b	9e 2c					.word	NotImplemented           ; $c2
>1a5d	9e 2c					.word	NotImplemented           ; $c3
>1a5f	9e 2c					.word	NotImplemented           ; $c4
>1a61	9e 2c					.word	NotImplemented           ; $c5
>1a63	9e 2c					.word	NotImplemented           ; $c6
>1a65	9e 2c					.word	NotImplemented           ; $c7
>1a67	9e 2c					.word	NotImplemented           ; $c8
>1a69	9e 2c					.word	NotImplemented           ; $c9
>1a6b	9e 2c					.word	NotImplemented           ; $ca
>1a6d	9e 2c					.word	NotImplemented           ; $cb
>1a6f	9e 2c					.word	NotImplemented           ; $cc
>1a71	9e 2c					.word	NotImplemented           ; $cd
>1a73	9e 2c					.word	NotImplemented           ; $ce
>1a75	9e 2c					.word	NotImplemented           ; $cf
>1a77	9e 2c					.word	NotImplemented           ; $d0
>1a79	9e 2c					.word	NotImplemented           ; $d1
>1a7b	9e 2c					.word	NotImplemented           ; $d2
>1a7d	9e 2c					.word	NotImplemented           ; $d3
>1a7f	9e 2c					.word	NotImplemented           ; $d4
>1a81	57 16					.word	EXPUnaryDeek             ; $d5 DEEK(
>1a83	49 16					.word	EXPUnaryPeek             ; $d6 PEEK(
>1a85	84 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a87	77 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a89	9e 17					.word	EXPUnaryMid              ; $d9 MID$(
>1a8b	35 17					.word	EXPUnaryStr              ; $da STR$(
>1a8d	00 18					.word	EXPUnaryVal              ; $db VAL(
>1a8f	02 17					.word	EXPUnarySgn              ; $dc SGN(
>1a91	c7 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a93	87 16					.word	EXPUnaryLen              ; $de LEN(
>1a95	18 17					.word	EXPUnarySqr              ; $df SQR(
>1a97	e7 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a99	d1 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a9b	9e 2c					.word	NotImplemented           ; $e2 INKEY$(
>1a9d	9e 2c					.word	NotImplemented           ; $e3 EVENT(
>1a9f	9e 2c					.word	NotImplemented           ; $e4 TIME
>1aa1	7d 16					.word	EXPUnaryInt              ; $e5 INT(
>1aa3	73 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1aa5	f8 15					.word	EXPUnaryDec              ; $e7 DEC(
>1aa7	27 17					.word	EXPUnaryHex              ; $e8 HEX$(
>1aa9	9c 16					.word	EXPUnaryRnd              ; $e9 RND(
>1aab	ac 16					.word	ExpUnaryRand             ; $ea RAND(
>1aad	95 16					.word	EXPUnaryParenthesis      ; $eb (
>1aaf	6f 16					.word	EXPUnaryNull             ; $ec $
>1ab1	46 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1ab3	5c 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1ab5	b1 13					.word	EXPCompareEqual          ; $ef =
>1ab7	cc 13					.word	EXPCompareNotEqual       ; $f0 <>
>1ab9	d5 13					.word	EXPCompareLessEqual      ; $f1 <=
>1abb	ba 13					.word	EXPCompareLess           ; $f2 <
>1abd	de 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1abf	c3 13					.word	EXPCompareGreater        ; $f4 >
>1ac1	5e 13					.word	EXPBinXor                ; $f5 XOR
>1ac3	52 13					.word	EXPBinOr                 ; $f6 OR
>1ac5	46 13					.word	EXPBinAnd                ; $f7 AND
>1ac7	1e 13					.word	EXPBinIDiv               ; $f8 DIV
>1ac9	2f 13					.word	EXPBinIMod               ; $f9 MOD
>1acb	29 14					.word	EXPBinLeft               ; $fa <<
>1acd	31 14					.word	EXPBinRight              ; $fb >>
>1acf	12 13					.word	EXPBinFDiv               ; $fc /
>1ad1	09 13					.word	EXPBinMul                ; $fd *
>1ad3	00 13					.word	EXPBinSub                ; $fe -
>1ad5	f7 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1ad7					TOKDetokenise:
.1ad7	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1ad9	84 23		sty $23				sty 	zTemp2+1
.1adb	9c 44 03	stz $0344			stz		TOKLastCharacter 			; clear last character
.1ade					_TOKDLoop:
.1ade	20 0d 1b	jsr $1b0d			jsr 	TOKDGet 					; get next
.1ae1	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1ae3	f0 26		beq $1b0b			beq 	_TOKDExit
.1ae5	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1ae7	f0 1d		beq $1b06			beq 	_TOKDDataItem
.1ae9	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1aeb	f0 19		beq $1b06			beq 	_TOKDDataItem
.1aed	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1aef	10 05		bpl $1af6			bpl 	_TOKDNotToken
.1af1	20 d5 1b	jsr $1bd5			jsr 	TOKDToken 					; token to text.
.1af4	80 e8		bra $1ade			bra 	_TOKDLoop
.1af6					_TOKDNotToken:
.1af6	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1af8	90 05		bcc $1aff			bcc 	_TOKDNotIdentifier
.1afa	20 48 1b	jsr $1b48			jsr 	TOKDIdentifier
.1afd	80 df		bra $1ade			bra 	_TOKDLoop
.1aff					_TOKDNotIdentifier:
.1aff	a0 0a		ldy #$0a			ldy 	#10
.1b01	20 91 1b	jsr $1b91			jsr 	TOKDInteger
.1b04	80 d8		bra $1ade			bra 	_TOKDLoop
.1b06					_TOKDDataItem:
.1b06	20 23 1b	jsr $1b23			jsr 	TOKDDataItem
.1b09	80 d3		bra $1ade			bra 	_TOKDLoop
.1b0b					_TOKDExit:
.1b0b	18		clc				clc
.1b0c	60		rts				rts
.1b0d	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1b0f	e6 22		inc $22				inc 	zTemp2
.1b11	d0 02		bne $1b15			bne 	_TKDGExit
.1b13	e6 23		inc $23				inc 	zTemp2+1
.1b15					_TKDGExit:
.1b15	60		rts				rts
.1b16					TOKDOutput:
.1b16	8d 44 03	sta $0344			sta 	TOKLastCharacter
.1b19	6c 42 03	jmp ($0342)			jmp 	(TOKOutputMethod)
.1b1c					TOKSetDetokeniseOutput:
.1b1c	8e 42 03	stx $0342			stx 	TOKOutputMethod
.1b1f	8c 43 03	sty $0343			sty 	TOKOutputMethod+1
.1b22	60		rts				rts
.0342					TOKOutputMethod:
>0342							.fill 	2
.0344					TOKLastCharacter:
>0344							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1b23					TOKDDataItem:
.1b23	a8		tay				tay 								; type in Y
.1b24	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1b26	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1b28	f0 02		beq $1b2c			beq 	_TOKDDIsString
.1b2a	a9 2e		lda #$2e			lda 	#'.'
.1b2c					_TOKDDIsString:
.1b2c	20 16 1b	jsr $1b16			jsr 	TOKDOutput 					; dump it
.1b2f	20 0d 1b	jsr $1b0d			jsr 	TOKDGet 					; get length into X
.1b32	aa		tax				tax
.1b33					_TOKDDOutput:
.1b33	ca		dex				dex 								; are we complete
.1b34	30 08		bmi $1b3e			bmi 	_TOKDDEnd
.1b36	20 0d 1b	jsr $1b0d			jsr 	TOKDGet 					; get character and output it
.1b39	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1b3c	80 f5		bra $1b33			bra 	_TOKDDOutput
.1b3e					_TOKDDEnd:
.1b3e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1b40	d0 05		bne $1b47			bne 	_TOKDDNotString
.1b42	a9 22		lda #$22			lda 	#'"'
.1b44	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1b47					_TOKDDNotString:
.1b47	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1b48					TOKDIdentifier:
.1b48	a0 ff		ldy #$ff			ldy 	#$FF
.1b4a	8c 45 03	sty $0345			sty 	TOKDIFirstChar
.1b4d					_TOKDLoop:
.1b4d	a8		tay				tay 								; token in Y
.1b4e	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b50	c0 64		cpy #$64			cpy 	#$64
.1b52	f0 11		beq $1b65			beq 	_TOKDIOutput
.1b54	a9 5f		lda #$5f			lda 	#'_'
.1b56	c0 65		cpy #$65			cpy 	#$65
.1b58	f0 0b		beq $1b65			beq 	_TOKDIOutput
.1b5a	98		tya				tya 								; handle a-z
.1b5b	18		clc				clc
.1b5c	69 21		adc #$21			adc	 	#$21
.1b5e	c0 5a		cpy #$5a			cpy 	#$5A
.1b60	90 03		bcc $1b65			bcc 	_TOKDIOutput
.1b62	38		sec				sec 								; handle 0-9
.1b63	e9 4b		sbc #$4b			sbc 	#$4B
.1b65					_TOKDIOutput:
.1b65	2c 45 03	bit $0345			bit 	TOKDIFirstChar
.1b68	10 08		bpl $1b72			bpl 	_TOKDINoSpacing
.1b6a	48		pha				pha
.1b6b	20 07 1c	jsr $1c07			jsr 	TOKDSpacing
.1b6e	9c 45 03	stz $0345			stz 	TOKDIFirstChar
.1b71	68		pla				pla
.1b72					_TOKDINoSpacing:
.1b72	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1b75	20 0d 1b	jsr $1b0d			jsr 	TOKDGet 					; get next token
.1b78	c9 7c		cmp #$7c			cmp 	#$7C
.1b7a	90 d1		bcc $1b4d			bcc 	_TOKDLoop
.1b7c	f0 12		beq $1b90			beq 	_TOKDIExit 					; it's a number, no tail.
.1b7e	4a		lsr a				lsr 	a 							; string ?
.1b7f	90 07		bcc $1b88			bcc 	_TOKDICheckArray
.1b81	48		pha				pha
.1b82	a9 24		lda #$24			lda 	#"$"
.1b84	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1b87	68		pla				pla
.1b88					_TOKDICheckArray:
.1b88	4a		lsr a				lsr 	a 							; array ?
.1b89	90 05		bcc $1b90			bcc 	_TOKDIExit
.1b8b	a9 28		lda #$28			lda 	#"("
.1b8d	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1b90					_TOKDIExit:
.1b90	60		rts				rts
.0345					TOKDIFirstChar:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b91					TOKDInteger:
.1b91	5a		phy				phy 								; save base
.1b92	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b94	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.1b97					_TOKDILoop:
.1b97	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b99	c9 40		cmp #$40			cmp 	#$40
.1b9b	b0 1d		bcs $1bba			bcs 	_TOKDIHaveInteger
.1b9d	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b9f	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1ba2	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1ba5	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1ba8	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1bab	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1bae	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1bb1	20 0d 1b	jsr $1b0d			jsr 	TOKDGet 					; OR byte in.
.1bb4	05 0c		ora $0c				ora 	IFR0+IM0
.1bb6	85 0c		sta $0c				sta 	IFR0+IM0
.1bb8	80 dd		bra $1b97			bra 	_TOKDILoop
.1bba					_TOKDIHaveInteger:
.1bba	7a		ply				ply 								; restore base
.1bbb	98		tya				tya 								; base in A
.1bbc	20 61 29	jsr $2961			jsr 	IFloatIntegerToStringR0
.1bbf	86 1e		stx $1e				stx 	zTemp0
.1bc1	84 1f		sty $1f				sty 	zTemp0+1
.1bc3	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bc5	20 07 1c	jsr $1c07			jsr 	TOKDSpacing 				; check spacing okay.
.1bc8	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1bca					_TOKDOutput:
.1bca	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1bcc	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1bcf	c8		iny				iny
.1bd0	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1bd2	d0 f6		bne $1bca			bne 	_TOKDOutput
.1bd4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1bd5					TOKDToken:
.1bd5	a2 3b		ldx #$3b			ldx 	#StandardTokens & $FF
.1bd7	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1bd9					_TOKDSearch:
.1bd9	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1bdb	84 1f		sty $1f				sty 	zTemp0+1
.1bdd	aa		tax				tax 								; token ID in X.
.1bde					_TOKDFind:
.1bde	ca		dex				dex 								; reached the start
.1bdf	10 0d		bpl $1bee			bpl 	_TOKDFound
.1be1	38		sec				sec 								; go to next entry
.1be2	b2 1e		lda ($1e)			lda 	(zTemp0)
.1be4	65 1e		adc $1e				adc 	zTemp0
.1be6	85 1e		sta $1e				sta 	zTemp0
.1be8	90 f4		bcc $1bde			bcc 	_TOKDFind
.1bea	e6 1f		inc $1f				inc 	zTemp0+1
.1bec	80 f0		bra $1bde			bra 	_TOKDFind
.1bee					_TOKDFound:
.1bee	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1bf0	f0 14		beq $1c06			beq 	_TOKDExit
.1bf2	aa		tax				tax
.1bf3	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1bf5	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1bf7	20 07 1c	jsr $1c07			jsr 	TOKDSpacing
.1bfa					_TOKDOutput:
.1bfa	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1bfc	20 5b 1f	jsr $1f5b			jsr 	TOKToLower
.1bff	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1c02	c8		iny				iny
.1c03	ca		dex				dex
.1c04	d0 f4		bne $1bfa			bne 	_TOKDOutput
.1c06					_TOKDExit:
.1c06	60		rts				rts
.1c07					TOKDSpacing:
.1c07	20 72 1f	jsr $1f72			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1c0a	90 0d		bcc $1c19			bcc 	_TOKDSExit
.1c0c	ad 44 03	lda $0344			lda 	TOKLastCharacter			; and last character also alphanumeric
.1c0f	20 72 1f	jsr $1f72			jsr 	TOKIsIdentifierElement
.1c12	90 05		bcc $1c19			bcc 	_TOKDSExit
.1c14	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1c16	20 16 1b	jsr $1b16			jsr 	TOKDOutput
.1c19					_TOKDSExit:
.1c19	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1c1a					PGMDeleteLine:
.1c1a	20 cd 1c	jsr $1ccd			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c1d	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c1f	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c22	85 21		sta $21				sta 	zTemp1+1
.1c24					_PGMDLoop:
.1c24	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1c26	38		sec				sec
.1c27	f0 3a		beq $1c63			beq 	_PGMDExit
.1c29	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1c2b	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c2d	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c30	d0 08		bne $1c3a			bne 	_PGMDNext
.1c32	c8		iny				iny
.1c33	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c35	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1c38	f0 0d		beq $1c47			beq 	_PGMDDelete
.1c3a					_PGMDNext:
.1c3a	18		clc				clc
.1c3b	b2 20		lda ($20)			lda 	(zTemp1)
.1c3d	65 20		adc $20				adc 	zTemp1
.1c3f	85 20		sta $20				sta 	zTemp1
.1c41	90 e1		bcc $1c24			bcc 	_PGMDLoop
.1c43	e6 21		inc $21				inc 	zTemp1+1
.1c45	80 dd		bra $1c24			bra 	_PGMDLoop
.1c47					_PGMDDelete:
.1c47	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1c49	a8		tay				tay
.1c4a					_PGMDCopy:
.1c4a	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1c4c	92 20		sta ($20)			sta 	(zTemp1)
.1c4e	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1c50	c5 1e		cmp $1e				cmp 	zTemp0
.1c52	d0 07		bne $1c5b			bne 	_PGMDNext2
.1c54	a5 21		lda $21				lda 	zTemp1+1
.1c56	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c58	18		clc				clc
.1c59	f0 08		beq $1c63			beq 	_PGMDExit
.1c5b					_PGMDNext2:
.1c5b	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c5d	d0 eb		bne $1c4a			bne 	_PGMDCopy
.1c5f	e6 21		inc $21				inc 	zTemp1+1
.1c61	80 e7		bra $1c4a			bra 	_PGMDCopy
.1c63					_PGMDExit:
.1c63	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c64					PGMInsertLine:
.1c64	20 cd 1c	jsr $1ccd			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c67	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c69	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c6c	85 21		sta $21				sta 	zTemp1+1
.1c6e					_PGMILoop:
.1c6e	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c70	f0 1c		beq $1c8e			beq 	_PGMIInsert
.1c72	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c74	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c76	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c79	c8		iny				iny
.1c7a	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c7c	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c7f	b0 0d		bcs $1c8e			bcs 	_PGMIInsert 				; insert here.
.1c81	18		clc				clc
.1c82	b2 20		lda ($20)			lda 	(zTemp1)
.1c84	65 20		adc $20				adc 	zTemp1
.1c86	85 20		sta $20				sta 	zTemp1
.1c88	90 e4		bcc $1c6e			bcc 	_PGMILoop
.1c8a	e6 21		inc $21				inc 	zTemp1+1
.1c8c	80 e0		bra $1c6e			bra 	_PGMILoop
.1c8e					_PGMIInsert:
.1c8e	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c91					_PGMIInsertLoop:
.1c91	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c93	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c95	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c97	c5 1e		cmp $1e				cmp 	zTemp0
.1c99	d0 06		bne $1ca1			bne 	_PGMINext
.1c9b	a5 21		lda $21				lda 	zTemp1+1
.1c9d	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c9f	f0 0a		beq $1cab			beq 	_PGMIInserted
.1ca1					_PGMINext:
.1ca1	a5 1e		lda $1e				lda 	zTemp0
.1ca3	d0 02		bne $1ca7			bne 	_PGMINoBorrow
.1ca5	c6 1f		dec $1f				dec 	zTemp0+1
.1ca7					_PGMINoBorrow:
.1ca7	c6 1e		dec $1e				dec 	zTemp0
.1ca9	80 e6		bra $1c91			bra 	_PGMIInsertLoop
.1cab					_PGMIInserted:
.1cab	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1cad					_PGMICopyLoop:
.1cad	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1cb0	91 20		sta ($20),y			sta 	(zTemp1),y
.1cb2	c8		iny				iny
.1cb3	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1cb6	d0 f5		bne $1cad			bne 	_PGMICopyLoop
.1cb8	18		clc				clc
.1cb9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1cba					PGMSetBaseAddress:
.1cba	8e 46 03	stx $0346			stx 	PGMBaseHigh
.1cbd	8c 47 03	sty $0347			sty 	PGMEndMemoryHigh
.1cc0	60		rts				rts
.1cc1					PGMNewProgram:
.1cc1	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1cc3	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1cc6	85 1f		sta $1f				sta 	zTemp0+1
.1cc8	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1cca	92 1e		sta ($1e)			sta 	(zTemp0)
.1ccc	60		rts				rts
.1ccd					PGMEndProgram:
.1ccd	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1ccf	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1cd2	85 1f		sta $1f				sta 	zTemp0+1
.1cd4					_PGMEPLoop:
.1cd4	b2 1e		lda ($1e)			lda 	(zTemp0)
.1cd6	f0 0b		beq $1ce3			beq 	_PGMEPExit
.1cd8	18		clc				clc
.1cd9	65 1e		adc $1e				adc 	zTemp0
.1cdb	85 1e		sta $1e				sta 	zTemp0
.1cdd	90 f5		bcc $1cd4			bcc 	_PGMEPLoop
.1cdf	e6 1f		inc $1f				inc 	zTemp0+1
.1ce1	80 f1		bra $1cd4			bra 	_PGMEPLoop
.1ce3					_PGMEPExit:
.1ce3	60		rts				rts
.0346					PGMBaseHigh:
>0346							.fill 	1
.0347					PGMEndMemoryHigh:
>0347							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1ce4					TOKResetElement:
.1ce4	9c 48 03	stz $0348			stz 	TOKElement
.1ce7	60		rts				rts
.1ce8					TOKWriteElement:
.1ce8	da		phx				phx
.1ce9	ae 48 03	ldx $0348			ldx 	TOKElement
.1cec	9d 49 03	sta $0349,x			sta 	TOKElementText,x
.1cef	9e 4a 03	stz $034a,x			stz 	TOKElementText+1,x
.1cf2	fa		plx				plx
.1cf3	ee 48 03	inc $0348			inc 	TOKElement
.1cf6	60		rts				rts
.0348					TOKElement:
>0348							.fill 	1
.0349					TOKElementText:
>0349							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1cf7					TOKTokeniseConstant:
.1cf7	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1cf9	48		pha				pha 								; save on stack
.1cfa	29 c0		and #$c0			and 	#$C0
.1cfc	05 0d		ora $0d				ora 	IFR0+IM1
.1cfe	05 0e		ora $0e				ora 	IFR0+IM2
.1d00	f0 10		beq $1d12			beq 	_TTCLess
.1d02	da		phx				phx
.1d03	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1d05					_TTCShiftRight:
.1d05	46 0e		lsr $0e				lsr 	IFR0+IM2
.1d07	66 0d		ror $0d				ror 	IFR0+IM1
.1d09	66 0c		ror $0c				ror 	IFR0+IM0
.1d0b	ca		dex				dex
.1d0c	d0 f7		bne $1d05			bne 	_TTCShiftRight
.1d0e	fa		plx				plx
.1d0f	20 f7 1c	jsr $1cf7			jsr 	TOKTokeniseConstant
.1d12					_TTCLess:
.1d12	68		pla				pla
.1d13	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1d15	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1d18	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1d19					TOKTokeniseDecimals:
.1d19	20 be 1d	jsr $1dbe			jsr 	TOKGetNext 					; consume the .
.1d1c	20 e8 1e	jsr $1ee8			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1d1f	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1d21	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1d24	20 29 1d	jsr $1d29			jsr 	TOKOutputElementBuffer 		; then the buffer
.1d27	18		clc				clc
.1d28	60		rts				rts
.1d29					TOKOutputElementBuffer:
.1d29	ad 48 03	lda $0348			lda 	TOKElement 					; get count and write that
.1d2c	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1d2f	a8		tay				tay 								; put in Y
.1d30	f0 0c		beq $1d3e			beq 	_TOEExit 					; exit if empty which is okay.
.1d32	a2 01		ldx #$01			ldx 	#1
.1d34					_TOELoop:
.1d34	bd 48 03	lda $0348,x			lda 	TOKElement,x
.1d37	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1d3a	e8		inx				inx
.1d3b	88		dey				dey
.1d3c	d0 f6		bne $1d34			bne 	_TOELoop
.1d3e					_TOEExit:
.1d3e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1d3f					TOKTokenise:
.1d3f	8c 49 04	sty $0449			sty 	TOKDataSource+1 			; save source routine pointer
.1d42	8e 48 04	stx $0448			stx 	TOKDataSource
.1d45	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1d47	8d 4a 04	sta $044a			sta 	TOKIsFirstElement
.1d4a	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1d4c	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1d4f					_TOKMainLoop:
.1d4f	20 ba 1d	jsr $1dba			jsr 	TOKGet 						; what follows.
.1d52	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d54	f0 4f		beq $1da5			beq 	_TOKExit
.1d56	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d58	d0 05		bne $1d5f			bne 	_TOKElement
.1d5a	20 be 1d	jsr $1dbe			jsr 	TOKGetNext
.1d5d	80 f0		bra $1d4f			bra 	_TOKMainLoop
.1d5f					_TOKElement:
.1d5f	20 66 1f	jsr $1f66			jsr 	TOKIsDigit 					; is it 0..9
.1d62	90 0a		bcc $1d6e			bcc 	_TOKNotDigit
.1d64	20 bf 1e	jsr $1ebf			jsr 	TOKTokeniseInteger 			; get integer
.1d67	b0 43		bcs $1dac			bcs 	_TOKFail 					; did it fail ?
.1d69	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d6c	80 e1		bra $1d4f			bra 	_TOKMainLoop
.1d6e					_TOKNotDigit:
.1d6e	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d71	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d73	d0 07		bne $1d7c			bne 	_TOKNotHex
.1d75	20 07 1e	jsr $1e07			jsr 	TOKTokeniseHexadecimal
.1d78	b0 32		bcs $1dac			bcs 	_TOKFail
.1d7a	80 d3		bra $1d4f			bra 	_TOKMainLoop
.1d7c					_TOKNotHex:
.1d7c	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d7e	d0 07		bne $1d87			bne 	_TOKNotDecimal
.1d80	20 19 1d	jsr $1d19			jsr 	TOKTokeniseDecimals
.1d83	b0 27		bcs $1dac			bcs 	_TOKFail
.1d85	80 c8		bra $1d4f			bra 	_TOKMainLoop
.1d87					_TOKNotDecimal:
.1d87	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d89	d0 07		bne $1d92			bne 	_TOKNotString
.1d8b	20 2d 1f	jsr $1f2d			jsr 	TOKTokeniseString
.1d8e	b0 1c		bcs $1dac			bcs 	_TOKFail
.1d90	80 bd		bra $1d4f			bra 	_TOKMainLoop
.1d92					_TOKNotString:
.1d92	20 83 1f	jsr $1f83			jsr 	TOKIsAlpha 					; identifier ?
.1d95	b0 07		bcs $1d9e			bcs 	_TOKIdentifier
.1d97	20 fc 1e	jsr $1efc			jsr 	TOKTokenisePunctuation 		; punctuation
.1d9a	b0 10		bcs $1dac			bcs 	_TOKFail
.1d9c	80 b1		bra $1d4f			bra 	_TOKMainLoop
.1d9e					_TOKIdentifier:
.1d9e	20 41 1e	jsr $1e41			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1da1	b0 09		bcs $1dac			bcs 	_TOKFail
.1da3	80 aa		bra $1d4f			bra 	_TOKMainLoop
.1da5					_TOKExit:
.1da5	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1da7	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1daa	18		clc				clc									; return with carry set.
.1dab	60		rts				rts
.1dac					_TOKFail:
.1dac	38		sec				sec
.1dad	60		rts				rts
.1dae					TOKWriteA:
.1dae	da		phx				phx
.1daf	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1db2	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1db5	fa		plx				plx
.1db6	ee 37 02	inc $0237			inc 	TOKLineSize
.1db9	60		rts				rts
.1dba					TOKGet:
.1dba	18		clc				clc
.1dbb	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.1dbe					TOKGetNext:
.1dbe	38		sec				sec
.1dbf	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.0448					TOKDataSource:
>0448							.fill 	2
.044a					TOKIsFirstElement:
>044a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1dc2					TOKFindToken:
.1dc2	a2 3b		ldx #$3b			ldx 	#StandardTokens & $FF 		; do this table
.1dc4	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1dc6	20 d1 1d	jsr $1dd1			jsr 	TOKFindTokenXY 				; find it, or not
.1dc9	90 04		bcc $1dcf			bcc 	_TOKFTFail
.1dcb	a2 00		ldx #$00			ldx 	#0
.1dcd	38		sec				sec
.1dce	60		rts				rts
.1dcf					_TOKFTFail
.1dcf	18		clc				clc
.1dd0	60		rts				rts
.1dd1					TOKFindTokenXY:
.1dd1	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1dd3	84 1f		sty $1f				sty 	zTemp0+1
.1dd5	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1dd7	8d 4b 04	sta $044b			sta 	TOKCurrent
.1dda					_TOKFindLoop:
.1dda	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1ddc	18		clc				clc 		 						; clear carry in case of fail
.1ddd	30 17		bmi $1df6			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1ddf	cd 48 03	cmp $0348			cmp 	TOKElement 					; compare against the element length
.1de2	d0 13		bne $1df7			bne 	_TOKNext 					; different, try next.
.1de4	aa		tax				tax 								; number of chars to compare.
.1de5	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1de7					_TOKCompare:
.1de7	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1de9	d9 48 03	cmp $0348,y			cmp 	TOKElementText-1,y
.1dec	d0 09		bne $1df7			bne 	_TOKNext 					; different ? try next
.1dee	c8		iny				iny 								; compare next two
.1def	ca		dex				dex
.1df0	d0 f5		bne $1de7			bne 	_TOKCompare 				; until done X characters.
.1df2	38		sec				sec
.1df3	ad 4b 04	lda $044b			lda 	TOKCurrent 					; return current ID.
.1df6					_TOKExit:
.1df6	60		rts				rts
.1df7					_TOKNext:
.1df7	ee 4b 04	inc $044b			inc 	TOKCurrent 					; increment token #
.1dfa	38		sec				sec 								; add length+1 to ptr
.1dfb	b2 1e		lda ($1e)			lda 	(zTemp0)
.1dfd	65 1e		adc $1e				adc 	zTemp0
.1dff	85 1e		sta $1e				sta 	zTemp0
.1e01	90 d7		bcc $1dda			bcc 	_TOKFindLoop
.1e03	e6 1f		inc $1f				inc 	zTemp0+1
.1e05	80 d3		bra $1dda			bra 	_TOKFindLoop
.044b					TOKCurrent:
>044b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1e07					TOKTokeniseHexadecimal:
.1e07	20 be 1d	jsr $1dbe			jsr 	TOKGetNext 					; consume the $
.1e0a	a2 0c		ldx #$0c			ldx 	#IFR0
.1e0c	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero 				; set R0 = 0
.1e0f					_TTHLoop:
.1e0f	20 ba 1d	jsr $1dba			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e12	20 90 1f	jsr $1f90			jsr 	TOKIsHexadecimal
.1e15	90 20		bcc $1e37			bcc 	_TTHDone
.1e17	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1e19	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1e1c	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1e1f	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1e22	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.1e25	20 be 1d	jsr $1dbe			jsr 	TOKGetNext
.1e28	38		sec				sec 								; convert to decimal.
.1e29	e9 30		sbc #$30			sbc 	#48
.1e2b	c9 0a		cmp #$0a			cmp 	#10
.1e2d	90 02		bcc $1e31			bcc 	_TTHNotAlpha
.1e2f	e9 07		sbc #$07			sbc 	#7
.1e31					_TTHNotAlpha:
.1e31	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1e33	85 0c		sta $0c				sta 	IFR0+IM0
.1e35	80 d8		bra $1e0f			bra 	_TTHLoop
.1e37					_TTHDone:
.1e37	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1e39	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1e3c	20 f7 1c	jsr $1cf7			jsr 	TOKTokeniseConstant 		; write integer out.
.1e3f	18		clc				clc
.1e40	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1e41					TOKTokeniseIdentifier:
.1e41	20 e4 1c	jsr $1ce4			jsr 	TOKResetElement 			; extract an identifier
.1e44					_TOKGetIdentifier:
.1e44	20 ba 1d	jsr $1dba			jsr 	TOKGet
.1e47	20 50 1f	jsr $1f50			jsr 	TOKToUpper
.1e4a	20 72 1f	jsr $1f72			jsr 	TOKIsIdentifierElement
.1e4d	90 08		bcc $1e57			bcc 	_TOKEndIdent
.1e4f	20 e8 1c	jsr $1ce8			jsr		TOKWriteElement
.1e52	20 be 1d	jsr $1dbe			jsr 	TOKGetNext
.1e55	80 ed		bra $1e44			bra 	_TOKGetIdentifier
.1e57					_TOKEndIdent:
.1e57	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e59	d0 06		bne $1e61			bne 	_TOKNotString
.1e5b	20 e8 1c	jsr $1ce8			jsr 	TOKWriteElement 			; add it
.1e5e	20 be 1d	jsr $1dbe			jsr 	TOKGetNext 					; consume it
.1e61					_TOKNotString:
.1e61	20 ba 1d	jsr $1dba			jsr 	TOKGet 						; finally check for (
.1e64	c9 28		cmp #$28			cmp 	#"("
.1e66	d0 06		bne $1e6e			bne 	_TOKNoArray
.1e68	20 e8 1c	jsr $1ce8			jsr 	TOKWriteElement 			; add it
.1e6b	20 be 1d	jsr $1dbe			jsr 	TOKGetNext 					; consume it
.1e6e					_TOKNoArray:
.1e6e	20 c2 1d	jsr $1dc2			jsr 	TOKFindToken 				; find it
.1e71	90 05		bcc $1e78			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e73	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1e76	18		clc				clc
.1e77	60		rts				rts
.1e78					_TOKIsVariable:
.1e78	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e7a					_TOKOutputBuffer:
.1e7a	bd 49 03	lda $0349,x			lda 	TOKElementText,x 			; output it translated.
.1e7d	20 a6 1e	jsr $1ea6			jsr 	TOKTranslateIdentifier
.1e80	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1e83	e8		inx				inx
.1e84	bd 49 03	lda $0349,x			lda 	TOKElementText,x
.1e87	20 72 1f	jsr $1f72			jsr 	TOKIsIdentifierElement
.1e8a	b0 ee		bcs $1e7a			bcs 	_TOKOutputBuffer
.1e8c	a8		tay				tay 								; last char in Y
.1e8d	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e8f	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e91	f0 0e		beq $1ea1			beq 	_TOKIVExit
.1e93	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e95	d0 04		bne $1e9b			bne 	_TOKIVCheckArray 			; no, check for (
.1e97	1a		inc a				inc 	a 							; token is $7D
.1e98	bc 4a 03	ldy $034a,x			ldy 	TOKElementText+1,x 			; get next one.
.1e9b					_TOKIVCheckArray:
.1e9b	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e9d	d0 02		bne $1ea1			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e9f	1a		inc a				inc 	a
.1ea0	1a		inc a				inc 	a
.1ea1					_TOKIVExit:
.1ea1	20 ae 1d	jsr $1dae			jsr 	TOKWriteA 					; ending token
.1ea4	18		clc				clc
.1ea5	60		rts				rts
.1ea6					TOKTranslateIdentifier:
.1ea6	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1ea8	f0 0f		beq $1eb9			beq 	_TTI64
.1eaa	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1eac	f0 0e		beq $1ebc			beq 	_TTI65
.1eae	38		sec				sec
.1eaf	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1eb1	10 03		bpl $1eb6			bpl 	_TTIExit
.1eb3	18		clc				clc 								; map 09 onto 26-35
.1eb4	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1eb6					_TTIExit:
.1eb6	09 40		ora #$40			ora 	#$40 						; correct range.
.1eb8	60		rts				rts
.1eb9	a9 64		lda #$64	_TTI64:	lda 	#$64
.1ebb	60		rts				rts
.1ebc	a9 65		lda #$65	_TTI65:	lda 	#$65
.1ebe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1ebf					TOKTokeniseInteger:
.1ebf	20 e8 1e	jsr $1ee8			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ec2	a2 49		ldx #$49			ldx 	#TOKElementText & $FF
.1ec4	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1ec6	ad 48 03	lda $0348			lda		TOKElement
.1ec9	20 24 2a	jsr $2a24			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1ecc	ad 4a 04	lda $044a			lda 	TOKIsFirstElement 			; first element ?
.1ecf	f0 12		beq $1ee3			beq 	_TOKNotLineNumber
.1ed1	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1ed3	d0 0c		bne $1ee1			bne 	_TOKBadLineNumeber
.1ed5	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1ed7	8d 38 02	sta $0238			sta 	TOKLineNumber
.1eda	a5 0d		lda $0d				lda 	IFR0+IM1
.1edc	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1edf	18		clc				clc
.1ee0	60		rts				rts
.1ee1					_TOKBadLineNumeber:
.1ee1	38		sec				sec
.1ee2	60		rts				rts
.1ee3					_TOKNotLineNumber:
.1ee3	20 f7 1c	jsr $1cf7			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1ee6	18		clc				clc
.1ee7	60		rts				rts
.1ee8					TOKExtractInteger:
.1ee8	20 e4 1c	jsr $1ce4			jsr 	TOKResetElement 			; restart
.1eeb					_TTILoop:
.1eeb	20 ba 1d	jsr $1dba			jsr 	TOKGet 						; keep getting and copying while numeric.
.1eee	20 66 1f	jsr $1f66			jsr 	TOKIsDigit
.1ef1	90 08		bcc $1efb			bcc 	_TOKEIExit
.1ef3	20 e8 1c	jsr $1ce8			jsr 	TOKWriteElement
.1ef6	20 be 1d	jsr $1dbe			jsr 	TOKGetNext
.1ef9	80 f0		bra $1eeb			bra 	_TTILoop
.1efb					_TOKEIExit:
.1efb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1efc					TOKTokenisePunctuation:
.1efc	20 e4 1c	jsr $1ce4			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1eff	20 be 1d	jsr $1dbe			jsr 	TOKGetNext
.1f02	20 e8 1c	jsr $1ce8			jsr 	TOKWriteElement
.1f05	20 ba 1d	jsr $1dba			jsr 	TOKGet 						; what follows ?
.1f08	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1f0a	f0 10		beq $1f1c			beq 	_TTPOne
.1f0c	20 7a 1f	jsr $1f7a			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1f0f	b0 0b		bcs $1f1c			bcs 	_TTPOne 					; these speed things up a bit.
.1f11	20 e8 1c	jsr $1ce8			jsr 	TOKWriteElement 			; this is what we will search for.
.1f14	20 c2 1d	jsr $1dc2			jsr 	TOKFindToken
.1f17	b0 0a		bcs $1f23			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1f19	ce 48 03	dec $0348			dec 	TOKElement 					; make it a single character
.1f1c					_TTPOne:
.1f1c	20 c2 1d	jsr $1dc2			jsr 	TOKFindToken 				; look for one character punctuation
.1f1f	b0 07		bcs $1f28			bcs 	_TTPOutputExit 				; we found it
.1f21	38		sec				sec 								; not recognised.
.1f22	60		rts				rts
.1f23					_TTPConsumeExit:
.1f23	48		pha				pha
.1f24	20 be 1d	jsr $1dbe			jsr 	TOKGetNext 					; get the 2nd char out.
.1f27	68		pla				pla
.1f28					_TTPOutputExit:
.1f28	20 ae 1d	jsr $1dae			jsr  	TOKWriteA 					; write token out
.1f2b	18		clc				clc
.1f2c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1f2d					TOKTokeniseString:
.1f2d	20 be 1d	jsr $1dbe			jsr 	TOKGetNext 					; consume the "
.1f30	20 e4 1c	jsr $1ce4			jsr 	TOKResetElement 			; start getting the string
.1f33					_TOKTSLoop:
.1f33	20 ba 1d	jsr $1dba			jsr 	TOKGet 						; check EOL
.1f36	c9 00		cmp #$00			cmp 	#0
.1f38	f0 0c		beq $1f46			beq 	_TOKTSExit
.1f3a	20 be 1d	jsr $1dbe			jsr 	TOKGetNext 					; get and consume
.1f3d	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1f3f	f0 05		beq $1f46			beq 	_TOKTSExit
.1f41	20 e8 1c	jsr $1ce8			jsr 	TOKWriteElement
.1f44	80 ed		bra $1f33			bra 	_TOKTSLoop
.1f46					_TOKTSExit:
.1f46	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1f48	20 ae 1d	jsr $1dae			jsr 	TOKWriteA
.1f4b	20 29 1d	jsr $1d29			jsr 	TOKOutputElementBuffer
.1f4e	18		clc				clc
.1f4f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f50					TOKToUpper:
.1f50	c9 61		cmp #$61			cmp 	#"a"
.1f52	90 06		bcc $1f5a			bcc 	_TTUNotLower
.1f54	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f56	b0 02		bcs $1f5a			bcs 	_TTUNotLower
.1f58	49 20		eor #$20			eor 	#$20
.1f5a					_TTUNotLower:
.1f5a	60		rts				rts
.1f5b					TOKToLower:
.1f5b	c9 41		cmp #$41			cmp 	#"A"
.1f5d	90 06		bcc $1f65			bcc 	_TTUNotUpper
.1f5f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f61	b0 02		bcs $1f65			bcs 	_TTUNotUpper
.1f63	49 20		eor #$20			eor 	#$20
.1f65					_TTUNotUpper:
.1f65	60		rts				rts
.1f66					TOKIsDigit:
.1f66	c9 30		cmp #$30			cmp 	#"0"
.1f68	90 06		bcc $1f70			bcc 	TOKFail
.1f6a	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f6c	b0 02		bcs $1f70			bcs 	TOKFail
.1f6e					TOKSucceed:
.1f6e	38		sec				sec
.1f6f	60		rts				rts
.1f70					TOKFail:
.1f70	18		clc				clc
.1f71	60		rts				rts
.1f72					TOKIsIdentifierElement:
.1f72	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f74	f0 f8		beq $1f6e			beq 	TOKSucceed
.1f76	c9 5f		cmp #$5f			cmp 	#"_"
.1f78	f0 f4		beq $1f6e			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f7a					TOKIsAlphaNumeric:
.1f7a	20 83 1f	jsr $1f83			jsr 	TOKIsAlpha
.1f7d	b0 ef		bcs $1f6e			bcs 	TOKSucceed
.1f7f	20 66 1f	jsr $1f66			jsr 	TOKIsDigit
.1f82	60		rts				rts
.1f83					TOKIsAlpha:
.1f83	20 50 1f	jsr $1f50			jsr 	TOKToUpper
.1f86	c9 41		cmp #$41			cmp 	#"A"
.1f88	90 e6		bcc $1f70			bcc 	TOKFail
.1f8a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f8c	b0 e2		bcs $1f70			bcs 	TOKFail
.1f8e	80 de		bra $1f6e			bra 	TOKSucceed
.1f90					TOKIsHexadecimal:
.1f90	20 66 1f	jsr $1f66			jsr		TOKIsDigit
.1f93	b0 d9		bcs $1f6e			bcs 	TOKSucceed
.1f95	20 83 1f	jsr $1f83			jsr 	TOKIsAlpha
.1f98	90 d6		bcc $1f70			bcc 	TOKFail
.1f9a	c9 47		cmp #$47			cmp 	#"F"+1
.1f9c	b0 d2		bcs $1f70			bcs 	TOKFail
.1f9e	80 ce		bra $1f6e			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.1fa0					Command_DO:
.1fa0	a9 22		lda #$22			lda 	#STK_DO
.1fa2	20 d8 22	jsr $22d8			jsr 	StackOpen
.1fa5	20 0c 23	jsr $230c			jsr 	STKSaveCodePosition 		; save loop position
.1fa8	60		rts				rts
.1fa9					Command_EXIT:
.1fa9	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.1fab	20 04 23	jsr $2304			jsr 	StackCheckFrame
.1fae	20 f6 22	jsr $22f6			jsr 	StackClose 					; close it
.1fb1	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.1fb3	aa		tax				tax
.1fb4	20 ec 20	jsr $20ec			jsr 	ScanForward
.1fb7	60		rts				rts
.1fb8					Command_LOOP:
.1fb8	a9 22		lda #$22			lda 	#STK_DO
.1fba	20 04 23	jsr $2304			jsr 	StackCheckFrame
.1fbd	20 1e 23	jsr $231e			jsr 	STKLoadCodePosition 		; loop back
.1fc0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.1fc1					Command_FOR:
.1fc1	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.1fc3	20 d8 22	jsr $22d8			jsr 	StackOpen
.1fc6	20 13 12	jsr $1213			jsr 	CommandLET 					; do "I = 1" bit
.1fc9	5a		phy				phy 								; save variable address to +4,+5
.1fca	a0 04		ldy #$04			ldy 	#4
.1fcc	a5 1e		lda $1e				lda 	zTemp0
.1fce	91 26		sta ($26),y			sta 	(basicStack),y
.1fd0	c8		iny				iny
.1fd1	a5 1f		lda $1f				lda 	zTemp0+1
.1fd3	91 26		sta ($26),y			sta 	(basicStack),y
.1fd5	7a		ply				ply
.1fd6	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.1fd8	20 cf 22	jsr $22cf			jsr 	ERRCheckA
.1fdb	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.1fde	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.1fe0	a2 0c		ldx #$0c			ldx 	#IFR0
.1fe2	20 1a 20	jsr $201a			jsr 	CFSaveR0X
.1fe5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; STEP here ?
.1fe7	c9 91		cmp #$91			cmp 	#PR_STEP
.1fe9	d0 06		bne $1ff1			bne 	_CFStep1
.1feb	c8		iny				iny 								; consume step
.1fec	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 				; evaluate STEP
.1fef	80 07		bra $1ff8			bra 	_CFWriteStep
.1ff1					_CFStep1:
.1ff1	a2 0c		ldx #$0c			ldx 	#IFR0 						; default R0, 1
.1ff3	a9 01		lda #$01			lda 	#1
.1ff5	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.1ff8					_CFWriteStep:
.1ff8	a2 0c		ldx #$0c			ldx 	#IFR0 						; Write to additive.
.1ffa	a9 06		lda #$06			lda 	#6
.1ffc	20 1a 20	jsr $201a			jsr 	CFSaveR0X
.1fff	20 0c 23	jsr $230c			jsr 	STKSaveCodePosition 		; save loop position
.2002	60		rts				rts
.2003					CFLoadR0X:
.2003	5a		phy				phy
.2004	a8		tay				tay
.2005	b1 26		lda ($26),y			lda 	(basicStack),y
.2007	95 00		sta $00,x			sta 	IM0,x
.2009	c8		iny				iny
.200a	b1 26		lda ($26),y			lda 	(basicStack),y
.200c	95 01		sta $01,x			sta 	IM1,x
.200e	c8		iny				iny
.200f	b1 26		lda ($26),y			lda 	(basicStack),y
.2011	95 02		sta $02,x			sta 	IM2,x
.2013	c8		iny				iny
.2014	b1 26		lda ($26),y			lda 	(basicStack),y
.2016	95 03		sta $03,x			sta 	IExp,x
.2018	7a		ply				ply
.2019	60		rts				rts
.201a					CFSaveR0X:
.201a	5a		phy				phy
.201b	a8		tay				tay
.201c	b5 00		lda $00,x			lda 	IM0,x
.201e	91 26		sta ($26),y			sta 	(basicStack),y
.2020	c8		iny				iny
.2021	b5 01		lda $01,x			lda 	IM1,x
.2023	91 26		sta ($26),y			sta 	(basicStack),y
.2025	c8		iny				iny
.2026	b5 02		lda $02,x			lda 	IM2,x
.2028	91 26		sta ($26),y			sta 	(basicStack),y
.202a	c8		iny				iny
.202b	b5 03		lda $03,x			lda 	IExp,x
.202d	91 26		sta ($26),y			sta 	(basicStack),y
.202f	7a		ply				ply
.2030	60		rts				rts
.2031					Command_NEXT:
.2031	a9 37		lda #$37			lda 	#STK_FOR
.2033	20 04 23	jsr $2304			jsr 	StackCheckFrame
.2036	20 6b 20	jsr $206b			jsr 	_CNLoadValue 				; load index value to R0.
.2039	a2 10		ldx #$10			ldx 	#IFR1 						; load adding value to R1.
.203b	a9 06		lda #$06			lda 	#6
.203d	20 03 20	jsr $2003			jsr 	CFLoadR0X
.2040	20 b6 25	jsr $25b6			jsr 	IFloatAdd 					; add them together and write back.
.2043	20 8e 20	jsr $208e			jsr 	_CNSaveValue
.2046	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2048	a2 10		ldx #$10			ldx 	#IFR1
.204a	20 03 20	jsr $2003			jsr 	CFLoadR0X
.204d	20 8e 28	jsr $288e			jsr 	IFloatCompare 				; compare terminal vs current
.2050	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2052	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.2055	f0 10		beq $2067			beq 	_CNLoopBack
.2057	a5 0f		lda $0f				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2059	5a		phy				phy
.205a	a0 09		ldy #$09			ldy 	#6+IExp
.205c	51 26		eor ($26),y			eor 	(basicStack),y
.205e	7a		ply				ply
.205f	29 40		and #$40			and 	#IFSign
.2061	f0 04		beq $2067			beq 	_CNLoopBack
.2063	20 f6 22	jsr $22f6			jsr 	StackClose		 			; return
.2066	60		rts				rts
.2067					_CNLoopBack:
.2067	20 1e 23	jsr $231e			jsr 	STKLoadCodePosition 		; loop back
.206a	60		rts				rts
.206b					_CNLoadValue:
.206b	5a		phy				phy
.206c	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.206e	b1 26		lda ($26),y			lda 	(basicStack),y
.2070	85 22		sta $22				sta 	zTemp2
.2072	c8		iny				iny
.2073	b1 26		lda ($26),y			lda 	(basicStack),y
.2075	85 23		sta $23				sta 	zTemp2+1
.2077	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2079	b1 22		lda ($22),y			lda 	(zTemp2),y
.207b	85 0c		sta $0c				sta 	IFR0+IM0
.207d	c8		iny				iny
.207e	b1 22		lda ($22),y			lda 	(zTemp2),y
.2080	85 0d		sta $0d				sta 	IFR0+IM1
.2082	c8		iny				iny
.2083	b1 22		lda ($22),y			lda 	(zTemp2),y
.2085	85 0e		sta $0e				sta 	IFR0+IM2
.2087	c8		iny				iny
.2088	b1 22		lda ($22),y			lda 	(zTemp2),y
.208a	85 0f		sta $0f				sta 	IFR0+IExp
.208c	7a		ply				ply
.208d	60		rts				rts
.208e					_CNSaveValue:
.208e	5a		phy				phy
.208f	a0 00		ldy #$00			ldy 	#0
.2091	a5 0c		lda $0c				lda 	IFR0+IM0
.2093	91 22		sta ($22),y			sta 	(zTemp2),y
.2095	c8		iny				iny
.2096	a5 0d		lda $0d				lda 	IFR0+IM1
.2098	91 22		sta ($22),y			sta 	(zTemp2),y
.209a	c8		iny				iny
.209b	a5 0e		lda $0e				lda 	IFR0+IM2
.209d	91 22		sta ($22),y			sta 	(zTemp2),y
.209f	c8		iny				iny
.20a0	a5 0f		lda $0f				lda 	IFR0+IExp
.20a2	91 22		sta ($22),y			sta 	(zTemp2),y
.20a4	7a		ply				ply
.20a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.20a6					IfCommand:
.20a6	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 				; Get the if test.
.20a9	b1 1c		lda ($1c),y			lda 	(codePtr),y					; what follows ?
.20ab	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.20ad	d0 0a		bne $20b9			bne 	_IfStructured 				; we still support it.
.20af	c8		iny				iny 								; consume THEN
.20b0	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; is it zero
.20b3	f0 01		beq $20b6			beq 	_IfFail 					; if fail, go to next line
.20b5	60		rts				rts 								; if THEN just continue
.20b6					_IfFail:
.20b6	4c ad 12	jmp $12ad			jmp 	RUNEndOfLine
.20b9					_IfStructured:
.20b9	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; is it zero
.20bc	d0 07		bne $20c5			bne 	_IfExit 					; if not, then continue normally.
.20be	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.20c0	a2 85		ldx #$85			ldx 	#PR_ENDIF
.20c2	20 ec 20	jsr $20ec			jsr 	ScanForward 				; and run from there
.20c5					_IfExit:
.20c5	60		rts				rts
.20c6					ElseCode:
.20c6	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.20c8	aa		tax				tax 								; so just go to the structure exit
.20c9	20 ec 20	jsr $20ec			jsr 	ScanForward
.20cc	60		rts				rts
.20cd					EndIf:
.20cd	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.20ce					Command_REPEAT:
.20ce	a9 02		lda #$02			lda 	#STK_REPEAT
.20d0	20 d8 22	jsr $22d8			jsr 	StackOpen
.20d3	20 0c 23	jsr $230c			jsr 	STKSaveCodePosition 		; save loop position
.20d6	60		rts				rts
.20d7					Command_UNTIL:
.20d7	a9 02		lda #$02			lda 	#STK_REPEAT
.20d9	20 04 23	jsr $2304			jsr 	StackCheckFrame
.20dc	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 				; work out the test
.20df	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; check if zero
.20e2	f0 04		beq $20e8			beq 	_CULoopBack 				; if so keep looping
.20e4	20 f6 22	jsr $22f6			jsr 	StackClose		 			; return
.20e7	60		rts				rts
.20e8					_CULoopBack:
.20e8	20 1e 23	jsr $231e			jsr 	STKLoadCodePosition 		; loop back
.20eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scan.asm

.20ec					ScanForward:
.20ec	85 1e		sta $1e				sta 	zTemp0 						; save scan options in zTemp0
.20ee	86 1f		stx $1f				stx 	zTemp0+1
.20f0	64 20		stz $20				stz 	zTemp1 						; clear structure count.
.20f2					_ScanForwardLoop:
.20f2	a5 20		lda $20				lda 	zTemp1 						; if structure count non zero, don't check for end.
.20f4	d0 0a		bne $2100			bne 	_ScanNoCheck
.20f6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; reached either target token.
.20f8	c5 1e		cmp $1e				cmp 	zTemp0
.20fa	f0 49		beq $2145			beq 	_ScanExit
.20fc	c5 1f		cmp $1f				cmp 	zTemp0+1
.20fe	f0 45		beq $2145			beq 	_ScanExit
.2100					_ScanNoCheck:
.2100	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get the token and consume it.
.2102	c8		iny				iny
.2103	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2105	f0 37		beq $213e			beq		_ScanDataItem
.2107	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2109	f0 33		beq $213e			beq 	_ScanDataItem
.210b	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.210d	f0 1b		beq $212a			beq 	_ScanNextLine
.210f	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2111	d0 01		bne $2114			bne 	_ScanNoShift
.2113	c8		iny				iny
.2114					_ScanNoShift:
.2114	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2116	b0 da		bcs $20f2			bcs 	_ScanForwardLoop
.2118	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.211a	90 d6		bcc $20f2			bcc 	_ScanForwardLoop
.211c	aa		tax				tax 								; access the table to get the adjustment.
.211d	18		clc				clc
.211e	a5 20		lda $20				lda 	zTemp1 						; add it to structure count.
.2120	7d af 17	adc $17af,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2123	85 20		sta $20				sta 	zTemp1
.2125	10 cb		bpl $20f2			bpl		_ScanForwardLoop 			; error if -ve ?
.2127	4c f6 21	jmp $21f6		jmp	ErrorV_structure
.212a					_ScanNextLine:
.212a	18		clc				clc	 								; forward to next line.
.212b	b2 1c		lda ($1c)			lda 	(codePtr)
.212d	65 1c		adc $1c				adc 	codePtr
.212f	85 1c		sta $1c				sta 	codePtr
.2131	90 02		bcc $2135			bcc 	_ScanNoCarry
.2133	e6 1d		inc $1d				inc 	codePtr+1
.2135					_ScanNoCarry:
.2135	a0 03		ldy #$03			ldy 	#3
.2137	b2 1c		lda ($1c)			lda 	(codePtr) 					; off end of program ?
.2139	d0 b7		bne $20f2			bne 	_ScanForwardLoop
.213b	4c f6 21	jmp $21f6		jmp	ErrorV_structure
.213e					_ScanDataItem:
.213e	98		tya				tya
.213f	38		sec				sec
.2140	71 1c		adc ($1c),y			adc 	(codePtr),y
.2142	a8		tay				tay
.2143	80 ad		bra $20f2			bra 	_ScanForwardLoop
.2145					_ScanExit:
.2145	c8		iny				iny 								; consume final token.
.2146	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2147					Command_WHILE:
.2147	5a		phy				phy 								; save position of the test
.2148	20 b4 14	jsr $14b4			jsr 	EXPEvalNumber 				; work out the while test.
.214b	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; check if zero
.214e	f0 0e		beq $215e			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2150	98		tya				tya 								; position *after* test.
.2151	7a		ply				ply 								; restore position before test, at WHILE
.2152	88		dey				dey 								; so we execute the WHILE command again.
.2153	48		pha				pha 								; push after test on the stack
.2154	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2156	20 d8 22	jsr $22d8			jsr 	StackOpen
.2159	20 0c 23	jsr $230c			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.215c	7a		ply				ply 								; restore the position *after* the test
.215d	60		rts				rts
.215e					_WHExitLoop:
.215e	68		pla				pla 								; throw post loop position
.215f	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2161	aa		tax				tax
.2162	20 ec 20	jsr $20ec			jsr 	ScanForward
.2165	60		rts				rts
.2166					Command_WEND:
.2166	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2168	20 04 23	jsr $2304			jsr 	StackCheckFrame
.216b	20 1e 23	jsr $231e			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.216e	20 f6 22	jsr $22f6			jsr 	StackClose		 			; erase the frame
.2171	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2172					ErrorV_syntax:
.2172	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2175	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>217d	72 72 6f 72 00
.2182					ErrorV_range:
.2182	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2185	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>218d	61 6e 67 65 00
.2192					ErrorV_value:
.2192	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2195	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>219d	65 00
.219f					ErrorV_type:
.219f	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>21a2	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>21aa	6d 61 74 63 68 00
.21b0					ErrorV_unimplemented:
.21b0	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>21b3	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>21bb	65 6d 65 6e 74 65 64 00
.21c3					ErrorV_assert:
.21c3	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>21c6	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>21ce	61 69 6c 00
.21d2					ErrorV_internal:
.21d2	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>21d5	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>21dd	20 45 72 72 6f 72 00
.21e4					ErrorV_divzero:
.21e4	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>21e7	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>21ef	79 20 5a 65 72 6f 00
.21f6					ErrorV_structure:
.21f6	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>21f9	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>2201	65 20 49 6d 62 61 6c 61 6e 63 65 00
.220d					ErrorV_stop:
.220d	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2210	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>2218	53 74 6f 70 70 65 64 00
.2220					ErrorV_data:
.2220	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2223	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>222b	61 74 61 00
.222f					ErrorV_redefine:
.222f	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2232	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>223a	64 65 66 69 6e 65 64 00
.2242					ErrorV_index:
.2242	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2245	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>224d	79 20 49 6e 64 65 78 00
.2255					ErrorV_memory:
.2255	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2258	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>2260	65 6d 6f 72 79 00
.2266					ErrorV_uninitialised:
.2266	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2269	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>2271	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2280					ErrorV_string:
.2280	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2283	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>228b	6e 67 20 4c 65 6e 67 74 68 00
.2295					ErrorV_variable:
.2295	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>2298	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>22a0	20 4d 69 73 73 69 6e 67 00
.22a9					ErrorV_stack:
.22a9	20 a2 2c	jsr $2ca2		jsr	ErrorHandler
>22ac	53 74 61 63 6b 20 46 75			.text	"Stack Full",0
>22b4	6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.22b7					ERRCheckLParen:
.22b7	b1 1c		lda ($1c),y			lda 	(codePtr),y
.22b9	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.22bb	d0 18		bne $22d5			bne 	ERRSyntaxError
.22bd	c8		iny				iny
.22be	60		rts				rts
.22bf					ERRCheckRParen:
.22bf	b1 1c		lda ($1c),y			lda 	(codePtr),y
.22c1	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.22c3	d0 10		bne $22d5			bne 	ERRSyntaxError
.22c5	c8		iny				iny
.22c6	60		rts				rts
.22c7					ERRCheckComma:
.22c7	b1 1c		lda ($1c),y			lda 	(codePtr),y
.22c9	c9 99		cmp #$99			cmp 	#PR_COMMA
.22cb	d0 08		bne $22d5			bne 	ERRSyntaxError
.22cd	c8		iny				iny
.22ce	60		rts				rts
.22cf					ERRCheckA:
.22cf	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.22d1	d0 02		bne $22d5			bne 	ERRSyntaxError
.22d3	c8		iny				iny
.22d4	60		rts				rts
.22d5					ERRSyntaxError:
.22d5	4c 72 21	jmp $2172		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.22d8					StackOpen:
.22d8	48		pha				pha 								; save frame byte
.22d9	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.22db	0a		asl a				asl 	a 							; claim twice this for storage
.22dc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.22de	38		sec				sec 								; so basically subtracting from
.22df	65 26		adc $26				adc 	basicStack 	 				; basicStack
.22e1	85 26		sta $26				sta 	basicStack
.22e3	b0 0a		bcs $22ef			bcs 	_SONoBorrow
>22e5	db						.byte 	$DB
.22e6	c6 27		dec $27				dec 	basicStack+1
.22e8	a5 27		lda $27				lda 	basicStack+1 				; reached the bottom ?
.22ea	cd 4c 04	cmp $044c			cmp 	basicStackEnd
.22ed	f0 04		beq $22f3			beq 	_SOMemory
.22ef					_SONoBorrow:
.22ef	68		pla				pla 								; get marker back and write at TOS
.22f0	92 26		sta ($26)			sta 	(basicStack)
.22f2	60		rts				rts
.22f3					_SOMemory:
.22f3	4c a9 22	jmp $22a9		jmp	ErrorV_stack
.22f6					StackClose:
.22f6	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.22f8	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.22fa	0a		asl a				asl 	a 							; claim twice this.
.22fb	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.22fd	85 26		sta $26				sta 	basicStack
.22ff	90 02		bcc $2303			bcc 	_SCExit
.2301	e6 27		inc $27				inc 	basicStack+1
.2303					_SCExit:
.2303	60		rts				rts
.2304					StackCheckFrame:
.2304	d2 26		cmp ($26)			cmp		(basicStack) 				; check  frames match
.2306	d0 01		bne $2309			bne 	_SCFError 					; different, we have structures mixed up
.2308	60		rts				rts
.2309					_SCFError:
.2309	4c f6 21	jmp $21f6		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.230c					STKSaveCodePosition:
.230c	5a		phy				phy
.230d	98		tya				tya 								; save Y at offset 1.
.230e	a0 01		ldy #$01			ldy 	#1
.2310	91 26		sta ($26),y			sta 	(basicStack),y
.2312	a5 1c		lda $1c				lda 	codePtr 					; save code (low) at 2
.2314	c8		iny				iny
.2315	91 26		sta ($26),y			sta 	(basicStack),y
.2317	a5 1d		lda $1d				lda 	codePtr+1 					; save code (high) at 3
.2319	c8		iny				iny
.231a	91 26		sta ($26),y			sta 	(basicStack),y
.231c	7a		ply				ply
.231d	60		rts				rts
.231e					STKLoadCodePosition:
.231e	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2320	b1 26		lda ($26),y			lda 	(basicStack),y
.2322	85 1d		sta $1d				sta 	codePtr+1
.2324	88		dey				dey
.2325	b1 26		lda ($26),y			lda 	(basicStack),y
.2327	85 1c		sta $1c				sta 	codePtr
.2329	88		dey				dey
.232a	b1 26		lda ($26),y			lda 	(basicStack),y 				; line offset to Y
.232c	a8		tay				tay
.232d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.232e					StackReset:
.232e	48		pha				pha 								; save top of memory
.232f	3a		dec a				dec 	a  							; end of stack = previous byte
.2330	85 27		sta $27				sta 	basicStack+1
.2332	a9 ff		lda #$ff			lda 	#$FF
.2334	85 26		sta $26				sta 	basicStack
.2336	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2338	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.233a	68		pla				pla 								; allocate pages for stack.
.233b	38		sec				sec
.233c	e9 02		sbc #$02			sbc 	#stackPages
.233e	8d 4c 04	sta $044c			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2341	60		rts				rts
.0026					basicStack:
>0026							.fill 	2
.044c					basicStackEnd:
>044c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2342					StringConcrete:
.2342	5a		phy				phy 								; save position on stack
.2343	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.2345	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2347	b0 41		bcs $238a			bcs 	_SALengthError
.2349	18		clc				clc 								; length of the new string
.234a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.234c	90 02		bcc $2350			bcc 	_SAHaveLength
.234e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2350					_SAHaveLength:
.2350	48		pha				pha 								; save length to be allocated for concreting.
.2351	38		sec				sec
.2352	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2354	6d 4e 04	adc $044e			adc 	stringMemory
.2357	8d 4e 04	sta $044e			sta 	stringMemory
.235a	85 22		sta $22				sta 	zTemp2 						; update storage address
.235c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.235e	6d 4f 04	adc $044f			adc 	stringMemory+1
.2361	8d 4f 04	sta $044f			sta 	stringMemory+1
.2364	85 23		sta $23				sta 	zTemp2+1
.2366	68		pla				pla 								; save length allocated in +0
.2367	92 22		sta ($22)			sta 	(zTemp2)
.2369	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.236b	a0 01		ldy #$01			ldy 	#1
.236d	91 22		sta ($22),y			sta 	(zTemp2),y
.236f					_SACopyNewString:
.236f	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.2371	a0 02		ldy #$02			ldy 	#2
.2373	91 22		sta ($22),y			sta 	(zTemp2),y
.2375	aa		tax				tax 								; bytes to copy
.2376	f0 0c		beq $2384			beq 	_SACopyExit
.2378	a0 01		ldy #$01			ldy 	#1 							; first character from here
.237a					_SACopyNSLoop:
.237a	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.237c	c8		iny				iny 								; write two on in string storage
.237d	c8		iny				iny
.237e	91 22		sta ($22),y			sta 	(zTemp2),y
.2380	88		dey				dey
.2381	ca		dex				dex									; until copied all the string lengths.
.2382	d0 f6		bne $237a			bne 	_SACopyNSLoop
.2384					_SACopyExit:
.2384	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.2386	a5 22		lda $22				lda 	zTemp2
.2388	7a		ply				ply
.2389	60		rts				rts
.238a					_SALengthError:
.238a	4c 80 22	jmp $2280		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.238d					StringSystemInitialise:
.238d	3a		dec a				dec 	a 							; make last byte of previous page.
.238e	8d 4f 04	sta $044f			sta 	stringMemory+1
.2391	85 1f		sta $1f				sta 	zTemp0+1
.2393	a9 ff		lda #$ff			lda 	#$FF
.2395	8d 4e 04	sta $044e			sta 	stringMemory
.2398	85 1e		sta $1e				sta 	zTemp0
.239a	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.239c	92 1e		sta ($1e)			sta 	(zTemp0)
.239e	60		rts				rts
.239f					StringSpaceInitialise:
.239f	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.23a1	8d 4d 04	sta $044d			sta 	stringInitialised
.23a4	ad 4e 04	lda $044e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.23a7	8d 50 04	sta $0450			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.23aa	ad 4f 04	lda $044f			lda 	stringMemory+1
.23ad	3a		dec a				dec 	a
.23ae	8d 51 04	sta $0451			sta 	stringTempPointer+1
.23b1	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.23b4	60		rts				rts
.23b5					StringTempAllocate:
.23b5	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.23b7	b0 2e		bcs $23e7			bcs 	_STALength
.23b9	2c 4d 04	bit $044d			bit 	stringInitialised 			; already initialised
.23bc	30 05		bmi $23c3			bmi 	_STAAllocate
.23be	48		pha				pha 								; save value to subtract.
.23bf	20 9f 23	jsr $239f			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.23c2	68		pla				pla 								; restore it
.23c3					_STAAllocate:
.23c3	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.23c5	18		clc				clc  								; deliberate allows one more
.23c6	6d 50 04	adc $0450			adc 	stringTempPointer 			; subtract from temp pointer
.23c9	8d 50 04	sta $0450			sta 	stringTempPointer
.23cc	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.23ce	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.23d0	ad 51 04	lda $0451			lda 	stringTempPointer+1
.23d3	69 ff		adc #$ff			adc 	#$FF
.23d5	8d 51 04	sta $0451			sta 	stringTempPointer+1
.23d8	85 29		sta $29				sta 	zsTemp+1
.23da	85 0d		sta $0d				sta 	IFR0+IM1
.23dc	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.23de	a9 80		lda #$80			lda 	#$80
.23e0	85 0f		sta $0f				sta 	IFR0+IExp
.23e2	a9 00		lda #$00			lda 	#0 							; clear the target string
.23e4	92 28		sta ($28)			sta 	(zsTemp)
.23e6	60		rts				rts
.23e7					_STALength:
.23e7	4c 80 22	jmp $2280		jmp	ErrorV_string
.23ea					StringTempWrite:
.23ea	5a		phy				phy
.23eb	48		pha				pha
.23ec	b2 28		lda ($28)			lda 	(zsTemp)
.23ee	1a		inc a				inc 	a
.23ef	92 28		sta ($28)			sta 	(zsTemp)
.23f1	a8		tay				tay
.23f2	68		pla				pla
.23f3	91 28		sta ($28),y			sta 	(zsTemp),y
.23f5	7a		ply				ply
.23f6	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.044d					stringInitialised:
>044d							.fill 	1
.044e					stringMemory:
>044e							.fill 	2
.0450					stringTempPointer:
>0450							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.23f7					VARArrayLookup:
.23f7	85 1e		sta $1e				sta 	zTemp0 						; save the array address pointer in zTemp0
.23f9	86 1f		stx $1f				stx 	zTemp0+1
.23fb	b2 1e		lda ($1e)			lda 	(zTemp0)
.23fd	48		pha				pha
.23fe	5a		phy				phy
.23ff	a0 01		ldy #$01			ldy 	#1
.2401	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2403	7a		ply				ply
.2404	48		pha				pha
.2405	20 c6 14	jsr $14c6			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2408	68		pla				pla 								; array address to zTemp0
.2409	85 1f		sta $1f				sta 	zTemp0+1
.240b	68		pla				pla
.240c	85 1e		sta $1e				sta 	zTemp0
.240e	5a		phy				phy 								; save codePtr position.
.240f	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2411	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2413	48		pha				pha 								; save bit 15 on stack.
.2414	29 7f		and #$7f			and 	#$7F
.2416	85 20		sta $20				sta 	zTemp1
.2418	a5 0c		lda $0c				lda 	IFR0+IM0 					; check range of index
.241a	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.241c	a5 0d		lda $0d				lda 	IFR0+IM1
.241e	e5 20		sbc $20				sbc 	zTemp1
.2420	b0 3a		bcs $245c			bcs 	_VALIndex
.2422	a5 0d		lda $0d				lda 	IFR0+IM1  					; sanity check
.2424	c9 40		cmp #$40			cmp 	#$40
.2426	b0 34		bcs $245c			bcs 	_VALIndex
.2428	06 0c		asl $0c				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.242a	26 0d		rol $0d				rol 	IFR0+IM1
.242c	fa		plx				plx 								; get msb of size -> X
.242d	30 04		bmi $2433			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.242f	06 0c		asl $0c				asl 	IFR0+IM0
.2431	26 0d		rol $0d				rol 	IFR0+IM1
.2433					_VARNotX4:
.2433	18		clc				clc 								; add the two for the size bytes
.2434	a5 0c		lda $0c				lda 	IFR0+IM0
.2436	69 02		adc #$02			adc 	#2
.2438	85 0c		sta $0c				sta 	IFR0+IM0
.243a	90 02		bcc $243e			bcc 	_VARNoCarry1
.243c	e6 0d		inc $0d				inc 	IFR0+IM1
.243e					_VARNoCarry1:
.243e	18		clc				clc 								; calculate the element address and push to stack.
.243f	a5 0c		lda $0c				lda 	IFR0+IM0
.2441	65 1e		adc $1e				adc 	zTemp0
.2443	48		pha				pha
.2444	a5 0d		lda $0d				lda 	IFR0+IM1
.2446	65 1f		adc $1f				adc 	zTemp0+1
.2448	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.244a	30 04		bmi $2450			bmi 	_VARHasSubLevel
.244c	aa		tax				tax 								; address in XA
.244d	68		pla				pla
.244e	7a		ply				ply 								; restore Y and exit
.244f	60		rts				rts
.2450					_VARHasSubLevel:
.2450	aa		tax				tax 								; get link address in XA
.2451	68		pla				pla
.2452	7a		ply				ply 								; restore code position.
.2453	48		pha				pha
.2454	20 c7 22	jsr $22c7			jsr 	ERRCheckComma 				; comma required.
.2457	68		pla				pla
.2458	20 f7 23	jsr $23f7			jsr 	VARArrayLookup 				; call it recursively
.245b	60		rts				rts
.245c					_VALIndex:
.245c	4c 42 22	jmp $2242		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.245f					VARCreate:
.245f	5a		phy				phy
.2460	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2462	a2 00		ldx #$00			ldx 	#0
.2464	20 32 10	jsr $1032			jsr 	AllocateMemory
.2467	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.2469	86 21		stx $21				stx 	zTemp1+1
.246b	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.246d	ad 54 04	lda $0454			lda 	VARHash
.2470	91 20		sta ($20),y			sta 	(zTemp1),y
.2472	c8		iny				iny 								; put address of name into +3,+4
.2473	ad 52 04	lda $0452			lda 	VARNameAddress
.2476	91 20		sta ($20),y			sta 	(zTemp1),y
.2478	c8		iny				iny
.2479	ad 53 04	lda $0453			lda 	VARNameAddress+1
.247c	91 20		sta ($20),y			sta 	(zTemp1),y
.247e	ad 55 04	lda $0455			lda 	VARType
.2481	29 01		and #$01			and 	#1
.2483	f0 06		beq $248b			beq 	_CVNotString
.2485	a0 08		ldy #$08			ldy 	#5+3
.2487	a9 80		lda #$80			lda 	#$80
.2489	91 20		sta ($20),y			sta 	(zTemp1),y
.248b					_CVNotString:
.248b	ad 76 04	lda $0476			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.248e	85 1e		sta $1e				sta 	zTemp0
.2490	ad 77 04	lda $0477			lda 	VARHashEntry+1
.2493	85 1f		sta $1f				sta 	zTemp0+1
.2495	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2497	b2 1e		lda ($1e)			lda 	(zTemp0)
.2499	92 20		sta ($20)			sta 	(zTemp1)
.249b	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.249d	91 20		sta ($20),y			sta 	(zTemp1),y
.249f	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.24a1	92 1e		sta ($1e)			sta 	(zTemp0)
.24a3	a5 21		lda $21				lda 	zTemp1+1
.24a5	91 1e		sta ($1e),y			sta 	(zTemp0),y
.24a7	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.24a9	a6 21		ldx $21				ldx 	zTemp1+1
.24ab	18		clc				clc 								; add 5 to point to the data.
.24ac	69 05		adc #$05			adc 	#5
.24ae	90 01		bcc $24b1			bcc 	_VCNoCarry
.24b0	e8		inx				inx
.24b1					_VCNoCarry:
.24b1	7a		ply				ply
.24b2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.24b3					VARFind:
.24b3	5a		phy				phy
.24b4	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.24b6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.24b8	85 21		sta $21				sta 	zTemp1+1
.24ba	f0 1c		beq $24d8			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.24bc	b2 1e		lda ($1e)			lda 	(zTemp0)
.24be	85 20		sta $20				sta 	zTemp1
.24c0					_VFLoop:
.24c0	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.24c2	b1 20		lda ($20),y			lda 	(zTemp1),y
.24c4	cd 54 04	cmp $0454			cmp 	VARHash
.24c7	f0 12		beq $24db			beq 	_VFHashesMatch 				; if so, check the name.
.24c9					_VFNext:
.24c9	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.24cb	aa		tax				tax
.24cc	a0 01		ldy #$01			ldy 	#1
.24ce	b1 20		lda ($20),y			lda 	(zTemp1),y
.24d0	85 21		sta $21				sta 	zTemp1+1
.24d2	86 20		stx $20				stx 	zTemp1
.24d4	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.24d6	d0 e8		bne $24c0			bne 	_VFLoop
.24d8					_VFExitFail:
.24d8	7a		ply				ply
.24d9	18		clc				clc
.24da	60		rts				rts
.24db					_VFHashesMatch:
.24db	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.24dd	b1 20		lda ($20),y			lda 	(zTemp1),y
.24df	85 22		sta $22				sta 	zTemp2
.24e1	c8		iny				iny
.24e2	b1 20		lda ($20),y			lda 	(zTemp1),y
.24e4	85 23		sta $23				sta 	zTemp2+1
.24e6	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.24e8					_VFNameCompLoop:
.24e8	c8		iny				iny 								; char at a time
.24e9	b9 56 04	lda $0456,y			lda 	VARBuffer,y
.24ec	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.24ee	d0 d9		bne $24c9			bne 	_VFNext						; next entry if different.
.24f0	c9 7c		cmp #$7c			cmp 	#$7C
.24f2	90 f4		bcc $24e8			bcc 	_VFNameCompLoop 			; until done the whole lot.
.24f4	18		clc				clc
.24f5	a5 20		lda $20				lda 	zTemp1
.24f7	a6 21		ldx $21				ldx 	zTemp1+1
.24f9	69 05		adc #$05			adc 	#5
.24fb	90 01		bcc $24fe			bcc 	_VFNNoCarry
.24fd	e8		inx				inx
.24fe					_VFNNoCarry:
.24fe	7a		ply				ply
.24ff	38		sec				sec
.2500	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2501					VARGetInfo:
.2501	98		tya				tya 								; calculate the address of the identifier start.
.2502	18		clc				clc
.2503	65 1c		adc $1c				adc 	codePtr
.2505	8d 52 04	sta $0452			sta 	VARNameAddress
.2508	a5 1d		lda $1d				lda 	codePtr+1
.250a	69 00		adc #$00			adc 	#0
.250c	8d 53 04	sta $0453			sta 	VARNameAddress+1
.250f	9c 54 04	stz $0454			stz 	VARHash
.2512	a2 00		ldx #$00			ldx 	#0
.2514					_VARCopyName:
.2514	18		clc				clc 								; update the sum hash.
.2515	ad 54 04	lda $0454			lda 	VARHash
.2518	71 1c		adc ($1c),y			adc 	(codePtr),y
.251a	8d 54 04	sta $0454			sta 	VARHash
.251d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.251f	c8		iny				iny
.2520	9d 56 04	sta $0456,x			sta 	VARBuffer,x
.2523	e8		inx				inx
.2524	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2526	90 ec		bcc $2514			bcc 	_VARCopyName
.2528	8d 55 04	sta $0455			sta 	VARType 					; save type byte
.252b	29 03		and #$03			and 	#3 							; type is 0-3
.252d	0a		asl a				asl 	a
.252e	0a		asl a				asl 	a
.252f	85 1e		sta $1e				sta 	zTemp0
.2531	ad 54 04	lda $0454			lda 	VARHash 					; force into range of hash entries per type.
.2534	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2536	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.2538	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2539	69 78		adc #$78			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.253b	85 1e		sta $1e				sta 	zTemp0
.253d	8d 76 04	sta $0476			sta 	VARHashEntry
.2540	a9 04		lda #$04			lda 	#VARHashTables >> 8
.2542	69 00		adc #$00			adc 	#0
.2544	85 1f		sta $1f				sta 	zTemp0+1
.2546	8d 77 04	sta $0477			sta 	VARHashEntry+1
.2549	60		rts				rts
.254a					VARClearHashTables:
.254a	a2 00		ldx #$00			ldx 	#0
.254c					_VCHRLoop:
.254c	a9 00		lda #$00			lda 	#0
.254e	9d 78 04	sta $0478,x			sta 	VARHashTables,x
.2551	e8		inx				inx
.2552	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2554	d0 f6		bne $254c			bne 	_VCHRLoop
.2556	60		rts				rts
.0452					VARNameAddress:
>0452							.fill 	2
.0454					VARHash:
>0454							.fill 	1
.0455					VARType:
>0455							.fill 	1
.0456					VARBuffer:
>0456							.fill 	32
.0476					VARHashEntry:
>0476							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0478					VARHashTables:
>0478							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2557					VARCheckSimple:
.2557	aa		tax				tax 								; save in X
.2558	b1 1c		lda ($1c),y			lda 	(codePtr),y
.255a	c9 7c		cmp #$7c			cmp 	#$7C
.255c	d0 15		bne $2573			bne 	_VCSComplex
.255e	c8		iny				iny 								; consume the second byte, the type.
.255f	8a		txa				txa  								; character (40-7F) x 4
.2560	0a		asl a				asl 	a
.2561	0a		asl a				asl  	a
.2562	18		clc				clc
.2563	69 98		adc #$98			adc 	#FastVariables & $FF
.2565	85 0c		sta $0c				sta 	IFR0+IM0
.2567	a9 04		lda #$04			lda 	#FastVariables >> 8
.2569	69 00		adc #$00			adc 	#0
.256b	85 0d		sta $0d				sta 	IFR0+IM1
.256d	64 0e		stz $0e				stz 	IFR0+IM2
.256f	64 0f		stz $0f				stz 	IFR0+IExp
.2571	38		sec				sec 								; it's a reference
.2572	60		rts				rts
.2573					_VCSComplex:
.2573	88		dey				dey	 								; extract information.
.2574	20 01 25	jsr $2501			jsr 	VARGetInfo
.2577	20 b3 24	jsr $24b3			jsr 	VARFind 					; search for variable
.257a	b0 0a		bcs $2586			bcs 	_VCSHaveVariable
.257c	ad 55 04	lda $0455			lda 	VARType 					; error if arrays, cannot autocreate
.257f	29 02		and #$02			and 	#2
.2581	d0 25		bne $25a8			bne 	_VCNoCreate
.2583	20 5f 24	jsr $245f			jsr 	VARCreate 					; create variable
.2586					_VCSHaveVariable:
.2586	48		pha				pha 								; save LSB on the stack
.2587	ad 55 04	lda $0455			lda 	VARType 					; get var type, and shift bit 1 into carry
.258a	6a		ror a				ror 	a
.258b	6a		ror a				ror 	a
.258c	68		pla				pla 								; restore LSB
.258d	90 08		bcc $2597			bcc 	_VCSNotArray 				; skip if not an array
.258f	20 f7 23	jsr $23f7			jsr 	VARArrayLookup 				; look for subscripts.
.2592	48		pha				pha 								; check )
.2593	20 bf 22	jsr $22bf			jsr 	ERRCheckRParen
.2596	68		pla				pla
.2597					_VCSNotArray:
.2597	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.2599	85 0c		sta $0c				sta 	IFR0+IM0
.259b	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.259d	ad 55 04	lda $0455			lda 	VARType 					; number/string bit into carry
.25a0	6a		ror a				ror 	a
.25a1	a9 00		lda #$00			lda 	#0
.25a3	6a		ror a				ror 	a 							; now $00 or $80
.25a4	85 0f		sta $0f				sta 	IFR0+IExp
.25a6	38		sec				sec 								; it's a reference
.25a7	60		rts				rts
.25a8					_VCNoCreate:
.25a8	4c 66 22	jmp $2266		jmp	ErrorV_uninitialised
.0498					FastVariables:
>0498							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.25ab					IFInitialise:
.25ab	9c 08 05	stz $0508			stz 	IFStackIndex
.25ae	60		rts				rts
.25af					IFloatSubtract:
.25af	da		phx				phx
.25b0	a2 0c		ldx #$0c			ldx 	#IFR0
.25b2	20 cb 2b	jsr $2bcb			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.25b5	fa		plx				plx
.25b6					IFloatAdd:
.25b6	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.25b8	05 0f		ora $0f				ora 	IFR0+IExp
.25ba	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.25bc	d0 4e		bne $260c			bne 	_IFloatAddDecimals 			; decimal version.
.25be					_IFAddSubMantissa:
.25be	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.25c0	45 0f		eor $0f				eor 	IFR0+IExp
.25c2	29 40		and #$40			and 	#IFSign
.25c4	d0 21		bne $25e7			bne 	_IFloatSubMantissa
.25c6	18		clc				clc 								; do the actual addition
.25c7	a5 0c		lda $0c			lda 	IFR0+IM0
.25c9	75 00		adc $00,x		adc 		IM0,x
.25cb	85 0c		sta $0c			sta 	IFR0+IM0
.25cd	a5 0d		lda $0d			lda 	IFR0+IM1
.25cf	75 01		adc $01,x		adc 		IM1,x
.25d1	85 0d		sta $0d			sta 	IFR0+IM1
.25d3	a5 0e		lda $0e			lda 	IFR0+IM2
.25d5	75 02		adc $02,x		adc 		IM2,x
.25d7	85 0e		sta $0e			sta 	IFR0+IM2
.25d9	10 29		bpl $2604			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.25db	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.25dd	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.25e0	20 19 2c	jsr $2c19			jsr 	IFloatIncExponent
.25e3	d0 1f		bne $2604			bne 	_IFloatAddExit
.25e5	38		sec				sec 								; overflowed numerically.
.25e6	60		rts				rts
.25e7					_IFloatSubMantissa:
.25e7	38		sec				sec 								; do the subtraction R0-Rx
.25e8	a5 0c		lda $0c			lda 	IFR0+IM0
.25ea	f5 00		sbc $00,x		sbc 		IM0,x
.25ec	85 0c		sta $0c			sta 	IFR0+IM0
.25ee	a5 0d		lda $0d			lda 	IFR0+IM1
.25f0	f5 01		sbc $01,x		sbc 		IM1,x
.25f2	85 0d		sta $0d			sta 	IFR0+IM1
.25f4	a5 0e		lda $0e			lda 	IFR0+IM2
.25f6	f5 02		sbc $02,x		sbc 		IM2,x
.25f8	85 0e		sta $0e			sta 	IFR0+IM2
.25fa	b0 08		bcs $2604			bcs 	_IFloatAddExit 				; no borrow so we are done.
.25fc	a2 0c		ldx #$0c			ldx 	#IFR0
.25fe	20 d3 2b	jsr $2bd3			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2601	20 cb 2b	jsr $2bcb			jsr 	IFloatNegate 				; negate
.2604					_IFloatAddExit:
.2604	18		clc				clc
.2605	60		rts				rts
.2606					_IFloatZeroAdd:
.2606	fa		plx				plx 								; return this value in R0
.2607	20 51 2b	jsr $2b51			jsr 	IFloatCopyFromRegister
.260a	18		clc				clc
.260b	60		rts				rts
.260c					_IFloatAddDecimals:
.260c	20 b9 2b	jsr $2bb9			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.260f	f0 f3		beq $2604			beq 	_IFloatAddExit
.2611	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise 			; normalise RX
.2614	da		phx				phx 								; normalise R0
.2615	a2 0c		ldx #$0c			ldx 	#IFR0
.2617	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.261a	f0 ea		beq $2606			beq 	_IFloatZeroAdd
.261c	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise
.261f	fa		plx				plx
.2620	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.2622	29 3f		and #$3f			and 	#IFXMask
.2624	38		sec				sec
.2625	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2627	85 0a		sta $0a				sta 	iTemp0
.2629	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.262b	29 3f		and #$3f			and 	#IFXMask
.262d	38		sec				sec
.262e	e9 20		sbc #$20			sbc 	#$20
.2630	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.2632	b0 02		bcs $2636			bcs 	_IFloatHaveLarger
.2634	a5 0a		lda $0a				lda 	iTemp0
.2636					_IFloatHaveLarger:
.2636	18		clc				clc 								; get the actual one back.
.2637	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2639	20 46 26	jsr $2646			jsr 	_IFShiftXToA
.263c	da		phx				phx
.263d	a2 0c		ldx #$0c			ldx 	#IFR0
.263f	20 46 26	jsr $2646			jsr 	_IFShiftXToA
.2642	fa		plx				plx
.2643	4c be 25	jmp $25be			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2646					_IFShiftXToA:
.2646	8d 00 05	sta $0500			sta 	IFTarget
.2649	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; check adding zero ?
.264c	f0 11		beq $265f			beq 	_IFSXExit
.264e					_IFSXLoop:
.264e	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2650	29 3f		and #$3f			and 	#IFXMask
.2652	cd 00 05	cmp $0500			cmp 	IFTarget
.2655	f0 08		beq $265f			beq 	_IFSXExit
.2657	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.265a	20 19 2c	jsr $2c19			jsr 	IFloatIncExponent
.265d	80 ef		bra $264e			bra 	_IFSXLoop
.265f					_IFSXExit:
.265f	60		rts				rts
.0500					IFTarget:
>0500							.fill 	1
.2660					IFloatMultiply:
.2660	8e 00 05	stx $0500			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2663	20 1b 27	jsr $271b			jsr 	IFCalculateNewSign
.2666	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2668	05 0f		ora $0f				ora 	IFR0+IExp
.266a	29 3f		and #$3f			and 	#IFXMask
.266c	15 01		ora $01,x			ora 	IM1,x
.266e	05 0d		ora $0d				ora 	IFR0+IM1
.2670	15 02		ora $02,x			ora 	IM2,x
.2672	05 0e		ora $0e				ora 	IFR0+IM2
.2674	d0 0a		bne $2680			bne 	_IFMStandard
.2676	20 9c 2b	jsr $2b9c			jsr 	IFloatMultiply8BitRx
.2679	ad 02 05	lda $0502			lda 	IFNewSign
.267c	85 0f		sta $0f				sta 	IFR0+IExp
.267e	18		clc				clc
.267f	60		rts				rts
.2680					_IFMStandard:
.2680	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2682	20 12 27	jsr $2712			jsr 	IFMSignExtend
.2685	8d 01 05	sta $0501			sta 	IFNewExponent
.2688	a5 0f		lda $0f				lda 	IFR0+IExp
.268a	20 12 27	jsr $2712			jsr 	IFMSignExtend
.268d	18		clc				clc
.268e	6d 01 05	adc $0501			adc 	IFNewExponent
.2691	8d 01 05	sta $0501			sta 	IFNewExponent
.2694	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2696	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister
.2699	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.269b	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.269e					_IFMLoop:
.269e	a2 18		ldx #$18			ldx 	#IFRTemp
.26a0	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.26a3	f0 3a		beq $26df			beq 	_IFMExit
.26a5	ae 00 05	ldx $0500			ldx 	IFTarget 					; look at adder MSB
.26a8	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.26aa	10 03		bpl $26af			bpl	 	_IFMTargetOkay
.26ac	20 03 27	jsr $2703			jsr 	_IFMShiftAll
.26af					_IFMTargetOkay:
.26af	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.26b1	29 01		and #$01			and 	#1
.26b3	f0 16		beq $26cb			beq 	_IFMNoAdd
.26b5	ae 00 05	ldx $0500			ldx 	IFTarget 					; add adder
.26b8	18		clc				clc
.26b9	a5 0c		lda $0c			lda 	IFR0+IM0
.26bb	75 00		adc $00,x		adc 		IM0,x
.26bd	85 0c		sta $0c			sta 	IFR0+IM0
.26bf	a5 0d		lda $0d			lda 	IFR0+IM1
.26c1	75 01		adc $01,x		adc 		IM1,x
.26c3	85 0d		sta $0d			sta 	IFR0+IM1
.26c5	a5 0e		lda $0e			lda 	IFR0+IM2
.26c7	75 02		adc $02,x		adc 		IM2,x
.26c9	85 0e		sta $0e			sta 	IFR0+IM2
.26cb					_IFMNoAdd:
.26cb	a5 0e		lda $0e				lda 	IFR0+IM2
.26cd	10 03		bpl $26d2			bpl 	_IFMResultOkay
.26cf	20 03 27	jsr $2703			jsr 	_IFMShiftAll
.26d2					_IFMResultOkay:
.26d2	a2 18		ldx #$18			ldx 	#IFRTemp
.26d4	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.26d7	ae 00 05	ldx $0500			ldx 	IFTarget
.26da	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.26dd	80 bf		bra $269e			bra 	_IFMLoop
.26df					_IFMExit:
.26df	ad 01 05	lda $0501			lda 	IFNewExponent 				; validate new exponent.
.26e2	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.26e4	90 0f		bcc $26f5			bcc 	_IFMOkay
.26e6	c9 e0		cmp #$e0			cmp 	#$E0
.26e8	b0 0b		bcs $26f5			bcs 	_IFMOkay
.26ea	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.26ec	f0 13		beq $2701			beq 	_IFMError
.26ee	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.26f0	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.26f3	18		clc				clc
.26f4	60		rts				rts
.26f5					_IFMOkay:
.26f5	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.26f7	0d 02 05	ora $0502			ora 	IFNewSign
.26fa	85 0f		sta $0f				sta 	IFR0+IExp
.26fc	18		clc				clc
.26fd	60		rts				rts
.26fe	4c ff ff	jmp $ffff			jmp 	$FFFF
.2701					_IFMError:
.2701	38		sec				sec
.2702	60		rts				rts
.2703					_IFMShiftAll:
.2703	a2 0c		ldx #$0c			ldx 	#IFR0
.2705	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.2708	ae 00 05	ldx $0500			ldx 	IFTarget
.270b	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.270e	ee 01 05	inc $0501			inc 	IFNewExponent
.2711	60		rts				rts
.2712					IFMSignExtend:
.2712	29 3f		and #$3f			and 	#IFXMask
.2714	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2716	90 02		bcc $271a			bcc 	_IFMNoSXX
.2718	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.271a					_IFMNoSXX:
.271a	60		rts				rts
.271b					IFCalculateNewSign:
.271b	b5 03		lda $03,x			lda 	IExp,x
.271d	45 0f		eor $0f				eor 	IFR0+IExp
.271f	29 40		and #$40			and 	#IFSign
.2721	8d 02 05	sta $0502			sta 	IFNewSign
.2724	60		rts				rts
.0501					IFNewExponent:
>0501							.fill 	1
.0502					IFNewSign:
>0502							.fill 	1
.2725					IFloatDivideInteger:
.2725	20 3e 27	jsr $273e			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2728	b0 06		bcs $2730			bcs 	_IFDIExit
.272a	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.272c	20 51 2b	jsr $2b51			jsr 	IFloatCopyFromRegister
.272f	18		clc				clc
.2730					_IFDIExit:
.2730	60		rts				rts
.2731					IFloatModulusInteger:
.2731	20 3e 27	jsr $273e			jsr 	IFloatDivideIntegerCommon
.2734	b0 07		bcs $273d			bcs 	_IFMIExit
.2736	ae 00 05	ldx $0500			ldx 	IFTarget
.2739	20 51 2b	jsr $2b51			jsr 	IFloatCopyFromRegister
.273c	18		clc				clc
.273d					_IFMIExit:
.273d	60		rts				rts
.273e					IFloatDivideIntegerCommon:
.273e	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.2741	20 1b 27	jsr $271b			jsr 	IFCalculateNewSign 			; calculate sign of result
.2744	20 6c 27	jsr $276c			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2747	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.2749	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.274c	f0 1c		beq $276a			beq 	_IFDIDivZero
.274e	ae 00 05	ldx $0500			ldx 	IFTarget 					; zero Rx (S1)
.2751	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.2754	5a		phy				phy
.2755	a0 18		ldy #$18			ldy 	#24
.2757					_IFDILoop:
.2757	20 7d 27	jsr $277d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.275a	20 89 27	jsr $2789			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.275d	88		dey				dey
.275e	d0 f7		bne $2757			bne 	_IFDILoop 					; do it 24 times
.2760	7a		ply				ply
.2761	ad 02 05	lda $0502			lda 	IFNewSign 					; set sign of result.
.2764	29 40		and #$40			and 	#IFSign
.2766	85 1b		sta $1b				sta 	IFRTemp+IExp
.2768	18		clc				clc 								; is okay.
.2769	60		rts				rts
.276a					_IFDIDivZero:
.276a	38		sec				sec
.276b	60		rts				rts
.276c					IFDCopyRXToRTemp:
.276c	b5 00		lda $00,x			lda 	IM0,x
.276e	85 18		sta $18				sta 	IFRTemp+IM0
.2770	b5 01		lda $01,x			lda 	IM1,x
.2772	85 19		sta $19				sta 	IFRTemp+IM1
.2774	b5 02		lda $02,x			lda 	IM2,x
.2776	85 1a		sta $1a				sta 	IFRTemp+IM2
.2778	b5 03		lda $03,x			lda 	IExp,x
.277a	85 1b		sta $1b				sta 	IFRTemp+IExp
.277c	60		rts				rts
.277d					IFDShiftSTempS1Left:
.277d	a2 18		ldx #$18			ldx 	#IFRTemp
.277f	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft
.2782	ae 00 05	ldx $0500			ldx 	IFTarget
.2785	20 e8 2b	jsr $2be8			jsr 	IFloatRotateLeft
.2788	60		rts				rts
.2789					IFDTrySubtract:
.2789	ae 00 05	ldx $0500			ldx 	IFTarget 					; s1 = Rx
.278c	38		sec				sec 								; subtract, saving the results on the stack.
.278d	b5 00		lda $00,x			lda 	IM0,x
.278f	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2791	48		pha				pha
.2792	b5 01		lda $01,x			lda 	IM1,x
.2794	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2796	48		pha				pha
.2797	b5 02		lda $02,x			lda 	IM2,x
.2799	e5 0e		sbc $0e				sbc 	IFR0+IM2
.279b	b0 03		bcs $27a0			bcs 	_IFDCanSubtract
.279d	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.279e	68		pla				pla
.279f	60		rts				rts
.27a0					_IFDCanSubtract:
.27a0	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.27a2	68		pla				pla
.27a3	95 01		sta $01,x			sta 	IM1,x
.27a5	68		pla				pla
.27a6	95 00		sta $00,x			sta 	IM0,x
.27a8	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.27aa	d0 06		bne $27b2			bne 	_IFDCSExit
.27ac	e6 19		inc $19				inc 	IFRTemp+IM1
.27ae	d0 02		bne $27b2			bne 	_IFDCSExit
.27b0	e6 1a		inc $1a				inc 	IFRTemp+IM2
.27b2					_IFDCSExit:
.27b2	60		rts				rts
.27b3					IFloatBitwiseAnd:
.27b3	5a		phy				phy
.27b4	20 f8 27	jsr $27f8			jsr 	IFPreProcessBitwise 		; set up everything.
.27b7	d0 0f		bne $27c8			bne 	_IFBAExit
.27b9					_IFBALoop:
.27b9	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.27bc	35 00		and $00,x			and 	IM0,x
.27be	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.27c1	e8		inx				inx
.27c2	c8		iny				iny
.27c3	c0 03		cpy #$03			cpy 	#3
.27c5	d0 f2		bne $27b9			bne 	_IFBALoop
.27c7	18		clc				clc
.27c8					_IFBAExit:
.27c8	7a		ply				ply
.27c9	60		rts				rts
.27ca					IFloatBitwiseOr:
.27ca	5a		phy				phy
.27cb	20 f8 27	jsr $27f8			jsr 	IFPreProcessBitwise 		; set up everything.
.27ce	d0 0f		bne $27df			bne 	_IFBAExit
.27d0					_IFBALoop:
.27d0	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.27d3	15 00		ora $00,x			ora 	IM0,x
.27d5	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.27d8	e8		inx				inx
.27d9	c8		iny				iny
.27da	c0 03		cpy #$03			cpy 	#3
.27dc	d0 f2		bne $27d0			bne 	_IFBALoop
.27de	18		clc				clc
.27df					_IFBAExit:
.27df	7a		ply				ply
.27e0	60		rts				rts
.27e1					IFloatBitwiseXor:
.27e1	5a		phy				phy
.27e2	20 f8 27	jsr $27f8			jsr 	IFPreProcessBitwise 		; set up everything.
.27e5	d0 0f		bne $27f6			bne 	_IFBAExit
.27e7					_IFBALoop:
.27e7	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.27ea	55 00		eor $00,x			eor 	IM0,x
.27ec	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.27ef	e8		inx				inx
.27f0	c8		iny				iny
.27f1	c0 03		cpy #$03			cpy 	#3
.27f3	d0 f2		bne $27e7			bne 	_IFBALoop
.27f5	18		clc				clc
.27f6					_IFBAExit:
.27f6	7a		ply				ply
.27f7	60		rts				rts
.27f8					IFPreProcessBitwise:
.27f8	a0 00		ldy #$00			ldy 	#0 							; set index.
.27fa	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.27fc	15 03		ora $03,x			ora 	IExp,x
.27fe	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2800	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2802	38		sec				sec 								; carry set just in cases.
.2803	60		rts				rts
.2804					IFloatAbsoluteR0:
.2804	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.2806	29 bf		and #$bf			and 	#IFSign ^ 255
.2808	85 0f		sta $0f				sta 	IFR0+IExp
.280a	18		clc				clc
.280b	60		rts				rts
.280c					IFloatSquareRootR0:
.280c	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.280e	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.2811	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2813	29 40		and #$40			and 	#IFSign
.2815	d0 2f		bne $2846			bne 	_IFSRFail
.2817	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise 			; it will work better !
.281a	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.281c	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister
.281f	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2821	20 12 27	jsr $2712			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2824	18		clc				clc
.2825	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2827	85 0f		sta $0f				sta 	IFR0+IExp
.2829	4a		lsr a				lsr 	a 							; which we can halve.
.282a	38		sec				sec 								; convert back
.282b	e9 17		sbc #$17			sbc 	#23
.282d	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.282f	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2831	20 48 28	jsr $2848			jsr 	_IFSRNewton
.2834	20 48 28	jsr $2848			jsr 	_IFSRNewton
.2837	20 48 28	jsr $2848			jsr 	_IFSRNewton
.283a	20 48 28	jsr $2848			jsr 	_IFSRNewton
.283d	18		clc				clc
.283e	60		rts				rts
.283f					_IFSRZero:
.283f	a2 0c		ldx #$0c			ldx 	#IFR0
.2841	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.2844	18		clc				clc
.2845	60		rts				rts
.2846					_IFSRFail:
.2846	38		sec				sec
.2847	60		rts				rts
.2848					_IFSRNewton:
.2848	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.284a	20 0f 2b	jsr $2b0f			jsr 	IFloatPushRx
.284d	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.284f	20 0f 2b	jsr $2b0f			jsr 	IFloatPushRx
.2852	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.2854	20 e3 28	jsr $28e3			jsr 	IFloatDivideFloat
.2857	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2859	20 30 2b	jsr $2b30			jsr 	IFloatPullRx
.285c	20 b6 25	jsr $25b6			jsr 	IFloatAdd 					; now guess + original/guess
.285f	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2861	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.2864	a2 10		ldx #$10			ldx 	#IFR1
.2866	20 30 2b	jsr $2b30			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2869	60		rts				rts
.286a					IFloatFractionalR0:
.286a	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.286c	29 3f		and #$3f			and 	#IFXMask
.286e	f0 17		beq $2887			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2870	20 04 28	jsr $2804			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2873	a2 0c		ldx #$0c			ldx 	#IFR0
.2875	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise 			; normalise R0
.2878	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.287a	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister
.287d	20 c0 28	jsr $28c0			jsr 	IFloatIntegerR0 			; take integer part of R0
.2880	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.2882	20 af 25	jsr $25af			jsr 	IFloatSubtract
.2885	80 05		bra $288c			bra 	_FIPExit
.2887					_FIPZero:
.2887	a2 0c		ldx #$0c			ldx 	#IFR0
.2889	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.288c					_FIPExit:
.288c	18		clc				clc
.288d	60		rts				rts
.288e					IFloatCompare:
.288e	20 af 25	jsr $25af			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2891	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2893	05 0f		ora $0f				ora 	IFR0+IExp
.2895	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2897	29 3f		and #$3f			and 	#IFXMask
.2899	d0 19		bne $28b4			bne 	_IFCNonInteger
.289b	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; check if zero
.289e	f0 0f		beq $28af			beq 	_IFCZero
.28a0					_IFCReturnSign:
.28a0	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.28a2	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.28a4	48		pha				pha
.28a5	a9 01		lda #$01			lda 	#1
.28a7	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte 				; return to +1
.28aa	68		pla				pla 								; sign bit back
.28ab	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.28ad	18		clc				clc
.28ae	60		rts				rts
.28af					_IFCZero:
.28af	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.28b2	18		clc				clc
.28b3	60		rts				rts
.28b4					_IFCNonInteger:
.28b4	a5 0c		lda $0c				lda 	IFR0+IM0
.28b6	29 00		and #$00			and		#$00
.28b8	05 0d		ora $0d				ora 	IFR0+IM1
.28ba	05 0e		ora $0e				ora 	IFR0+IM2
.28bc	f0 f1		beq $28af			beq 	_IFCZero 					; near enough !
.28be	80 e0		bra $28a0			bra 	_IFCReturnSign 				; return the sign of the difference.
.28c0					IFloatIntegerR0:
.28c0	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.28c2	29 3f		and #$3f			and 	#IFXMask
.28c4	f0 1b		beq $28e1			beq 	_FIPExit 					; if so do nothing
.28c6	a2 0c		ldx #$0c			ldx 	#IFR0
.28c8	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise 			; normalise
.28cb	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; is it zero ?
.28ce	f0 0e		beq $28de			beq 	_FIPZero 					; if so return zero.
.28d0					_FIPShift:
.28d0	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.28d2	29 20		and #$20			and 	#$20 						; still -ve
.28d4	f0 0b		beq $28e1			beq 	_FIPExit
.28d6	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight 			; shift mantissa right
.28d9	20 19 2c	jsr $2c19			jsr 	IFloatIncExponent 			; bump exponent
.28dc	80 f2		bra $28d0			bra 	_FIPShift
.28de					_FIPZero:
.28de	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.28e1					_FIPExit:
.28e1	18		clc				clc
.28e2	60		rts				rts
.28e3					IFloatDivideFloat:
.28e3	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.28e6	20 1b 27	jsr $271b			jsr 	IFCalculateNewSign 			; calculate sign of result
.28e9	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise 			; normalise RX
.28ec	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.28ee	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise
.28f1	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.28f4	f0 56		beq $294c			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.28f6	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.28f8	20 12 27	jsr $2712			jsr 	IFMSignExtend
.28fb	8d 01 05	sta $0501			sta 	IFNewExponent
.28fe	ae 00 05	ldx $0500			ldx 	IFTarget 					; calculate s1.exponent
.2901	b5 03		lda $03,x			lda 	IExp,x
.2903	20 12 27	jsr $2712			jsr 	IFMSignExtend
.2906	38		sec				sec
.2907	ed 01 05	sbc $0501			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.290a	38		sec				sec
.290b	e9 17		sbc #$17			sbc 	#23
.290d	8d 01 05	sta $0501			sta 	IFNewExponent
.2910	20 4e 29	jsr $294e			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2913	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.2915	10 08		bpl $291f			bpl 	_IFDFNoShiftResult
.2917	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.2919	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.291c	ee 01 05	inc $0501			inc 	IFNewExponent
.291f					_IFDFNoShiftResult:
.291f	ad 01 05	lda $0501			lda 	IFNewExponent 				; underflow/overflow check.
.2922	30 06		bmi $292a			bmi 	_IFDFCheckUnderflow
.2924	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2926	b0 24		bcs $294c			bcs 	_IFDFDivZero
.2928	80 11		bra $293b			bra		_IFDFExit
.292a					_IFDFCheckUnderflow:
.292a	ad 01 05	lda $0501			lda 	IFNewExponent 				; shift into a legal exponent.
.292d	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.292f	b0 0a		bcs $293b			bcs 	_IFDFExit
.2931	ee 01 05	inc $0501			inc 	IFNewExponent
.2934	a2 18		ldx #$18			ldx 	#IFRTemp
.2936	20 ef 2b	jsr $2bef			jsr 	IFloatShiftRight
.2939	80 ef		bra $292a			bra 	_IFDFCheckUnderflow
.293b					_IFDFExit:
.293b	ad 01 05	lda $0501			lda 	IFNewExponent 				; combine exponent and sign.
.293e	29 3f		and #$3f			and 	#IFXMask
.2940	0d 02 05	ora $0502			ora 	IFNewSign
.2943	85 1b		sta $1b				sta 	IFRTemp+IExp
.2945	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.2947	20 51 2b	jsr $2b51			jsr 	IFloatCopyFromRegister
.294a	18		clc				clc
.294b	60		rts				rts
.294c					_IFDFDivZero:
.294c	38		sec				sec
.294d	60		rts				rts
.294e					IFloatDivideSupport:
.294e	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2950	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.2953	5a		phy				phy 								; main division loop x 23
.2954	a0 17		ldy #$17			ldy 	#23
.2956					_IFDSLoop:
.2956	20 89 27	jsr $2789			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2959	20 7d 27	jsr $277d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.295c	88		dey				dey
.295d	d0 f7		bne $2956			bne 	_IFDSLoop 					; do it 24 times
.295f	7a		ply				ply
.2960	60		rts				rts
.2961					IFloatIntegerToStringR0:
.2961	8d 03 05	sta $0503			sta 	IFBase 						; save base to use.
.2964	20 41 2c	jsr $2c41			jsr 	IFloatBufferReset			; empty buffer
.2967	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2969	29 3f		and #$3f			and 	#IFXMask
.296b	d0 1e		bne $298b			bne 	_IFIFail
.296d	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.296f	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.2972	f0 0e		beq $2982			beq 	_IFINotNegative
.2974	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2976	29 40		and #$40			and 	#IFSign
.2978	f0 08		beq $2982			beq 	_IFINotNegative
.297a	a9 2d		lda #$2d			lda 	#"-"						; output -
.297c	20 50 2c	jsr $2c50			jsr 	IFloatBufferWrite
.297f	20 cb 2b	jsr $2bcb			jsr 	IFloatNegate 				; tidy up !
.2982					_IFINotNegative:
.2982	20 8d 29	jsr $298d			jsr 	_IFIRecursiveConvert 		; start converting
.2985	20 48 2c	jsr $2c48			jsr 	IFloatGetBufferAddress
.2988	18		clc				clc
.2989	80 01		bra $298c			bra 	_IFIExit
.298b					_IFIFail:
.298b	38		sec				sec
.298c					_IFIExit:
.298c	60		rts				rts
.298d					_IFIRecursiveConvert:
.298d	a2 10		ldx #$10			ldx 	#IFR1
.298f	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister 		; R0->R1
.2992	a2 0c		ldx #$0c			ldx 	#IFR0
.2994	ad 03 05	lda $0503			lda 	IFBase 						; Base -> R0
.2997	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.299a	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.299c	20 25 27	jsr $2725			jsr 	IFloatDivideInteger
.299f	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.29a1	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero
.29a4	f0 09		beq $29af			beq 	_IFIOutDigit
.29a6	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.29a8	48		pha				pha
.29a9	20 8d 29	jsr $298d			jsr 	_IFIRecursiveConvert 		; convert the divider
.29ac	68		pla				pla
.29ad	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.29af					_IFIOutDigit:
.29af	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.29b1	c9 0a		cmp #$0a			cmp	 	#10
.29b3	90 02		bcc $29b7			bcc 	_IFINotHex
.29b5	69 06		adc #$06			adc 	#6
.29b7					_IFINotHex:
.29b7	69 30		adc #$30			adc 	#48
.29b9	20 50 2c	jsr $2c50			jsr 	IFloatBufferWrite
.29bc	60		rts				rts
.0503					IFBase:
>0503							.fill 	1
.29bd					IFloatFloatToStringR0:
.29bd	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.29bf	20 0f 2b	jsr $2b0f			jsr 	IFloatPushRx
.29c2	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister
.29c5	20 c0 28	jsr $28c0			jsr 	IFloatIntegerR0				; make R0 integer
.29c8	a9 0a		lda #$0a			lda 	#10 						; base 10.
.29ca	20 61 29	jsr $2961			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.29cd	9c 04 05	stz $0504			stz 	IFloatDecimalCount 			; zero the decimal count.
.29d0	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.29d2	29 3f		and #$3f			and 	#IFXMask
.29d4	f0 44		beq $2a1a			beq 	_IFFSExit
.29d6					_IFloatFracLoop:
.29d6	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.29d8	20 51 2b	jsr $2b51			jsr 	IFloatCopyFromRegister
.29db	20 6a 28	jsr $286a			jsr 	IFloatFractionalR0
.29de	20 f7 2b	jsr $2bf7			jsr 	IFloatNormalise
.29e1	a2 14		ldx #$14			ldx 	#IFR2
.29e3	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister 		; copy to R2
.29e6	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.29e8	a9 0a		lda #$0a			lda 	#10
.29ea	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.29ed	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.29ef	20 60 26	jsr $2660			jsr 	IFloatMultiply
.29f2	a2 14		ldx #$14			ldx 	#IFR2
.29f4	20 62 2b	jsr $2b62			jsr 	IFloatCopyToRegister
.29f7	20 c0 28	jsr $28c0			jsr 	IFloatIntegerR0 			; get integer part of R0
.29fa	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; done 5 dp, no more
.29fd	c9 03		cmp #$03			cmp 	#3
.29ff	f0 16		beq $2a17			beq 	_IFFSExitStripZero
.2a01	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; written the DP yet ?
.2a04	d0 05		bne $2a0b			bne 	_IFloatNotFirst
.2a06	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2a08	20 50 2c	jsr $2c50			jsr 	IFloatBufferWrite
.2a0b					_IFloatNotFirst:
.2a0b	ee 04 05	inc $0504			inc 	IFloatDecimalCount
.2a0e	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2a10	09 30		ora #$30			ora 	#"0"						; ASCII
.2a12	20 50 2c	jsr $2c50			jsr 	IFloatBufferWrite 			; write to the buffer.
.2a15	80 bf		bra $29d6			bra 	_IFloatFracLoop
.2a17					_IFFSExitStripZero:
.2a17	20 5f 2c	jsr $2c5f			jsr 	IFloatStripTrailingZeros
.2a1a					_IFFSExit:
.2a1a	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.2a1c	20 30 2b	jsr $2b30			jsr 	IFloatPullRx
.2a1f	20 48 2c	jsr $2c48			jsr 	IFloatGetBufferAddress
.2a22	18		clc				clc
.2a23	60		rts				rts
.0504					IFloatDecimalCount:
>0504							.fill 	1
.2a24					IFloatStringToFloatR0:
.2a24	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.2a27	86 0a		stx $0a				stx 	iTemp0
.2a29	84 0b		sty $0b				sty 	iTemp0+1
.2a2b	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2a2d	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.2a30	9c 06 05	stz $0506			stz 	IFSignFlag 					; clear the sign flag
.2a33	20 c0 2a	jsr $2ac0			jsr 	IFSTFGetNext 				; get first
.2a36	f0 1b		beq $2a53			beq 	_IFSTFFail 					; no character
.2a38	90 10		bcc $2a4a			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2a3a	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2a3c	d0 15		bne $2a53			bne 	_IFSTFFail
.2a3e	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2a40	8d 06 05	sta $0506			sta 	IFSignFlag
.2a43					_IFSTFLoop:
.2a43	20 c0 2a	jsr $2ac0			jsr 	IFSTFGetNext 				; get next
.2a46	b0 0b		bcs $2a53			bcs 	_IFSTFFail 					; bad character.
.2a48	f0 11		beq $2a5b			beq 	_IFSTFExit 					; end of data
.2a4a					_IFSTFHaveChar:
.2a4a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2a4c	f0 08		beq $2a56			beq 	_IFSTFDecimal
.2a4e	20 e4 2a	jsr $2ae4			jsr 	IFSTFAddR0 					; add number in
.2a51	80 f0		bra $2a43			bra 	_IFSTFLoop 					; keep going until . or end.
.2a53					_IFSTFFail:
.2a53	38		sec				sec
.2a54	80 0d		bra $2a63			bra 	_IFSTFReturn
.2a56					_IFSTFDecimal:
.2a56	20 6b 2a	jsr $2a6b			jsr 	IFSTFDecimal 				; call the decimal places code.
.2a59	b0 08		bcs $2a63			bcs 	_IFSTFReturn 				; error
.2a5b					_IFSTFExit:
.2a5b	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2a5d	0d 06 05	ora $0506			ora 	IFSignFlag
.2a60	85 0f		sta $0f				sta 	IFR0+IExp
.2a62	18		clc				clc
.2a63					_IFSTFReturn:
.2a63	60		rts				rts
.2a64					IFloatAddDecimalToR0:
.2a64	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.2a67	86 0a		stx $0a				stx 	iTemp0
.2a69	84 0b		sty $0b				sty 	iTemp0+1
.2a6b					IFSTFDecimal:
.2a6b	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2a6d	20 0f 2b	jsr $2b0f			jsr 	IFloatPushRx
.2a70	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2a72	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero
.2a75	9c 07 05	stz $0507			stz 	IFDecimalPlaces
.2a78					_IFSTDLoop:
.2a78	20 c0 2a	jsr $2ac0			jsr 	IFSTFGetNext 				; get next
.2a7b	b0 41		bcs $2abe			bcs 	_IFSTFFail2 				; bad character.
.2a7d	f0 11		beq $2a90			beq 	_IFSTFComplete 				; end of data, work out the result.
.2a7f	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2a81	f0 39		beq $2abc			beq 	_IFSTFExit2
.2a83	20 e4 2a	jsr $2ae4			jsr 	IFSTFAddR0 					; add number in
.2a86	ee 07 05	inc $0507			inc 	IFDecimalPlaces 			; count decimals
.2a89	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2a8c	c9 03		cmp #$03			cmp 	#3
.2a8e	90 e8		bcc $2a78			bcc 	_IFSTDLoop
.2a90					_IFSTFComplete:
.2a90	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2a93	f0 27		beq $2abc			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2a95	3a		dec a				dec 	a 							; table indexed from 1.
.2a96	0a		asl a				asl 	a
.2a97	0a		asl a				asl 	a
.2a98	aa		tax				tax
.2a99	bd fb 2a	lda $2afb,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2a9c	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2a9e	bd fc 2a	lda $2afc,x			lda 	TableTen+1,x
.2aa1	85 11		sta $11				sta  	IFR1+IM1
.2aa3	bd fd 2a	lda $2afd,x			lda 	TableTen+2,x
.2aa6	85 12		sta $12				sta  	IFR1+IM2
.2aa8	bd fe 2a	lda $2afe,x			lda 	TableTen+3,x
.2aab	85 13		sta $13				sta  	IFR1+IExp
.2aad	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2aaf	20 60 26	jsr $2660			jsr 	IFloatMultiply
.2ab2	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2ab4	20 30 2b	jsr $2b30			jsr 	IFloatPullRx
.2ab7	a2 10		ldx #$10			ldx 	#IFR1
.2ab9	20 b6 25	jsr $25b6			jsr 	IFloatAdd
.2abc					_IFSTFExit2:
.2abc	18		clc				clc
.2abd	60		rts				rts
.2abe					_IFSTFFail2:
.2abe	38		sec				sec
.2abf	60		rts				rts
.2ac0					IFSTFGetNext:
.2ac0	ad 05 05	lda $0505			lda 	IFCount  					; if count is zero, return with Z set.
.2ac3	f0 19		beq $2ade			beq 	_IFSTFReturnOk
.2ac5	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2ac7	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2ac9	d0 02		bne $2acd			bne 	_IFSTFGNNoCarry
.2acb	e6 0b		inc $0b				inc 	iTemp0+1
.2acd					_IFSTFGNNoCarry:
.2acd	ce 05 05	dec $0505			dec 	IFCount 					; dec count.
.2ad0	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2ad2	f0 08		beq $2adc			beq 	_IFSTFGOkay
.2ad4	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2ad6	90 08		bcc $2ae0			bcc 	_IFSTFGFail
.2ad8	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2ada	b0 04		bcs $2ae0			bcs 	_IFSTFGFail
.2adc					_IFSTFGOkay:
.2adc	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ade					_IFSTFReturnOk:
.2ade	18		clc				clc
.2adf	60		rts				rts
.2ae0					_IFSTFGFail:
.2ae0	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ae2	38		sec				sec
.2ae3	60		rts				rts
.2ae4					IFSTFAddR0:
.2ae4	29 0f		and #$0f			and 	#15 						; to int value
.2ae6	48		pha				pha 								; save it.
.2ae7	a9 0a		lda #$0a			lda 	#10
.2ae9	a2 10		ldx #$10			ldx 	#IFR1
.2aeb	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.2aee	20 60 26	jsr $2660			jsr 	IFloatMultiply
.2af1	68		pla				pla
.2af2	a2 10		ldx #$10			ldx 	#IFR1
.2af4	20 c2 2b	jsr $2bc2			jsr 	IFloatSetByte
.2af7	20 b6 25	jsr $25b6			jsr 	IFloatAdd
.2afa	60		rts				rts
.0505					IFCount:
>0505							.fill 	1
.0506					IFSignFlag:
>0506							.fill 	1
.0507					IFDecimalPlaces:
>0507							.fill 	1
.2afb					TableTen:
>2afb	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2aff	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2b03	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2b07	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2b0b	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2b0f					IFloatPushRx:
.2b0f	5a		phy				phy
.2b10	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2b13	b5 00		lda $00,x			lda 	IM0,x
.2b15	99 09 05	sta $0509,y			sta 	IFStack,y
.2b18	b5 01		lda $01,x			lda 	IM1,x
.2b1a	99 0a 05	sta $050a,y			sta 	IFStack+1,y
.2b1d	b5 02		lda $02,x			lda 	IM2,x
.2b1f	99 0b 05	sta $050b,y			sta 	IFStack+2,y
.2b22	b5 03		lda $03,x			lda 	IExp,x
.2b24	99 0c 05	sta $050c,y			sta 	IFStack+3,y
.2b27	c8		iny				iny
.2b28	c8		iny				iny
.2b29	c8		iny				iny
.2b2a	c8		iny				iny
.2b2b	8c 08 05	sty $0508			sty 	IFStackIndex
.2b2e	7a		ply				ply
.2b2f	60		rts				rts
.2b30					IFloatPullRx:
.2b30	5a		phy				phy
.2b31	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2b34	88		dey				dey
.2b35	88		dey				dey
.2b36	88		dey				dey
.2b37	88		dey				dey
.2b38	b9 09 05	lda $0509,y			lda 	IFStack,y
.2b3b	95 00		sta $00,x			sta 	IM0,x
.2b3d	b9 0a 05	lda $050a,y			lda 	IFStack+1,y
.2b40	95 01		sta $01,x			sta 	IM1,x
.2b42	b9 0b 05	lda $050b,y			lda 	IFStack+2,y
.2b45	95 02		sta $02,x			sta 	IM2,x
.2b47	b9 0c 05	lda $050c,y			lda 	IFStack+3,y
.2b4a	95 03		sta $03,x			sta 	IExp,x
.2b4c	8c 08 05	sty $0508			sty 	IFStackIndex
.2b4f	7a		ply				ply
.2b50	60		rts				rts
.0508					IFStackIndex:
>0508							.fill 	1
.0509					IFStack:
>0509							.fill 	16*4
.2b51					IFloatCopyFromRegister:
.2b51	b5 00		lda $00,x			lda 	0,x
.2b53	85 0c		sta $0c				sta 	IFR0
.2b55	b5 01		lda $01,x			lda 	1,x
.2b57	85 0d		sta $0d				sta 	IFR0+1
.2b59	b5 02		lda $02,x			lda 	2,x
.2b5b	85 0e		sta $0e				sta 	IFR0+2
.2b5d	b5 03		lda $03,x			lda 	3,x
.2b5f	85 0f		sta $0f				sta 	IFR0+3
.2b61	60		rts				rts
.2b62					IFloatCopyToRegister:
.2b62	a5 0c		lda $0c				lda 	IFR0
.2b64	95 00		sta $00,x			sta 	0,x
.2b66	a5 0d		lda $0d				lda 	IFR0+1
.2b68	95 01		sta $01,x			sta 	1,x
.2b6a	a5 0e		lda $0e				lda 	IFR0+2
.2b6c	95 02		sta $02,x			sta 	2,x
.2b6e	a5 0f		lda $0f				lda 	IFR0+3
.2b70	95 03		sta $03,x			sta 	3,x
.2b72	60		rts				rts
.2b73					IFloatLoadInline:
.2b73	68		pla				pla 								; pop address off to iTemp0
.2b74	85 0a		sta $0a				sta 	iTemp0
.2b76	68		pla				pla
.2b77	85 0b		sta $0b				sta 	iTemp0+1
.2b79	a0 01		ldy #$01			ldy 	#1
.2b7b	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2b7d	95 00		sta $00,x			sta 	0,x
.2b7f	c8		iny				iny
.2b80	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2b82	95 01		sta $01,x			sta 	1,x
.2b84	c8		iny				iny
.2b85	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2b87	95 02		sta $02,x			sta 	2,x
.2b89	c8		iny				iny
.2b8a	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2b8c	95 03		sta $03,x			sta 	3,x
.2b8e	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2b8f	a5 0a		lda $0a				lda 	iTemp0
.2b91	69 05		adc #$05			adc 	#5
.2b93	85 0a		sta $0a				sta 	iTemp0
.2b95	90 02		bcc $2b99			bcc 	_IFLINoCarry
.2b97	e6 0b		inc $0b				inc 	iTemp0+1
.2b99					_IFLINoCarry:
.2b99	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2b9c					IFloatMultiply8BitRx:
.2b9c	5a		phy		        phy
.2b9d	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2b9f	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2ba1	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2ba2	85 0c		sta $0c		        sta     IFR0+IM0
.2ba4	84 0d		sty $0d		        sty     IFR0+IM1
.2ba6	a9 00		lda #$00	        lda     #0
.2ba8	a0 08		ldy #$08	        ldy     #8
.2baa					_IFMLoop:
.2baa	90 03		bcc $2baf	        bcc     _IFMNoAdd
.2bac	18		clc		        clc
.2bad	65 0d		adc $0d		        adc     IFR0+IM1
.2baf					_IFMNoAdd:
.2baf	6a		ror a		        ror     a
.2bb0	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2bb2	88		dey		        dey
.2bb3	d0 f5		bne $2baa	        bne     _IFMLoop
.2bb5	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2bb7	7a		ply		        ply
.2bb8	60		rts		        rts
.2bb9					IFloatCheckZero:
.2bb9	b5 00		lda $00,x			lda 	IM0,x
.2bbb	15 01		ora $01,x			ora 	IM1,x
.2bbd	15 02		ora $02,x			ora 	IM2,x
.2bbf	60		rts				rts
.2bc0					IFloatSetZero:
.2bc0	a9 00		lda #$00			lda 	#0
.2bc2					IFloatSetByte:
.2bc2	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2bc4	74 01		stz $01,x			stz 	IM1,x
.2bc6	74 02		stz $02,x			stz 	IM2,x
.2bc8	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2bca	60		rts				rts
.2bcb					IFloatNegate:
.2bcb	b5 03		lda $03,x			lda 	IExp,x
.2bcd	49 40		eor #$40			eor 	#IFSign
.2bcf	95 03		sta $03,x			sta 	IExp,x
.2bd1	18		clc				clc
.2bd2	60		rts				rts
.2bd3					IFloatMantissaNegate:
.2bd3	38		sec				sec
.2bd4	a9 00		lda #$00			lda 	#0
.2bd6	f5 00		sbc $00,x			sbc 	IM0,x
.2bd8	95 00		sta $00,x			sta 	IM0,x
.2bda	a9 00		lda #$00			lda 	#0
.2bdc	f5 01		sbc $01,x			sbc 	IM1,x
.2bde	95 01		sta $01,x			sta 	IM1,x
.2be0	a9 00		lda #$00			lda 	#0
.2be2	f5 02		sbc $02,x			sbc 	IM2,x
.2be4	95 02		sta $02,x			sta 	IM2,x
.2be6	60		rts				rts
.2be7					IFloatShiftLeft:
.2be7	18		clc				clc
.2be8					IFloatRotateLeft:
.2be8	36 00		rol $00,x			rol 	IM0,x
.2bea	36 01		rol $01,x			rol 	IM1,x
.2bec	36 02		rol $02,x			rol 	IM2,x
.2bee	60		rts				rts
.2bef					IFloatShiftRight:
.2bef	18		clc				clc
.2bf0					IFloatRotateRight:
.2bf0	76 02		ror $02,x			ror 	IM2,x
.2bf2	76 01		ror $01,x			ror 	IM1,x
.2bf4	76 00		ror $00,x			ror 	IM0,x
.2bf6	60		rts				rts
.2bf7					IFloatNormalise:
.2bf7	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; is it zero
.2bfa	f0 18		beq $2c14			beq 	_IFNExitZero 				; if so exit
.2bfc					_IFNLoop:
.2bfc	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2bfe	29 c0		and #$c0			and 	#$C0
.2c00	c9 40		cmp #$40			cmp 	#$40
.2c02	f0 13		beq $2c17			beq 	_IFNExitOkay 				; if so , then we are done.
.2c04	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2c06	29 3f		and #$3f			and 	#$3F
.2c08	c9 20		cmp #$20			cmp 	#$20
.2c0a	f0 0b		beq $2c17			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2c0c	20 2d 2c	jsr $2c2d			jsr 	IFloatDecExponent
.2c0f	20 e7 2b	jsr $2be7			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2c12	80 e8		bra $2bfc			bra 	_IFNLoop
.2c14					_IFNExitZero:
.2c14	20 c0 2b	jsr $2bc0			jsr 	IFloatSetZero 				; set the result to zero
.2c17					_IFNExitOkay:
.2c17	18		clc				clc  								; return with CC.
.2c18	60		rts				rts
.2c19					IFloatIncExponent:
.2c19	b5 03		lda $03,x			lda 	IExp,x
.2c1b	48		pha				pha
.2c1c	29 c0		and #$c0			and 	#$C0
.2c1e	8d 49 05	sta $0549			sta 	IFXTemp
.2c21	68		pla				pla
.2c22	1a		inc a				inc 	a
.2c23	29 3f		and #$3f			and 	#$3F
.2c25	48		pha				pha
.2c26	0d 49 05	ora $0549			ora 	IFXTemp
.2c29	95 03		sta $03,x			sta 	IExp,x
.2c2b	68		pla				pla
.2c2c	60		rts				rts
.2c2d					IFloatDecExponent:
.2c2d	b5 03		lda $03,x			lda 	IExp,x
.2c2f	48		pha				pha
.2c30	29 c0		and #$c0			and 	#$C0
.2c32	8d 49 05	sta $0549			sta 	IFXTemp
.2c35	68		pla				pla
.2c36	3a		dec a				dec 	a
.2c37	29 3f		and #$3f			and 	#$3F
.2c39	48		pha				pha
.2c3a	0d 49 05	ora $0549			ora 	IFXTemp
.2c3d	95 03		sta $03,x			sta 	IExp,x
.2c3f	68		pla				pla
.2c40	60		rts				rts
.0549					IFXTemp:
>0549							.fill 	1
.2c41					IFloatBufferReset:
.2c41	9c 4a 05	stz $054a			stz 	IFBufferCount
.2c44	9c 4b 05	stz $054b			stz 	IFBuffer
.2c47	60		rts				rts
.2c48					IFloatGetBufferAddress:
.2c48	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2c4a	a2 4b		ldx #$4b			ldx 	#(IFBuffer & $FF)
.2c4c	ad 4a 05	lda $054a			lda 	IFBufferCount
.2c4f	60		rts				rts
.2c50					IFloatBufferWrite:
.2c50	da		phx				phx
.2c51	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c54	9d 4b 05	sta $054b,x			sta 	IFBuffer,x
.2c57	9e 4c 05	stz $054c,x			stz 	IFBuffer+1,x
.2c5a	ee 4a 05	inc $054a			inc 	IFBufferCount
.2c5d	fa		plx				plx
.2c5e	60		rts				rts
.2c5f					IFloatStripTrailingZeros:
.2c5f	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c62	bd 4a 05	lda $054a,x			lda 	IFBuffer-1,x
.2c65	c9 30		cmp #$30			cmp		#"0"
.2c67	d0 0f		bne $2c78			bne 	_IFSTExit
.2c69	bd 49 05	lda $0549,x			lda 	IFBuffer-2,x
.2c6c	c9 2e		cmp #$2e			cmp 	#"."
.2c6e	f0 08		beq $2c78			beq 	_IFSTExit
.2c70	ce 4a 05	dec $054a			dec 	IFBufferCount
.2c73	9e 4a 05	stz $054a,x			stz 	IFBuffer-1,x
.2c76	80 e7		bra $2c5f			bra 	IFloatStripTrailingZeros
.2c78					_IFSTExit:
.2c78	60		rts				rts
.054a					IFBufferCount:
>054a							.fill 	1
.054b					IFBuffer:
>054b							.fill 	25
.2c79					IFloatCheck:
.2c79	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2c7b	09 40		ora #$40			ora 	#IFSign
.2c7d	85 0f		sta $0f				sta 	IFR0+IExp
.2c7f	20 b6 25	jsr $25b6			jsr 	IFloatAdd 					; add allowed to error.
.2c82	a2 0c		ldx #$0c			ldx 	#IFR0
.2c84	20 b9 2b	jsr $2bb9			jsr 	IFloatCheckZero 			; error if < 0
.2c87	f0 06		beq $2c8f			beq 	_IFAOkay
.2c89	a5 0f		lda $0f				lda 	IFR0+IExp
.2c8b	29 40		and #$40			and 	#IFSign
.2c8d	d0 01		bne $2c90			bne 	_IFAFail
.2c8f					_IFAOkay:
.2c8f	60		rts				rts
.2c90					_IFAFail:
.2c90	38		sec				sec
.2c91	68		pla				pla 								; get address - 2
.2c92	e9 02		sbc #$02			sbc 	#2
.2c94	aa		tax				tax
.2c95	68		pla				pla
.2c96	e9 00		sbc #$00			sbc 	#0
.2c98	a8		tay				tay
.2c99	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2c9b					_IFAStop:
>2c9b	db						.byte 	$DB 						; display an error AA ADR ADR
.2c9c	80 fd		bra $2c9b			bra 	_IFAStop

;******  Return to file: basic.asm

.2c9e					NotImplemented:
.2c9e	a9 ff		lda #$ff			lda 	#$FF
.2ca0	80 04		bra $2ca6			bra 	EnterDbg
.2ca2					ErrorHandler:
.2ca2	fa		plx				plx
.2ca3	7a		ply				ply
.2ca4	a9 ee		lda #$ee			lda 	#$EE
.2ca6					EnterDbg:
>2ca6	db						.byte 	$DB
.2ca7	4c a6 2c	jmp $2ca6			jmp 	EnterDbg

;******  End of listing
