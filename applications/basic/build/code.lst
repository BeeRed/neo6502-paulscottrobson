
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Wed Jun 28 16:11:44 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffdf					OSEnterLine              = $ffdf ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboard           = $ffeb ; Read A from keyboard, CC = success, CS = no key
=$ffee					OSReadKeystroke          = $ffee ; Read A from keyboard, display cursor, wait for key.
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen, CC = success
=$fff4					OSWriteString            = $fff4 ; Write length prefixed string YX to screen
=$fff7					OSGetScreenSize          = $fff7 ; Get size of screen to XY

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 86 1f	jsr $1f86			jsr 	PGMSetBaseAddress
.1007	20 10 2b	jsr $2b10			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c c1 14	jmp $14c1			jmp 	Command_RUN
.1012	4c 09 14	jmp $1409			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_STANDARD_LAST = $a1
=$a1					PR_DATA = $a1
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; get a number to assert
.1018	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.101a	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail 					; if so, the assert fails.
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 26 26	jmp $2626		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c c0 26	jmp $26c0		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 99 1f	jsr $1f99			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1049	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.104b	1a		inc a				inc 	a
.104c	85 29		sta $29				sta 	freeMemory+1
.104e	20 af 2a	jsr $2aaf			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 f4 27	jsr $27f4			jsr 	StackReset 					; page passed on in A
.1057	20 53 28	jsr $2853			jsr 	StringSystemInitialise
.105a	20 3b 25	jsr $253b			jsr 	ScanProcedures
.105d	20 93 14	jsr $1493			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.1064	5a		phy				phy
.1065	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 28		sta ($28)			sta 	(freeMemory)
.1075	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 29		inc $29				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.108c	1a		inc a				inc 	a 							; spacing 2 pages
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c c0 26	jmp $26c0		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 66 2a	jsr $2a66			jsr 	VARGetInfo 					; get information
.10a2	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 18 2a	jsr $2a18			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 c4 29	jsr $29c4			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 24		sty $24				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 22		sty $22				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 23		sty $23				sty 	zTemp0+1
.10c3	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 22		sta ($22),y			sta 	(zTemp0),y
.10ca	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10cc	20 85 27	jsr $2785			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c d0 25	jmp $25d0		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c 98 26	jmp $2698		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 8d 27	jsr $278d			jsr 	ERRCheckComma 				; check comma
.10fb	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.110d	85 26		sta $26				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 26		sta ($26),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 26		sta ($26),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 26		lda $26				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 26		sta $26				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 27		inc $27				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.114c	86 23		stx $23				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 22		lda ($22),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 22		lda ($22)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 22		sta ($22),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 22		lda $22				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 22		sta $22				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 23		inc $23				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 23		rol $23				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 23		rol $23				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 23		inc $23				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.119e	85 22		sta $22				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 22		sta ($22)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 22		sta ($22),y			sta 	(zTemp0),y
.11ad	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c e1 25	jmp $25e1		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 8d 27	jsr $278d			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 23		sta $23				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 22		sta $22				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 22		sta ($22)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 22		sta ($22),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11dd					Command_GOTO:
.11dd	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; get line number
.11e0					GotoR0:
.11e0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11e3	85 19		sta $19				sta 	codePtr+1
.11e5	64 18		stz $18				stz 	codePtr
.11e7					_GOSearch:
.11e7	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e9	f0 1f		beq $120a			beq 	_GOError
.11eb	a0 01		ldy #$01			ldy 	#1 							; found line #
.11ed	b1 18		lda ($18),y			lda 	(codePtr),y
.11ef	c5 08		cmp $08				cmp 	IFR0+IM0
.11f1	d0 0a		bne $11fd			bne 	_GONext
.11f3	c8		iny				iny
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y
.11f6	c5 09		cmp $09				cmp 	IFR0+IM1
.11f8	d0 03		bne $11fd			bne 	_GONext
.11fa	4c d8 14	jmp $14d8			jmp 	RUNNewLine
.11fd					_GONext:
.11fd	18		clc				clc 								; advance to next line.
.11fe	b2 18		lda ($18)			lda 	(codePtr)
.1200	65 18		adc $18				adc 	codePtr
.1202	85 18		sta $18				sta 	codePtr
.1204	90 e1		bcc $11e7			bcc 	_GOSearch
.1206	e6 19		inc $19				inc 	codePtr+1
.1208	80 dd		bra $11e7			bra 	_GOSearch
.120a					_GOError:
.120a	4c 65 27	jmp $2765		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.120d					Command_Input:
.120d	a9 ff		lda #$ff			lda 	#$FF
.120f	8d 06 05	sta $0506			sta 	InputFlag
.1212	80 03		bra $1217			bra 	Command_IP_Main
.1214					Command_Print:
.1214	9c 06 05	stz $0506			stz 	InputFlag
.1217					Command_IP_Main:
.1217	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1218					_CPLoop:
.1218	08		php				php 								; save last action flag
.1219	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.121b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.121d	f0 48		beq $1267			beq 	_CPExit 					; without consuming
.121f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1221	f0 44		beq $1267			beq 	_CPExit
.1223	68		pla				pla 								; throw last action flag
.1224	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1226	c8		iny				iny
.1227	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1229	f0 39		beq $1264			beq 	_CPContinueWithSameLine
.122b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.122d	f0 30		beq $125f			beq 	_CPTab
.122f	88		dey				dey 								; undo the get.
.1230	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1233	10 0b		bpl $1240			bpl	 	_CPNotInput
.1235	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1237	c9 40		cmp #$40			cmp 	#$40
.1239	d0 05		bne $1240			bne 	_CPNotInput
.123b	20 70 12	jsr $1270			jsr 	_CPInputCode 				; input code
.123e	80 d7		bra $1217			bra 	Command_IP_Main 			; and go round again.
.1240					_CPNotInput:
.1240	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1243	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1245	10 0e		bpl $1255			bpl 	_CPNumber
.1247	5a		phy				phy
.1248	18		clc				clc 								; string address to YX
.1249	a5 08		lda $08				lda 	IFR0+IM0
.124b	aa		tax				tax
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	a8		tay				tay
.124f	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print YX
.1252	7a		ply				ply
.1253	80 c2		bra $1217			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1255					_CPNumber:
.1255	5a		phy				phy
.1256	20 20 2f	jsr $2f20			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1259	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print string at YX
.125c	7a		ply				ply
.125d	80 b8		bra $1217			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125f					_CPTab:
.125f	a9 09		lda #$09			lda 	#9 							; print TAB
.1261	20 bc 12	jsr $12bc			jsr 	CPPrintA
.1264					_CPContinueWithSameLine:
.1264	38		sec				sec 								; loop round with carry set, which
.1265	80 b1		bra $1218			bra 	_CPLoop 					; will inhibit final CR
.1267					_CPExit:
.1267	28		plp				plp 								; get last action flag
.1268	b0 05		bcs $126f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.126a	a9 0d		lda #$0d			lda 	#13 						; print new line
.126c	20 bc 12	jsr $12bc			jsr 	CPPrintA
.126f					_CPExit2:
.126f	60		rts				rts
.1270					_CPInputCode:
.1270	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get the term.
.1273	5a		phy				phy 								; save position
.1274	20 b9 12	jsr $12b9			jsr 	CPInputA					; input a line to YX
.1277	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1279	30 18		bmi $1293			bmi 	_CPInputString
.127b	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127d	48		pha				pha
.127e	a5 09		lda $09				lda 	IFR0+IM1
.1280	48		pha				pha
.1281	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1283	84 23		sty $23				sty 	zTemp0+1
.1285	20 7e 1a	jsr $1a7e			jsr 	VALConversionZTemp0
.1288	68		pla				pla 								; do the assign.
.1289	85 23		sta $23				sta 	zTemp0+1
.128b	68		pla				pla
.128c	85 22		sta $22				sta 	zTemp0
.128e	20 e4 12	jsr $12e4			jsr 	AssignNumber
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					_CPInputString:
.1293	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1295	85 22		sta $22				sta 	zTemp0
.1297	a5 09		lda $09				lda 	IFR0+IM1
.1299	85 23		sta $23				sta 	zTemp0+1
.129b	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129d	84 09		sty $09				sty 	IFR0+IM1
.129f	20 fb 12	jsr $12fb			jsr 	AssignString 				; assign the string
.12a2	7a		ply				ply 								; exit
.12a3	60		rts				rts
.12a4					CPPrintYX:
.12a4	86 22		stx $22				stx 	zTemp0
.12a6	84 23		sty $23				sty 	zTemp0+1
.12a8	b2 22		lda ($22)			lda 	(zTemp0)
.12aa	aa		tax				tax
.12ab	f0 0b		beq $12b8			beq 	_CPPrintExit
.12ad	a0 01		ldy #$01			ldy 	#1
.12af					_CPPrintAYXLoop:
.12af	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b1	20 bc 12	jsr $12bc			jsr 	CPPrintA
.12b4	c8		iny				iny
.12b5	ca		dex				dex
.12b6	d0 f7		bne $12af			bne 	_CPPrintAYXLoop
.12b8					_CPPrintExit:
.12b8	60		rts				rts
.12b9					CPInputA:
.12b9	4c df ff	jmp $ffdf			jmp 	OSEnterLine
.12bc					CPPrintA:
.12bc	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12bf					CommandLET:
.12bf	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get term
.12c2	90 6f		bcc $1333			bcc 	CLError 					; must be a reference term.
.12c4	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c6	48		pha				pha
.12c7	a5 09		lda $09				lda 	IFR0+IM1
.12c9	48		pha				pha
.12ca	a5 0b		lda $0b				lda 	IFR0+IExp
.12cc	48		pha				pha
.12cd	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12cf	20 95 27	jsr $2795			jsr 	ERRCheckA
.12d2	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; right hand side.
.12d5	68		pla				pla 								; type of l-expr
.12d6	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d8	30 5c		bmi $1336			bmi 	CLType
.12da	fa		plx				plx 	 							; pop target address to zTemp0
.12db	86 23		stx $23				stx 	zTemp0+1
.12dd	fa		plx				plx
.12de	86 22		stx $22				stx 	zTemp0
.12e0					AssignData:
.12e0	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e2	30 17		bmi $12fb			bmi 	AssignString
.12e4					AssignNumber:
.12e4	5a		phy				phy
.12e5	a0 03		ldy #$03			ldy 	#3
.12e7	a5 0b		lda $0b				lda 	IFR0+IExp
.12e9	91 22		sta ($22),y			sta 	(zTemp0),y
.12eb	88		dey				dey
.12ec	a5 0a		lda $0a				lda 	IFR0+IM2
.12ee	91 22		sta ($22),y			sta 	(zTemp0),y
.12f0	88		dey				dey
.12f1	a5 09		lda $09				lda 	IFR0+IM1
.12f3	91 22		sta ($22),y			sta 	(zTemp0),y
.12f5	a5 08		lda $08				lda 	IFR0+IM0
.12f7	92 22		sta ($22)			sta 	(zTemp0)
.12f9	7a		ply				ply
.12fa	60		rts				rts
.12fb					AssignString:
.12fb	5a		phy				phy
.12fc	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fe	b1 22		lda ($22),y			lda 	(zTemp0),y
.1300	12 22		ora ($22)			ora 	(zTemp0)
.1302	f0 23		beq $1327			beq 	_CLConcreteString
.1304	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1306	85 24		sta $24				sta 	zTemp1
.1308	b1 22		lda ($22),y			lda 	(zTemp0),y
.130a	85 25		sta $25				sta 	zTemp1+1
.130c	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.130e	38		sec				sec 								; we want 3 for slot size, status, string size.
.130f	e9 03		sbc #$03			sbc 	#3
.1311	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1313	90 12		bcc $1327			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1315	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1317	1a		inc a				inc 	a
.1318	aa		tax				tax
.1319	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131b					_CLReplaceString:
.131b	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.131d	c8		iny				iny
.131e	c8		iny				iny
.131f	91 24		sta ($24),y			sta 	(zTemp1),y
.1321	88		dey				dey
.1322	ca		dex				dex
.1323	d0 f6		bne $131b			bne 	_CLReplaceString
.1325	80 0a		bra $1331			bra 	_CLExit
.1327					_CLConcreteString:
.1327	20 08 28	jsr $2808			jsr 	StringConcrete  			; concreted string in XA.
.132a	a0 01		ldy #$01			ldy 	#1 							; store the address
.132c	92 22		sta ($22)			sta 	(zTemp0)
.132e	8a		txa				txa
.132f	91 22		sta ($22),y			sta 	(zTemp0),y
.1331					_CLExit:
.1331	7a		ply				ply
.1332	60		rts				rts
.1333					CLError:
.1333	4c 03 27	jmp $2703		jmp	ErrorV_variable
.1336					CLType:
.1336	4c 00 26	jmp $2600		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1339					Command_LIST:
.1339	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.133c	9c 08 05	stz $0508			stz 	CLFrom+1
.133f	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1341	c9 99		cmp #$99			cmp 	#PR_COMMA
.1343	f0 1d		beq $1362			beq 	_CLToLine
.1345	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1347	f0 37		beq $1380			beq 	_CLDefaultTo
.1349	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.134c	a5 08		lda $08				lda 	IFR0+IM0
.134e	8d 07 05	sta $0507			sta 	CLFrom
.1351	8d 09 05	sta $0509			sta 	CLTo
.1354	a5 09		lda $09				lda 	IFR0+IM1
.1356	8d 08 05	sta $0508			sta 	CLFrom+1
.1359	8d 0a 05	sta $050a			sta 	CLTo+1
.135c	b1 18		lda ($18),y			lda 	(codePtr),y
.135e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1360	f0 26		beq $1388			beq 	_CLList
.1362					_CLToLine:
.1362	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1364	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1366	f0 18		beq $1380			beq 	_CLDefaultTo
.1368	20 8d 27	jsr $278d			jsr 	ERRCheckComma 				; sep comma
.136b	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.136d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136f	f0 0f		beq $1380			beq 	_CLDefaultTo
.1371	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; there's a To value.
.1374	a5 08		lda $08				lda 	IFR0+IM0
.1376	8d 09 05	sta $0509			sta 	CLTo
.1379	a5 09		lda $09				lda 	IFR0+IM1
.137b	8d 0a 05	sta $050a			sta 	CLTo+1
.137e	80 08		bra $1388			bra 	_CLList
.1380					_CLDefaultTo:
.1380	a9 ff		lda #$ff			lda 	#$FF
.1382	8d 09 05	sta $0509			sta 	CLTo
.1385	8d 0a 05	sta $050a			sta 	CLTo+1
.1388					_CLList:
.1388	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138b	85 19		sta $19				sta 	codePtr+1
.138d	64 18		stz $18				stz 	codePtr
.138f	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1391	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1393	20 dd 1d	jsr $1ddd			jsr 	TOKSetDetokeniseOutput
.1396					_CLLoop:
.1396	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1398	f0 4a		beq $13e4			beq 	_CLExit
.139a	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.139d	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.13a0	d0 45		bne $13e7			bne 	_CLBreak
.13a2	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a4	20 ea 13	jsr $13ea			jsr 	_CLCompareLine
.13a7	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a9	f0 2c		beq $13d7			beq 	_CLNext
.13ab	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13ad	20 ea 13	jsr $13ea			jsr 	_CLCompareLine
.13b0	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b2	f0 23		beq $13d7			beq 	_CLNext
.13b4	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	aa		tax				tax
.13b9	88		dey				dey
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y
.13bc	20 e6 28	jsr $28e6			jsr 	WriteIntXA
.13bf	a9 20		lda #$20			lda 	#32
.13c1	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13c4	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c6	a5 18		lda $18				lda 	codePtr
.13c8	18		clc				clc
.13c9	69 03		adc #$03			adc 	#3
.13cb	aa		tax				tax
.13cc	90 01		bcc $13cf			bcc 	_CLNoCarry2
.13ce	c8		iny				iny
.13cf					_CLNoCarry2:
.13cf	20 98 1d	jsr $1d98			jsr 	TOKDetokenise
.13d2	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d4	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13d7					_CLNext:
.13d7	18		clc				clc 								; advance to next line.
.13d8	b2 18		lda ($18)			lda 	(codePtr)
.13da	65 18		adc $18				adc 	codePtr
.13dc	85 18		sta $18				sta 	codePtr
.13de	90 02		bcc $13e2			bcc 	_CLNoCarry
.13e0	e6 19		inc $19				inc 	codePtr+1
.13e2					_CLNoCarry:
.13e2	80 b2		bra $1396			bra 	_CLLoop
.13e4					_CLExit:
.13e4	4c 05 29	jmp $2905			jmp 	WarmStart
.13e7					_CLBreak:
.13e7	4c 5b 27	jmp $275b		jmp	ErrorV_break
.13ea					_CLCompareLine:
.13ea	a0 01		ldy #$01			ldy 	#1
.13ec	38		sec				sec
.13ed	b1 18		lda ($18),y			lda 	(codePtr),y
.13ef	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f2	85 22		sta $22				sta 	zTemp0
.13f4	c8		iny				iny
.13f5	b1 18		lda ($18),y			lda 	(codePtr),y
.13f7	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13fa	90 0a		bcc $1406			bcc 	_CLIsNegative
.13fc	d0 05		bne $1403			bne 	_CLIsPositive
.13fe	a5 22		lda $22				lda 	zTemp0
.1400	d0 01		bne $1403			bne 	_CLIsPositive
.1402	60		rts				rts
.1403					_CLIsPositive:
.1403	a9 01		lda #$01			lda 	#1
.1405	60		rts				rts
.1406					_CLIsNegative:
.1406	a9 ff		lda #$ff			lda 	#255
.1408	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1409					Command_NEW:
.1409	20 8d 1f	jsr $1f8d			jsr 	PGMNewProgram 				; Reset current program
.140c	20 44 10	jsr $1044			jsr 	ClearCode 					; Run CLR
.140f	4c 31 15	jmp $1531			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1412					Command_READ:
.1412	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get term to R0
.1415	90 35		bcc $144c			bcc 	_CRSyntax 					; fail if not a reference.
.1417	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1419	48		pha				pha
.141a	a5 09		lda $09				lda 	IFR0+IM1
.141c	48		pha				pha
.141d	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141f	48		pha				pha
.1420	20 a5 14	jsr $14a5			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1423	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1426	d0 27		bne $144f			bne 	_CRHaveData  				; forward for the next one.
.1428					_CRNextLine:
.1428	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.142a	f0 1a		beq $1446			beq 	_CRNoData
.142c					_CRKeepSearching:
.142c	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142e	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1430	20 e0 24	jsr $24e0			jsr 	ScanForward
.1433	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1435	f0 18		beq $144f			beq 	_CRHaveData 				; found it
.1437	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1439	18		clc				clc 								; try the next line, keep going.
.143a	b2 18		lda ($18)			lda 	(codePtr)
.143c	65 18		adc $18				adc 	codePtr
.143e	85 18		sta $18				sta 	codePtr
.1440	90 e6		bcc $1428			bcc 	_CRNextLine
.1442	e6 19		inc $19				inc 	codePtr+1
.1444	80 e2		bra $1428			bra 	_CRNextLine
.1446					_CRNoData:
.1446	4c 88 26	jmp $2688		jmp	ErrorV_data
.1449					_CLType:
.1449	4c 00 26	jmp $2600		jmp	ErrorV_type
.144c					_CRSyntax:
.144c	4c d0 25	jmp $25d0		jmp	ErrorV_syntax
.144f					_CRHaveData:
.144f	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1452	68		pla				pla 								; type of l-expr
.1453	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1455	30 f2		bmi $1449			bmi 	_CLType
.1457	68		pla				pla 								; restore address
.1458	85 23		sta $23				sta 	zTemp0+1
.145a	68		pla				pla
.145b	85 22		sta $22				sta 	zTemp0
.145d	20 e0 12	jsr $12e0			jsr 	AssignData 					; write R0 there.
.1460	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1463	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1465	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1467	d0 04		bne $146d			bne 	_CRSwapBack
.1469	c8		iny				iny 								; consume comma
.146a	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.146d					_CRSwapBack:
.146d	20 a5 14	jsr $14a5			jsr 	SwapCodeDataPointers		; swap them back.
.1470	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1472	c8		iny				iny
.1473	c9 99		cmp #$99			cmp 	#PR_COMMA
.1475	f0 9b		beq $1412			beq 	Command_READ 				; if so go round again.
.1477	88		dey				dey 								; unpick get.
.1478	60		rts				rts
.1479					Command_DATA:
.1479	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147b	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.147d	20 e0 24	jsr $24e0			jsr 	ScanForward
.1480	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1482	d0 01		bne $1485			bne 	_CDNotEOL
.1484	88		dey				dey
.1485					_CDNotEOL:
.1485	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1486					Command_REM:
.1486					Command_REM2:
.1486	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1488	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.148a	d0 06		bne $1492			bne 	_CRExit
.148c	c8		iny				iny 								; skip over it, it's a comment.
.148d	98		tya				tya
.148e	38		sec				sec
.148f	71 18		adc ($18),y			adc 	(codePtr),y
.1491	a8		tay				tay
.1492					_CRExit:
.1492	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1493					S
.1493					Command_RESTORE:
.1493	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1496	8d 0c 05	sta $050c			sta 	dataPtr+1
.1499	9c 0b 05	stz $050b			stz 	dataPtr
.149c	a9 03		lda #$03			lda 	#3 							; position start of line
.149e	8d 0d 05	sta $050d			sta 	dataPos
.14a1	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a4	60		rts				rts
.14a5					SwapCodeDataPointers:
.14a5	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a8	a6 18		ldx $18				ldx 	codePtr
.14aa	85 18		sta $18				sta 	codePtr
.14ac	8e 0b 05	stx $050b			stx 	dataPtr
.14af	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b2	a6 19		ldx $19				ldx 	codePtr+1
.14b4	85 19		sta $19				sta 	codePtr+1
.14b6	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b9	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14bc	8c 0d 05	sty $050d			sty 	dataPos
.14bf	a8		tay				tay
.14c0	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c1					Command_RUN:
.14c1	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.14c4	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c7	85 19		sta $19				sta 	codePtr+1
.14c9	64 18		stz $18				stz 	codePtr
.14cb	80 0b		bra $14d8			bra 	RUNNewLine
.14cd					RUNEndOfLine:
.14cd	18		clc				clc 								; advance to next line.
.14ce	b2 18		lda ($18)			lda 	(codePtr)
.14d0	65 18		adc $18				adc 	codePtr
.14d2	85 18		sta $18				sta 	codePtr
.14d4	90 02		bcc $14d8			bcc 	_RELNoCarry
.14d6	e6 19		inc $19				inc 	codePtr+1
.14d8					_RELNoCarry:
.14d8					RUNNewLine:
.14d8	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14da	9a		txs				txs
.14db	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14dd	f0 52		beq $1531			beq 	Command_END
.14df	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e1	b1 18		lda ($18),y			lda 	(codePtr),y
.14e3	8d 26 06	sta $0626			sta 	ERRLine
.14e6	c8		iny				iny
.14e7	b1 18		lda ($18),y			lda 	(codePtr),y
.14e9	8d 27 06	sta $0627			sta 	ERRLine+1
.14ec	c8		iny				iny 								; offset into codePtr for start of line.
.14ed					RUNNewCommand:
.14ed	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14f0	ce 10 05	dec $0510			dec 	checkCounter
.14f3	d0 0a		bne $14ff			bne 	_RNCNoCheck
.14f5	5a		phy				phy 								; keyboard check.
.14f6	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14f9	7a		ply				ply
.14fa	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14fd	d0 1e		bne $151d			bne 	_RUNBreak
.14ff					_RNCNoCheck:
.14ff	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1501	10 1d		bpl $1520			bpl		_RUNNotToken 				; probably an identifier
.1503	c8		iny				iny 								; consume token
.1504	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1506	f0 e5		beq $14ed			beq 	RUNNewCommand
.1508	c9 a2		cmp #$a2			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.150a	b0 0e		bcs $151a			bcs 	_RUNSyntax
.150c	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150e	90 0a		bcc $151a			bcc 	_RUNSyntax
.1510	0a		asl a				asl 	a 							; double into X.
.1511	aa		tax				tax
.1512	20 17 15	jsr $1517			jsr 	_RUNDispatchMain			; call the main dispatcher
.1515	80 d6		bra $14ed			bra 	RUNNewCommand
.1517					_RUNDispatchMain:
.1517	7c 7c 1c	jmp ($1c7c,x)			jmp 	(VectorTable,x)
.151a					_RUNSyntax:
.151a	4c d0 25	jmp $25d0		jmp	ErrorV_syntax
.151d					_RUNBreak:
.151d	4c 5b 27	jmp $275b		jmp	ErrorV_break
.1520					_RUNNotToken:
.1520	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1522	90 f6		bcc $151a			bcc 	_RUNSyntax
.1524	20 bf 12	jsr $12bf			jsr 	CommandLET 					; assignment
.1527	80 c4		bra $14ed			bra 	RUNNewCommand 				; loop round.
.1529					Command_Shift_Handler:
.1529	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.152b	c8		iny				iny
.152c	0a		asl a				asl 	a 							; double into X
.152d	aa		tax				tax
.152e	7c 7c 1d	jmp ($1d7c,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1531					Command_END:
.1531	4c 05 29	jmp $2905			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1534					Command_STOP:
.1534	4c 74 26	jmp $2674		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1537					Command_Sys:
.1537	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; execution address
.153a	5a		phy				phy
.153b	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.153e	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1541	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.1544	20 49 15	jsr $1549			jsr 	_CSCallIFR0 				; call the code
.1547	7a		ply				ply
.1548	60		rts				rts
.1549					_CSCallIFR0:
.1549	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.154c					NoExec01:
.154c					NoExec02:
.154c					NoExec03:
.154c					NoExec04:
.154c					NoExec05:
.154c					NoExec06:
.154c					NoExec07:
.154c					NoExec08:
.154c	4c d0 25	jmp $25d0		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.154f					EXPBinAdd:
.154f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1551	30 6f		bmi $15c2			bmi 	EXPConcatenate
.1553	a2 0c		ldx #$0c			ldx 	#IFR1
.1555	4c 1b 2b	jmp $2b1b			jmp 	IFloatAdd
.1558					EXPBinSub:
.1558	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.155a	30 3f		bmi $159b			bmi 	EXPTypeError
.155c	a2 0c		ldx #$0c			ldx 	#IFR1
.155e	4c 14 2b	jmp $2b14			jmp 	IFloatSubtract
.1561					EXPBinMul:
.1561	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1563	30 36		bmi $159b			bmi 	EXPTypeError
.1565	a2 0c		ldx #$0c			ldx 	#IFR1
.1567	4c c5 2b	jmp $2bc5			jmp 	IFloatMultiply
.156a					EXPBinFDiv:
.156a	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.156c	30 2d		bmi $159b			bmi 	EXPTypeError
.156e	a2 0c		ldx #$0c			ldx 	#IFR1
.1570	20 47 2e	jsr $2e47			jsr 	IFloatDivideFloat
.1573	b0 0f		bcs $1584			bcs 	EXPDZero
.1575	60		rts				rts
.1576					EXPBinIDiv:
.1576	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1578	30 21		bmi $159b			bmi 	EXPTypeError
.157a	a2 0c		ldx #$0c			ldx 	#IFR1
.157c	20 47 2e	jsr $2e47			jsr 	IFloatDivideFloat
.157f	b0 03		bcs $1584			bcs 	EXPDZero
.1581	4c 24 2e	jmp $2e24			jmp 	IFloatIntegerR0
.1584					EXPDZero:
.1584	4c 49 26	jmp $2649		jmp	ErrorV_divzero
.1587					EXPBinIMod:
.1587	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1589	30 10		bmi $159b			bmi 	EXPTypeError
.158b	a2 0c		ldx #$0c			ldx 	#IFR1
.158d	5a		phy				phy
.158e	20 5a 2d	jsr $2d5a			jsr 	IFPreProcessBitwise 		; set up everything.
.1591	d0 05		bne $1598			bne 	EXPDRange
.1593	20 93 2c	jsr $2c93			jsr 	IFloatModulusInteger
.1596	7a		ply				ply
.1597	60		rts				rts
.1598					EXPDRange:
.1598	4c e1 25	jmp $25e1		jmp	ErrorV_range
.159b					EXPTypeError:
.159b	4c 00 26	jmp $2600		jmp	ErrorV_type
.159e					EXPBinAnd:
.159e	24 0b		bit $0b				bit 	IFR0+IExp
.15a0	30 f9		bmi $159b			bmi 	EXPTypeError
.15a2	a2 0c		ldx #$0c			ldx 	#IFR1
.15a4	20 15 2d	jsr $2d15			jsr 	IFloatBitwiseAnd
.15a7	b0 ef		bcs $1598			bcs 	EXPDRange
.15a9	60		rts				rts
.15aa					EXPBinOr:
.15aa	24 0b		bit $0b				bit 	IFR0+IExp
.15ac	30 ed		bmi $159b			bmi 	EXPTypeError
.15ae	a2 0c		ldx #$0c			ldx 	#IFR1
.15b0	20 2c 2d	jsr $2d2c			jsr 	IFloatBitwiseOr
.15b3	b0 e3		bcs $1598			bcs 	EXPDRange
.15b5	60		rts				rts
.15b6					EXPBinXor:
.15b6	24 0b		bit $0b				bit 	IFR0+IExp
.15b8	30 e1		bmi $159b			bmi 	EXPTypeError
.15ba	a2 0c		ldx #$0c			ldx 	#IFR1
.15bc	20 43 2d	jsr $2d43			jsr 	IFloatBitwiseXor
.15bf	b0 d7		bcs $1598			bcs 	EXPDRange
.15c1	60		rts				rts
.15c2					EXPConcatenate:
.15c2	18		clc				clc
.15c3	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c5	72 0c		adc ($0c)			adc 	(IFR1)
.15c7	b0 2d		bcs $15f6			bcs 	_EXPCError 					; far too long.
.15c9	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15cb	da		phx				phx
.15cc	a6 09		ldx $09				ldx 	IFR0+1
.15ce	da		phx				phx
.15cf	20 7b 28	jsr $287b			jsr 	StringTempAllocate 			; allocate string, set up return
.15d2	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d4	a5 0c		lda $0c				lda 	IFR1
.15d6	20 df 15	jsr $15df			jsr 	_EXPCCopyXA
.15d9	fa		plx				plx 								; copy second string
.15da	68		pla				pla
.15db	20 df 15	jsr $15df			jsr 	_EXPCCopyXA
.15de	60		rts				rts
.15df					_EXPCCopyXA:
.15df	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e1	85 22		sta $22				sta 	zTemp0
.15e3	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15e5	f0 0e		beq $15f5			beq 	_EXPCCExit 					; nothing in string
.15e7	aa		tax				tax 								; count
.15e8	5a		phy				phy 								; start position
.15e9	a0 01		ldy #$01			ldy 	#1
.15eb					_EXPCCLoop:
.15eb	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15ed	20 b0 28	jsr $28b0			jsr 	StringTempWrite
.15f0	c8		iny				iny
.15f1	ca		dex				dex
.15f2	d0 f7		bne $15eb			bne 	_EXPCCLoop
.15f4	7a		ply				ply
.15f5					_EXPCCExit:
.15f5	60		rts				rts
.15f6					_EXPCError:
.15f6	4c ed 26	jmp $26ed		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f9					EXPReturnTrue:
.15f9	a2 08		ldx #$08			ldx 	#IFR0
.15fb	a9 01		lda #$01			lda 	#1
.15fd	20 25 31	jsr $3125			jsr 	IFloatSetByte
.1600	20 2e 31	jsr $312e			jsr 	IFloatNegate
.1603	60		rts				rts
.1604					EXPReturnFalse:
.1604	a2 08		ldx #$08			ldx 	#IFR0
.1606	4c 23 31	jmp $3123			jmp 	IFloatSetZero
.1609					EXPCompareEqual:
.1609	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.160c	c9 00		cmp #$00			cmp 	#0
.160e	f0 e9		beq $15f9			beq 	EXPReturnTrue
.1610	80 f2		bra $1604			bra 	EXPReturnFalse
.1612					EXPCompareLess:
.1612	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1615	c9 ff		cmp #$ff			cmp 	#$FF
.1617	f0 e0		beq $15f9			beq 	EXPReturnTrue
.1619	80 e9		bra $1604			bra 	EXPReturnFalse
.161b					EXPCompareGreater:
.161b	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.161e	c9 01		cmp #$01			cmp 	#1
.1620	f0 d7		beq $15f9			beq 	EXPReturnTrue
.1622	80 e0		bra $1604			bra 	EXPReturnFalse
.1624					EXPCompareNotEqual:
.1624	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1627	c9 00		cmp #$00			cmp 	#0
.1629	d0 ce		bne $15f9			bne 	EXPReturnTrue
.162b	80 d7		bra $1604			bra 	EXPReturnFalse
.162d					EXPCompareLessEqual:
.162d	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1630	c9 01		cmp #$01			cmp 	#1
.1632	d0 c5		bne $15f9			bne 	EXPReturnTrue
.1634	80 ce		bra $1604			bra 	EXPReturnFalse
.1636					EXPCompareGreaterEqual:
.1636	20 3f 16	jsr $163f			jsr 	EXPCompareBaseCode
.1639	c9 ff		cmp #$ff			cmp 	#$FF
.163b	d0 bc		bne $15f9			bne 	EXPReturnTrue
.163d	80 c5		bra $1604			bra 	EXPReturnFalse
.163f					EXPCompareBaseCode:
.163f	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1641	30 10		bmi $1653			bmi 	_EXCBCString
.1643	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1645	20 f2 2d	jsr $2df2			jsr 	IFloatCompare
.1648	a5 08		lda $08				lda 	IFR0+IM0
.164a	f0 06		beq $1652			beq 	_EXCBCExit 					; return 0 if zero
.164c	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.164e	50 02		bvc $1652			bvc 	_EXCBCExit
.1650	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1652					_EXCBCExit:
.1652	60		rts				rts
.1653					_EXCBCString:
.1653	5a		phy				phy
.1654	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1656	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1658	90 02		bcc $165c			bcc 	_EXCBCSmaller
.165a	b2 0c		lda ($0c)			lda 	(IFR1)
.165c					_EXCBCSmaller:
.165c	aa		tax				tax
.165d	f0 0d		beq $166c			beq 	_EXCBCMatches 				; if zero common length matches
.165f	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1661					_EXCBCCheckSmallerMatches:
.1661	c8		iny				iny 								; compare directly as far as common length
.1662	38		sec				sec
.1663	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1665	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1667	d0 08		bne $1671			bne 	_EXCBCExit2
.1669	ca		dex				dex
.166a	d0 f5		bne $1661			bne 	_EXCBCCheckSmallerMatches
.166c					_EXCBCMatches:
.166c	38		sec				sec
.166d	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.166f	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1671					_EXCBCExit2:
.1671	7a		ply				ply
.1672	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1674	f0 04		beq $167a			beq 	_EXCBCReturn
.1676	30 03		bmi $167b			bmi 	_EXCBCFF 					; return $FF if <
.1678	a9 01		lda #$01			lda 	#1 							; return 1 if >
.167a					_EXCBCReturn:
.167a	60		rts				rts
.167b					_EXCBCFF:
.167b	a9 ff		lda #$ff			lda 	#$FF
.167d	60		rts				rts
.167e					_EXCBCRange:
.167e	4c e1 25	jmp $25e1		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1681					EXPBinLeft:
.1681	a9 ff		lda #$ff			lda 	#$FF
.1683	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1686	4c 8c 16	jmp $168c			jmp 	EXPShiftCommon
.1689					EXPBinRight:
.1689	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.168c					EXPShiftCommon:
.168c	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.168e	05 0f		ora $0f				ora 	IFR1+IExp
.1690	29 7f		and #$7f			and 	#$7F
.1692	d0 35		bne $16c9			bne 	_EXPSRange
.1694	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1696	29 e0		and #$e0			and 	#$E0
.1698	05 09		ora $09				ora 	IFR0+IM1
.169a	05 0a		ora $0a				ora 	IFR0+IM2
.169c	d0 25		bne $16c3			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.169e	5a		phy				phy
.169f	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a1	29 1f		and #$1f			and 	#$1F
.16a3	f0 17		beq $16bc			beq 	_EXPSExit 					; exit if zero
.16a5	a8		tay				tay
.16a6					_EXPSLoop:
.16a6	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16a8	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16ab	30 05		bmi $16b2			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16ad	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.16b0	80 07		bra $16b9			bra 	_EXPSContinue
.16b2					_EXPSShiftLeft:
.16b2	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.16b5	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16b7	30 10		bmi $16c9			bmi 	_EXPSRange
.16b9					_EXPSContinue:
.16b9	88		dey				dey 								; do it Y times
.16ba	d0 ea		bne $16a6			bne 	_EXPSLoop
.16bc					_EXPSExit:
.16bc	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16be	20 b4 30	jsr $30b4			jsr 	IFloatCopyFromRegister
.16c1	7a		ply				ply
.16c2	60		rts				rts
.16c3					_EXPSShiftZero:
.16c3	a2 08		ldx #$08			ldx 	#IFR0
.16c5	20 23 31	jsr $3123			jsr 	IFloatSetZero
.16c8	60		rts				rts
.16c9					_EXPSRange:
.16c9	4c e1 25	jmp $25e1		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16cc					EXPEvaluateExpression:
.16cc	a9 00		lda #$00			lda 	#0 							; current precedence
.16ce					EXPEvaluateExpressionPrecedenceA:
.16ce	48		pha				pha
.16cf	20 49 17	jsr $1749			jsr 	EXPTermValueR0				; do first term.
.16d2					_EELoop:
.16d2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d4	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d6	90 31		bcc $1709			bcc 	_EEExit
.16d8	aa		tax				tax 								; access the precedence of the operator.
.16d9	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16da	dd a7 19	cmp $19a7,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16dd	b0 2b		bcs $170a			bcs 	_EEExit2
.16df	48		pha				pha 								; save current precedence.
.16e0	da		phx				phx 								; save operator
.16e1	c8		iny				iny 								; consume operator
.16e2	da		phx				phx
.16e3	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e5	20 72 30	jsr $3072			jsr 	IFloatPushRx
.16e8	fa		plx				plx
.16e9	bd a7 19	lda $19a7,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16ec	20 ce 16	jsr $16ce			jsr 	EXPEvaluateExpressionPrecedenceA
.16ef	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f1	20 93 30	jsr $3093			jsr 	IFloatPullRx
.16f4	fa		plx				plx 								; operator
.16f5	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f7	45 0f		eor $0f				eor 	IFR1+IExp
.16f9	30 08		bmi $1703			bmi 	_EEType
.16fb					_EETypeOkay:
.16fb	8a		txa				txa
.16fc	0a		asl a				asl 	a 							; double -> X
.16fd	aa		tax				tax
.16fe	20 06 17	jsr $1706			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1701	80 cf		bra $16d2			bra 	_EELoop
.1703					_EEType:
.1703	4c 00 26	jmp $2600		jmp	ErrorV_type
.1706					_EECallBinary:
.1706	7c 7c 1c	jmp ($1c7c,x)			jmp 	(VectorTable,x)
.1709					_EEExit:
.1709	68		pla				pla 								; throw precedence
.170a					_EEExit2:
.170a	18		clc				clc
.170b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.170c					EXPEvalNumber:
.170c	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; get a value
.170f	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1711	30 01		bmi $1714			bmi 	EVUType
.1713	60		rts				rts
.1714					EVUType:
.1714	4c 00 26	jmp $2600		jmp	ErrorV_type
.1717					EXPEvalInteger:
.1717	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.171a	20 24 2e	jsr $2e24			jsr 	IFloatIntegerR0
.171d	60		rts				rts
.171e					EXPEvalInteger16:
.171e	20 17 17	jsr $1717			jsr 	EXPEvalInteger 				; get integer
.1721	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1723	d0 21		bne $1746			bne 	EVURange
.1725	a6 09		ldx $09				ldx 	IFR0+IM1
.1727	a5 08		lda $08				lda 	IFR0+IM0
.1729	60		rts				rts
.172a					EXPEvalInteger8:
.172a	20 17 17	jsr $1717			jsr 	EXPEvalInteger 				; get integer
.172d	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.172f	05 09		ora $09				ora 	IFR0+IM1
.1731	d0 13		bne $1746			bne 	EVURange
.1733	a5 08		lda $08				lda 	IFR0+IM0
.1735	60		rts				rts
.1736					EXPEvalString:
.1736	20 cc 16	jsr $16cc			jsr 	EXPEvaluateExpression 		; get value
.1739	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.173b	10 d7		bpl $1714			bpl 	EVUType
.173d	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.173f	86 23		stx $23				stx 	zTemp0+1
.1741	a5 08		lda $08				lda 	IFR0+IM0
.1743	85 22		sta $22				sta 	zTemp0
.1745	60		rts				rts
.1746					EVURange:
.1746	4c e1 25	jmp $25e1		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1749					EXPTermValueR0:
.1749	20 94 17	jsr $1794			jsr 	EXPTermR0 					; get term
.174c	90 45		bcc $1793			bcc 	_ETVNotReference 			; exit if value.
.174e	5a		phy				phy
.174f	a0 03		ldy #$03			ldy 	#3 							; get type
.1751	b1 08		lda ($08),y			lda 	(IFR0),y
.1753	30 14		bmi $1769			bmi 	_ETVDereferenceString
.1755	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1757	88		dey				dey 								; get byte 2
.1758	b1 08		lda ($08),y			lda 	(IFR0),y
.175a	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.175c	88		dey				dey 								; get byte 1
.175d	b1 08		lda ($08),y			lda 	(IFR0),y
.175f	aa		tax				tax 								; save in X so we can overwrite it
.1760	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1762	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1764	85 08		sta $08				sta 	IFR0+IM0
.1766	7a		ply				ply
.1767	18		clc				clc
.1768	60		rts				rts
.1769					_ETVDereferenceString:
.1769	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176b	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.176d	12 08		ora ($08)			ora 	(IFR0)
.176f	f0 11		beq $1782			beq 	_ETVNull 					; if so, return a fake NULL.
.1771	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1773	aa		tax				tax
.1774	b2 08		lda ($08)			lda 	(IFR0)
.1776	18		clc				clc 								; add two so points to actual string.
.1777	69 02		adc #$02			adc 	#2
.1779	90 01		bcc $177c			bcc 	_EVDSNoCarry
.177b	e8		inx				inx
.177c					_EVDSNoCarry:
.177c	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.177e	85 08		sta $08				sta 	IFR0
.1780	80 08		bra $178a			bra 	_ETVFillExit 				; tidy up and exit.
.1782					_ETVNull:
.1782	a9 92		lda #$92			lda 	#_EVTNString & $FF
.1784	85 08		sta $08				sta 	IFR0+IM0
.1786	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1788	85 09		sta $09				sta 	IFR0+IM1
.178a					_ETVFillExit:
.178a	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.178c	a9 80		lda #$80			lda 	#$80 						; set type to string.
.178e	85 0b		sta $0b				sta 	IFR0+IExp
.1790	7a		ply				ply
.1791	60		rts				rts
.1792					_EVTNString:
>1792	00						.byte 	0
.1793					_ETVNotReference:
.1793	60		rts				rts
.1794					EXPTermR0:
.1794	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1796	30 10		bmi $17a8			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1798	c8		iny				iny 								; consume element
.1799	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179b	b0 08		bcs $17a5			bcs 	_ETMIdentifier
.179d	20 d3 17	jsr $17d3			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.17a0	20 06 18	jsr $1806			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a3	18		clc				clc 								; return value ok
.17a4	60		rts				rts
.17a5					_ETMIdentifier:
.17a5	4c bc 2a	jmp $2abc			jmp 	VARCheckSimple 				; check variables, seperate module.
.17a8					_ETMIsUnaryOrMinus:
.17a8	c8		iny				iny 								; consume element
.17a9	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17ab	d0 0e		bne $17bb			bne 	_ETMCheckUnary
.17ad	20 49 17	jsr $1749			jsr 	EXPTermValueR0 				; get a term to negate
.17b0	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b2	20 2e 31	jsr $312e			jsr 	IFloatNegate
.17b5	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17b7	30 17		bmi $17d0			bmi 	_ETMUnaryType				; if so error.
.17b9	18		clc				clc
.17ba	60		rts				rts
.17bb					_ETMCheckUnary:
.17bb	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17bd	90 0e		bcc $17cd			bcc 	_ETMUnarySyntax
.17bf	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c1	b0 0a		bcs $17cd			bcs 	_ETMUnarySyntax
.17c3	0a		asl a				asl 	a 							; make it into an index => X
.17c4	aa		tax				tax
.17c5	20 ca 17	jsr $17ca			jsr 	_ETMCallUnaryFunction 		; call the function
.17c8	18		clc				clc 								; and return it.
.17c9	60		rts				rts
.17ca					_ETMCallUnaryFunction:
.17ca	7c 7c 1c	jmp ($1c7c,x)			jmp 	(VectorTable,x)
.17cd					_ETMUnarySyntax:
.17cd	4c d0 25	jmp $25d0		jmp	ErrorV_syntax
.17d0					_ETMUnaryType:
.17d0	4c 00 26	jmp $2600		jmp	ErrorV_type
.17d3					EXPExtractTokenisedInteger:
.17d3	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17d5	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17d7	64 09		stz $09				stz 	IFR0+IM1
.17d9	64 0a		stz $0a				stz 	IFR0+IM2
.17db					_ETMConstant:
.17db	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17dd	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17df	b0 24		bcs $1805			bcs 	_ETMCExit 					; no, exit.
.17e1	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17e3	a5 09		lda $09				lda 	IFR0+IM1
.17e5	85 0a		sta $0a				sta 	IFR0+IM2
.17e7	a5 08		lda $08				lda 	IFR0+IM0
.17e9	85 09		sta $09				sta 	IFR0+IM1
.17eb	64 08		stz $08				stz 	IFR0+IM0
.17ed	8a		txa				txa
.17ee	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17ef	66 0a		ror $0a				ror 	IFR0+IM2
.17f1	66 09		ror $09				ror 	IFR0+IM1
.17f3	66 08		ror $08				ror 	IFR0+IM0
.17f5	4a		lsr a				lsr 	a
.17f6	66 0a		ror $0a				ror 	IFR0+IM2
.17f8	66 09		ror $09				ror 	IFR0+IM1
.17fa	66 08		ror $08				ror 	IFR0+IM0
.17fc	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17fe	11 18		ora ($18),y			ora 	(codePtr),y
.1800	85 08		sta $08				sta 	IFR0+IM0
.1802	c8		iny				iny 								; consume, loop back
.1803	80 d6		bra $17db			bra 	_ETMConstant
.1805					_ETMCExit:
.1805	60		rts				rts
.1806					EXPCheckDecimalFollows:
.1806	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1808	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.180a	d0 19		bne $1825			bne 	_ETMCDExit
.180c	c8		iny				iny 								; consume token.
.180d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.180f	5a		phy				phy									; save current position
.1810	48		pha				pha 								; save count of chars.
.1811	38		sec				sec 								; address into YX : y + codePtr+1
.1812	98		tya				tya
.1813	65 18		adc $18				adc 	codePtr
.1815	aa		tax				tax
.1816	a5 19		lda $19				lda 	codePtr+1
.1818	69 00		adc #$00			adc 	#0
.181a	a8		tay				tay
.181b	68		pla				pla 								; get count.
.181c	20 c7 2f	jsr $2fc7			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.181f	7a		ply				ply 								; go to next token.
.1820	98		tya				tya
.1821	38		sec				sec
.1822	71 18		adc ($18),y			adc 	(codePtr),y
.1824	a8		tay				tay
.1825					_ETMCDExit:
.1825	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1826					EXPUnaryAbs:
.1826	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.1829	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.182c	20 66 2d	jsr $2d66			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.182f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1830					EXPUnaryAsc:
.1830	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.1833	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.1836	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1838	f0 06		beq $1840			beq 	_EXAZero 						; if so return 0
.183a	5a		phy				phy 									; otherwise get first character
.183b	a0 01		ldy #$01			ldy 	#1
.183d	b1 22		lda ($22),y			lda 	(zTemp0),y
.183f	7a		ply				ply
.1840					_EXAZero:
.1840	a2 08		ldx #$08			ldx 	#IFR0
.1842	20 25 31	jsr $3125			jsr 	IFloatSetByte
.1845	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1846					EXPUnaryChr:
.1846	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; expr
.1849	48		pha				pha 									; push on stack
.184a	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.184d	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.184f	20 7b 28	jsr $287b			jsr 	StringTempAllocate
.1852	68		pla				pla 									; get value back
.1853	20 b0 28	jsr $28b0			jsr 	StringTempWrite 				; write to string.
.1856	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1857					EXPUnaryDec:
.1857	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.185a	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.185d	5a		phy				phy 									; save position.
.185e	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1860	20 23 31	jsr $3123			jsr 	IFloatSetZero
.1863	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1865	f0 3b		beq $18a2			beq 	_EUDError 						; empty string is not legit.
.1867	aa		tax				tax 									; count in X.
.1868	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.186a					_EUDLoop:
.186a	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.186c	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.186e	90 02		bcc $1872			bcc 	_EUDNoCase
.1870	e9 20		sbc #$20			sbc 	#$20
.1872					_EUDNoCase:
.1872	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1874	90 2c		bcc $18a2			bcc 	_EUDError
.1876	c9 3a		cmp #$3a			cmp 	#'9'+1
.1878	90 0a		bcc $1884			bcc 	_EUDOkay
.187a	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.187c	90 24		bcc $18a2			bcc 	_EUDError
.187e	c9 47		cmp #$47			cmp 	#'F'+1
.1880	b0 20		bcs $18a2			bcs 	_EUDError
.1882	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1884					_EUDOkay:
.1884	29 0f		and #$0f			and 	#15 							; make constant
.1886	da		phx				phx
.1887	48		pha				pha
.1888	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.188a	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.188d	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1890	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1893	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1896	68		pla				pla 									; pop constant and OR in
.1897	fa		plx				plx
.1898	05 08		ora $08				ora 	IFR0+IM0
.189a	85 08		sta $08				sta 	IFR0+IM0
.189c	c8		iny				iny 									; next char
.189d	ca		dex				dex 									; done all characters ?
.189e	d0 ca		bne $186a			bne 	_EUDLoop
.18a0	7a		ply				ply
.18a1	60		rts				rts
.18a2					_EUDError:
.18a2	4c f2 25	jmp $25f2		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18a5					EXPUnaryInlineDec:
.18a5	4c d0 25	jmp $25d0		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18a8					EXPUnaryPeek:
.18a8	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 				; number to R0
.18ab	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.18ae	b2 08		lda ($08)			lda 	(IFR0)
.18b0	a2 08		ldx #$08			ldx 	#IFR0
.18b2	20 25 31	jsr $3125			jsr 	IFloatSetByte
.18b5	60		rts				rts
.18b6					EXPUnaryDeek:
.18b6	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 				; number to R0
.18b9	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.18bc	5a		phy				phy
.18bd	a0 01		ldy #$01			ldy 	#1
.18bf	b1 08		lda ($08),y			lda 	(IFR0),y
.18c1	7a		ply				ply
.18c2	48		pha				pha
.18c3	b2 08		lda ($08)			lda 	(IFR0)
.18c5	a2 08		ldx #$08			ldx 	#IFR0
.18c7	20 25 31	jsr $3125			jsr 	IFloatSetByte
.18ca	68		pla				pla
.18cb	85 09		sta $09				sta 	IFR0+IM1
.18cd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18ce					EXPUnaryNull:
.18ce	20 49 17	jsr $1749			jsr 	EXPTermValueR0
.18d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d2					EXPUnaryFrac:
.18d2	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.18d5	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.18d8	20 ce 2d	jsr $2dce			jsr 	IFloatFractionalR0 				; get fractional bit.
.18db	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18dc					EXPUnaryInkey:
.18dc	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.18df	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e1	20 7b 28	jsr $287b			jsr 	StringTempAllocate
.18e4	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18e7	b0 06		bcs $18ef			bcs 	_EUIExit
.18e9	20 eb ff	jsr $ffeb			jsr 	OSReadKeyboard 					; otherwise get it.
.18ec	20 b0 28	jsr $28b0			jsr 	StringTempWrite
.18ef					_EUIExit:
.18ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18f0					EXPUnaryInt:
.18f0	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.18f3	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; check for )
.18f6	20 24 2e	jsr $2e24			jsr 	IFloatIntegerR0 				; force to integer.
.18f9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18fa					EXPUnaryLen:
.18fa	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.18fd	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.1900	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.1902	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1904	20 25 31	jsr $3125			jsr 	IFloatSetByte
.1907	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1908					EXPUnaryParenthesis:
.1908	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.190b	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.190e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.190f					EXPUnaryRnd:
.190f	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; number to R0
.1912	20 85 27	jsr $2785			jsr 	ERRCheckRParen 				; )
.1915	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1917	20 2e 19	jsr $192e			jsr 	EXPLoadInRandom
.191a	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.191c	85 0b		sta $0b				sta 	IFR0+IExp
.191e	60		rts				rts
.191f					ExpUnaryRand:
.191f	20 17 17	jsr $1717			jsr 	EXPEvalInteger 				; integer to R0
.1922	20 85 27	jsr $2785			jsr 	ERRCheckRParen 				; )
.1925	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1927	20 2e 19	jsr $192e			jsr 	EXPLoadInRandom
.192a	20 93 2c	jsr $2c93			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.192d	60		rts				rts
.192e					EXPLoadInRandom:
.192e	20 23 31	jsr $3123			jsr 	IFloatSetZero 				; zero it
.1931	20 43 19	jsr $1943			jsr 	EXPRandom32 				; do a 23 bit number.
.1934	95 00		sta $00,x			sta 	IM0,x
.1936	20 43 19	jsr $1943			jsr 	EXPRandom32
.1939	95 01		sta $01,x			sta 	IM1,x
.193b	20 43 19	jsr $1943			jsr 	EXPRandom32
.193e	29 7f		and #$7f			and 	#$7F
.1940	95 02		sta $02,x			sta 	IM2,x
.1942	60		rts				rts
.1943					EXPRandom32:
.1943	5a		phy				phy
.1944	a0 08		ldy #$08			ldy 	#8
.1946	ad 12 05	lda $0512			lda 	EXPSeed+0
.1949	0d 13 05	ora $0513			ora 	EXPSeed+1
.194c	0d 14 05	ora $0514			ora 	EXPSeed+2
.194f	0d 15 05	ora $0515			ora 	EXPSeed+3
.1952	d0 08		bne $195c			bne 	_EXPRNoReset
.1954	ee 12 05	inc $0512			inc 	EXPSeed+0
.1957	a0 10		ldy #$10			ldy 	#16
.1959	8c 15 05	sty $0515			sty 	EXPSeed+3
.195c					_EXPRNoReset:
.195c	ad 12 05	lda $0512			lda 	EXPSeed+0
.195f					_EXPRLoop:
.195f	0a		asl a				asl		a
.1960	2e 13 05	rol $0513			rol 	EXPSeed+1
.1963	2e 14 05	rol $0514			rol 	EXPSeed+2
.1966	2e 15 05	rol $0515			rol 	EXPSeed+3
.1969	90 02		bcc $196d			bcc 	_EXPRNoEOR
.196b	49 c5		eor #$c5			eor 	#$C5
.196d					_EXPRNoEOR:
.196d	88		dey				dey
.196e	d0 ef		bne $195f			bne 	_EXPRLoop
.1970	8d 12 05	sta $0512			sta 	EXPSeed+0
.1973	7a		ply				ply
.1974	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1975					EXPUnarySgn:
.1975	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.1978	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.197b	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.197d	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister
.1980	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1982	20 23 31	jsr $3123			jsr 	IFloatSetZero
.1985	a2 0c		ldx #$0c			ldx 	#IFR1
.1987	20 f2 2d	jsr $2df2			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.198a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.198b					EXPUnarySqr:
.198b	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; number to R0
.198e	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.1991	20 6e 2d	jsr $2d6e			jsr 	IFloatSquareRootR0 				; square root.
.1994	b0 01		bcs $1997			bcs 	_EUSValue 						; error check.
.1996	60		rts				rts
.1997					_EUSValue:
.1997	4c e1 25	jmp $25e1		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.199a					EXPUnaryHex:
.199a	20 17 17	jsr $1717			jsr 	EXPEvalInteger 					; expr
.199d	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.19a0	5a		phy				phy
.19a1	a9 10		lda #$10			lda 	#16
.19a3	20 c5 2e	jsr $2ec5			jsr 	IFloatIntegerToStringR0
.19a6	80 0a		bra $19b2			bra 	EUSMain
.19a8					EXPUnaryStr:
.19a8	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 					; expr
.19ab	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.19ae	5a		phy				phy
.19af	20 20 2f	jsr $2f20			jsr 	IFloatFloatToStringR0 			; convert to string
.19b2					EUSMain:
.19b2	b0 19		bcs $19cd			bcs 	_EUSError
.19b4	86 22		stx $22				stx 	zTemp0 							; save string address
.19b6	84 23		sty $23				sty 	zTemp0+1
.19b8	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19ba	20 7b 28	jsr $287b			jsr 	StringTempAllocate
.19bd	b2 22		lda ($22)			lda 	(zTemp0) 						; get count
.19bf	aa		tax				tax 									; count in X
.19c0	a0 01		ldy #$01			ldy 	#1
.19c2					_EUSCopy:
.19c2	b1 22		lda ($22),y			lda 	(zTemp0),y
.19c4	c8		iny				iny
.19c5	20 b0 28	jsr $28b0			jsr 	StringTempWrite
.19c8	ca		dex				dex
.19c9	d0 f7		bne $19c2			bne	 	_EUSCopy
.19cb	7a		ply				ply
.19cc	60		rts				rts
.19cd					_EUSError:
.19cd	4c e1 25	jmp $25e1		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19d0					EXPUnaryInlineString:
.19d0	18		clc				clc 								; physical address -> IM0,1
.19d1	98		tya				tya 								; put the actual address in IM0
.19d2	65 18		adc $18				adc 	codePtr
.19d4	85 08		sta $08				sta 	IFR0+IM0
.19d6	a5 19		lda $19				lda 	codePtr+1
.19d8	69 00		adc #$00			adc 	#0
.19da	85 09		sta $09				sta 	IFR0+IM1
.19dc	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19de	a9 80		lda #$80			lda 	#$80
.19e0	85 0b		sta $0b				sta 	IFR0+IExp
.19e2	98		tya				tya	 								; skip over it.
.19e3	38		sec				sec
.19e4	71 18		adc ($18),y			adc 	(codePtr),y
.19e6	a8		tay				tay
.19e7	60		rts				rts
.19e8					_EXPUISRange:
.19e8	4c e1 25	jmp $25e1		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19eb					EXPUnaryLeft:
.19eb	20 31 1a	jsr $1a31			jsr 	EXPCommonStart 					; <string>,
.19ee	48		pha				pha 									; save string address on stack
.19ef	da		phx				phx
.19f0	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f2	48		pha				pha
.19f3	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters to do
.19f6	80 44		bra $1a3c			bra 	EXPSubstringCommon
.19f8					EXPUnaryRight:
.19f8	20 31 1a	jsr $1a31			jsr 	EXPCommonStart 					; <string>,
.19fb	48		pha				pha 									; save string address on stack
.19fc	da		phx				phx
.19fd	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19ff	48		pha				pha
.1a00	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters to do
.1a03	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1a05	68		pla				pla
.1a06	38		sec				sec
.1a07	e5 22		sbc $22				sbc 	zTemp0
.1a09	b0 02		bcs $1a0d			bcs 	_EUROffLeft
.1a0b	a9 00		lda #$00			lda 	#0
.1a0d					_EUROffLeft:
.1a0d	48		pha				pha 									; start pos
.1a0e	a9 ff		lda #$ff			lda 	#255
.1a10	80 2a		bra $1a3c			bra 	EXPSubstringCommon
.1a12					EXPUnaryMid:
.1a12	20 31 1a	jsr $1a31			jsr 	EXPCommonStart 					; <string>,
.1a15	48		pha				pha 									; save string address on stack
.1a16	da		phx				phx
.1a17	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters start
.1a1a	f0 12		beq $1a2e			beq 	_EUSError 						; 1 is left
.1a1c	3a		dec a				dec 	a 								; zero based.
.1a1d	48		pha				pha
.1a1e	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a20	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a22	f0 04		beq $1a28			beq 	_EUMLength 						; if so m is provided
.1a24	a9 ff		lda #$ff			lda 	#255 							; default m
.1a26	80 14		bra $1a3c			bra 	EXPSubstringCommon
.1a28					_EUMLength:
.1a28	c8		iny				iny 									; consume comma
.1a29	20 2a 17	jsr $172a			jsr 	EXPEvalInteger8 				; characters to do
.1a2c	80 0e		bra $1a3c			bra 	EXPSubstringCommon
.1a2e					_EUSError:
.1a2e	4c f2 25	jmp $25f2		jmp	ErrorV_value
.1a31					EXPCommonStart:
.1a31	20 36 17	jsr $1736			jsr 	EXPEvalString
.1a34	20 8d 27	jsr $278d			jsr 	ERRCheckComma
.1a37	a5 08		lda $08				lda 	IFR0+IM0
.1a39	a6 09		ldx $09				ldx 	IFR0+IM1
.1a3b	60		rts				rts
.1a3c					EXPSubstringCommon:
.1a3c	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a3e	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; check right bracket.
.1a41	68		pla				pla 									; start position
.1a42	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a44	fa		plx				plx 									; get string address to zTemp2.
.1a45	86 27		stx $27				stx 	zTemp2+1
.1a47	68		pla				pla
.1a48	85 26		sta $26				sta 	zTemp2
.1a4a	38		sec				sec 									; length - start is the max count of chars
.1a4b	b2 26		lda ($26)			lda 	(zTemp2)
.1a4d	e5 25		sbc $25				sbc 	zTemp1+1
.1a4f	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a51	b0 02		bcs $1a55			bcs 	_EXPSSNoTrim
.1a53	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a55					_EXPSSNoTrim:
.1a55	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a57	20 7b 28	jsr $287b			jsr 	StringTempAllocate 				; allocate memory for it.
.1a5a	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a5c	f0 15		beq $1a73			beq 	_EXPSSExit
.1a5e	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a60	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a62	b0 0f		bcs $1a73			bcs 	_EXPSSExit
.1a64	5a		phy				phy
.1a65	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a67	c8		iny				iny 									; +1 for the length byte
.1a68					_EXPSSCopy:
.1a68	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a6a	20 b0 28	jsr $28b0			jsr 	StringTempWrite
.1a6d	c8		iny				iny
.1a6e	c6 24		dec $24				dec 	zTemp1
.1a70	d0 f6		bne $1a68			bne 	_EXPSSCopy
.1a72	7a		ply				ply
.1a73					_EXPSSExit:
.1a73	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a74					EXPUnaryVal:
.1a74	20 36 17	jsr $1736			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a77	20 85 27	jsr $2785			jsr 	ERRCheckRParen 					; )
.1a7a	20 7e 1a	jsr $1a7e			jsr 	VALConversionZTemp0
.1a7d	60		rts				rts
.1a7e					VALConversionZTemp0:
.1a7e	5a		phy				phy
.1a7f	18		clc				clc
.1a80	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a82	69 01		adc #$01			adc 	#1
.1a84	aa		tax				tax
.1a85	a5 23		lda $23				lda 	zTemp0+1
.1a87	69 00		adc #$00			adc 	#0
.1a89	a8		tay				tay
.1a8a	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a8c	20 87 2f	jsr $2f87			jsr 	IFloatStringToFloatR0 			; do conversion
.1a8f	b0 02		bcs $1a93			bcs 	_EUVError
.1a91	7a		ply				ply
.1a92	60		rts				rts
.1a93					_EUVError:
.1a93	4c f2 25	jmp $25f2		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a96					BinaryPrecedence:
>1a96	02					.byte	 2	; $ef =
>1a97	02					.byte	 2	; $f0 <>
>1a98	02					.byte	 2	; $f1 <=
>1a99	02					.byte	 2	; $f2 <
>1a9a	02					.byte	 2	; $f3 >=
>1a9b	02					.byte	 2	; $f4 >
>1a9c	01					.byte	 1	; $f5 XOR
>1a9d	01					.byte	 1	; $f6 OR
>1a9e	01					.byte	 1	; $f7 AND
>1a9f	04					.byte	 4	; $f8 DIV
>1aa0	04					.byte	 4	; $f9 MOD
>1aa1	04					.byte	 4	; $fa <<
>1aa2	04					.byte	 4	; $fb >>
>1aa3	04					.byte	 4	; $fc /
>1aa4	04					.byte	 4	; $fd *
>1aa5	03					.byte	 3	; $fe -
>1aa6	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1aa7					StructureOffsets:
>1aa7	01					.byte	1  	; $80 REPEAT
>1aa8	ff					.byte	255	; $81 UNTIL
>1aa9	01					.byte	1  	; $82 WHILE
>1aaa	ff					.byte	255	; $83 WEND
>1aab	01					.byte	1  	; $84 IF
>1aac	ff					.byte	255	; $85 ENDIF
>1aad	01					.byte	1  	; $86 DO
>1aae	ff					.byte	255	; $87 LOOP
>1aaf	01					.byte	1  	; $88 PROC
>1ab0	ff					.byte	255	; $89 ENDPROC
>1ab1	01					.byte	1  	; $8a FOR
>1ab2	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1ab3					StandardTokens:
>1ab3	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1aba	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ac0	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1ac6	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1acb	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ace	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1ad4	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ad7	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1adc	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ae1	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ae9	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1aed	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1af2	00					.byte	$00                                     	; $8c [[end]]
>1af3	00					.byte	$00                                     	; $8d [[shift]]
>1af4	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1af9	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1afe	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1b01	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1b06	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b0a	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b10	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b16	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b1b	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b1f	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b23	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b28	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b2a	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b2c	01 3a					.byte	$01,$3a                                 	; $9b :
>1b2e	01 27					.byte	$01,$27                                 	; $9c '
>1b30	01 29					.byte	$01,$29                                 	; $9d )
>1b32	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1b37	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1b3c	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1b41	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1b46	00					.byte	0											; $a2
>1b47	00					.byte	0											; $a3
>1b48	00					.byte	0											; $a4
>1b49	00					.byte	0											; $a5
>1b4a	00					.byte	0											; $a6
>1b4b	00					.byte	0											; $a7
>1b4c	00					.byte	0											; $a8
>1b4d	00					.byte	0											; $a9
>1b4e	00					.byte	0											; $aa
>1b4f	00					.byte	0											; $ab
>1b50	00					.byte	0											; $ac
>1b51	00					.byte	0											; $ad
>1b52	00					.byte	0											; $ae
>1b53	00					.byte	0											; $af
>1b54	00					.byte	0											; $b0
>1b55	00					.byte	0											; $b1
>1b56	00					.byte	0											; $b2
>1b57	00					.byte	0											; $b3
>1b58	00					.byte	0											; $b4
>1b59	00					.byte	0											; $b5
>1b5a	00					.byte	0											; $b6
>1b5b	00					.byte	0											; $b7
>1b5c	00					.byte	0											; $b8
>1b5d	00					.byte	0											; $b9
>1b5e	00					.byte	0											; $ba
>1b5f	00					.byte	0											; $bb
>1b60	00					.byte	0											; $bc
>1b61	00					.byte	0											; $bd
>1b62	00					.byte	0											; $be
>1b63	00					.byte	0											; $bf
>1b64	00					.byte	0											; $c0
>1b65	00					.byte	0											; $c1
>1b66	00					.byte	0											; $c2
>1b67	00					.byte	0											; $c3
>1b68	00					.byte	0											; $c4
>1b69	00					.byte	0											; $c5
>1b6a	00					.byte	0											; $c6
>1b6b	00					.byte	0											; $c7
>1b6c	00					.byte	0											; $c8
>1b6d	00					.byte	0											; $c9
>1b6e	00					.byte	0											; $ca
>1b6f	00					.byte	0											; $cb
>1b70	00					.byte	0											; $cc
>1b71	00					.byte	0											; $cd
>1b72	00					.byte	0											; $ce
>1b73	00					.byte	0											; $cf
>1b74	00					.byte	0											; $d0
>1b75	00					.byte	0											; $d1
>1b76	00					.byte	0											; $d2
>1b77	00					.byte	0											; $d3
>1b78	00					.byte	0											; $d4
>1b79	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b7f	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b85	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b8d	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b94	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b9a	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ba0	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ba5	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1baa	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1baf	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1bb4	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bb9	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bbf	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bc4	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bcc	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bd3	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bd8	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1bdd	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1be3	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1be8	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1bee	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1bf3	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1bf9	01 28					.byte	$01,$28                                 	; $eb (
>1bfb	01 24					.byte	$01,$24                                 	; $ec $
>1bfd	00					.byte	$00                                     	; $ed [[decimal]]
>1bfe	00					.byte	$00                                     	; $ee [[string]]
>1bff	01 3d					.byte	$01,$3d                                 	; $ef =
>1c01	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1c04	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1c07	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c09	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c0c	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c0e	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c12	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c15	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c19	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c1d	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c21	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c24	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c27	01 2f					.byte	$01,$2f                                 	; $fc /
>1c29	01 2a					.byte	$01,$2a                                 	; $fd *
>1c2b	01 2d					.byte	$01,$2d                                 	; $fe -
>1c2d	01 2b					.byte	$01,$2b                                 	; $ff +
>1c2f	ff					.byte	$FF
.1c30					AlternateTokens:
>1c30	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1c36	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1c3a	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1c3e	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1c43	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1c47	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1c4e	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1c53	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1c58	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1c5d	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1c63	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1c68	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1c6f	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1c77	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1c7b	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c7c					VectorTable:
>1c7c	c0 24					.word	Command_REPEAT           ; $80 REPEAT
>1c7e	c9 24					.word	Command_UNTIL            ; $81 UNTIL
>1c80	a3 25					.word	Command_WHILE            ; $82 WHILE
>1c82	c4 25					.word	Command_WEND             ; $83 WEND
>1c84	96 24					.word	IfCommand                ; $84 IF
>1c86	bf 24					.word	EndIf                    ; $85 ENDIF
>1c88	19 23					.word	Command_DO               ; $86 DO
>1c8a	31 23					.word	Command_LOOP             ; $87 LOOP
>1c8c	4c 15					.word	NoExec08                 ; $88 PROC
>1c8e	0d 23					.word	Command_ENDPROC          ; $89 ENDPROC
>1c90	3a 23					.word	Command_FOR              ; $8a FOR
>1c92	c7 23					.word	Command_NEXT             ; $8b NEXT
>1c94	cd 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c96	29 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c98	b8 24					.word	ElseCode                 ; $8e ELSE
>1c9a	4c 15					.word	NoExec01                 ; $8f THEN
>1c9c	4c 15					.word	NoExec02                 ; $90 TO
>1c9e	4c 15					.word	NoExec03                 ; $91 STEP
>1ca0	bf 12					.word	CommandLET               ; $92 LET
>1ca2	14 12					.word	Command_Print            ; $93 PRINT
>1ca4	0d 12					.word	Command_Input            ; $94 INPUT
>1ca6	d1 22					.word	Command_CALL             ; $95 CALL
>1ca8	37 15					.word	Command_Sys              ; $96 SYS
>1caa	86 14					.word	Command_REM              ; $97 REM
>1cac	22 23					.word	Command_EXIT             ; $98 EXIT
>1cae	4c 15					.word	NoExec04                 ; $99 ,
>1cb0	4c 15					.word	NoExec05                 ; $9a ;
>1cb2	4c 15					.word	NoExec06                 ; $9b :
>1cb4	86 14					.word	Command_REM2             ; $9c '
>1cb6	4c 15					.word	NoExec07                 ; $9d )
>1cb8	b6 11					.word	Command_Poke             ; $9e POKE
>1cba	b3 11					.word	Command_Doke             ; $9f DOKE
>1cbc	12 14					.word	Command_READ             ; $a0 READ
>1cbe	79 14					.word	Command_DATA             ; $a1 DATA
>1cc0	02 29					.word	NotImplemented           ; $a2
>1cc2	02 29					.word	NotImplemented           ; $a3
>1cc4	02 29					.word	NotImplemented           ; $a4
>1cc6	02 29					.word	NotImplemented           ; $a5
>1cc8	02 29					.word	NotImplemented           ; $a6
>1cca	02 29					.word	NotImplemented           ; $a7
>1ccc	02 29					.word	NotImplemented           ; $a8
>1cce	02 29					.word	NotImplemented           ; $a9
>1cd0	02 29					.word	NotImplemented           ; $aa
>1cd2	02 29					.word	NotImplemented           ; $ab
>1cd4	02 29					.word	NotImplemented           ; $ac
>1cd6	02 29					.word	NotImplemented           ; $ad
>1cd8	02 29					.word	NotImplemented           ; $ae
>1cda	02 29					.word	NotImplemented           ; $af
>1cdc	02 29					.word	NotImplemented           ; $b0
>1cde	02 29					.word	NotImplemented           ; $b1
>1ce0	02 29					.word	NotImplemented           ; $b2
>1ce2	02 29					.word	NotImplemented           ; $b3
>1ce4	02 29					.word	NotImplemented           ; $b4
>1ce6	02 29					.word	NotImplemented           ; $b5
>1ce8	02 29					.word	NotImplemented           ; $b6
>1cea	02 29					.word	NotImplemented           ; $b7
>1cec	02 29					.word	NotImplemented           ; $b8
>1cee	02 29					.word	NotImplemented           ; $b9
>1cf0	02 29					.word	NotImplemented           ; $ba
>1cf2	02 29					.word	NotImplemented           ; $bb
>1cf4	02 29					.word	NotImplemented           ; $bc
>1cf6	02 29					.word	NotImplemented           ; $bd
>1cf8	02 29					.word	NotImplemented           ; $be
>1cfa	02 29					.word	NotImplemented           ; $bf
>1cfc	02 29					.word	NotImplemented           ; $c0
>1cfe	02 29					.word	NotImplemented           ; $c1
>1d00	02 29					.word	NotImplemented           ; $c2
>1d02	02 29					.word	NotImplemented           ; $c3
>1d04	02 29					.word	NotImplemented           ; $c4
>1d06	02 29					.word	NotImplemented           ; $c5
>1d08	02 29					.word	NotImplemented           ; $c6
>1d0a	02 29					.word	NotImplemented           ; $c7
>1d0c	02 29					.word	NotImplemented           ; $c8
>1d0e	02 29					.word	NotImplemented           ; $c9
>1d10	02 29					.word	NotImplemented           ; $ca
>1d12	02 29					.word	NotImplemented           ; $cb
>1d14	02 29					.word	NotImplemented           ; $cc
>1d16	02 29					.word	NotImplemented           ; $cd
>1d18	02 29					.word	NotImplemented           ; $ce
>1d1a	02 29					.word	NotImplemented           ; $cf
>1d1c	02 29					.word	NotImplemented           ; $d0
>1d1e	02 29					.word	NotImplemented           ; $d1
>1d20	02 29					.word	NotImplemented           ; $d2
>1d22	02 29					.word	NotImplemented           ; $d3
>1d24	02 29					.word	NotImplemented           ; $d4
>1d26	b6 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d28	a8 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d2a	f8 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d2c	eb 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d2e	12 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d30	a8 19					.word	EXPUnaryStr              ; $da STR$(
>1d32	74 1a					.word	EXPUnaryVal              ; $db VAL(
>1d34	75 19					.word	EXPUnarySgn              ; $dc SGN(
>1d36	26 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d38	fa 18					.word	EXPUnaryLen              ; $de LEN(
>1d3a	8b 19					.word	EXPUnarySqr              ; $df SQR(
>1d3c	46 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d3e	30 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d40	dc 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d42	02 29					.word	NotImplemented           ; $e3 EVENT(
>1d44	02 29					.word	NotImplemented           ; $e4 TIME
>1d46	f0 18					.word	EXPUnaryInt              ; $e5 INT(
>1d48	d2 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d4a	57 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d4c	9a 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d4e	0f 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d50	1f 19					.word	ExpUnaryRand             ; $ea RAND(
>1d52	08 19					.word	EXPUnaryParenthesis      ; $eb (
>1d54	ce 18					.word	EXPUnaryNull             ; $ec $
>1d56	a5 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d58	d0 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d5a	09 16					.word	EXPCompareEqual          ; $ef =
>1d5c	24 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d5e	2d 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d60	12 16					.word	EXPCompareLess           ; $f2 <
>1d62	36 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d64	1b 16					.word	EXPCompareGreater        ; $f4 >
>1d66	b6 15					.word	EXPBinXor                ; $f5 XOR
>1d68	aa 15					.word	EXPBinOr                 ; $f6 OR
>1d6a	9e 15					.word	EXPBinAnd                ; $f7 AND
>1d6c	76 15					.word	EXPBinIDiv               ; $f8 DIV
>1d6e	87 15					.word	EXPBinIMod               ; $f9 MOD
>1d70	81 16					.word	EXPBinLeft               ; $fa <<
>1d72	89 16					.word	EXPBinRight              ; $fb >>
>1d74	6a 15					.word	EXPBinFDiv               ; $fc /
>1d76	61 15					.word	EXPBinMul                ; $fd *
>1d78	58 15					.word	EXPBinSub                ; $fe -
>1d7a	4f 15					.word	EXPBinAdd                ; $ff +
.1d7c					AlternateVectorTable:
>1d7c	23 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1d7e	09 14					.word	Command_NEW              ; $8d81 NEW
>1d80	c1 14					.word	Command_RUN              ; $8d82 RUN
>1d82	34 15					.word	Command_STOP             ; $8d83 STOP
>1d84	31 15					.word	Command_END              ; $8d84 END
>1d86	15 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1d88	39 13					.word	Command_LIST             ; $8d86 LIST
>1d8a	02 29					.word	NotImplemented           ; $8d87 SAVE
>1d8c	02 29					.word	NotImplemented           ; $8d88 LOAD
>1d8e	7c 24					.word	Command_GOSUB            ; $8d89 GOSUB
>1d90	dd 11					.word	Command_GOTO             ; $8d8a GOTO
>1d92	8a 24					.word	Command_RETURN           ; $8d8b RETURN
>1d94	93 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1d96	97 10					.word	CommandDIM               ; $8d8d DIM

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d98					TOKDetokenise:
.1d98	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d9a	84 27		sty $27				sty 	zTemp2+1
.1d9c	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d9f					_TOKDLoop:
.1d9f	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get next
.1da2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1da4	f0 26		beq $1dcc			beq 	_TOKDExit
.1da6	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1da8	f0 1d		beq $1dc7			beq 	_TOKDDataItem
.1daa	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1dac	f0 19		beq $1dc7			beq 	_TOKDDataItem
.1dae	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1db0	10 05		bpl $1db7			bpl 	_TOKDNotToken
.1db2	20 96 1e	jsr $1e96			jsr 	TOKDToken 					; token to text.
.1db5	80 e8		bra $1d9f			bra 	_TOKDLoop
.1db7					_TOKDNotToken:
.1db7	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1db9	90 05		bcc $1dc0			bcc 	_TOKDNotIdentifier
.1dbb	20 09 1e	jsr $1e09			jsr 	TOKDIdentifier
.1dbe	80 df		bra $1d9f			bra 	_TOKDLoop
.1dc0					_TOKDNotIdentifier:
.1dc0	a0 0a		ldy #$0a			ldy 	#10
.1dc2	20 52 1e	jsr $1e52			jsr 	TOKDInteger
.1dc5	80 d8		bra $1d9f			bra 	_TOKDLoop
.1dc7					_TOKDDataItem:
.1dc7	20 e4 1d	jsr $1de4			jsr 	TOKDDataItem
.1dca	80 d3		bra $1d9f			bra 	_TOKDLoop
.1dcc					_TOKDExit:
.1dcc	18		clc				clc
.1dcd	60		rts				rts
.1dce	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1dd0	e6 26		inc $26				inc 	zTemp2
.1dd2	d0 02		bne $1dd6			bne 	_TKDGExit
.1dd4	e6 27		inc $27				inc 	zTemp2+1
.1dd6					_TKDGExit:
.1dd6	60		rts				rts
.1dd7					TOKDOutput:
.1dd7	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1dda	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1ddd					TOKSetDetokeniseOutput:
.1ddd	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1de0	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1de3	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1de4					TOKDDataItem:
.1de4	a8		tay				tay 								; type in Y
.1de5	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1de7	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1de9	f0 02		beq $1ded			beq 	_TOKDDIsString
.1deb	a9 2e		lda #$2e			lda 	#'.'
.1ded					_TOKDDIsString:
.1ded	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput 					; dump it
.1df0	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get length into X
.1df3	aa		tax				tax
.1df4					_TOKDDOutput:
.1df4	ca		dex				dex 								; are we complete
.1df5	30 08		bmi $1dff			bmi 	_TOKDDEnd
.1df7	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get character and output it
.1dfa	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1dfd	80 f5		bra $1df4			bra 	_TOKDDOutput
.1dff					_TOKDDEnd:
.1dff	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1e01	d0 05		bne $1e08			bne 	_TOKDDNotString
.1e03	a9 22		lda #$22			lda 	#'"'
.1e05	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e08					_TOKDDNotString:
.1e08	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1e09					TOKDIdentifier:
.1e09	a0 ff		ldy #$ff			ldy 	#$FF
.1e0b	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1e0e					_TOKDLoop:
.1e0e	a8		tay				tay 								; token in Y
.1e0f	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1e11	c0 64		cpy #$64			cpy 	#$64
.1e13	f0 11		beq $1e26			beq 	_TOKDIOutput
.1e15	a9 5f		lda #$5f			lda 	#'_'
.1e17	c0 65		cpy #$65			cpy 	#$65
.1e19	f0 0b		beq $1e26			beq 	_TOKDIOutput
.1e1b	98		tya				tya 								; handle a-z
.1e1c	18		clc				clc
.1e1d	69 21		adc #$21			adc	 	#$21
.1e1f	c0 5a		cpy #$5a			cpy 	#$5A
.1e21	90 03		bcc $1e26			bcc 	_TOKDIOutput
.1e23	38		sec				sec 								; handle 0-9
.1e24	e9 4b		sbc #$4b			sbc 	#$4B
.1e26					_TOKDIOutput:
.1e26	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1e29	10 08		bpl $1e33			bpl 	_TOKDINoSpacing
.1e2b	48		pha				pha
.1e2c	20 d3 1e	jsr $1ed3			jsr 	TOKDSpacing
.1e2f	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1e32	68		pla				pla
.1e33					_TOKDINoSpacing:
.1e33	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e36	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get next token
.1e39	c9 7c		cmp #$7c			cmp 	#$7C
.1e3b	90 d1		bcc $1e0e			bcc 	_TOKDLoop
.1e3d	f0 12		beq $1e51			beq 	_TOKDIExit 					; it's a number, no tail.
.1e3f	4a		lsr a				lsr 	a 							; string ?
.1e40	90 07		bcc $1e49			bcc 	_TOKDICheckArray
.1e42	48		pha				pha
.1e43	a9 24		lda #$24			lda 	#"$"
.1e45	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e48	68		pla				pla
.1e49					_TOKDICheckArray:
.1e49	4a		lsr a				lsr 	a 							; array ?
.1e4a	90 05		bcc $1e51			bcc 	_TOKDIExit
.1e4c	a9 28		lda #$28			lda 	#"("
.1e4e	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e51					_TOKDIExit:
.1e51	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e52					TOKDInteger:
.1e52	5a		phy				phy 								; save base
.1e53	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e55	20 25 31	jsr $3125			jsr 	IFloatSetByte
.1e58					_TOKDILoop:
.1e58	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e5a	c9 40		cmp #$40			cmp 	#$40
.1e5c	b0 1d		bcs $1e7b			bcs 	_TOKDIHaveInteger
.1e5e	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e60	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1e63	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1e66	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1e69	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1e6c	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1e6f	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.1e72	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; OR byte in.
.1e75	05 08		ora $08				ora 	IFR0+IM0
.1e77	85 08		sta $08				sta 	IFR0+IM0
.1e79	80 dd		bra $1e58			bra 	_TOKDILoop
.1e7b					_TOKDIHaveInteger:
.1e7b	7a		ply				ply 								; restore base
.1e7c	98		tya				tya 								; base in A
.1e7d	20 c5 2e	jsr $2ec5			jsr 	IFloatIntegerToStringR0
.1e80	86 22		stx $22				stx 	zTemp0
.1e82	84 23		sty $23				sty 	zTemp0+1
.1e84	b2 22		lda ($22)			lda 	(zTemp0)
.1e86	20 d3 1e	jsr $1ed3			jsr 	TOKDSpacing 				; check spacing okay.
.1e89	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1e8b					_TOKDOutput:
.1e8b	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e8d	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1e90	c8		iny				iny
.1e91	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e93	d0 f6		bne $1e8b			bne 	_TOKDOutput
.1e95	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e96					TOKDToken:
.1e96	a2 b3		ldx #$b3			ldx 	#StandardTokens & $FF 		; standard table
.1e98	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e9a	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1e9c	d0 07		bne $1ea5			bne 	_TOKDSearch
.1e9e	20 ce 1d	jsr $1dce			jsr 	TOKDGet 					; get next
.1ea1	a2 30		ldx #$30			ldx 	#AlternateTokens & $FF 		; alt table
.1ea3	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.1ea5					_TOKDSearch:
.1ea5	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1ea7	84 23		sty $23				sty 	zTemp0+1
.1ea9	aa		tax				tax 								; token ID in X.
.1eaa					_TOKDFind:
.1eaa	ca		dex				dex 								; reached the start
.1eab	10 0d		bpl $1eba			bpl 	_TOKDFound
.1ead	38		sec				sec 								; go to next entry
.1eae	b2 22		lda ($22)			lda 	(zTemp0)
.1eb0	65 22		adc $22				adc 	zTemp0
.1eb2	85 22		sta $22				sta 	zTemp0
.1eb4	90 f4		bcc $1eaa			bcc 	_TOKDFind
.1eb6	e6 23		inc $23				inc 	zTemp0+1
.1eb8	80 f0		bra $1eaa			bra 	_TOKDFind
.1eba					_TOKDFound:
.1eba	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1ebc	f0 14		beq $1ed2			beq 	_TOKDExit
.1ebe	aa		tax				tax
.1ebf	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ec1	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1ec3	20 d3 1e	jsr $1ed3			jsr 	TOKDSpacing
.1ec6					_TOKDOutput:
.1ec6	b1 22		lda ($22),y			lda 	(zTemp0),y
.1ec8	20 8c 22	jsr $228c			jsr 	TOKToLower
.1ecb	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1ece	c8		iny				iny
.1ecf	ca		dex				dex
.1ed0	d0 f4		bne $1ec6			bne 	_TOKDOutput
.1ed2					_TOKDExit:
.1ed2	60		rts				rts
.1ed3					TOKDSpacing:
.1ed3	20 a3 22	jsr $22a3			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1ed6	90 0d		bcc $1ee5			bcc 	_TOKDSExit
.1ed8	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1edb	20 a3 22	jsr $22a3			jsr 	TOKIsIdentifierElement
.1ede	90 05		bcc $1ee5			bcc 	_TOKDSExit
.1ee0	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ee2	20 d7 1d	jsr $1dd7			jsr 	TOKDOutput
.1ee5					_TOKDSExit:
.1ee5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1ee6					PGMDeleteLine:
.1ee6	20 99 1f	jsr $1f99			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ee9	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eeb	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1eee	85 25		sta $25				sta 	zTemp1+1
.1ef0					_PGMDLoop:
.1ef0	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1ef2	38		sec				sec
.1ef3	f0 3a		beq $1f2f			beq 	_PGMDExit
.1ef5	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1ef7	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ef9	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1efc	d0 08		bne $1f06			bne 	_PGMDNext
.1efe	c8		iny				iny
.1eff	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f01	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1f04	f0 0d		beq $1f13			beq 	_PGMDDelete
.1f06					_PGMDNext:
.1f06	18		clc				clc
.1f07	b2 24		lda ($24)			lda 	(zTemp1)
.1f09	65 24		adc $24				adc 	zTemp1
.1f0b	85 24		sta $24				sta 	zTemp1
.1f0d	90 e1		bcc $1ef0			bcc 	_PGMDLoop
.1f0f	e6 25		inc $25				inc 	zTemp1+1
.1f11	80 dd		bra $1ef0			bra 	_PGMDLoop
.1f13					_PGMDDelete:
.1f13	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1f15	a8		tay				tay
.1f16					_PGMDCopy:
.1f16	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1f18	92 24		sta ($24)			sta 	(zTemp1)
.1f1a	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1f1c	c5 22		cmp $22				cmp 	zTemp0
.1f1e	d0 07		bne $1f27			bne 	_PGMDNext2
.1f20	a5 25		lda $25				lda 	zTemp1+1
.1f22	c5 23		cmp $23				cmp 	zTemp0+1
.1f24	18		clc				clc
.1f25	f0 08		beq $1f2f			beq 	_PGMDExit
.1f27					_PGMDNext2:
.1f27	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1f29	d0 eb		bne $1f16			bne 	_PGMDCopy
.1f2b	e6 25		inc $25				inc 	zTemp1+1
.1f2d	80 e7		bra $1f16			bra 	_PGMDCopy
.1f2f					_PGMDExit:
.1f2f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1f30					PGMInsertLine:
.1f30	20 99 1f	jsr $1f99			jsr 	PGMEndProgram 				; end of program into zTemp0
.1f33	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1f35	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f38	85 25		sta $25				sta 	zTemp1+1
.1f3a					_PGMILoop:
.1f3a	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1f3c	f0 1c		beq $1f5a			beq 	_PGMIInsert
.1f3e	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f40	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f42	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f45	c8		iny				iny
.1f46	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f48	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f4b	b0 0d		bcs $1f5a			bcs 	_PGMIInsert 				; insert here.
.1f4d	18		clc				clc
.1f4e	b2 24		lda ($24)			lda 	(zTemp1)
.1f50	65 24		adc $24				adc 	zTemp1
.1f52	85 24		sta $24				sta 	zTemp1
.1f54	90 e4		bcc $1f3a			bcc 	_PGMILoop
.1f56	e6 25		inc $25				inc 	zTemp1+1
.1f58	80 e0		bra $1f3a			bra 	_PGMILoop
.1f5a					_PGMIInsert:
.1f5a	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f5d					_PGMIInsertLoop:
.1f5d	b2 22		lda ($22)			lda 	(zTemp0)
.1f5f	91 22		sta ($22),y			sta 	(zTemp0),y
.1f61	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f63	c5 22		cmp $22				cmp 	zTemp0
.1f65	d0 06		bne $1f6d			bne 	_PGMINext
.1f67	a5 25		lda $25				lda 	zTemp1+1
.1f69	c5 23		cmp $23				cmp 	zTemp0+1
.1f6b	f0 0a		beq $1f77			beq 	_PGMIInserted
.1f6d					_PGMINext:
.1f6d	a5 22		lda $22				lda 	zTemp0
.1f6f	d0 02		bne $1f73			bne 	_PGMINoBorrow
.1f71	c6 23		dec $23				dec 	zTemp0+1
.1f73					_PGMINoBorrow:
.1f73	c6 22		dec $22				dec 	zTemp0
.1f75	80 e6		bra $1f5d			bra 	_PGMIInsertLoop
.1f77					_PGMIInserted:
.1f77	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f79					_PGMICopyLoop:
.1f79	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f7c	91 24		sta ($24),y			sta 	(zTemp1),y
.1f7e	c8		iny				iny
.1f7f	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f82	d0 f5		bne $1f79			bne 	_PGMICopyLoop
.1f84	18		clc				clc
.1f85	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f86					PGMSetBaseAddress:
.1f86	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.1f89	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.1f8c	60		rts				rts
.1f8d					PGMNewProgram:
.1f8d	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f8f	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f92	85 23		sta $23				sta 	zTemp0+1
.1f94	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.1f96	92 22		sta ($22)			sta 	(zTemp0)
.1f98	60		rts				rts
.1f99					PGMEndProgram:
.1f99	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f9b	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f9e	85 23		sta $23				sta 	zTemp0+1
.1fa0					_PGMEPLoop:
.1fa0	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.1fa2	f0 0b		beq $1faf			beq 	_PGMEPExit
.1fa4	18		clc				clc 								; no, advance to next
.1fa5	65 22		adc $22				adc 	zTemp0
.1fa7	85 22		sta $22				sta 	zTemp0
.1fa9	90 f5		bcc $1fa0			bcc 	_PGMEPLoop
.1fab	e6 23		inc $23				inc 	zTemp0+1
.1fad	80 f1		bra $1fa0			bra 	_PGMEPLoop
.1faf					_PGMEPExit:
.1faf	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1fb0					TOKResetElement:
.1fb0	9c 1c 05	stz $051c			stz 	TOKElement
.1fb3	60		rts				rts
.1fb4					TOKWriteElement:
.1fb4	da		phx				phx
.1fb5	ae 1c 05	ldx $051c			ldx 	TOKElement
.1fb8	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1fbb	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1fbe	fa		plx				plx
.1fbf	ee 1c 05	inc $051c			inc 	TOKElement
.1fc2	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1fc3					TOKTokeniseConstant:
.1fc3	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1fc5	48		pha				pha 								; save on stack
.1fc6	29 c0		and #$c0			and 	#$C0
.1fc8	05 09		ora $09				ora 	IFR0+IM1
.1fca	05 0a		ora $0a				ora 	IFR0+IM2
.1fcc	f0 10		beq $1fde			beq 	_TTCLess
.1fce	da		phx				phx
.1fcf	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1fd1					_TTCShiftRight:
.1fd1	46 0a		lsr $0a				lsr 	IFR0+IM2
.1fd3	66 09		ror $09				ror 	IFR0+IM1
.1fd5	66 08		ror $08				ror 	IFR0+IM0
.1fd7	ca		dex				dex
.1fd8	d0 f7		bne $1fd1			bne 	_TTCShiftRight
.1fda	fa		plx				plx
.1fdb	20 c3 1f	jsr $1fc3			jsr 	TOKTokeniseConstant
.1fde					_TTCLess:
.1fde	68		pla				pla
.1fdf	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fe1	20 80 20	jsr $2080			jsr 	TOKWriteA
.1fe4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fe5					TOKTokeniseDecimals:
.1fe5	20 93 20	jsr $2093			jsr 	TOKGetNext 					; consume the .
.1fe8	20 10 22	jsr $2210			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1feb	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fed	20 80 20	jsr $2080			jsr 	TOKWriteA
.1ff0	20 f5 1f	jsr $1ff5			jsr 	TOKOutputElementBuffer 		; then the buffer
.1ff3	18		clc				clc
.1ff4	60		rts				rts
.1ff5					TOKOutputElementBuffer:
.1ff5	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1ff8	20 80 20	jsr $2080			jsr 	TOKWriteA
.1ffb	a8		tay				tay 								; put in Y
.1ffc	f0 0c		beq $200a			beq 	_TOEExit 					; exit if empty which is okay.
.1ffe	a2 01		ldx #$01			ldx 	#1
.2000					_TOELoop:
.2000	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2003	20 80 20	jsr $2080			jsr 	TOKWriteA
.2006	e8		inx				inx
.2007	88		dey				dey
.2008	d0 f6		bne $2000			bne 	_TOELoop
.200a					_TOEExit:
.200a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.200b					TOKTokenise:
.200b	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.200e	8e 1c 06	stx $061c			stx 	TOKDataSource
.2011	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2013	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.2016	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2018	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.201b	9c 01 04	stz $0401			stz 	TOKLineNumber
.201e	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2021					_TOKMainLoop:
.2021	20 8f 20	jsr $208f			jsr 	TOKGet 						; what follows.
.2024	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2026	f0 4f		beq $2077			beq 	_TOKExit
.2028	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.202a	d0 05		bne $2031			bne 	_TOKElement
.202c	20 93 20	jsr $2093			jsr 	TOKGetNext
.202f	80 f0		bra $2021			bra 	_TOKMainLoop
.2031					_TOKElement:
.2031	20 97 22	jsr $2297			jsr 	TOKIsDigit 					; is it 0..9
.2034	90 0a		bcc $2040			bcc 	_TOKNotDigit
.2036	20 e7 21	jsr $21e7			jsr 	TOKTokeniseInteger 			; get integer
.2039	b0 43		bcs $207e			bcs 	_TOKFail 					; did it fail ?
.203b	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.203e	80 e1		bra $2021			bra 	_TOKMainLoop
.2040					_TOKNotDigit:
.2040	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2043	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2045	d0 07		bne $204e			bne 	_TOKNotHex
.2047	20 e9 20	jsr $20e9			jsr 	TOKTokeniseHexadecimal
.204a	b0 32		bcs $207e			bcs 	_TOKFail
.204c	80 d3		bra $2021			bra 	_TOKMainLoop
.204e					_TOKNotHex:
.204e	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2050	d0 07		bne $2059			bne 	_TOKNotDecimal
.2052	20 e5 1f	jsr $1fe5			jsr 	TOKTokeniseDecimals
.2055	b0 27		bcs $207e			bcs 	_TOKFail
.2057	80 c8		bra $2021			bra 	_TOKMainLoop
.2059					_TOKNotDecimal:
.2059	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.205b	d0 07		bne $2064			bne 	_TOKNotString
.205d	20 5e 22	jsr $225e			jsr 	TOKTokeniseString
.2060	b0 1c		bcs $207e			bcs 	_TOKFail
.2062	80 bd		bra $2021			bra 	_TOKMainLoop
.2064					_TOKNotString:
.2064	20 b4 22	jsr $22b4			jsr 	TOKIsAlpha 					; identifier ?
.2067	b0 07		bcs $2070			bcs 	_TOKIdentifier
.2069	20 24 22	jsr $2224			jsr 	TOKTokenisePunctuation 		; punctuation
.206c	b0 10		bcs $207e			bcs 	_TOKFail
.206e	80 b1		bra $2021			bra 	_TOKMainLoop
.2070					_TOKIdentifier:
.2070	20 23 21	jsr $2123			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2073	b0 09		bcs $207e			bcs 	_TOKFail
.2075	80 aa		bra $2021			bra 	_TOKMainLoop
.2077					_TOKExit:
.2077	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2079	20 80 20	jsr $2080			jsr 	TOKWriteA
.207c	18		clc				clc									; return with carry set.
.207d	60		rts				rts
.207e					_TOKFail:
.207e	38		sec				sec
.207f	60		rts				rts
.2080					TOKWriteA:
.2080	da		phx				phx
.2081	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2084	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2087	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.208a	fa		plx				plx
.208b	ee 00 04	inc $0400			inc 	TOKLineSize
.208e	60		rts				rts
.208f					TOKGet:
.208f	18		clc				clc
.2090	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2093					TOKGetNext:
.2093	38		sec				sec
.2094	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2097					TOKFindToken:
.2097	a2 b3		ldx #$b3			ldx 	#StandardTokens & $FF 		; do this table
.2099	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.209b	20 b3 20	jsr $20b3			jsr 	TOKFindTokenXY 				; find it, or not
.209e	b0 0d		bcs $20ad			bcs 	_TOKFound1
.20a0	a2 30		ldx #$30			ldx 	#AlternateTokens & $FF 		; do the alternate table
.20a2	a0 1c		ldy #$1c			ldy 	#AlternateTokens >> 8
.20a4	20 b3 20	jsr $20b3			jsr 	TOKFindTokenXY 				; find it, or not
.20a7	90 08		bcc $20b1			bcc 	_TOKFTFail 					; not ....
.20a9	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.20ab	38		sec				sec
.20ac	60		rts				rts
.20ad					_TOKFound1:
.20ad	a2 00		ldx #$00			ldx 	#0
.20af	38		sec				sec
.20b0	60		rts				rts
.20b1					_TOKFTFail
.20b1	18		clc				clc
.20b2	60		rts				rts
.20b3					TOKFindTokenXY:
.20b3	86 22		stx $22				stx 	zTemp0 						; save token table address
.20b5	84 23		sty $23				sty 	zTemp0+1
.20b7	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.20b9	8d 1f 06	sta $061f			sta 	TOKCurrent
.20bc					_TOKFindLoop:
.20bc	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.20be	18		clc				clc 		 						; clear carry in case of fail
.20bf	30 17		bmi $20d8			bmi 	_TOKExit 					; end of table, fail, so return CC.
.20c1	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.20c4	d0 13		bne $20d9			bne 	_TOKNext 					; different, try next.
.20c6	aa		tax				tax 								; number of chars to compare.
.20c7	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.20c9					_TOKCompare:
.20c9	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.20cb	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.20ce	d0 09		bne $20d9			bne 	_TOKNext 					; different ? try next
.20d0	c8		iny				iny 								; compare next two
.20d1	ca		dex				dex
.20d2	d0 f5		bne $20c9			bne 	_TOKCompare 				; until done X characters.
.20d4	38		sec				sec
.20d5	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.20d8					_TOKExit:
.20d8	60		rts				rts
.20d9					_TOKNext:
.20d9	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.20dc	38		sec				sec 								; add length+1 to ptr
.20dd	b2 22		lda ($22)			lda 	(zTemp0)
.20df	65 22		adc $22				adc 	zTemp0
.20e1	85 22		sta $22				sta 	zTemp0
.20e3	90 d7		bcc $20bc			bcc 	_TOKFindLoop
.20e5	e6 23		inc $23				inc 	zTemp0+1
.20e7	80 d3		bra $20bc			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.20e9					TOKTokeniseHexadecimal:
.20e9	20 93 20	jsr $2093			jsr 	TOKGetNext 					; consume the $
.20ec	a2 08		ldx #$08			ldx 	#IFR0
.20ee	20 23 31	jsr $3123			jsr 	IFloatSetZero 				; set R0 = 0
.20f1					_TTHLoop:
.20f1	20 8f 20	jsr $208f			jsr 	TOKGet 						; keep getting and copying while numeric.
.20f4	20 c1 22	jsr $22c1			jsr 	TOKIsHexadecimal
.20f7	90 20		bcc $2119			bcc 	_TTHDone
.20f9	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20fb	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.20fe	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.2101	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.2104	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.2107	20 93 20	jsr $2093			jsr 	TOKGetNext
.210a	38		sec				sec 								; convert to decimal.
.210b	e9 30		sbc #$30			sbc 	#48
.210d	c9 0a		cmp #$0a			cmp 	#10
.210f	90 02		bcc $2113			bcc 	_TTHNotAlpha
.2111	e9 07		sbc #$07			sbc 	#7
.2113					_TTHNotAlpha:
.2113	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2115	85 08		sta $08				sta 	IFR0+IM0
.2117	80 d8		bra $20f1			bra 	_TTHLoop
.2119					_TTHDone:
.2119	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.211b	20 80 20	jsr $2080			jsr 	TOKWriteA
.211e	20 c3 1f	jsr $1fc3			jsr 	TOKTokeniseConstant 		; write integer out.
.2121	18		clc				clc
.2122	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2123					TOKTokeniseIdentifier:
.2123	20 b0 1f	jsr $1fb0			jsr 	TOKResetElement 			; extract an identifier
.2126					_TOKGetIdentifier:
.2126	20 8f 20	jsr $208f			jsr 	TOKGet
.2129	20 81 22	jsr $2281			jsr 	TOKToUpper
.212c	20 a3 22	jsr $22a3			jsr 	TOKIsIdentifierElement
.212f	90 08		bcc $2139			bcc 	_TOKEndIdent
.2131	20 b4 1f	jsr $1fb4			jsr		TOKWriteElement
.2134	20 93 20	jsr $2093			jsr 	TOKGetNext
.2137	80 ed		bra $2126			bra 	_TOKGetIdentifier
.2139					_TOKEndIdent:
.2139	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.213b	d0 06		bne $2143			bne 	_TOKNotString
.213d	20 b4 1f	jsr $1fb4			jsr 	TOKWriteElement 			; add it
.2140	20 93 20	jsr $2093			jsr 	TOKGetNext 					; consume it
.2143					_TOKNotString:
.2143	20 8f 20	jsr $208f			jsr 	TOKGet 						; finally check for (
.2146	c9 28		cmp #$28			cmp 	#"("
.2148	d0 06		bne $2150			bne 	_TOKNoArray
.214a	20 b4 1f	jsr $1fb4			jsr 	TOKWriteElement 			; add it
.214d	20 93 20	jsr $2093			jsr 	TOKGetNext 					; consume it
.2150					_TOKNoArray:
.2150	20 97 20	jsr $2097			jsr 	TOKFindToken 				; find it
.2153	90 18		bcc $216d			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2155	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2157	f0 0f		beq $2168			beq 	_TOKComment 				; yes, do comment code.
.2159	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.215b	d0 06		bne $2163			bne 	_TOKNoShift
.215d	48		pha				pha 								; write the shift.
.215e	8a		txa				txa
.215f	20 80 20	jsr $2080			jsr 	TOKWriteA
.2162	68		pla				pla
.2163					_TOKNoShift:
.2163	20 80 20	jsr $2080			jsr 	TOKWriteA 					; write the main token.
.2166	18		clc				clc
.2167	60		rts				rts
.2168					_TOKComment:
.2168	20 b4 21	jsr $21b4			jsr 	TOKDoComment
.216b	18		clc				clc
.216c	60		rts				rts
.216d					_TOKIsVariable:
.216d	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.216f					_TOKOutputBuffer:
.216f	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2172	20 9b 21	jsr $219b			jsr 	TOKTranslateIdentifier
.2175	20 80 20	jsr $2080			jsr 	TOKWriteA
.2178	e8		inx				inx
.2179	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.217c	20 a3 22	jsr $22a3			jsr 	TOKIsIdentifierElement
.217f	b0 ee		bcs $216f			bcs 	_TOKOutputBuffer
.2181	a8		tay				tay 								; last char in Y
.2182	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2184	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2186	f0 0e		beq $2196			beq 	_TOKIVExit
.2188	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.218a	d0 04		bne $2190			bne 	_TOKIVCheckArray 			; no, check for (
.218c	1a		inc a				inc 	a 							; token is $7D
.218d	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2190					_TOKIVCheckArray:
.2190	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2192	d0 02		bne $2196			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2194	1a		inc a				inc 	a
.2195	1a		inc a				inc 	a
.2196					_TOKIVExit:
.2196	20 80 20	jsr $2080			jsr 	TOKWriteA 					; ending token
.2199	18		clc				clc
.219a	60		rts				rts
.219b					TOKTranslateIdentifier:
.219b	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.219d	f0 0f		beq $21ae			beq 	_TTI64
.219f	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.21a1	f0 0e		beq $21b1			beq 	_TTI65
.21a3	38		sec				sec
.21a4	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.21a6	10 03		bpl $21ab			bpl 	_TTIExit
.21a8	18		clc				clc 								; map 09 onto 26-35
.21a9	69 2b		adc #$2b			adc 	#"A"-"0"+26
.21ab					_TTIExit:
.21ab	09 40		ora #$40			ora 	#$40 						; correct range.
.21ad	60		rts				rts
.21ae	a9 64		lda #$64	_TTI64:	lda 	#$64
.21b0	60		rts				rts
.21b1	a9 65		lda #$65	_TTI65:	lda 	#$65
.21b3	60		rts				rts
.21b4					TOKDoComment:
.21b4	20 80 20	jsr $2080			jsr 	TOKWriteA					; output the token.
.21b7					_TOKSkipSpaces:
.21b7	20 8f 20	jsr $208f			jsr 	TOKGet 						; skip over spaces
.21ba	c9 20		cmp #$20			cmp 	#' '
.21bc	d0 05		bne $21c3			bne 	_TOKEndSpaces
.21be	20 93 20	jsr $2093			jsr 	TOKGetNext
.21c1	80 f4		bra $21b7			bra 	_TOKSkipSpaces
.21c3					_TOKEndSpaces:
.21c3	48		pha				pha 								; save it
.21c4	68		pla				pla
.21c5	f0 04		beq $21cb			beq 	_TOKDCExit 					; end of line.
.21c7	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.21c9	d0 01		bne $21cc			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.21cb					_TOKDCExit:
.21cb	60		rts				rts
.21cc					_TOKDCDoLine:
.21cc	20 b0 1f	jsr $1fb0			jsr 	TOKResetElement 			; start getting the string
.21cf					_TOKDCLoop:
.21cf	20 8f 20	jsr $208f			jsr 	TOKGet 						; check EOL
.21d2	c9 00		cmp #$00			cmp 	#0
.21d4	f0 08		beq $21de			beq 	_TOKDCEndComment
.21d6	20 93 20	jsr $2093			jsr 	TOKGetNext 					; get and consume
.21d9	20 b4 1f	jsr $1fb4			jsr 	TOKWriteElement
.21dc	80 f1		bra $21cf			bra 	_TOKDCLoop
.21de					_TOKDCEndComment:
.21de	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21e0	20 80 20	jsr $2080			jsr 	TOKWriteA
.21e3	20 f5 1f	jsr $1ff5			jsr 	TOKOutputElementBuffer
.21e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.21e7					TOKTokeniseInteger:
.21e7	20 10 22	jsr $2210			jsr 	TOKExtractInteger 			; pull an integer out as text.
.21ea	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.21ec	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.21ee	ad 1c 05	lda $051c			lda		TOKElement
.21f1	20 87 2f	jsr $2f87			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.21f4	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21f7	f0 12		beq $220b			beq 	_TOKNotLineNumber
.21f9	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21fb	d0 0c		bne $2209			bne 	_TOKBadLineNumeber
.21fd	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.21ff	8d 01 04	sta $0401			sta 	TOKLineNumber
.2202	a5 09		lda $09				lda 	IFR0+IM1
.2204	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2207	18		clc				clc
.2208	60		rts				rts
.2209					_TOKBadLineNumeber:
.2209	38		sec				sec
.220a	60		rts				rts
.220b					_TOKNotLineNumber:
.220b	20 c3 1f	jsr $1fc3			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.220e	18		clc				clc
.220f	60		rts				rts
.2210					TOKExtractInteger:
.2210	20 b0 1f	jsr $1fb0			jsr 	TOKResetElement 			; restart
.2213					_TTILoop:
.2213	20 8f 20	jsr $208f			jsr 	TOKGet 						; keep getting and copying while numeric.
.2216	20 97 22	jsr $2297			jsr 	TOKIsDigit
.2219	90 08		bcc $2223			bcc 	_TOKEIExit
.221b	20 b4 1f	jsr $1fb4			jsr 	TOKWriteElement
.221e	20 93 20	jsr $2093			jsr 	TOKGetNext
.2221	80 f0		bra $2213			bra 	_TTILoop
.2223					_TOKEIExit:
.2223	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2224					TOKTokenisePunctuation:
.2224	20 b0 1f	jsr $1fb0			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2227	20 93 20	jsr $2093			jsr 	TOKGetNext
.222a	20 b4 1f	jsr $1fb4			jsr 	TOKWriteElement
.222d	20 8f 20	jsr $208f			jsr 	TOKGet 						; what follows ?
.2230	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2232	f0 10		beq $2244			beq 	_TTPOne
.2234	20 ab 22	jsr $22ab			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2237	b0 0b		bcs $2244			bcs 	_TTPOne 					; these speed things up a bit.
.2239	20 b4 1f	jsr $1fb4			jsr 	TOKWriteElement 			; this is what we will search for.
.223c	20 97 20	jsr $2097			jsr 	TOKFindToken
.223f	b0 0a		bcs $224b			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2241	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2244					_TTPOne:
.2244	20 97 20	jsr $2097			jsr 	TOKFindToken 				; look for one character punctuation
.2247	b0 07		bcs $2250			bcs 	_TTPOutputExit 				; we found it
.2249	38		sec				sec 								; not recognised.
.224a	60		rts				rts
.224b					_TTPConsumeExit:
.224b	48		pha				pha
.224c	20 93 20	jsr $2093			jsr 	TOKGetNext 					; get the 2nd char out.
.224f	68		pla				pla
.2250					_TTPOutputExit:
.2250	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2252	f0 05		beq $2259			beq 	_TTPComment
.2254	20 80 20	jsr $2080			jsr  	TOKWriteA 					; write token out
.2257	18		clc				clc
.2258	60		rts				rts
.2259					_TTPComment:
.2259	20 b4 21	jsr $21b4			jsr 	TOKDoComment
.225c	18		clc				clc
.225d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.225e					TOKTokeniseString:
.225e	20 93 20	jsr $2093			jsr 	TOKGetNext 					; consume the "
.2261	20 b0 1f	jsr $1fb0			jsr 	TOKResetElement 			; start getting the string
.2264					_TOKTSLoop:
.2264	20 8f 20	jsr $208f			jsr 	TOKGet 						; check EOL
.2267	c9 00		cmp #$00			cmp 	#0
.2269	f0 0c		beq $2277			beq 	_TOKTSExit
.226b	20 93 20	jsr $2093			jsr 	TOKGetNext 					; get and consume
.226e	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2270	f0 05		beq $2277			beq 	_TOKTSExit
.2272	20 b4 1f	jsr $1fb4			jsr 	TOKWriteElement
.2275	80 ed		bra $2264			bra 	_TOKTSLoop
.2277					_TOKTSExit:
.2277	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2279	20 80 20	jsr $2080			jsr 	TOKWriteA
.227c	20 f5 1f	jsr $1ff5			jsr 	TOKOutputElementBuffer
.227f	18		clc				clc
.2280	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2281					TOKToUpper:
.2281	c9 61		cmp #$61			cmp 	#"a"
.2283	90 06		bcc $228b			bcc 	_TTUNotLower
.2285	c9 7b		cmp #$7b			cmp 	#"z"+1
.2287	b0 02		bcs $228b			bcs 	_TTUNotLower
.2289	49 20		eor #$20			eor 	#$20
.228b					_TTUNotLower:
.228b	60		rts				rts
.228c					TOKToLower:
.228c	c9 41		cmp #$41			cmp 	#"A"
.228e	90 06		bcc $2296			bcc 	_TTUNotUpper
.2290	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2292	b0 02		bcs $2296			bcs 	_TTUNotUpper
.2294	49 20		eor #$20			eor 	#$20
.2296					_TTUNotUpper:
.2296	60		rts				rts
.2297					TOKIsDigit:
.2297	c9 30		cmp #$30			cmp 	#"0"
.2299	90 06		bcc $22a1			bcc 	TOKFail
.229b	c9 3a		cmp #$3a			cmp 	#"9"+1
.229d	b0 02		bcs $22a1			bcs 	TOKFail
.229f					TOKSucceed:
.229f	38		sec				sec
.22a0	60		rts				rts
.22a1					TOKFail:
.22a1	18		clc				clc
.22a2	60		rts				rts
.22a3					TOKIsIdentifierElement:
.22a3	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.22a5	f0 f8		beq $229f			beq 	TOKSucceed
.22a7	c9 5f		cmp #$5f			cmp 	#"_"
.22a9	f0 f4		beq $229f			beq 	TOKSucceed 					; else fall through to alphanumeric
.22ab					TOKIsAlphaNumeric:
.22ab	20 b4 22	jsr $22b4			jsr 	TOKIsAlpha
.22ae	b0 ef		bcs $229f			bcs 	TOKSucceed
.22b0	20 97 22	jsr $2297			jsr 	TOKIsDigit
.22b3	60		rts				rts
.22b4					TOKIsAlpha:
.22b4	20 81 22	jsr $2281			jsr 	TOKToUpper
.22b7	c9 41		cmp #$41			cmp 	#"A"
.22b9	90 e6		bcc $22a1			bcc 	TOKFail
.22bb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.22bd	b0 e2		bcs $22a1			bcs 	TOKFail
.22bf	80 de		bra $229f			bra 	TOKSucceed
.22c1					TOKIsHexadecimal:
.22c1	20 97 22	jsr $2297			jsr		TOKIsDigit
.22c4	b0 d9		bcs $229f			bcs 	TOKSucceed
.22c6	20 b4 22	jsr $22b4			jsr 	TOKIsAlpha
.22c9	90 d6		bcc $22a1			bcc 	TOKFail
.22cb	c9 47		cmp #$47			cmp 	#"F"+1
.22cd	b0 d2		bcs $22a1			bcs 	TOKFail
.22cf	80 ce		bra $229f			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.22d1					Command_CALL:
.22d1	a9 42		lda #$42			lda 	#STK_CALL
.22d3	20 9e 27	jsr $279e			jsr 	StackOpen
.22d6	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.22d8	29 c0		and #$c0			and 	#$C0
.22da	c9 40		cmp #$40			cmp 	#$40
.22dc	d0 29		bne $2307			bne 	_CCSyntax
.22de	20 66 2a	jsr $2a66			jsr 	VARGetInfo 					; get the information
.22e1	20 85 27	jsr $2785			jsr 	ERRCheckRParen 				; check right bracket follows.
.22e4	20 18 2a	jsr $2a18			jsr 	VARFind 					; exists ?
.22e7	90 21		bcc $230a			bcc 	_CCUnknown
.22e9	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.22eb	85 22		sta $22				sta 	zTemp0
.22ed	20 d2 27	jsr $27d2			jsr 	STKSaveCodePosition 		; save return address on stack.
.22f0	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.22f2	b1 22		lda ($22),y			lda 	(zTemp0),y
.22f4	c9 ff		cmp #$ff			cmp 	#$FF
.22f6	d0 12		bne $230a			bne 	_CCUnknown
.22f8	88		dey				dey 								; get Y offset to stack
.22f9	b1 22		lda ($22),y			lda 	(zTemp0),y
.22fb	48		pha				pha
.22fc	88		dey				dey 								; get address
.22fd	b1 22		lda ($22),y			lda 	(zTemp0),y
.22ff	85 19		sta $19				sta 	codePtr+1
.2301	b2 22		lda ($22)			lda 	(zTemp0)
.2303	85 18		sta $18				sta 	codePtr
.2305	7a		ply				ply 								; restore Y
.2306	60		rts				rts
.2307					_CCSyntax:
.2307	4c d0 25	jmp $25d0		jmp	ErrorV_syntax
.230a					_CCUnknown:
.230a	4c 45 27	jmp $2745		jmp	ErrorV_unknown
.230d					Command_ENDPROC:
.230d	a9 42		lda #$42			lda 	#STK_CALL
.230f	20 ca 27	jsr $27ca			jsr 	StackCheckFrame
.2312	20 e4 27	jsr $27e4			jsr 	STKLoadCodePosition 		; return
.2315	20 bc 27	jsr $27bc			jsr 	StackClose
.2318	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2319					Command_DO:
.2319	a9 22		lda #$22			lda 	#STK_DO
.231b	20 9e 27	jsr $279e			jsr 	StackOpen
.231e	20 d2 27	jsr $27d2			jsr 	STKSaveCodePosition 		; save loop position
.2321	60		rts				rts
.2322					Command_EXIT:
.2322	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2324	20 ca 27	jsr $27ca			jsr 	StackCheckFrame
.2327	20 bc 27	jsr $27bc			jsr 	StackClose 					; close it
.232a	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.232c	aa		tax				tax
.232d	20 e0 24	jsr $24e0			jsr 	ScanForward
.2330	60		rts				rts
.2331					Command_LOOP:
.2331	a9 22		lda #$22			lda 	#STK_DO
.2333	20 ca 27	jsr $27ca			jsr 	StackCheckFrame
.2336	20 e4 27	jsr $27e4			jsr 	STKLoadCodePosition 		; loop back
.2339	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.233a					Command_FOR:
.233a	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.233c	20 9e 27	jsr $279e			jsr 	StackOpen
.233f	20 bf 12	jsr $12bf			jsr 	CommandLET 					; do "I = 1" bit
.2342	5a		phy				phy 								; save variable address to +4,+5
.2343	a0 04		ldy #$04			ldy 	#4
.2345	a5 22		lda $22				lda 	zTemp0
.2347	91 2a		sta ($2a),y			sta 	(basicStack),y
.2349	c8		iny				iny
.234a	a5 23		lda $23				lda 	zTemp0+1
.234c	91 2a		sta ($2a),y			sta 	(basicStack),y
.234e	7a		ply				ply
.234f	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2351	20 95 27	jsr $2795			jsr 	ERRCheckA
.2354	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2357	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2359	a2 08		ldx #$08			ldx 	#IFR0
.235b	20 b0 23	jsr $23b0			jsr 	CFSaveR0X
.235e	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2360	c9 91		cmp #$91			cmp 	#PR_STEP
.2362	d0 06		bne $236a			bne 	_CFStep1
.2364	c8		iny				iny 								; consume step
.2365	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; evaluate STEP
.2368	80 24		bra $238e			bra 	_CFWriteStep
.236a					_CFStep1:
.236a	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.236c	a9 01		lda #$01			lda 	#1
.236e	20 25 31	jsr $3125			jsr 	IFloatSetByte
.2371	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2372	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2374	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2376	85 22		sta $22				sta 	zTemp0
.2378	c8		iny				iny
.2379	b1 2a		lda ($2a),y			lda 	(basicStack),y
.237b	85 23		sta $23				sta 	zTemp0+1
.237d	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.237f	b1 22		lda ($22),y			lda 	(zTemp0),y
.2381	d0 0a		bne $238d			bne 	_CFNotOptimised
.2383	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2385	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2387	d0 04		bne $238d			bne 	_CFNotOptimised
.2389	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.238b	85 0b		sta $0b				sta 	IFR0+IExp
.238d					_CFNotOptimised:
.238d	7a		ply				ply
.238e					_CFWriteStep:
.238e	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2390	a9 06		lda #$06			lda 	#6
.2392	20 b0 23	jsr $23b0			jsr 	CFSaveR0X
.2395	20 d2 27	jsr $27d2			jsr 	STKSaveCodePosition 		; save loop position
.2398	60		rts				rts
.2399					CFLoadR0X:
.2399	5a		phy				phy
.239a	a8		tay				tay
.239b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.239d	95 00		sta $00,x			sta 	IM0,x
.239f	c8		iny				iny
.23a0	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a2	95 01		sta $01,x			sta 	IM1,x
.23a4	c8		iny				iny
.23a5	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a7	95 02		sta $02,x			sta 	IM2,x
.23a9	c8		iny				iny
.23aa	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23ac	95 03		sta $03,x			sta 	IExp,x
.23ae	7a		ply				ply
.23af	60		rts				rts
.23b0					CFSaveR0X:
.23b0	5a		phy				phy
.23b1	a8		tay				tay
.23b2	b5 00		lda $00,x			lda 	IM0,x
.23b4	91 2a		sta ($2a),y			sta 	(basicStack),y
.23b6	c8		iny				iny
.23b7	b5 01		lda $01,x			lda 	IM1,x
.23b9	91 2a		sta ($2a),y			sta 	(basicStack),y
.23bb	c8		iny				iny
.23bc	b5 02		lda $02,x			lda 	IM2,x
.23be	91 2a		sta ($2a),y			sta 	(basicStack),y
.23c0	c8		iny				iny
.23c1	b5 03		lda $03,x			lda 	IExp,x
.23c3	91 2a		sta ($2a),y			sta 	(basicStack),y
.23c5	7a		ply				ply
.23c6	60		rts				rts
.23c7					Command_NEXT:
.23c7	a9 37		lda #$37			lda 	#STK_FOR
.23c9	20 ca 27	jsr $27ca			jsr 	StackCheckFrame
.23cc	5a		phy				phy 								; check optimised loop
.23cd	a0 09		ldy #$09			ldy 	#9
.23cf	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23d1	7a		ply				ply
.23d2	0a		asl a				asl 	a
.23d3	b0 35		bcs $240a			bcs 	_CNOptimised
.23d5	20 41 24	jsr $2441			jsr 	_CNLoadValue 				; load index value to R0.
.23d8	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.23da	a9 06		lda #$06			lda 	#6
.23dc	20 99 23	jsr $2399			jsr 	CFLoadR0X
.23df	20 1b 2b	jsr $2b1b			jsr 	IFloatAdd 					; add them together and write back.
.23e2	20 64 24	jsr $2464			jsr 	_CNSaveValue
.23e5	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.23e7	a2 0c		ldx #$0c			ldx 	#IFR1
.23e9	20 99 23	jsr $2399			jsr 	CFLoadR0X
.23ec	20 f2 2d	jsr $2df2			jsr 	IFloatCompare 				; compare terminal vs current
.23ef	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.23f1	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.23f4	f0 10		beq $2406			beq 	_CNLoopBack
.23f6	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.23f8	5a		phy				phy
.23f9	a0 09		ldy #$09			ldy 	#6+IExp
.23fb	51 2a		eor ($2a),y			eor 	(basicStack),y
.23fd	7a		ply				ply
.23fe	29 40		and #$40			and 	#IFSign
.2400	f0 04		beq $2406			beq 	_CNLoopBack
.2402					_CNExitLoop:
.2402	20 bc 27	jsr $27bc			jsr 	StackClose		 			; return
.2405	60		rts				rts
.2406					_CNLoopBack:
.2406	20 e4 27	jsr $27e4			jsr 	STKLoadCodePosition 		; loop back
.2409	60		rts				rts
.240a					_CNOptimised:
.240a	5a		phy				phy
.240b	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.240d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.240f	85 26		sta $26				sta 	zTemp2
.2411	c8		iny				iny
.2412	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2414	85 27		sta $27				sta 	zTemp2+1
.2416	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2418					_CNIncrement:
.2418	c8		iny				iny
.2419	b1 26		lda ($26),y			lda 	(zTemp2),y
.241b	1a		inc a				inc 	a
.241c	91 26		sta ($26),y			sta 	(zTemp2),y
.241e	f0 f8		beq $2418			beq 	_CNIncrement
.2420	18		clc				clc 								; point zTemp0 to terminal value
.2421	a5 2a		lda $2a				lda 	basicStack
.2423	69 0a		adc #$0a			adc 	#10
.2425	85 22		sta $22				sta 	zTemp0
.2427	a5 2b		lda $2b				lda 	basicStack+1
.2429	69 00		adc #$00			adc 	#0
.242b	85 23		sta $23				sta 	zTemp0+1
.242d	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.242f	b2 26		lda ($26)			lda 	(zTemp2)
.2431	d2 22		cmp ($22)			cmp 	(zTemp0)
.2433	b1 26		lda ($26),y			lda 	(zTemp2),y
.2435	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2437	c8		iny				iny
.2438	b1 26		lda ($26),y			lda 	(zTemp2),y
.243a	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.243c	7a		ply				ply
.243d	b0 c3		bcs $2402			bcs 	_CNExitLoop
.243f	80 c5		bra $2406			bra 	_CNLoopBack
.2441					_CNLoadValue:
.2441	5a		phy				phy
.2442	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2444	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2446	85 26		sta $26				sta 	zTemp2
.2448	c8		iny				iny
.2449	b1 2a		lda ($2a),y			lda 	(basicStack),y
.244b	85 27		sta $27				sta 	zTemp2+1
.244d	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.244f	b1 26		lda ($26),y			lda 	(zTemp2),y
.2451	85 08		sta $08				sta 	IFR0+IM0
.2453	c8		iny				iny
.2454	b1 26		lda ($26),y			lda 	(zTemp2),y
.2456	85 09		sta $09				sta 	IFR0+IM1
.2458	c8		iny				iny
.2459	b1 26		lda ($26),y			lda 	(zTemp2),y
.245b	85 0a		sta $0a				sta 	IFR0+IM2
.245d	c8		iny				iny
.245e	b1 26		lda ($26),y			lda 	(zTemp2),y
.2460	85 0b		sta $0b				sta 	IFR0+IExp
.2462	7a		ply				ply
.2463	60		rts				rts
.2464					_CNSaveValue:
.2464	5a		phy				phy
.2465	a0 00		ldy #$00			ldy 	#0
.2467	a5 08		lda $08				lda 	IFR0+IM0
.2469	91 26		sta ($26),y			sta 	(zTemp2),y
.246b	c8		iny				iny
.246c	a5 09		lda $09				lda 	IFR0+IM1
.246e	91 26		sta ($26),y			sta 	(zTemp2),y
.2470	c8		iny				iny
.2471	a5 0a		lda $0a				lda 	IFR0+IM2
.2473	91 26		sta ($26),y			sta 	(zTemp2),y
.2475	c8		iny				iny
.2476	a5 0b		lda $0b				lda 	IFR0+IExp
.2478	91 26		sta ($26),y			sta 	(zTemp2),y
.247a	7a		ply				ply
.247b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.247c					Command_GOSUB:
.247c	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; get line number
.247f	a9 52		lda #$52			lda 	#STK_GOSUB
.2481	20 9e 27	jsr $279e			jsr 	StackOpen
.2484	20 d2 27	jsr $27d2			jsr 	STKSaveCodePosition 		; save return address on stack.
.2487	4c e0 11	jmp $11e0			jmp 	GotoR0
.248a					Command_RETURN:
.248a	a9 52		lda #$52			lda 	#STK_GOSUB
.248c	20 ca 27	jsr $27ca			jsr 	StackCheckFrame
.248f	20 e4 27	jsr $27e4			jsr 	STKLoadCodePosition 		; return
.2492	20 bc 27	jsr $27bc			jsr 	StackClose
.2495	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2496					IfCommand:
.2496	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; Get the if test.
.2499	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.249b	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.249d	d0 0c		bne $24ab			bne 	_IfStructured 				; we still support it.
.249f	c8		iny				iny 								; consume THEN
.24a0	a2 08		ldx #$08			ldx 	#IFR0
.24a2	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; is it zero
.24a5	f0 01		beq $24a8			beq 	_IfFail 					; if fail, go to next line
.24a7	60		rts				rts 								; if THEN just continue
.24a8					_IfFail:
.24a8	4c cd 14	jmp $14cd			jmp 	RUNEndOfLine
.24ab					_IfStructured:
.24ab	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; is it zero
.24ae	d0 07		bne $24b7			bne 	_IfExit 					; if not, then continue normally.
.24b0	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.24b2	a2 85		ldx #$85			ldx 	#PR_ENDIF
.24b4	20 e0 24	jsr $24e0			jsr 	ScanForward 				; and run from there
.24b7					_IfExit:
.24b7	60		rts				rts
.24b8					ElseCode:
.24b8	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.24ba	aa		tax				tax 								; so just go to the structure exit
.24bb	20 e0 24	jsr $24e0			jsr 	ScanForward
.24be	60		rts				rts
.24bf					EndIf:
.24bf	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.24c0					Command_REPEAT:
.24c0	a9 02		lda #$02			lda 	#STK_REPEAT
.24c2	20 9e 27	jsr $279e			jsr 	StackOpen
.24c5	20 d2 27	jsr $27d2			jsr 	STKSaveCodePosition 		; save loop position
.24c8	60		rts				rts
.24c9					Command_UNTIL:
.24c9	a9 02		lda #$02			lda 	#STK_REPEAT
.24cb	20 ca 27	jsr $27ca			jsr 	StackCheckFrame
.24ce	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; work out the test
.24d1	a2 08		ldx #$08			ldx 	#IFR0
.24d3	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; check if zero
.24d6	f0 04		beq $24dc			beq 	_CULoopBack 				; if so keep looping
.24d8	20 bc 27	jsr $27bc			jsr 	StackClose		 			; return
.24db	60		rts				rts
.24dc					_CULoopBack:
.24dc	20 e4 27	jsr $27e4			jsr 	STKLoadCodePosition 		; loop back
.24df	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.24e0					ScanForward:
.24e0	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.24e2	86 23		stx $23				stx 	zTemp0+1
.24e4	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.24e6					_ScanForwardLoop:
.24e6	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.24e8	d0 0a		bne $24f4			bne 	_ScanNoCheck
.24ea	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.24ec	c5 22		cmp $22				cmp 	zTemp0
.24ee	f0 49		beq $2539			beq 	_ScanExit
.24f0	c5 23		cmp $23				cmp 	zTemp0+1
.24f2	f0 45		beq $2539			beq 	_ScanExit
.24f4					_ScanNoCheck:
.24f4	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.24f6	c8		iny				iny
.24f7	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.24f9	f0 37		beq $2532			beq		_ScanDataItem
.24fb	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.24fd	f0 33		beq $2532			beq 	_ScanDataItem
.24ff	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2501	f0 1b		beq $251e			beq 	_ScanNextLine
.2503	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2505	d0 01		bne $2508			bne 	_ScanNoShift
.2507	c8		iny				iny
.2508					_ScanNoShift:
.2508	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.250a	b0 da		bcs $24e6			bcs 	_ScanForwardLoop
.250c	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.250e	90 d6		bcc $24e6			bcc 	_ScanForwardLoop
.2510	aa		tax				tax 								; access the table to get the adjustment.
.2511	18		clc				clc
.2512	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2514	7d 27 1a	adc $1a27,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2517	85 24		sta $24				sta 	zTemp1
.2519	10 cb		bpl $24e6			bpl		_ScanForwardLoop 			; error if -ve ?
.251b	4c 5c 26	jmp $265c		jmp	ErrorV_structure
.251e					_ScanNextLine:
.251e	18		clc				clc	 								; forward to next line.
.251f	b2 18		lda ($18)			lda 	(codePtr)
.2521	65 18		adc $18				adc 	codePtr
.2523	85 18		sta $18				sta 	codePtr
.2525	90 02		bcc $2529			bcc 	_ScanNoCarry
.2527	e6 19		inc $19				inc 	codePtr+1
.2529					_ScanNoCarry:
.2529	a0 03		ldy #$03			ldy 	#3
.252b	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.252d	d0 b7		bne $24e6			bne 	_ScanForwardLoop
.252f	4c 5c 26	jmp $265c		jmp	ErrorV_structure
.2532					_ScanDataItem:
.2532	98		tya				tya
.2533	38		sec				sec
.2534	71 18		adc ($18),y			adc 	(codePtr),y
.2536	a8		tay				tay
.2537	80 ad		bra $24e6			bra 	_ScanForwardLoop
.2539					_ScanExit:
.2539	c8		iny				iny 								; consume final token.
.253a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.253b					ScanProcedures:
.253b	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.253d	48		pha				pha
.253e	a5 19		lda $19				lda 	codePtr+1
.2540	48		pha				pha
.2541	5a		phy				phy
.2542	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2545	85 19		sta $19				sta 	codePtr+1
.2547	64 18		stz $18				stz 	codePtr
.2549					_SPLoop:
.2549	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.254b	f0 18		beq $2565			beq 	_SPExit
.254d	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.254f	b1 18		lda ($18),y			lda 	(codePtr),y
.2551	c9 88		cmp #$88			cmp 	#PR_PROC
.2553	d0 03		bne $2558			bne 	_SPNext
.2555	20 6d 25	jsr $256d			jsr 	_SPSetupRecord
.2558					_SPNext:
.2558	18		clc				clc 								; forward to next
.2559	b2 18		lda ($18)			lda 	(codePtr)
.255b	65 18		adc $18				adc 	codePtr
.255d	85 18		sta $18				sta 	codePtr
.255f	90 e8		bcc $2549			bcc 	_SPLoop
.2561	e6 19		inc $19				inc 	codePtr+1
.2563	80 e4		bra $2549			bra 	_SPLoop
.2565					_SPExit:
.2565	7a		ply				ply
.2566	68		pla				pla
.2567	85 19		sta $19				sta 	codePtr+1
.2569	68		pla				pla
.256a	85 18		sta $18				sta 	codePtr
.256c	60		rts				rts
.256d					_SPSetupRecord:
.256d	c8		iny				iny 								; check identifier follows
.256e	b1 18		lda ($18),y			lda 	(codePtr),y
.2570	29 c0		and #$c0			and 	#$C0
.2572	c9 40		cmp #$40			cmp 	#$40
.2574	d0 27		bne $259d			bne 	_SPSyntax
.2576	20 66 2a	jsr $2a66			jsr 	VARGetInfo 					; get the information
.2579	20 85 27	jsr $2785			jsr 	ERRCheckRParen 				; check right bracket follows.
.257c	20 18 2a	jsr $2a18			jsr 	VARFind 					; already exists ?
.257f	b0 1f		bcs $25a0			bcs 	_SPUsed 					; error !
.2581	20 c4 29	jsr $29c4			jsr 	VARCreate 					; create, XA points to the data.
.2584	85 22		sta $22				sta 	zTemp0
.2586	86 23		stx $23				stx 	zTemp0+1
.2588	5a		phy				phy 								; save Y pos on stack
.2589	a0 01		ldy #$01			ldy 	#1
.258b	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.258d	92 22		sta ($22)			sta 	(zTemp0)
.258f	a5 19		lda $19				lda 	codePtr+1
.2591	91 22		sta ($22),y			sta 	(zTemp0),y
.2593	c8		iny				iny
.2594	68		pla				pla
.2595	91 22		sta ($22),y			sta 	(zTemp0),y
.2597	c8		iny				iny
.2598	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.259a	91 22		sta ($22),y			sta 	(zTemp0),y
.259c	60		rts				rts
.259d					_SPSyntax:
.259d	4c d0 25	jmp $25d0		jmp	ErrorV_syntax
.25a0					_SPUsed:
.25a0	4c 27 27	jmp $2727		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.25a3					Command_WHILE:
.25a3	5a		phy				phy 								; save position of the test
.25a4	20 0c 17	jsr $170c			jsr 	EXPEvalNumber 				; work out the while test.
.25a7	a2 08		ldx #$08			ldx 	#IFR0
.25a9	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; check if zero
.25ac	f0 0e		beq $25bc			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.25ae	98		tya				tya 								; position *after* test.
.25af	7a		ply				ply 								; restore position before test, at WHILE
.25b0	88		dey				dey 								; so we execute the WHILE command again.
.25b1	48		pha				pha 								; push after test on the stack
.25b2	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.25b4	20 9e 27	jsr $279e			jsr 	StackOpen
.25b7	20 d2 27	jsr $27d2			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.25ba	7a		ply				ply 								; restore the position *after* the test
.25bb	60		rts				rts
.25bc					_WHExitLoop:
.25bc	68		pla				pla 								; throw post loop position
.25bd	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.25bf	aa		tax				tax
.25c0	20 e0 24	jsr $24e0			jsr 	ScanForward
.25c3	60		rts				rts
.25c4					Command_WEND:
.25c4	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.25c6	20 ca 27	jsr $27ca			jsr 	StackCheckFrame
.25c9	20 e4 27	jsr $27e4			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.25cc	20 bc 27	jsr $27bc			jsr 	StackClose		 			; erase the frame
.25cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.25d0					ErrorV_syntax:
.25d0	20 bd 28	jsr $28bd		jsr	ErrorHandler
>25d3	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>25db	45 72 72 6f 72 00
.25e1					ErrorV_range:
.25e1	20 bd 28	jsr $28bd		jsr	ErrorHandler
>25e4	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>25ec	52 61 6e 67 65 00
.25f2					ErrorV_value:
.25f2	20 bd 28	jsr $28bd		jsr	ErrorHandler
>25f5	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>25fd	75 65 00
.2600					ErrorV_type:
.2600	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2603	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>260b	73 6d 61 74 63 68 00
.2612					ErrorV_unimplemented:
.2612	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2615	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>261d	6c 65 6d 65 6e 74 65 64 00
.2626					ErrorV_assert:
.2626	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2629	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2631	46 61 69 6c 00
.2636					ErrorV_internal:
.2636	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2639	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2641	6c 20 45 72 72 6f 72 00
.2649					ErrorV_divzero:
.2649	20 bd 28	jsr $28bd		jsr	ErrorHandler
>264c	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2654	42 79 20 5a 65 72 6f 00
.265c					ErrorV_structure:
.265c	20 bd 28	jsr $28bd		jsr	ErrorHandler
>265f	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2667	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2674					ErrorV_stop:
.2674	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2677	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>267f	20 53 74 6f 70 70 65 64 00
.2688					ErrorV_data:
.2688	20 bd 28	jsr $28bd		jsr	ErrorHandler
>268b	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2693	44 61 74 61 00
.2698					ErrorV_redefine:
.2698	20 bd 28	jsr $28bd		jsr	ErrorHandler
>269b	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>26a3	65 64 65 66 69 6e 65 64 00
.26ac					ErrorV_index:
.26ac	20 bd 28	jsr $28bd		jsr	ErrorHandler
>26af	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>26b7	61 79 20 49 6e 64 65 78 00
.26c0					ErrorV_memory:
.26c0	20 bd 28	jsr $28bd		jsr	ErrorHandler
>26c3	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>26cb	4d 65 6d 6f 72 79 00
.26d2					ErrorV_uninitialised:
.26d2	20 bd 28	jsr $28bd		jsr	ErrorHandler
>26d5	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>26dd	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.26ed					ErrorV_string:
.26ed	20 bd 28	jsr $28bd		jsr	ErrorHandler
>26f0	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>26f8	69 6e 67 20 4c 65 6e 67 74 68 00
.2703					ErrorV_variable:
.2703	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2706	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>270e	65 20 4d 69 73 73 69 6e 67 00
.2718					ErrorV_stack:
.2718	20 bd 28	jsr $28bd		jsr	ErrorHandler
>271b	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2723	75 6c 6c 00
.2727					ErrorV_dupproc:
.2727	20 bd 28	jsr $28bd		jsr	ErrorHandler
>272a	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2732	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2742	65 64 00
.2745					ErrorV_unknown:
.2745	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2748	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2750	20 50 72 6f 63 65 64 75 72 65 00
.275b					ErrorV_break:
.275b	20 bd 28	jsr $28bd		jsr	ErrorHandler
>275e	05 42 72 65 61 6b 00			.text	5,"Break",0
.2765					ErrorV_line:
.2765	20 bd 28	jsr $28bd		jsr	ErrorHandler
>2768	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2770	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.277d					ERRCheckLParen:
.277d	b1 18		lda ($18),y			lda 	(codePtr),y
.277f	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2781	d0 18		bne $279b			bne 	ERRSyntaxError
.2783	c8		iny				iny
.2784	60		rts				rts
.2785					ERRCheckRParen:
.2785	b1 18		lda ($18),y			lda 	(codePtr),y
.2787	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2789	d0 10		bne $279b			bne 	ERRSyntaxError
.278b	c8		iny				iny
.278c	60		rts				rts
.278d					ERRCheckComma:
.278d	b1 18		lda ($18),y			lda 	(codePtr),y
.278f	c9 99		cmp #$99			cmp 	#PR_COMMA
.2791	d0 08		bne $279b			bne 	ERRSyntaxError
.2793	c8		iny				iny
.2794	60		rts				rts
.2795					ERRCheckA:
.2795	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2797	d0 02		bne $279b			bne 	ERRSyntaxError
.2799	c8		iny				iny
.279a	60		rts				rts
.279b					ERRSyntaxError:
.279b	4c d0 25	jmp $25d0		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.279e					StackOpen:
.279e	48		pha				pha 								; save frame byte
.279f	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.27a1	0a		asl a				asl 	a 							; claim twice this for storage
.27a2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.27a4	38		sec				sec 								; so basically subtracting from
.27a5	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.27a7	85 2a		sta $2a				sta 	basicStack
.27a9	b0 0a		bcs $27b5			bcs 	_SONoBorrow
>27ab	db						.byte 	$DB
.27ac	c6 2b		dec $2b				dec 	basicStack+1
.27ae	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.27b0	cd 20 06	cmp $0620			cmp 	basicStackEnd
.27b3	f0 04		beq $27b9			beq 	_SOMemory
.27b5					_SONoBorrow:
.27b5	68		pla				pla 								; get marker back and write at TOS
.27b6	92 2a		sta ($2a)			sta 	(basicStack)
.27b8	60		rts				rts
.27b9					_SOMemory:
.27b9	4c 18 27	jmp $2718		jmp	ErrorV_stack
.27bc					StackClose:
.27bc	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.27be	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.27c0	0a		asl a				asl 	a 							; claim twice this.
.27c1	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.27c3	85 2a		sta $2a				sta 	basicStack
.27c5	90 02		bcc $27c9			bcc 	_SCExit
.27c7	e6 2b		inc $2b				inc 	basicStack+1
.27c9					_SCExit:
.27c9	60		rts				rts
.27ca					StackCheckFrame:
.27ca	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.27cc	d0 01		bne $27cf			bne 	_SCFError 					; different, we have structures mixed up
.27ce	60		rts				rts
.27cf					_SCFError:
.27cf	4c 5c 26	jmp $265c		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.27d2					STKSaveCodePosition:
.27d2	5a		phy				phy
.27d3	98		tya				tya 								; save Y at offset 1.
.27d4	a0 01		ldy #$01			ldy 	#1
.27d6	91 2a		sta ($2a),y			sta 	(basicStack),y
.27d8	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.27da	c8		iny				iny
.27db	91 2a		sta ($2a),y			sta 	(basicStack),y
.27dd	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.27df	c8		iny				iny
.27e0	91 2a		sta ($2a),y			sta 	(basicStack),y
.27e2	7a		ply				ply
.27e3	60		rts				rts
.27e4					STKLoadCodePosition:
.27e4	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.27e6	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27e8	85 19		sta $19				sta 	codePtr+1
.27ea	88		dey				dey
.27eb	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27ed	85 18		sta $18				sta 	codePtr
.27ef	88		dey				dey
.27f0	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.27f2	a8		tay				tay
.27f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.27f4					StackReset:
.27f4	48		pha				pha 								; save top of memory
.27f5	3a		dec a				dec 	a  							; end of stack = previous byte
.27f6	85 2b		sta $2b				sta 	basicStack+1
.27f8	a9 ff		lda #$ff			lda 	#$FF
.27fa	85 2a		sta $2a				sta 	basicStack
.27fc	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.27fe	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2800	68		pla				pla 								; allocate pages for stack.
.2801	38		sec				sec
.2802	e9 02		sbc #$02			sbc 	#STACKPAGES
.2804	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2807	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2808					StringConcrete:
.2808	5a		phy				phy 								; save position on stack
.2809	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.280b	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.280d	b0 41		bcs $2850			bcs 	_SALengthError
.280f	18		clc				clc 								; length of the new string
.2810	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2812	90 02		bcc $2816			bcc 	_SAHaveLength
.2814	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2816					_SAHaveLength:
.2816	48		pha				pha 								; save length to be allocated for concreting.
.2817	38		sec				sec
.2818	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.281a	6d 22 06	adc $0622			adc 	stringMemory
.281d	8d 22 06	sta $0622			sta 	stringMemory
.2820	85 26		sta $26				sta 	zTemp2 						; update storage address
.2822	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2824	6d 23 06	adc $0623			adc 	stringMemory+1
.2827	8d 23 06	sta $0623			sta 	stringMemory+1
.282a	85 27		sta $27				sta 	zTemp2+1
.282c	68		pla				pla 								; save length allocated in +0
.282d	92 26		sta ($26)			sta 	(zTemp2)
.282f	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2831	a0 01		ldy #$01			ldy 	#1
.2833	91 26		sta ($26),y			sta 	(zTemp2),y
.2835					_SACopyNewString:
.2835	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2837	a0 02		ldy #$02			ldy 	#2
.2839	91 26		sta ($26),y			sta 	(zTemp2),y
.283b	aa		tax				tax 								; bytes to copy
.283c	f0 0c		beq $284a			beq 	_SACopyExit
.283e	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2840					_SACopyNSLoop:
.2840	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2842	c8		iny				iny 								; write two on in string storage
.2843	c8		iny				iny
.2844	91 26		sta ($26),y			sta 	(zTemp2),y
.2846	88		dey				dey
.2847	ca		dex				dex									; until copied all the string lengths.
.2848	d0 f6		bne $2840			bne 	_SACopyNSLoop
.284a					_SACopyExit:
.284a	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.284c	a5 26		lda $26				lda 	zTemp2
.284e	7a		ply				ply
.284f	60		rts				rts
.2850					_SALengthError:
.2850	4c ed 26	jmp $26ed		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2853					StringSystemInitialise:
.2853	3a		dec a				dec 	a 							; make last byte of previous page.
.2854	8d 23 06	sta $0623			sta 	stringMemory+1
.2857	85 23		sta $23				sta 	zTemp0+1
.2859	a9 ff		lda #$ff			lda 	#$FF
.285b	8d 22 06	sta $0622			sta 	stringMemory
.285e	85 22		sta $22				sta 	zTemp0
.2860	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2862	92 22		sta ($22)			sta 	(zTemp0)
.2864	60		rts				rts
.2865					StringSpaceInitialise:
.2865	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2867	8d 21 06	sta $0621			sta 	stringInitialised
.286a	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.286d	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2870	ad 23 06	lda $0623			lda 	stringMemory+1
.2873	3a		dec a				dec 	a
.2874	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2877	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.287a	60		rts				rts
.287b					StringTempAllocate:
.287b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.287d	b0 2e		bcs $28ad			bcs 	_STALength
.287f	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2882	30 05		bmi $2889			bmi 	_STAAllocate
.2884	48		pha				pha 								; save value to subtract.
.2885	20 65 28	jsr $2865			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2888	68		pla				pla 								; restore it
.2889					_STAAllocate:
.2889	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.288b	18		clc				clc  								; deliberate allows one more
.288c	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.288f	8d 24 06	sta $0624			sta 	stringTempPointer
.2892	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2894	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2896	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2899	69 ff		adc #$ff			adc 	#$FF
.289b	8d 25 06	sta $0625			sta 	stringTempPointer+1
.289e	85 2d		sta $2d				sta 	zsTemp+1
.28a0	85 09		sta $09				sta 	IFR0+IM1
.28a2	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.28a4	a9 80		lda #$80			lda 	#$80
.28a6	85 0b		sta $0b				sta 	IFR0+IExp
.28a8	a9 00		lda #$00			lda 	#0 							; clear the target string
.28aa	92 2c		sta ($2c)			sta 	(zsTemp)
.28ac	60		rts				rts
.28ad					_STALength:
.28ad	4c ed 26	jmp $26ed		jmp	ErrorV_string
.28b0					StringTempWrite:
.28b0	5a		phy				phy
.28b1	48		pha				pha
.28b2	b2 2c		lda ($2c)			lda 	(zsTemp)
.28b4	1a		inc a				inc 	a
.28b5	92 2c		sta ($2c)			sta 	(zsTemp)
.28b7	a8		tay				tay
.28b8	68		pla				pla
.28b9	91 2c		sta ($2c),y			sta 	(zsTemp),y
.28bb	7a		ply				ply
.28bc	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.28bd					ErrorHandler:
.28bd	fa		plx				plx 								; get address of msg
.28be	7a		ply				ply
.28bf	e8		inx				inx 								; bump past RTS
.28c0	d0 01		bne $28c3			bne 	_EHNoInc
.28c2	c8		iny				iny
.28c3					_EHNoInc:
.28c3	20 f4 ff	jsr $fff4			jsr	 	OSWriteString 				; print it.
.28c6	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.28c9	0d 27 06	ora $0627			ora 	ERRLine+1
.28cc	f0 10		beq $28de			beq 	_EHNoNumber
.28ce	a2 e1		ldx #$e1			ldx 	#_EHAtMsg & $FF
.28d0	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.28d2	20 f4 ff	jsr $fff4			jsr 	OSWriteString
.28d5	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.28d8	ae 27 06	ldx $0627			ldx 	ERRLine+1
.28db	20 e6 28	jsr $28e6			jsr 	WriteIntXA
.28de					_EHNoNumber:
.28de	4c 0f 29	jmp $290f			jmp 	WarmStartNewLine
.28e1					_EHAtMsg:
>28e1	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.28e6					_EHAtMsg1:
.28e6					WriteIntXA:
.28e6	da		phx				phx
.28e7	48		pha				pha
.28e8	a2 08		ldx #$08			ldx 	#IFR0
.28ea	20 72 30	jsr $3072			jsr 	IFloatPushRx
.28ed	68		pla				pla
.28ee	20 25 31	jsr $3125			jsr 	IFloatSetByte
.28f1	68		pla				pla
.28f2	85 09		sta $09				sta 	IFR0+IM1
.28f4	a9 0a		lda #$0a			lda 	#10 						; decimal
.28f6	20 c5 2e	jsr $2ec5			jsr 	IFloatIntegerToStringR0	 	; convert
.28f9	20 f4 ff	jsr $fff4			jsr 	OSWriteString 				; print
.28fc	a2 08		ldx #$08			ldx 	#IFR0
.28fe	20 93 30	jsr $3093			jsr 	IFloatPullRx
.2901	60		rts				rts
.2902					NotImplemented:
.2902	4c 12 26	jmp $2612		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2905					WarmStart:
.2905	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2907	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.290a	a9 6b		lda #$6b			lda 	#"k"
.290c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.290f					WarmStartNewLine:
.290f	a9 0d		lda #$0d			lda 	#13
.2911	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2914					WarmStartNoPrompt:
.2914	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2916	9a		txs				txs
.2917	20 df ff	jsr $ffdf			jsr 	OSEnterLine 				; edit
.291a	e8		inx				inx 								; skip length byte to make it ASCIIZ
.291b	d0 01		bne $291e			bne 	_WSSkip
.291d	c8		iny				iny
.291e					_WSSkip:
.291e	86 26		stx $26				stx 	zTemp2 						; save address
.2920	84 27		sty $27				sty 	zTemp2+1
.2922	a2 4f		ldx #$4f			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2924	a0 29		ldy #$29			ldy 	#TOKGetCharacter >> 8
.2926	38		sec				sec
.2927	20 0b 20	jsr $200b			jsr 	TOKTokenise
.292a	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.292d	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2930	d0 0b		bne $293d			bne 	_WSLineEdit
.2932	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2934	85 18		sta $18				sta 	codePtr
.2936	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2938	85 19		sta $19				sta 	codePtr+1
.293a	4c d8 14	jmp $14d8			jmp 	RUNNewLine
.293d					_WSLineEdit:
.293d	20 e6 1e	jsr $1ee6			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2940	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2943	c9 04		cmp #$04			cmp 	#4
.2945	f0 03		beq $294a			beq 	_WSNoInsert
.2947	20 30 1f	jsr $1f30			jsr 	PGMInsertLine				; if not, maybe insert
.294a					_WSNoInsert:
.294a	20 44 10	jsr $1044			jsr 	ClearCode 					; clear variables etc.
.294d	80 c5		bra $2914			bra 	WarmStartNoPrompt
.294f					TOKGetCharacter:
.294f	b2 26		lda ($26)			lda 	(zTemp2)
.2951	90 06		bcc $2959			bcc 	_GSNoIncrement
.2953	e6 26		inc $26				inc 	zTemp2
.2955	d0 02		bne $2959			bne 	_GSNoIncrement
.2957	e6 27		inc $27				inc 	zTemp2+1
.2959					_GSNoIncrement:
.2959	c9 00		cmp #$00			cmp 	#0
.295b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.295c					VARArrayLookup:
.295c	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.295e	86 23		stx $23				stx 	zTemp0+1
.2960	b2 22		lda ($22)			lda 	(zTemp0)
.2962	48		pha				pha
.2963	5a		phy				phy
.2964	a0 01		ldy #$01			ldy 	#1
.2966	b1 22		lda ($22),y			lda 	(zTemp0),y
.2968	7a		ply				ply
.2969	48		pha				pha
.296a	20 1e 17	jsr $171e			jsr 	EXPEvalInteger16 			; R0 now contains the index
.296d	68		pla				pla 								; array address to zTemp0
.296e	85 23		sta $23				sta 	zTemp0+1
.2970	68		pla				pla
.2971	85 22		sta $22				sta 	zTemp0
.2973	5a		phy				phy 								; save codePtr position.
.2974	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2976	b1 22		lda ($22),y			lda 	(zTemp0),y
.2978	48		pha				pha 								; save bit 15 on stack.
.2979	29 7f		and #$7f			and 	#$7F
.297b	85 24		sta $24				sta 	zTemp1
.297d	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.297f	d2 22		cmp ($22)			cmp 	(zTemp0)
.2981	a5 09		lda $09				lda 	IFR0+IM1
.2983	e5 24		sbc $24				sbc 	zTemp1
.2985	b0 3a		bcs $29c1			bcs 	_VALIndex
.2987	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2989	c9 40		cmp #$40			cmp 	#$40
.298b	b0 34		bcs $29c1			bcs 	_VALIndex
.298d	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.298f	26 09		rol $09				rol 	IFR0+IM1
.2991	fa		plx				plx 								; get msb of size -> X
.2992	30 04		bmi $2998			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2994	06 08		asl $08				asl 	IFR0+IM0
.2996	26 09		rol $09				rol 	IFR0+IM1
.2998					_VARNotX4:
.2998	18		clc				clc 								; add the two for the size bytes
.2999	a5 08		lda $08				lda 	IFR0+IM0
.299b	69 02		adc #$02			adc 	#2
.299d	85 08		sta $08				sta 	IFR0+IM0
.299f	90 02		bcc $29a3			bcc 	_VARNoCarry1
.29a1	e6 09		inc $09				inc 	IFR0+IM1
.29a3					_VARNoCarry1:
.29a3	18		clc				clc 								; calculate the element address and push to stack.
.29a4	a5 08		lda $08				lda 	IFR0+IM0
.29a6	65 22		adc $22				adc 	zTemp0
.29a8	48		pha				pha
.29a9	a5 09		lda $09				lda 	IFR0+IM1
.29ab	65 23		adc $23				adc 	zTemp0+1
.29ad	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.29af	30 04		bmi $29b5			bmi 	_VARHasSubLevel
.29b1	aa		tax				tax 								; address in XA
.29b2	68		pla				pla
.29b3	7a		ply				ply 								; restore Y and exit
.29b4	60		rts				rts
.29b5					_VARHasSubLevel:
.29b5	aa		tax				tax 								; get link address in XA
.29b6	68		pla				pla
.29b7	7a		ply				ply 								; restore code position.
.29b8	48		pha				pha
.29b9	20 8d 27	jsr $278d			jsr 	ERRCheckComma 				; comma required.
.29bc	68		pla				pla
.29bd	20 5c 29	jsr $295c			jsr 	VARArrayLookup 				; call it recursively
.29c0	60		rts				rts
.29c1					_VALIndex:
.29c1	4c ac 26	jmp $26ac		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.29c4					VARCreate:
.29c4	5a		phy				phy
.29c5	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.29c7	a2 00		ldx #$00			ldx 	#0
.29c9	20 61 10	jsr $1061			jsr 	AllocateMemory
.29cc	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.29ce	86 25		stx $25				stx 	zTemp1+1
.29d0	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.29d2	ad 2a 06	lda $062a			lda 	VARHash
.29d5	91 24		sta ($24),y			sta 	(zTemp1),y
.29d7	c8		iny				iny 								; put address of name into +3,+4
.29d8	ad 28 06	lda $0628			lda 	VARNameAddress
.29db	91 24		sta ($24),y			sta 	(zTemp1),y
.29dd	c8		iny				iny
.29de	ad 29 06	lda $0629			lda 	VARNameAddress+1
.29e1	91 24		sta ($24),y			sta 	(zTemp1),y
.29e3	ad 2b 06	lda $062b			lda 	VARType
.29e6	29 01		and #$01			and 	#1
.29e8	f0 06		beq $29f0			beq 	_CVNotString
.29ea	a0 08		ldy #$08			ldy 	#5+3
.29ec	a9 80		lda #$80			lda 	#$80
.29ee	91 24		sta ($24),y			sta 	(zTemp1),y
.29f0					_CVNotString:
.29f0	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.29f3	85 22		sta $22				sta 	zTemp0
.29f5	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.29f8	85 23		sta $23				sta 	zTemp0+1
.29fa	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.29fc	b2 22		lda ($22)			lda 	(zTemp0)
.29fe	92 24		sta ($24)			sta 	(zTemp1)
.2a00	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a02	91 24		sta ($24),y			sta 	(zTemp1),y
.2a04	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2a06	92 22		sta ($22)			sta 	(zTemp0)
.2a08	a5 25		lda $25				lda 	zTemp1+1
.2a0a	91 22		sta ($22),y			sta 	(zTemp0),y
.2a0c	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2a0e	a6 25		ldx $25				ldx 	zTemp1+1
.2a10	18		clc				clc 								; add 5 to point to the data.
.2a11	69 05		adc #$05			adc 	#5
.2a13	90 01		bcc $2a16			bcc 	_VCNoCarry
.2a15	e8		inx				inx
.2a16					_VCNoCarry:
.2a16	7a		ply				ply
.2a17	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2a18					VARFind:
.2a18	5a		phy				phy
.2a19	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2a1b	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a1d	85 25		sta $25				sta 	zTemp1+1
.2a1f	f0 1c		beq $2a3d			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2a21	b2 22		lda ($22)			lda 	(zTemp0)
.2a23	85 24		sta $24				sta 	zTemp1
.2a25					_VFLoop:
.2a25	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2a27	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a29	cd 2a 06	cmp $062a			cmp 	VARHash
.2a2c	f0 12		beq $2a40			beq 	_VFHashesMatch 				; if so, check the name.
.2a2e					_VFNext:
.2a2e	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2a30	aa		tax				tax
.2a31	a0 01		ldy #$01			ldy 	#1
.2a33	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a35	85 25		sta $25				sta 	zTemp1+1
.2a37	86 24		stx $24				stx 	zTemp1
.2a39	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2a3b	d0 e8		bne $2a25			bne 	_VFLoop
.2a3d					_VFExitFail:
.2a3d	7a		ply				ply
.2a3e	18		clc				clc
.2a3f	60		rts				rts
.2a40					_VFHashesMatch:
.2a40	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2a42	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a44	85 26		sta $26				sta 	zTemp2
.2a46	c8		iny				iny
.2a47	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a49	85 27		sta $27				sta 	zTemp2+1
.2a4b	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2a4d					_VFNameCompLoop:
.2a4d	c8		iny				iny 								; char at a time
.2a4e	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2a51	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2a53	d0 d9		bne $2a2e			bne 	_VFNext						; next entry if different.
.2a55	c9 7c		cmp #$7c			cmp 	#$7C
.2a57	90 f4		bcc $2a4d			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2a59	18		clc				clc
.2a5a	a5 24		lda $24				lda 	zTemp1
.2a5c	a6 25		ldx $25				ldx 	zTemp1+1
.2a5e	69 05		adc #$05			adc 	#5
.2a60	90 01		bcc $2a63			bcc 	_VFNNoCarry
.2a62	e8		inx				inx
.2a63					_VFNNoCarry:
.2a63	7a		ply				ply
.2a64	38		sec				sec
.2a65	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a66					VARGetInfo:
.2a66	98		tya				tya 								; calculate the address of the identifier start.
.2a67	18		clc				clc
.2a68	65 18		adc $18				adc 	codePtr
.2a6a	8d 28 06	sta $0628			sta 	VARNameAddress
.2a6d	a5 19		lda $19				lda 	codePtr+1
.2a6f	69 00		adc #$00			adc 	#0
.2a71	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a74	9c 2a 06	stz $062a			stz 	VARHash
.2a77	a2 00		ldx #$00			ldx 	#0
.2a79					_VARCopyName:
.2a79	18		clc				clc 								; update the sum hash.
.2a7a	ad 2a 06	lda $062a			lda 	VARHash
.2a7d	71 18		adc ($18),y			adc 	(codePtr),y
.2a7f	8d 2a 06	sta $062a			sta 	VARHash
.2a82	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a84	c8		iny				iny
.2a85	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a88	e8		inx				inx
.2a89	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a8b	90 ec		bcc $2a79			bcc 	_VARCopyName
.2a8d	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a90	29 03		and #$03			and 	#3 							; type is 0-3
.2a92	0a		asl a				asl 	a
.2a93	0a		asl a				asl 	a
.2a94	85 22		sta $22				sta 	zTemp0
.2a96	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2a99	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2a9b	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2a9d	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2a9e	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2aa0	85 22		sta $22				sta 	zTemp0
.2aa2	8d 4c 06	sta $064c			sta 	VARHashEntry
.2aa5	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2aa7	69 00		adc #$00			adc 	#0
.2aa9	85 23		sta $23				sta 	zTemp0+1
.2aab	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2aae	60		rts				rts
.2aaf					VARClearHashTables:
.2aaf	a2 00		ldx #$00			ldx 	#0
.2ab1					_VCHRLoop:
.2ab1	a9 00		lda #$00			lda 	#0
.2ab3	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2ab6	e8		inx				inx
.2ab7	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2ab9	d0 f6		bne $2ab1			bne 	_VCHRLoop
.2abb	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2abc					VARCheckSimple:
.2abc	aa		tax				tax 								; save in X
.2abd	b1 18		lda ($18),y			lda 	(codePtr),y
.2abf	c9 7c		cmp #$7c			cmp 	#$7C
.2ac1	d0 15		bne $2ad8			bne 	_VCSComplex
.2ac3	c8		iny				iny 								; consume the second byte, the type.
.2ac4	8a		txa				txa  								; character (40-7F) x 4
.2ac5	0a		asl a				asl 	a
.2ac6	0a		asl a				asl  	a
.2ac7	18		clc				clc
.2ac8	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2aca	85 08		sta $08				sta 	IFR0+IM0
.2acc	a9 06		lda #$06			lda 	#FastVariables >> 8
.2ace	69 00		adc #$00			adc 	#0
.2ad0	85 09		sta $09				sta 	IFR0+IM1
.2ad2	64 0a		stz $0a				stz 	IFR0+IM2
.2ad4	64 0b		stz $0b				stz 	IFR0+IExp
.2ad6	38		sec				sec 								; it's a reference
.2ad7	60		rts				rts
.2ad8					_VCSComplex:
.2ad8	88		dey				dey	 								; extract information.
.2ad9	20 66 2a	jsr $2a66			jsr 	VARGetInfo
.2adc	20 18 2a	jsr $2a18			jsr 	VARFind 					; search for variable
.2adf	b0 0a		bcs $2aeb			bcs 	_VCSHaveVariable
.2ae1	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2ae4	29 02		and #$02			and 	#2
.2ae6	d0 25		bne $2b0d			bne 	_VCNoCreate
.2ae8	20 c4 29	jsr $29c4			jsr 	VARCreate 					; create variable
.2aeb					_VCSHaveVariable:
.2aeb	48		pha				pha 								; save LSB on the stack
.2aec	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2aef	6a		ror a				ror 	a
.2af0	6a		ror a				ror 	a
.2af1	68		pla				pla 								; restore LSB
.2af2	90 08		bcc $2afc			bcc 	_VCSNotArray 				; skip if not an array
.2af4	20 5c 29	jsr $295c			jsr 	VARArrayLookup 				; look for subscripts.
.2af7	48		pha				pha 								; check )
.2af8	20 85 27	jsr $2785			jsr 	ERRCheckRParen
.2afb	68		pla				pla
.2afc					_VCSNotArray:
.2afc	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2afe	85 08		sta $08				sta 	IFR0+IM0
.2b00	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2b02	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2b05	6a		ror a				ror 	a
.2b06	a9 00		lda #$00			lda 	#0
.2b08	6a		ror a				ror 	a 							; now $00 or $80
.2b09	85 0b		sta $0b				sta 	IFR0+IExp
.2b0b	38		sec				sec 								; it's a reference
.2b0c	60		rts				rts
.2b0d					_VCNoCreate:
.2b0d	4c d2 26	jmp $26d2		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2b10					IFInitialise:
.2b10	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2b13	60		rts				rts
.2b14					IFloatSubtract:
.2b14	da		phx				phx
.2b15	a2 08		ldx #$08			ldx 	#IFR0
.2b17	20 2e 31	jsr $312e			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2b1a	fa		plx				plx
.2b1b					IFloatAdd:
.2b1b	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2b1d	05 0b		ora $0b				ora 	IFR0+IExp
.2b1f	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2b21	d0 4e		bne $2b71			bne 	_IFloatAddDecimals 			; floating point version.
.2b23					_IFAddSubMantissa:
.2b23	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2b25	45 0b		eor $0b				eor 	IFR0+IExp
.2b27	29 40		and #$40			and 	#IFSign
.2b29	d0 21		bne $2b4c			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2b2b	18		clc				clc 								; do the actual addition
.2b2c	a5 08		lda $08				lda 	IFR0+IM0
.2b2e	75 00		adc $00,x			adc 		IM0,x
.2b30	85 08		sta $08				sta 	IFR0+IM0
.2b32	a5 09		lda $09				lda 	IFR0+IM1
.2b34	75 01		adc $01,x			adc 		IM1,x
.2b36	85 09		sta $09				sta 	IFR0+IM1
.2b38	a5 0a		lda $0a				lda 	IFR0+IM2
.2b3a	75 02		adc $02,x			adc 		IM2,x
.2b3c	85 0a		sta $0a				sta 	IFR0+IM2
.2b3e	10 29		bpl $2b69			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2b40	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2b42	20 52 31	jsr $3152			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2b45	20 7c 31	jsr $317c			jsr 	IFloatIncExponent
.2b48	d0 1f		bne $2b69			bne 	_IFloatAddExit
.2b4a	38		sec				sec 								; overflowed numerically.
.2b4b	60		rts				rts
.2b4c					_IFloatSubMantissa:
.2b4c	38		sec				sec 								; do the subtraction R0-Rx
.2b4d	a5 08		lda $08				lda 	IFR0+IM0
.2b4f	f5 00		sbc $00,x			sbc 		IM0,x
.2b51	85 08		sta $08				sta 	IFR0+IM0
.2b53	a5 09		lda $09				lda 	IFR0+IM1
.2b55	f5 01		sbc $01,x			sbc 		IM1,x
.2b57	85 09		sta $09				sta 	IFR0+IM1
.2b59	a5 0a		lda $0a				lda 	IFR0+IM2
.2b5b	f5 02		sbc $02,x			sbc 		IM2,x
.2b5d	85 0a		sta $0a				sta 	IFR0+IM2
.2b5f	b0 08		bcs $2b69			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b61	a2 08		ldx #$08			ldx 	#IFR0
.2b63	20 36 31	jsr $3136			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b66	20 2e 31	jsr $312e			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b69					_IFloatAddExit:
.2b69	18		clc				clc
.2b6a	60		rts				rts
.2b6b					_IFloatZeroAdd:
.2b6b	fa		plx				plx 								; return this value in R0
.2b6c	20 b4 30	jsr $30b4			jsr 	IFloatCopyFromRegister
.2b6f	18		clc				clc
.2b70	60		rts				rts
.2b71					_IFloatAddDecimals:
.2b71	20 1c 31	jsr $311c			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b74	f0 f3		beq $2b69			beq 	_IFloatAddExit
.2b76	20 5a 31	jsr $315a			jsr 	IFloatNormalise 			; normalise RX
.2b79	da		phx				phx 								; normalise R0
.2b7a	a2 08		ldx #$08			ldx 	#IFR0
.2b7c	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.2b7f	f0 ea		beq $2b6b			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b81	20 5a 31	jsr $315a			jsr 	IFloatNormalise
.2b84	fa		plx				plx
.2b85	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b87	29 3f		and #$3f			and 	#IFXMask
.2b89	38		sec				sec
.2b8a	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b8c	85 20		sta $20				sta 	iTemp0
.2b8e	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b90	29 3f		and #$3f			and 	#IFXMask
.2b92	38		sec				sec
.2b93	e9 20		sbc #$20			sbc 	#$20
.2b95	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b97	b0 02		bcs $2b9b			bcs 	_IFloatHaveLarger
.2b99	a5 20		lda $20				lda 	iTemp0
.2b9b					_IFloatHaveLarger:
.2b9b	18		clc				clc 								; get the actual one back.
.2b9c	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2b9e	20 ab 2b	jsr $2bab			jsr 	_IFShiftXToA
.2ba1	da		phx				phx
.2ba2	a2 08		ldx #$08			ldx 	#IFR0
.2ba4	20 ab 2b	jsr $2bab			jsr 	_IFShiftXToA
.2ba7	fa		plx				plx
.2ba8	4c 23 2b	jmp $2b23			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2bab					_IFShiftXToA:
.2bab	8d d6 06	sta $06d6			sta 	IFTarget
.2bae	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; check adding zero ?
.2bb1	f0 11		beq $2bc4			beq 	_IFSXExit
.2bb3					_IFSXLoop:
.2bb3	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2bb5	29 3f		and #$3f			and 	#IFXMask
.2bb7	cd d6 06	cmp $06d6			cmp 	IFTarget
.2bba	f0 08		beq $2bc4			beq 	_IFSXExit
.2bbc	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.2bbf	20 7c 31	jsr $317c			jsr 	IFloatIncExponent
.2bc2	80 ef		bra $2bb3			bra 	_IFSXLoop
.2bc4					_IFSXExit:
.2bc4	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2bc5					IFloatMultiply:
.2bc5	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2bc8	20 7d 2c	jsr $2c7d			jsr 	IFCalculateNewSign
.2bcb	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2bcd	05 0b		ora $0b				ora 	IFR0+IExp
.2bcf	29 3f		and #$3f			and 	#IFXMask
.2bd1	15 01		ora $01,x			ora 	IM1,x
.2bd3	05 09		ora $09				ora 	IFR0+IM1
.2bd5	15 02		ora $02,x			ora 	IM2,x
.2bd7	05 0a		ora $0a				ora 	IFR0+IM2
.2bd9	d0 0a		bne $2be5			bne 	_IFMStandard
.2bdb	20 ff 30	jsr $30ff			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2bde	ad d8 06	lda $06d8			lda 	IFNewSign
.2be1	85 0b		sta $0b				sta 	IFR0+IExp
.2be3	18		clc				clc
.2be4	60		rts				rts
.2be5					_IFMStandard:
.2be5	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2be7	20 74 2c	jsr $2c74			jsr 	IFMSignExtend
.2bea	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bed	a5 0b		lda $0b				lda 	IFR0+IExp
.2bef	20 74 2c	jsr $2c74			jsr 	IFMSignExtend
.2bf2	18		clc				clc
.2bf3	6d d7 06	adc $06d7			adc 	IFNewExponent
.2bf6	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bf9	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2bfb	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister
.2bfe	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2c00	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2c03					_IFMLoop:
.2c03	a2 14		ldx #$14			ldx 	#IFRTemp
.2c05	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.2c08	f0 3a		beq $2c44			beq 	_IFMExit
.2c0a	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2c0d	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2c0f	10 03		bpl $2c14			bpl	 	_IFMTargetOkay
.2c11	20 65 2c	jsr $2c65			jsr 	_IFMShiftAll
.2c14					_IFMTargetOkay:
.2c14	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2c16	29 01		and #$01			and 	#1
.2c18	f0 16		beq $2c30			beq 	_IFMNoAdd
.2c1a	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2c1d	18		clc				clc
.2c1e	a5 08		lda $08				lda 	IFR0+IM0
.2c20	75 00		adc $00,x			adc 		IM0,x
.2c22	85 08		sta $08				sta 	IFR0+IM0
.2c24	a5 09		lda $09				lda 	IFR0+IM1
.2c26	75 01		adc $01,x			adc 		IM1,x
.2c28	85 09		sta $09				sta 	IFR0+IM1
.2c2a	a5 0a		lda $0a				lda 	IFR0+IM2
.2c2c	75 02		adc $02,x			adc 		IM2,x
.2c2e	85 0a		sta $0a				sta 	IFR0+IM2
.2c30					_IFMNoAdd:
.2c30	a5 0a		lda $0a				lda 	IFR0+IM2
.2c32	10 03		bpl $2c37			bpl 	_IFMResultOkay
.2c34	20 65 2c	jsr $2c65			jsr 	_IFMShiftAll
.2c37					_IFMResultOkay:
.2c37	a2 14		ldx #$14			ldx 	#IFRTemp
.2c39	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.2c3c	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c3f	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.2c42	80 bf		bra $2c03			bra 	_IFMLoop
.2c44					_IFMExit:
.2c44	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2c47	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2c49	90 0f		bcc $2c5a			bcc 	_IFMOkay
.2c4b	c9 e0		cmp #$e0			cmp 	#$E0
.2c4d	b0 0b		bcs $2c5a			bcs 	_IFMOkay
.2c4f	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2c51	f0 10		beq $2c63			beq 	_IFMError
.2c53	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2c55	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2c58	18		clc				clc
.2c59	60		rts				rts
.2c5a					_IFMOkay:
.2c5a	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c5c	0d d8 06	ora $06d8			ora 	IFNewSign
.2c5f	85 0b		sta $0b				sta 	IFR0+IExp
.2c61	18		clc				clc
.2c62	60		rts				rts
.2c63					_IFMError:
.2c63	38		sec				sec
.2c64	60		rts				rts
.2c65					_IFMShiftAll:
.2c65	a2 08		ldx #$08			ldx 	#IFR0
.2c67	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.2c6a	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c6d	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.2c70	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c73	60		rts				rts
.2c74					IFMSignExtend:
.2c74	29 3f		and #$3f			and 	#IFXMask
.2c76	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c78	90 02		bcc $2c7c			bcc 	_IFMNoSXX
.2c7a	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c7c					_IFMNoSXX:
.2c7c	60		rts				rts
.2c7d					IFCalculateNewSign:
.2c7d	b5 03		lda $03,x			lda 	IExp,x
.2c7f	45 0b		eor $0b				eor 	IFR0+IExp
.2c81	29 40		and #$40			and 	#IFSign
.2c83	8d d8 06	sta $06d8			sta 	IFNewSign
.2c86	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c87					IFloatDivideInteger:
.2c87	20 a0 2c	jsr $2ca0			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c8a	b0 06		bcs $2c92			bcs 	_IFDIExit
.2c8c	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c8e	20 b4 30	jsr $30b4			jsr 	IFloatCopyFromRegister
.2c91	18		clc				clc
.2c92					_IFDIExit:
.2c92	60		rts				rts
.2c93					IFloatModulusInteger:
.2c93	20 a0 2c	jsr $2ca0			jsr 	IFloatDivideIntegerCommon
.2c96	b0 07		bcs $2c9f			bcs 	_IFMIExit
.2c98	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c9b	20 b4 30	jsr $30b4			jsr 	IFloatCopyFromRegister
.2c9e	18		clc				clc
.2c9f					_IFMIExit:
.2c9f	60		rts				rts
.2ca0					IFloatDivideIntegerCommon:
.2ca0	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2ca3	20 7d 2c	jsr $2c7d			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ca6	20 ce 2c	jsr $2cce			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2ca9	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2cab	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.2cae	f0 1c		beq $2ccc			beq 	_IFDIDivZero
.2cb0	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2cb3	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2cb6	5a		phy				phy
.2cb7	a0 18		ldy #$18			ldy 	#24
.2cb9					_IFDILoop:
.2cb9	20 df 2c	jsr $2cdf			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cbc	20 eb 2c	jsr $2ceb			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cbf	88		dey				dey
.2cc0	d0 f7		bne $2cb9			bne 	_IFDILoop 					; do it 24 times
.2cc2	7a		ply				ply
.2cc3	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2cc6	29 40		and #$40			and 	#IFSign
.2cc8	85 17		sta $17				sta 	IFRTemp+IExp
.2cca	18		clc				clc 								; is okay.
.2ccb	60		rts				rts
.2ccc					_IFDIDivZero:
.2ccc	38		sec				sec
.2ccd	60		rts				rts
.2cce					IFDCopyRXToRTemp:
.2cce	b5 00		lda $00,x			lda 	IM0,x
.2cd0	85 14		sta $14				sta 	IFRTemp+IM0
.2cd2	b5 01		lda $01,x			lda 	IM1,x
.2cd4	85 15		sta $15				sta 	IFRTemp+IM1
.2cd6	b5 02		lda $02,x			lda 	IM2,x
.2cd8	85 16		sta $16				sta 	IFRTemp+IM2
.2cda	b5 03		lda $03,x			lda 	IExp,x
.2cdc	85 17		sta $17				sta 	IFRTemp+IExp
.2cde	60		rts				rts
.2cdf					IFDShiftSTempS1Left:
.2cdf	a2 14		ldx #$14			ldx 	#IFRTemp
.2ce1	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft
.2ce4	ae d6 06	ldx $06d6			ldx 	IFTarget
.2ce7	20 4b 31	jsr $314b			jsr 	IFloatRotateLeft
.2cea	60		rts				rts
.2ceb					IFDTrySubtract:
.2ceb	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2cee	38		sec				sec 								; subtract, saving the results on the stack.
.2cef	b5 00		lda $00,x			lda 	IM0,x
.2cf1	e5 08		sbc $08				sbc 	IFR0+IM0
.2cf3	48		pha				pha
.2cf4	b5 01		lda $01,x			lda 	IM1,x
.2cf6	e5 09		sbc $09				sbc 	IFR0+IM1
.2cf8	48		pha				pha
.2cf9	b5 02		lda $02,x			lda 	IM2,x
.2cfb	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2cfd	b0 03		bcs $2d02			bcs 	_IFDCanSubtract
.2cff	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2d00	68		pla				pla
.2d01	60		rts				rts
.2d02					_IFDCanSubtract:
.2d02	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2d04	68		pla				pla
.2d05	95 01		sta $01,x			sta 	IM1,x
.2d07	68		pla				pla
.2d08	95 00		sta $00,x			sta 	IM0,x
.2d0a	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2d0c	d0 06		bne $2d14			bne 	_IFDCSExit
.2d0e	e6 15		inc $15				inc 	IFRTemp+IM1
.2d10	d0 02		bne $2d14			bne 	_IFDCSExit
.2d12	e6 16		inc $16				inc 	IFRTemp+IM2
.2d14					_IFDCSExit:
.2d14	60		rts				rts
.2d15					IFloatBitwiseAnd:
.2d15	5a		phy				phy
.2d16	20 5a 2d	jsr $2d5a			jsr 	IFPreProcessBitwise 		; set up everything.
.2d19	d0 0f		bne $2d2a			bne 	_IFBAExit
.2d1b					_IFBALoop:
.2d1b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d1e	35 00		and $00,x			and 	IM0,x
.2d20	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d23	e8		inx				inx
.2d24	c8		iny				iny
.2d25	c0 03		cpy #$03			cpy 	#3
.2d27	d0 f2		bne $2d1b			bne 	_IFBALoop
.2d29	18		clc				clc
.2d2a					_IFBAExit:
.2d2a	7a		ply				ply
.2d2b	60		rts				rts
.2d2c					IFloatBitwiseOr:
.2d2c	5a		phy				phy
.2d2d	20 5a 2d	jsr $2d5a			jsr 	IFPreProcessBitwise 		; set up everything.
.2d30	d0 0f		bne $2d41			bne 	_IFBAExit
.2d32					_IFBALoop:
.2d32	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d35	15 00		ora $00,x			ora 	IM0,x
.2d37	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d3a	e8		inx				inx
.2d3b	c8		iny				iny
.2d3c	c0 03		cpy #$03			cpy 	#3
.2d3e	d0 f2		bne $2d32			bne 	_IFBALoop
.2d40	18		clc				clc
.2d41					_IFBAExit:
.2d41	7a		ply				ply
.2d42	60		rts				rts
.2d43					IFloatBitwiseXor:
.2d43	5a		phy				phy
.2d44	20 5a 2d	jsr $2d5a			jsr 	IFPreProcessBitwise 		; set up everything.
.2d47	d0 0f		bne $2d58			bne 	_IFBAExit
.2d49					_IFBALoop:
.2d49	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d4c	55 00		eor $00,x			eor 	IM0,x
.2d4e	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d51	e8		inx				inx
.2d52	c8		iny				iny
.2d53	c0 03		cpy #$03			cpy 	#3
.2d55	d0 f2		bne $2d49			bne 	_IFBALoop
.2d57	18		clc				clc
.2d58					_IFBAExit:
.2d58	7a		ply				ply
.2d59	60		rts				rts
.2d5a					IFPreProcessBitwise:
.2d5a	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d5c	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d5e	15 03		ora $03,x			ora 	IExp,x
.2d60	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d62	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d64	38		sec				sec 								; carry set just in cases.
.2d65	60		rts				rts
.2d66					IFloatAbsoluteR0:
.2d66	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d68	29 bf		and #$bf			and 	#IFSign ^ 255
.2d6a	85 0b		sta $0b				sta 	IFR0+IExp
.2d6c	18		clc				clc
.2d6d	60		rts				rts
.2d6e					IFloatSquareRootR0:
.2d6e	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d70	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.2d73	f0 2e		beq $2da3			beq 	_IFSRZero
.2d75	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d77	29 40		and #$40			and 	#IFSign
.2d79	d0 2f		bne $2daa			bne 	_IFSRFail
.2d7b	20 5a 31	jsr $315a			jsr 	IFloatNormalise 			; it will work better !
.2d7e	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d80	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister
.2d83	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d85	20 74 2c	jsr $2c74			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d88	18		clc				clc
.2d89	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d8b	85 0b		sta $0b				sta 	IFR0+IExp
.2d8d	4a		lsr a				lsr 	a 							; which we can halve.
.2d8e	38		sec				sec 								; convert back
.2d8f	e9 17		sbc #$17			sbc 	#23
.2d91	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d93	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d95	20 ac 2d	jsr $2dac			jsr 	_IFSRNewton
.2d98	20 ac 2d	jsr $2dac			jsr 	_IFSRNewton
.2d9b	20 ac 2d	jsr $2dac			jsr 	_IFSRNewton
.2d9e	20 ac 2d	jsr $2dac			jsr 	_IFSRNewton
.2da1	18		clc				clc
.2da2	60		rts				rts
.2da3					_IFSRZero:
.2da3	a2 08		ldx #$08			ldx 	#IFR0
.2da5	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2da8	18		clc				clc
.2da9	60		rts				rts
.2daa					_IFSRFail:
.2daa	38		sec				sec
.2dab	60		rts				rts
.2dac					_IFSRNewton:
.2dac	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2dae	20 72 30	jsr $3072			jsr 	IFloatPushRx
.2db1	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2db3	20 72 30	jsr $3072			jsr 	IFloatPushRx
.2db6	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2db8	20 47 2e	jsr $2e47			jsr 	IFloatDivideFloat
.2dbb	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2dbd	20 93 30	jsr $3093			jsr 	IFloatPullRx
.2dc0	20 1b 2b	jsr $2b1b			jsr 	IFloatAdd 					; now guess + original/guess
.2dc3	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2dc5	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.2dc8	a2 0c		ldx #$0c			ldx 	#IFR1
.2dca	20 93 30	jsr $3093			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2dcd	60		rts				rts
.2dce					IFloatFractionalR0:
.2dce	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2dd0	29 3f		and #$3f			and 	#IFXMask
.2dd2	f0 17		beq $2deb			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2dd4	20 66 2d	jsr $2d66			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2dd7	a2 08		ldx #$08			ldx 	#IFR0
.2dd9	20 5a 31	jsr $315a			jsr 	IFloatNormalise 			; normalise R0
.2ddc	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2dde	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister
.2de1	20 24 2e	jsr $2e24			jsr 	IFloatIntegerR0 			; take integer part of R0
.2de4	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2de6	20 14 2b	jsr $2b14			jsr 	IFloatSubtract
.2de9	80 05		bra $2df0			bra 	_FIPExit
.2deb					_FIPZero:
.2deb	a2 08		ldx #$08			ldx 	#IFR0
.2ded	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2df0					_FIPExit:
.2df0	18		clc				clc
.2df1	60		rts				rts
.2df2					IFloatCompare:
.2df2	20 14 2b	jsr $2b14			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2df5	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2df7	05 0b		ora $0b				ora 	IFR0+IExp
.2df9	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2dfb	29 3f		and #$3f			and 	#IFXMask
.2dfd	d0 19		bne $2e18			bne 	_IFCNonInteger
.2dff	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; check if zero
.2e02	f0 0f		beq $2e13			beq 	_IFCZero
.2e04					_IFCReturnSign:
.2e04	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2e06	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2e08	48		pha				pha
.2e09	a9 01		lda #$01			lda 	#1
.2e0b	20 25 31	jsr $3125			jsr 	IFloatSetByte 				; return to +1
.2e0e	68		pla				pla 								; sign bit back
.2e0f	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2e11	18		clc				clc
.2e12	60		rts				rts
.2e13					_IFCZero:
.2e13	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2e16	18		clc				clc
.2e17	60		rts				rts
.2e18					_IFCNonInteger:
.2e18	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2e1a	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2e1c	05 09		ora $09				ora 	IFR0+IM1
.2e1e	05 0a		ora $0a				ora 	IFR0+IM2
.2e20	f0 f1		beq $2e13			beq 	_IFCZero 					; near enough !
.2e22	80 e0		bra $2e04			bra 	_IFCReturnSign 				; return the sign of the difference.
.2e24					IFloatIntegerR0:
.2e24	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2e26	29 3f		and #$3f			and 	#IFXMask
.2e28	f0 1b		beq $2e45			beq 	_FIPExit 					; if so do nothing
.2e2a	a2 08		ldx #$08			ldx 	#IFR0
.2e2c	20 5a 31	jsr $315a			jsr 	IFloatNormalise 			; normalise
.2e2f	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; is it zero ?
.2e32	f0 0e		beq $2e42			beq 	_FIPZero 					; if so return zero.
.2e34					_FIPShift:
.2e34	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2e36	29 20		and #$20			and 	#$20 						; still -ve
.2e38	f0 0b		beq $2e45			beq 	_FIPExit
.2e3a	20 52 31	jsr $3152			jsr 	IFloatShiftRight 			; shift mantissa right
.2e3d	20 7c 31	jsr $317c			jsr 	IFloatIncExponent 			; bump exponent
.2e40	80 f2		bra $2e34			bra 	_FIPShift
.2e42					_FIPZero:
.2e42	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2e45					_FIPExit:
.2e45	18		clc				clc
.2e46	60		rts				rts
.2e47					IFloatDivideFloat:
.2e47	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2e4a	20 7d 2c	jsr $2c7d			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e4d	20 5a 31	jsr $315a			jsr 	IFloatNormalise 			; normalise RX
.2e50	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2e52	20 5a 31	jsr $315a			jsr 	IFloatNormalise
.2e55	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.2e58	f0 56		beq $2eb0			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e5a	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e5c	20 74 2c	jsr $2c74			jsr 	IFMSignExtend
.2e5f	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e62	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e65	b5 03		lda $03,x			lda 	IExp,x
.2e67	20 74 2c	jsr $2c74			jsr 	IFMSignExtend
.2e6a	38		sec				sec
.2e6b	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e6e	38		sec				sec
.2e6f	e9 17		sbc #$17			sbc 	#23
.2e71	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e74	20 b2 2e	jsr $2eb2			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e77	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e79	10 08		bpl $2e83			bpl 	_IFDFNoShiftResult
.2e7b	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e7d	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.2e80	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e83					_IFDFNoShiftResult:
.2e83	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e86	30 06		bmi $2e8e			bmi 	_IFDFCheckUnderflow
.2e88	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e8a	b0 24		bcs $2eb0			bcs 	_IFDFDivZero
.2e8c	80 11		bra $2e9f			bra		_IFDFExit
.2e8e					_IFDFCheckUnderflow:
.2e8e	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e91	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e93	b0 0a		bcs $2e9f			bcs 	_IFDFExit
.2e95	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e98	a2 14		ldx #$14			ldx 	#IFRTemp
.2e9a	20 52 31	jsr $3152			jsr 	IFloatShiftRight
.2e9d	80 ef		bra $2e8e			bra 	_IFDFCheckUnderflow
.2e9f					_IFDFExit:
.2e9f	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2ea2	29 3f		and #$3f			and 	#IFXMask
.2ea4	0d d8 06	ora $06d8			ora 	IFNewSign
.2ea7	85 17		sta $17				sta 	IFRTemp+IExp
.2ea9	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2eab	20 b4 30	jsr $30b4			jsr 	IFloatCopyFromRegister
.2eae	18		clc				clc
.2eaf	60		rts				rts
.2eb0					_IFDFDivZero:
.2eb0	38		sec				sec
.2eb1	60		rts				rts
.2eb2					IFloatDivideSupport:
.2eb2	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2eb4	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2eb7	5a		phy				phy 								; main division loop x 23
.2eb8	a0 17		ldy #$17			ldy 	#23
.2eba					_IFDSLoop:
.2eba	20 eb 2c	jsr $2ceb			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ebd	20 df 2c	jsr $2cdf			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2ec0	88		dey				dey
.2ec1	d0 f7		bne $2eba			bne 	_IFDSLoop 					; do it 24 times
.2ec3	7a		ply				ply
.2ec4	60		rts				rts
.2ec5					IFloatIntegerToStringR0:
.2ec5	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2ec8	20 a4 31	jsr $31a4			jsr 	IFloatBufferReset			; empty buffer
.2ecb	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2ecd	29 3f		and #$3f			and 	#IFXMask
.2ecf	d0 1d		bne $2eee			bne 	_IFIFail
.2ed1	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2ed3	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.2ed6	f0 0e		beq $2ee6			beq 	_IFINotNegative
.2ed8	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2eda	29 40		and #$40			and 	#IFSign
.2edc	f0 08		beq $2ee6			beq 	_IFINotNegative
.2ede	a9 2d		lda #$2d			lda 	#"-"						; output -
.2ee0	20 b3 31	jsr $31b3			jsr 	IFloatBufferWrite
.2ee3	20 2e 31	jsr $312e			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2ee6					_IFINotNegative:
.2ee6	20 f0 2e	jsr $2ef0			jsr 	_IFIRecursiveConvert 		; start converting
.2ee9	20 ab 31	jsr $31ab			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2eec	18		clc				clc
.2eed	60		rts				rts
.2eee					_IFIFail:
.2eee	38		sec				sec
.2eef	60		rts				rts
.2ef0					_IFIRecursiveConvert:
.2ef0	a2 0c		ldx #$0c			ldx 	#IFR1
.2ef2	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister 		; R0->R1
.2ef5	a2 08		ldx #$08			ldx 	#IFR0
.2ef7	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2efa	20 25 31	jsr $3125			jsr 	IFloatSetByte
.2efd	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2eff	20 87 2c	jsr $2c87			jsr 	IFloatDivideInteger
.2f02	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2f04	20 1c 31	jsr $311c			jsr 	IFloatCheckZero
.2f07	f0 09		beq $2f12			beq 	_IFIOutDigit
.2f09	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2f0b	48		pha				pha
.2f0c	20 f0 2e	jsr $2ef0			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2f0f	68		pla				pla
.2f10	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2f12					_IFIOutDigit:
.2f12	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2f14	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2f16	90 02		bcc $2f1a			bcc 	_IFINotHex
.2f18	69 06		adc #$06			adc 	#6
.2f1a					_IFINotHex:
.2f1a	69 30		adc #$30			adc 	#48
.2f1c	20 b3 31	jsr $31b3			jsr 	IFloatBufferWrite 			; write character to buffer.
.2f1f	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2f20					IFloatFloatToStringR0:
.2f20	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2f22	20 72 30	jsr $3072			jsr 	IFloatPushRx
.2f25	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister
.2f28	20 24 2e	jsr $2e24			jsr 	IFloatIntegerR0				; make R0 integer
.2f2b	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2f2d	20 c5 2e	jsr $2ec5			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2f30	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2f33	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2f35	29 3f		and #$3f			and 	#IFXMask
.2f37	f0 44		beq $2f7d			beq 	_IFFSExit
.2f39					_IFloatFracLoop:
.2f39	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2f3b	20 b4 30	jsr $30b4			jsr 	IFloatCopyFromRegister
.2f3e	20 ce 2d	jsr $2dce			jsr 	IFloatFractionalR0
.2f41	20 5a 31	jsr $315a			jsr 	IFloatNormalise
.2f44	a2 10		ldx #$10			ldx 	#IFR2
.2f46	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister 		; copy to back R2
.2f49	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2f4b	a9 0a		lda #$0a			lda 	#10
.2f4d	20 25 31	jsr $3125			jsr 	IFloatSetByte
.2f50	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2f52	20 c5 2b	jsr $2bc5			jsr 	IFloatMultiply
.2f55	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2f57	20 c5 30	jsr $30c5			jsr 	IFloatCopyToRegister
.2f5a	20 24 2e	jsr $2e24			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f5d	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f60	c9 03		cmp #$03			cmp 	#3
.2f62	f0 16		beq $2f7a			beq 	_IFFSExitStripZero
.2f64	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f67	d0 05		bne $2f6e			bne 	_IFloatNotFirst
.2f69	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f6b	20 b3 31	jsr $31b3			jsr 	IFloatBufferWrite
.2f6e					_IFloatNotFirst:
.2f6e	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f71	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f73	09 30		ora #$30			ora 	#"0"						; ASCII
.2f75	20 b3 31	jsr $31b3			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f78	80 bf		bra $2f39			bra 	_IFloatFracLoop
.2f7a					_IFFSExitStripZero:
.2f7a	20 c2 31	jsr $31c2			jsr 	IFloatStripTrailingZeros
.2f7d					_IFFSExit:
.2f7d	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f7f	20 93 30	jsr $3093			jsr 	IFloatPullRx
.2f82	20 ab 31	jsr $31ab			jsr 	IFloatGetBufferAddress
.2f85	18		clc				clc
.2f86	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f87					IFloatStringToFloatR0:
.2f87	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f8a	86 20		stx $20				stx 	iTemp0
.2f8c	84 21		sty $21				sty 	iTemp0+1
.2f8e	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f90	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2f93	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f96	20 23 30	jsr $3023			jsr 	IFSTFGetNext 				; get first
.2f99	f0 1b		beq $2fb6			beq 	_IFSTFFail 					; no character, fail.
.2f9b	90 10		bcc $2fad			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2f9d	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2f9f	d0 15		bne $2fb6			bne 	_IFSTFFail
.2fa1	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2fa3	8d dc 06	sta $06dc			sta 	IFSignFlag
.2fa6					_IFSTFLoop:
.2fa6	20 23 30	jsr $3023			jsr 	IFSTFGetNext 				; get next character
.2fa9	b0 0b		bcs $2fb6			bcs 	_IFSTFFail 					; bad character.
.2fab	f0 11		beq $2fbe			beq 	_IFSTFExit 					; end of data
.2fad					_IFSTFHaveChar:
.2fad	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2faf	f0 08		beq $2fb9			beq 	_IFSTFDecimal
.2fb1	20 47 30	jsr $3047			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2fb4	80 f0		bra $2fa6			bra 	_IFSTFLoop 					; keep going until . or end.
.2fb6					_IFSTFFail:
.2fb6	38		sec				sec
.2fb7	80 0d		bra $2fc6			bra 	_IFSTFReturn
.2fb9					_IFSTFDecimal:
.2fb9	20 ce 2f	jsr $2fce			jsr 	IFSTFDecimal 				; call the decimal places code.
.2fbc	b0 08		bcs $2fc6			bcs 	_IFSTFReturn 				; error
.2fbe					_IFSTFExit:
.2fbe	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2fc0	0d dc 06	ora $06dc			ora 	IFSignFlag
.2fc3	85 0b		sta $0b				sta 	IFR0+IExp
.2fc5	18		clc				clc
.2fc6					_IFSTFReturn:
.2fc6	60		rts				rts
.2fc7					IFloatAddDecimalToR0:
.2fc7	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2fca	86 20		stx $20				stx 	iTemp0
.2fcc	84 21		sty $21				sty 	iTemp0+1
.2fce					IFSTFDecimal:
.2fce	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2fd0	20 72 30	jsr $3072			jsr 	IFloatPushRx
.2fd3	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2fd5	20 23 31	jsr $3123			jsr 	IFloatSetZero
.2fd8	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2fdb					_IFSTDLoop:
.2fdb	20 23 30	jsr $3023			jsr 	IFSTFGetNext 				; get next
.2fde	b0 41		bcs $3021			bcs 	_IFSTFFail2 				; bad character.
.2fe0	f0 11		beq $2ff3			beq 	_IFSTFComplete 				; end of data, work out the result.
.2fe2	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2fe4	f0 39		beq $301f			beq 	_IFSTFExit2
.2fe6	20 47 30	jsr $3047			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2fe9	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2fec	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2fef	c9 03		cmp #$03			cmp 	#3
.2ff1	90 e8		bcc $2fdb			bcc 	_IFSTDLoop
.2ff3					_IFSTFComplete:
.2ff3	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2ff6	f0 27		beq $301f			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2ff8	3a		dec a				dec 	a 							; table indexed from 1.
.2ff9	0a		asl a				asl 	a
.2ffa	0a		asl a				asl 	a
.2ffb	aa		tax				tax
.2ffc	bd 5e 30	lda $305e,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2fff	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3001	bd 5f 30	lda $305f,x			lda 	TableTen+1,x
.3004	85 0d		sta $0d				sta  	IFR1+IM1
.3006	bd 60 30	lda $3060,x			lda 	TableTen+2,x
.3009	85 0e		sta $0e				sta  	IFR1+IM2
.300b	bd 61 30	lda $3061,x			lda 	TableTen+3,x
.300e	85 0f		sta $0f				sta  	IFR1+IExp
.3010	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3012	20 c5 2b	jsr $2bc5			jsr 	IFloatMultiply
.3015	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3017	20 93 30	jsr $3093			jsr 	IFloatPullRx
.301a	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.301c	20 1b 2b	jsr $2b1b			jsr 	IFloatAdd
.301f					_IFSTFExit2:
.301f	18		clc				clc
.3020	60		rts				rts
.3021					_IFSTFFail2:
.3021	38		sec				sec
.3022	60		rts				rts
.3023					IFSTFGetNext:
.3023	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.3026	f0 19		beq $3041			beq 	_IFSTFReturnOk
.3028	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.302a	e6 20		inc $20				inc 	iTemp0 						; point at next.
.302c	d0 02		bne $3030			bne 	_IFSTFGNNoCarry
.302e	e6 21		inc $21				inc 	iTemp0+1
.3030					_IFSTFGNNoCarry:
.3030	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.3033	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3035	f0 08		beq $303f			beq 	_IFSTFGOkay
.3037	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3039	90 08		bcc $3043			bcc 	_IFSTFGFail
.303b	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.303d	b0 04		bcs $3043			bcs 	_IFSTFGFail
.303f					_IFSTFGOkay:
.303f	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3041					_IFSTFReturnOk:
.3041	18		clc				clc
.3042	60		rts				rts
.3043					_IFSTFGFail:
.3043	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3045	38		sec				sec
.3046	60		rts				rts
.3047					IFSTFAddR0:
.3047	29 0f		and #$0f			and 	#15 						; to int value
.3049	48		pha				pha 								; save it.
.304a	a9 0a		lda #$0a			lda 	#10
.304c	a2 0c		ldx #$0c			ldx 	#IFR1
.304e	20 25 31	jsr $3125			jsr 	IFloatSetByte
.3051	20 c5 2b	jsr $2bc5			jsr 	IFloatMultiply
.3054	68		pla				pla
.3055	a2 0c		ldx #$0c			ldx 	#IFR1
.3057	20 25 31	jsr $3125			jsr 	IFloatSetByte
.305a	20 1b 2b	jsr $2b1b			jsr 	IFloatAdd
.305d	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.305e					TableTen:
>305e	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3062	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3066	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>306a	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>306e	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3072					IFloatPushRx:
.3072	5a		phy				phy
.3073	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3076	b5 00		lda $00,x			lda 	IM0,x
.3078	99 df 06	sta $06df,y			sta 	IFStack,y
.307b	b5 01		lda $01,x			lda 	IM1,x
.307d	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3080	b5 02		lda $02,x			lda 	IM2,x
.3082	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.3085	b5 03		lda $03,x			lda 	IExp,x
.3087	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.308a	c8		iny				iny
.308b	c8		iny				iny
.308c	c8		iny				iny
.308d	c8		iny				iny
.308e	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3091	7a		ply				ply
.3092	60		rts				rts
.3093					IFloatPullRx:
.3093	5a		phy				phy
.3094	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.3097	88		dey				dey
.3098	88		dey				dey
.3099	88		dey				dey
.309a	88		dey				dey
.309b	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.309e	95 00		sta $00,x			sta 	IM0,x
.30a0	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.30a3	95 01		sta $01,x			sta 	IM1,x
.30a5	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.30a8	95 02		sta $02,x			sta 	IM2,x
.30aa	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.30ad	95 03		sta $03,x			sta 	IExp,x
.30af	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.30b2	7a		ply				ply
.30b3	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.30b4					IFloatCopyFromRegister:
.30b4	b5 00		lda $00,x			lda 	0,x
.30b6	85 08		sta $08				sta 	IFR0
.30b8	b5 01		lda $01,x			lda 	1,x
.30ba	85 09		sta $09				sta 	IFR0+1
.30bc	b5 02		lda $02,x			lda 	2,x
.30be	85 0a		sta $0a				sta 	IFR0+2
.30c0	b5 03		lda $03,x			lda 	3,x
.30c2	85 0b		sta $0b				sta 	IFR0+3
.30c4	60		rts				rts
.30c5					IFloatCopyToRegister:
.30c5	a5 08		lda $08				lda 	IFR0
.30c7	95 00		sta $00,x			sta 	0,x
.30c9	a5 09		lda $09				lda 	IFR0+1
.30cb	95 01		sta $01,x			sta 	1,x
.30cd	a5 0a		lda $0a				lda 	IFR0+2
.30cf	95 02		sta $02,x			sta 	2,x
.30d1	a5 0b		lda $0b				lda 	IFR0+3
.30d3	95 03		sta $03,x			sta 	3,x
.30d5	60		rts				rts
.30d6					IFloatLoadInline:
.30d6	68		pla				pla 								; pop address off to iTemp0
.30d7	85 20		sta $20				sta 	iTemp0
.30d9	68		pla				pla
.30da	85 21		sta $21				sta 	iTemp0+1
.30dc	a0 01		ldy #$01			ldy 	#1
.30de	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.30e0	95 00		sta $00,x			sta 	0,x
.30e2	c8		iny				iny
.30e3	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.30e5	95 01		sta $01,x			sta 	1,x
.30e7	c8		iny				iny
.30e8	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.30ea	95 02		sta $02,x			sta 	2,x
.30ec	c8		iny				iny
.30ed	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.30ef	95 03		sta $03,x			sta 	3,x
.30f1	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.30f2	a5 20		lda $20				lda 	iTemp0
.30f4	69 05		adc #$05			adc 	#5
.30f6	85 20		sta $20				sta 	iTemp0
.30f8	90 02		bcc $30fc			bcc 	_IFLINoCarry
.30fa	e6 21		inc $21				inc 	iTemp0+1
.30fc					_IFLINoCarry:
.30fc	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.30ff					IFloatMultiply8BitRx:
.30ff	5a		phy		        phy
.3100	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3102	a4 08		ldy $08		        ldy     IFR0+IM0
.3104	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3105	85 08		sta $08		        sta     IFR0+IM0
.3107	84 09		sty $09		        sty     IFR0+IM1
.3109	a9 00		lda #$00	        lda     #0
.310b	a0 08		ldy #$08	        ldy     #8
.310d					_IFMLoop:
.310d	90 03		bcc $3112	        bcc     _IFMNoAdd
.310f	18		clc		        clc
.3110	65 09		adc $09		        adc     IFR0+IM1
.3112					_IFMNoAdd:
.3112	6a		ror a		        ror     a
.3113	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3115	88		dey		        dey
.3116	d0 f5		bne $310d	        bne     _IFMLoop
.3118	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.311a	7a		ply		        ply
.311b	60		rts		        rts
.311c					IFloatCheckZero:
.311c	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.311e	15 01		ora $01,x			ora 	IM1,x
.3120	15 02		ora $02,x			ora 	IM2,x
.3122	60		rts				rts
.3123					IFloatSetZero:
.3123	a9 00		lda #$00			lda 	#0
.3125					IFloatSetByte:
.3125	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3127	74 01		stz $01,x			stz 	IM1,x
.3129	74 02		stz $02,x			stz 	IM2,x
.312b	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.312d	60		rts				rts
.312e					IFloatNegate:
.312e	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3130	49 40		eor #$40			eor 	#IFSign
.3132	95 03		sta $03,x			sta 	IExp,x
.3134	18		clc				clc
.3135	60		rts				rts
.3136					IFloatMantissaNegate:
.3136	38		sec				sec 								; when you want a real 2's complement negative value.
.3137	a9 00		lda #$00			lda 	#0
.3139	f5 00		sbc $00,x			sbc 	IM0,x
.313b	95 00		sta $00,x			sta 	IM0,x
.313d	a9 00		lda #$00			lda 	#0
.313f	f5 01		sbc $01,x			sbc 	IM1,x
.3141	95 01		sta $01,x			sta 	IM1,x
.3143	a9 00		lda #$00			lda 	#0
.3145	f5 02		sbc $02,x			sbc 	IM2,x
.3147	95 02		sta $02,x			sta 	IM2,x
.3149	60		rts				rts
.314a					IFloatShiftLeft:
.314a	18		clc				clc
.314b					IFloatRotateLeft:
.314b	36 00		rol $00,x			rol 	IM0,x
.314d	36 01		rol $01,x			rol 	IM1,x
.314f	36 02		rol $02,x			rol 	IM2,x
.3151	60		rts				rts
.3152					IFloatShiftRight:
.3152	18		clc				clc
.3153					IFloatRotateRight:
.3153	76 02		ror $02,x			ror 	IM2,x
.3155	76 01		ror $01,x			ror 	IM1,x
.3157	76 00		ror $00,x			ror 	IM0,x
.3159	60		rts				rts
.315a					IFloatNormalise:
.315a	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; is it zero
.315d	f0 18		beq $3177			beq 	_IFNExitZero 				; if so exit
.315f					_IFNLoop:
.315f	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3161	29 c0		and #$c0			and 	#$C0
.3163	c9 40		cmp #$40			cmp 	#$40
.3165	f0 13		beq $317a			beq 	_IFNExitOkay 				; if so , then we are done.
.3167	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3169	29 3f		and #$3f			and 	#$3F
.316b	c9 20		cmp #$20			cmp 	#$20
.316d	f0 0b		beq $317a			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.316f	20 90 31	jsr $3190			jsr 	IFloatDecExponent
.3172	20 4a 31	jsr $314a			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3175	80 e8		bra $315f			bra 	_IFNLoop
.3177					_IFNExitZero:
.3177	20 23 31	jsr $3123			jsr 	IFloatSetZero 				; set the result to zero
.317a					_IFNExitOkay:
.317a	18		clc				clc  								; return with CC.
.317b	60		rts				rts
.317c					IFloatIncExponent:
.317c	b5 03		lda $03,x			lda 	IExp,x
.317e	48		pha				pha
.317f	29 c0		and #$c0			and 	#$C0
.3181	8d 1f 07	sta $071f			sta 	IFXTemp
.3184	68		pla				pla
.3185	1a		inc a				inc 	a
.3186	29 3f		and #$3f			and 	#$3F
.3188	48		pha				pha
.3189	0d 1f 07	ora $071f			ora 	IFXTemp
.318c	95 03		sta $03,x			sta 	IExp,x
.318e	68		pla				pla
.318f	60		rts				rts
.3190					IFloatDecExponent:
.3190	b5 03		lda $03,x			lda 	IExp,x
.3192	48		pha				pha
.3193	29 c0		and #$c0			and 	#$C0
.3195	8d 1f 07	sta $071f			sta 	IFXTemp
.3198	68		pla				pla
.3199	3a		dec a				dec 	a
.319a	29 3f		and #$3f			and 	#$3F
.319c	48		pha				pha
.319d	0d 1f 07	ora $071f			ora 	IFXTemp
.31a0	95 03		sta $03,x			sta 	IExp,x
.31a2	68		pla				pla
.31a3	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.31a4					IFloatBufferReset:
.31a4	9c 20 07	stz $0720			stz 	IFBufferCount
.31a7	9c 21 07	stz $0721			stz 	IFBuffer
.31aa	60		rts				rts
.31ab					IFloatGetBufferAddress:
.31ab	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.31ad	a2 20		ldx #$20			ldx 	#(IFBufferCount & $FF)
.31af	ad 20 07	lda $0720			lda 	IFBufferCount
.31b2	60		rts				rts
.31b3					IFloatBufferWrite:
.31b3	da		phx				phx
.31b4	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31b7	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.31ba	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.31bd	ee 20 07	inc $0720			inc 	IFBufferCount
.31c0	fa		plx				plx
.31c1	60		rts				rts
.31c2					IFloatStripTrailingZeros:
.31c2	ae 20 07	ldx $0720			ldx 	IFBufferCount
.31c5	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.31c8	c9 30		cmp #$30			cmp		#"0"
.31ca	d0 0f		bne $31db			bne 	_IFSTExit
.31cc	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.31cf	c9 2e		cmp #$2e			cmp 	#"."
.31d1	f0 08		beq $31db			beq 	_IFSTExit
.31d3	ce 20 07	dec $0720			dec 	IFBufferCount
.31d6	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.31d9	80 e7		bra $31c2			bra 	IFloatStripTrailingZeros
.31db					_IFSTExit:
.31db	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.31dc					IFloatCheckRange:
.31dc	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.31de	09 40		ora #$40			ora 	#IFSign
.31e0	85 0b		sta $0b				sta 	IFR0+IExp
.31e2	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.31e4	20 1b 2b	jsr $2b1b			jsr 	IFloatAdd 					; add allowed to error.
.31e7	a2 08		ldx #$08			ldx 	#IFR0
.31e9	20 1c 31	jsr $311c			jsr 	IFloatCheckZero 			; error if < 0
.31ec	f0 06		beq $31f4			beq 	_IFAOkay
.31ee	a5 0b		lda $0b				lda 	IFR0+IExp
.31f0	29 40		and #$40			and 	#IFSign
.31f2	d0 01		bne $31f5			bne 	_IFAFail
.31f4					_IFAOkay:
.31f4	60		rts				rts
.31f5					_IFAFail:
.31f5	38		sec				sec
.31f6	68		pla				pla 								; get address - 2
.31f7	e9 02		sbc #$02			sbc 	#2
.31f9	aa		tax				tax
.31fa	68		pla				pla
.31fb	e9 00		sbc #$00			sbc 	#0
.31fd	a8		tay				tay
.31fe	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3200					_IFAStop:
>3200	db						.byte 	$DB 						; display an error AA ADR ADR
.3201	80 fd		bra $3200			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
