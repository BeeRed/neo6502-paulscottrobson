# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		tsc.py
#		Purpose :	Test script compiler (for floats)
#		Date :		25th May 2023
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import os,sys,math,re
from ifloat import *

# *******************************************************************************************
#
#								Testscript Compiler class
#
# *******************************************************************************************

class TSCompiler(object):
	def __init__(self,default = 0):
		self.opcodes = { "LCI":"IFloatLoadInline",
						 "GET":"IFloatCopyFromRegister",
						 "PUT":"IFloatCopyToRegister",
						 "ADD":"IFloatAdd",
						 "SUB":"IFloatSubtract",
						 "MUL":"IFloatMultiply",
						 "IDV":"IFloatDivideInteger",
						 "DIV":"IFloatDivideFloat",
						 "AND":"IFloatBitwiseAnd",
						 "ORR":"IFloatBitwiseOr",
						 "XOR":"IFloatBitwiseXor",
						 "CMP":"IFloatCompare",
						 "NEG":"IFloatNegate",
						 "CHK":"IFloatCheck",
						 "NRM":"IFloatNormalise",
						 "INT":"IFloatIntegerR0",
						 "FRC":"IFloatFractionalR0",
						 "SQR":"IFloatSquareRootR0",
						 "ABS":"IFloatAbsoluteR0",
						 "I2S":"IFloatIntegerToStringR0",
						 "F2S":"IFloatFloatToStringR0"
						 }
	#						 
	def compile(self,s):
		print("; --- {0} ---".format(s.strip().lower()))
		s = s if s.find(";") < 0 else s[:s.find(";")]
		s = s.upper().strip()		
		if s == "":
			return
		#
		if s == "DEBUG":
			print("\t.byte\t$DB")
			return
		#
		if s in self.opcodes:
			if s == "I2S":
				print("\tlda\t#10")
			print("\tjsr\t{0}".format(self.opcodes[s]))
			return
		#
		m = re.match("^(\\w+)\\s+R?(\\d+)$",s)
		if m is not None:
			print("\tldx\t#IFR{0}".format(m.group(2)))
			print("\tjsr\t{0}".format(self.opcodes[m.group(1)]))
			return
		#
		m = re.match("^(\\w+)\\s+R?(\\d+)\\,(.*)$",s)
		assert m is not None,"Cannot process "+s
		print("\tldx\t#IFR{0}".format(m.group(2)))
		print("\tjsr\t{0}".format(self.opcodes[m.group(1)]))
		print(IFloat24(float(m.group(3))).getAssembler())

if __name__ == '__main__':
	tsc = TSCompiler()
	print(";\n;\tThis file is automatically generated.\n;")
	for line in sys.stdin:
		tsc.compile(line)
	print("\tjmp\t$FFFF")