# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		vectors.py
#		Purpose :	Vector code generation
#		Date :		25th May 2023
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import sys	

vectors = """

	OSEditLine						: Edit line, return completion in A, line in YX
	OSEditNewLine 					: Edit line, start clear.
	OSWriteString 					: Write length prefixed string YX to screen
	OSWriteStringZ 					: Write ASCIIZ string YX to screen
	OSGetScreenSize 				: Get size of screen to XY

	OSKeyboardDataProcess 			: Keyboard update process.
	OSCheckBreak					: NZ if ESC pressed.
	OSIsKeyAvailable 				: Check if key available (CS if so)
 	OSReadKeystroke 		 		: Read A from keyboard, showing cursor while waiting.

	OSReadKeyboard 					: Read A from keyboard (device 1), CC = success
	OSWriteScreen 					: Write A to screen (device 0), CC = success

	OSReadDevice 					: Read device X to A, CC = success
	OSWriteDevice 					: Write A to device X, CC = success

"""
vectors = [x.strip() for x in vectors.split("\n") if x.strip() != ""]

h1 = open("src/generated/vectors.asmx","w")
h1.write(";\n;\tThis file is automatically generated.\n;\n")
h2 = sys.stdout
h2.write(";\n;\tThis file is automatically generated.\n;\n")

start = 0xFFFA-len(vectors)*3
h1.write("\t* = ${0:04x}\n\n".format(start))
for v in vectors:
	p = [x.strip() for x in v.split(":")]
	h1.write("\tjmp\t\t{0:24} ; {1}\n".format(p[0],p[1]))
	h2.write("{0:24} = ${1:04x} ; {2}\n".format(p[0],start,p[1]))
	start += 3
h1.close()	
h2.close()


