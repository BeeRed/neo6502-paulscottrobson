
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/osrom.bin osrom.asm
; Sat Jul  8 11:59:52 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: osrom.asm


;******  Processing file: ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorCount:
>0344							.fill 	2
.0346					currentSector:
>0346							.fill 	2
.0348					successFlag:
>0348							.fill 	1
.0349					sectorHeader:
.0349					shFirstNext:
>0349							.fill 	1
.034a					shContinue:
>034a							.fill 	1
.034b					shDataSize:
>034b							.fill 	2
.034d					shFileSize:
>034d							.fill 	2
>034f							.fill 	10
.0359					shNameLength:
>0359							.fill 	1
.035a					shNameText:
>035a							.fill 	15
.0369					shFileSizeCopy:
>0369							.fill 	2
.036b					notFirstSector:
>036b							.fill 	1
.036c					sectorCapacity:
>036c							.fill 	2
.036e					fileRemainingSize:
>036e							.fill 	2
.0370					bytesToWrite:
>0370							.fill 	2
>0372							.align 	256

;******  Return to file: osrom.asm

.f000	20 ba f6	jsr $f6ba	Boot:	jsr 	OSInitialise 				; set everything up.
.f003	20 e4 f8	jsr $f8e4			jsr 	FSInitialise 				; initialise the WWFS
.f006	a2 2b		ldx #$2b			ldx 	#MainPrompt & $FF 			; display the boot prompt
.f008	a0 f9		ldy #$f9			ldy 	#MainPrompt >> 8
.f00a	20 5b f1	jsr $f15b			jsr 	OSWriteString
.f00d	4c 00 10	jmp $1000			jmp 	$1000 						; and run from $1000 onwards
.f010					NoInt:
.f010	40		rti				rti
>f011	17 f0				setup:	.word 	name
>f013	00 10						.word 	$1000
>f015	00 15						.word 	$1500
>f017	09 74 65 78 74 33 2e 64		name:	.text 	9,"text3.dat"
>f01f	61 74

;******  Processing file: include.files


;******  Processing file: src/basicio/charout.asm

.f021					OSWriteScreen:
.f021	48		pha				pha 								; save AXY
.f022	da		phx				phx
.f023	5a		phy				phy
.f024	c9 20		cmp #$20			cmp 	#32 						; standard character $20,$FF (we allow for cyrillic possibility here)
.f026	b0 0c		bcs $f034			bcs 	_OSWriteDirect
.f028	c9 10		cmp #$10			cmp 	#16 						; 16-32 for set colours, reserved - this copies fgr -> bgr, updates fgr.
.f02a	b0 0e		bcs $f03a			bcs 	_OSWriteDeviceExit
.f02c	0a		asl a				asl 	a 							; make to an offset in vector table
.f02d	aa		tax				tax
.f02e	4a		lsr a				lsr 	a
.f02f	20 3f f0	jsr $f03f			jsr 	_OSCallVectorCode 			; call that code
.f032	80 06		bra $f03a			bra 	_OSWriteDeviceExit 			; and leave
.f034					_OSWriteDirect:
.f034	20 80 f1	jsr $f180			jsr 	OSDWritePhysical 			; $20-$FF write to screen
.f037	20 b9 f0	jsr $f0b9			jsr 	_OSCursorAdvance 			; and forwards.
.f03a					_OSWriteDeviceExit:
.f03a	7a		ply				ply
.f03b	fa		plx				plx
.f03c	68		pla				pla
.f03d	18		clc				clc 								; written fine.
.f03e	60		rts				rts
.f03f					_OSCallVectorCode:
.f03f	7c 43 f0	jmp ($f043,x)			jmp 	(_OSWDVector,x)
.f042					_OSWNoFunction:
.f042	60		rts				rts
.f043					_OSWDVector:
>f043	42 f0						.word 	_OSWNoFunction 				; $00 	No operation
>f045	7c f0						.word 	_OSCursorLeft 				; $01 	Left 		(Ctrl-A)
>f047	07 f1						.word 	OSHomeCursor 				; $02 	Home Cursor (Ctrl-B)
>f049	9d f0						.word 	_OSCursorDown 				; $03 	Down 		(Ctrl-C)
>f04b	8e f0						.word 	_OSCursorRight 				; $04 	Right 		(Ctrl-D)
>f04d	42 f0						.word 	_OSWNoFunction				; $05
>f04f	ac f0						.word 	_OSCursorUp 				; $06	Up 			(Ctrl-F)
>f051	42 f0						.word 	_OSWNoFunction 				; $07 	Delete 		(Del)
>f053	6e f0						.word 	_OSBackspace				; $08 	Backspace 	(Backspace)
>f055	63 f0						.word 	_OSWHTab 					; $09	Tab 		(Tab stop)
>f057	42 f0						.word 	_OSWNoFunction 				; $0A
>f059	42 f0						.word 	_OSWNoFunction 				; $0B
>f05b	f5 f0						.word 	_OSClearScreen 				; $0C	ClearScreen	(Ctrl-L)
>f05d	c6 f0						.word 	_OSNewLine 					; $0D 	CarriageRet (Enter)
>f05f	42 f0						.word 	_OSWNoFunction 				; $0E
>f061	42 f0						.word 	_OSWNoFunction 				; $0F
.f063					_OSWHTab:
.f063	20 8e f0	jsr $f08e			jsr 	_OSCursorRight
.f066	ad 20 02	lda $0220			lda 	OSXPos
.f069	29 07		and #$07			and 	#7
.f06b	d0 f6		bne $f063			bne 	_OSWHTab
.f06d	60		rts				rts
.f06e					_OSBackspace:
.f06e	ad 20 02	lda $0220			lda 	OSXPos 						; left side already ?
.f071	f0 1a		beq $f08d			beq 	_OSCLExit
.f073	ce 20 02	dec $0220			dec 	OSXPos 						; go left one.
.f076	a9 20		lda #$20			lda 	#' ' 						; ovewrite the character there.
.f078	20 80 f1	jsr $f180			jsr 	OSDWritePhysical
.f07b	60		rts				rts
.f07c					_OSCursorLeft:
.f07c	ad 20 02	lda $0220			lda 	OSXPos 						; left side
.f07f	ce 20 02	dec $0220			dec 	OSXPos 						; cursor left
.f082	c9 00		cmp #$00			cmp 	#0 							; if at left side
.f084	d0 07		bne $f08d			bne 	_OSCLExit 					; no, exit
.f086	ad 22 02	lda $0222			lda 	OSXSize 					; yes, shift to right.
.f089	3a		dec a				dec 	a
.f08a	8d 20 02	sta $0220			sta 	OSXPos
.f08d					_OSCLExit:
.f08d	60		rts				rts
.f08e					_OSCursorRight:
.f08e	ee 20 02	inc $0220			inc 	OSXPos 						; go right ?
.f091	ad 20 02	lda $0220			lda 	OSXPos 						; reached right side ?
.f094	cd 22 02	cmp $0222			cmp 	OSXSize
.f097	d0 f4		bne $f08d			bne 	_OSCLExit 					; no, then exit
.f099	9c 20 02	stz $0220			stz 	OSXPos 						; back to left
.f09c	60		rts				rts
.f09d					_OSCursorDown:
.f09d	ee 21 02	inc $0221			inc 	OSYPos 						; down one line.
.f0a0	ad 21 02	lda $0221			lda 	OSYPos 						; reached bottom
.f0a3	cd 23 02	cmp $0223			cmp 	OSYSize
.f0a6	90 03		bcc $f0ab			bcc 	_OSCDExit 					; no, we're done.
.f0a8	9c 21 02	stz $0221			stz 	OSYPos 						; position back to top line
.f0ab					_OSCDExit:
.f0ab	60		rts				rts
.f0ac					_OSCursorUp:
.f0ac	ce 21 02	dec $0221			dec 	OSYPos 						; up one line ?
.f0af	10 07		bpl $f0b8			bpl 	_OSCUExit 					; exit if still on screen
.f0b1	ad 23 02	lda $0223			lda 	OSYSize 					; back to top
.f0b4	3a		dec a				dec 	a
.f0b5	8d 21 02	sta $0221			sta 	OSYPos
.f0b8					_OSCUExit:
.f0b8	60		rts				rts
.f0b9					_OSCursorAdvance:
.f0b9	ee 20 02	inc $0220			inc 	OSXPos 						; try moving right
.f0bc	ad 20 02	lda $0220			lda 	OSXPos						; reached the write.
.f0bf	cd 22 02	cmp $0222			cmp 	OSXSize
.f0c2	d0 30		bne $f0f4			bne 	_OSLCExit 	 				; exit if not at the RHS.
.f0c4	a2 00		ldx #$00			ldx 	#0 							; character flag, reached here not via CR.
.f0c6					_OSNewLine:
.f0c6	da		phx				phx 								; save CR/char flag.
.f0c7	9c 20 02	stz $0220			stz 	OSXPos 						; left side
.f0ca	ee 21 02	inc $0221			inc 	OSYPos 						; down one.
.f0cd	ad 21 02	lda $0221			lda 	OSYPos 						; reached the bottom
.f0d0	cd 23 02	cmp $0223			cmp 	OSYSize
.f0d3	90 18		bcc $f0ed			bcc 	_OSLCUpdateCR				; no, update CR flag and exit
.f0d5	ad 23 02	lda $0223			lda 	OSYSize 					; bottom of screen
.f0d8	3a		dec a				dec 	a
.f0d9	8d 21 02	sta $0221			sta 	OSYPos 						; back up one line
.f0dc	20 56 f2	jsr $f256			jsr 	OSDScrollUp 				; scroll the whole screen up.
.f0df	a2 00		ldx #$00			ldx 	#0 							; scroll the CR flag table up
.f0e1					_OSNLScrollFlag:
.f0e1	bd 01 02	lda $0201,x			lda 	OSNewLineFlag+1,x
.f0e4	9d 00 02	sta $0200,x			sta 	OSNewLineFlag,x
.f0e7	e8		inx				inx
.f0e8	ec 23 02	cpx $0223			cpx 	OSYSize
.f0eb	d0 f4		bne $f0e1			bne	 	_OSNLScrollFlag
.f0ed					_OSLCUpdateCR:
.f0ed	ae 21 02	ldx $0221			ldx 	OSYPos 						; set appropriate flag in CR/multi line table.
.f0f0	68		pla				pla
.f0f1	9d 00 02	sta $0200,x			sta 	OSNewLineFlag,x
.f0f4					_OSLCExit:
.f0f4	60		rts				rts
.f0f5					_OSClearScreen:
.f0f5	20 b4 f1	jsr $f1b4			jsr 	OSDClearScreen 				; physical clear.
.f0f8	ae 23 02	ldx $0223			ldx 	OSYSize 					; set all the CR flags on each row
.f0fb					_OSCSSetLoop:
.f0fb	a9 ff		lda #$ff			lda 	#$FF
.f0fd	9d ff 01	sta $01ff,x			sta 	OSNewLineFlag-1,x
.f100	ca		dex				dex
.f101	d0 f8		bne $f0fb			bne		_OSCSSetLoop
.f103	20 07 f1	jsr $f107			jsr 	OSHomeCursor 				; cursor to (0,0)
.f106	60		rts				rts
.f107					OSHomeCursor:
.f107	9c 20 02	stz $0220			stz 	OSXPos
.f10a	9c 21 02	stz $0221			stz	 	OSYPos
.f10d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/basicio/keyboard.asm

.f10e					OSIsKeyAvailable:
.f10e	48		pha				pha
.f10f	18		clc				clc
.f110	ad 58 02	lda $0258			lda 	OSKeyboardQueueSize  		; get count of entries in queue
.f113	d0 01		bne $f116			bne 	_OSIKAHasKey
.f115	38		sec				sec
.f116					_OSIKAHasKey:
.f116	68		pla				pla
.f117	60		rts				rts
.f118					OSReadKeyboard:
.f118	20 d1 f1	jsr $f1d1			jsr 	OSKeyboardDataProcess 		; this scans the keyboard etc.
.f11b	20 0e f1	jsr $f10e			jsr 	OSIsKeyAvailable 			; key available ?
.f11e	b0 19		bcs $f139			bcs 	_OSRDExit 					; no exit with CS.
.f120	ad 48 02	lda $0248			lda 	OSKeyboardQueue 			; push char from head of queueon stack
.f123	48		pha				pha
.f124	da		phx				phx 								; shift everything else up one.
.f125	a2 00		ldx #$00			ldx		#0 							; remove from queue array
.f127					_OSRDDequeue:
.f127	bd 49 02	lda $0249,x			lda 	OSKeyboardQueue+1,x
.f12a	9d 48 02	sta $0248,x			sta 	OSKeyboardQueue,x
.f12d	e8		inx				inx
.f12e	ec 58 02	cpx $0258			cpx 	OSKeyboardQueueSize
.f131	d0 f4		bne $f127			bne 	_OSRDDequeue
.f133	ce 58 02	dec $0258			dec 	OSKeyboardQueueSize			; dec queue count
.f136	fa		plx				plx
.f137	68		pla				pla 								; restore key
.f138	18		clc				clc
.f139					_OSRDExit:
.f139	60		rts				rts
.f13a					OSReadKeystroke:
.f13a	da		phx				phx 								; save XY
.f13b	5a		phy				phy
.f13c	20 7a f1	jsr $f17a			jsr 	OSDReadPhysical 			; save old character under cursor
.f13f	8d 5c 02	sta $025c			sta 	OSRKOriginal
.f142	49 80		eor #$80			eor 	#$80 						; write prompt
.f144	20 80 f1	jsr $f180			jsr 	OSDWritePhysical
.f147					_OSWaitKey:
.f147	20 d1 f1	jsr $f1d1			jsr 	OSKeyboardDataProcess 		; this scans the keyboard, could be interrupt
.f14a	20 18 f1	jsr $f118			jsr 	OSReadKeyboard 				; key available
.f14d	b0 f8		bcs $f147			bcs 	_OSWaitKey 					; no keep going
.f14f	48		pha				pha 								; save key
.f150	ad 5c 02	lda $025c			lda 	OSRKOriginal 				; old character back and write to screen.
.f153	20 80 f1	jsr $f180			jsr 	OSDWritePhysical
.f156	68		pla				pla 								; restore
.f157	7a		ply				ply
.f158	fa		plx				plx
.f159	18		clc				clc 								; success
.f15a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/basicio/writestring.asm

.f15b					OSWriteString:
.f15b	48		pha				pha 								; save AXY
.f15c	da		phx				phx
.f15d	5a		phy				phy
.f15e	86 1e		stx $1e				stx		rTemp1 						; address of string in rTemp1
.f160	84 1f		sty $1f				sty 	rTemp1+1
.f162	b2 1e		lda ($1e)			lda 	(rTemp1)
.f164	aa		tax				tax 								; count in X
.f165	a0 00		ldy #$00			ldy 	#0
.f167					OSWSLoop:
.f167	e0 00		cpx #$00			cpx 	#0 							; done them all, exit
.f169	f0 0b		beq $f176			beq 	_OSWSExit
.f16b	ca		dex				dex 								; dec count
.f16c	c8		iny				iny 								; get next character
.f16d	b1 1e		lda ($1e),y			lda 	(rTemp1),y
.f16f	f0 05		beq $f176			beq 	_OSWSExit 					; end if $00
.f171	20 21 f0	jsr $f021			jsr 	OSWriteScreen				; otherwise write to screen.
.f174	80 f1		bra $f167			bra 	OSWSLoop
.f176					_OSWSExit:
.f176	7a		ply				ply 								; restore AXY and exit
.f177	fa		plx				plx
.f178	68		pla				pla
.f179	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/charwrite.asm

.f17a					OSDReadPhysical:
.f17a	20 88 f1	jsr $f188			jsr 	OSDGetAddress
.f17d	b2 1c		lda ($1c)			lda 	(rTemp0)
.f17f	60		rts				rts
.f180					OSDWritePhysical:
.f180	48		pha				pha
.f181	20 88 f1	jsr $f188			jsr 	OSDGetAddress
.f184	68		pla				pla
.f185	92 1c		sta ($1c)			sta 	(rTemp0)
.f187	60		rts				rts
.f188					OSDGetAddress:
.f188	ac 21 02	ldy $0221			ldy     OSYPos
.f18b	ae 20 02	ldx $0220			ldx 	OSXPos
.f18e					OSDGetAddressXY:
.f18e	ad 22 02	lda $0222			lda     OSXSize
.f191	4a		lsr a				lsr     a                           ; prime the carry bit for the loop
.f192	85 1c		sta $1c				sta     rTemp0
.f194	84 1d		sty $1d				sty     rTemp0+1
.f196	a9 00		lda #$00			lda     #0
.f198	a0 08		ldy #$08			ldy     #8
.f19a					_IFMLoop:
.f19a	90 03		bcc $f19f			bcc     _IFMNoAdd
.f19c	18		clc				clc
.f19d	65 1d		adc $1d				adc     rTemp0+1
.f19f					_IFMNoAdd:
.f19f	6a		ror a				ror     a
.f1a0	66 1c		ror $1c				ror     rTemp0                      ; pull another bit out for the next iteration
.f1a2	88		dey				dey
.f1a3	d0 f5		bne $f19a			bne     _IFMLoop
.f1a5	09 c0		ora #$c0			ora 	#$C0
.f1a7	a8		tay				tay
.f1a8	18		clc				clc
.f1a9	8a		txa				txa
.f1aa	65 1c		adc $1c				adc 	rTemp0
.f1ac	85 1c		sta $1c				sta 	rTemp0
.f1ae	90 01		bcc $f1b1			bcc 	_IFMNoCarry
.f1b0	c8		iny				iny
.f1b1					_IFMNoCarry:
.f1b1	84 1d		sty $1d				sty 	rTemp0+1
.f1b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/clear.asm

.f1b4					OSDClearScreen:
.f1b4	a9 c0		lda #$c0			lda 	#$C0 						; set screen pos.
.f1b6	85 1d		sta $1d				sta 	rTemp0+1
.f1b8	64 1c		stz $1c				stz 	rTemp0
.f1ba	ac 23 02	ldy $0223			ldy 	OSYSize 					; clear height * width bytes.
.f1bd					_OSCSLoop1:
.f1bd	ae 22 02	ldx $0222			ldx 	OSXSize
.f1c0					_OSCSLoop2:
.f1c0	a9 20		lda #$20			lda 	#' '
.f1c2	92 1c		sta ($1c)			sta 	(rTemp0)
.f1c4	e6 1c		inc $1c				inc 	rTemp0
.f1c6	d0 02		bne $f1ca			bne 	_OSCSNoCarry
.f1c8	e6 1d		inc $1d				inc 	rTemp0+1
.f1ca					_OSCSNoCarry:
.f1ca	ca		dex				dex
.f1cb	d0 f3		bne $f1c0			bne 	_OSCSLoop2
.f1cd	88		dey				dey
.f1ce	d0 ed		bne $f1bd			bne 	_OSCSLoop1
.f1d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/ps2keyboard.asm

.f1d1					OSKeyboardDataProcess:
.f1d1	ad 00 cf	lda $cf00			lda 	$CF00 						; read keyboard port
.f1d4	f0 31		beq $f207			beq 	_OSKExit 					; no events available.
.f1d6	c9 f0		cmp #$f0			cmp 	#$F0 						; check key up ?
.f1d8	f0 2a		beq $f204			beq 	_OSKUp
.f1da	c9 e0		cmp #$e0			cmp 	#$E0 						; check extended scancode ?
.f1dc	f0 1f		beq $f1fd			beq 	_OSKShift
.f1de	0d 5a 02	ora $025a			ora 	OSIsKeyShift 				; actual key code - sets bit 7 if extended scancode.
.f1e1	48		pha				pha
.f1e2	20 10 f2	jsr $f210			jsr 	OSDKeyboardUpdateBits 		; update the up/down bits
.f1e5	68		pla				pla
.f1e6	ae 59 02	ldx $0259			ldx 	OSIsKeyUp 					; if key up reset up and shift flags.
.f1e9	f0 08		beq $f1f3			beq 	_OSKInsertQueue 			; if key down insert into queue
.f1eb	9c 59 02	stz $0259			stz 	OSIsKeyUp 					; reset up/shift
.f1ee	9c 5a 02	stz $025a			stz 	OSIsKeyShift
.f1f1	80 14		bra $f207			bra 	_OSKExit
.f1f3					_OSKInsertQueue:
.f1f3	20 83 f2	jsr $f283			jsr 	OSDTranslateToASCII 		; convert to ASCII
.f1f6	b0 0f		bcs $f207			bcs 	_OSKExit 					; carry set, exit (unknown key)
.f1f8	20 39 f2	jsr $f239			jsr 	OSDInsertKeyboardQueue 		; insert into keyboard queue.
.f1fb	80 0a		bra $f207			bra 	_OSKExit
.f1fd					_OSKShift:
.f1fd	a9 80		lda #$80			lda 	#$80 						; set this so the OR seets bit 7.
.f1ff	8d 5a 02	sta $025a			sta 	OSIsKeyShift
.f202	80 03		bra $f207			bra 	_OSKExit
.f204					_OSKUp:
.f204	ce 59 02	dec $0259			dec 	OSIsKeyUp 					; received $F0 (key up), set that flag
.f207					_OSKExit:
.f207	ad 36 02	lda $0236			lda 	OSKeyStatus+$0E 			; and on the way out check if ESC was pressed.
.f20a	29 40		and #$40			and 	#$40
.f20c	8d 5b 02	sta $025b			sta 	OSEscapePressed
.f20f	60		rts				rts
.f210					OSDKeyboardUpdateBits:
.f210	a2 00		ldx #$00			ldx 	#0 							; offset in table
.f212					_OSKUCalculate:
.f212	c9 08		cmp #$08			cmp 	#8 							; work out the row
.f214	90 06		bcc $f21c			bcc 	_OSKUHaveRow
.f216	e8		inx				inx
.f217	38		sec				sec
.f218	e9 08		sbc #$08			sbc 	#8
.f21a	80 f6		bra $f212			bra 	_OSKUCalculate
.f21c					_OSKUHaveRow:
.f21c	a8		tay				tay 								; work out the column
.f21d	a9 00		lda #$00			lda 	#0
.f21f	38		sec				sec
.f220					_OSKUCalculate2:
.f220	2a		rol a				rol 	a
.f221	88		dey				dey
.f222	10 fc		bpl $f220			bpl 	_OSKUCalculate2  			; at end , A is bitmask, X is row (table entry)
.f224	2c 59 02	bit $0259			bit 	OSIsKeyUp 					; check up
.f227	30 07		bmi $f230			bmi 	_OSKUUp
.f229	1d 28 02	ora $0228,x			ora 	OSKeyStatus,x 				; down set bit
.f22c	9d 28 02	sta $0228,x			sta 	OSKeyStatus,x
.f22f	60		rts				rts
.f230					_OSKUUp:
.f230	49 ff		eor #$ff			eor 	#$FF 						; make maske
.f232	3d 28 02	and $0228,x			and 	OSKeyStatus,x 				; up clear bit
.f235	9d 28 02	sta $0228,x			sta 	OSKeyStatus,x
.f238	60		rts				rts
.f239					OSDInsertKeyboardQueue:
.f239	ae 58 02	ldx $0258			ldx 	OSKeyboardQueueSize 		; check to see if full
.f23c	e0 10		cpx #$10			cpx	 	#OSKeyboardQueueMaxSize
.f23e	b0 06		bcs $f246			bcs 	_OSIKQExit 					; if so, you will never know.
.f240	9d 48 02	sta $0248,x			sta 	OSKeyboardQueue,x 			; add keyboard entry to queue.
.f243	ee 58 02	inc $0258			inc 	OSKeyboardQueueSize
.f246					_OSIKQExit:
.f246	60		rts				rts
.f247					OSDKeyboardInitialise:
.f247	a2 32		ldx #$32			ldx 	#OSIsKeyShift-OSKeyStatus
.f249					_OSKILoop:
.f249	9e 28 02	stz $0228,x			stz 	OSKeyStatus,x
.f24c	ca		dex				dex
.f24d	10 fa		bpl $f249			bpl 	_OSKILoop
.f24f	9c 59 02	stz $0259			stz 	OSIsKeyUp 					; reset up/shift
.f252	9c 5a 02	stz $025a			stz 	OSIsKeyShift
.f255	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/scroll.asm

.f256					OSDScrollUp:
.f256	a9 c0		lda #$c0			lda 	#$C0 						; scroll whole screen up.
.f258	64 1c		stz $1c				stz 	rTemp0
.f25a	85 1d		sta $1d				sta 	rTemp0+1
.f25c	ac 23 02	ldy $0223			ldy 	OSYSize 					; line counts.
.f25f	88		dey				dey
.f260					_OSSULoop1:
.f260	ae 22 02	ldx $0222			ldx 	OSXSize 					; number of bytes to copy
.f263	5a		phy				phy
.f264	ac 22 02	ldy $0222			ldy 	OSXSize 					; offset
.f267					_OSSULoop2:
.f267	b1 1c		lda ($1c),y			lda 	(rTemp0),y 					; copy up
.f269	92 1c		sta ($1c)			sta 	(rTemp0)
.f26b	e6 1c		inc $1c				inc 	rTemp0 						; adjust position.
.f26d	d0 02		bne $f271			bne 	_OSSUCarry
.f26f	e6 1d		inc $1d				inc 	rTemp0+1
.f271					_OSSUCarry:
.f271	ca		dex				dex 								; do the whole row
.f272	d0 f3		bne $f267			bne 	_OSSULoop2
.f274	7a		ply				ply
.f275	88		dey				dey 								; for n-1 rows
.f276	d0 e8		bne $f260			bne 	_OSSULoop1
.f278	ac 22 02	ldy $0222			ldy 	OSXSize 					; fill bottom row with spaces.
.f27b					_OSSUFill:
.f27b	a9 20		lda #$20			lda 	#' '
.f27d	88		dey				dey
.f27e	91 1c		sta ($1c),y			sta 	(rTemp0),y
.f280	d0 f9		bne $f27b			bne 	_OSSUFill
.f282	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/translate.asm

.f283					OSDTranslateToASCII:
.f283	aa		tax				tax
.f284	bd d0 f2	lda $f2d0,x			lda 	OSASCIIFromScanCode,x 		; get ASCII keystroke from scan code
.f287	f0 45		beq $f2ce			beq 	_OSTTAFail 					; wrong keyboard map/type ?
.f289	aa		tax				tax 								; save in X
.f28a	ad 2a 02	lda $022a			lda 	OSKeyStatus+OS_KP_LEFTCTRL_ROW
.f28d	29 10		and #$10			and 	#OS_KP_LEFTCTRL_COL
.f28f	d0 36		bne $f2c7			bne 	_OSTTAControl 				; check for CTRL + x
.f291	ad 2a 02	lda $022a			lda 	OSKeyStatus+OS_KP_LEFTSHIFT_ROW
.f294	29 04		and #$04			and 	#OS_KP_LEFTSHIFT_COL
.f296	d0 07		bne $f29f			bne 	_OSTTAShift 				; check for left/right shift
.f298	ad 33 02	lda $0233			lda 	OSKeyStatus+OS_KP_RIGHTSHIFT_ROW
.f29b	29 02		and #$02			and 	#OS_KP_RIGHTSHIFT_COL
.f29d	f0 2c		beq $f2cb			beq 	_OSTTAExit 					; no, no translate
.f29f					_OSTTAShift:
.f29f	e0 61		cpx #$61			cpx 	#"a"						; check alpha a-z => A-Z
.f2a1	90 0a		bcc $f2ad			bcc 	_OSTTANotAlpha
.f2a3	e0 7b		cpx #$7b			cpx 	#"z"+1
.f2a5	b0 06		bcs $f2ad			bcs 	_OSTTANotAlpha
.f2a7	8a		txa				txa									; capitalise.
.f2a8	49 20		eor #$20			eor 	#$20
.f2aa	aa		tax				tax
.f2ab	80 1e		bra $f2cb			bra 	_OSTTAExit
.f2ad					_OSTTANotAlpha:
.f2ad	86 1c		stx $1c				stx 	rTemp0 						; save ASCII code.
.f2af	a0 00		ldy #$00			ldy 	#0 							; check the shift table
.f2b1					_OSTTACheckShiftTable:
.f2b1	b9 d2 f3	lda $f3d2,y			lda 	OSShiftFixTable+1,y 		; tax = shifted character
.f2b4	aa		tax				tax
.f2b5	b9 d1 f3	lda $f3d1,y			lda 	OSShiftFixTable,y 			; check unshifted match
.f2b8	c5 1c		cmp $1c				cmp 	rTemp0
.f2ba	f0 0f		beq $f2cb			beq 	_OSTTAExit
.f2bc	c8		iny				iny 								; next pair
.f2bd	c8		iny				iny
.f2be	b9 d1 f3	lda $f3d1,y			lda 	OSShiftFixTable,y 			; until all checked
.f2c1	10 ee		bpl $f2b1			bpl 	_OSTTACheckShiftTable
.f2c3	a6 1c		ldx $1c				ldx 	rTemp0 						; not shiftable.
.f2c5	80 04		bra $f2cb			bra 	_OSTTAExit
.f2c7					_OSTTAControl:
.f2c7	8a		txa				txa
.f2c8	29 1f		and #$1f			and 	#31
.f2ca	aa		tax				tax
.f2cb					_OSTTAExit:
.f2cb	8a		txa				txa
.f2cc	18		clc				clc
.f2cd	60		rts				rts
.f2ce					_OSTTAFail:
.f2ce	38		sec				sec
.f2cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/generated/ps2convert.asm

.f2d0					OSASCIIFromScanCode:
>f2d0	00					.byte	$00 ; $00
>f2d1	19					.byte	$19 ; $01 chr$(25)
>f2d2	00					.byte	$00 ; $02
>f2d3	15					.byte	$15 ; $03 chr$(21)
>f2d4	13					.byte	$13 ; $04 chr$(19)
>f2d5	11					.byte	$11 ; $05 chr$(17)
>f2d6	12					.byte	$12 ; $06 chr$(18)
>f2d7	00					.byte	$00 ; $07
>f2d8	00					.byte	$00 ; $08
>f2d9	1a					.byte	$1a ; $09 chr$(26)
>f2da	18					.byte	$18 ; $0a chr$(24)
>f2db	16					.byte	$16 ; $0b chr$(22)
>f2dc	14					.byte	$14 ; $0c chr$(20)
>f2dd	09					.byte	$09 ; $0d chr$(9)
>f2de	60					.byte	$60 ; $0e '`'
>f2df	00					.byte	$00 ; $0f
>f2e0	00					.byte	$00 ; $10
>f2e1	00					.byte	$00 ; $11
>f2e2	00					.byte	$00 ; $12
>f2e3	00					.byte	$00 ; $13
>f2e4	00					.byte	$00 ; $14
>f2e5	71					.byte	$71 ; $15 'q'
>f2e6	31					.byte	$31 ; $16 '1'
>f2e7	00					.byte	$00 ; $17
>f2e8	00					.byte	$00 ; $18
>f2e9	00					.byte	$00 ; $19
>f2ea	7a					.byte	$7a ; $1a 'z'
>f2eb	73					.byte	$73 ; $1b 's'
>f2ec	61					.byte	$61 ; $1c 'a'
>f2ed	77					.byte	$77 ; $1d 'w'
>f2ee	32					.byte	$32 ; $1e '2'
>f2ef	00					.byte	$00 ; $1f
>f2f0	00					.byte	$00 ; $20
>f2f1	63					.byte	$63 ; $21 'c'
>f2f2	78					.byte	$78 ; $22 'x'
>f2f3	64					.byte	$64 ; $23 'd'
>f2f4	65					.byte	$65 ; $24 'e'
>f2f5	34					.byte	$34 ; $25 '4'
>f2f6	33					.byte	$33 ; $26 '3'
>f2f7	00					.byte	$00 ; $27
>f2f8	00					.byte	$00 ; $28
>f2f9	20					.byte	$20 ; $29 ' '
>f2fa	76					.byte	$76 ; $2a 'v'
>f2fb	66					.byte	$66 ; $2b 'f'
>f2fc	74					.byte	$74 ; $2c 't'
>f2fd	72					.byte	$72 ; $2d 'r'
>f2fe	35					.byte	$35 ; $2e '5'
>f2ff	00					.byte	$00 ; $2f
>f300	00					.byte	$00 ; $30
>f301	6e					.byte	$6e ; $31 'n'
>f302	62					.byte	$62 ; $32 'b'
>f303	68					.byte	$68 ; $33 'h'
>f304	67					.byte	$67 ; $34 'g'
>f305	79					.byte	$79 ; $35 'y'
>f306	36					.byte	$36 ; $36 '6'
>f307	00					.byte	$00 ; $37
>f308	00					.byte	$00 ; $38
>f309	00					.byte	$00 ; $39
>f30a	6d					.byte	$6d ; $3a 'm'
>f30b	6a					.byte	$6a ; $3b 'j'
>f30c	75					.byte	$75 ; $3c 'u'
>f30d	37					.byte	$37 ; $3d '7'
>f30e	38					.byte	$38 ; $3e '8'
>f30f	00					.byte	$00 ; $3f
>f310	00					.byte	$00 ; $40
>f311	2c					.byte	$2c ; $41 ','
>f312	6b					.byte	$6b ; $42 'k'
>f313	69					.byte	$69 ; $43 'i'
>f314	6f					.byte	$6f ; $44 'o'
>f315	30					.byte	$30 ; $45 '0'
>f316	39					.byte	$39 ; $46 '9'
>f317	00					.byte	$00 ; $47
>f318	00					.byte	$00 ; $48
>f319	2e					.byte	$2e ; $49 '.'
>f31a	2f					.byte	$2f ; $4a '/'
>f31b	6c					.byte	$6c ; $4b 'l'
>f31c	3b					.byte	$3b ; $4c ';'
>f31d	70					.byte	$70 ; $4d 'p'
>f31e	2d					.byte	$2d ; $4e '-'
>f31f	00					.byte	$00 ; $4f
>f320	00					.byte	$00 ; $50
>f321	00					.byte	$00 ; $51
>f322	27					.byte	$27 ; $52 '''
>f323	00					.byte	$00 ; $53
>f324	5b					.byte	$5b ; $54 '['
>f325	3d					.byte	$3d ; $55 '='
>f326	00					.byte	$00 ; $56
>f327	00					.byte	$00 ; $57
>f328	00					.byte	$00 ; $58
>f329	00					.byte	$00 ; $59
>f32a	0d					.byte	$0d ; $5a chr$(13)
>f32b	5d					.byte	$5d ; $5b ']'
>f32c	00					.byte	$00 ; $5c
>f32d	7c					.byte	$7c ; $5d '|'
>f32e	00					.byte	$00 ; $5e
>f32f	00					.byte	$00 ; $5f
>f330	00					.byte	$00 ; $60
>f331	00					.byte	$00 ; $61
>f332	00					.byte	$00 ; $62
>f333	00					.byte	$00 ; $63
>f334	00					.byte	$00 ; $64
>f335	00					.byte	$00 ; $65
>f336	08					.byte	$08 ; $66 chr$(8)
>f337	00					.byte	$00 ; $67
>f338	00					.byte	$00 ; $68
>f339	00					.byte	$00 ; $69
>f33a	00					.byte	$00 ; $6a
>f33b	01					.byte	$01 ; $6b chr$(1)
>f33c	00					.byte	$00 ; $6c
>f33d	00					.byte	$00 ; $6d
>f33e	00					.byte	$00 ; $6e
>f33f	00					.byte	$00 ; $6f
>f340	00					.byte	$00 ; $70
>f341	00					.byte	$00 ; $71
>f342	03					.byte	$03 ; $72 chr$(3)
>f343	00					.byte	$00 ; $73
>f344	04					.byte	$04 ; $74 chr$(4)
>f345	06					.byte	$06 ; $75 chr$(6)
>f346	1b					.byte	$1b ; $76 chr$(27)
>f347	00					.byte	$00 ; $77
>f348	00					.byte	$00 ; $78
>f349	00					.byte	$00 ; $79
>f34a	00					.byte	$00 ; $7a
>f34b	00					.byte	$00 ; $7b
>f34c	00					.byte	$00 ; $7c
>f34d	00					.byte	$00 ; $7d
>f34e	00					.byte	$00 ; $7e
>f34f	00					.byte	$00 ; $7f
>f350	00					.byte	$00 ; $80
>f351	00					.byte	$00 ; $81
>f352	00					.byte	$00 ; $82
>f353	17					.byte	$17 ; $83 chr$(23)
>f354	00					.byte	$00 ; $84
>f355	00					.byte	$00 ; $85
>f356	00					.byte	$00 ; $86
>f357	00					.byte	$00 ; $87
>f358	00					.byte	$00 ; $88
>f359	00					.byte	$00 ; $89
>f35a	00					.byte	$00 ; $8a
>f35b	00					.byte	$00 ; $8b
>f35c	00					.byte	$00 ; $8c
>f35d	00					.byte	$00 ; $8d
>f35e	00					.byte	$00 ; $8e
>f35f	00					.byte	$00 ; $8f
>f360	00					.byte	$00 ; $90
>f361	00					.byte	$00 ; $91
>f362	00					.byte	$00 ; $92
>f363	00					.byte	$00 ; $93
>f364	00					.byte	$00 ; $94
>f365	00					.byte	$00 ; $95
>f366	00					.byte	$00 ; $96
>f367	00					.byte	$00 ; $97
>f368	00					.byte	$00 ; $98
>f369	00					.byte	$00 ; $99
>f36a	00					.byte	$00 ; $9a
>f36b	00					.byte	$00 ; $9b
>f36c	00					.byte	$00 ; $9c
>f36d	00					.byte	$00 ; $9d
>f36e	00					.byte	$00 ; $9e
>f36f	00					.byte	$00 ; $9f
>f370	00					.byte	$00 ; $a0
>f371	00					.byte	$00 ; $a1
>f372	00					.byte	$00 ; $a2
>f373	00					.byte	$00 ; $a3
>f374	00					.byte	$00 ; $a4
>f375	00					.byte	$00 ; $a5
>f376	00					.byte	$00 ; $a6
>f377	00					.byte	$00 ; $a7
>f378	00					.byte	$00 ; $a8
>f379	00					.byte	$00 ; $a9
>f37a	00					.byte	$00 ; $aa
>f37b	00					.byte	$00 ; $ab
>f37c	00					.byte	$00 ; $ac
>f37d	00					.byte	$00 ; $ad
>f37e	00					.byte	$00 ; $ae
>f37f	00					.byte	$00 ; $af
>f380	00					.byte	$00 ; $b0
>f381	00					.byte	$00 ; $b1
>f382	00					.byte	$00 ; $b2
>f383	00					.byte	$00 ; $b3
>f384	00					.byte	$00 ; $b4
>f385	00					.byte	$00 ; $b5
>f386	00					.byte	$00 ; $b6
>f387	00					.byte	$00 ; $b7
>f388	00					.byte	$00 ; $b8
>f389	00					.byte	$00 ; $b9
>f38a	00					.byte	$00 ; $ba
>f38b	00					.byte	$00 ; $bb
>f38c	00					.byte	$00 ; $bc
>f38d	00					.byte	$00 ; $bd
>f38e	00					.byte	$00 ; $be
>f38f	00					.byte	$00 ; $bf
>f390	00					.byte	$00 ; $c0
>f391	00					.byte	$00 ; $c1
>f392	00					.byte	$00 ; $c2
>f393	00					.byte	$00 ; $c3
>f394	00					.byte	$00 ; $c4
>f395	00					.byte	$00 ; $c5
>f396	00					.byte	$00 ; $c6
>f397	00					.byte	$00 ; $c7
>f398	00					.byte	$00 ; $c8
>f399	00					.byte	$00 ; $c9
>f39a	00					.byte	$00 ; $ca
>f39b	00					.byte	$00 ; $cb
>f39c	00					.byte	$00 ; $cc
>f39d	00					.byte	$00 ; $cd
>f39e	00					.byte	$00 ; $ce
>f39f	00					.byte	$00 ; $cf
>f3a0	00					.byte	$00 ; $d0
>f3a1	00					.byte	$00 ; $d1
>f3a2	00					.byte	$00 ; $d2
>f3a3	00					.byte	$00 ; $d3
>f3a4	00					.byte	$00 ; $d4
>f3a5	00					.byte	$00 ; $d5
>f3a6	00					.byte	$00 ; $d6
>f3a7	00					.byte	$00 ; $d7
>f3a8	00					.byte	$00 ; $d8
>f3a9	00					.byte	$00 ; $d9
>f3aa	00					.byte	$00 ; $da
>f3ab	00					.byte	$00 ; $db
>f3ac	00					.byte	$00 ; $dc
>f3ad	00					.byte	$00 ; $dd
>f3ae	00					.byte	$00 ; $de
>f3af	00					.byte	$00 ; $df
>f3b0	00					.byte	$00 ; $e0
>f3b1	00					.byte	$00 ; $e1
>f3b2	00					.byte	$00 ; $e2
>f3b3	00					.byte	$00 ; $e3
>f3b4	00					.byte	$00 ; $e4
>f3b5	00					.byte	$00 ; $e5
>f3b6	00					.byte	$00 ; $e6
>f3b7	00					.byte	$00 ; $e7
>f3b8	00					.byte	$00 ; $e8
>f3b9	45					.byte	$45 ; $e9 'E'
>f3ba	00					.byte	$00 ; $ea
>f3bb	01					.byte	$01 ; $eb chr$(1)
>f3bc	02					.byte	$02 ; $ec chr$(2)
>f3bd	00					.byte	$00 ; $ed
>f3be	00					.byte	$00 ; $ee
>f3bf	00					.byte	$00 ; $ef
>f3c0	10					.byte	$10 ; $f0 chr$(16)
>f3c1	07					.byte	$07 ; $f1 chr$(7)
>f3c2	03					.byte	$03 ; $f2 chr$(3)
>f3c3	00					.byte	$00 ; $f3
>f3c4	04					.byte	$04 ; $f4 chr$(4)
>f3c5	06					.byte	$06 ; $f5 chr$(6)
>f3c6	00					.byte	$00 ; $f6
>f3c7	00					.byte	$00 ; $f7
>f3c8	00					.byte	$00 ; $f8
>f3c9	00					.byte	$00 ; $f9
>f3ca	00					.byte	$00 ; $fa
>f3cb	00					.byte	$00 ; $fb
>f3cc	00					.byte	$00 ; $fc
>f3cd	00					.byte	$00 ; $fd
>f3ce	00					.byte	$00 ; $fe
>f3cf	00					.byte	$00 ; $ff
>f3d0	ff					.byte	$FF
.f3d1					OSShiftFixTable:
>f3d1	60 7e					.byte	$60,$7e		; ` => ~
>f3d3	31 21					.byte	$31,$21		; 1 => !
>f3d5	32 40					.byte	$32,$40		; 2 => @
>f3d7	33 23					.byte	$33,$23		; 3 => #
>f3d9	34 24					.byte	$34,$24		; 4 => $
>f3db	35 25					.byte	$35,$25		; 5 => %
>f3dd	36 5e					.byte	$36,$5e		; 6 => ^
>f3df	37 26					.byte	$37,$26		; 7 => &
>f3e1	38 2a					.byte	$38,$2a		; 8 => *
>f3e3	39 28					.byte	$39,$28		; 9 => (
>f3e5	30 29					.byte	$30,$29		; 0 => )
>f3e7	2d 5f					.byte	$2d,$5f		; - => _
>f3e9	3d 2b					.byte	$3d,$2b		; = => +
>f3eb	3b 3a					.byte	$3b,$3a		; ; => :
>f3ed	27 22					.byte	$27,$22		; ' => "
>f3ef	2c 3c					.byte	$2c,$3c		; , => <
>f3f1	2e 3e					.byte	$2e,$3e		; . => >
>f3f3	2f 3f					.byte	$2f,$3f		; / => ?
>f3f5	ff					.byte	$FF
=2					OS_KP_LEFTCTRL_ROW = 2
=$10					OS_KP_LEFTCTRL_COL = $10
=2					OS_KP_LEFTSHIFT_ROW = 2
=$04					OS_KP_LEFTSHIFT_COL = $04
=11					OS_KP_RIGHTSHIFT_ROW = 11
=$02					OS_KP_RIGHTSHIFT_COL = $02
=4					OS_KP_C_ROW = 4
=$02					OS_KP_C_COL = $02
=3					OS_KP_Z_ROW = 3
=$04					OS_KP_Z_COL = $04
=4					OS_KP_X_ROW = 4
=$04					OS_KP_X_COL = $04
=8					OS_KP_K_ROW = 8
=$04					OS_KP_K_COL = $04
=7					OS_KP_M_ROW = 7
=$04					OS_KP_M_COL = $04
=9					OS_KP_L_ROW = 9
=$08					OS_KP_L_COL = $08

;******  Return to file: include.files


;******  Processing file: src/line_editor/line_editor.asm

.f3f6					OSEnterLine:
.f3f6	20 07 f4	jsr $f407			jsr 	OSEditNewLine
.f3f9	80 03		bra $f3fe			bra 	_OSELProcess
.f3fb					_OSELRestart:
.f3fb	20 2a f4	jsr $f42a			jsr 	OSReEnterLine
.f3fe					_OSELProcess:
.f3fe	c9 03		cmp #$03			cmp	 	#3
.f400	f0 f9		beq $f3fb			beq 	_OSELRestart
.f402	c9 06		cmp #$06			cmp 	#6
.f404	f0 f5		beq $f3fb			beq 	_OSELRestart
.f406	60		rts				rts
.f407					OSEditNewLine:
.f407	9c 62 02	stz $0262			stz 	OSEditLength 				; clear buffer
.f40a					OSEditLine:
.f40a	ad 20 02	lda $0220			lda 	OSXPos 						; save edit point.
.f40d	8d 5d 02	sta $025d			sta 	OSXEdit
.f410	ad 21 02	lda $0221			lda 	OSYPos
.f413	8d 5e 02	sta $025e			sta 	OSYEdit
.f416	ad 62 02	lda $0262			lda 	OSEditLength 				; edit point at end of line.
.f419	8d 5f 02	sta $025f			sta 	OSEditPos
.f41c	9c 60 02	stz $0260			stz 	OSEditScroll 				; no initial scrolling
.f41f	38		sec				sec 								; calculate edit box width.
.f420	ad 22 02	lda $0222			lda 	OSXSize
.f423	ed 20 02	sbc $0220			sbc 	OSXPos
.f426	3a		dec a				dec 	a 							; one forr RHS
.f427	8d 61 02	sta $0261			sta 	OSEditWidth
.f42a					OSReEnterLine:
.f42a					_OSForceUpdate:
.f42a	38		sec				sec 								; force repaint.
.f42b	20 f2 f4	jsr $f4f2			jsr 	OSEUpdatePosition 			; update the position.
.f42e					_OSEditLoop:
.f42e	20 77 f5	jsr $f577			jsr 	OSEPositionCursor
.f431	20 3a f1	jsr $f13a			jsr 	OSReadKeystroke 			; get one key.
.f434	c9 03		cmp #$03			cmp 	#3 							; down, up, esc, CR all exit
.f436	f0 0c		beq $f444			beq 	_OSEditExit
.f438	c9 06		cmp #$06			cmp 	#6
.f43a	f0 08		beq $f444			beq 	_OSEditExit
.f43c	c9 0d		cmp #$0d			cmp 	#13
.f43e	f0 04		beq $f444			beq 	_OSEditExit
.f440	c9 1b		cmp #$1b			cmp 	#27
.f442	d0 0b		bne $f44f			bne 	_OSEditContinue
.f444					_OSEditExit:
.f444	ae 62 02	ldx $0262			ldx 	OSEditLength 				; make it ASCIIZ as well (!)
.f447	9e 63 02	stz $0263,x			stz 	OSEditBuffer,x
.f44a	a2 62		ldx #$62			ldx 	#OSEditLength & $FF 		; XY = Buffer
.f44c	a0 02		ldy #$02			ldy 	#OSEditLength >> 8
.f44e	60		rts				rts
.f44f					_OSEditContinue:
.f44f	c9 01		cmp #$01			cmp 	#1 							; left (Ctrl-A)
.f451	f0 51		beq $f4a4			beq 	_OSELeft
.f453	c9 02		cmp #$02			cmp 	#2
.f455	f0 23		beq $f47a			beq 	_OSEHome
.f457	c9 04		cmp #$04			cmp 	#4 							; right (Ctrl-D)
.f459	f0 3c		beq $f497			beq 	_OSERight
.f45b	c9 07		cmp #$07			cmp 	#7 							; delete at cursor (Delete)
.f45d	f0 2b		beq $f48a			beq 	_OSEDelete
.f45f	c9 08		cmp #$08			cmp 	#8 							; backspace (<-)
.f461	f0 1f		beq $f482			beq 	_OSEBackspace
.f463	c9 09		cmp #$09			cmp 	#9 							; tab (9)
.f465	f0 4c		beq $f4b3			beq 	_OSETab
.f467	c9 20		cmp #$20			cmp 	#32 						; character code, insert it
.f469	90 c3		bcc $f42e			bcc 	_OSEditLoop
.f46b					_OSAddCharacter:
.f46b	ae 62 02	ldx $0262			ldx 	OSEditLength 				; already full ?
.f46e	e0 c0		cpx #$c0			cpx 	#OSTextBufferSize
.f470	f0 3a		beq $f4ac			beq 	_OSCheckUpdate
.f472	20 c6 f4	jsr $f4c6			jsr 	_OSEInsertCharacter 		; insert character at pos
.f475	ee 5f 02	inc $025f			inc 	OSEditPos 					; advance forward
.f478	80 b0		bra $f42a			bra 	_OSForceUpdate 				; force a repaint.
.f47a					_OSEHome:
.f47a	9c 5f 02	stz $025f			stz 	OSEditPos
.f47d	9c 60 02	stz $0260			stz 	OSEditScroll
.f480	80 a8		bra $f42a			bra 	_OSForceUpdate
.f482					_OSEBackspace:
.f482	ad 5f 02	lda $025f			lda 	OSEditPos 					; can't backspace from the start.
.f485	f0 25		beq $f4ac			beq 	_OSCheckUpdate
.f487	ce 5f 02	dec $025f			dec 	OSEditPos
.f48a					_OSEDelete:
.f48a	ad 62 02	lda $0262			lda 	OSEditLength 				; not if at far right, e.g. appending to end.
.f48d	cd 5f 02	cmp $025f			cmp 	OSEditPos
.f490	f0 1a		beq $f4ac			beq 	_OSCheckUpdate
.f492	20 df f4	jsr $f4df			jsr 	_OSEDeleteCharacter 		; delete character and repaint.
.f495	80 93		bra $f42a			bra 	_OSForceUpdate
.f497					_OSERight:
.f497	ad 5f 02	lda $025f			lda 	OSEditPos 					; if x before end then go right
.f49a	cd 62 02	cmp $0262			cmp 	OSEditLength
.f49d	f0 0d		beq $f4ac			beq 	_OSCheckUpdate
.f49f	ee 5f 02	inc $025f			inc 	OSEditPos
.f4a2	80 08		bra $f4ac			bra 	_OSCheckUpdate
.f4a4					_OSELeft:
.f4a4	ad 5f 02	lda $025f			lda 	OSEditPos 					; if x past start go left
.f4a7	f0 03		beq $f4ac			beq 	_OSCheckUpdate
.f4a9	ce 5f 02	dec $025f			dec 	OSEditPos
.f4ac					_OSCheckUpdate:
.f4ac	18		clc				clc
.f4ad	20 f2 f4	jsr $f4f2			jsr 	OSEUpdatePosition
.f4b0	4c 2e f4	jmp $f42e			jmp 	_OSEditLoop
.f4b3					_OSETab:
.f4b3	18		clc				clc
.f4b4	ad 5f 02	lda $025f			lda 	OSEditPos
.f4b7	69 08		adc #$08			adc 	#8
.f4b9	cd 62 02	cmp $0262			cmp 	OSEditLength
.f4bc	90 03		bcc $f4c1			bcc 	_OSTabOk
.f4be	ad 62 02	lda $0262			lda 	OSEditLength
.f4c1					_OSTabOk:
.f4c1	8d 5f 02	sta $025f			sta 	OSEditPos
.f4c4	80 e6		bra $f4ac			bra 	_OSCheckUpdate
.f4c6					_OSEInsertCharacter:
.f4c6	48		pha				pha 								; save character
.f4c7	ae 62 02	ldx $0262			ldx 	OSEditLength
.f4ca	e8		inx				inx
.f4cb					_OSMakeSpace:
.f4cb	ca		dex				dex
.f4cc	bd 63 02	lda $0263,x			lda 	OSEditBuffer,x
.f4cf	9d 64 02	sta $0264,x			sta 	OSEditBuffer+1,x
.f4d2	ec 5f 02	cpx $025f			cpx 	OSEditPos
.f4d5	d0 f4		bne $f4cb			bne 	_OSMakeSpace
.f4d7	68		pla				pla
.f4d8	9d 63 02	sta $0263,x			sta 	OSEditBuffer,x
.f4db	ee 62 02	inc $0262			inc 	OSEditLength
.f4de	60		rts				rts
.f4df					_OSEDeleteCharacter:
.f4df	ae 5f 02	ldx $025f			ldx 	OSEditPos
.f4e2					_OSERemove:
.f4e2	bd 64 02	lda $0264,x			lda 	OSEditBuffer+1,x
.f4e5	9d 63 02	sta $0263,x			sta 	OSEditBuffer,x
.f4e8	e8		inx				inx
.f4e9	ec 62 02	cpx $0262			cpx 	OSEditLength
.f4ec	90 f4		bcc $f4e2			bcc 	_OSERemove
.f4ee	ce 62 02	dec $0262			dec 	OSEditLength
.f4f1	60		rts				rts
.f4f2					OSEUpdatePosition:
.f4f2	08		php				php 								; save repaint flag.
.f4f3	ad 60 02	lda $0260			lda 	OSEditScroll 				; save old edit scroll position.
.f4f6	48		pha				pha
.f4f7	20 0d f5	jsr $f50d			jsr 	OSECheckPosition 			; check position in range of text
.f4fa	20 24 f5	jsr $f524			jsr 	OSECheckVisible 			; is it on screen ?
.f4fd	68		pla				pla 								; has the edit scroll position changed ?
.f4fe	cd 60 02	cmp $0260			cmp 	OSEditScroll
.f501	f0 03		beq $f506			beq 	_OSECVNoChange
.f503	28		plp				plp 								; if so, set repaint flag
.f504	38		sec				sec
.f505	08		php				php
.f506					_OSECVNoChange:
.f506	28		plp				plp	 								; do we need a repaint.
.f507	90 03		bcc $f50c			bcc 	_OSECVNoRepaint
.f509	20 4c f5	jsr $f54c			jsr 	OSERepaint
.f50c					_OSECVNoRepaint:
.f50c	60		rts				rts
.f50d					OSECheckPosition:
.f50d	ad 5f 02	lda $025f			lda 	OSEditPos 					; if position = 255 (e.g. -1) then off left.
.f510	c9 ff		cmp #$ff			cmp 	#255
.f512	d0 04		bne $f518			bne 	_OSECPNotLeft
.f514	9c 5f 02	stz $025f			stz 	OSEditPos
.f517	60		rts				rts
.f518					_OSECPNotLeft:
.f518	cd 62 02	cmp $0262			cmp 	OSEditLength 				; if >= edit length reset to edit length
.f51b	d0 06		bne $f523			bne 	_OSEPCNotRight
.f51d	ad 62 02	lda $0262			lda 	OSEditLength
.f520	8d 5f 02	sta $025f			sta 	OSEditPos
.f523					_OSEPCNotRight:
.f523	60		rts				rts
.f524					OSECheckVisible:
.f524	ad 5f 02	lda $025f			lda 	OSEditPos 					; if editpos < editscroll
.f527	cd 60 02	cmp $0260			cmp 	OSEditScroll
.f52a	b0 04		bcs $f530			bcs 	_OSENotOffLeft
.f52c	8d 60 02	sta $0260			sta 	OSEditScroll 				; then scroll at that position.
.f52f	60		rts				rts
.f530					_OSENotOffLeft:
.f530	38		sec				sec
.f531	ad 5f 02	lda $025f			lda 	OSEditPos
.f534	ed 60 02	sbc $0260			sbc 	OSEditScroll
.f537	cd 61 02	cmp $0261			cmp 	OSEditWidth
.f53a	b0 01		bcs $f53d			bcs 	_OSEOffRight
.f53c	60		rts				rts
.f53d					_OSEOffRight:
.f53d	38		sec				sec
.f53e	ad 5f 02	lda $025f			lda 	OSEditPos
.f541	ed 61 02	sbc $0261			sbc 	OSEditWidth
.f544	b0 02		bcs $f548			bcs 	_OSENoTrim
.f546	a9 00		lda #$00			lda 	#0
.f548					_OSENoTrim:
.f548	8d 60 02	sta $0260			sta 	OSEditScroll
.f54b	60		rts				rts
.f54c					OSERepaint:
.f54c	ad 5d 02	lda $025d			lda 	OSXEdit 					; reset drawing pos
.f54f	8d 20 02	sta $0220			sta 	OSXPos
.f552	ad 5e 02	lda $025e			lda 	OSYEdit
.f555	8d 21 02	sta $0221			sta 	OSYPos
.f558	ae 60 02	ldx $0260			ldx 	OSEditScroll 				; start data from here.
.f55b	ac 61 02	ldy $0261			ldy 	OSEditWidth 				; counter
.f55e					_OSERepaintLoop:
.f55e	bd 63 02	lda $0263,x			lda 	OSEditBuffer,x 				; read character from buffer
.f561	ec 62 02	cpx $0262			cpx 	OSEditLength 				; past end of buffer
.f564	90 02		bcc $f568			bcc 	_OSEOut
.f566	a9 20		lda #$20			lda 	#" "
.f568	da		phx		_OSEOut:phx 								; output character.
.f569	5a		phy				phy
.f56a	20 80 f1	jsr $f180			jsr 	OSDWritePhysical
.f56d	7a		ply				ply
.f56e	fa		plx				plx
.f56f	ee 20 02	inc $0220			inc 	OSXPos 						; next screen pos
.f572	e8		inx				inx									; next char
.f573	88		dey				dey 								; one fewer to do.
.f574	d0 e8		bne $f55e			bne 	_OSERepaintLoop
.f576	60		rts				rts
.f577					OSEPositionCursor:
.f577	38		sec				sec
.f578	ad 5f 02	lda $025f			lda 	OSEditPos
.f57b	ed 60 02	sbc $0260			sbc 	OSEditScroll
.f57e	18		clc				clc
.f57f	6d 5d 02	adc $025d			adc 	OSXEdit
.f582	8d 20 02	sta $0220			sta 	OSXPos
.f585	ad 5e 02	lda $025e			lda 	OSYEdit
.f588	8d 21 02	sta $0221			sta 	OSYPos
.f58b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/screen_editor/screeneditor.asm

.f58c					OSScreenLine:
.f58c	9c 62 02	stz $0262			stz 	OSEditLength 				; clear buffer
.f58f					_OSScreenLoop:
.f58f	20 3a f1	jsr $f13a			jsr 	OSReadKeystroke	 			; get key.
.f592	c9 10		cmp #$10			cmp 	#$10						; insert
.f594	f0 4a		beq $f5e0			beq 	_OSSInsert
.f596	c9 07		cmp #$07			cmp 	#$07 						; delete / backspace
.f598	f0 1d		beq $f5b7			beq 	_OSSDelete
.f59a	c9 08		cmp #$08			cmp 	#$08
.f59c	f0 09		beq $f5a7			beq 	_OSSBackspace
.f59e	c9 0d		cmp #$0d			cmp 	#$0D 						; Return key ?
.f5a0	f0 6f		beq $f611			beq 	_OSSReturn
.f5a2	20 21 f0	jsr $f021			jsr 	OSWriteScreen
.f5a5	80 e8		bra $f58f			bra 	_OSScreenLoop
.f5a7					_OSSBackspace:
.f5a7	ad 20 02	lda $0220			lda 	OSXPos 						; backspace blocked if first character on line
.f5aa	d0 08		bne $f5b4			bne 	_OSSBackspaceOk
.f5ac	ae 21 02	ldx $0221			ldx 	OSYPos 						; and its the start of a group.
.f5af	bd 00 02	lda $0200,x			lda 	OSNewLineFlag,x
.f5b2	d0 db		bne $f58f			bne 	_OSScreenLoop
.f5b4					_OSSBackspaceOk:
.f5b4	20 94 f6	jsr $f694			jsr 	OSSLeft 					; move left.
.f5b7					_OSSDelete:
.f5b7	20 63 f6	jsr $f663			jsr 	OSSSaveGetFrame 			; save current position and get frame.
.f5ba					_OSSDeleteLoop:
.f5ba	ad 27 02	lda $0227			lda 	OSYFrameBottom 				; reached the end
.f5bd	cd 21 02	cmp $0221			cmp 	OSYPos
.f5c0	90 11		bcc $f5d3			bcc 	_OSSDelComplete
.f5c2	20 a6 f6	jsr $f6a6			jsr 	OSSRight 					; shuffle everything
.f5c5	20 7a f1	jsr $f17a			jsr 	OSDReadPhysical
.f5c8	20 94 f6	jsr $f694			jsr 	OSSLeft
.f5cb	20 80 f1	jsr $f180			jsr 	OSDWritePhysical
.f5ce	20 a6 f6	jsr $f6a6			jsr 	OSSRight
.f5d1	80 e7		bra $f5ba			bra 	_OSSDeleteLoop
.f5d3					_OSSDelComplete:
.f5d3	20 94 f6	jsr $f694			jsr 	OSSLeft 					; blank last character
.f5d6					_OSSWriteSpace:
.f5d6	a9 20		lda #$20			lda 	#' ' 						; write space at posiition
.f5d8	20 80 f1	jsr $f180			jsr 	OSDWritePhysical
.f5db	20 56 f6	jsr $f656			jsr 	OSSLoadPosition 			; restore original pos and loop back.
.f5de	80 af		bra $f58f			bra		_OSScreenLoop
.f5e0					_OSSInsert:
.f5e0	20 63 f6	jsr $f663			jsr 	OSSSaveGetFrame 			; save current position and get frame.
.f5e3	ad 22 02	lda $0222			lda 	OSXSize 					; start insert copy is end
.f5e6	3a		dec a				dec 	a
.f5e7	8d 20 02	sta $0220			sta 	OSXPos
.f5ea	ad 27 02	lda $0227			lda 	OSYFrameBottom
.f5ed	8d 21 02	sta $0221			sta 	OSYPos
.f5f0					_OSSInsertLoop:
.f5f0	ad 20 02	lda $0220			lda 	OSXPos 						; reached insert point ?
.f5f3	cd 24 02	cmp $0224			cmp 	OSXPosSave
.f5f6	d0 08		bne $f600			bne 	_OSSShiftUp
.f5f8	ad 21 02	lda $0221			lda 	OSYPos
.f5fb	cd 25 02	cmp $0225			cmp 	OSYPosSave
.f5fe	f0 d6		beq $f5d6			beq 	_OSSWriteSpace 				; space there and continue
.f600					_OSSShiftUp:
.f600	20 94 f6	jsr $f694			jsr 	OSSLeft
.f603	20 7a f1	jsr $f17a			jsr 	OSDReadPhysical
.f606	20 a6 f6	jsr $f6a6			jsr 	OSSRight
.f609	20 80 f1	jsr $f180			jsr 	OSDWritePhysical
.f60c	20 94 f6	jsr $f694			jsr 	OSSLeft
.f60f	80 df		bra $f5f0			bra 	_OSSInsertLoop
.f611					_OSSReturn:
.f611	20 63 f6	jsr $f663			jsr 	OSSSaveGetFrame 			; save current position and get frame.
.f614	9c 20 02	stz $0220			stz 	OSXPos
.f617	ad 26 02	lda $0226			lda 	OSYFrameTop					; start position.
.f61a	8d 21 02	sta $0221			sta 	OSYPos
.f61d					_OSSRCopy:
.f61d	ad 27 02	lda $0227			lda 	OSYFrameBottom 				; reached the end
.f620	cd 21 02	cmp $0221			cmp 	OSYPos
.f623	90 11		bcc $f636			bcc 	_OSSRCopied
.f625	20 7a f1	jsr $f17a			jsr 	OSDReadPhysical
.f628	ae 62 02	ldx $0262			ldx 	OSEditLength
.f62b	9d 63 02	sta $0263,x			sta 	OSEditBuffer,x
.f62e	ee 62 02	inc $0262			inc 	OSEditLength
.f631	20 a6 f6	jsr $f6a6			jsr 	OSSRight
.f634	80 e7		bra $f61d			bra 	_OSSRCopy
.f636					_OSSRCopied:
.f636	20 94 f6	jsr $f694			jsr 	OSSLeft 					; do a CR from previous line, scroll if required.
.f639	a9 0d		lda #$0d			lda		#13
.f63b	20 21 f0	jsr $f021			jsr 	OSWriteScreen
.f63e	ae 62 02	ldx $0262			ldx 	OSEditLength 				; strip trailing spaces
.f641					_OSSSStripSpaces:
.f641	ca		dex				dex
.f642	bd 63 02	lda $0263,x			lda 	OSEditBuffer,x
.f645	c9 20		cmp #$20			cmp 	#$20
.f647	d0 08		bne $f651			bne 	_OSSSSSEnd
.f649	9e 63 02	stz $0263,x			stz 	OSEditBuffer,x
.f64c	8e 62 02	stx $0262			stx 	OSEditLength
.f64f	80 f0		bra $f641			bra 	_OSSSStripSpaces
.f651					_OSSSSSEnd:
.f651	a2 62		ldx #$62			ldx 	#OSEditLength & $FF
.f653	a0 02		ldy #$02			ldy 	#OSEditLength >> 8
.f655	60		rts				rts
.f656					OSSLoadPosition:
.f656	ae 24 02	ldx $0224			ldx 	OSXPosSave
.f659	8e 20 02	stx $0220			stx 	OSXPos
.f65c	ae 25 02	ldx $0225			ldx 	OSYPosSave
.f65f	8e 21 02	stx $0221			stx 	OSYPos
.f662	60		rts				rts
.f663					OSSSaveGetFrame:
.f663	ae 20 02	ldx $0220			ldx 	OSXPos 						; save current position
.f666	8e 24 02	stx $0224			stx 	OSXPosSave
.f669	ae 21 02	ldx $0221			ldx 	OSYPos
.f66c	8e 25 02	stx $0225			stx 	OSYPosSave
.f66f					_OSSSFindTop:
.f66f	e0 00		cpx #$00			cpx 	#0 							; top of screen
.f671	f0 08		beq $f67b			beq 	_OSSSTFound
.f673	bd 00 02	lda $0200,x			lda 	OSNewLineFlag,x  			; start of frame.
.f676	d0 03		bne $f67b			bne 	_OSSSTFound
.f678	ca		dex				dex
.f679	80 f4		bra $f66f			bra 	_OSSSFindTop
.f67b					_OSSSTFound:
.f67b	8e 26 02	stx $0226			stx 	OSYFrameTop
.f67e	ae 21 02	ldx $0221			ldx 	OSYPos
.f681					_OSSSFindBottom:
.f681	8a		txa				txa
.f682	1a		inc a				inc 	a
.f683	cd 23 02	cmp $0223			cmp 	OSYSize 					; bottom of screen
.f686	f0 08		beq $f690			beq 	_OSSSBFound
.f688	bd 01 02	lda $0201,x			lda 	OSNewLineFlag+1,x
.f68b	d0 03		bne $f690			bne 	_OSSSBFound
.f68d	e8		inx				inx
.f68e	80 f1		bra $f681			bra 	_OSSSFindBottom
.f690					_OSSSBFound:
.f690	8e 27 02	stx $0227			stx 	OSYFrameBottom
.f693	60		rts				rts
.f694					OSSLeft:
.f694	48		pha				pha
.f695	ce 20 02	dec $0220			dec 	OSXPos
.f698	10 0a		bpl $f6a4			bpl 	_OSSLExit
.f69a	ce 21 02	dec $0221			dec 	OSYPos
.f69d	ad 22 02	lda $0222			lda 	OSXSize
.f6a0	3a		dec a				dec 	a
.f6a1	8d 20 02	sta $0220			sta 	OSXPos
.f6a4					_OSSLExit:
.f6a4	68		pla				pla
.f6a5	60		rts				rts
.f6a6					OSSRight:
.f6a6	48		pha				pha
.f6a7	ee 20 02	inc $0220			inc 	OSXPos
.f6aa	ad 20 02	lda $0220			lda 	OSXPos
.f6ad	cd 22 02	cmp $0222			cmp 	OSXSize
.f6b0	d0 06		bne $f6b8			bne 	_OSSRExit
.f6b2	9c 20 02	stz $0220			stz 	OSXPos
.f6b5	ee 21 02	inc $0221			inc 	OSYPos
.f6b8					_OSSRExit:
.f6b8	68		pla				pla
.f6b9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/utility/setup.asm

.f6ba					OSInitialise:
.f6ba	a9 28		lda #$28			lda 	#40 						; 40 x 30 display
.f6bc	8d 22 02	sta $0222			sta 	OSXSize
.f6bf	a9 1e		lda #$1e			lda 	#30
.f6c1	8d 23 02	sta $0223			sta 	OSYSize
.f6c4	20 b4 f1	jsr $f1b4			jsr 	OSDClearScreen 				; clear the display
.f6c7	20 47 f2	jsr $f247			jsr 	OSDKeyboardInitialise 		; reset the keyboard state.
.f6ca	60		rts				rts
.f6cb					OSGetScreenSize:
.f6cb	ae 22 02	ldx $0222			ldx 	OSXSize
.f6ce	ac 23 02	ldy $0223			ldy 	OSYSize
.f6d1	60		rts				rts
.f6d2					OSGetScreenPosition:
.f6d2	ae 20 02	ldx $0220			ldx 	OSXPos
.f6d5	ac 21 02	ldy $0221			ldy 	OSYPos
.f6d8	60		rts				rts
.f6d9					OSCheckBreak:
.f6d9	ad 5b 02	lda $025b			lda 	OSEscapePressed
.f6dc	60		rts				rts

;******  Return to file: include.files


;******  Return to file: osrom.asm


;******  Processing file: build/libwwfslib.asmlib

.f6dd					FSReadNextHeader:
.f6dd	ee 46 03	inc $0346			inc 	currentSector 				; bump last sector and read next one.
.f6e0	ad 46 03	lda $0346			lda 	currentSector
.f6e3					FSReadHeaderA:
.f6e3	c9 00		cmp #$00			cmp 	#0 							; sector 0 always okay.
.f6e5	f0 05		beq $f6ec			beq 	_FSIsOk
.f6e7	cd 44 03	cmp $0344			cmp 	sectorCount 				; check legitimate sector
.f6ea	b0 22		bcs $f70e			bcs 	_FSReadHFail
.f6ec					_FSIsOk:
.f6ec	da		phx				phx
.f6ed	8d 46 03	sta $0346			sta 	currentSector 				; save as current
.f6f0	a2 49		ldx #$49			ldx 	#sectorHeader & $FF 		; target address.
.f6f2	86 20		stx $20				stx 	iTemp0
.f6f4	a2 03		ldx #$03			ldx 	#sectorHeader >> 8
.f6f6	86 21		stx $21				stx 	iTemp0+1
.f6f8	a2 00		ldx #$00			ldx 	#0 							; subpage 0
.f6fa	a0 20		ldy #$20			ldy 	#32 						; first 32 bytes only.
.f6fc	20 05 f9	jsr $f905			jsr 	FSHRead 					; read the sector into memory
.f6ff	fa		plx				plx
.f700	ad 4d 03	lda $034d			lda 	shFileSize 					; copy file size - makes easily accessible
.f703	8d 69 03	sta $0369			sta 	shFileSizeCopy 				; for directory function.
.f706	ad 4e 03	lda $034e			lda 	shFileSize+1
.f709	8d 6a 03	sta $036a			sta 	shFileSizeCopy+1
.f70c	18		clc				clc
.f70d	60		rts				rts
.f70e					_FSReadHFail:
.f70e	38		sec				sec
.f70f	60		rts				rts
.f710					OSReadFile:
.f710	86 22		stx $22				stx 	fsBlock 					; file block.
.f712	84 23		sty $23				sty 	fsBlock+1
.f714	9c 46 03	stz $0346			stz 	currentSector
.f717	a9 ff		lda #$ff			lda 	#$FF 						; set flag to $FF
.f719	8d 48 03	sta $0348			sta 	successFlag
.f71c					_OSReadLoop1:
.f71c	20 dd f6	jsr $f6dd			jsr 	FSReadNextHeader 			; read header ?
.f71f	b0 32		bcs $f753			bcs 	_OSReadExit 				; end of search.
.f721	ad 49 03	lda $0349			lda 	shFirstNext 				; is it the (F)irst record
.f724	c9 46		cmp #$46			cmp 	#"F"
.f726	d0 f4		bne $f71c			bne 	_OSReadLoop1
.f728	20 a6 f8	jsr $f8a6			jsr 	FSCompareFileNames 			; is it F/N and matching.
.f72b	90 ef		bcc $f71c			bcc 	_OSReadLoop1 				; no, try next sector
.f72d	9c 48 03	stz $0348			stz 	successFlag 				; zero when found file.
.f730					_OSReadBlock:
.f730	ad 46 03	lda $0346			lda 	currentSector
.f733	20 57 f7	jsr $f757			jsr 	FSReadData 					; read the data file in.
.f736	ad 4a 03	lda $034a			lda 	shContinue 					; continuation ?
.f739	c9 4e		cmp #$4e			cmp 	#"N" 						; exit if no.
.f73b	f0 16		beq $f753			beq 	_OSReadExit
.f73d					_OSReadLoop2:
.f73d	ad 46 03	lda $0346			lda 	currentSector
.f740	20 dd f6	jsr $f6dd			jsr 	FSReadNextHeader 			; read header ?
.f743	b0 0e		bcs $f753			bcs 	_OSReadExit 				; end of search.
.f745	ad 49 03	lda $0349			lda 	shFirstNext 				; is it the (F)irst record
.f748	c9 4e		cmp #$4e			cmp 	#"N"
.f74a	d0 f1		bne $f73d			bne 	_OSReadLoop2
.f74c	20 a6 f8	jsr $f8a6			jsr 	FSCompareFileNames 			; is it F/N and matching.
.f74f	90 ec		bcc $f73d			bcc 	_OSReadLoop2 				; no, try next sector
.f751	80 dd		bra $f730			bra 	_OSReadBlock 				; read block in.
.f753					_OSReadExit:
.f753	0e 48 03	asl $0348			asl 	successFlag					; shift success flag (0 if done) into carry
.f756	60		rts				rts
.f757					FSReadData:
.f757	ad 46 03	lda $0346			lda 	currentSector
.f75a					_FSReadHLoop:
.f75a					_FSRDCopy:
.f75a					_OSRDNoBorrow:
.f75a	20 62 f7	jsr $f762			jsr 	FSIncrementSetLoad 			; load address to iTemp0 and increment it.
.f75d	92 20		sta ($20)			sta 	(iTemp0)
.f75f	80 f9		bra $f75a			bra 	_FSRDCopy 					; go round again.
.f761					_OSRDExit:
.f761	60		rts				rts
.f762					FSIncrementSetLoad:
.f762	18		clc				clc
.f763	a0 02		ldy #$02			ldy 	#2 							; increment load address
.f765	b1 22		lda ($22),y			lda 	(fsBlock),y  				; copying previous to iTemp0
.f767	85 20		sta $20				sta 	iTemp0
.f769	69 01		adc #$01			adc 	#1
.f76b	91 22		sta ($22),y			sta 	(fsBlock),y
.f76d	c8		iny				iny
.f76e	b1 22		lda ($22),y			lda 	(fsBlock),y
.f770	85 21		sta $21				sta 	iTemp0+1
.f772	69 00		adc #$00			adc 	#0
.f774	91 22		sta ($22),y			sta 	(fsBlock),y
.f776	60		rts				rts
.f777					OSWriteFile:
.f777	86 22		stx $22				stx 	fsBlock 					; file block.
.f779	84 23		sty $23				sty 	fsBlock+1
.f77b	20 81 f8	jsr $f881			jsr 	OSDeleteFile 				; delete file if it already exists.
.f77e	9c 46 03	stz $0346			stz 	currentSector
.f781	9c 6b 03	stz $036b			stz 	notFirstSector 				; clear "not first sector" (e.g. is first sector)
.f784	38		sec				sec 								; work out bytes per sector available.
.f785	e9 20		sbc #$20			sbc 	#32
.f787	8d 6c 03	sta $036c			sta 	sectorCapacity
.f78a	e9 00		sbc #$00			sbc 	#0
.f78c	8d 6d 03	sta $036d			sta 	sectorCapacity+1
.f78f	a0 04		ldy #$04			ldy 	#4 							; copy the size of the data to write to
.f791	b1 22		lda ($22),y			lda 	(fsBlock),y 				; the remaining size variable.
.f793	8d 6e 03	sta $036e			sta 	fileRemainingSize
.f796	c8		iny				iny
.f797	b1 22		lda ($22),y			lda 	(fsBlock),y
.f799	8d 6f 03	sta $036f			sta 	fileRemainingSize+1
.f79c					_OSWriteLoop:
.f79c	ad 44 03	lda $0344			lda 	sectorCount  				; so we count incase we are full.
.f79f	85 20		sta $20				sta 	iTemp0
.f7a1					_OSFindUnused:
.f7a1	c6 20		dec $20				dec 	iTemp0 						; done a full lap, no empty slots
.f7a3	f0 2e		beq $f7d3			beq 	_OSWriteFail
.f7a5	20 dd f6	jsr $f6dd			jsr 	FSReadNextHeader 			; read next header
.f7a8	ad 49 03	lda $0349			lda 	shFirstNext 				; check F, N , I
.f7ab	c9 49		cmp #$49			cmp 	#"I"
.f7ad	f0 f2		beq $f7a1			beq 	_OSFindUnused
.f7af	c9 4e		cmp #$4e			cmp 	#"N"
.f7b1	f0 ee		beq $f7a1			beq 	_OSFindUnused
.f7b3	c9 46		cmp #$46			cmp 	#"F"
.f7b5	f0 ea		beq $f7a1			beq 	_OSFindUnused
.f7b7	ad 46 03	lda $0346			lda 	currentSector 				; erase sector
.f7ba	20 fc f8	jsr $f8fc			jsr 	FSHErase
.f7bd	ad 46 03	lda $0346			lda 	currentSector 				; open for write.
.f7c0	20 d8 f7	jsr $f7d8			jsr 	FSWriteCreateHeader 		; create header
.f7c3	20 43 f8	jsr $f843			jsr 	FSWriteSendData 			; send the data
.f7c6	ce 6b 03	dec $036b			dec 	notFirstSector 				; set not first sector state.
.f7c9	ad 6e 03	lda $036e			lda 	fileRemainingSize 			; check there is more to save, if not then exit.
.f7cc	0d 6f 03	ora $036f			ora 	fileRemainingSize+1
.f7cf	d0 cb		bne $f79c			bne		_OSWriteLoop
.f7d1	18		clc				clc
.f7d2	60		rts				rts
.f7d3					_OSWriteFail:
.f7d3	20 81 f8	jsr $f881			jsr 	OSDeleteFile 				; delete any parts of the file.
.f7d6	38		sec				sec 								; return error
.f7d7	60		rts				rts
.f7d8					FSWriteCreateHeader:
.f7d8	a9 4e		lda #$4e			lda 	#"N"						; first or next ?
.f7da	ae 6b 03	ldx $036b			ldx 	notFirstSector
.f7dd	d0 02		bne $f7e1			bne 	_FSWCNotNext
.f7df	a9 46		lda #$46			lda 	#"F"
.f7e1					_FSWCNotNext:
.f7e1	ae 6e 03	ldx $036e			ldx 	fileRemainingSize 			; XY is the number of bytes.
.f7e4	ac 6f 03	ldy $036f			ldy 	fileRemainingSize+1
.f7e7	ec 6c 03	cpx $036c			cpx 	sectorCapacity 				; compare fileRemaining vs sectorCapacity
.f7ea	98		tya				tya
.f7eb	ed 6d 03	sbc $036d			sbc 	sectorCapacity+1
.f7ee	90 06		bcc $f7f6			bcc 	_FSNotFull
.f7f0	ae 6c 03	ldx $036c			ldx 	sectorCapacity 				; if remaining >= capacity ... use capacity
.f7f3	ac 6d 03	ldy $036d			ldy 	sectorCapacity+1
.f7f6					_FSNotFull:
.f7f6	8e 70 03	stx $0370			stx 	bytesToWrite
.f7f9	8c 71 03	sty $0371			sty 	bytesToWrite+1
.f7fc	a9 59		lda #$59			lda 	#"Y"
.f7fe	ec 6e 03	cpx $036e			cpx 	fileRemainingSize
.f801	d0 07		bne $f80a			bne 	_FSNotAll
.f803	cc 6f 03	cpy $036f			cpy 	fileRemainingSize+1
.f806	d0 02		bne $f80a			bne 	_FSNotAll
.f808	a9 4e		lda #$4e			lda 	#"N"
.f80a					_FSNotAll:
.f80a	8a		txa				txa 								; +2,+3 (data to send out)
.f80b	98		tya				tya
.f80c	a0 04		ldy #$04			ldy 	#4
.f80e	b1 22		lda ($22),y			lda 	(fsBlock),y
.f810	20 11 f9	jsr $f911			jsr 	FSHWrite
.f813	c8		iny				iny
.f814	b1 22		lda ($22),y			lda 	(fsBlock),y
.f816	a2 0a		ldx #$0a			ldx		#10 						; output 10 blanks
.f818					_FSWCBlanks:
.f818	a9 ff		lda #$ff			lda 	#$FF
.f81a	ca		dex				dex
.f81b	d0 fb		bne $f818			bne 	_FSWCBlanks
.f81d	a0 01		ldy #$01			ldy 	#1
.f81f	b1 22		lda ($22),y			lda 	(fsBlock),y
.f821	85 21		sta $21				sta 	iTemp0+1
.f823	b2 22		lda ($22)			lda 	(fsBlock)
.f825	85 20		sta $20				sta 	iTemp0
.f827	b2 20		lda ($20)			lda 	(iTemp0) 					; output length, also => X
.f829	aa		tax				tax
.f82a	20 11 f9	jsr $f911			jsr 	FSHWrite
.f82d					_FSOutName:
.f82d	ca		dex				dex
.f82e	30 08		bmi $f838			bmi 	_FSNameDone
.f830	b1 20		lda ($20),y			lda 	(iTemp0),y
.f832	c8		iny				iny
.f833	20 11 f9	jsr $f911			jsr 	FSHWrite
.f836	80 f5		bra $f82d			bra 	_FSOutName
.f838					_FSNameDone:
.f838	a9 ff		lda #$ff			lda 	#$FF
.f83a	20 11 f9	jsr $f911			jsr 	FSHWrite
.f83d	c8		iny				iny
.f83e	c0 10		cpy #$10			cpy 	#16
.f840	d0 f6		bne $f838			bne 	_FSNameDone
.f842	60		rts				rts
.f843					FSWriteSendData:
.f843	ad 70 03	lda $0370			lda 	bytesToWrite 				; complete
.f846	0d 71 03	ora $0371			ora 	bytesToWrite+1
.f849	f0 1d		beq $f868			beq 	_FSWSDExit
.f84b	20 62 f7	jsr $f762			jsr 	FSIncrementSetLoad 			; bump address, copy original to iTemp0
.f84e	b2 20		lda ($20)			lda 	(iTemp0)
.f850	ad 70 03	lda $0370			lda 	bytesToWrite 				; decrement bytes to write counter
.f853	d0 03		bne $f858			bne 	_FSWSDNoBorrow
.f855	ce 71 03	dec $0371			dec 	bytesToWrite+1
.f858					_FSWSDNoBorrow:
.f858	ce 70 03	dec $0370			dec 	bytesToWrite
.f85b	ad 6e 03	lda $036e			lda 	fileRemainingSize 			; decrement remaining size.
.f85e	d0 03		bne $f863			bne 	_FSWSDNoBorrow2
.f860	ce 6f 03	dec $036f			dec 	fileRemainingSize+1
.f863					_FSWSDNoBorrow2:
.f863	ce 6e 03	dec $036e			dec 	fileRemainingSize
.f866	80 db		bra $f843			bra 	FSWriteSendData
.f868					_FSWSDExit:
.f868	60		rts				rts
.f869					OSReadDirectory:
.f869	b0 12		bcs $f87d			bcs 	_OSRDReset
.f86b					_OSRDLoop:
.f86b	20 dd f6	jsr $f6dd			jsr 	FSReadNextHeader 			; read next sector header.
.f86e	b0 10		bcs $f880			bcs 	_OSRDExit 					; exit, end of file space, CS
.f870	ad 49 03	lda $0349			lda 	shFirstNext 				; is it an 'F' record
.f873	c9 46		cmp #$46			cmp 	#'F'
.f875	d0 f4		bne $f86b			bne 	_OSRDLoop
.f877	a2 59		ldx #$59			ldx 	#shNameLength & $FF 		; return the buffer address
.f879	a0 03		ldy #$03			ldy 	#shNameLength >> 8
.f87b	18		clc				clc 								; return with carry clear.
.f87c	60		rts				rts
.f87d					_OSRDReset:
.f87d	9c 46 03	stz $0346			stz 	currentSector 				; back to the start.
.f880					_OSRDExit:
.f880	60		rts				rts
.f881					OSDeleteFile:
.f881	86 22		stx $22				stx 	fsBlock 					; file block.
.f883	84 23		sty $23				sty 	fsBlock+1
.f885	9c 46 03	stz $0346			stz 	currentSector
.f888	a9 ff		lda #$ff			lda 	#$FF 						; set flag to $FF
.f88a	8d 48 03	sta $0348			sta 	successFlag
.f88d					_OSDeleteLoop:
.f88d	20 dd f6	jsr $f6dd			jsr 	FSReadNextHeader 			; read header ?
.f890	b0 10		bcs $f8a2			bcs 	_OSDeleteExit 				; end of search.
.f892	20 a6 f8	jsr $f8a6			jsr 	FSCompareFileNames 			; is it F/N and matching.
.f895	90 f6		bcc $f88d			bcc 	_OSDeleteLoop 				; no, try next sector
.f897	ad 46 03	lda $0346			lda 	currentSector 				; yes, then erase this sector
.f89a	20 fc f8	jsr $f8fc			jsr 	FSHErase
.f89d	9c 48 03	stz $0348			stz 	successFlag 				; zero if successful
.f8a0	80 eb		bra $f88d			bra 	_OSDeleteLoop
.f8a2					_OSDeleteExit:
.f8a2	0e 48 03	asl $0348			asl 	successFlag					; shift success flag (0 if done) into carry
.f8a5	60		rts				rts
.f8a6					FSCompareFileNames:
.f8a6	ad 49 03	lda $0349			lda 	shFirstNext 				; is it F/N type ?
.f8a9	c9 46		cmp #$46			cmp 	#"F"
.f8ab	f0 04		beq $f8b1			beq 	_FSDeleteCheckName
.f8ad	c9 4e		cmp #$4e			cmp 	#"N"
.f8af	d0 19		bne $f8ca			bne 	_FSCompareFail 				; no, then compare fails.
.f8b1					_FSDeleteCheckName:
.f8b1	a0 01		ldy #$01			ldy 	#1 							; copy filename to iTemp0
.f8b3	b2 22		lda ($22)			lda 	(fsBlock)
.f8b5	85 20		sta $20				sta 	iTemp0
.f8b7	b1 22		lda ($22),y			lda 	(fsBlock),y
.f8b9	85 21		sta $21				sta 	iTemp0+1
.f8bb	b2 20		lda ($20)			lda 	(iTemp0) 					; compare n+1
.f8bd	a8		tay				tay
.f8be					_FSCompareName:
.f8be	b9 59 03	lda $0359,y			lda 	shNameLength,y
.f8c1	d1 20		cmp ($20),y			cmp 	(iTemp0),y
.f8c3	d0 05		bne $f8ca			bne 	_FSCompareFail
.f8c5	88		dey				dey
.f8c6	10 f6		bpl $f8be			bpl 	_FSCompareName
.f8c8	38		sec				sec
.f8c9	60		rts				rts
.f8ca					_FSCompareFail:
.f8ca	18		clc				clc
.f8cb	60		rts				rts
.f8cc					OSFormatFlash:
.f8cc	da		phx				phx 								; save sector count
.f8cd	48		pha				pha									; save parameters.
.f8ce	5a		phy				phy
.f8cf	da		phx				phx
.f8d0	a9 00		lda #$00			lda 	#0 							; erase sector zero
.f8d2	20 fc f8	jsr $f8fc			jsr 	FSHErase
.f8d5	20 e4 f8	jsr $f8e4			jsr 	FSInitialise 				; re-initialise the file system.
.f8d8	68		pla				pla 								; count of sectors.
.f8d9					_OSFFErase:
.f8d9	3a		dec a				dec 	a 							; last sector and backwards
.f8da	48		pha				pha 								; erase it saving A
.f8db	20 fc f8	jsr $f8fc			jsr 	FSHErase
.f8de	68		pla				pla
.f8df	c9 01		cmp #$01			cmp 	#1 							; don't erase sector 0
.f8e1	d0 f6		bne $f8d9			bne 	_OSFFErase
.f8e3	60		rts				rts
.f8e4					FSInitialise:
.f8e4	9c 44 03	stz $0344			stz 	sectorCount 				; initial values to read $00
.f8e7	9c 45 03	stz $0345			stz 	sectorCount+1
.f8ea	a9 00		lda #$00			lda 	#0 							; read header sector 0
.f8ec	20 e3 f6	jsr $f6e3			jsr 	FSReadHeaderA
.f8ef	ad 4b 03	lda $034b			lda 	sectorHeader+2 				; copy sector count
.f8f2	8d 44 03	sta $0344			sta 	sectorCount
.f8f5	ad 4c 03	lda $034c			lda 	sectorHeader+3
.f8f8	8d 45 03	sta $0345			sta 	sectorCount+1
.f8fb	60		rts				rts
.f8fc					FSHErase:
.f8fc	8d 11 cf	sta $cf11			sta 	$CF11 						; sector number.
.f8ff	a9 00		lda #$00			lda 	#0 							; erase command
.f901	8d 10 cf	sta $cf10			sta 	$CF10
.f904	60		rts				rts
.f905					FSHRead:
.f905	8c 15 cf	sty $cf15			sty 	$CF15 						; byte count
.f908	20 1a f9	jsr $f91a			jsr 	FSHSetup 					; setup sector and address
.f90b	a9 01		lda #$01			lda 	#1
.f90d	8d 10 cf	sta $cf10			sta 	$CF10 						; read command.
.f910	60		rts				rts
.f911					FSHWrite:
.f911	20 1a f9	jsr $f91a			jsr 	FSHSetup 					; setup sector and address
.f914	a9 02		lda #$02			lda 	#2
.f916	8d 10 cf	sta $cf10			sta 	$CF10 						; write command.
.f919	60		rts				rts
.f91a					FSHSetup:
.f91a	8d 11 cf	sta $cf11			sta 	$CF11 						; sector/subpage
.f91d	8e 12 cf	stx $cf12			stx 	$CF12
.f920	a5 20		lda $20				lda 	iTemp0
.f922	8d 13 cf	sta $cf13			sta 	$CF13 						; copy data
.f925	a5 21		lda $21				lda 	iTemp0+1
.f927	8d 14 cf	sta $cf14			sta 	$CF14
.f92a	60		rts				rts

;******  Return to file: osrom.asm

.f92b					MainPrompt:
>f92b	66						.byte 	_MPEnd-MainPrompt-1
>f92c	0c 2a 2a 2a 20 4f 4c 49				.text 	12,"*** OLIMEX Neo6502 RetroComputer ***",13,13
>f934	4d 45 58 20 4e 65 6f 36 35 30 32 20 52 65 74 72
>f944	6f 43 6f 6d 70 75 74 65 72 20 2a 2a 2a 0d 0d
>f953	42 65 74 61 20 32 20 43				.text 	"Beta 2 Code Complete",13,13
>f95b	6f 64 65 20 43 6f 6d 70 6c 65 74 65 0d 0d
>f969	50 6c 65 61 73 65 20 72				.text 	"Please report bugs: paul@robsons.org.uk",13,13
>f971	65 70 6f 72 74 20 62 75 67 73 3a 20 70 61 75 6c
>f981	40 72 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75 6b 0d
>f991	0d
.f992					_MPEnd:

;******  Processing file: src/generated/vectors.asmx

.ffca	4c 69 f8	jmp $f869		jmp		OSReadDirectory          ; Read file directory.
.ffcd	4c 81 f8	jmp $f881		jmp		OSDeleteFile             ; Delete file
.ffd0	4c 10 f7	jmp $f710		jmp		OSReadFile               ; Read file into memory
.ffd3	4c 77 f7	jmp $f777		jmp		OSWriteFile              ; Write file from memory
.ffd6	4c cc f8	jmp $f8cc		jmp		OSFormatFlash            ; Format drive
.ffd9	4c d2 f6	jmp $f6d2		jmp		OSGetScreenPosition      ; Screen position to XY
.ffdc	4c cb f6	jmp $f6cb		jmp		OSGetScreenSize          ; Get size of screen to XY
.ffdf	4c 5b f1	jmp $f15b		jmp		OSWriteString            ; Write length prefixed string YX to screen
.ffe2	4c f6 f3	jmp $f3f6		jmp		OSEnterLine              ; Edit line, return line in YX length prefixed, backspace only editing.
.ffe5	4c 8c f5	jmp $f58c		jmp		OSScreenLine             ; Edit line, return line in YX length prefixed, full screen editing.
.ffe8	4c d1 f1	jmp $f1d1		jmp		OSKeyboardDataProcess    ; Keyboard update process.
.ffeb	4c d9 f6	jmp $f6d9		jmp		OSCheckBreak             ; NZ if ESC pressed.
.ffee	4c 0e f1	jmp $f10e		jmp		OSIsKeyAvailable         ; Check if key available (CS if so)
.fff1	4c 3a f1	jmp $f13a		jmp		OSReadKeystroke          ; Read A from keyboard, display cursor, wait for key.
.fff4	4c 18 f1	jmp $f118		jmp		OSReadKeyboard           ; Read A from keyboard, CC = success, CS = no key
.fff7	4c 21 f0	jmp $f021		jmp		OSWriteScreen            ; Write A to screen, CC = success

;******  Return to file: osrom.asm

>fffa	10 f0						.word 	NoInt 						; NMI
>fffc	00 f0						.word 	Boot 						; Reset
>fffe	10 f0						.word 	NoInt						; IRQ

;******  End of listing
