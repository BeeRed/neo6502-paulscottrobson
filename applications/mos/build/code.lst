
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/osrom.bin osrom.asm
; Thu May 25 22:07:46 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: osrom.asm


;******  Processing file: ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: osrom.asm

.f800	20 8d fb	jsr $fb8d	Boot:	jsr 	OSInitialise 				; set everything up.
.f803					h2:
.f803	20 73 f8	jsr $f873			jsr 	OSKeyboardDataProcess 		; this scans the keyboard, could be interrupt
.f806	20 bf fa	jsr $fabf			jsr 	OSReadKeyboard
.f809	b0 f8		bcs $f803			bcs 	h2
.f80b	20 e6 fa	jsr $fae6			jsr 	OSWriteScreen
.f80e	20 a5 fb	jsr $fba5			jsr 	OSTWriteHex
.f811	a9 20		lda #$20			lda 	#' '
.f813	20 e6 fa	jsr $fae6			jsr 	OSWriteScreen
.f816	80 eb		bra $f803			bra 	h2
.f818					NoInt:
.f818	40		rti				rti

;******  Processing file: include.files


;******  Processing file: src/drivers/charwrite.asm

.f819					OSReadPhysical:
.f819	20 27 f8	jsr $f827			jsr 	OSGetAddress
.f81c	b2 08		lda ($08)			lda 	(rTemp0)
.f81e	60		rts				rts
.f81f					OSWritePhysical:
.f81f	48		pha				pha
.f820	20 27 f8	jsr $f827			jsr 	OSGetAddress
.f823	68		pla				pla
.f824	92 08		sta ($08)			sta 	(rTemp0)
.f826	60		rts				rts
.f827					OSGetAddress:
.f827	ac 01 02	ldy $0201	        ldy     OSYPos
.f82a	ae 00 02	ldx $0200	        ldx 	OSXPos
.f82d					OSGetAddressXY:
.f82d	ad 02 02	lda $0202	        lda     OSXSize
.f830	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.f831	85 08		sta $08		        sta     rTemp0
.f833	84 09		sty $09		        sty     rTemp0+1
.f835	a9 00		lda #$00	        lda     #0
.f837	a0 08		ldy #$08	        ldy     #8
.f839					_IFMLoop:
.f839	90 03		bcc $f83e	        bcc     _IFMNoAdd
.f83b	18		clc		        clc
.f83c	65 09		adc $09		        adc     rTemp0+1
.f83e					_IFMNoAdd:
.f83e	6a		ror a		        ror     a
.f83f	66 08		ror $08		        ror     rTemp0                    ; pull another bit out for the next iteration
.f841	88		dey		        dey
.f842	d0 f5		bne $f839	        bne     _IFMLoop
.f844	09 c0		ora #$c0	        ora 	#$C0
.f846	a8		tay		        tay
.f847	18		clc		        clc
.f848	8a		txa		        txa
.f849	65 08		adc $08		        adc 	rTemp0
.f84b	85 08		sta $08		        sta 	rTemp0
.f84d	90 01		bcc $f850	        bcc 	_IFMNoCarry
.f84f	c8		iny		        iny
.f850					_IFMNoCarry:
.f850	84 09		sty $09				sty 	rTemp0+1
.f852	60		rts		        rts

;******  Return to file: include.files


;******  Processing file: src/drivers/clear.asm

.f853					OSClearScreen:
.f853	a9 c0		lda #$c0			lda 	#$C0 						; set screen pos.
.f855	85 09		sta $09				sta 	rTemp0+1
.f857	64 08		stz $08				stz 	rTemp0
.f859	ac 03 02	ldy $0203			ldy 	OSYSize 					; clear height * width bytes.
.f85c					_OSCSLoop1:
.f85c	ae 02 02	ldx $0202			ldx 	OSXSize
.f85f					_OSCSLoop2:
.f85f	a9 20		lda #$20			lda 	#' '
.f861	92 08		sta ($08)			sta 	(rTemp0)
.f863	e6 08		inc $08				inc 	rTemp0
.f865	d0 02		bne $f869			bne 	_OSCSNoCarry
.f867	e6 09		inc $09				inc 	rTemp0+1
.f869					_OSCSNoCarry:
.f869	ca		dex				dex
.f86a	d0 f3		bne $f85f			bne 	_OSCSLoop2
.f86c	88		dey				dey
.f86d	d0 ed		bne $f85c			bne 	_OSCSLoop1
.f86f	20 86 fb	jsr $fb86			jsr 	OSHomeCursor 				; cursor to (0,0)
.f872	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/ps2keyboard.asm

.f873					OSKeyboardDataProcess:
.f873	ad 00 cf	lda $cf00			lda 	$CF00 						; read keyboard port
.f876	f0 31		beq $f8a9			beq 	_OSKExit 					; no events available.
.f878	c9 f0		cmp #$f0			cmp 	#$F0 						; check key up ?
.f87a	f0 2a		beq $f8a6			beq 	_OSKUp
.f87c	c9 e0		cmp #$e0			cmp 	#$E0 						; check extended scancode ?
.f87e	f0 1f		beq $f89f			beq 	_OSKShift
.f880	0d 36 02	ora $0236			ora 	OSIsKeyShift 				; actual key code.
.f883	48		pha				pha
.f884	20 aa f8	jsr $f8aa			jsr 	OSKeyboardUpdateBits 		; update the up/down bits
.f887	68		pla				pla
.f888	ae 35 02	ldx $0235			ldx 	OSIsKeyUp 					; if key up reset up and shift flags.
.f88b	f0 08		beq $f895			beq 	_OSKInsertQueue 			; if key down insert into queue
.f88d	9c 35 02	stz $0235			stz 	OSIsKeyUp
.f890	9c 36 02	stz $0236			stz 	OSIsKeyShift
.f893	80 14		bra $f8a9			bra 	_OSKExit
.f895					_OSKInsertQueue:
.f895	20 42 f9	jsr $f942			jsr 	OSTranslateToASCII 			; convert to ASCII
.f898	b0 0f		bcs $f8a9			bcs 	_OSKExit 					; carry set, exit
.f89a	20 d3 f8	jsr $f8d3			jsr 	OSInsertKeyboardQueue
.f89d	80 0a		bra $f8a9			bra 	_OSKExit
.f89f					_OSKShift:
.f89f	a9 80		lda #$80			lda 	#$80
.f8a1	8d 36 02	sta $0236			sta 	OSIsKeyShift
.f8a4	80 03		bra $f8a9			bra 	_OSKExit
.f8a6					_OSKUp:
.f8a6	ce 35 02	dec $0235			dec 	OSIsKeyUp 					; received $F0 (key up)
.f8a9					_OSKExit:
.f8a9	60		rts				rts
.f8aa					OSKeyboardUpdateBits:
.f8aa	a2 00		ldx #$00			ldx 	#0 							; offset in table
.f8ac					_OSKUCalculate:
.f8ac	c9 08		cmp #$08			cmp 	#8 							; work out the row
.f8ae	90 06		bcc $f8b6			bcc 	_OSKUHaveRow
.f8b0	e8		inx				inx
.f8b1	38		sec				sec
.f8b2	e9 08		sbc #$08			sbc 	#8
.f8b4	80 f6		bra $f8ac			bra 	_OSKUCalculate
.f8b6					_OSKUHaveRow:
.f8b6	a8		tay				tay 								; work out the column
.f8b7	a9 00		lda #$00			lda 	#0
.f8b9	38		sec				sec
.f8ba					_OSKUCalculate2:
.f8ba	2a		rol a				rol 	a
.f8bb	88		dey				dey
.f8bc	10 fc		bpl $f8ba			bpl 	_OSKUCalculate2  			; at end , A is bitmask, X is row (table entry)
.f8be	2c 35 02	bit $0235			bit 	OSIsKeyUp 					; check up
.f8c1	30 07		bmi $f8ca			bmi 	_OSKUUp
.f8c3	1d 04 02	ora $0204,x			ora 	OSKeyStatus,x 				; down set bit
.f8c6	9d 04 02	sta $0204,x			sta 	OSKeyStatus,x
.f8c9	60		rts				rts
.f8ca					_OSKUUp:
.f8ca	49 ff		eor #$ff			eor 	#$FF 						; make maske
.f8cc	3d 04 02	and $0204,x			and 	OSKeyStatus,x 				; up clear bit
.f8cf	9d 04 02	sta $0204,x			sta 	OSKeyStatus,x
.f8d2	60		rts				rts
.f8d3					OSInsertKeyboardQueue:
.f8d3	ae 34 02	ldx $0234			ldx 	OSKeyboardQueueSize 		; check to see if full
.f8d6	e0 10		cpx #$10			cpx	 	#OSKeyboardQueueMaxSize
.f8d8	b0 06		bcs $f8e0			bcs 	_OSIKQExit
.f8da	9d 24 02	sta $0224,x			sta 	OSKeyboardQueue,x 			; add keyboard entry to queue.
.f8dd	ee 34 02	inc $0234			inc 	OSKeyboardQueueSize
.f8e0					_OSIKQExit:
.f8e0	60		rts				rts
.f8e1					OSKeyboardInitialise:
.f8e1	a2 32		ldx #$32			ldx 	#OSIsKeyShift-OSKeyStatus
.f8e3					_OSKILoop:
.f8e3	9e 04 02	stz $0204,x			stz 	OSKeyStatus,x
.f8e6	ca		dex				dex
.f8e7	10 fa		bpl $f8e3			bpl 	_OSKILoop
.f8e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/scroll.asm

.f8ea					OSScrollUp:
.f8ea	a9 c0		lda #$c0			lda 	#$C0
.f8ec	64 08		stz $08				stz 	rTemp0
.f8ee	85 09		sta $09				sta 	rTemp0+1
.f8f0	ac 03 02	ldy $0203			ldy 	OSYSize
.f8f3	88		dey				dey
.f8f4					_OSSULoop1:
.f8f4	ae 02 02	ldx $0202			ldx 	OSXSize
.f8f7	5a		phy				phy
.f8f8	ac 02 02	ldy $0202			ldy 	OSXSize
.f8fb					_OSSULoop2:
.f8fb	b1 08		lda ($08),y			lda 	(rTemp0),y
.f8fd	92 08		sta ($08)			sta 	(rTemp0)
.f8ff	e6 08		inc $08				inc 	rTemp0
.f901	d0 02		bne $f905			bne 	_OSSUCarry
.f903	e6 09		inc $09				inc 	rTemp0+1
.f905					_OSSUCarry:
.f905	ca		dex				dex
.f906	d0 f3		bne $f8fb			bne 	_OSSULoop2
.f908	7a		ply				ply
.f909	88		dey				dey
.f90a	d0 e8		bne $f8f4			bne 	_OSSULoop1
.f90c	ac 02 02	ldy $0202			ldy 	OSXSize
.f90f					_OSSUFill:
.f90f	a9 20		lda #$20			lda 	#' '
.f911	88		dey				dey
.f912	91 08		sta ($08),y			sta 	(rTemp0),y
.f914	d0 f9		bne $f90f			bne 	_OSSUFill
.f916	60		rts				rts
.f917					OSScrollDown:
.f917	ae 02 02	ldx $0202			ldx 	OSXSize
.f91a	ac 03 02	ldy $0203			ldy 	OSYSize
.f91d	ca		dex				dex
.f91e	88		dey				dey
.f91f	88		dey				dey
.f920	20 2d f8	jsr $f82d			jsr 	OSGetAddressXY
.f923	ac 02 02	ldy $0202			ldy 	OSXSize
.f926					_OSSDLoop:
.f926	b2 08		lda ($08)			lda 	(rTemp0)
.f928	91 08		sta ($08),y			sta 	(rTemp0),y
.f92a	a5 08		lda $08				lda 	rTemp0
.f92c	d0 08		bne $f936			bne 	_OSSDNoBorrow
.f92e	a5 09		lda $09				lda 	rTemp0+1
.f930	c9 c0		cmp #$c0			cmp 	#$C0
.f932	f0 06		beq $f93a			beq 	_OSSDExit
.f934	c6 09		dec $09				dec 	rTemp0+1
.f936					_OSSDNoBorrow:
.f936	c6 08		dec $08				dec 	rTemp0
.f938	80 ec		bra $f926			bra 	_OSSDLoop
.f93a					_OSSDExit:
.f93a	a9 20		lda #$20			lda		#' '
.f93c	88		dey				dey
.f93d	91 08		sta ($08),y			sta 	(rTemp0),y
.f93f	d0 f9		bne $f93a			bne 	_OSSDExit
.f941	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/translate.asm

.f942					OSTranslateToASCII:
.f942	aa		tax				tax
.f943	bd 8f f9	lda $f98f,x			lda 	OSASCIIFromScanCode,x 		; get ASCII keystroke from scan code
.f946	f0 45		beq $f98d			beq 	_OSTTAFail 					; wrong keyboard map/type ?
.f948	aa		tax				tax 								; save in X
.f949	ad 06 02	lda $0206			lda 	OSKeyStatus+OS_KP_LEFTCTRL_ROW
.f94c	29 10		and #$10			and 	#OS_KP_LEFTCTRL_COL
.f94e	d0 36		bne $f986			bne 	_OSTTAControl 				; check for CTRL + x
.f950	ad 06 02	lda $0206			lda 	OSKeyStatus+OS_KP_LEFTSHIFT_ROW
.f953	29 04		and #$04			and 	#OS_KP_LEFTSHIFT_COL
.f955	d0 07		bne $f95e			bne 	_OSTTAShift 				; check for left/right shift
.f957	ad 0f 02	lda $020f			lda 	OSKeyStatus+OS_KP_RIGHTSHIFT_ROW
.f95a	29 02		and #$02			and 	#OS_KP_RIGHTSHIFT_COL
.f95c	f0 2c		beq $f98a			beq 	_OSTTAExit
.f95e					_OSTTAShift:
.f95e	e0 61		cpx #$61			cpx 	#"a"						; check alpha
.f960	90 0a		bcc $f96c			bcc 	_OSTTANotAlpha
.f962	e0 7b		cpx #$7b			cpx 	#"z"+1
.f964	b0 06		bcs $f96c			bcs 	_OSTTANotAlpha
.f966	8a		txa				txa									; capitalise.
.f967	49 20		eor #$20			eor 	#$20
.f969	aa		tax				tax
.f96a	80 1e		bra $f98a			bra 	_OSTTAExit
.f96c					_OSTTANotAlpha:
.f96c	86 08		stx $08				stx 	rTemp0 						; save ASCII code.
.f96e	a0 00		ldy #$00			ldy 	#0 							; check the shift table
.f970					_OSTTACheckShiftTable:
.f970	b9 91 fa	lda $fa91,y			lda 	OSShiftFixTable+1,y 		; tax = shifted character
.f973	aa		tax				tax
.f974	b9 90 fa	lda $fa90,y			lda 	OSShiftFixTable,y 			; check unshifted match
.f977	c5 08		cmp $08				cmp 	rTemp0
.f979	f0 0f		beq $f98a			beq 	_OSTTAExit
.f97b	c8		iny				iny 								; next pair
.f97c	c8		iny				iny
.f97d	b9 90 fa	lda $fa90,y			lda 	OSShiftFixTable,y 			; until all checked
.f980	10 ee		bpl $f970			bpl 	_OSTTACheckShiftTable
.f982	a6 08		ldx $08				ldx 	rTemp0 						; not shiftable.
.f984	80 04		bra $f98a			bra 	_OSTTAExit
.f986					_OSTTAControl:
.f986	8a		txa				txa
.f987	29 1f		and #$1f			and 	#31
.f989	aa		tax				tax
.f98a					_OSTTAExit:
.f98a	8a		txa				txa
.f98b	18		clc				clc
.f98c	60		rts				rts
.f98d					_OSTTAFail:
.f98d	38		sec				sec
.f98e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/generated/ps2convert.asm

.f98f					OSASCIIFromScanCode:
>f98f	00					.byte	$00 ; $00
>f990	00					.byte	$00 ; $01
>f991	00					.byte	$00 ; $02
>f992	00					.byte	$00 ; $03
>f993	00					.byte	$00 ; $04
>f994	00					.byte	$00 ; $05
>f995	00					.byte	$00 ; $06
>f996	00					.byte	$00 ; $07
>f997	00					.byte	$00 ; $08
>f998	00					.byte	$00 ; $09
>f999	00					.byte	$00 ; $0a
>f99a	00					.byte	$00 ; $0b
>f99b	00					.byte	$00 ; $0c
>f99c	09					.byte	$09 ; $0d chr$(9)
>f99d	60					.byte	$60 ; $0e '`'
>f99e	00					.byte	$00 ; $0f
>f99f	00					.byte	$00 ; $10
>f9a0	00					.byte	$00 ; $11
>f9a1	00					.byte	$00 ; $12
>f9a2	00					.byte	$00 ; $13
>f9a3	00					.byte	$00 ; $14
>f9a4	71					.byte	$71 ; $15 'q'
>f9a5	31					.byte	$31 ; $16 '1'
>f9a6	00					.byte	$00 ; $17
>f9a7	00					.byte	$00 ; $18
>f9a8	00					.byte	$00 ; $19
>f9a9	7a					.byte	$7a ; $1a 'z'
>f9aa	73					.byte	$73 ; $1b 's'
>f9ab	61					.byte	$61 ; $1c 'a'
>f9ac	77					.byte	$77 ; $1d 'w'
>f9ad	32					.byte	$32 ; $1e '2'
>f9ae	00					.byte	$00 ; $1f
>f9af	00					.byte	$00 ; $20
>f9b0	63					.byte	$63 ; $21 'c'
>f9b1	78					.byte	$78 ; $22 'x'
>f9b2	64					.byte	$64 ; $23 'd'
>f9b3	65					.byte	$65 ; $24 'e'
>f9b4	34					.byte	$34 ; $25 '4'
>f9b5	33					.byte	$33 ; $26 '3'
>f9b6	00					.byte	$00 ; $27
>f9b7	00					.byte	$00 ; $28
>f9b8	20					.byte	$20 ; $29 ' '
>f9b9	76					.byte	$76 ; $2a 'v'
>f9ba	66					.byte	$66 ; $2b 'f'
>f9bb	74					.byte	$74 ; $2c 't'
>f9bc	72					.byte	$72 ; $2d 'r'
>f9bd	35					.byte	$35 ; $2e '5'
>f9be	00					.byte	$00 ; $2f
>f9bf	00					.byte	$00 ; $30
>f9c0	6e					.byte	$6e ; $31 'n'
>f9c1	62					.byte	$62 ; $32 'b'
>f9c2	68					.byte	$68 ; $33 'h'
>f9c3	67					.byte	$67 ; $34 'g'
>f9c4	79					.byte	$79 ; $35 'y'
>f9c5	36					.byte	$36 ; $36 '6'
>f9c6	00					.byte	$00 ; $37
>f9c7	00					.byte	$00 ; $38
>f9c8	00					.byte	$00 ; $39
>f9c9	6d					.byte	$6d ; $3a 'm'
>f9ca	6a					.byte	$6a ; $3b 'j'
>f9cb	75					.byte	$75 ; $3c 'u'
>f9cc	37					.byte	$37 ; $3d '7'
>f9cd	38					.byte	$38 ; $3e '8'
>f9ce	00					.byte	$00 ; $3f
>f9cf	00					.byte	$00 ; $40
>f9d0	2c					.byte	$2c ; $41 ','
>f9d1	6b					.byte	$6b ; $42 'k'
>f9d2	69					.byte	$69 ; $43 'i'
>f9d3	6f					.byte	$6f ; $44 'o'
>f9d4	30					.byte	$30 ; $45 '0'
>f9d5	39					.byte	$39 ; $46 '9'
>f9d6	00					.byte	$00 ; $47
>f9d7	00					.byte	$00 ; $48
>f9d8	2e					.byte	$2e ; $49 '.'
>f9d9	2f					.byte	$2f ; $4a '/'
>f9da	6c					.byte	$6c ; $4b 'l'
>f9db	3b					.byte	$3b ; $4c ';'
>f9dc	70					.byte	$70 ; $4d 'p'
>f9dd	2d					.byte	$2d ; $4e '-'
>f9de	00					.byte	$00 ; $4f
>f9df	00					.byte	$00 ; $50
>f9e0	00					.byte	$00 ; $51
>f9e1	27					.byte	$27 ; $52 '''
>f9e2	00					.byte	$00 ; $53
>f9e3	5b					.byte	$5b ; $54 '['
>f9e4	3d					.byte	$3d ; $55 '='
>f9e5	00					.byte	$00 ; $56
>f9e6	00					.byte	$00 ; $57
>f9e7	00					.byte	$00 ; $58
>f9e8	00					.byte	$00 ; $59
>f9e9	0d					.byte	$0d ; $5a chr$(13)
>f9ea	5d					.byte	$5d ; $5b ']'
>f9eb	00					.byte	$00 ; $5c
>f9ec	7c					.byte	$7c ; $5d '|'
>f9ed	00					.byte	$00 ; $5e
>f9ee	00					.byte	$00 ; $5f
>f9ef	00					.byte	$00 ; $60
>f9f0	00					.byte	$00 ; $61
>f9f1	00					.byte	$00 ; $62
>f9f2	00					.byte	$00 ; $63
>f9f3	00					.byte	$00 ; $64
>f9f4	00					.byte	$00 ; $65
>f9f5	08					.byte	$08 ; $66 chr$(8)
>f9f6	00					.byte	$00 ; $67
>f9f7	00					.byte	$00 ; $68
>f9f8	00					.byte	$00 ; $69
>f9f9	00					.byte	$00 ; $6a
>f9fa	01					.byte	$01 ; $6b chr$(1)
>f9fb	00					.byte	$00 ; $6c
>f9fc	00					.byte	$00 ; $6d
>f9fd	00					.byte	$00 ; $6e
>f9fe	00					.byte	$00 ; $6f
>f9ff	00					.byte	$00 ; $70
>fa00	00					.byte	$00 ; $71
>fa01	03					.byte	$03 ; $72 chr$(3)
>fa02	00					.byte	$00 ; $73
>fa03	04					.byte	$04 ; $74 chr$(4)
>fa04	06					.byte	$06 ; $75 chr$(6)
>fa05	1b					.byte	$1b ; $76 chr$(27)
>fa06	00					.byte	$00 ; $77
>fa07	00					.byte	$00 ; $78
>fa08	00					.byte	$00 ; $79
>fa09	00					.byte	$00 ; $7a
>fa0a	00					.byte	$00 ; $7b
>fa0b	00					.byte	$00 ; $7c
>fa0c	00					.byte	$00 ; $7d
>fa0d	00					.byte	$00 ; $7e
>fa0e	00					.byte	$00 ; $7f
>fa0f	00					.byte	$00 ; $80
>fa10	00					.byte	$00 ; $81
>fa11	00					.byte	$00 ; $82
>fa12	00					.byte	$00 ; $83
>fa13	00					.byte	$00 ; $84
>fa14	00					.byte	$00 ; $85
>fa15	00					.byte	$00 ; $86
>fa16	00					.byte	$00 ; $87
>fa17	00					.byte	$00 ; $88
>fa18	00					.byte	$00 ; $89
>fa19	00					.byte	$00 ; $8a
>fa1a	00					.byte	$00 ; $8b
>fa1b	00					.byte	$00 ; $8c
>fa1c	00					.byte	$00 ; $8d
>fa1d	00					.byte	$00 ; $8e
>fa1e	00					.byte	$00 ; $8f
>fa1f	00					.byte	$00 ; $90
>fa20	00					.byte	$00 ; $91
>fa21	00					.byte	$00 ; $92
>fa22	00					.byte	$00 ; $93
>fa23	00					.byte	$00 ; $94
>fa24	00					.byte	$00 ; $95
>fa25	00					.byte	$00 ; $96
>fa26	00					.byte	$00 ; $97
>fa27	00					.byte	$00 ; $98
>fa28	00					.byte	$00 ; $99
>fa29	00					.byte	$00 ; $9a
>fa2a	00					.byte	$00 ; $9b
>fa2b	00					.byte	$00 ; $9c
>fa2c	00					.byte	$00 ; $9d
>fa2d	00					.byte	$00 ; $9e
>fa2e	00					.byte	$00 ; $9f
>fa2f	00					.byte	$00 ; $a0
>fa30	00					.byte	$00 ; $a1
>fa31	00					.byte	$00 ; $a2
>fa32	00					.byte	$00 ; $a3
>fa33	00					.byte	$00 ; $a4
>fa34	00					.byte	$00 ; $a5
>fa35	00					.byte	$00 ; $a6
>fa36	00					.byte	$00 ; $a7
>fa37	00					.byte	$00 ; $a8
>fa38	00					.byte	$00 ; $a9
>fa39	00					.byte	$00 ; $aa
>fa3a	00					.byte	$00 ; $ab
>fa3b	00					.byte	$00 ; $ac
>fa3c	00					.byte	$00 ; $ad
>fa3d	00					.byte	$00 ; $ae
>fa3e	00					.byte	$00 ; $af
>fa3f	00					.byte	$00 ; $b0
>fa40	00					.byte	$00 ; $b1
>fa41	00					.byte	$00 ; $b2
>fa42	00					.byte	$00 ; $b3
>fa43	00					.byte	$00 ; $b4
>fa44	00					.byte	$00 ; $b5
>fa45	00					.byte	$00 ; $b6
>fa46	00					.byte	$00 ; $b7
>fa47	00					.byte	$00 ; $b8
>fa48	00					.byte	$00 ; $b9
>fa49	00					.byte	$00 ; $ba
>fa4a	00					.byte	$00 ; $bb
>fa4b	00					.byte	$00 ; $bc
>fa4c	00					.byte	$00 ; $bd
>fa4d	00					.byte	$00 ; $be
>fa4e	00					.byte	$00 ; $bf
>fa4f	00					.byte	$00 ; $c0
>fa50	00					.byte	$00 ; $c1
>fa51	00					.byte	$00 ; $c2
>fa52	00					.byte	$00 ; $c3
>fa53	00					.byte	$00 ; $c4
>fa54	00					.byte	$00 ; $c5
>fa55	00					.byte	$00 ; $c6
>fa56	00					.byte	$00 ; $c7
>fa57	00					.byte	$00 ; $c8
>fa58	00					.byte	$00 ; $c9
>fa59	00					.byte	$00 ; $ca
>fa5a	00					.byte	$00 ; $cb
>fa5b	00					.byte	$00 ; $cc
>fa5c	00					.byte	$00 ; $cd
>fa5d	00					.byte	$00 ; $ce
>fa5e	00					.byte	$00 ; $cf
>fa5f	00					.byte	$00 ; $d0
>fa60	00					.byte	$00 ; $d1
>fa61	00					.byte	$00 ; $d2
>fa62	00					.byte	$00 ; $d3
>fa63	00					.byte	$00 ; $d4
>fa64	00					.byte	$00 ; $d5
>fa65	00					.byte	$00 ; $d6
>fa66	00					.byte	$00 ; $d7
>fa67	00					.byte	$00 ; $d8
>fa68	00					.byte	$00 ; $d9
>fa69	00					.byte	$00 ; $da
>fa6a	00					.byte	$00 ; $db
>fa6b	00					.byte	$00 ; $dc
>fa6c	00					.byte	$00 ; $dd
>fa6d	00					.byte	$00 ; $de
>fa6e	00					.byte	$00 ; $df
>fa6f	00					.byte	$00 ; $e0
>fa70	00					.byte	$00 ; $e1
>fa71	00					.byte	$00 ; $e2
>fa72	00					.byte	$00 ; $e3
>fa73	00					.byte	$00 ; $e4
>fa74	00					.byte	$00 ; $e5
>fa75	00					.byte	$00 ; $e6
>fa76	00					.byte	$00 ; $e7
>fa77	00					.byte	$00 ; $e8
>fa78	45					.byte	$45 ; $e9 'E'
>fa79	00					.byte	$00 ; $ea
>fa7a	01					.byte	$01 ; $eb chr$(1)
>fa7b	02					.byte	$02 ; $ec chr$(2)
>fa7c	00					.byte	$00 ; $ed
>fa7d	00					.byte	$00 ; $ee
>fa7e	00					.byte	$00 ; $ef
>fa7f	00					.byte	$00 ; $f0
>fa80	07					.byte	$07 ; $f1 chr$(7)
>fa81	03					.byte	$03 ; $f2 chr$(3)
>fa82	00					.byte	$00 ; $f3
>fa83	04					.byte	$04 ; $f4 chr$(4)
>fa84	06					.byte	$06 ; $f5 chr$(6)
>fa85	00					.byte	$00 ; $f6
>fa86	00					.byte	$00 ; $f7
>fa87	00					.byte	$00 ; $f8
>fa88	00					.byte	$00 ; $f9
>fa89	00					.byte	$00 ; $fa
>fa8a	00					.byte	$00 ; $fb
>fa8b	00					.byte	$00 ; $fc
>fa8c	00					.byte	$00 ; $fd
>fa8d	00					.byte	$00 ; $fe
>fa8e	00					.byte	$00 ; $ff
>fa8f	ff					.byte	$FF
.fa90					OSShiftFixTable:
>fa90	60 7e					.byte	$60,$7e		; ` => ~
>fa92	31 21					.byte	$31,$21		; 1 => !
>fa94	32 40					.byte	$32,$40		; 2 => @
>fa96	33 23					.byte	$33,$23		; 3 => #
>fa98	34 24					.byte	$34,$24		; 4 => $
>fa9a	35 25					.byte	$35,$25		; 5 => %
>fa9c	36 5e					.byte	$36,$5e		; 6 => ^
>fa9e	37 26					.byte	$37,$26		; 7 => &
>faa0	38 2a					.byte	$38,$2a		; 8 => *
>faa2	39 28					.byte	$39,$28		; 9 => (
>faa4	30 29					.byte	$30,$29		; 0 => )
>faa6	2d 5f					.byte	$2d,$5f		; - => _
>faa8	3d 2b					.byte	$3d,$2b		; = => +
>faaa	3b 3a					.byte	$3b,$3a		; ; => :
>faac	27 22					.byte	$27,$22		; ' => "
>faae	2c 3c					.byte	$2c,$3c		; , => <
>fab0	2e 3e					.byte	$2e,$3e		; . => >
>fab2	2f 3f					.byte	$2f,$3f		; / => ?
>fab4	ff					.byte	$FF
=2					OS_KP_LEFTCTRL_ROW = 2
=$10					OS_KP_LEFTCTRL_COL = $10
=2					OS_KP_LEFTSHIFT_ROW = 2
=$04					OS_KP_LEFTSHIFT_COL = $04
=11					OS_KP_RIGHTSHIFT_ROW = 11
=$02					OS_KP_RIGHTSHIFT_COL = $02
=4					OS_KP_C_ROW = 4
=$02					OS_KP_C_COL = $02
=3					OS_KP_Z_ROW = 3
=$04					OS_KP_Z_COL = $04
=4					OS_KP_X_ROW = 4
=$04					OS_KP_X_COL = $04
=8					OS_KP_K_ROW = 8
=$04					OS_KP_K_COL = $04
=7					OS_KP_M_ROW = 7
=$04					OS_KP_M_COL = $04
=9					OS_KP_L_ROW = 9
=$08					OS_KP_L_COL = $08

;******  Return to file: include.files


;******  Processing file: src/keyboard/keyboard.asm

.fab5					OSIsKeyAvailable:
.fab5	48		pha				pha
.fab6	18		clc				clc
.fab7	ad 34 02	lda $0234			lda 	OSKeyboardQueueSize  		; get entries in queue
.faba	d0 01		bne $fabd			bne 	_OSIKAHasKey
.fabc	38		sec				sec
.fabd					_OSIKAHasKey:
.fabd	68		pla				pla
.fabe	60		rts				rts
.fabf					OSReadKeyboard:
.fabf	da		phx				phx
.fac0	a2 01		ldx #$01			ldx 	#1
.fac2	20 c7 fa	jsr $fac7			jsr 	OSReadDevice
.fac5	fa		plx				plx
.fac6	60		rts				rts
.fac7					OSReadDevice:
.fac7	20 b5 fa	jsr $fab5			jsr 	OSIsKeyAvailable 			; key available ?
.faca	b0 19		bcs $fae5			bcs 	_OSRDExit
.facc	ad 24 02	lda $0224			lda 	OSKeyboardQueue 			; push char on stack
.facf	48		pha				pha
.fad0	da		phx				phx
.fad1	a2 00		ldx #$00			ldx		#0 							; remove from queue array
.fad3					_OSRDDequeue:
.fad3	bd 25 02	lda $0225,x			lda 	OSKeyboardQueue+1,x
.fad6	9d 24 02	sta $0224,x			sta 	OSKeyboardQueue,x
.fad9	e8		inx				inx
.fada	ec 34 02	cpx $0234			cpx 	OSKeyboardQueueSize
.fadd	d0 f4		bne $fad3			bne 	_OSRDDequeue
.fadf	ce 34 02	dec $0234			dec 	OSKeyboardQueueSize			; dec queue count
.fae2	fa		plx				plx
.fae3	68		pla				pla 								; restore key
.fae4	18		clc				clc
.fae5					_OSRDExit:
.fae5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/screen/charout.asm

.fae6					OSWriteScreen:
.fae6	da		phx				phx
.fae7	a2 00		ldx #$00			ldx 	#0
.fae9	20 ee fa	jsr $faee			jsr 	OSWriteDevice
.faec	fa		plx				plx
.faed	60		rts				rts
.faee					OSWriteDevice:
.faee	48		pha				pha
.faef	da		phx				phx
.faf0	5a		phy				phy
.faf1	c9 20		cmp #$20			cmp 	#32 						; standard character
.faf3	b0 0c		bcs $fb01			bcs 	_OSWriteDirect
.faf5	c9 10		cmp #$10			cmp 	#16 						; 16-32 for set colours, reserved.
.faf7	b0 0e		bcs $fb07			bcs 	_OSWriteDeviceExit
.faf9	0a		asl a				asl 	a 							; make to an offset in vector table
.fafa	aa		tax				tax
.fafb	4a		lsr a				lsr 	a
.fafc	20 0b fb	jsr $fb0b			jsr 	_OSCallVectorCode
.faff	80 06		bra $fb07			bra 	_OSWriteDeviceExit
.fb01					_OSWriteDirect:
.fb01	20 1f f8	jsr $f81f			jsr 	OSWritePhysical
.fb04	20 4f fb	jsr $fb4f			jsr 	_OSCursorAdvance
.fb07					_OSWriteDeviceExit:
.fb07	7a		ply				ply
.fb08	fa		plx				plx
.fb09	68		pla				pla
.fb0a	60		rts				rts
.fb0b					_OSCallVectorCode:
.fb0b	7c 0f fb	jmp ($fb0f,x)			jmp 	(_OSWDVector,x)
.fb0e					_OSWNoFunction:
.fb0e	60		rts				rts
.fb0f					_OSWDVector:
>fb0f	0e fb						.word 	_OSWNoFunction 				; $00 	No operation
>fb11	3d fb						.word 	_OSCursorLeft 				; $01 	Left 		(Ctrl-A)
>fb13	86 fb						.word 	OSHomeCursor 				; $02 	Home Cursor (Ctrl-B)
>fb15	5d fb						.word 	_OSCursorDown 				; $03 	Down 		(Ctrl-C)
>fb17	46 fb						.word 	_OSCursorRight 				; $04 	Right 		(Ctrl-D)
>fb19	4f fb						.word 	_OSCursorAdvance			; $05 	Advance
>fb1b	6f fb						.word 	_OSCursorUp 				; $06	Up 			(Ctrl-F)
>fb1d	0e fb						.word 	_OSWNoFunction 				; $07 	Delete 		(Del)
>fb1f	2f fb						.word 	_OSBackspace				; $08 	Backspace 	(Backspace)
>fb21	7b fb						.word 	_OSWHTab 					; $09	Tab
>fb23	0e fb						.word 	_OSWNoFunction 				; $0A
>fb25	0e fb						.word 	_OSWNoFunction 				; $0B
>fb27	53 f8						.word 	OSClearScreen 				; $0C	ClearScreen	(Ctrl-L)
>fb29	5a fb						.word 	_OSNewLine 					; $0D 	CarriageRet (Enter)
>fb2b	ea f8						.word 	OSScrollUp 					; $0E 	Scroll Up 	(e.g. off bottom)
>fb2d	17 f9						.word 	OSScrollDown 				; $0F 	Scroll Down (e.g. off top)
.fb2f					_OSBackspace:
.fb2f	ad 00 02	lda $0200			lda 	OSXPos 						; left side already ?
.fb32	f0 11		beq $fb45			beq 	_OSCLExit
.fb34	ce 00 02	dec $0200			dec 	OSXPos
.fb37	a9 20		lda #$20			lda 	#' '
.fb39	20 1f f8	jsr $f81f			jsr 	OSWritePhysical
.fb3c	60		rts				rts
.fb3d					_OSCursorLeft:
.fb3d	ad 00 02	lda $0200			lda 	OSXPos 						; left side
.fb40	f0 03		beq $fb45			beq 	_OSCLExit 					; yes, exit
.fb42	ce 00 02	dec $0200			dec 	OSXPos 						; cursor left
.fb45					_OSCLExit:
.fb45	60		rts				rts
.fb46					_OSCursorRight:
.fb46	ad 00 02	lda $0200			lda 	OSXPos 						; reached right side ?
.fb49	1a		inc a				inc 	a
.fb4a	cd 02 02	cmp $0202			cmp 	OSXSize
.fb4d	f0 1f		beq $fb6e			beq 	_OSCRExit 					; yes, exit.
.fb4f					_OSCursorAdvance:
.fb4f	ee 00 02	inc $0200			inc 	OSXPos 						; advance cursor and position.
.fb52	ad 00 02	lda $0200			lda 	OSXPos 						; reached RHS
.fb55	cd 02 02	cmp $0202			cmp 	OSXSize
.fb58	90 14		bcc $fb6e			bcc 	_OSCRExit 					; if so exit.
.fb5a					_OSNewLine:
.fb5a	9c 00 02	stz $0200			stz 	OSXPos 						; start next line.
.fb5d					_OSCursorDown:
.fb5d	ee 01 02	inc $0201			inc 	OSYPos
.fb60	ad 01 02	lda $0201			lda 	OSYPos 						; reached bottom
.fb63	cd 03 02	cmp $0203			cmp 	OSYSize
.fb66	90 06		bcc $fb6e			bcc 	_OSCRExit
.fb68	ce 01 02	dec $0201			dec 	OSYPos 						; back to bottom line.
.fb6b	20 ea f8	jsr $f8ea			jsr 	OSScrollUp 					; scroll whole screen up.
.fb6e					_OSCRExit:
.fb6e	60		rts				rts
.fb6f					_OSCursorUp:
.fb6f	ce 01 02	dec $0201			dec 	OSYPos 						; up
.fb72	10 fa		bpl $fb6e			bpl 	_OSCRExit 					; still on screen
.fb74	ee 01 02	inc $0201			inc 	OSYPos 						; fix up
.fb77	20 17 f9	jsr $f917			jsr 	OSScrollDown 				; scroll down.
.fb7a	60		rts				rts
.fb7b					_OSWHTab:
.fb7b	20 4f fb	jsr $fb4f			jsr 	_OSCursorAdvance
.fb7e	ad 00 02	lda $0200			lda 	OSXPos
.fb81	29 07		and #$07			and 	#7
.fb83	d0 f6		bne $fb7b			bne 	_OSWHTab
.fb85	60		rts				rts
.fb86					OSHomeCursor:
.fb86	9c 00 02	stz $0200			stz 	OSXPos
.fb89	9c 01 02	stz $0201			stz 	OSYPos
.fb8c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/utility/setup.asm

.fb8d					OSInitialise:
.fb8d	a9 28		lda #$28			lda 	#40 						; 40 x 30 display
.fb8f	8d 02 02	sta $0202			sta 	OSXSize
.fb92	a9 1e		lda #$1e			lda 	#30
.fb94	8d 03 02	sta $0203			sta 	OSYSize
.fb97	20 53 f8	jsr $f853			jsr 	OSClearScreen 				; clear the display
.fb9a	20 e1 f8	jsr $f8e1			jsr 	OSKeyboardInitialise 		; reset the keyboard state.
.fb9d	60		rts				rts
.fb9e					OSGetScreenSize:
.fb9e	ae 02 02	ldx $0202			ldx 	OSXSize
.fba1	ac 03 02	ldy $0203			ldy 	OSYSize
.fba4	60		rts				rts

;******  Return to file: include.files


;******  Return to file: osrom.asm

.fba5					OSTWriteHex:
.fba5	48		pha				pha
.fba6	4a		lsr a				lsr 	a
.fba7	4a		lsr a				lsr 	a
.fba8	4a		lsr a				lsr 	a
.fba9	4a		lsr a				lsr 	a
.fbaa	20 ae fb	jsr $fbae			jsr 	_OSTWriteNibble
.fbad	68		pla				pla
.fbae					_OSTWriteNibble:
.fbae	48		pha				pha
.fbaf	29 0f		and #$0f			and 	#15
.fbb1	c9 0a		cmp #$0a			cmp 	#10
.fbb3	90 02		bcc $fbb7			bcc 	_OSTNotAlpha
.fbb5	69 06		adc #$06			adc 	#6
.fbb7					_OSTNotAlpha:
.fbb7	69 30		adc #$30			adc 	#48
.fbb9	20 e6 fa	jsr $fae6			jsr 	OSWriteScreen
.fbbc	68		pla				pla
.fbbd	60		rts				rts

;******  Processing file: src/generated/vectors.asmx

.ffe8	4c 9e fb	jmp $fb9e		jmp		OSGetScreenSize          ; Get size of screen to XY
.ffeb	4c c7 fa	jmp $fac7		jmp		OSReadDevice             ; Read device X to A
.ffee	4c ee fa	jmp $faee		jmp		OSWriteDevice            ; Write A to device X
.fff1	4c e6 fa	jmp $fae6		jmp		OSWriteScreen            ; Write A to screen (device 0)
.fff4	4c bf fa	jmp $fabf		jmp		OSReadKeyboard           ; Read A from keyboard (device 1)
.fff7	4c b5 fa	jmp $fab5		jmp		OSIsKeyAvailable         ; Check if key available (CS if so)

;******  Return to file: osrom.asm

>fffa	18 f8						.word 	NoInt 						; NMI
>fffc	00 f8						.word 	Boot 						; Reset
>fffe	18 f8						.word 	NoInt						; IRQ

;******  End of listing
