
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/osrom.bin osrom.asm
; Tue Jun  6 04:24:42 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: osrom.asm


;******  Processing file: ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSRKOriginal:
>0237							.fill 	1
=192					OSTextBufferSize = 192
.0238					OSXEdit:
>0238							.fill 	1
.0239					OSYEdit:
>0239							.fill 	1
.023a					OSEditWidth:
>023a							.fill 	1
.023b					OSEditPos:
>023b							.fill 	1
.023c					OSEditScroll:
>023c							.fill 	1
.023d					OSEditLength:
>023d							.fill 	1
.023e					OSEditBuffer:
>023e							.fill 	OSTextBufferSize+1
>02ff							.fill 	32
>031f							.align 	256

;******  Return to file: osrom.asm

.f800	20 55 fd	jsr $fd55	Boot:	jsr 	OSInitialise 				; set everything up.
.f803	a2 6d		ldx #$6d			ldx 	#MainPrompt & $FF
.f805	a0 fd		ldy #$fd			ldy 	#MainPrompt >> 8
.f807	20 29 fd	jsr $fd29			jsr 	OSWriteStringZ
.f80a	4c 00 10	jmp $1000			jmp 	$1000
.f80d					NoInt:
.f80d	40		rti				rti

;******  Processing file: include.files


;******  Processing file: src/drivers/charwrite.asm

.f80e					OSReadPhysical:
.f80e	20 1c f8	jsr $f81c			jsr 	OSGetAddress
.f811	b2 08		lda ($08)			lda 	(rTemp0)
.f813	60		rts				rts
.f814					OSWritePhysical:
.f814	48		pha				pha
.f815	20 1c f8	jsr $f81c			jsr 	OSGetAddress
.f818	68		pla				pla
.f819	92 08		sta ($08)			sta 	(rTemp0)
.f81b	60		rts				rts
.f81c					OSGetAddress:
.f81c	ac 01 02	ldy $0201	        ldy     OSYPos
.f81f	ae 00 02	ldx $0200	        ldx 	OSXPos
.f822					OSGetAddressXY:
.f822	ad 02 02	lda $0202	        lda     OSXSize
.f825	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.f826	85 08		sta $08		        sta     rTemp0
.f828	84 09		sty $09		        sty     rTemp0+1
.f82a	a9 00		lda #$00	        lda     #0
.f82c	a0 08		ldy #$08	        ldy     #8
.f82e					_IFMLoop:
.f82e	90 03		bcc $f833	        bcc     _IFMNoAdd
.f830	18		clc		        clc
.f831	65 09		adc $09		        adc     rTemp0+1
.f833					_IFMNoAdd:
.f833	6a		ror a		        ror     a
.f834	66 08		ror $08		        ror     rTemp0                    ; pull another bit out for the next iteration
.f836	88		dey		        dey
.f837	d0 f5		bne $f82e	        bne     _IFMLoop
.f839	09 c0		ora #$c0	        ora 	#$C0
.f83b	a8		tay		        tay
.f83c	18		clc		        clc
.f83d	8a		txa		        txa
.f83e	65 08		adc $08		        adc 	rTemp0
.f840	85 08		sta $08		        sta 	rTemp0
.f842	90 01		bcc $f845	        bcc 	_IFMNoCarry
.f844	c8		iny		        iny
.f845					_IFMNoCarry:
.f845	84 09		sty $09				sty 	rTemp0+1
.f847	60		rts		        rts

;******  Return to file: include.files


;******  Processing file: src/drivers/clear.asm

.f848					OSClearScreen:
.f848	a9 c0		lda #$c0			lda 	#$C0 						; set screen pos.
.f84a	85 09		sta $09				sta 	rTemp0+1
.f84c	64 08		stz $08				stz 	rTemp0
.f84e	ac 03 02	ldy $0203			ldy 	OSYSize 					; clear height * width bytes.
.f851					_OSCSLoop1:
.f851	ae 02 02	ldx $0202			ldx 	OSXSize
.f854					_OSCSLoop2:
.f854	a9 20		lda #$20			lda 	#' '
.f856	92 08		sta ($08)			sta 	(rTemp0)
.f858	e6 08		inc $08				inc 	rTemp0
.f85a	d0 02		bne $f85e			bne 	_OSCSNoCarry
.f85c	e6 09		inc $09				inc 	rTemp0+1
.f85e					_OSCSNoCarry:
.f85e	ca		dex				dex
.f85f	d0 f3		bne $f854			bne 	_OSCSLoop2
.f861	88		dey				dey
.f862	d0 ed		bne $f851			bne 	_OSCSLoop1
.f864	20 22 fd	jsr $fd22			jsr 	OSHomeCursor 				; cursor to (0,0)
.f867	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/ps2keyboard.asm

.f868					OSKeyboardDataProcess:
.f868	ad 00 cf	lda $cf00			lda 	$CF00 						; read keyboard port
.f86b	f0 31		beq $f89e			beq 	_OSKExit 					; no events available.
.f86d	c9 f0		cmp #$f0			cmp 	#$F0 						; check key up ?
.f86f	f0 2a		beq $f89b			beq 	_OSKUp
.f871	c9 e0		cmp #$e0			cmp 	#$E0 						; check extended scancode ?
.f873	f0 1f		beq $f894			beq 	_OSKShift
.f875	0d 36 02	ora $0236			ora 	OSIsKeyShift 				; actual key code.
.f878	48		pha				pha
.f879	20 9f f8	jsr $f89f			jsr 	OSKeyboardUpdateBits 		; update the up/down bits
.f87c	68		pla				pla
.f87d	ae 35 02	ldx $0235			ldx 	OSIsKeyUp 					; if key up reset up and shift flags.
.f880	f0 08		beq $f88a			beq 	_OSKInsertQueue 			; if key down insert into queue
.f882	9c 35 02	stz $0235			stz 	OSIsKeyUp
.f885	9c 36 02	stz $0236			stz 	OSIsKeyShift
.f888	80 14		bra $f89e			bra 	_OSKExit
.f88a					_OSKInsertQueue:
.f88a	20 37 f9	jsr $f937			jsr 	OSTranslateToASCII 			; convert to ASCII
.f88d	b0 0f		bcs $f89e			bcs 	_OSKExit 					; carry set, exit
.f88f	20 c8 f8	jsr $f8c8			jsr 	OSInsertKeyboardQueue
.f892	80 0a		bra $f89e			bra 	_OSKExit
.f894					_OSKShift:
.f894	a9 80		lda #$80			lda 	#$80
.f896	8d 36 02	sta $0236			sta 	OSIsKeyShift
.f899	80 03		bra $f89e			bra 	_OSKExit
.f89b					_OSKUp:
.f89b	ce 35 02	dec $0235			dec 	OSIsKeyUp 					; received $F0 (key up)
.f89e					_OSKExit:
.f89e	60		rts				rts
.f89f					OSKeyboardUpdateBits:
.f89f	a2 00		ldx #$00			ldx 	#0 							; offset in table
.f8a1					_OSKUCalculate:
.f8a1	c9 08		cmp #$08			cmp 	#8 							; work out the row
.f8a3	90 06		bcc $f8ab			bcc 	_OSKUHaveRow
.f8a5	e8		inx				inx
.f8a6	38		sec				sec
.f8a7	e9 08		sbc #$08			sbc 	#8
.f8a9	80 f6		bra $f8a1			bra 	_OSKUCalculate
.f8ab					_OSKUHaveRow:
.f8ab	a8		tay				tay 								; work out the column
.f8ac	a9 00		lda #$00			lda 	#0
.f8ae	38		sec				sec
.f8af					_OSKUCalculate2:
.f8af	2a		rol a				rol 	a
.f8b0	88		dey				dey
.f8b1	10 fc		bpl $f8af			bpl 	_OSKUCalculate2  			; at end , A is bitmask, X is row (table entry)
.f8b3	2c 35 02	bit $0235			bit 	OSIsKeyUp 					; check up
.f8b6	30 07		bmi $f8bf			bmi 	_OSKUUp
.f8b8	1d 04 02	ora $0204,x			ora 	OSKeyStatus,x 				; down set bit
.f8bb	9d 04 02	sta $0204,x			sta 	OSKeyStatus,x
.f8be	60		rts				rts
.f8bf					_OSKUUp:
.f8bf	49 ff		eor #$ff			eor 	#$FF 						; make maske
.f8c1	3d 04 02	and $0204,x			and 	OSKeyStatus,x 				; up clear bit
.f8c4	9d 04 02	sta $0204,x			sta 	OSKeyStatus,x
.f8c7	60		rts				rts
.f8c8					OSInsertKeyboardQueue:
.f8c8	ae 34 02	ldx $0234			ldx 	OSKeyboardQueueSize 		; check to see if full
.f8cb	e0 10		cpx #$10			cpx	 	#OSKeyboardQueueMaxSize
.f8cd	b0 06		bcs $f8d5			bcs 	_OSIKQExit
.f8cf	9d 24 02	sta $0224,x			sta 	OSKeyboardQueue,x 			; add keyboard entry to queue.
.f8d2	ee 34 02	inc $0234			inc 	OSKeyboardQueueSize
.f8d5					_OSIKQExit:
.f8d5	60		rts				rts
.f8d6					OSKeyboardInitialise:
.f8d6	a2 32		ldx #$32			ldx 	#OSIsKeyShift-OSKeyStatus
.f8d8					_OSKILoop:
.f8d8	9e 04 02	stz $0204,x			stz 	OSKeyStatus,x
.f8db	ca		dex				dex
.f8dc	10 fa		bpl $f8d8			bpl 	_OSKILoop
.f8de	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/scroll.asm

.f8df					OSScrollUp:
.f8df	a9 c0		lda #$c0			lda 	#$C0
.f8e1	64 08		stz $08				stz 	rTemp0
.f8e3	85 09		sta $09				sta 	rTemp0+1
.f8e5	ac 03 02	ldy $0203			ldy 	OSYSize
.f8e8	88		dey				dey
.f8e9					_OSSULoop1:
.f8e9	ae 02 02	ldx $0202			ldx 	OSXSize
.f8ec	5a		phy				phy
.f8ed	ac 02 02	ldy $0202			ldy 	OSXSize
.f8f0					_OSSULoop2:
.f8f0	b1 08		lda ($08),y			lda 	(rTemp0),y
.f8f2	92 08		sta ($08)			sta 	(rTemp0)
.f8f4	e6 08		inc $08				inc 	rTemp0
.f8f6	d0 02		bne $f8fa			bne 	_OSSUCarry
.f8f8	e6 09		inc $09				inc 	rTemp0+1
.f8fa					_OSSUCarry:
.f8fa	ca		dex				dex
.f8fb	d0 f3		bne $f8f0			bne 	_OSSULoop2
.f8fd	7a		ply				ply
.f8fe	88		dey				dey
.f8ff	d0 e8		bne $f8e9			bne 	_OSSULoop1
.f901	ac 02 02	ldy $0202			ldy 	OSXSize
.f904					_OSSUFill:
.f904	a9 20		lda #$20			lda 	#' '
.f906	88		dey				dey
.f907	91 08		sta ($08),y			sta 	(rTemp0),y
.f909	d0 f9		bne $f904			bne 	_OSSUFill
.f90b	60		rts				rts
.f90c					OSScrollDown:
.f90c	ae 02 02	ldx $0202			ldx 	OSXSize
.f90f	ac 03 02	ldy $0203			ldy 	OSYSize
.f912	ca		dex				dex
.f913	88		dey				dey
.f914	88		dey				dey
.f915	20 22 f8	jsr $f822			jsr 	OSGetAddressXY
.f918	ac 02 02	ldy $0202			ldy 	OSXSize
.f91b					_OSSDLoop:
.f91b	b2 08		lda ($08)			lda 	(rTemp0)
.f91d	91 08		sta ($08),y			sta 	(rTemp0),y
.f91f	a5 08		lda $08				lda 	rTemp0
.f921	d0 08		bne $f92b			bne 	_OSSDNoBorrow
.f923	a5 09		lda $09				lda 	rTemp0+1
.f925	c9 c0		cmp #$c0			cmp 	#$C0
.f927	f0 06		beq $f92f			beq 	_OSSDExit
.f929	c6 09		dec $09				dec 	rTemp0+1
.f92b					_OSSDNoBorrow:
.f92b	c6 08		dec $08				dec 	rTemp0
.f92d	80 ec		bra $f91b			bra 	_OSSDLoop
.f92f					_OSSDExit:
.f92f	a9 20		lda #$20			lda		#' '
.f931	88		dey				dey
.f932	91 08		sta ($08),y			sta 	(rTemp0),y
.f934	d0 f9		bne $f92f			bne 	_OSSDExit
.f936	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/translate.asm

.f937					OSTranslateToASCII:
.f937	aa		tax				tax
.f938	bd 09 fb	lda $fb09,x			lda 	OSASCIIFromScanCode,x 		; get ASCII keystroke from scan code
.f93b	f0 45		beq $f982			beq 	_OSTTAFail 					; wrong keyboard map/type ?
.f93d	aa		tax				tax 								; save in X
.f93e	ad 06 02	lda $0206			lda 	OSKeyStatus+OS_KP_LEFTCTRL_ROW
.f941	29 10		and #$10			and 	#OS_KP_LEFTCTRL_COL
.f943	d0 36		bne $f97b			bne 	_OSTTAControl 				; check for CTRL + x
.f945	ad 06 02	lda $0206			lda 	OSKeyStatus+OS_KP_LEFTSHIFT_ROW
.f948	29 04		and #$04			and 	#OS_KP_LEFTSHIFT_COL
.f94a	d0 07		bne $f953			bne 	_OSTTAShift 				; check for left/right shift
.f94c	ad 0f 02	lda $020f			lda 	OSKeyStatus+OS_KP_RIGHTSHIFT_ROW
.f94f	29 02		and #$02			and 	#OS_KP_RIGHTSHIFT_COL
.f951	f0 2c		beq $f97f			beq 	_OSTTAExit
.f953					_OSTTAShift:
.f953	e0 61		cpx #$61			cpx 	#"a"						; check alpha
.f955	90 0a		bcc $f961			bcc 	_OSTTANotAlpha
.f957	e0 7b		cpx #$7b			cpx 	#"z"+1
.f959	b0 06		bcs $f961			bcs 	_OSTTANotAlpha
.f95b	8a		txa				txa									; capitalise.
.f95c	49 20		eor #$20			eor 	#$20
.f95e	aa		tax				tax
.f95f	80 1e		bra $f97f			bra 	_OSTTAExit
.f961					_OSTTANotAlpha:
.f961	86 08		stx $08				stx 	rTemp0 						; save ASCII code.
.f963	a0 00		ldy #$00			ldy 	#0 							; check the shift table
.f965					_OSTTACheckShiftTable:
.f965	b9 0b fc	lda $fc0b,y			lda 	OSShiftFixTable+1,y 		; tax = shifted character
.f968	aa		tax				tax
.f969	b9 0a fc	lda $fc0a,y			lda 	OSShiftFixTable,y 			; check unshifted match
.f96c	c5 08		cmp $08				cmp 	rTemp0
.f96e	f0 0f		beq $f97f			beq 	_OSTTAExit
.f970	c8		iny				iny 								; next pair
.f971	c8		iny				iny
.f972	b9 0a fc	lda $fc0a,y			lda 	OSShiftFixTable,y 			; until all checked
.f975	10 ee		bpl $f965			bpl 	_OSTTACheckShiftTable
.f977	a6 08		ldx $08				ldx 	rTemp0 						; not shiftable.
.f979	80 04		bra $f97f			bra 	_OSTTAExit
.f97b					_OSTTAControl:
.f97b	8a		txa				txa
.f97c	29 1f		and #$1f			and 	#31
.f97e	aa		tax				tax
.f97f					_OSTTAExit:
.f97f	8a		txa				txa
.f980	18		clc				clc
.f981	60		rts				rts
.f982					_OSTTAFail:
.f982	38		sec				sec
.f983	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/editor/editor.asm

.f984					OSEditNewLine:
.f984	9c 3d 02	stz $023d			stz 	OSEditLength 				; clear buffer
.f987					OSEditLine:
.f987	ad 00 02	lda $0200			lda 	OSXPos 						; save edit point.
.f98a	8d 38 02	sta $0238			sta 	OSXEdit
.f98d	ad 01 02	lda $0201			lda 	OSYPos
.f990	8d 39 02	sta $0239			sta 	OSYEdit
.f993	ad 3d 02	lda $023d			lda 	OSEditLength 				; edit point at end of line.
.f996	8d 3b 02	sta $023b			sta 	OSEditPos
.f999	9c 3c 02	stz $023c			stz 	OSEditScroll 				; no initial scrolling
.f99c	38		sec				sec 								; calculate edit box width.
.f99d	ad 02 02	lda $0202			lda 	OSXSize
.f9a0	ed 00 02	sbc $0200			sbc 	OSXPos
.f9a3	3a		dec a				dec 	a 							; one forr RHS
.f9a4	8d 3a 02	sta $023a			sta 	OSEditWidth
.f9a7					_OSForceUpdate:
.f9a7	38		sec				sec 								; force repaint.
.f9a8	20 6f fa	jsr $fa6f			jsr 	OSEUpdatePosition 			; update the position.
.f9ab					_OSEditLoop:
.f9ab	20 f4 fa	jsr $faf4			jsr 	OSEPositionCursor
.f9ae	20 41 fc	jsr $fc41			jsr 	OSReadKeystroke 			; get one key.
.f9b1	c9 03		cmp #$03			cmp 	#3 							; down, up, esc, CR all exit
.f9b3	f0 0c		beq $f9c1			beq 	_OSEditExit
.f9b5	c9 06		cmp #$06			cmp 	#6
.f9b7	f0 08		beq $f9c1			beq 	_OSEditExit
.f9b9	c9 0d		cmp #$0d			cmp 	#13
.f9bb	f0 04		beq $f9c1			beq 	_OSEditExit
.f9bd	c9 1b		cmp #$1b			cmp 	#27
.f9bf	d0 0b		bne $f9cc			bne 	_OSEditContinue
.f9c1					_OSEditExit:
.f9c1	ae 3d 02	ldx $023d			ldx 	OSEditLength 				; make it ASCIIZ as well (!)
.f9c4	9e 3e 02	stz $023e,x			stz 	OSEditBuffer,x
.f9c7	a2 3d		ldx #$3d			ldx 	#OSEditLength & $FF 		; XY = Buffer
.f9c9	a0 02		ldy #$02			ldy 	#OSEditLength >> 8
.f9cb	60		rts				rts
.f9cc					_OSEditContinue:
.f9cc	c9 01		cmp #$01			cmp 	#1 							; left (Ctrl-A)
.f9ce	f0 51		beq $fa21			beq 	_OSELeft
.f9d0	c9 02		cmp #$02			cmp 	#2
.f9d2	f0 23		beq $f9f7			beq 	_OSEHome
.f9d4	c9 04		cmp #$04			cmp 	#4 							; right (Ctrl-D)
.f9d6	f0 3c		beq $fa14			beq 	_OSERight
.f9d8	c9 07		cmp #$07			cmp 	#7 							; delete at cursor (Delete)
.f9da	f0 2b		beq $fa07			beq 	_OSEDelete
.f9dc	c9 08		cmp #$08			cmp 	#8 							; backspace (<-)
.f9de	f0 1f		beq $f9ff			beq 	_OSEBackspace
.f9e0	c9 09		cmp #$09			cmp 	#9 							; tab (9)
.f9e2	f0 4c		beq $fa30			beq 	_OSETab
.f9e4	c9 20		cmp #$20			cmp 	#32 						; character code, insert it
.f9e6	90 c3		bcc $f9ab			bcc 	_OSEditLoop
.f9e8					_OSAddCharacter:
.f9e8	ae 3d 02	ldx $023d			ldx 	OSEditLength 				; already full ?
.f9eb	e0 c0		cpx #$c0			cpx 	#OSTextBufferSize
.f9ed	f0 3a		beq $fa29			beq 	_OSCheckUpdate
.f9ef	20 43 fa	jsr $fa43			jsr 	_OSEInsertCharacter 		; insert character at pos
.f9f2	ee 3b 02	inc $023b			inc 	OSEditPos 					; advance forward
.f9f5	80 b0		bra $f9a7			bra 	_OSForceUpdate 				; force a repaint.
.f9f7					_OSEHome:
.f9f7	9c 3b 02	stz $023b			stz 	OSEditPos
.f9fa	9c 3c 02	stz $023c			stz 	OSEditScroll
.f9fd	80 a8		bra $f9a7			bra 	_OSForceUpdate
.f9ff					_OSEBackspace:
.f9ff	ad 3b 02	lda $023b			lda 	OSEditPos 					; can't backspace from the start.
.fa02	f0 25		beq $fa29			beq 	_OSCheckUpdate
.fa04	ce 3b 02	dec $023b			dec 	OSEditPos
.fa07					_OSEDelete:
.fa07	ad 3d 02	lda $023d			lda 	OSEditLength 				; not if at far right, e.g. appending to end.
.fa0a	cd 3b 02	cmp $023b			cmp 	OSEditPos
.fa0d	f0 1a		beq $fa29			beq 	_OSCheckUpdate
.fa0f	20 5c fa	jsr $fa5c			jsr 	_OSEDeleteCharacter 		; delete character and repaint.
.fa12	80 93		bra $f9a7			bra 	_OSForceUpdate
.fa14					_OSERight:
.fa14	ad 3b 02	lda $023b			lda 	OSEditPos 					; if x before end then go right
.fa17	cd 3d 02	cmp $023d			cmp 	OSEditLength
.fa1a	f0 0d		beq $fa29			beq 	_OSCheckUpdate
.fa1c	ee 3b 02	inc $023b			inc 	OSEditPos
.fa1f	80 08		bra $fa29			bra 	_OSCheckUpdate
.fa21					_OSELeft:
.fa21	ad 3b 02	lda $023b			lda 	OSEditPos 					; if x past start go left
.fa24	f0 03		beq $fa29			beq 	_OSCheckUpdate
.fa26	ce 3b 02	dec $023b			dec 	OSEditPos
.fa29					_OSCheckUpdate:
.fa29	18		clc				clc
.fa2a	20 6f fa	jsr $fa6f			jsr 	OSEUpdatePosition
.fa2d	4c ab f9	jmp $f9ab			jmp 	_OSEditLoop
.fa30					_OSETab:
.fa30	18		clc				clc
.fa31	ad 3b 02	lda $023b			lda 	OSEditPos
.fa34	69 08		adc #$08			adc 	#8
.fa36	cd 3d 02	cmp $023d			cmp 	OSEditLength
.fa39	90 03		bcc $fa3e			bcc 	_OSTabOk
.fa3b	ad 3d 02	lda $023d			lda 	OSEditLength
.fa3e					_OSTabOk:
.fa3e	8d 3b 02	sta $023b			sta 	OSEditPos
.fa41	80 e6		bra $fa29			bra 	_OSCheckUpdate
.fa43					_OSEInsertCharacter:
.fa43	48		pha				pha 								; save character
.fa44	ae 3d 02	ldx $023d			ldx 	OSEditLength
.fa47	e8		inx				inx
.fa48					_OSMakeSpace:
.fa48	ca		dex				dex
.fa49	bd 3e 02	lda $023e,x			lda 	OSEditBuffer,x
.fa4c	9d 3f 02	sta $023f,x			sta 	OSEditBuffer+1,x
.fa4f	ec 3b 02	cpx $023b			cpx 	OSEditPos
.fa52	d0 f4		bne $fa48			bne 	_OSMakeSpace
.fa54	68		pla				pla
.fa55	9d 3e 02	sta $023e,x			sta 	OSEditBuffer,x
.fa58	ee 3d 02	inc $023d			inc 	OSEditLength
.fa5b	60		rts				rts
.fa5c					_OSEDeleteCharacter:
.fa5c	ae 3b 02	ldx $023b			ldx 	OSEditPos
.fa5f					_OSERemove:
.fa5f	bd 3f 02	lda $023f,x			lda 	OSEditBuffer+1,x
.fa62	9d 3e 02	sta $023e,x			sta 	OSEditBuffer,x
.fa65	e8		inx				inx
.fa66	ec 3d 02	cpx $023d			cpx 	OSEditLength
.fa69	90 f4		bcc $fa5f			bcc 	_OSERemove
.fa6b	ce 3d 02	dec $023d			dec 	OSEditLength
.fa6e	60		rts				rts
.fa6f					OSEUpdatePosition:
.fa6f	08		php				php 								; save repaint flag.
.fa70	ad 3c 02	lda $023c			lda 	OSEditScroll 				; save old edit scroll position.
.fa73	48		pha				pha
.fa74	20 8a fa	jsr $fa8a			jsr 	OSECheckPosition 			; check position in range of text
.fa77	20 a1 fa	jsr $faa1			jsr 	OSECheckVisible 			; is it on screen ?
.fa7a	68		pla				pla 								; has the edit scroll position changed ?
.fa7b	cd 3c 02	cmp $023c			cmp 	OSEditScroll
.fa7e	f0 03		beq $fa83			beq 	_OSECVNoChange
.fa80	28		plp				plp 								; if so, set repaint flag
.fa81	38		sec				sec
.fa82	08		php				php
.fa83					_OSECVNoChange:
.fa83	28		plp				plp	 								; do we need a repaint.
.fa84	90 03		bcc $fa89			bcc 	_OSECVNoRepaint
.fa86	20 c9 fa	jsr $fac9			jsr 	OSERepaint
.fa89					_OSECVNoRepaint:
.fa89	60		rts				rts
.fa8a					OSECheckPosition:
.fa8a	ad 3b 02	lda $023b			lda 	OSEditPos 					; if position = 255 (e.g. -1) then off left.
.fa8d	c9 ff		cmp #$ff			cmp 	#255
.fa8f	d0 04		bne $fa95			bne 	_OSECPNotLeft
.fa91	9c 3b 02	stz $023b			stz 	OSEditPos
.fa94	60		rts				rts
.fa95					_OSECPNotLeft:
.fa95	cd 3d 02	cmp $023d			cmp 	OSEditLength 				; if >= edit length reset to edit length
.fa98	d0 06		bne $faa0			bne 	_OSEPCNotRight
.fa9a	ad 3d 02	lda $023d			lda 	OSEditLength
.fa9d	8d 3b 02	sta $023b			sta 	OSEditPos
.faa0					_OSEPCNotRight:
.faa0	60		rts				rts
.faa1					OSECheckVisible:
.faa1	ad 3b 02	lda $023b			lda 	OSEditPos 					; if editpos < editscroll
.faa4	cd 3c 02	cmp $023c			cmp 	OSEditScroll
.faa7	b0 04		bcs $faad			bcs 	_OSENotOffLeft
.faa9	8d 3c 02	sta $023c			sta 	OSEditScroll 				; then scroll at that position.
.faac	60		rts				rts
.faad					_OSENotOffLeft:
.faad	38		sec				sec
.faae	ad 3b 02	lda $023b			lda 	OSEditPos
.fab1	ed 3c 02	sbc $023c			sbc 	OSEditScroll
.fab4	cd 3a 02	cmp $023a			cmp 	OSEditWidth
.fab7	b0 01		bcs $faba			bcs 	_OSEOffRight
.fab9	60		rts				rts
.faba					_OSEOffRight:
.faba	38		sec				sec
.fabb	ad 3b 02	lda $023b			lda 	OSEditPos
.fabe	ed 3a 02	sbc $023a			sbc 	OSEditWidth
.fac1	b0 02		bcs $fac5			bcs 	_OSENoTrim
.fac3	a9 00		lda #$00			lda 	#0
.fac5					_OSENoTrim:
.fac5	8d 3c 02	sta $023c			sta 	OSEditScroll
.fac8	60		rts				rts
.fac9					OSERepaint:
.fac9	ad 38 02	lda $0238			lda 	OSXEdit 					; reset drawing pos
.facc	8d 00 02	sta $0200			sta 	OSXPos
.facf	ad 39 02	lda $0239			lda 	OSYEdit
.fad2	8d 01 02	sta $0201			sta 	OSYPos
.fad5	ae 3c 02	ldx $023c			ldx 	OSEditScroll 				; start data from here.
.fad8	ac 3a 02	ldy $023a			ldy 	OSEditWidth 				; counter
.fadb					_OSERepaintLoop:
.fadb	bd 3e 02	lda $023e,x			lda 	OSEditBuffer,x 				; read character from buffer
.fade	ec 3d 02	cpx $023d			cpx 	OSEditLength 				; past end of buffer
.fae1	90 02		bcc $fae5			bcc 	_OSEOut
.fae3	a9 20		lda #$20			lda 	#" "
.fae5	da		phx		_OSEOut:phx 								; output character.
.fae6	5a		phy				phy
.fae7	20 14 f8	jsr $f814			jsr 	OSWritePhysical
.faea	7a		ply				ply
.faeb	fa		plx				plx
.faec	ee 00 02	inc $0200			inc 	OSXPos 						; next screen pos
.faef	e8		inx				inx									; next char
.faf0	88		dey				dey 								; one fewer to do.
.faf1	d0 e8		bne $fadb			bne 	_OSERepaintLoop
.faf3	60		rts				rts
.faf4					OSEPositionCursor:
.faf4	38		sec				sec
.faf5	ad 3b 02	lda $023b			lda 	OSEditPos
.faf8	ed 3c 02	sbc $023c			sbc 	OSEditScroll
.fafb	18		clc				clc
.fafc	6d 38 02	adc $0238			adc 	OSXEdit
.faff	8d 00 02	sta $0200			sta 	OSXPos
.fb02	ad 39 02	lda $0239			lda 	OSYEdit
.fb05	8d 01 02	sta $0201			sta 	OSYPos
.fb08	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/generated/ps2convert.asm

.fb09					OSASCIIFromScanCode:
>fb09	00					.byte	$00 ; $00
>fb0a	19					.byte	$19 ; $01 chr$(25)
>fb0b	00					.byte	$00 ; $02
>fb0c	15					.byte	$15 ; $03 chr$(21)
>fb0d	13					.byte	$13 ; $04 chr$(19)
>fb0e	11					.byte	$11 ; $05 chr$(17)
>fb0f	12					.byte	$12 ; $06 chr$(18)
>fb10	00					.byte	$00 ; $07
>fb11	00					.byte	$00 ; $08
>fb12	1a					.byte	$1a ; $09 chr$(26)
>fb13	18					.byte	$18 ; $0a chr$(24)
>fb14	16					.byte	$16 ; $0b chr$(22)
>fb15	14					.byte	$14 ; $0c chr$(20)
>fb16	09					.byte	$09 ; $0d chr$(9)
>fb17	60					.byte	$60 ; $0e '`'
>fb18	00					.byte	$00 ; $0f
>fb19	00					.byte	$00 ; $10
>fb1a	00					.byte	$00 ; $11
>fb1b	00					.byte	$00 ; $12
>fb1c	00					.byte	$00 ; $13
>fb1d	00					.byte	$00 ; $14
>fb1e	71					.byte	$71 ; $15 'q'
>fb1f	31					.byte	$31 ; $16 '1'
>fb20	00					.byte	$00 ; $17
>fb21	00					.byte	$00 ; $18
>fb22	00					.byte	$00 ; $19
>fb23	7a					.byte	$7a ; $1a 'z'
>fb24	73					.byte	$73 ; $1b 's'
>fb25	61					.byte	$61 ; $1c 'a'
>fb26	77					.byte	$77 ; $1d 'w'
>fb27	32					.byte	$32 ; $1e '2'
>fb28	00					.byte	$00 ; $1f
>fb29	00					.byte	$00 ; $20
>fb2a	63					.byte	$63 ; $21 'c'
>fb2b	78					.byte	$78 ; $22 'x'
>fb2c	64					.byte	$64 ; $23 'd'
>fb2d	65					.byte	$65 ; $24 'e'
>fb2e	34					.byte	$34 ; $25 '4'
>fb2f	33					.byte	$33 ; $26 '3'
>fb30	00					.byte	$00 ; $27
>fb31	00					.byte	$00 ; $28
>fb32	20					.byte	$20 ; $29 ' '
>fb33	76					.byte	$76 ; $2a 'v'
>fb34	66					.byte	$66 ; $2b 'f'
>fb35	74					.byte	$74 ; $2c 't'
>fb36	72					.byte	$72 ; $2d 'r'
>fb37	35					.byte	$35 ; $2e '5'
>fb38	00					.byte	$00 ; $2f
>fb39	00					.byte	$00 ; $30
>fb3a	6e					.byte	$6e ; $31 'n'
>fb3b	62					.byte	$62 ; $32 'b'
>fb3c	68					.byte	$68 ; $33 'h'
>fb3d	67					.byte	$67 ; $34 'g'
>fb3e	79					.byte	$79 ; $35 'y'
>fb3f	36					.byte	$36 ; $36 '6'
>fb40	00					.byte	$00 ; $37
>fb41	00					.byte	$00 ; $38
>fb42	00					.byte	$00 ; $39
>fb43	6d					.byte	$6d ; $3a 'm'
>fb44	6a					.byte	$6a ; $3b 'j'
>fb45	75					.byte	$75 ; $3c 'u'
>fb46	37					.byte	$37 ; $3d '7'
>fb47	38					.byte	$38 ; $3e '8'
>fb48	00					.byte	$00 ; $3f
>fb49	00					.byte	$00 ; $40
>fb4a	2c					.byte	$2c ; $41 ','
>fb4b	6b					.byte	$6b ; $42 'k'
>fb4c	69					.byte	$69 ; $43 'i'
>fb4d	6f					.byte	$6f ; $44 'o'
>fb4e	30					.byte	$30 ; $45 '0'
>fb4f	39					.byte	$39 ; $46 '9'
>fb50	00					.byte	$00 ; $47
>fb51	00					.byte	$00 ; $48
>fb52	2e					.byte	$2e ; $49 '.'
>fb53	2f					.byte	$2f ; $4a '/'
>fb54	6c					.byte	$6c ; $4b 'l'
>fb55	3b					.byte	$3b ; $4c ';'
>fb56	70					.byte	$70 ; $4d 'p'
>fb57	2d					.byte	$2d ; $4e '-'
>fb58	00					.byte	$00 ; $4f
>fb59	00					.byte	$00 ; $50
>fb5a	00					.byte	$00 ; $51
>fb5b	27					.byte	$27 ; $52 '''
>fb5c	00					.byte	$00 ; $53
>fb5d	5b					.byte	$5b ; $54 '['
>fb5e	3d					.byte	$3d ; $55 '='
>fb5f	00					.byte	$00 ; $56
>fb60	00					.byte	$00 ; $57
>fb61	00					.byte	$00 ; $58
>fb62	00					.byte	$00 ; $59
>fb63	0d					.byte	$0d ; $5a chr$(13)
>fb64	5d					.byte	$5d ; $5b ']'
>fb65	00					.byte	$00 ; $5c
>fb66	7c					.byte	$7c ; $5d '|'
>fb67	00					.byte	$00 ; $5e
>fb68	00					.byte	$00 ; $5f
>fb69	00					.byte	$00 ; $60
>fb6a	00					.byte	$00 ; $61
>fb6b	00					.byte	$00 ; $62
>fb6c	00					.byte	$00 ; $63
>fb6d	00					.byte	$00 ; $64
>fb6e	00					.byte	$00 ; $65
>fb6f	08					.byte	$08 ; $66 chr$(8)
>fb70	00					.byte	$00 ; $67
>fb71	00					.byte	$00 ; $68
>fb72	00					.byte	$00 ; $69
>fb73	00					.byte	$00 ; $6a
>fb74	01					.byte	$01 ; $6b chr$(1)
>fb75	00					.byte	$00 ; $6c
>fb76	00					.byte	$00 ; $6d
>fb77	00					.byte	$00 ; $6e
>fb78	00					.byte	$00 ; $6f
>fb79	00					.byte	$00 ; $70
>fb7a	00					.byte	$00 ; $71
>fb7b	03					.byte	$03 ; $72 chr$(3)
>fb7c	00					.byte	$00 ; $73
>fb7d	04					.byte	$04 ; $74 chr$(4)
>fb7e	06					.byte	$06 ; $75 chr$(6)
>fb7f	1b					.byte	$1b ; $76 chr$(27)
>fb80	00					.byte	$00 ; $77
>fb81	00					.byte	$00 ; $78
>fb82	00					.byte	$00 ; $79
>fb83	00					.byte	$00 ; $7a
>fb84	00					.byte	$00 ; $7b
>fb85	00					.byte	$00 ; $7c
>fb86	00					.byte	$00 ; $7d
>fb87	00					.byte	$00 ; $7e
>fb88	00					.byte	$00 ; $7f
>fb89	00					.byte	$00 ; $80
>fb8a	00					.byte	$00 ; $81
>fb8b	00					.byte	$00 ; $82
>fb8c	17					.byte	$17 ; $83 chr$(23)
>fb8d	00					.byte	$00 ; $84
>fb8e	00					.byte	$00 ; $85
>fb8f	00					.byte	$00 ; $86
>fb90	00					.byte	$00 ; $87
>fb91	00					.byte	$00 ; $88
>fb92	00					.byte	$00 ; $89
>fb93	00					.byte	$00 ; $8a
>fb94	00					.byte	$00 ; $8b
>fb95	00					.byte	$00 ; $8c
>fb96	00					.byte	$00 ; $8d
>fb97	00					.byte	$00 ; $8e
>fb98	00					.byte	$00 ; $8f
>fb99	00					.byte	$00 ; $90
>fb9a	00					.byte	$00 ; $91
>fb9b	00					.byte	$00 ; $92
>fb9c	00					.byte	$00 ; $93
>fb9d	00					.byte	$00 ; $94
>fb9e	00					.byte	$00 ; $95
>fb9f	00					.byte	$00 ; $96
>fba0	00					.byte	$00 ; $97
>fba1	00					.byte	$00 ; $98
>fba2	00					.byte	$00 ; $99
>fba3	00					.byte	$00 ; $9a
>fba4	00					.byte	$00 ; $9b
>fba5	00					.byte	$00 ; $9c
>fba6	00					.byte	$00 ; $9d
>fba7	00					.byte	$00 ; $9e
>fba8	00					.byte	$00 ; $9f
>fba9	00					.byte	$00 ; $a0
>fbaa	00					.byte	$00 ; $a1
>fbab	00					.byte	$00 ; $a2
>fbac	00					.byte	$00 ; $a3
>fbad	00					.byte	$00 ; $a4
>fbae	00					.byte	$00 ; $a5
>fbaf	00					.byte	$00 ; $a6
>fbb0	00					.byte	$00 ; $a7
>fbb1	00					.byte	$00 ; $a8
>fbb2	00					.byte	$00 ; $a9
>fbb3	00					.byte	$00 ; $aa
>fbb4	00					.byte	$00 ; $ab
>fbb5	00					.byte	$00 ; $ac
>fbb6	00					.byte	$00 ; $ad
>fbb7	00					.byte	$00 ; $ae
>fbb8	00					.byte	$00 ; $af
>fbb9	00					.byte	$00 ; $b0
>fbba	00					.byte	$00 ; $b1
>fbbb	00					.byte	$00 ; $b2
>fbbc	00					.byte	$00 ; $b3
>fbbd	00					.byte	$00 ; $b4
>fbbe	00					.byte	$00 ; $b5
>fbbf	00					.byte	$00 ; $b6
>fbc0	00					.byte	$00 ; $b7
>fbc1	00					.byte	$00 ; $b8
>fbc2	00					.byte	$00 ; $b9
>fbc3	00					.byte	$00 ; $ba
>fbc4	00					.byte	$00 ; $bb
>fbc5	00					.byte	$00 ; $bc
>fbc6	00					.byte	$00 ; $bd
>fbc7	00					.byte	$00 ; $be
>fbc8	00					.byte	$00 ; $bf
>fbc9	00					.byte	$00 ; $c0
>fbca	00					.byte	$00 ; $c1
>fbcb	00					.byte	$00 ; $c2
>fbcc	00					.byte	$00 ; $c3
>fbcd	00					.byte	$00 ; $c4
>fbce	00					.byte	$00 ; $c5
>fbcf	00					.byte	$00 ; $c6
>fbd0	00					.byte	$00 ; $c7
>fbd1	00					.byte	$00 ; $c8
>fbd2	00					.byte	$00 ; $c9
>fbd3	00					.byte	$00 ; $ca
>fbd4	00					.byte	$00 ; $cb
>fbd5	00					.byte	$00 ; $cc
>fbd6	00					.byte	$00 ; $cd
>fbd7	00					.byte	$00 ; $ce
>fbd8	00					.byte	$00 ; $cf
>fbd9	00					.byte	$00 ; $d0
>fbda	00					.byte	$00 ; $d1
>fbdb	00					.byte	$00 ; $d2
>fbdc	00					.byte	$00 ; $d3
>fbdd	00					.byte	$00 ; $d4
>fbde	00					.byte	$00 ; $d5
>fbdf	00					.byte	$00 ; $d6
>fbe0	00					.byte	$00 ; $d7
>fbe1	00					.byte	$00 ; $d8
>fbe2	00					.byte	$00 ; $d9
>fbe3	00					.byte	$00 ; $da
>fbe4	00					.byte	$00 ; $db
>fbe5	00					.byte	$00 ; $dc
>fbe6	00					.byte	$00 ; $dd
>fbe7	00					.byte	$00 ; $de
>fbe8	00					.byte	$00 ; $df
>fbe9	00					.byte	$00 ; $e0
>fbea	00					.byte	$00 ; $e1
>fbeb	00					.byte	$00 ; $e2
>fbec	00					.byte	$00 ; $e3
>fbed	00					.byte	$00 ; $e4
>fbee	00					.byte	$00 ; $e5
>fbef	00					.byte	$00 ; $e6
>fbf0	00					.byte	$00 ; $e7
>fbf1	00					.byte	$00 ; $e8
>fbf2	45					.byte	$45 ; $e9 'E'
>fbf3	00					.byte	$00 ; $ea
>fbf4	01					.byte	$01 ; $eb chr$(1)
>fbf5	02					.byte	$02 ; $ec chr$(2)
>fbf6	00					.byte	$00 ; $ed
>fbf7	00					.byte	$00 ; $ee
>fbf8	00					.byte	$00 ; $ef
>fbf9	00					.byte	$00 ; $f0
>fbfa	07					.byte	$07 ; $f1 chr$(7)
>fbfb	03					.byte	$03 ; $f2 chr$(3)
>fbfc	00					.byte	$00 ; $f3
>fbfd	04					.byte	$04 ; $f4 chr$(4)
>fbfe	06					.byte	$06 ; $f5 chr$(6)
>fbff	00					.byte	$00 ; $f6
>fc00	00					.byte	$00 ; $f7
>fc01	00					.byte	$00 ; $f8
>fc02	00					.byte	$00 ; $f9
>fc03	00					.byte	$00 ; $fa
>fc04	00					.byte	$00 ; $fb
>fc05	00					.byte	$00 ; $fc
>fc06	00					.byte	$00 ; $fd
>fc07	00					.byte	$00 ; $fe
>fc08	00					.byte	$00 ; $ff
>fc09	ff					.byte	$FF
.fc0a					OSShiftFixTable:
>fc0a	60 7e					.byte	$60,$7e		; ` => ~
>fc0c	31 21					.byte	$31,$21		; 1 => !
>fc0e	32 40					.byte	$32,$40		; 2 => @
>fc10	33 23					.byte	$33,$23		; 3 => #
>fc12	34 24					.byte	$34,$24		; 4 => $
>fc14	35 25					.byte	$35,$25		; 5 => %
>fc16	36 5e					.byte	$36,$5e		; 6 => ^
>fc18	37 26					.byte	$37,$26		; 7 => &
>fc1a	38 2a					.byte	$38,$2a		; 8 => *
>fc1c	39 28					.byte	$39,$28		; 9 => (
>fc1e	30 29					.byte	$30,$29		; 0 => )
>fc20	2d 5f					.byte	$2d,$5f		; - => _
>fc22	3d 2b					.byte	$3d,$2b		; = => +
>fc24	3b 3a					.byte	$3b,$3a		; ; => :
>fc26	27 22					.byte	$27,$22		; ' => "
>fc28	2c 3c					.byte	$2c,$3c		; , => <
>fc2a	2e 3e					.byte	$2e,$3e		; . => >
>fc2c	2f 3f					.byte	$2f,$3f		; / => ?
>fc2e	ff					.byte	$FF
=2					OS_KP_LEFTCTRL_ROW = 2
=$10					OS_KP_LEFTCTRL_COL = $10
=2					OS_KP_LEFTSHIFT_ROW = 2
=$04					OS_KP_LEFTSHIFT_COL = $04
=11					OS_KP_RIGHTSHIFT_ROW = 11
=$02					OS_KP_RIGHTSHIFT_COL = $02
=4					OS_KP_C_ROW = 4
=$02					OS_KP_C_COL = $02
=3					OS_KP_Z_ROW = 3
=$04					OS_KP_Z_COL = $04
=4					OS_KP_X_ROW = 4
=$04					OS_KP_X_COL = $04
=8					OS_KP_K_ROW = 8
=$04					OS_KP_K_COL = $04
=7					OS_KP_M_ROW = 7
=$04					OS_KP_M_COL = $04
=9					OS_KP_L_ROW = 9
=$08					OS_KP_L_COL = $08

;******  Return to file: include.files


;******  Processing file: src/keyboard/keyboard.asm

.fc2f					OSIsKeyAvailable:
.fc2f	48		pha				pha
.fc30	18		clc				clc
.fc31	ad 34 02	lda $0234			lda 	OSKeyboardQueueSize  		; get entries in queue
.fc34	d0 01		bne $fc37			bne 	_OSIKAHasKey
.fc36	38		sec				sec
.fc37					_OSIKAHasKey:
.fc37	68		pla				pla
.fc38	60		rts				rts
.fc39					OSReadKeyboard:
.fc39	da		phx				phx
.fc3a	a2 01		ldx #$01			ldx 	#1
.fc3c	20 62 fc	jsr $fc62			jsr 	OSReadDevice
.fc3f	fa		plx				plx
.fc40	60		rts				rts
.fc41					OSReadKeystroke:
.fc41	da		phx				phx 								; save XY
.fc42	5a		phy				phy
.fc43	20 0e f8	jsr $f80e			jsr 	OSReadPhysical 				; save old character
.fc46	8d 37 02	sta $0237			sta 	OSRKOriginal
.fc49	a9 7f		lda #$7f			lda 	#$7F 						; write prompt
.fc4b	20 14 f8	jsr $f814			jsr 	OSWritePhysical
.fc4e					_OSWaitKey:
.fc4e	20 68 f8	jsr $f868			jsr 	OSKeyboardDataProcess 		; this scans the keyboard, could be interrupt
.fc51	20 39 fc	jsr $fc39			jsr 	OSReadKeyboard 				; key available
.fc54	b0 f8		bcs $fc4e			bcs 	_OSWaitKey
.fc56	48		pha				pha 								; save key
.fc57	ad 37 02	lda $0237			lda 	OSRKOriginal 				; old character back
.fc5a	20 14 f8	jsr $f814			jsr 	OSWritePhysical
.fc5d	68		pla				pla 								; restore
.fc5e	7a		ply				ply
.fc5f	fa		plx				plx
.fc60	18		clc				clc 								; success
.fc61	60		rts				rts
.fc62					OSReadDevice:
.fc62	20 2f fc	jsr $fc2f			jsr 	OSIsKeyAvailable 			; key available ?
.fc65	b0 19		bcs $fc80			bcs 	_OSRDExit
.fc67	ad 24 02	lda $0224			lda 	OSKeyboardQueue 			; push char on stack
.fc6a	48		pha				pha
.fc6b	da		phx				phx
.fc6c	a2 00		ldx #$00			ldx		#0 							; remove from queue array
.fc6e					_OSRDDequeue:
.fc6e	bd 25 02	lda $0225,x			lda 	OSKeyboardQueue+1,x
.fc71	9d 24 02	sta $0224,x			sta 	OSKeyboardQueue,x
.fc74	e8		inx				inx
.fc75	ec 34 02	cpx $0234			cpx 	OSKeyboardQueueSize
.fc78	d0 f4		bne $fc6e			bne 	_OSRDDequeue
.fc7a	ce 34 02	dec $0234			dec 	OSKeyboardQueueSize			; dec queue count
.fc7d	fa		plx				plx
.fc7e	68		pla				pla 								; restore key
.fc7f	18		clc				clc
.fc80					_OSRDExit:
.fc80	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/screen/charout.asm

.fc81					OSWriteScreen:
.fc81	da		phx				phx
.fc82	a2 00		ldx #$00			ldx 	#0
.fc84	20 89 fc	jsr $fc89			jsr 	OSWriteDevice
.fc87	fa		plx				plx
.fc88	60		rts				rts
.fc89					OSWriteDevice:
.fc89	48		pha				pha
.fc8a	da		phx				phx
.fc8b	5a		phy				phy
.fc8c	c9 20		cmp #$20			cmp 	#32 						; standard character
.fc8e	b0 0c		bcs $fc9c			bcs 	_OSWriteDirect
.fc90	c9 10		cmp #$10			cmp 	#16 						; 16-32 for set colours, reserved.
.fc92	b0 0e		bcs $fca2			bcs 	_OSWriteDeviceExit
.fc94	0a		asl a				asl 	a 							; make to an offset in vector table
.fc95	aa		tax				tax
.fc96	4a		lsr a				lsr 	a
.fc97	20 a7 fc	jsr $fca7			jsr 	_OSCallVectorCode
.fc9a	80 06		bra $fca2			bra 	_OSWriteDeviceExit
.fc9c					_OSWriteDirect:
.fc9c	20 14 f8	jsr $f814			jsr 	OSWritePhysical
.fc9f	20 eb fc	jsr $fceb			jsr 	_OSCursorAdvance
.fca2					_OSWriteDeviceExit:
.fca2	7a		ply				ply
.fca3	fa		plx				plx
.fca4	68		pla				pla
.fca5	18		clc				clc 								; written fine.
.fca6	60		rts				rts
.fca7					_OSCallVectorCode:
.fca7	7c ab fc	jmp ($fcab,x)			jmp 	(_OSWDVector,x)
.fcaa					_OSWNoFunction:
.fcaa	60		rts				rts
.fcab					_OSWDVector:
>fcab	aa fc						.word 	_OSWNoFunction 				; $00 	No operation
>fcad	d9 fc						.word 	_OSCursorLeft 				; $01 	Left 		(Ctrl-A)
>fcaf	22 fd						.word 	OSHomeCursor 				; $02 	Home Cursor (Ctrl-B)
>fcb1	f9 fc						.word 	_OSCursorDown 				; $03 	Down 		(Ctrl-C)
>fcb3	e2 fc						.word 	_OSCursorRight 				; $04 	Right 		(Ctrl-D)
>fcb5	eb fc						.word 	_OSCursorAdvance			; $05 	Advance
>fcb7	0b fd						.word 	_OSCursorUp 				; $06	Up 			(Ctrl-F)
>fcb9	aa fc						.word 	_OSWNoFunction 				; $07 	Delete 		(Del)
>fcbb	cb fc						.word 	_OSBackspace				; $08 	Backspace 	(Backspace)
>fcbd	17 fd						.word 	_OSWHTab 					; $09	Tab
>fcbf	aa fc						.word 	_OSWNoFunction 				; $0A
>fcc1	aa fc						.word 	_OSWNoFunction 				; $0B
>fcc3	48 f8						.word 	OSClearScreen 				; $0C	ClearScreen	(Ctrl-L)
>fcc5	f6 fc						.word 	_OSNewLine 					; $0D 	CarriageRet (Enter)
>fcc7	df f8						.word 	OSScrollUp 					; $0E 	Scroll Up 	(e.g. off bottom)
>fcc9	0c f9						.word 	OSScrollDown 				; $0F 	Scroll Down (e.g. off top)
.fccb					_OSBackspace:
.fccb	ad 00 02	lda $0200			lda 	OSXPos 						; left side already ?
.fcce	f0 11		beq $fce1			beq 	_OSCLExit
.fcd0	ce 00 02	dec $0200			dec 	OSXPos
.fcd3	a9 20		lda #$20			lda 	#' '
.fcd5	20 14 f8	jsr $f814			jsr 	OSWritePhysical
.fcd8	60		rts				rts
.fcd9					_OSCursorLeft:
.fcd9	ad 00 02	lda $0200			lda 	OSXPos 						; left side
.fcdc	f0 03		beq $fce1			beq 	_OSCLExit 					; yes, exit
.fcde	ce 00 02	dec $0200			dec 	OSXPos 						; cursor left
.fce1					_OSCLExit:
.fce1	60		rts				rts
.fce2					_OSCursorRight:
.fce2	ad 00 02	lda $0200			lda 	OSXPos 						; reached right side ?
.fce5	1a		inc a				inc 	a
.fce6	cd 02 02	cmp $0202			cmp 	OSXSize
.fce9	f0 1f		beq $fd0a			beq 	_OSCRExit 					; yes, exit.
.fceb					_OSCursorAdvance:
.fceb	ee 00 02	inc $0200			inc 	OSXPos 						; advance cursor and position.
.fcee	ad 00 02	lda $0200			lda 	OSXPos 						; reached RHS
.fcf1	cd 02 02	cmp $0202			cmp 	OSXSize
.fcf4	90 14		bcc $fd0a			bcc 	_OSCRExit 					; if so exit.
.fcf6					_OSNewLine:
.fcf6	9c 00 02	stz $0200			stz 	OSXPos 						; start next line.
.fcf9					_OSCursorDown:
.fcf9	ee 01 02	inc $0201			inc 	OSYPos
.fcfc	ad 01 02	lda $0201			lda 	OSYPos 						; reached bottom
.fcff	cd 03 02	cmp $0203			cmp 	OSYSize
.fd02	90 06		bcc $fd0a			bcc 	_OSCRExit
.fd04	ce 01 02	dec $0201			dec 	OSYPos 						; back to bottom line.
.fd07	20 df f8	jsr $f8df			jsr 	OSScrollUp 					; scroll whole screen up.
.fd0a					_OSCRExit:
.fd0a	60		rts				rts
.fd0b					_OSCursorUp:
.fd0b	ce 01 02	dec $0201			dec 	OSYPos 						; up
.fd0e	10 fa		bpl $fd0a			bpl 	_OSCRExit 					; still on screen
.fd10	ee 01 02	inc $0201			inc 	OSYPos 						; fix up
.fd13	20 0c f9	jsr $f90c			jsr 	OSScrollDown 				; scroll down.
.fd16	60		rts				rts
.fd17					_OSWHTab:
.fd17	20 eb fc	jsr $fceb			jsr 	_OSCursorAdvance
.fd1a	ad 00 02	lda $0200			lda 	OSXPos
.fd1d	29 07		and #$07			and 	#7
.fd1f	d0 f6		bne $fd17			bne 	_OSWHTab
.fd21	60		rts				rts
.fd22					OSHomeCursor:
.fd22	9c 00 02	stz $0200			stz 	OSXPos
.fd25	9c 01 02	stz $0201			stz 	OSYPos
.fd28	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/screen/writestring.asm

.fd29					OSWriteStringZ:
.fd29	48		pha				pha
.fd2a	da		phx				phx
.fd2b	5a		phy				phy
.fd2c	86 0a		stx $0a				stx		rTemp1
.fd2e	84 0b		sty $0b				sty 	rTemp1+1
.fd30	a2 ff		ldx #$ff			ldx 	#255
.fd32	a0 ff		ldy #$ff			ldy 	#255
.fd34	80 0c		bra $fd42			bra 	OSWSLoop
.fd36					OSWriteString:
.fd36	48		pha				pha
.fd37	da		phx				phx
.fd38	5a		phy				phy
.fd39	86 0a		stx $0a				stx		rTemp1
.fd3b	84 0b		sty $0b				sty 	rTemp1+1
.fd3d	b2 0a		lda ($0a)			lda 	(rTemp1)
.fd3f	aa		tax				tax
.fd40	a0 00		ldy #$00			ldy 	#0
.fd42					OSWSLoop:
.fd42	e0 00		cpx #$00			cpx 	#0
.fd44	f0 0b		beq $fd51			beq 	_OSWSExit
.fd46	ca		dex				dex
.fd47	c8		iny				iny
.fd48	b1 0a		lda ($0a),y			lda 	(rTemp1),y
.fd4a	f0 05		beq $fd51			beq 	_OSWSExit
.fd4c	20 81 fc	jsr $fc81			jsr 	OSWriteScreen
.fd4f	80 f1		bra $fd42			bra 	OSWSLoop
.fd51					_OSWSExit:
.fd51	7a		ply				ply
.fd52	fa		plx				plx
.fd53	68		pla				pla
.fd54	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/utility/setup.asm

.fd55					OSInitialise:
.fd55	a9 28		lda #$28			lda 	#40 						; 40 x 30 display
.fd57	8d 02 02	sta $0202			sta 	OSXSize
.fd5a	a9 1e		lda #$1e			lda 	#30
.fd5c	8d 03 02	sta $0203			sta 	OSYSize
.fd5f	20 48 f8	jsr $f848			jsr 	OSClearScreen 				; clear the display
.fd62	20 d6 f8	jsr $f8d6			jsr 	OSKeyboardInitialise 		; reset the keyboard state.
.fd65	60		rts				rts
.fd66					OSGetScreenSize:
.fd66	ae 02 02	ldx $0202			ldx 	OSXSize
.fd69	ac 03 02	ldy $0203			ldy 	OSYSize
.fd6c	60		rts				rts

;******  Return to file: include.files


;******  Return to file: osrom.asm

.fd6d					MainPrompt:
>fd6d	2a 2a 2a 20 4f 4c 49 4d				.text 	"*** OLIMEX Neo6502 RetroComputer ***",13,13
>fd75	45 58 20 4e 65 6f 36 35 30 32 20 52 65 74 72 6f
>fd85	43 6f 6d 70 75 74 65 72 20 2a 2a 2a 0d 0d
>fd93	48 61 72 64 77 61 72 65				.text 	"Hardware:",13
>fd9b	3a 0d
>fd9d	20 20 20 20 54 73 76 65				.text	"    Tsvetan Usunov info@olimex.com",13
>fda5	74 61 6e 20 55 73 75 6e 6f 76 20 69 6e 66 6f 40
>fdb5	6f 6c 69 6d 65 78 2e 63 6f 6d 0d
>fdc0	20 09 20 28 61 6e 64 29				.text 	" 	 (and)",13
>fdc8	0d
>fdc9	53 6f 66 74 77 61 72 65				.text 	"Software:",13
>fdd1	3a 0d
>fdd3	20 20 20 20 50 61 75 6c				.text 	"    Paul Robson paul@robsons.org.uk",13
>fddb	20 52 6f 62 73 6f 6e 20 70 61 75 6c 40 72 6f 62
>fdeb	73 6f 6e 73 2e 6f 72 67 2e 75 6b 0d
>fdf7	20 09 20 28 61 6e 64 29				.text 	" 	 (and)",13
>fdff	0d
>fe00	0d 00						.byte 	13,0

;******  Processing file: src/generated/vectors.asmx

.ffd9	4c 87 f9	jmp $f987		jmp		OSEditLine               ; Edit line, return completion in A, line in YX
.ffdc	4c 84 f9	jmp $f984		jmp		OSEditNewLine            ; Edit line, start clear.
.ffdf	4c 36 fd	jmp $fd36		jmp		OSWriteString            ; Write length prefixed string YX to screen
.ffe2	4c 29 fd	jmp $fd29		jmp		OSWriteStringZ           ; Write ASCIIZ string YX to screen
.ffe5	4c 66 fd	jmp $fd66		jmp		OSGetScreenSize          ; Get size of screen to XY
.ffe8	4c 2f fc	jmp $fc2f		jmp		OSIsKeyAvailable         ; Check if key available (CS if so)
.ffeb	4c 41 fc	jmp $fc41		jmp		OSReadKeystroke          ; Read A from keyboard, showing cursor while waiting.
.ffee	4c 39 fc	jmp $fc39		jmp		OSReadKeyboard           ; Read A from keyboard (device 1), CC = success
.fff1	4c 81 fc	jmp $fc81		jmp		OSWriteScreen            ; Write A to screen (device 0), CC = success
.fff4	4c 62 fc	jmp $fc62		jmp		OSReadDevice             ; Read device X to A, CC = success
.fff7	4c 89 fc	jmp $fc89		jmp		OSWriteDevice            ; Write A to device X, CC = success

;******  Return to file: osrom.asm

>fffa	0d f8						.word 	NoInt 						; NMI
>fffc	00 f8						.word 	Boot 						; Reset
>fffe	0d f8						.word 	NoInt						; IRQ

;******  End of listing
