
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/osrom.bin osrom.asm
; Mon Jun  5 20:08:14 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: osrom.asm


;******  Processing file: ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSRKOriginal:
>0237							.fill 	1
=192					OSTextBufferSize = 192
.0238					OSXEdit:
>0238							.fill 	1
.0239					OSYEdit:
>0239							.fill 	1
.023a					OSEditWidth:
>023a							.fill 	1
.023b					OSEditPos:
>023b							.fill 	1
.023c					OSEditScroll:
>023c							.fill 	1
.023d					OSEditLength:
>023d							.fill 	1
.023e					OSEditBuffer:
>023e							.fill 	OSTextBufferSize+1
>02ff							.fill 	32
>031f							.align 	256

;******  Return to file: osrom.asm

.f800	20 25 fd	jsr $fd25	Boot:	jsr 	OSInitialise 				; set everything up.
.f803	a2 00		ldx #$00			ldx 	#0
.f805	bd 3d fd	lda $fd3d,x	_Intro:	lda 	MainPrompt,x
.f808	20 7d fc	jsr $fc7d			jsr 	OSWriteScreen
.f80b	e8		inx				inx
.f80c	bd 3d fd	lda $fd3d,x			lda 	MainPrompt,x
.f80f	d0 f4		bne $f805			bne 	_Intro
.f811	4c 00 10	jmp $1000			jmp 	$1000
.f814					NoInt:
.f814	40		rti				rti

;******  Processing file: include.files


;******  Processing file: src/drivers/charwrite.asm

.f815					OSReadPhysical:
.f815	20 23 f8	jsr $f823			jsr 	OSGetAddress
.f818	b2 08		lda ($08)			lda 	(rTemp0)
.f81a	60		rts				rts
.f81b					OSWritePhysical:
.f81b	48		pha				pha
.f81c	20 23 f8	jsr $f823			jsr 	OSGetAddress
.f81f	68		pla				pla
.f820	92 08		sta ($08)			sta 	(rTemp0)
.f822	60		rts				rts
.f823					OSGetAddress:
.f823	ac 01 02	ldy $0201	        ldy     OSYPos
.f826	ae 00 02	ldx $0200	        ldx 	OSXPos
.f829					OSGetAddressXY:
.f829	ad 02 02	lda $0202	        lda     OSXSize
.f82c	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.f82d	85 08		sta $08		        sta     rTemp0
.f82f	84 09		sty $09		        sty     rTemp0+1
.f831	a9 00		lda #$00	        lda     #0
.f833	a0 08		ldy #$08	        ldy     #8
.f835					_IFMLoop:
.f835	90 03		bcc $f83a	        bcc     _IFMNoAdd
.f837	18		clc		        clc
.f838	65 09		adc $09		        adc     rTemp0+1
.f83a					_IFMNoAdd:
.f83a	6a		ror a		        ror     a
.f83b	66 08		ror $08		        ror     rTemp0                    ; pull another bit out for the next iteration
.f83d	88		dey		        dey
.f83e	d0 f5		bne $f835	        bne     _IFMLoop
.f840	09 c0		ora #$c0	        ora 	#$C0
.f842	a8		tay		        tay
.f843	18		clc		        clc
.f844	8a		txa		        txa
.f845	65 08		adc $08		        adc 	rTemp0
.f847	85 08		sta $08		        sta 	rTemp0
.f849	90 01		bcc $f84c	        bcc 	_IFMNoCarry
.f84b	c8		iny		        iny
.f84c					_IFMNoCarry:
.f84c	84 09		sty $09				sty 	rTemp0+1
.f84e	60		rts		        rts

;******  Return to file: include.files


;******  Processing file: src/drivers/clear.asm

.f84f					OSClearScreen:
.f84f	a9 c0		lda #$c0			lda 	#$C0 						; set screen pos.
.f851	85 09		sta $09				sta 	rTemp0+1
.f853	64 08		stz $08				stz 	rTemp0
.f855	ac 03 02	ldy $0203			ldy 	OSYSize 					; clear height * width bytes.
.f858					_OSCSLoop1:
.f858	ae 02 02	ldx $0202			ldx 	OSXSize
.f85b					_OSCSLoop2:
.f85b	a9 20		lda #$20			lda 	#' '
.f85d	92 08		sta ($08)			sta 	(rTemp0)
.f85f	e6 08		inc $08				inc 	rTemp0
.f861	d0 02		bne $f865			bne 	_OSCSNoCarry
.f863	e6 09		inc $09				inc 	rTemp0+1
.f865					_OSCSNoCarry:
.f865	ca		dex				dex
.f866	d0 f3		bne $f85b			bne 	_OSCSLoop2
.f868	88		dey				dey
.f869	d0 ed		bne $f858			bne 	_OSCSLoop1
.f86b	20 1e fd	jsr $fd1e			jsr 	OSHomeCursor 				; cursor to (0,0)
.f86e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/ps2keyboard.asm

.f86f					OSKeyboardDataProcess:
.f86f	ad 00 cf	lda $cf00			lda 	$CF00 						; read keyboard port
.f872	f0 31		beq $f8a5			beq 	_OSKExit 					; no events available.
.f874	c9 f0		cmp #$f0			cmp 	#$F0 						; check key up ?
.f876	f0 2a		beq $f8a2			beq 	_OSKUp
.f878	c9 e0		cmp #$e0			cmp 	#$E0 						; check extended scancode ?
.f87a	f0 1f		beq $f89b			beq 	_OSKShift
.f87c	0d 36 02	ora $0236			ora 	OSIsKeyShift 				; actual key code.
.f87f	48		pha				pha
.f880	20 a6 f8	jsr $f8a6			jsr 	OSKeyboardUpdateBits 		; update the up/down bits
.f883	68		pla				pla
.f884	ae 35 02	ldx $0235			ldx 	OSIsKeyUp 					; if key up reset up and shift flags.
.f887	f0 08		beq $f891			beq 	_OSKInsertQueue 			; if key down insert into queue
.f889	9c 35 02	stz $0235			stz 	OSIsKeyUp
.f88c	9c 36 02	stz $0236			stz 	OSIsKeyShift
.f88f	80 14		bra $f8a5			bra 	_OSKExit
.f891					_OSKInsertQueue:
.f891	20 3e f9	jsr $f93e			jsr 	OSTranslateToASCII 			; convert to ASCII
.f894	b0 0f		bcs $f8a5			bcs 	_OSKExit 					; carry set, exit
.f896	20 cf f8	jsr $f8cf			jsr 	OSInsertKeyboardQueue
.f899	80 0a		bra $f8a5			bra 	_OSKExit
.f89b					_OSKShift:
.f89b	a9 80		lda #$80			lda 	#$80
.f89d	8d 36 02	sta $0236			sta 	OSIsKeyShift
.f8a0	80 03		bra $f8a5			bra 	_OSKExit
.f8a2					_OSKUp:
.f8a2	ce 35 02	dec $0235			dec 	OSIsKeyUp 					; received $F0 (key up)
.f8a5					_OSKExit:
.f8a5	60		rts				rts
.f8a6					OSKeyboardUpdateBits:
.f8a6	a2 00		ldx #$00			ldx 	#0 							; offset in table
.f8a8					_OSKUCalculate:
.f8a8	c9 08		cmp #$08			cmp 	#8 							; work out the row
.f8aa	90 06		bcc $f8b2			bcc 	_OSKUHaveRow
.f8ac	e8		inx				inx
.f8ad	38		sec				sec
.f8ae	e9 08		sbc #$08			sbc 	#8
.f8b0	80 f6		bra $f8a8			bra 	_OSKUCalculate
.f8b2					_OSKUHaveRow:
.f8b2	a8		tay				tay 								; work out the column
.f8b3	a9 00		lda #$00			lda 	#0
.f8b5	38		sec				sec
.f8b6					_OSKUCalculate2:
.f8b6	2a		rol a				rol 	a
.f8b7	88		dey				dey
.f8b8	10 fc		bpl $f8b6			bpl 	_OSKUCalculate2  			; at end , A is bitmask, X is row (table entry)
.f8ba	2c 35 02	bit $0235			bit 	OSIsKeyUp 					; check up
.f8bd	30 07		bmi $f8c6			bmi 	_OSKUUp
.f8bf	1d 04 02	ora $0204,x			ora 	OSKeyStatus,x 				; down set bit
.f8c2	9d 04 02	sta $0204,x			sta 	OSKeyStatus,x
.f8c5	60		rts				rts
.f8c6					_OSKUUp:
.f8c6	49 ff		eor #$ff			eor 	#$FF 						; make maske
.f8c8	3d 04 02	and $0204,x			and 	OSKeyStatus,x 				; up clear bit
.f8cb	9d 04 02	sta $0204,x			sta 	OSKeyStatus,x
.f8ce	60		rts				rts
.f8cf					OSInsertKeyboardQueue:
.f8cf	ae 34 02	ldx $0234			ldx 	OSKeyboardQueueSize 		; check to see if full
.f8d2	e0 10		cpx #$10			cpx	 	#OSKeyboardQueueMaxSize
.f8d4	b0 06		bcs $f8dc			bcs 	_OSIKQExit
.f8d6	9d 24 02	sta $0224,x			sta 	OSKeyboardQueue,x 			; add keyboard entry to queue.
.f8d9	ee 34 02	inc $0234			inc 	OSKeyboardQueueSize
.f8dc					_OSIKQExit:
.f8dc	60		rts				rts
.f8dd					OSKeyboardInitialise:
.f8dd	a2 32		ldx #$32			ldx 	#OSIsKeyShift-OSKeyStatus
.f8df					_OSKILoop:
.f8df	9e 04 02	stz $0204,x			stz 	OSKeyStatus,x
.f8e2	ca		dex				dex
.f8e3	10 fa		bpl $f8df			bpl 	_OSKILoop
.f8e5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/scroll.asm

.f8e6					OSScrollUp:
.f8e6	a9 c0		lda #$c0			lda 	#$C0
.f8e8	64 08		stz $08				stz 	rTemp0
.f8ea	85 09		sta $09				sta 	rTemp0+1
.f8ec	ac 03 02	ldy $0203			ldy 	OSYSize
.f8ef	88		dey				dey
.f8f0					_OSSULoop1:
.f8f0	ae 02 02	ldx $0202			ldx 	OSXSize
.f8f3	5a		phy				phy
.f8f4	ac 02 02	ldy $0202			ldy 	OSXSize
.f8f7					_OSSULoop2:
.f8f7	b1 08		lda ($08),y			lda 	(rTemp0),y
.f8f9	92 08		sta ($08)			sta 	(rTemp0)
.f8fb	e6 08		inc $08				inc 	rTemp0
.f8fd	d0 02		bne $f901			bne 	_OSSUCarry
.f8ff	e6 09		inc $09				inc 	rTemp0+1
.f901					_OSSUCarry:
.f901	ca		dex				dex
.f902	d0 f3		bne $f8f7			bne 	_OSSULoop2
.f904	7a		ply				ply
.f905	88		dey				dey
.f906	d0 e8		bne $f8f0			bne 	_OSSULoop1
.f908	ac 02 02	ldy $0202			ldy 	OSXSize
.f90b					_OSSUFill:
.f90b	a9 20		lda #$20			lda 	#' '
.f90d	88		dey				dey
.f90e	91 08		sta ($08),y			sta 	(rTemp0),y
.f910	d0 f9		bne $f90b			bne 	_OSSUFill
.f912	60		rts				rts
.f913					OSScrollDown:
.f913	ae 02 02	ldx $0202			ldx 	OSXSize
.f916	ac 03 02	ldy $0203			ldy 	OSYSize
.f919	ca		dex				dex
.f91a	88		dey				dey
.f91b	88		dey				dey
.f91c	20 29 f8	jsr $f829			jsr 	OSGetAddressXY
.f91f	ac 02 02	ldy $0202			ldy 	OSXSize
.f922					_OSSDLoop:
.f922	b2 08		lda ($08)			lda 	(rTemp0)
.f924	91 08		sta ($08),y			sta 	(rTemp0),y
.f926	a5 08		lda $08				lda 	rTemp0
.f928	d0 08		bne $f932			bne 	_OSSDNoBorrow
.f92a	a5 09		lda $09				lda 	rTemp0+1
.f92c	c9 c0		cmp #$c0			cmp 	#$C0
.f92e	f0 06		beq $f936			beq 	_OSSDExit
.f930	c6 09		dec $09				dec 	rTemp0+1
.f932					_OSSDNoBorrow:
.f932	c6 08		dec $08				dec 	rTemp0
.f934	80 ec		bra $f922			bra 	_OSSDLoop
.f936					_OSSDExit:
.f936	a9 20		lda #$20			lda		#' '
.f938	88		dey				dey
.f939	91 08		sta ($08),y			sta 	(rTemp0),y
.f93b	d0 f9		bne $f936			bne 	_OSSDExit
.f93d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/drivers/translate.asm

.f93e					OSTranslateToASCII:
.f93e	aa		tax				tax
.f93f	bd 05 fb	lda $fb05,x			lda 	OSASCIIFromScanCode,x 		; get ASCII keystroke from scan code
.f942	f0 45		beq $f989			beq 	_OSTTAFail 					; wrong keyboard map/type ?
.f944	aa		tax				tax 								; save in X
.f945	ad 06 02	lda $0206			lda 	OSKeyStatus+OS_KP_LEFTCTRL_ROW
.f948	29 10		and #$10			and 	#OS_KP_LEFTCTRL_COL
.f94a	d0 36		bne $f982			bne 	_OSTTAControl 				; check for CTRL + x
.f94c	ad 06 02	lda $0206			lda 	OSKeyStatus+OS_KP_LEFTSHIFT_ROW
.f94f	29 04		and #$04			and 	#OS_KP_LEFTSHIFT_COL
.f951	d0 07		bne $f95a			bne 	_OSTTAShift 				; check for left/right shift
.f953	ad 0f 02	lda $020f			lda 	OSKeyStatus+OS_KP_RIGHTSHIFT_ROW
.f956	29 02		and #$02			and 	#OS_KP_RIGHTSHIFT_COL
.f958	f0 2c		beq $f986			beq 	_OSTTAExit
.f95a					_OSTTAShift:
.f95a	e0 61		cpx #$61			cpx 	#"a"						; check alpha
.f95c	90 0a		bcc $f968			bcc 	_OSTTANotAlpha
.f95e	e0 7b		cpx #$7b			cpx 	#"z"+1
.f960	b0 06		bcs $f968			bcs 	_OSTTANotAlpha
.f962	8a		txa				txa									; capitalise.
.f963	49 20		eor #$20			eor 	#$20
.f965	aa		tax				tax
.f966	80 1e		bra $f986			bra 	_OSTTAExit
.f968					_OSTTANotAlpha:
.f968	86 08		stx $08				stx 	rTemp0 						; save ASCII code.
.f96a	a0 00		ldy #$00			ldy 	#0 							; check the shift table
.f96c					_OSTTACheckShiftTable:
.f96c	b9 07 fc	lda $fc07,y			lda 	OSShiftFixTable+1,y 		; tax = shifted character
.f96f	aa		tax				tax
.f970	b9 06 fc	lda $fc06,y			lda 	OSShiftFixTable,y 			; check unshifted match
.f973	c5 08		cmp $08				cmp 	rTemp0
.f975	f0 0f		beq $f986			beq 	_OSTTAExit
.f977	c8		iny				iny 								; next pair
.f978	c8		iny				iny
.f979	b9 06 fc	lda $fc06,y			lda 	OSShiftFixTable,y 			; until all checked
.f97c	10 ee		bpl $f96c			bpl 	_OSTTACheckShiftTable
.f97e	a6 08		ldx $08				ldx 	rTemp0 						; not shiftable.
.f980	80 04		bra $f986			bra 	_OSTTAExit
.f982					_OSTTAControl:
.f982	8a		txa				txa
.f983	29 1f		and #$1f			and 	#31
.f985	aa		tax				tax
.f986					_OSTTAExit:
.f986	8a		txa				txa
.f987	18		clc				clc
.f988	60		rts				rts
.f989					_OSTTAFail:
.f989	38		sec				sec
.f98a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/editor/editor.asm

.f98b					OSEditNewLine:
.f98b	9c 3d 02	stz $023d			stz 	OSEditLength 				; clear buffer
.f98e					OSEditLine:
.f98e	ad 00 02	lda $0200			lda 	OSXPos 						; save edit point.
.f991	8d 38 02	sta $0238			sta 	OSXEdit
.f994	ad 01 02	lda $0201			lda 	OSYPos
.f997	8d 39 02	sta $0239			sta 	OSYEdit
.f99a	ad 3d 02	lda $023d			lda 	OSEditLength 				; edit point at end of line.
.f99d	8d 3b 02	sta $023b			sta 	OSEditPos
.f9a0	9c 3c 02	stz $023c			stz 	OSEditScroll 				; no initial scrolling
.f9a3	38		sec				sec 								; calculate edit box width.
.f9a4	ad 02 02	lda $0202			lda 	OSXSize
.f9a7	ed 00 02	sbc $0200			sbc 	OSXPos
.f9aa	3a		dec a				dec 	a 							; one forr RHS
.f9ab	8d 3a 02	sta $023a			sta 	OSEditWidth
.f9ae					_OSForceUpdate:
.f9ae	38		sec				sec 								; force repaint.
.f9af	20 6b fa	jsr $fa6b			jsr 	OSEUpdatePosition 			; update the position.
.f9b2					_OSEditLoop:
.f9b2	20 f0 fa	jsr $faf0			jsr 	OSEPositionCursor
.f9b5	20 3d fc	jsr $fc3d			jsr 	OSReadKeystroke 			; get one key.
.f9b8	c9 03		cmp #$03			cmp 	#3 							; down, up, esc, CR all exit
.f9ba	f0 0c		beq $f9c8			beq 	_OSEditExit
.f9bc	c9 06		cmp #$06			cmp 	#6
.f9be	f0 08		beq $f9c8			beq 	_OSEditExit
.f9c0	c9 0d		cmp #$0d			cmp 	#13
.f9c2	f0 04		beq $f9c8			beq 	_OSEditExit
.f9c4	c9 1b		cmp #$1b			cmp 	#27
.f9c6	d0 01		bne $f9c9			bne 	_OSEditContinue
.f9c8					_OSEditExit:
.f9c8	60		rts				rts
.f9c9					_OSEditContinue:
.f9c9	c9 01		cmp #$01			cmp 	#1 							; left (Ctrl-A)
.f9cb	f0 51		beq $fa1e			beq 	_OSELeft
.f9cd	c9 02		cmp #$02			cmp 	#2
.f9cf	f0 23		beq $f9f4			beq 	_OSEHome
.f9d1	c9 04		cmp #$04			cmp 	#4 							; right (Ctrl-D)
.f9d3	f0 3c		beq $fa11			beq 	_OSERight
.f9d5	c9 07		cmp #$07			cmp 	#7 							; delete at cursor (Delete)
.f9d7	f0 2b		beq $fa04			beq 	_OSEDelete
.f9d9	c9 08		cmp #$08			cmp 	#8 							; backspace (<-)
.f9db	f0 1f		beq $f9fc			beq 	_OSEBackspace
.f9dd	c9 09		cmp #$09			cmp 	#9 							; tab (9)
.f9df	f0 4b		beq $fa2c			beq 	_OSETab
.f9e1	c9 20		cmp #$20			cmp 	#32 						; character code, insert it
.f9e3	90 cd		bcc $f9b2			bcc 	_OSEditLoop
.f9e5					_OSAddCharacter:
.f9e5	ae 3d 02	ldx $023d			ldx 	OSEditLength 				; already full ?
.f9e8	e0 c0		cpx #$c0			cpx 	#OSTextBufferSize
.f9ea	f0 3a		beq $fa26			beq 	_OSCheckUpdate
.f9ec	20 3f fa	jsr $fa3f			jsr 	_OSEInsertCharacter 		; insert character at pos
.f9ef	ee 3b 02	inc $023b			inc 	OSEditPos 					; advance forward
.f9f2	80 ba		bra $f9ae			bra 	_OSForceUpdate 				; force a repaint.
.f9f4					_OSEHome:
.f9f4	9c 3b 02	stz $023b			stz 	OSEditPos
.f9f7	9c 3c 02	stz $023c			stz 	OSEditScroll
.f9fa	80 b2		bra $f9ae			bra 	_OSForceUpdate
.f9fc					_OSEBackspace:
.f9fc	ad 3b 02	lda $023b			lda 	OSEditPos 					; can't backspace from the start.
.f9ff	f0 25		beq $fa26			beq 	_OSCheckUpdate
.fa01	ce 3b 02	dec $023b			dec 	OSEditPos
.fa04					_OSEDelete:
.fa04	ad 3d 02	lda $023d			lda 	OSEditLength 				; not if at far right, e.g. appending to end.
.fa07	cd 3b 02	cmp $023b			cmp 	OSEditPos
.fa0a	f0 1a		beq $fa26			beq 	_OSCheckUpdate
.fa0c	20 58 fa	jsr $fa58			jsr 	_OSEDeleteCharacter 		; delete character and repaint.
.fa0f	80 9d		bra $f9ae			bra 	_OSForceUpdate
.fa11					_OSERight:
.fa11	ad 3b 02	lda $023b			lda 	OSEditPos 					; if x before end then go right
.fa14	cd 3d 02	cmp $023d			cmp 	OSEditLength
.fa17	f0 0d		beq $fa26			beq 	_OSCheckUpdate
.fa19	ee 3b 02	inc $023b			inc 	OSEditPos
.fa1c	80 08		bra $fa26			bra 	_OSCheckUpdate
.fa1e					_OSELeft:
.fa1e	ad 3b 02	lda $023b			lda 	OSEditPos 					; if x past start go left
.fa21	f0 03		beq $fa26			beq 	_OSCheckUpdate
.fa23	ce 3b 02	dec $023b			dec 	OSEditPos
.fa26					_OSCheckUpdate:
.fa26	18		clc				clc
.fa27	20 6b fa	jsr $fa6b			jsr 	OSEUpdatePosition
.fa2a	80 86		bra $f9b2			bra 	_OSEditLoop
.fa2c					_OSETab:
.fa2c	18		clc				clc
.fa2d	ad 3b 02	lda $023b			lda 	OSEditPos
.fa30	69 08		adc #$08			adc 	#8
.fa32	cd 3d 02	cmp $023d			cmp 	OSEditLength
.fa35	90 03		bcc $fa3a			bcc 	_OSTabOk
.fa37	ad 3d 02	lda $023d			lda 	OSEditLength
.fa3a					_OSTabOk:
.fa3a	8d 3b 02	sta $023b			sta 	OSEditPos
.fa3d	80 e7		bra $fa26			bra 	_OSCheckUpdate
.fa3f					_OSEInsertCharacter:
.fa3f	48		pha				pha 								; save character
.fa40	ae 3d 02	ldx $023d			ldx 	OSEditLength
.fa43	e8		inx				inx
.fa44					_OSMakeSpace:
.fa44	ca		dex				dex
.fa45	bd 3e 02	lda $023e,x			lda 	OSEditBuffer,x
.fa48	9d 3f 02	sta $023f,x			sta 	OSEditBuffer+1,x
.fa4b	ec 3b 02	cpx $023b			cpx 	OSEditPos
.fa4e	d0 f4		bne $fa44			bne 	_OSMakeSpace
.fa50	68		pla				pla
.fa51	9d 3e 02	sta $023e,x			sta 	OSEditBuffer,x
.fa54	ee 3d 02	inc $023d			inc 	OSEditLength
.fa57	60		rts				rts
.fa58					_OSEDeleteCharacter:
.fa58	ae 3b 02	ldx $023b			ldx 	OSEditPos
.fa5b					_OSERemove:
.fa5b	bd 3f 02	lda $023f,x			lda 	OSEditBuffer+1,x
.fa5e	9d 3e 02	sta $023e,x			sta 	OSEditBuffer,x
.fa61	e8		inx				inx
.fa62	ec 3d 02	cpx $023d			cpx 	OSEditLength
.fa65	90 f4		bcc $fa5b			bcc 	_OSERemove
.fa67	ce 3d 02	dec $023d			dec 	OSEditLength
.fa6a	60		rts				rts
.fa6b					OSEUpdatePosition:
.fa6b	08		php				php 								; save repaint flag.
.fa6c	ad 3c 02	lda $023c			lda 	OSEditScroll 				; save old edit scroll position.
.fa6f	48		pha				pha
.fa70	20 86 fa	jsr $fa86			jsr 	OSECheckPosition 			; check position in range of text
.fa73	20 9d fa	jsr $fa9d			jsr 	OSECheckVisible 			; is it on screen ?
.fa76	68		pla				pla 								; has the edit scroll position changed ?
.fa77	cd 3c 02	cmp $023c			cmp 	OSEditScroll
.fa7a	f0 03		beq $fa7f			beq 	_OSECVNoChange
.fa7c	28		plp				plp 								; if so, set repaint flag
.fa7d	38		sec				sec
.fa7e	08		php				php
.fa7f					_OSECVNoChange:
.fa7f	28		plp				plp	 								; do we need a repaint.
.fa80	90 03		bcc $fa85			bcc 	_OSECVNoRepaint
.fa82	20 c5 fa	jsr $fac5			jsr 	OSERepaint
.fa85					_OSECVNoRepaint:
.fa85	60		rts				rts
.fa86					OSECheckPosition:
.fa86	ad 3b 02	lda $023b			lda 	OSEditPos 					; if position = 255 (e.g. -1) then off left.
.fa89	c9 ff		cmp #$ff			cmp 	#255
.fa8b	d0 04		bne $fa91			bne 	_OSECPNotLeft
.fa8d	9c 3b 02	stz $023b			stz 	OSEditPos
.fa90	60		rts				rts
.fa91					_OSECPNotLeft:
.fa91	cd 3d 02	cmp $023d			cmp 	OSEditLength 				; if >= edit length reset to edit length
.fa94	d0 06		bne $fa9c			bne 	_OSEPCNotRight
.fa96	ad 3d 02	lda $023d			lda 	OSEditLength
.fa99	8d 3b 02	sta $023b			sta 	OSEditPos
.fa9c					_OSEPCNotRight:
.fa9c	60		rts				rts
.fa9d					OSECheckVisible:
.fa9d	ad 3b 02	lda $023b			lda 	OSEditPos 					; if editpos < editscroll
.faa0	cd 3c 02	cmp $023c			cmp 	OSEditScroll
.faa3	b0 04		bcs $faa9			bcs 	_OSENotOffLeft
.faa5	8d 3c 02	sta $023c			sta 	OSEditScroll 				; then scroll at that position.
.faa8	60		rts				rts
.faa9					_OSENotOffLeft:
.faa9	38		sec				sec
.faaa	ad 3b 02	lda $023b			lda 	OSEditPos
.faad	ed 3c 02	sbc $023c			sbc 	OSEditScroll
.fab0	cd 3a 02	cmp $023a			cmp 	OSEditWidth
.fab3	b0 01		bcs $fab6			bcs 	_OSEOffRight
.fab5	60		rts				rts
.fab6					_OSEOffRight:
.fab6	38		sec				sec
.fab7	ad 3b 02	lda $023b			lda 	OSEditPos
.faba	ed 3a 02	sbc $023a			sbc 	OSEditWidth
.fabd	b0 02		bcs $fac1			bcs 	_OSENoTrim
.fabf	a9 00		lda #$00			lda 	#0
.fac1					_OSENoTrim:
.fac1	8d 3c 02	sta $023c			sta 	OSEditScroll
.fac4	60		rts				rts
.fac5					OSERepaint:
.fac5	ad 38 02	lda $0238			lda 	OSXEdit 					; reset drawing pos
.fac8	8d 00 02	sta $0200			sta 	OSXPos
.facb	ad 39 02	lda $0239			lda 	OSYEdit
.face	8d 01 02	sta $0201			sta 	OSYPos
.fad1	ae 3c 02	ldx $023c			ldx 	OSEditScroll 				; start data from here.
.fad4	ac 3a 02	ldy $023a			ldy 	OSEditWidth 				; counter
.fad7					_OSERepaintLoop:
.fad7	bd 3e 02	lda $023e,x			lda 	OSEditBuffer,x 				; read character from buffer
.fada	ec 3d 02	cpx $023d			cpx 	OSEditLength 				; past end of buffer
.fadd	90 02		bcc $fae1			bcc 	_OSEOut
.fadf	a9 20		lda #$20			lda 	#" "
.fae1	da		phx		_OSEOut:phx 								; output character.
.fae2	5a		phy				phy
.fae3	20 1b f8	jsr $f81b			jsr 	OSWritePhysical
.fae6	7a		ply				ply
.fae7	fa		plx				plx
.fae8	ee 00 02	inc $0200			inc 	OSXPos 						; next screen pos
.faeb	e8		inx				inx									; next char
.faec	88		dey				dey 								; one fewer to do.
.faed	d0 e8		bne $fad7			bne 	_OSERepaintLoop
.faef	60		rts				rts
.faf0					OSEPositionCursor:
.faf0	38		sec				sec
.faf1	ad 3b 02	lda $023b			lda 	OSEditPos
.faf4	ed 3c 02	sbc $023c			sbc 	OSEditScroll
.faf7	18		clc				clc
.faf8	6d 38 02	adc $0238			adc 	OSXEdit
.fafb	8d 00 02	sta $0200			sta 	OSXPos
.fafe	ad 39 02	lda $0239			lda 	OSYEdit
.fb01	8d 01 02	sta $0201			sta 	OSYPos
.fb04	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/generated/ps2convert.asm

.fb05					OSASCIIFromScanCode:
>fb05	00					.byte	$00 ; $00
>fb06	19					.byte	$19 ; $01 chr$(25)
>fb07	00					.byte	$00 ; $02
>fb08	15					.byte	$15 ; $03 chr$(21)
>fb09	13					.byte	$13 ; $04 chr$(19)
>fb0a	11					.byte	$11 ; $05 chr$(17)
>fb0b	12					.byte	$12 ; $06 chr$(18)
>fb0c	00					.byte	$00 ; $07
>fb0d	00					.byte	$00 ; $08
>fb0e	1a					.byte	$1a ; $09 chr$(26)
>fb0f	18					.byte	$18 ; $0a chr$(24)
>fb10	16					.byte	$16 ; $0b chr$(22)
>fb11	14					.byte	$14 ; $0c chr$(20)
>fb12	09					.byte	$09 ; $0d chr$(9)
>fb13	60					.byte	$60 ; $0e '`'
>fb14	00					.byte	$00 ; $0f
>fb15	00					.byte	$00 ; $10
>fb16	00					.byte	$00 ; $11
>fb17	00					.byte	$00 ; $12
>fb18	00					.byte	$00 ; $13
>fb19	00					.byte	$00 ; $14
>fb1a	71					.byte	$71 ; $15 'q'
>fb1b	31					.byte	$31 ; $16 '1'
>fb1c	00					.byte	$00 ; $17
>fb1d	00					.byte	$00 ; $18
>fb1e	00					.byte	$00 ; $19
>fb1f	7a					.byte	$7a ; $1a 'z'
>fb20	73					.byte	$73 ; $1b 's'
>fb21	61					.byte	$61 ; $1c 'a'
>fb22	77					.byte	$77 ; $1d 'w'
>fb23	32					.byte	$32 ; $1e '2'
>fb24	00					.byte	$00 ; $1f
>fb25	00					.byte	$00 ; $20
>fb26	63					.byte	$63 ; $21 'c'
>fb27	78					.byte	$78 ; $22 'x'
>fb28	64					.byte	$64 ; $23 'd'
>fb29	65					.byte	$65 ; $24 'e'
>fb2a	34					.byte	$34 ; $25 '4'
>fb2b	33					.byte	$33 ; $26 '3'
>fb2c	00					.byte	$00 ; $27
>fb2d	00					.byte	$00 ; $28
>fb2e	20					.byte	$20 ; $29 ' '
>fb2f	76					.byte	$76 ; $2a 'v'
>fb30	66					.byte	$66 ; $2b 'f'
>fb31	74					.byte	$74 ; $2c 't'
>fb32	72					.byte	$72 ; $2d 'r'
>fb33	35					.byte	$35 ; $2e '5'
>fb34	00					.byte	$00 ; $2f
>fb35	00					.byte	$00 ; $30
>fb36	6e					.byte	$6e ; $31 'n'
>fb37	62					.byte	$62 ; $32 'b'
>fb38	68					.byte	$68 ; $33 'h'
>fb39	67					.byte	$67 ; $34 'g'
>fb3a	79					.byte	$79 ; $35 'y'
>fb3b	36					.byte	$36 ; $36 '6'
>fb3c	00					.byte	$00 ; $37
>fb3d	00					.byte	$00 ; $38
>fb3e	00					.byte	$00 ; $39
>fb3f	6d					.byte	$6d ; $3a 'm'
>fb40	6a					.byte	$6a ; $3b 'j'
>fb41	75					.byte	$75 ; $3c 'u'
>fb42	37					.byte	$37 ; $3d '7'
>fb43	38					.byte	$38 ; $3e '8'
>fb44	00					.byte	$00 ; $3f
>fb45	00					.byte	$00 ; $40
>fb46	2c					.byte	$2c ; $41 ','
>fb47	6b					.byte	$6b ; $42 'k'
>fb48	69					.byte	$69 ; $43 'i'
>fb49	6f					.byte	$6f ; $44 'o'
>fb4a	30					.byte	$30 ; $45 '0'
>fb4b	39					.byte	$39 ; $46 '9'
>fb4c	00					.byte	$00 ; $47
>fb4d	00					.byte	$00 ; $48
>fb4e	2e					.byte	$2e ; $49 '.'
>fb4f	2f					.byte	$2f ; $4a '/'
>fb50	6c					.byte	$6c ; $4b 'l'
>fb51	3b					.byte	$3b ; $4c ';'
>fb52	70					.byte	$70 ; $4d 'p'
>fb53	2d					.byte	$2d ; $4e '-'
>fb54	00					.byte	$00 ; $4f
>fb55	00					.byte	$00 ; $50
>fb56	00					.byte	$00 ; $51
>fb57	27					.byte	$27 ; $52 '''
>fb58	00					.byte	$00 ; $53
>fb59	5b					.byte	$5b ; $54 '['
>fb5a	3d					.byte	$3d ; $55 '='
>fb5b	00					.byte	$00 ; $56
>fb5c	00					.byte	$00 ; $57
>fb5d	00					.byte	$00 ; $58
>fb5e	00					.byte	$00 ; $59
>fb5f	0d					.byte	$0d ; $5a chr$(13)
>fb60	5d					.byte	$5d ; $5b ']'
>fb61	00					.byte	$00 ; $5c
>fb62	7c					.byte	$7c ; $5d '|'
>fb63	00					.byte	$00 ; $5e
>fb64	00					.byte	$00 ; $5f
>fb65	00					.byte	$00 ; $60
>fb66	00					.byte	$00 ; $61
>fb67	00					.byte	$00 ; $62
>fb68	00					.byte	$00 ; $63
>fb69	00					.byte	$00 ; $64
>fb6a	00					.byte	$00 ; $65
>fb6b	08					.byte	$08 ; $66 chr$(8)
>fb6c	00					.byte	$00 ; $67
>fb6d	00					.byte	$00 ; $68
>fb6e	00					.byte	$00 ; $69
>fb6f	00					.byte	$00 ; $6a
>fb70	01					.byte	$01 ; $6b chr$(1)
>fb71	00					.byte	$00 ; $6c
>fb72	00					.byte	$00 ; $6d
>fb73	00					.byte	$00 ; $6e
>fb74	00					.byte	$00 ; $6f
>fb75	00					.byte	$00 ; $70
>fb76	00					.byte	$00 ; $71
>fb77	03					.byte	$03 ; $72 chr$(3)
>fb78	00					.byte	$00 ; $73
>fb79	04					.byte	$04 ; $74 chr$(4)
>fb7a	06					.byte	$06 ; $75 chr$(6)
>fb7b	1b					.byte	$1b ; $76 chr$(27)
>fb7c	00					.byte	$00 ; $77
>fb7d	00					.byte	$00 ; $78
>fb7e	00					.byte	$00 ; $79
>fb7f	00					.byte	$00 ; $7a
>fb80	00					.byte	$00 ; $7b
>fb81	00					.byte	$00 ; $7c
>fb82	00					.byte	$00 ; $7d
>fb83	00					.byte	$00 ; $7e
>fb84	00					.byte	$00 ; $7f
>fb85	00					.byte	$00 ; $80
>fb86	00					.byte	$00 ; $81
>fb87	00					.byte	$00 ; $82
>fb88	17					.byte	$17 ; $83 chr$(23)
>fb89	00					.byte	$00 ; $84
>fb8a	00					.byte	$00 ; $85
>fb8b	00					.byte	$00 ; $86
>fb8c	00					.byte	$00 ; $87
>fb8d	00					.byte	$00 ; $88
>fb8e	00					.byte	$00 ; $89
>fb8f	00					.byte	$00 ; $8a
>fb90	00					.byte	$00 ; $8b
>fb91	00					.byte	$00 ; $8c
>fb92	00					.byte	$00 ; $8d
>fb93	00					.byte	$00 ; $8e
>fb94	00					.byte	$00 ; $8f
>fb95	00					.byte	$00 ; $90
>fb96	00					.byte	$00 ; $91
>fb97	00					.byte	$00 ; $92
>fb98	00					.byte	$00 ; $93
>fb99	00					.byte	$00 ; $94
>fb9a	00					.byte	$00 ; $95
>fb9b	00					.byte	$00 ; $96
>fb9c	00					.byte	$00 ; $97
>fb9d	00					.byte	$00 ; $98
>fb9e	00					.byte	$00 ; $99
>fb9f	00					.byte	$00 ; $9a
>fba0	00					.byte	$00 ; $9b
>fba1	00					.byte	$00 ; $9c
>fba2	00					.byte	$00 ; $9d
>fba3	00					.byte	$00 ; $9e
>fba4	00					.byte	$00 ; $9f
>fba5	00					.byte	$00 ; $a0
>fba6	00					.byte	$00 ; $a1
>fba7	00					.byte	$00 ; $a2
>fba8	00					.byte	$00 ; $a3
>fba9	00					.byte	$00 ; $a4
>fbaa	00					.byte	$00 ; $a5
>fbab	00					.byte	$00 ; $a6
>fbac	00					.byte	$00 ; $a7
>fbad	00					.byte	$00 ; $a8
>fbae	00					.byte	$00 ; $a9
>fbaf	00					.byte	$00 ; $aa
>fbb0	00					.byte	$00 ; $ab
>fbb1	00					.byte	$00 ; $ac
>fbb2	00					.byte	$00 ; $ad
>fbb3	00					.byte	$00 ; $ae
>fbb4	00					.byte	$00 ; $af
>fbb5	00					.byte	$00 ; $b0
>fbb6	00					.byte	$00 ; $b1
>fbb7	00					.byte	$00 ; $b2
>fbb8	00					.byte	$00 ; $b3
>fbb9	00					.byte	$00 ; $b4
>fbba	00					.byte	$00 ; $b5
>fbbb	00					.byte	$00 ; $b6
>fbbc	00					.byte	$00 ; $b7
>fbbd	00					.byte	$00 ; $b8
>fbbe	00					.byte	$00 ; $b9
>fbbf	00					.byte	$00 ; $ba
>fbc0	00					.byte	$00 ; $bb
>fbc1	00					.byte	$00 ; $bc
>fbc2	00					.byte	$00 ; $bd
>fbc3	00					.byte	$00 ; $be
>fbc4	00					.byte	$00 ; $bf
>fbc5	00					.byte	$00 ; $c0
>fbc6	00					.byte	$00 ; $c1
>fbc7	00					.byte	$00 ; $c2
>fbc8	00					.byte	$00 ; $c3
>fbc9	00					.byte	$00 ; $c4
>fbca	00					.byte	$00 ; $c5
>fbcb	00					.byte	$00 ; $c6
>fbcc	00					.byte	$00 ; $c7
>fbcd	00					.byte	$00 ; $c8
>fbce	00					.byte	$00 ; $c9
>fbcf	00					.byte	$00 ; $ca
>fbd0	00					.byte	$00 ; $cb
>fbd1	00					.byte	$00 ; $cc
>fbd2	00					.byte	$00 ; $cd
>fbd3	00					.byte	$00 ; $ce
>fbd4	00					.byte	$00 ; $cf
>fbd5	00					.byte	$00 ; $d0
>fbd6	00					.byte	$00 ; $d1
>fbd7	00					.byte	$00 ; $d2
>fbd8	00					.byte	$00 ; $d3
>fbd9	00					.byte	$00 ; $d4
>fbda	00					.byte	$00 ; $d5
>fbdb	00					.byte	$00 ; $d6
>fbdc	00					.byte	$00 ; $d7
>fbdd	00					.byte	$00 ; $d8
>fbde	00					.byte	$00 ; $d9
>fbdf	00					.byte	$00 ; $da
>fbe0	00					.byte	$00 ; $db
>fbe1	00					.byte	$00 ; $dc
>fbe2	00					.byte	$00 ; $dd
>fbe3	00					.byte	$00 ; $de
>fbe4	00					.byte	$00 ; $df
>fbe5	00					.byte	$00 ; $e0
>fbe6	00					.byte	$00 ; $e1
>fbe7	00					.byte	$00 ; $e2
>fbe8	00					.byte	$00 ; $e3
>fbe9	00					.byte	$00 ; $e4
>fbea	00					.byte	$00 ; $e5
>fbeb	00					.byte	$00 ; $e6
>fbec	00					.byte	$00 ; $e7
>fbed	00					.byte	$00 ; $e8
>fbee	45					.byte	$45 ; $e9 'E'
>fbef	00					.byte	$00 ; $ea
>fbf0	01					.byte	$01 ; $eb chr$(1)
>fbf1	02					.byte	$02 ; $ec chr$(2)
>fbf2	00					.byte	$00 ; $ed
>fbf3	00					.byte	$00 ; $ee
>fbf4	00					.byte	$00 ; $ef
>fbf5	00					.byte	$00 ; $f0
>fbf6	07					.byte	$07 ; $f1 chr$(7)
>fbf7	03					.byte	$03 ; $f2 chr$(3)
>fbf8	00					.byte	$00 ; $f3
>fbf9	04					.byte	$04 ; $f4 chr$(4)
>fbfa	06					.byte	$06 ; $f5 chr$(6)
>fbfb	00					.byte	$00 ; $f6
>fbfc	00					.byte	$00 ; $f7
>fbfd	00					.byte	$00 ; $f8
>fbfe	00					.byte	$00 ; $f9
>fbff	00					.byte	$00 ; $fa
>fc00	00					.byte	$00 ; $fb
>fc01	00					.byte	$00 ; $fc
>fc02	00					.byte	$00 ; $fd
>fc03	00					.byte	$00 ; $fe
>fc04	00					.byte	$00 ; $ff
>fc05	ff					.byte	$FF
.fc06					OSShiftFixTable:
>fc06	60 7e					.byte	$60,$7e		; ` => ~
>fc08	31 21					.byte	$31,$21		; 1 => !
>fc0a	32 40					.byte	$32,$40		; 2 => @
>fc0c	33 23					.byte	$33,$23		; 3 => #
>fc0e	34 24					.byte	$34,$24		; 4 => $
>fc10	35 25					.byte	$35,$25		; 5 => %
>fc12	36 5e					.byte	$36,$5e		; 6 => ^
>fc14	37 26					.byte	$37,$26		; 7 => &
>fc16	38 2a					.byte	$38,$2a		; 8 => *
>fc18	39 28					.byte	$39,$28		; 9 => (
>fc1a	30 29					.byte	$30,$29		; 0 => )
>fc1c	2d 5f					.byte	$2d,$5f		; - => _
>fc1e	3d 2b					.byte	$3d,$2b		; = => +
>fc20	3b 3a					.byte	$3b,$3a		; ; => :
>fc22	27 22					.byte	$27,$22		; ' => "
>fc24	2c 3c					.byte	$2c,$3c		; , => <
>fc26	2e 3e					.byte	$2e,$3e		; . => >
>fc28	2f 3f					.byte	$2f,$3f		; / => ?
>fc2a	ff					.byte	$FF
=2					OS_KP_LEFTCTRL_ROW = 2
=$10					OS_KP_LEFTCTRL_COL = $10
=2					OS_KP_LEFTSHIFT_ROW = 2
=$04					OS_KP_LEFTSHIFT_COL = $04
=11					OS_KP_RIGHTSHIFT_ROW = 11
=$02					OS_KP_RIGHTSHIFT_COL = $02
=4					OS_KP_C_ROW = 4
=$02					OS_KP_C_COL = $02
=3					OS_KP_Z_ROW = 3
=$04					OS_KP_Z_COL = $04
=4					OS_KP_X_ROW = 4
=$04					OS_KP_X_COL = $04
=8					OS_KP_K_ROW = 8
=$04					OS_KP_K_COL = $04
=7					OS_KP_M_ROW = 7
=$04					OS_KP_M_COL = $04
=9					OS_KP_L_ROW = 9
=$08					OS_KP_L_COL = $08

;******  Return to file: include.files


;******  Processing file: src/keyboard/keyboard.asm

.fc2b					OSIsKeyAvailable:
.fc2b	48		pha				pha
.fc2c	18		clc				clc
.fc2d	ad 34 02	lda $0234			lda 	OSKeyboardQueueSize  		; get entries in queue
.fc30	d0 01		bne $fc33			bne 	_OSIKAHasKey
.fc32	38		sec				sec
.fc33					_OSIKAHasKey:
.fc33	68		pla				pla
.fc34	60		rts				rts
.fc35					OSReadKeyboard:
.fc35	da		phx				phx
.fc36	a2 01		ldx #$01			ldx 	#1
.fc38	20 5e fc	jsr $fc5e			jsr 	OSReadDevice
.fc3b	fa		plx				plx
.fc3c	60		rts				rts
.fc3d					OSReadKeystroke:
.fc3d	da		phx				phx 								; save XY
.fc3e	5a		phy				phy
.fc3f	20 15 f8	jsr $f815			jsr 	OSReadPhysical 				; save old character
.fc42	8d 37 02	sta $0237			sta 	OSRKOriginal
.fc45	a9 7f		lda #$7f			lda 	#$7F 						; write prompt
.fc47	20 1b f8	jsr $f81b			jsr 	OSWritePhysical
.fc4a					_OSWaitKey:
.fc4a	20 6f f8	jsr $f86f			jsr 	OSKeyboardDataProcess 		; this scans the keyboard, could be interrupt
.fc4d	20 35 fc	jsr $fc35			jsr 	OSReadKeyboard 				; key available
.fc50	b0 f8		bcs $fc4a			bcs 	_OSWaitKey
.fc52	48		pha				pha 								; save key
.fc53	ad 37 02	lda $0237			lda 	OSRKOriginal 				; old character back
.fc56	20 1b f8	jsr $f81b			jsr 	OSWritePhysical
.fc59	68		pla				pla 								; restore
.fc5a	7a		ply				ply
.fc5b	fa		plx				plx
.fc5c	18		clc				clc 								; success
.fc5d	60		rts				rts
.fc5e					OSReadDevice:
.fc5e	20 2b fc	jsr $fc2b			jsr 	OSIsKeyAvailable 			; key available ?
.fc61	b0 19		bcs $fc7c			bcs 	_OSRDExit
.fc63	ad 24 02	lda $0224			lda 	OSKeyboardQueue 			; push char on stack
.fc66	48		pha				pha
.fc67	da		phx				phx
.fc68	a2 00		ldx #$00			ldx		#0 							; remove from queue array
.fc6a					_OSRDDequeue:
.fc6a	bd 25 02	lda $0225,x			lda 	OSKeyboardQueue+1,x
.fc6d	9d 24 02	sta $0224,x			sta 	OSKeyboardQueue,x
.fc70	e8		inx				inx
.fc71	ec 34 02	cpx $0234			cpx 	OSKeyboardQueueSize
.fc74	d0 f4		bne $fc6a			bne 	_OSRDDequeue
.fc76	ce 34 02	dec $0234			dec 	OSKeyboardQueueSize			; dec queue count
.fc79	fa		plx				plx
.fc7a	68		pla				pla 								; restore key
.fc7b	18		clc				clc
.fc7c					_OSRDExit:
.fc7c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/screen/charout.asm

.fc7d					OSWriteScreen:
.fc7d	da		phx				phx
.fc7e	a2 00		ldx #$00			ldx 	#0
.fc80	20 85 fc	jsr $fc85			jsr 	OSWriteDevice
.fc83	fa		plx				plx
.fc84	60		rts				rts
.fc85					OSWriteDevice:
.fc85	48		pha				pha
.fc86	da		phx				phx
.fc87	5a		phy				phy
.fc88	c9 20		cmp #$20			cmp 	#32 						; standard character
.fc8a	b0 0c		bcs $fc98			bcs 	_OSWriteDirect
.fc8c	c9 10		cmp #$10			cmp 	#16 						; 16-32 for set colours, reserved.
.fc8e	b0 0e		bcs $fc9e			bcs 	_OSWriteDeviceExit
.fc90	0a		asl a				asl 	a 							; make to an offset in vector table
.fc91	aa		tax				tax
.fc92	4a		lsr a				lsr 	a
.fc93	20 a3 fc	jsr $fca3			jsr 	_OSCallVectorCode
.fc96	80 06		bra $fc9e			bra 	_OSWriteDeviceExit
.fc98					_OSWriteDirect:
.fc98	20 1b f8	jsr $f81b			jsr 	OSWritePhysical
.fc9b	20 e7 fc	jsr $fce7			jsr 	_OSCursorAdvance
.fc9e					_OSWriteDeviceExit:
.fc9e	7a		ply				ply
.fc9f	fa		plx				plx
.fca0	68		pla				pla
.fca1	18		clc				clc 								; written fine.
.fca2	60		rts				rts
.fca3					_OSCallVectorCode:
.fca3	7c a7 fc	jmp ($fca7,x)			jmp 	(_OSWDVector,x)
.fca6					_OSWNoFunction:
.fca6	60		rts				rts
.fca7					_OSWDVector:
>fca7	a6 fc						.word 	_OSWNoFunction 				; $00 	No operation
>fca9	d5 fc						.word 	_OSCursorLeft 				; $01 	Left 		(Ctrl-A)
>fcab	1e fd						.word 	OSHomeCursor 				; $02 	Home Cursor (Ctrl-B)
>fcad	f5 fc						.word 	_OSCursorDown 				; $03 	Down 		(Ctrl-C)
>fcaf	de fc						.word 	_OSCursorRight 				; $04 	Right 		(Ctrl-D)
>fcb1	e7 fc						.word 	_OSCursorAdvance			; $05 	Advance
>fcb3	07 fd						.word 	_OSCursorUp 				; $06	Up 			(Ctrl-F)
>fcb5	a6 fc						.word 	_OSWNoFunction 				; $07 	Delete 		(Del)
>fcb7	c7 fc						.word 	_OSBackspace				; $08 	Backspace 	(Backspace)
>fcb9	13 fd						.word 	_OSWHTab 					; $09	Tab
>fcbb	a6 fc						.word 	_OSWNoFunction 				; $0A
>fcbd	a6 fc						.word 	_OSWNoFunction 				; $0B
>fcbf	4f f8						.word 	OSClearScreen 				; $0C	ClearScreen	(Ctrl-L)
>fcc1	f2 fc						.word 	_OSNewLine 					; $0D 	CarriageRet (Enter)
>fcc3	e6 f8						.word 	OSScrollUp 					; $0E 	Scroll Up 	(e.g. off bottom)
>fcc5	13 f9						.word 	OSScrollDown 				; $0F 	Scroll Down (e.g. off top)
.fcc7					_OSBackspace:
.fcc7	ad 00 02	lda $0200			lda 	OSXPos 						; left side already ?
.fcca	f0 11		beq $fcdd			beq 	_OSCLExit
.fccc	ce 00 02	dec $0200			dec 	OSXPos
.fccf	a9 20		lda #$20			lda 	#' '
.fcd1	20 1b f8	jsr $f81b			jsr 	OSWritePhysical
.fcd4	60		rts				rts
.fcd5					_OSCursorLeft:
.fcd5	ad 00 02	lda $0200			lda 	OSXPos 						; left side
.fcd8	f0 03		beq $fcdd			beq 	_OSCLExit 					; yes, exit
.fcda	ce 00 02	dec $0200			dec 	OSXPos 						; cursor left
.fcdd					_OSCLExit:
.fcdd	60		rts				rts
.fcde					_OSCursorRight:
.fcde	ad 00 02	lda $0200			lda 	OSXPos 						; reached right side ?
.fce1	1a		inc a				inc 	a
.fce2	cd 02 02	cmp $0202			cmp 	OSXSize
.fce5	f0 1f		beq $fd06			beq 	_OSCRExit 					; yes, exit.
.fce7					_OSCursorAdvance:
.fce7	ee 00 02	inc $0200			inc 	OSXPos 						; advance cursor and position.
.fcea	ad 00 02	lda $0200			lda 	OSXPos 						; reached RHS
.fced	cd 02 02	cmp $0202			cmp 	OSXSize
.fcf0	90 14		bcc $fd06			bcc 	_OSCRExit 					; if so exit.
.fcf2					_OSNewLine:
.fcf2	9c 00 02	stz $0200			stz 	OSXPos 						; start next line.
.fcf5					_OSCursorDown:
.fcf5	ee 01 02	inc $0201			inc 	OSYPos
.fcf8	ad 01 02	lda $0201			lda 	OSYPos 						; reached bottom
.fcfb	cd 03 02	cmp $0203			cmp 	OSYSize
.fcfe	90 06		bcc $fd06			bcc 	_OSCRExit
.fd00	ce 01 02	dec $0201			dec 	OSYPos 						; back to bottom line.
.fd03	20 e6 f8	jsr $f8e6			jsr 	OSScrollUp 					; scroll whole screen up.
.fd06					_OSCRExit:
.fd06	60		rts				rts
.fd07					_OSCursorUp:
.fd07	ce 01 02	dec $0201			dec 	OSYPos 						; up
.fd0a	10 fa		bpl $fd06			bpl 	_OSCRExit 					; still on screen
.fd0c	ee 01 02	inc $0201			inc 	OSYPos 						; fix up
.fd0f	20 13 f9	jsr $f913			jsr 	OSScrollDown 				; scroll down.
.fd12	60		rts				rts
.fd13					_OSWHTab:
.fd13	20 e7 fc	jsr $fce7			jsr 	_OSCursorAdvance
.fd16	ad 00 02	lda $0200			lda 	OSXPos
.fd19	29 07		and #$07			and 	#7
.fd1b	d0 f6		bne $fd13			bne 	_OSWHTab
.fd1d	60		rts				rts
.fd1e					OSHomeCursor:
.fd1e	9c 00 02	stz $0200			stz 	OSXPos
.fd21	9c 01 02	stz $0201			stz 	OSYPos
.fd24	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/utility/setup.asm

.fd25					OSInitialise:
.fd25	a9 28		lda #$28			lda 	#40 						; 40 x 30 display
.fd27	8d 02 02	sta $0202			sta 	OSXSize
.fd2a	a9 1e		lda #$1e			lda 	#30
.fd2c	8d 03 02	sta $0203			sta 	OSYSize
.fd2f	20 4f f8	jsr $f84f			jsr 	OSClearScreen 				; clear the display
.fd32	20 dd f8	jsr $f8dd			jsr 	OSKeyboardInitialise 		; reset the keyboard state.
.fd35	60		rts				rts
.fd36					OSGetScreenSize:
.fd36	ae 02 02	ldx $0202			ldx 	OSXSize
.fd39	ac 03 02	ldy $0203			ldy 	OSYSize
.fd3c	60		rts				rts

;******  Return to file: include.files


;******  Return to file: osrom.asm

.fd3d					MainPrompt:
>fd3d	2a 2a 2a 20 4e 65 6f 36				.text 	"*** Neo6502 RetroComputer ***",13,13
>fd45	35 30 32 20 52 65 74 72 6f 43 6f 6d 70 75 74 65
>fd55	72 20 2a 2a 2a 0d 0d
>fd5c	48 61 72 64 77 61 72 65				.text 	"Hardware:",13
>fd64	3a 0d
>fd66	20 20 20 20 4f 6c 69 6d				.text	"    Olimex Ltd, 2 Pravda St",13
>fd6e	65 78 20 4c 74 64 2c 20 32 20 50 72 61 76 64 61
>fd7e	20 53 74 0d
>fd82	20 20 20 20 50 4f 20 42				.text 	"    PO Box 237, Plovdiv 4000 Bulgaria",13
>fd8a	6f 78 20 32 33 37 2c 20 50 6c 6f 76 64 69 76 20
>fd9a	34 30 30 30 20 42 75 6c 67 61 72 69 61 0d
>fda8	53 6f 66 74 77 61 72 65				.text 	"Software:",13
>fdb0	3a 0d
>fdb2	20 20 20 20 50 61 75 6c				.text 	"    Paul Robson paul@robsons.org.uk",13
>fdba	20 52 6f 62 73 6f 6e 20 70 61 75 6c 40 72 6f 62
>fdca	73 6f 6e 73 2e 6f 72 67 2e 75 6b 0d
>fdd6	0d 00						.byte 	13,0

;******  Processing file: src/generated/vectors.asmx

.ffe5	4c 36 fd	jmp $fd36		jmp		OSGetScreenSize          ; Get size of screen to XY
.ffe8	4c 2b fc	jmp $fc2b		jmp		OSIsKeyAvailable         ; Check if key available (CS if so)
.ffeb	4c 3d fc	jmp $fc3d		jmp		OSReadKeystroke          ; Read A from keyboard, showing cursor while waiting.
.ffee	4c 35 fc	jmp $fc35		jmp		OSReadKeyboard           ; Read A from keyboard (device 1), CC = success
.fff1	4c 7d fc	jmp $fc7d		jmp		OSWriteScreen            ; Write A to screen (device 0), CC = success
.fff4	4c 5e fc	jmp $fc5e		jmp		OSReadDevice             ; Read device X to A, CC = success
.fff7	4c 85 fc	jmp $fc85		jmp		OSWriteDevice            ; Write A to device X, CC = success

;******  Return to file: osrom.asm

>fffa	14 f8						.word 	NoInt 						; NMI
>fffc	00 f8						.word 	Boot 						; Reset
>fffe	14 f8						.word 	NoInt						; IRQ

;******  End of listing
